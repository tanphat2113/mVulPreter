digraph "0_linux_744692dc059845b2a3022119871846e74d4f6e11_14@API" {
"1000232" [label="(Call,ext4_count_free_blocks(mpd->inode->i_sb))"];
"1000227" [label="(Call,err == -ENOSPC &&\n\t\t    ext4_count_free_blocks(mpd->inode->i_sb))"];
"1000246" [label="(Call,ext4_msg(mpd->inode->i_sb, KERN_CRIT,\n\t\t\t \"delayed block allocation failed for inode %lu at \"\n\t\t\t \"logical offset %llu with max blocks %zd with \"\n\t\t\t \"error %d\n\", mpd->inode->i_ino,\n\t\t\t (unsigned long long) next,\n\t\t\t mpd->b_size >> mpd->inode->i_blkbits, err))"];
"1000273" [label="(Call,err == -ENOSPC)"];
"1000294" [label="(Return,return err;)"];
"1000228" [label="(Call,err == -ENOSPC)"];
"1000246" [label="(Call,ext4_msg(mpd->inode->i_sb, KERN_CRIT,\n\t\t\t \"delayed block allocation failed for inode %lu at \"\n\t\t\t \"logical offset %llu with max blocks %zd with \"\n\t\t\t \"error %d\n\", mpd->inode->i_ino,\n\t\t\t (unsigned long long) next,\n\t\t\t mpd->b_size >> mpd->inode->i_blkbits, err))"];
"1000227" [label="(Call,err == -ENOSPC &&\n\t\t    ext4_count_free_blocks(mpd->inode->i_sb))"];
"1000254" [label="(Call,mpd->inode->i_ino)"];
"1000274" [label="(Identifier,err)"];
"1000280" [label="(Identifier,mpd)"];
"1000275" [label="(Call,-ENOSPC)"];
"1000249" [label="(Identifier,mpd)"];
"1000253" [label="(Literal,\"delayed block allocation failed for inode %lu at \"\n\t\t\t \"logical offset %llu with max blocks %zd with \"\n\t\t\t \"error %d\n\")"];
"1000294" [label="(Return,return err;)"];
"1000271" [label="(Identifier,err)"];
"1000226" [label="(ControlStructure,if (err == -ENOSPC &&\n\t\t    ext4_count_free_blocks(mpd->inode->i_sb)))"];
"1000233" [label="(Call,mpd->inode->i_sb)"];
"1000241" [label="(Identifier,mpd)"];
"1000259" [label="(Call,(unsigned long long) next)"];
"1000252" [label="(Identifier,KERN_CRIT)"];
"1000262" [label="(Call,mpd->b_size >> mpd->inode->i_blkbits)"];
"1000272" [label="(ControlStructure,if (err == -ENOSPC))"];
"1000295" [label="(Identifier,err)"];
"1000232" [label="(Call,ext4_count_free_blocks(mpd->inode->i_sb))"];
"1000215" [label="(Block,)"];
"1000273" [label="(Call,err == -ENOSPC)"];
"1000247" [label="(Call,mpd->inode->i_sb)"];
"1000283" [label="(Identifier,mpd)"];
"1000391" [label="(MethodReturn,static int)"];
"1000232" -> "1000227"  [label="AST: "];
"1000232" -> "1000233"  [label="CFG: "];
"1000233" -> "1000232"  [label="AST: "];
"1000227" -> "1000232"  [label="CFG: "];
"1000232" -> "1000391"  [label="DDG: "];
"1000232" -> "1000227"  [label="DDG: "];
"1000232" -> "1000246"  [label="DDG: "];
"1000227" -> "1000226"  [label="AST: "];
"1000227" -> "1000228"  [label="CFG: "];
"1000228" -> "1000227"  [label="AST: "];
"1000241" -> "1000227"  [label="CFG: "];
"1000249" -> "1000227"  [label="CFG: "];
"1000227" -> "1000391"  [label="DDG: "];
"1000227" -> "1000391"  [label="DDG: "];
"1000227" -> "1000391"  [label="DDG: "];
"1000228" -> "1000227"  [label="DDG: "];
"1000228" -> "1000227"  [label="DDG: "];
"1000246" -> "1000215"  [label="AST: "];
"1000246" -> "1000271"  [label="CFG: "];
"1000247" -> "1000246"  [label="AST: "];
"1000252" -> "1000246"  [label="AST: "];
"1000253" -> "1000246"  [label="AST: "];
"1000254" -> "1000246"  [label="AST: "];
"1000259" -> "1000246"  [label="AST: "];
"1000262" -> "1000246"  [label="AST: "];
"1000271" -> "1000246"  [label="AST: "];
"1000274" -> "1000246"  [label="CFG: "];
"1000246" -> "1000391"  [label="DDG: "];
"1000246" -> "1000391"  [label="DDG: "];
"1000246" -> "1000391"  [label="DDG: "];
"1000246" -> "1000391"  [label="DDG: "];
"1000246" -> "1000391"  [label="DDG: "];
"1000259" -> "1000246"  [label="DDG: "];
"1000262" -> "1000246"  [label="DDG: "];
"1000262" -> "1000246"  [label="DDG: "];
"1000228" -> "1000246"  [label="DDG: "];
"1000246" -> "1000273"  [label="DDG: "];
"1000273" -> "1000272"  [label="AST: "];
"1000273" -> "1000275"  [label="CFG: "];
"1000274" -> "1000273"  [label="AST: "];
"1000275" -> "1000273"  [label="AST: "];
"1000280" -> "1000273"  [label="CFG: "];
"1000283" -> "1000273"  [label="CFG: "];
"1000273" -> "1000391"  [label="DDG: "];
"1000273" -> "1000391"  [label="DDG: "];
"1000273" -> "1000391"  [label="DDG: "];
"1000275" -> "1000273"  [label="DDG: "];
"1000273" -> "1000294"  [label="DDG: "];
"1000294" -> "1000215"  [label="AST: "];
"1000294" -> "1000295"  [label="CFG: "];
"1000295" -> "1000294"  [label="AST: "];
"1000391" -> "1000294"  [label="CFG: "];
"1000294" -> "1000391"  [label="DDG: "];
"1000295" -> "1000294"  [label="DDG: "];
}
