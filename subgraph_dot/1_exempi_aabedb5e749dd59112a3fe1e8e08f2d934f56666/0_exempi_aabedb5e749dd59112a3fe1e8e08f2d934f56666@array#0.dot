digraph "0_exempi_aabedb5e749dd59112a3fe1e8e08f2d934f56666@array" {
"1000258" [label="(Call,GetLE32(&this->data[0]))"];
"1000256" [label="(Call,flags = GetLE32(&this->data[0]))"];
"1000268" [label="(Call,-hasXMP ^ flags)"];
"1000265" [label="(Call,flags ^= (-hasXMP ^ flags) & (1 << XMP_FLAG_BIT))"];
"1000275" [label="(Call,PutLE32(&this->data[0], flags))"];
"1000267" [label="(Call,(-hasXMP ^ flags) & (1 << XMP_FLAG_BIT))"];
"1000268" [label="(Call,-hasXMP ^ flags)"];
"1000271" [label="(Identifier,flags)"];
"1000259" [label="(Call,&this->data[0])"];
"1000266" [label="(Identifier,flags)"];
"1000282" [label="(Identifier,flags)"];
"1000286" [label="(Identifier,this)"];
"1000537" [label="(MethodReturn,RET)"];
"1000258" [label="(Call,GetLE32(&this->data[0]))"];
"1000256" [label="(Call,flags = GetLE32(&this->data[0]))"];
"1000269" [label="(Call,-hasXMP)"];
"1000273" [label="(Literal,1)"];
"1000272" [label="(Call,1 << XMP_FLAG_BIT)"];
"1000276" [label="(Call,&this->data[0])"];
"1000267" [label="(Call,(-hasXMP ^ flags) & (1 << XMP_FLAG_BIT))"];
"1000275" [label="(Call,PutLE32(&this->data[0], flags))"];
"1000265" [label="(Call,flags ^= (-hasXMP ^ flags) & (1 << XMP_FLAG_BIT))"];
"1000257" [label="(Identifier,flags)"];
"1000254" [label="(Block,)"];
"1000279" [label="(Identifier,this)"];
"1000258" -> "1000256"  [label="AST: "];
"1000258" -> "1000259"  [label="CFG: "];
"1000259" -> "1000258"  [label="AST: "];
"1000256" -> "1000258"  [label="CFG: "];
"1000258" -> "1000256"  [label="DDG: &this->data[0]"];
"1000258" -> "1000275"  [label="DDG: &this->data[0]"];
"1000256" -> "1000254"  [label="AST: "];
"1000257" -> "1000256"  [label="AST: "];
"1000266" -> "1000256"  [label="CFG: "];
"1000256" -> "1000537"  [label="DDG: GetLE32(&this->data[0])"];
"1000256" -> "1000268"  [label="DDG: flags"];
"1000268" -> "1000267"  [label="AST: "];
"1000268" -> "1000271"  [label="CFG: "];
"1000269" -> "1000268"  [label="AST: "];
"1000271" -> "1000268"  [label="AST: "];
"1000273" -> "1000268"  [label="CFG: "];
"1000268" -> "1000537"  [label="DDG: -hasXMP"];
"1000268" -> "1000265"  [label="DDG: flags"];
"1000268" -> "1000267"  [label="DDG: -hasXMP"];
"1000268" -> "1000267"  [label="DDG: flags"];
"1000269" -> "1000268"  [label="DDG: hasXMP"];
"1000265" -> "1000254"  [label="AST: "];
"1000265" -> "1000267"  [label="CFG: "];
"1000266" -> "1000265"  [label="AST: "];
"1000267" -> "1000265"  [label="AST: "];
"1000279" -> "1000265"  [label="CFG: "];
"1000265" -> "1000537"  [label="DDG: flags ^= (-hasXMP ^ flags) & (1 << XMP_FLAG_BIT)"];
"1000265" -> "1000537"  [label="DDG: (-hasXMP ^ flags) & (1 << XMP_FLAG_BIT)"];
"1000267" -> "1000265"  [label="DDG: -hasXMP ^ flags"];
"1000267" -> "1000265"  [label="DDG: 1 << XMP_FLAG_BIT"];
"1000265" -> "1000275"  [label="DDG: flags"];
"1000275" -> "1000254"  [label="AST: "];
"1000275" -> "1000282"  [label="CFG: "];
"1000276" -> "1000275"  [label="AST: "];
"1000282" -> "1000275"  [label="AST: "];
"1000286" -> "1000275"  [label="CFG: "];
"1000275" -> "1000537"  [label="DDG: flags"];
"1000275" -> "1000537"  [label="DDG: PutLE32(&this->data[0], flags)"];
"1000275" -> "1000537"  [label="DDG: &this->data[0]"];
"1000267" -> "1000272"  [label="CFG: "];
"1000272" -> "1000267"  [label="AST: "];
"1000267" -> "1000537"  [label="DDG: -hasXMP ^ flags"];
"1000267" -> "1000537"  [label="DDG: 1 << XMP_FLAG_BIT"];
"1000272" -> "1000267"  [label="DDG: 1"];
"1000272" -> "1000267"  [label="DDG: XMP_FLAG_BIT"];
}
