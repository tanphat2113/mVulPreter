digraph "0_linux_0c17d1d2c61936401f4702e1846e2c19b200f958_1@pointer" {
"1000116" [label="(Call,*state = env->cur_state)"];
"1000442" [label="(Call,check_stack_write(env, state, off, size,\n\t\t\t\t\t\tvalue_regno))"];
"1000440" [label="(Call,err = check_stack_write(env, state, off, size,\n\t\t\t\t\t\tvalue_regno))"];
"1000538" [label="(Call,!err)"];
"1000537" [label="(Call,!err && size < BPF_REG_SIZE && value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE)"];
"1000566" [label="(Return,return err;)"];
"1000541" [label="(Call,size < BPF_REG_SIZE)"];
"1000540" [label="(Call,size < BPF_REG_SIZE && value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE)"];
"1000560" [label="(Call,coerce_reg_to_size(&regs[value_regno], size))"];
"1000545" [label="(Call,value_regno >= 0)"];
"1000544" [label="(Call,value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE)"];
"1000451" [label="(Call,check_stack_read(env, state, off, size,\n\t\t\t\t\t       value_regno))"];
"1000449" [label="(Call,err = check_stack_read(env, state, off, size,\n\t\t\t\t\t       value_regno))"];
"1000442" [label="(Call,check_stack_write(env, state, off, size,\n\t\t\t\t\t\tvalue_regno))"];
"1000563" [label="(Identifier,regs)"];
"1000538" [label="(Call,!err)"];
"1000547" [label="(Literal,0)"];
"1000123" [label="(Identifier,regs)"];
"1000234" [label="(Call,is_pointer_value(env, value_regno))"];
"1000321" [label="(Call,mark_reg_unknown(env, regs, value_regno))"];
"1000488" [label="(Call,is_pointer_value(env, value_regno))"];
"1000548" [label="(Call,t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE)"];
"1000444" [label="(Identifier,state)"];
"1000452" [label="(Identifier,env)"];
"1000448" [label="(ControlStructure,else)"];
"1000116" [label="(Call,*state = env->cur_state)"];
"1000107" [label="(MethodParameterIn,struct bpf_verifier_env *env)"];
"1000550" [label="(Identifier,t)"];
"1000192" [label="(Call,check_map_access(env, regno, off, size, false))"];
"1000326" [label="(Call,mark_reg_known_zero(env, regs,\n\t\t\t\t\t\t    value_regno))"];
"1000441" [label="(Identifier,err)"];
"1000501" [label="(Call,check_packet_access(env, regno, off, size, false))"];
"1000544" [label="(Call,value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE)"];
"1000540" [label="(Call,size < BPF_REG_SIZE && value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE)"];
"1000449" [label="(Call,err = check_stack_read(env, state, off, size,\n\t\t\t\t\t       value_regno))"];
"1000114" [label="(Block,)"];
"1000454" [label="(Identifier,off)"];
"1000200" [label="(Call,!err)"];
"1000443" [label="(Identifier,env)"];
"1000566" [label="(Return,return err;)"];
"1000561" [label="(Call,&regs[value_regno])"];
"1000450" [label="(Identifier,err)"];
"1000446" [label="(Identifier,size)"];
"1000445" [label="(Identifier,off)"];
"1000113" [label="(MethodParameterIn,int value_regno)"];
"1000456" [label="(Identifier,value_regno)"];
"1000451" [label="(Call,check_stack_read(env, state, off, size,\n\t\t\t\t\t       value_regno))"];
"1000110" [label="(MethodParameterIn,int off)"];
"1000537" [label="(Call,!err && size < BPF_REG_SIZE && value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE)"];
"1000485" [label="(Call,value_regno >= 0)"];
"1000542" [label="(Identifier,size)"];
"1000536" [label="(ControlStructure,if (!err && size < BPF_REG_SIZE && value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE))"];
"1000117" [label="(Identifier,state)"];
"1000447" [label="(Identifier,value_regno)"];
"1000206" [label="(Call,value_regno >= 0)"];
"1000231" [label="(Call,value_regno >= 0)"];
"1000440" [label="(Call,err = check_stack_write(env, state, off, size,\n\t\t\t\t\t\tvalue_regno))"];
"1000176" [label="(Call,value_regno >= 0)"];
"1000118" [label="(Call,env->cur_state)"];
"1000539" [label="(Identifier,err)"];
"1000560" [label="(Call,coerce_reg_to_size(&regs[value_regno], size))"];
"1000545" [label="(Call,value_regno >= 0)"];
"1000541" [label="(Call,size < BPF_REG_SIZE)"];
"1000313" [label="(Call,value_regno >= 0)"];
"1000455" [label="(Identifier,size)"];
"1000565" [label="(Identifier,size)"];
"1000453" [label="(Identifier,state)"];
"1000436" [label="(ControlStructure,if (t == BPF_WRITE))"];
"1000307" [label="(Call,!err)"];
"1000509" [label="(Call,!err)"];
"1000543" [label="(Identifier,BPF_REG_SIZE)"];
"1000568" [label="(MethodReturn,static int)"];
"1000424" [label="(Call,-off)"];
"1000297" [label="(Call,check_ctx_access(env, insn_idx, off, size, t, &reg_type))"];
"1000559" [label="(Block,)"];
"1000149" [label="(Call,check_ptr_alignment(env, reg, off, size))"];
"1000179" [label="(Call,is_pointer_value(env, value_regno))"];
"1000434" [label="(Call,-off)"];
"1000518" [label="(Call,mark_reg_unknown(env, regs, value_regno))"];
"1000515" [label="(Call,value_regno >= 0)"];
"1000546" [label="(Identifier,value_regno)"];
"1000209" [label="(Call,mark_reg_unknown(env, regs, value_regno))"];
"1000567" [label="(Identifier,err)"];
"1000116" -> "1000114"  [label="AST: "];
"1000116" -> "1000118"  [label="CFG: "];
"1000117" -> "1000116"  [label="AST: "];
"1000118" -> "1000116"  [label="AST: "];
"1000123" -> "1000116"  [label="CFG: "];
"1000116" -> "1000568"  [label="DDG: state"];
"1000116" -> "1000568"  [label="DDG: env->cur_state"];
"1000116" -> "1000442"  [label="DDG: state"];
"1000116" -> "1000451"  [label="DDG: state"];
"1000442" -> "1000440"  [label="AST: "];
"1000442" -> "1000447"  [label="CFG: "];
"1000443" -> "1000442"  [label="AST: "];
"1000444" -> "1000442"  [label="AST: "];
"1000445" -> "1000442"  [label="AST: "];
"1000446" -> "1000442"  [label="AST: "];
"1000447" -> "1000442"  [label="AST: "];
"1000440" -> "1000442"  [label="CFG: "];
"1000442" -> "1000568"  [label="DDG: env"];
"1000442" -> "1000568"  [label="DDG: size"];
"1000442" -> "1000568"  [label="DDG: value_regno"];
"1000442" -> "1000568"  [label="DDG: off"];
"1000442" -> "1000568"  [label="DDG: state"];
"1000442" -> "1000440"  [label="DDG: env"];
"1000442" -> "1000440"  [label="DDG: state"];
"1000442" -> "1000440"  [label="DDG: value_regno"];
"1000442" -> "1000440"  [label="DDG: off"];
"1000442" -> "1000440"  [label="DDG: size"];
"1000149" -> "1000442"  [label="DDG: env"];
"1000149" -> "1000442"  [label="DDG: size"];
"1000107" -> "1000442"  [label="DDG: env"];
"1000424" -> "1000442"  [label="DDG: off"];
"1000434" -> "1000442"  [label="DDG: off"];
"1000110" -> "1000442"  [label="DDG: off"];
"1000113" -> "1000442"  [label="DDG: value_regno"];
"1000442" -> "1000541"  [label="DDG: size"];
"1000442" -> "1000545"  [label="DDG: value_regno"];
"1000442" -> "1000560"  [label="DDG: size"];
"1000440" -> "1000436"  [label="AST: "];
"1000441" -> "1000440"  [label="AST: "];
"1000539" -> "1000440"  [label="CFG: "];
"1000440" -> "1000568"  [label="DDG: check_stack_write(env, state, off, size,\n\t\t\t\t\t\tvalue_regno)"];
"1000440" -> "1000538"  [label="DDG: err"];
"1000538" -> "1000537"  [label="AST: "];
"1000538" -> "1000539"  [label="CFG: "];
"1000539" -> "1000538"  [label="AST: "];
"1000542" -> "1000538"  [label="CFG: "];
"1000537" -> "1000538"  [label="CFG: "];
"1000538" -> "1000568"  [label="DDG: err"];
"1000538" -> "1000537"  [label="DDG: err"];
"1000200" -> "1000538"  [label="DDG: err"];
"1000449" -> "1000538"  [label="DDG: err"];
"1000509" -> "1000538"  [label="DDG: err"];
"1000307" -> "1000538"  [label="DDG: err"];
"1000538" -> "1000566"  [label="DDG: err"];
"1000537" -> "1000536"  [label="AST: "];
"1000537" -> "1000540"  [label="CFG: "];
"1000540" -> "1000537"  [label="AST: "];
"1000563" -> "1000537"  [label="CFG: "];
"1000567" -> "1000537"  [label="CFG: "];
"1000537" -> "1000568"  [label="DDG: size < BPF_REG_SIZE && value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE"];
"1000537" -> "1000568"  [label="DDG: !err"];
"1000537" -> "1000568"  [label="DDG: !err && size < BPF_REG_SIZE && value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE"];
"1000540" -> "1000537"  [label="DDG: size < BPF_REG_SIZE"];
"1000540" -> "1000537"  [label="DDG: value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE"];
"1000566" -> "1000114"  [label="AST: "];
"1000566" -> "1000567"  [label="CFG: "];
"1000567" -> "1000566"  [label="AST: "];
"1000568" -> "1000566"  [label="CFG: "];
"1000566" -> "1000568"  [label="DDG: <RET>"];
"1000567" -> "1000566"  [label="DDG: err"];
"1000541" -> "1000540"  [label="AST: "];
"1000541" -> "1000543"  [label="CFG: "];
"1000542" -> "1000541"  [label="AST: "];
"1000543" -> "1000541"  [label="AST: "];
"1000546" -> "1000541"  [label="CFG: "];
"1000540" -> "1000541"  [label="CFG: "];
"1000541" -> "1000568"  [label="DDG: size"];
"1000541" -> "1000568"  [label="DDG: BPF_REG_SIZE"];
"1000541" -> "1000540"  [label="DDG: size"];
"1000541" -> "1000540"  [label="DDG: BPF_REG_SIZE"];
"1000451" -> "1000541"  [label="DDG: size"];
"1000297" -> "1000541"  [label="DDG: size"];
"1000501" -> "1000541"  [label="DDG: size"];
"1000192" -> "1000541"  [label="DDG: size"];
"1000541" -> "1000560"  [label="DDG: size"];
"1000540" -> "1000544"  [label="CFG: "];
"1000544" -> "1000540"  [label="AST: "];
"1000540" -> "1000568"  [label="DDG: value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE"];
"1000540" -> "1000568"  [label="DDG: size < BPF_REG_SIZE"];
"1000544" -> "1000540"  [label="DDG: value_regno >= 0"];
"1000544" -> "1000540"  [label="DDG: t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE"];
"1000560" -> "1000559"  [label="AST: "];
"1000560" -> "1000565"  [label="CFG: "];
"1000561" -> "1000560"  [label="AST: "];
"1000565" -> "1000560"  [label="AST: "];
"1000567" -> "1000560"  [label="CFG: "];
"1000560" -> "1000568"  [label="DDG: coerce_reg_to_size(&regs[value_regno], size)"];
"1000560" -> "1000568"  [label="DDG: size"];
"1000560" -> "1000568"  [label="DDG: &regs[value_regno]"];
"1000451" -> "1000560"  [label="DDG: size"];
"1000297" -> "1000560"  [label="DDG: size"];
"1000501" -> "1000560"  [label="DDG: size"];
"1000192" -> "1000560"  [label="DDG: size"];
"1000545" -> "1000544"  [label="AST: "];
"1000545" -> "1000547"  [label="CFG: "];
"1000546" -> "1000545"  [label="AST: "];
"1000547" -> "1000545"  [label="AST: "];
"1000550" -> "1000545"  [label="CFG: "];
"1000544" -> "1000545"  [label="CFG: "];
"1000545" -> "1000568"  [label="DDG: value_regno"];
"1000545" -> "1000544"  [label="DDG: value_regno"];
"1000545" -> "1000544"  [label="DDG: 0"];
"1000485" -> "1000545"  [label="DDG: value_regno"];
"1000234" -> "1000545"  [label="DDG: value_regno"];
"1000179" -> "1000545"  [label="DDG: value_regno"];
"1000518" -> "1000545"  [label="DDG: value_regno"];
"1000209" -> "1000545"  [label="DDG: value_regno"];
"1000176" -> "1000545"  [label="DDG: value_regno"];
"1000313" -> "1000545"  [label="DDG: value_regno"];
"1000451" -> "1000545"  [label="DDG: value_regno"];
"1000515" -> "1000545"  [label="DDG: value_regno"];
"1000206" -> "1000545"  [label="DDG: value_regno"];
"1000326" -> "1000545"  [label="DDG: value_regno"];
"1000321" -> "1000545"  [label="DDG: value_regno"];
"1000231" -> "1000545"  [label="DDG: value_regno"];
"1000488" -> "1000545"  [label="DDG: value_regno"];
"1000113" -> "1000545"  [label="DDG: value_regno"];
"1000544" -> "1000548"  [label="CFG: "];
"1000548" -> "1000544"  [label="AST: "];
"1000544" -> "1000568"  [label="DDG: t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE"];
"1000544" -> "1000568"  [label="DDG: value_regno >= 0"];
"1000548" -> "1000544"  [label="DDG: t == BPF_READ"];
"1000548" -> "1000544"  [label="DDG: regs[value_regno].type == SCALAR_VALUE"];
"1000451" -> "1000449"  [label="AST: "];
"1000451" -> "1000456"  [label="CFG: "];
"1000452" -> "1000451"  [label="AST: "];
"1000453" -> "1000451"  [label="AST: "];
"1000454" -> "1000451"  [label="AST: "];
"1000455" -> "1000451"  [label="AST: "];
"1000456" -> "1000451"  [label="AST: "];
"1000449" -> "1000451"  [label="CFG: "];
"1000451" -> "1000568"  [label="DDG: size"];
"1000451" -> "1000568"  [label="DDG: env"];
"1000451" -> "1000568"  [label="DDG: state"];
"1000451" -> "1000568"  [label="DDG: off"];
"1000451" -> "1000568"  [label="DDG: value_regno"];
"1000451" -> "1000449"  [label="DDG: size"];
"1000451" -> "1000449"  [label="DDG: env"];
"1000451" -> "1000449"  [label="DDG: value_regno"];
"1000451" -> "1000449"  [label="DDG: state"];
"1000451" -> "1000449"  [label="DDG: off"];
"1000149" -> "1000451"  [label="DDG: env"];
"1000149" -> "1000451"  [label="DDG: size"];
"1000107" -> "1000451"  [label="DDG: env"];
"1000424" -> "1000451"  [label="DDG: off"];
"1000434" -> "1000451"  [label="DDG: off"];
"1000110" -> "1000451"  [label="DDG: off"];
"1000113" -> "1000451"  [label="DDG: value_regno"];
"1000449" -> "1000448"  [label="AST: "];
"1000450" -> "1000449"  [label="AST: "];
"1000539" -> "1000449"  [label="CFG: "];
"1000449" -> "1000568"  [label="DDG: check_stack_read(env, state, off, size,\n\t\t\t\t\t       value_regno)"];
}
