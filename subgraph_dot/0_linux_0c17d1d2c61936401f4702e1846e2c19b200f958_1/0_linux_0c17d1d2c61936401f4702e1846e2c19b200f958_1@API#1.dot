digraph "0_linux_0c17d1d2c61936401f4702e1846e2c19b200f958_1@API" {
"1000442" [label="(Call,check_stack_write(env, state, off, size,\n\t\t\t\t\t\tvalue_regno))"];
"1000149" [label="(Call,check_ptr_alignment(env, reg, off, size))"];
"1000124" [label="(Call,cur_regs(env))"];
"1000107" [label="(MethodParameterIn,struct bpf_verifier_env *env)"];
"1000127" [label="(Call,*reg = regs + regno)"];
"1000122" [label="(Call,*regs = cur_regs(env))"];
"1000109" [label="(MethodParameterIn,u32 regno)"];
"1000110" [label="(MethodParameterIn,int off)"];
"1000142" [label="(Call,size < 0)"];
"1000137" [label="(Call,size = bpf_size_to_bytes(bpf_size))"];
"1000139" [label="(Call,bpf_size_to_bytes(bpf_size))"];
"1000111" [label="(MethodParameterIn,int bpf_size)"];
"1000116" [label="(Call,*state = env->cur_state)"];
"1000424" [label="(Call,-off)"];
"1000402" [label="(Call,off < -MAX_BPF_STACK)"];
"1000399" [label="(Call,off >= 0)"];
"1000390" [label="(Call,off += reg->var_off.value)"];
"1000158" [label="(Call,off += reg->off)"];
"1000404" [label="(Call,-MAX_BPF_STACK)"];
"1000434" [label="(Call,-off)"];
"1000113" [label="(MethodParameterIn,int value_regno)"];
"1000440" [label="(Call,err = check_stack_write(env, state, off, size,\n\t\t\t\t\t\tvalue_regno))"];
"1000538" [label="(Call,!err)"];
"1000537" [label="(Call,!err && size < BPF_REG_SIZE && value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE)"];
"1000566" [label="(Return,return err;)"];
"1000541" [label="(Call,size < BPF_REG_SIZE)"];
"1000540" [label="(Call,size < BPF_REG_SIZE && value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE)"];
"1000560" [label="(Call,coerce_reg_to_size(&regs[value_regno], size))"];
"1000545" [label="(Call,value_regno >= 0)"];
"1000544" [label="(Call,value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE)"];
"1000538" [label="(Call,!err)"];
"1000321" [label="(Call,mark_reg_unknown(env, regs, value_regno))"];
"1000473" [label="(Call,verbose(env, \"cannot write into packet\n\"))"];
"1000116" [label="(Call,*state = env->cur_state)"];
"1000192" [label="(Call,check_map_access(env, regno, off, size, false))"];
"1000544" [label="(Call,value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE)"];
"1000183" [label="(Call,verbose(env, \"R%d leaks addr into map\n\", value_regno))"];
"1000381" [label="(Call,verbose(env, \"variable stack access var_off=%s off=%d size=%d\",\n\t\t\t\ttn_buf, off, size))"];
"1000425" [label="(Identifier,off)"];
"1000443" [label="(Identifier,env)"];
"1000125" [label="(Identifier,env)"];
"1000109" [label="(MethodParameterIn,u32 regno)"];
"1000561" [label="(Call,&regs[value_regno])"];
"1000446" [label="(Identifier,size)"];
"1000445" [label="(Identifier,off)"];
"1000426" [label="(Call,env->prog->aux->stack_depth = -off)"];
"1000257" [label="(Call,off - reg->off)"];
"1000231" [label="(Call,value_regno >= 0)"];
"1000110" [label="(MethodParameterIn,int off)"];
"1000537" [label="(Call,!err && size < BPF_REG_SIZE && value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE)"];
"1000542" [label="(Identifier,size)"];
"1000166" [label="(Identifier,reg)"];
"1000440" [label="(Call,err = check_stack_write(env, state, off, size,\n\t\t\t\t\t\tvalue_regno))"];
"1000140" [label="(Identifier,bpf_size)"];
"1000128" [label="(Identifier,reg)"];
"1000539" [label="(Identifier,err)"];
"1000560" [label="(Call,coerce_reg_to_size(&regs[value_regno], size))"];
"1000435" [label="(Identifier,off)"];
"1000407" [label="(Call,verbose(env, \"invalid stack off=%d size=%d\n\", off,\n\t\t\t\tsize))"];
"1000143" [label="(Identifier,size)"];
"1000250" [label="(Call,verbose(env,\n\t\t\t\t\"dereference of modified ctx ptr R%d off=%d+%d, ctx+const is allowed, ctx+const+const is not\n\",\n\t\t\t\tregno, reg->off, off - reg->off))"];
"1000565" [label="(Identifier,size)"];
"1000391" [label="(Identifier,off)"];
"1000568" [label="(MethodReturn,static int)"];
"1000559" [label="(Block,)"];
"1000563" [label="(Identifier,regs)"];
"1000547" [label="(Literal,0)"];
"1000390" [label="(Call,off += reg->var_off.value)"];
"1000488" [label="(Call,is_pointer_value(env, value_regno))"];
"1000127" [label="(Call,*reg = regs + regno)"];
"1000151" [label="(Identifier,reg)"];
"1000404" [label="(Call,-MAX_BPF_STACK)"];
"1000459" [label="(Call,reg_is_pkt_pointer(reg))"];
"1000286" [label="(Call,verbose(env,\n\t\t\t\t\"variable ctx access var_off=%s off=%d size=%d\",\n\t\t\t\ttn_buf, off, size))"];
"1000200" [label="(Call,!err)"];
"1000566" [label="(Return,return err;)"];
"1000113" [label="(MethodParameterIn,int value_regno)"];
"1000137" [label="(Call,size = bpf_size_to_bytes(bpf_size))"];
"1000117" [label="(Identifier,state)"];
"1000111" [label="(MethodParameterIn,int bpf_size)"];
"1000135" [label="(Identifier,err)"];
"1000545" [label="(Call,value_regno >= 0)"];
"1000147" [label="(Call,err = check_ptr_alignment(env, reg, off, size))"];
"1000548" [label="(Call,t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE)"];
"1000543" [label="(Identifier,BPF_REG_SIZE)"];
"1000149" [label="(Call,check_ptr_alignment(env, reg, off, size))"];
"1000399" [label="(Call,off >= 0)"];
"1000401" [label="(Literal,0)"];
"1000515" [label="(Call,value_regno >= 0)"];
"1000402" [label="(Call,off < -MAX_BPF_STACK)"];
"1000546" [label="(Identifier,value_regno)"];
"1000238" [label="(Call,verbose(env, \"R%d leaks addr into ctx\n\", value_regno))"];
"1000444" [label="(Identifier,state)"];
"1000398" [label="(Call,off >= 0 || off < -MAX_BPF_STACK)"];
"1000468" [label="(Call,may_access_direct_pkt_data(env, NULL, t))"];
"1000550" [label="(Identifier,t)"];
"1000400" [label="(Identifier,off)"];
"1000158" [label="(Call,off += reg->off)"];
"1000144" [label="(Literal,0)"];
"1000129" [label="(Call,regs + regno)"];
"1000449" [label="(Call,err = check_stack_read(env, state, off, size,\n\t\t\t\t\t       value_regno))"];
"1000114" [label="(Block,)"];
"1000492" [label="(Call,verbose(env, \"R%d leaks addr into packet\n\",\n\t\t\t\tvalue_regno))"];
"1000416" [label="(Call,env->prog->aux->stack_depth < -off)"];
"1000540" [label="(Call,size < BPF_REG_SIZE && value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE)"];
"1000124" [label="(Call,cur_regs(env))"];
"1000138" [label="(Identifier,size)"];
"1000142" [label="(Call,size < 0)"];
"1000451" [label="(Call,check_stack_read(env, state, off, size,\n\t\t\t\t\t       value_regno))"];
"1000485" [label="(Call,value_regno >= 0)"];
"1000206" [label="(Call,value_regno >= 0)"];
"1000447" [label="(Identifier,value_regno)"];
"1000176" [label="(Call,value_regno >= 0)"];
"1000541" [label="(Call,size < BPF_REG_SIZE)"];
"1000150" [label="(Identifier,env)"];
"1000122" [label="(Call,*regs = cur_regs(env))"];
"1000139" [label="(Call,bpf_size_to_bytes(bpf_size))"];
"1000365" [label="(Block,)"];
"1000145" [label="(Return,return size;)"];
"1000307" [label="(Call,!err)"];
"1000509" [label="(Call,!err)"];
"1000518" [label="(Call,mark_reg_unknown(env, regs, value_regno))"];
"1000153" [label="(Identifier,size)"];
"1000313" [label="(Call,value_regno >= 0)"];
"1000209" [label="(Call,mark_reg_unknown(env, regs, value_regno))"];
"1000442" [label="(Call,check_stack_write(env, state, off, size,\n\t\t\t\t\t\tvalue_regno))"];
"1000234" [label="(Call,is_pointer_value(env, value_regno))"];
"1000123" [label="(Identifier,regs)"];
"1000107" [label="(MethodParameterIn,struct bpf_verifier_env *env)"];
"1000326" [label="(Call,mark_reg_known_zero(env, regs,\n\t\t\t\t\t\t    value_regno))"];
"1000441" [label="(Identifier,err)"];
"1000501" [label="(Call,check_packet_access(env, regno, off, size, false))"];
"1000148" [label="(Identifier,err)"];
"1000159" [label="(Identifier,off)"];
"1000524" [label="(Call,verbose(env, \"R%d invalid mem access '%s'\n\", regno,\n\t\t\treg_type_str[reg->type]))"];
"1000403" [label="(Identifier,off)"];
"1000152" [label="(Identifier,off)"];
"1000536" [label="(ControlStructure,if (!err && size < BPF_REG_SIZE && value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE))"];
"1000118" [label="(Call,env->cur_state)"];
"1000405" [label="(Identifier,MAX_BPF_STACK)"];
"1000141" [label="(ControlStructure,if (size < 0))"];
"1000392" [label="(Call,reg->var_off.value)"];
"1000297" [label="(Call,check_ctx_access(env, insn_idx, off, size, t, &reg_type))"];
"1000179" [label="(Call,is_pointer_value(env, value_regno))"];
"1000436" [label="(ControlStructure,if (t == BPF_WRITE))"];
"1000424" [label="(Call,-off)"];
"1000160" [label="(Call,reg->off)"];
"1000146" [label="(Identifier,size)"];
"1000434" [label="(Call,-off)"];
"1000567" [label="(Identifier,err)"];
"1000442" -> "1000440"  [label="AST: "];
"1000442" -> "1000447"  [label="CFG: "];
"1000443" -> "1000442"  [label="AST: "];
"1000444" -> "1000442"  [label="AST: "];
"1000445" -> "1000442"  [label="AST: "];
"1000446" -> "1000442"  [label="AST: "];
"1000447" -> "1000442"  [label="AST: "];
"1000440" -> "1000442"  [label="CFG: "];
"1000442" -> "1000568"  [label="DDG: env"];
"1000442" -> "1000568"  [label="DDG: size"];
"1000442" -> "1000568"  [label="DDG: value_regno"];
"1000442" -> "1000568"  [label="DDG: off"];
"1000442" -> "1000568"  [label="DDG: state"];
"1000442" -> "1000440"  [label="DDG: env"];
"1000442" -> "1000440"  [label="DDG: state"];
"1000442" -> "1000440"  [label="DDG: value_regno"];
"1000442" -> "1000440"  [label="DDG: off"];
"1000442" -> "1000440"  [label="DDG: size"];
"1000149" -> "1000442"  [label="DDG: env"];
"1000149" -> "1000442"  [label="DDG: size"];
"1000107" -> "1000442"  [label="DDG: env"];
"1000116" -> "1000442"  [label="DDG: state"];
"1000424" -> "1000442"  [label="DDG: off"];
"1000434" -> "1000442"  [label="DDG: off"];
"1000110" -> "1000442"  [label="DDG: off"];
"1000113" -> "1000442"  [label="DDG: value_regno"];
"1000442" -> "1000541"  [label="DDG: size"];
"1000442" -> "1000545"  [label="DDG: value_regno"];
"1000442" -> "1000560"  [label="DDG: size"];
"1000149" -> "1000147"  [label="AST: "];
"1000149" -> "1000153"  [label="CFG: "];
"1000150" -> "1000149"  [label="AST: "];
"1000151" -> "1000149"  [label="AST: "];
"1000152" -> "1000149"  [label="AST: "];
"1000153" -> "1000149"  [label="AST: "];
"1000147" -> "1000149"  [label="CFG: "];
"1000149" -> "1000568"  [label="DDG: reg"];
"1000149" -> "1000568"  [label="DDG: off"];
"1000149" -> "1000568"  [label="DDG: size"];
"1000149" -> "1000568"  [label="DDG: env"];
"1000149" -> "1000147"  [label="DDG: env"];
"1000149" -> "1000147"  [label="DDG: reg"];
"1000149" -> "1000147"  [label="DDG: off"];
"1000149" -> "1000147"  [label="DDG: size"];
"1000124" -> "1000149"  [label="DDG: env"];
"1000107" -> "1000149"  [label="DDG: env"];
"1000127" -> "1000149"  [label="DDG: reg"];
"1000110" -> "1000149"  [label="DDG: off"];
"1000142" -> "1000149"  [label="DDG: size"];
"1000149" -> "1000158"  [label="DDG: off"];
"1000149" -> "1000179"  [label="DDG: env"];
"1000149" -> "1000183"  [label="DDG: env"];
"1000149" -> "1000192"  [label="DDG: env"];
"1000149" -> "1000192"  [label="DDG: size"];
"1000149" -> "1000234"  [label="DDG: env"];
"1000149" -> "1000238"  [label="DDG: env"];
"1000149" -> "1000250"  [label="DDG: env"];
"1000149" -> "1000286"  [label="DDG: env"];
"1000149" -> "1000286"  [label="DDG: size"];
"1000149" -> "1000297"  [label="DDG: env"];
"1000149" -> "1000297"  [label="DDG: size"];
"1000149" -> "1000381"  [label="DDG: env"];
"1000149" -> "1000381"  [label="DDG: size"];
"1000149" -> "1000407"  [label="DDG: env"];
"1000149" -> "1000407"  [label="DDG: size"];
"1000149" -> "1000451"  [label="DDG: env"];
"1000149" -> "1000451"  [label="DDG: size"];
"1000149" -> "1000459"  [label="DDG: reg"];
"1000149" -> "1000468"  [label="DDG: env"];
"1000149" -> "1000473"  [label="DDG: env"];
"1000149" -> "1000488"  [label="DDG: env"];
"1000149" -> "1000492"  [label="DDG: env"];
"1000149" -> "1000501"  [label="DDG: env"];
"1000149" -> "1000501"  [label="DDG: size"];
"1000149" -> "1000524"  [label="DDG: env"];
"1000124" -> "1000122"  [label="AST: "];
"1000124" -> "1000125"  [label="CFG: "];
"1000125" -> "1000124"  [label="AST: "];
"1000122" -> "1000124"  [label="CFG: "];
"1000124" -> "1000568"  [label="DDG: env"];
"1000124" -> "1000122"  [label="DDG: env"];
"1000107" -> "1000124"  [label="DDG: env"];
"1000107" -> "1000106"  [label="AST: "];
"1000107" -> "1000568"  [label="DDG: env"];
"1000107" -> "1000179"  [label="DDG: env"];
"1000107" -> "1000183"  [label="DDG: env"];
"1000107" -> "1000192"  [label="DDG: env"];
"1000107" -> "1000209"  [label="DDG: env"];
"1000107" -> "1000234"  [label="DDG: env"];
"1000107" -> "1000238"  [label="DDG: env"];
"1000107" -> "1000250"  [label="DDG: env"];
"1000107" -> "1000286"  [label="DDG: env"];
"1000107" -> "1000297"  [label="DDG: env"];
"1000107" -> "1000321"  [label="DDG: env"];
"1000107" -> "1000326"  [label="DDG: env"];
"1000107" -> "1000381"  [label="DDG: env"];
"1000107" -> "1000407"  [label="DDG: env"];
"1000107" -> "1000451"  [label="DDG: env"];
"1000107" -> "1000468"  [label="DDG: env"];
"1000107" -> "1000473"  [label="DDG: env"];
"1000107" -> "1000488"  [label="DDG: env"];
"1000107" -> "1000492"  [label="DDG: env"];
"1000107" -> "1000501"  [label="DDG: env"];
"1000107" -> "1000518"  [label="DDG: env"];
"1000107" -> "1000524"  [label="DDG: env"];
"1000127" -> "1000114"  [label="AST: "];
"1000127" -> "1000129"  [label="CFG: "];
"1000128" -> "1000127"  [label="AST: "];
"1000129" -> "1000127"  [label="AST: "];
"1000135" -> "1000127"  [label="CFG: "];
"1000127" -> "1000568"  [label="DDG: regs + regno"];
"1000127" -> "1000568"  [label="DDG: reg"];
"1000122" -> "1000127"  [label="DDG: regs"];
"1000109" -> "1000127"  [label="DDG: regno"];
"1000122" -> "1000114"  [label="AST: "];
"1000123" -> "1000122"  [label="AST: "];
"1000128" -> "1000122"  [label="CFG: "];
"1000122" -> "1000568"  [label="DDG: cur_regs(env)"];
"1000122" -> "1000129"  [label="DDG: regs"];
"1000122" -> "1000209"  [label="DDG: regs"];
"1000122" -> "1000321"  [label="DDG: regs"];
"1000122" -> "1000326"  [label="DDG: regs"];
"1000122" -> "1000518"  [label="DDG: regs"];
"1000109" -> "1000106"  [label="AST: "];
"1000109" -> "1000568"  [label="DDG: regno"];
"1000109" -> "1000129"  [label="DDG: regno"];
"1000109" -> "1000192"  [label="DDG: regno"];
"1000109" -> "1000250"  [label="DDG: regno"];
"1000109" -> "1000501"  [label="DDG: regno"];
"1000109" -> "1000524"  [label="DDG: regno"];
"1000110" -> "1000106"  [label="AST: "];
"1000110" -> "1000568"  [label="DDG: off"];
"1000110" -> "1000158"  [label="DDG: off"];
"1000110" -> "1000192"  [label="DDG: off"];
"1000110" -> "1000257"  [label="DDG: off"];
"1000110" -> "1000286"  [label="DDG: off"];
"1000110" -> "1000297"  [label="DDG: off"];
"1000110" -> "1000381"  [label="DDG: off"];
"1000110" -> "1000390"  [label="DDG: off"];
"1000110" -> "1000399"  [label="DDG: off"];
"1000110" -> "1000402"  [label="DDG: off"];
"1000110" -> "1000407"  [label="DDG: off"];
"1000110" -> "1000424"  [label="DDG: off"];
"1000110" -> "1000434"  [label="DDG: off"];
"1000110" -> "1000451"  [label="DDG: off"];
"1000110" -> "1000501"  [label="DDG: off"];
"1000142" -> "1000141"  [label="AST: "];
"1000142" -> "1000144"  [label="CFG: "];
"1000143" -> "1000142"  [label="AST: "];
"1000144" -> "1000142"  [label="AST: "];
"1000146" -> "1000142"  [label="CFG: "];
"1000148" -> "1000142"  [label="CFG: "];
"1000142" -> "1000568"  [label="DDG: size < 0"];
"1000142" -> "1000568"  [label="DDG: size"];
"1000137" -> "1000142"  [label="DDG: size"];
"1000142" -> "1000145"  [label="DDG: size"];
"1000137" -> "1000114"  [label="AST: "];
"1000137" -> "1000139"  [label="CFG: "];
"1000138" -> "1000137"  [label="AST: "];
"1000139" -> "1000137"  [label="AST: "];
"1000143" -> "1000137"  [label="CFG: "];
"1000137" -> "1000568"  [label="DDG: bpf_size_to_bytes(bpf_size)"];
"1000139" -> "1000137"  [label="DDG: bpf_size"];
"1000139" -> "1000140"  [label="CFG: "];
"1000140" -> "1000139"  [label="AST: "];
"1000139" -> "1000568"  [label="DDG: bpf_size"];
"1000111" -> "1000139"  [label="DDG: bpf_size"];
"1000111" -> "1000106"  [label="AST: "];
"1000111" -> "1000568"  [label="DDG: bpf_size"];
"1000116" -> "1000114"  [label="AST: "];
"1000116" -> "1000118"  [label="CFG: "];
"1000117" -> "1000116"  [label="AST: "];
"1000118" -> "1000116"  [label="AST: "];
"1000123" -> "1000116"  [label="CFG: "];
"1000116" -> "1000568"  [label="DDG: state"];
"1000116" -> "1000568"  [label="DDG: env->cur_state"];
"1000116" -> "1000451"  [label="DDG: state"];
"1000424" -> "1000416"  [label="AST: "];
"1000424" -> "1000425"  [label="CFG: "];
"1000425" -> "1000424"  [label="AST: "];
"1000416" -> "1000424"  [label="CFG: "];
"1000424" -> "1000416"  [label="DDG: off"];
"1000402" -> "1000424"  [label="DDG: off"];
"1000399" -> "1000424"  [label="DDG: off"];
"1000424" -> "1000434"  [label="DDG: off"];
"1000424" -> "1000451"  [label="DDG: off"];
"1000402" -> "1000398"  [label="AST: "];
"1000402" -> "1000404"  [label="CFG: "];
"1000403" -> "1000402"  [label="AST: "];
"1000404" -> "1000402"  [label="AST: "];
"1000398" -> "1000402"  [label="CFG: "];
"1000402" -> "1000568"  [label="DDG: -MAX_BPF_STACK"];
"1000402" -> "1000398"  [label="DDG: off"];
"1000402" -> "1000398"  [label="DDG: -MAX_BPF_STACK"];
"1000399" -> "1000402"  [label="DDG: off"];
"1000404" -> "1000402"  [label="DDG: MAX_BPF_STACK"];
"1000402" -> "1000407"  [label="DDG: off"];
"1000399" -> "1000398"  [label="AST: "];
"1000399" -> "1000401"  [label="CFG: "];
"1000400" -> "1000399"  [label="AST: "];
"1000401" -> "1000399"  [label="AST: "];
"1000403" -> "1000399"  [label="CFG: "];
"1000398" -> "1000399"  [label="CFG: "];
"1000399" -> "1000398"  [label="DDG: off"];
"1000399" -> "1000398"  [label="DDG: 0"];
"1000390" -> "1000399"  [label="DDG: off"];
"1000399" -> "1000407"  [label="DDG: off"];
"1000390" -> "1000365"  [label="AST: "];
"1000390" -> "1000392"  [label="CFG: "];
"1000391" -> "1000390"  [label="AST: "];
"1000392" -> "1000390"  [label="AST: "];
"1000400" -> "1000390"  [label="CFG: "];
"1000390" -> "1000568"  [label="DDG: reg->var_off.value"];
"1000158" -> "1000390"  [label="DDG: off"];
"1000158" -> "1000114"  [label="AST: "];
"1000158" -> "1000160"  [label="CFG: "];
"1000159" -> "1000158"  [label="AST: "];
"1000160" -> "1000158"  [label="AST: "];
"1000166" -> "1000158"  [label="CFG: "];
"1000158" -> "1000568"  [label="DDG: off"];
"1000158" -> "1000568"  [label="DDG: reg->off"];
"1000158" -> "1000192"  [label="DDG: off"];
"1000158" -> "1000257"  [label="DDG: off"];
"1000158" -> "1000286"  [label="DDG: off"];
"1000158" -> "1000297"  [label="DDG: off"];
"1000158" -> "1000381"  [label="DDG: off"];
"1000158" -> "1000501"  [label="DDG: off"];
"1000404" -> "1000405"  [label="CFG: "];
"1000405" -> "1000404"  [label="AST: "];
"1000404" -> "1000568"  [label="DDG: MAX_BPF_STACK"];
"1000434" -> "1000426"  [label="AST: "];
"1000434" -> "1000435"  [label="CFG: "];
"1000435" -> "1000434"  [label="AST: "];
"1000426" -> "1000434"  [label="CFG: "];
"1000434" -> "1000426"  [label="DDG: off"];
"1000434" -> "1000451"  [label="DDG: off"];
"1000113" -> "1000106"  [label="AST: "];
"1000113" -> "1000568"  [label="DDG: value_regno"];
"1000113" -> "1000176"  [label="DDG: value_regno"];
"1000113" -> "1000179"  [label="DDG: value_regno"];
"1000113" -> "1000183"  [label="DDG: value_regno"];
"1000113" -> "1000206"  [label="DDG: value_regno"];
"1000113" -> "1000209"  [label="DDG: value_regno"];
"1000113" -> "1000231"  [label="DDG: value_regno"];
"1000113" -> "1000234"  [label="DDG: value_regno"];
"1000113" -> "1000238"  [label="DDG: value_regno"];
"1000113" -> "1000313"  [label="DDG: value_regno"];
"1000113" -> "1000321"  [label="DDG: value_regno"];
"1000113" -> "1000326"  [label="DDG: value_regno"];
"1000113" -> "1000451"  [label="DDG: value_regno"];
"1000113" -> "1000485"  [label="DDG: value_regno"];
"1000113" -> "1000488"  [label="DDG: value_regno"];
"1000113" -> "1000492"  [label="DDG: value_regno"];
"1000113" -> "1000515"  [label="DDG: value_regno"];
"1000113" -> "1000518"  [label="DDG: value_regno"];
"1000113" -> "1000545"  [label="DDG: value_regno"];
"1000440" -> "1000436"  [label="AST: "];
"1000441" -> "1000440"  [label="AST: "];
"1000539" -> "1000440"  [label="CFG: "];
"1000440" -> "1000568"  [label="DDG: check_stack_write(env, state, off, size,\n\t\t\t\t\t\tvalue_regno)"];
"1000440" -> "1000538"  [label="DDG: err"];
"1000538" -> "1000537"  [label="AST: "];
"1000538" -> "1000539"  [label="CFG: "];
"1000539" -> "1000538"  [label="AST: "];
"1000542" -> "1000538"  [label="CFG: "];
"1000537" -> "1000538"  [label="CFG: "];
"1000538" -> "1000568"  [label="DDG: err"];
"1000538" -> "1000537"  [label="DDG: err"];
"1000200" -> "1000538"  [label="DDG: err"];
"1000449" -> "1000538"  [label="DDG: err"];
"1000509" -> "1000538"  [label="DDG: err"];
"1000307" -> "1000538"  [label="DDG: err"];
"1000538" -> "1000566"  [label="DDG: err"];
"1000537" -> "1000536"  [label="AST: "];
"1000537" -> "1000540"  [label="CFG: "];
"1000540" -> "1000537"  [label="AST: "];
"1000563" -> "1000537"  [label="CFG: "];
"1000567" -> "1000537"  [label="CFG: "];
"1000537" -> "1000568"  [label="DDG: size < BPF_REG_SIZE && value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE"];
"1000537" -> "1000568"  [label="DDG: !err"];
"1000537" -> "1000568"  [label="DDG: !err && size < BPF_REG_SIZE && value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE"];
"1000540" -> "1000537"  [label="DDG: size < BPF_REG_SIZE"];
"1000540" -> "1000537"  [label="DDG: value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE"];
"1000566" -> "1000114"  [label="AST: "];
"1000566" -> "1000567"  [label="CFG: "];
"1000567" -> "1000566"  [label="AST: "];
"1000568" -> "1000566"  [label="CFG: "];
"1000566" -> "1000568"  [label="DDG: <RET>"];
"1000567" -> "1000566"  [label="DDG: err"];
"1000541" -> "1000540"  [label="AST: "];
"1000541" -> "1000543"  [label="CFG: "];
"1000542" -> "1000541"  [label="AST: "];
"1000543" -> "1000541"  [label="AST: "];
"1000546" -> "1000541"  [label="CFG: "];
"1000540" -> "1000541"  [label="CFG: "];
"1000541" -> "1000568"  [label="DDG: size"];
"1000541" -> "1000568"  [label="DDG: BPF_REG_SIZE"];
"1000541" -> "1000540"  [label="DDG: size"];
"1000541" -> "1000540"  [label="DDG: BPF_REG_SIZE"];
"1000451" -> "1000541"  [label="DDG: size"];
"1000297" -> "1000541"  [label="DDG: size"];
"1000501" -> "1000541"  [label="DDG: size"];
"1000192" -> "1000541"  [label="DDG: size"];
"1000541" -> "1000560"  [label="DDG: size"];
"1000540" -> "1000544"  [label="CFG: "];
"1000544" -> "1000540"  [label="AST: "];
"1000540" -> "1000568"  [label="DDG: value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE"];
"1000540" -> "1000568"  [label="DDG: size < BPF_REG_SIZE"];
"1000544" -> "1000540"  [label="DDG: value_regno >= 0"];
"1000544" -> "1000540"  [label="DDG: t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE"];
"1000560" -> "1000559"  [label="AST: "];
"1000560" -> "1000565"  [label="CFG: "];
"1000561" -> "1000560"  [label="AST: "];
"1000565" -> "1000560"  [label="AST: "];
"1000567" -> "1000560"  [label="CFG: "];
"1000560" -> "1000568"  [label="DDG: coerce_reg_to_size(&regs[value_regno], size)"];
"1000560" -> "1000568"  [label="DDG: size"];
"1000560" -> "1000568"  [label="DDG: &regs[value_regno]"];
"1000451" -> "1000560"  [label="DDG: size"];
"1000297" -> "1000560"  [label="DDG: size"];
"1000501" -> "1000560"  [label="DDG: size"];
"1000192" -> "1000560"  [label="DDG: size"];
"1000545" -> "1000544"  [label="AST: "];
"1000545" -> "1000547"  [label="CFG: "];
"1000546" -> "1000545"  [label="AST: "];
"1000547" -> "1000545"  [label="AST: "];
"1000550" -> "1000545"  [label="CFG: "];
"1000544" -> "1000545"  [label="CFG: "];
"1000545" -> "1000568"  [label="DDG: value_regno"];
"1000545" -> "1000544"  [label="DDG: value_regno"];
"1000545" -> "1000544"  [label="DDG: 0"];
"1000485" -> "1000545"  [label="DDG: value_regno"];
"1000234" -> "1000545"  [label="DDG: value_regno"];
"1000179" -> "1000545"  [label="DDG: value_regno"];
"1000518" -> "1000545"  [label="DDG: value_regno"];
"1000209" -> "1000545"  [label="DDG: value_regno"];
"1000176" -> "1000545"  [label="DDG: value_regno"];
"1000313" -> "1000545"  [label="DDG: value_regno"];
"1000451" -> "1000545"  [label="DDG: value_regno"];
"1000515" -> "1000545"  [label="DDG: value_regno"];
"1000206" -> "1000545"  [label="DDG: value_regno"];
"1000326" -> "1000545"  [label="DDG: value_regno"];
"1000321" -> "1000545"  [label="DDG: value_regno"];
"1000231" -> "1000545"  [label="DDG: value_regno"];
"1000488" -> "1000545"  [label="DDG: value_regno"];
"1000544" -> "1000548"  [label="CFG: "];
"1000548" -> "1000544"  [label="AST: "];
"1000544" -> "1000568"  [label="DDG: t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE"];
"1000544" -> "1000568"  [label="DDG: value_regno >= 0"];
"1000548" -> "1000544"  [label="DDG: t == BPF_READ"];
"1000548" -> "1000544"  [label="DDG: regs[value_regno].type == SCALAR_VALUE"];
}
