digraph "0_linux_197c949e7798fbf28cfadc69d9ca0c2abbf93191_0@API" {
"1000170" [label="(Call,skb = __skb_recv_datagram(sk, flags | (noblock ? MSG_DONTWAIT : 0),\n\t\t\t\t  &peeked, &off, &err))"];
"1000172" [label="(Call,__skb_recv_datagram(sk, flags | (noblock ? MSG_DONTWAIT : 0),\n\t\t\t\t  &peeked, &off, &err))"];
"1000133" [label="(Call,IS_UDPLITE(sk))"];
"1000119" [label="(Call,inet_sk(sk))"];
"1000114" [label="(Call,inet6_sk(sk))"];
"1000104" [label="(MethodParameterIn,struct sock *sk)"];
"1000477" [label="(Call,unlock_sock_fast(sk, slow))"];
"1000473" [label="(Call,sock_net(sk))"];
"1000468" [label="(Call,sock_net(sk))"];
"1000447" [label="(Call,skb_kill_datagram(sk, skb, flags))"];
"1000443" [label="(Call,lock_sock_fast(sk))"];
"1000239" [label="(Call,udp_lib_checksum_complete(skb))"];
"1000187" [label="(Call,!skb)"];
"1000170" [label="(Call,skb = __skb_recv_datagram(sk, flags | (noblock ? MSG_DONTWAIT : 0),\n\t\t\t\t  &peeked, &off, &err))"];
"1000232" [label="(Call,UDP_SKB_CB(skb))"];
"1000262" [label="(Call,skb_copy_and_csum_datagram_msg(skb, sizeof(struct udphdr), msg))"];
"1000248" [label="(Call,skb_csum_unnecessary(skb))"];
"1000105" [label="(MethodParameterIn,struct msghdr *msg)"];
"1000174" [label="(Call,flags | (noblock ? MSG_DONTWAIT : 0))"];
"1000142" [label="(Call,flags & MSG_ERRQUEUE)"];
"1000108" [label="(MethodParameterIn,int flags)"];
"1000107" [label="(MethodParameterIn,int noblock)"];
"1000461" [label="(Call,sock_net(sk))"];
"1000456" [label="(Call,sock_net(sk))"];
"1000441" [label="(Call,slow = lock_sock_fast(sk))"];
"1000238" [label="(Call,!udp_lib_checksum_complete(skb))"];
"1000236" [label="(Call,checksum_valid = !udp_lib_checksum_complete(skb))"];
"1000242" [label="(Call,!checksum_valid)"];
"1000246" [label="(Call,checksum_valid || skb_csum_unnecessary(skb))"];
"1000252" [label="(Call,skb_copy_datagram_msg(skb, sizeof(struct udphdr),\n \t\t\t\t\t    msg, copied))"];
"1000250" [label="(Call,err = skb_copy_datagram_msg(skb, sizeof(struct udphdr),\n \t\t\t\t\t    msg, copied))"];
"1000274" [label="(Call,unlikely(err))"];
"1000438" [label="(Return,return err;)"];
"1000277" [label="(Call,trace_kfree_skb(skb, udpv6_recvmsg))"];
"1000434" [label="(Call,skb_free_datagram_locked(sk, skb))"];
"1000320" [label="(Call,sock_recv_ts_and_drops(msg, sk, skb))"];
"1000339" [label="(Call,udp_hdr(skb))"];
"1000352" [label="(Call,ip_hdr(skb))"];
"1000397" [label="(Call,ip6_datagram_recv_common_ctl(sk, msg, skb))"];
"1000408" [label="(Call,ip_cmsg_recv(msg, skb))"];
"1000419" [label="(Call,ip6_datagram_recv_specific_ctl(sk, msg, skb))"];
"1000371" [label="(Call,ipv6_hdr(skb))"];
"1000383" [label="(Call,inet6_iif(skb))"];
"1000378" [label="(Call,ipv6_iface_scope_id(&sin6->sin6_addr,\n\t\t\t\t\t\t    inet6_iif(skb)))"];
"1000374" [label="(Call,sin6->sin6_scope_id =\n\t\t\t\tipv6_iface_scope_id(&sin6->sin6_addr,\n\t\t\t\t\t\t    inet6_iif(skb)))"];
"1000423" [label="(Call,err = copied)"];
"1000260" [label="(Call,err = skb_copy_and_csum_datagram_msg(skb, sizeof(struct udphdr), msg))"];
"1000268" [label="(Call,err == -EINVAL)"];
"1000292" [label="(Call,sock_net(sk))"];
"1000291" [label="(Call,UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\t\t   UDP_MIB_INERRORS,\n\t\t\t\t\t\t   is_udplite))"];
"1000298" [label="(Call,sock_net(sk))"];
"1000297" [label="(Call,UDP6_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\t\t    UDP_MIB_INERRORS,\n\t\t\t\t\t\t    is_udplite))"];
"1000310" [label="(Call,sock_net(sk))"];
"1000309" [label="(Call,UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\tUDP_MIB_INDATAGRAMS, is_udplite))"];
"1000316" [label="(Call,sock_net(sk))"];
"1000315" [label="(Call,UDP6_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\tUDP_MIB_INDATAGRAMS, is_udplite))"];
"1000427" [label="(Call,flags & MSG_TRUNC)"];
"1000446" [label="(Call,!skb_kill_datagram(sk, skb, flags))"];
"1000455" [label="(Call,UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\tUDP_MIB_CSUMERRORS, is_udplite))"];
"1000460" [label="(Call,UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\tUDP_MIB_INERRORS, is_udplite))"];
"1000467" [label="(Call,UDP6_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\tUDP_MIB_CSUMERRORS, is_udplite))"];
"1000472" [label="(Call,UDP6_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\tUDP_MIB_INERRORS, is_udplite))"];
"1000171" [label="(Identifier,skb)"];
"1000419" [label="(Call,ip6_datagram_recv_specific_ctl(sk, msg, skb))"];
"1000241" [label="(ControlStructure,if (!checksum_valid))"];
"1000250" [label="(Call,err = skb_copy_datagram_msg(skb, sizeof(struct udphdr),\n \t\t\t\t\t    msg, copied))"];
"1000252" [label="(Call,skb_copy_datagram_msg(skb, sizeof(struct udphdr),\n \t\t\t\t\t    msg, copied))"];
"1000267" [label="(ControlStructure,if (err == -EINVAL))"];
"1000442" [label="(Identifier,slow)"];
"1000269" [label="(Identifier,err)"];
"1000131" [label="(Call,is_udplite = IS_UDPLITE(sk))"];
"1000402" [label="(Identifier,is_udp4)"];
"1000309" [label="(Call,UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\tUDP_MIB_INDATAGRAMS, is_udplite))"];
"1000375" [label="(Call,sin6->sin6_scope_id)"];
"1000466" [label="(Block,)"];
"1000236" [label="(Call,checksum_valid = !udp_lib_checksum_complete(skb))"];
"1000107" [label="(MethodParameterIn,int noblock)"];
"1000470" [label="(Identifier,UDP_MIB_CSUMERRORS)"];
"1000299" [label="(Identifier,sk)"];
"1000340" [label="(Identifier,skb)"];
"1000239" [label="(Call,udp_lib_checksum_complete(skb))"];
"1000108" [label="(MethodParameterIn,int flags)"];
"1000462" [label="(Identifier,sk)"];
"1000410" [label="(Identifier,skb)"];
"1000423" [label="(Call,err = copied)"];
"1000270" [label="(Call,-EINVAL)"];
"1000311" [label="(Identifier,sk)"];
"1000292" [label="(Call,sock_net(sk))"];
"1000181" [label="(Identifier,peeked)"];
"1000448" [label="(Identifier,sk)"];
"1000454" [label="(Block,)"];
"1000372" [label="(Identifier,skb)"];
"1000464" [label="(Identifier,is_udplite)"];
"1000371" [label="(Call,ipv6_hdr(skb))"];
"1000260" [label="(Call,err = skb_copy_and_csum_datagram_msg(skb, sizeof(struct udphdr), msg))"];
"1000144" [label="(Identifier,MSG_ERRQUEUE)"];
"1000404" [label="(ControlStructure,if (inet->cmsg_flags))"];
"1000472" [label="(Call,UDP6_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\tUDP_MIB_INERRORS, is_udplite))"];
"1000460" [label="(Call,UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\tUDP_MIB_INERRORS, is_udplite))"];
"1000240" [label="(Identifier,skb)"];
"1000467" [label="(Call,UDP6_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\tUDP_MIB_CSUMERRORS, is_udplite))"];
"1000176" [label="(Call,noblock ? MSG_DONTWAIT : 0)"];
"1000438" [label="(Return,return err;)"];
"1000435" [label="(Identifier,sk)"];
"1000391" [label="(ControlStructure,if (np->rxopt.all))"];
"1000234" [label="(FieldIdentifier,partial_cov)"];
"1000293" [label="(Identifier,sk)"];
"1000314" [label="(ControlStructure,else)"];
"1000238" [label="(Call,!udp_lib_checksum_complete(skb))"];
"1000189" [label="(ControlStructure,goto out;)"];
"1000233" [label="(Identifier,skb)"];
"1000444" [label="(Identifier,sk)"];
"1000458" [label="(Identifier,UDP_MIB_CSUMERRORS)"];
"1000300" [label="(Identifier,UDP_MIB_INERRORS)"];
"1000427" [label="(Call,flags & MSG_TRUNC)"];
"1000373" [label="(FieldIdentifier,saddr)"];
"1000434" [label="(Call,skb_free_datagram_locked(sk, skb))"];
"1000305" [label="(Identifier,peeked)"];
"1000187" [label="(Call,!skb)"];
"1000478" [label="(Identifier,sk)"];
"1000463" [label="(Identifier,UDP_MIB_INERRORS)"];
"1000323" [label="(Identifier,skb)"];
"1000459" [label="(Identifier,is_udplite)"];
"1000180" [label="(Call,&peeked)"];
"1000307" [label="(ControlStructure,if (is_udp4))"];
"1000242" [label="(Call,!checksum_valid)"];
"1000134" [label="(Identifier,sk)"];
"1000119" [label="(Call,inet_sk(sk))"];
"1000237" [label="(Identifier,checksum_valid)"];
"1000302" [label="(ControlStructure,goto out_free;)"];
"1000279" [label="(Identifier,udpv6_recvmsg)"];
"1000310" [label="(Call,sock_net(sk))"];
"1000430" [label="(Call,err = ulen)"];
"1000449" [label="(Identifier,skb)"];
"1000398" [label="(Identifier,sk)"];
"1000264" [label="(Call,sizeof(struct udphdr))"];
"1000146" [label="(Call,ipv6_recv_error(sk, msg, len, addr_len))"];
"1000182" [label="(Call,&off)"];
"1000456" [label="(Call,sock_net(sk))"];
"1000243" [label="(Identifier,checksum_valid)"];
"1000244" [label="(ControlStructure,goto csum_copy_err;)"];
"1000321" [label="(Identifier,msg)"];
"1000400" [label="(Identifier,skb)"];
"1000295" [label="(Identifier,is_udplite)"];
"1000213" [label="(Call,msg->msg_flags |= MSG_TRUNC)"];
"1000487" [label="(MethodReturn,int)"];
"1000425" [label="(Identifier,copied)"];
"1000436" [label="(Identifier,skb)"];
"1000272" [label="(ControlStructure,goto csum_copy_err;)"];
"1000445" [label="(ControlStructure,if (!skb_kill_datagram(sk, skb, flags)))"];
"1000313" [label="(Identifier,is_udplite)"];
"1000399" [label="(Identifier,msg)"];
"1000384" [label="(Identifier,skb)"];
"1000291" [label="(Call,UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\t\t   UDP_MIB_INERRORS,\n\t\t\t\t\t\t   is_udplite))"];
"1000316" [label="(Call,sock_net(sk))"];
"1000413" [label="(ControlStructure,if (np->rxopt.all))"];
"1000351" [label="(Call,ip_hdr(skb)->saddr)"];
"1000383" [label="(Call,inet6_iif(skb))"];
"1000247" [label="(Identifier,checksum_valid)"];
"1000378" [label="(Call,ipv6_iface_scope_id(&sin6->sin6_addr,\n\t\t\t\t\t\t    inet6_iif(skb)))"];
"1000175" [label="(Identifier,flags)"];
"1000480" [label="(Call,cond_resched())"];
"1000142" [label="(Call,flags & MSG_ERRQUEUE)"];
"1000322" [label="(Identifier,sk)"];
"1000420" [label="(Identifier,sk)"];
"1000245" [label="(ControlStructure,if (checksum_valid || skb_csum_unnecessary(skb)))"];
"1000439" [label="(Identifier,err)"];
"1000476" [label="(Identifier,is_udplite)"];
"1000437" [label="(JumpTarget,out:)"];
"1000326" [label="(Identifier,msg)"];
"1000112" [label="(Call,*np = inet6_sk(sk))"];
"1000263" [label="(Identifier,skb)"];
"1000370" [label="(Call,ipv6_hdr(skb)->saddr)"];
"1000461" [label="(Call,sock_net(sk))"];
"1000248" [label="(Call,skb_csum_unnecessary(skb))"];
"1000141" [label="(ControlStructure,if (flags & MSG_ERRQUEUE))"];
"1000366" [label="(Call,sin6->sin6_addr = ipv6_hdr(skb)->saddr)"];
"1000441" [label="(Call,slow = lock_sock_fast(sk))"];
"1000143" [label="(Identifier,flags)"];
"1000318" [label="(Identifier,UDP_MIB_INDATAGRAMS)"];
"1000261" [label="(Identifier,err)"];
"1000174" [label="(Call,flags | (noblock ? MSG_DONTWAIT : 0))"];
"1000254" [label="(Call,sizeof(struct udphdr))"];
"1000426" [label="(ControlStructure,if (flags & MSG_TRUNC))"];
"1000353" [label="(Identifier,skb)"];
"1000315" [label="(Call,UDP6_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\tUDP_MIB_INDATAGRAMS, is_udplite))"];
"1000170" [label="(Call,skb = __skb_recv_datagram(sk, flags | (noblock ? MSG_DONTWAIT : 0),\n\t\t\t\t  &peeked, &off, &err))"];
"1000232" [label="(Call,UDP_SKB_CB(skb))"];
"1000110" [label="(Block,)"];
"1000479" [label="(Identifier,slow)"];
"1000246" [label="(Call,checksum_valid || skb_csum_unnecessary(skb))"];
"1000379" [label="(Call,&sin6->sin6_addr)"];
"1000468" [label="(Call,sock_net(sk))"];
"1000273" [label="(ControlStructure,if (unlikely(err)))"];
"1000341" [label="(FieldIdentifier,source)"];
"1000257" [label="(Identifier,copied)"];
"1000428" [label="(Identifier,flags)"];
"1000173" [label="(Identifier,sk)"];
"1000339" [label="(Call,udp_hdr(skb))"];
"1000276" [label="(Block,)"];
"1000397" [label="(Call,ip6_datagram_recv_common_ctl(sk, msg, skb))"];
"1000421" [label="(Identifier,msg)"];
"1000317" [label="(Identifier,sk)"];
"1000114" [label="(Call,inet6_sk(sk))"];
"1000268" [label="(Call,err == -EINVAL)"];
"1000473" [label="(Call,sock_net(sk))"];
"1000409" [label="(Identifier,msg)"];
"1000443" [label="(Call,lock_sock_fast(sk))"];
"1000319" [label="(Identifier,is_udplite)"];
"1000186" [label="(ControlStructure,if (!skb))"];
"1000477" [label="(Call,unlock_sock_fast(sk, slow))"];
"1000191" [label="(Identifier,ulen)"];
"1000312" [label="(Identifier,UDP_MIB_INDATAGRAMS)"];
"1000274" [label="(Call,unlikely(err))"];
"1000475" [label="(Identifier,UDP_MIB_INERRORS)"];
"1000297" [label="(Call,UDP6_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\t\t    UDP_MIB_INERRORS,\n\t\t\t\t\t\t    is_udplite))"];
"1000294" [label="(Identifier,UDP_MIB_INERRORS)"];
"1000120" [label="(Identifier,sk)"];
"1000231" [label="(Call,UDP_SKB_CB(skb)->partial_cov)"];
"1000266" [label="(Identifier,msg)"];
"1000457" [label="(Identifier,sk)"];
"1000433" [label="(JumpTarget,out_free:)"];
"1000469" [label="(Identifier,sk)"];
"1000235" [label="(Block,)"];
"1000298" [label="(Call,sock_net(sk))"];
"1000422" [label="(Identifier,skb)"];
"1000259" [label="(Block,)"];
"1000277" [label="(Call,trace_kfree_skb(skb, udpv6_recvmsg))"];
"1000408" [label="(Call,ip_cmsg_recv(msg, skb))"];
"1000253" [label="(Identifier,skb)"];
"1000354" [label="(FieldIdentifier,saddr)"];
"1000154" [label="(Identifier,np)"];
"1000429" [label="(Identifier,MSG_TRUNC)"];
"1000289" [label="(ControlStructure,if (is_udp4))"];
"1000104" [label="(MethodParameterIn,struct sock *sk)"];
"1000262" [label="(Call,skb_copy_and_csum_datagram_msg(skb, sizeof(struct udphdr), msg))"];
"1000249" [label="(Identifier,skb)"];
"1000172" [label="(Call,__skb_recv_datagram(sk, flags | (noblock ? MSG_DONTWAIT : 0),\n\t\t\t\t  &peeked, &off, &err))"];
"1000471" [label="(Identifier,is_udplite)"];
"1000447" [label="(Call,skb_kill_datagram(sk, skb, flags))"];
"1000352" [label="(Call,ip_hdr(skb))"];
"1000446" [label="(Call,!skb_kill_datagram(sk, skb, flags))"];
"1000450" [label="(Identifier,flags)"];
"1000278" [label="(Identifier,skb)"];
"1000228" [label="(Call,copied < ulen)"];
"1000474" [label="(Identifier,sk)"];
"1000387" [label="(Identifier,addr_len)"];
"1000184" [label="(Call,&err)"];
"1000188" [label="(Identifier,skb)"];
"1000365" [label="(Block,)"];
"1000431" [label="(Identifier,err)"];
"1000282" [label="(Identifier,peeked)"];
"1000453" [label="(Identifier,is_udp4)"];
"1000455" [label="(Call,UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\tUDP_MIB_CSUMERRORS, is_udplite))"];
"1000164" [label="(Call,ipv6_recv_rxpmtu(sk, msg, len, addr_len))"];
"1000147" [label="(Identifier,sk)"];
"1000136" [label="(Call,checksum_valid = false)"];
"1000338" [label="(Call,udp_hdr(skb)->source)"];
"1000275" [label="(Identifier,err)"];
"1000256" [label="(Identifier,msg)"];
"1000296" [label="(ControlStructure,else)"];
"1000424" [label="(Identifier,err)"];
"1000115" [label="(Identifier,sk)"];
"1000374" [label="(Call,sin6->sin6_scope_id =\n\t\t\t\tipv6_iface_scope_id(&sin6->sin6_addr,\n\t\t\t\t\t\t    inet6_iif(skb)))"];
"1000301" [label="(Identifier,is_udplite)"];
"1000320" [label="(Call,sock_recv_ts_and_drops(msg, sk, skb))"];
"1000133" [label="(Call,IS_UDPLITE(sk))"];
"1000117" [label="(Call,*inet = inet_sk(sk))"];
"1000105" [label="(MethodParameterIn,struct msghdr *msg)"];
"1000251" [label="(Identifier,err)"];
"1000170" -> "1000110"  [label="AST: "];
"1000170" -> "1000172"  [label="CFG: "];
"1000171" -> "1000170"  [label="AST: "];
"1000172" -> "1000170"  [label="AST: "];
"1000188" -> "1000170"  [label="CFG: "];
"1000170" -> "1000487"  [label="DDG: __skb_recv_datagram(sk, flags | (noblock ? MSG_DONTWAIT : 0),\n\t\t\t\t  &peeked, &off, &err)"];
"1000172" -> "1000170"  [label="DDG: &err"];
"1000172" -> "1000170"  [label="DDG: &peeked"];
"1000172" -> "1000170"  [label="DDG: sk"];
"1000172" -> "1000170"  [label="DDG: &off"];
"1000172" -> "1000170"  [label="DDG: flags | (noblock ? MSG_DONTWAIT : 0)"];
"1000170" -> "1000187"  [label="DDG: skb"];
"1000172" -> "1000184"  [label="CFG: "];
"1000173" -> "1000172"  [label="AST: "];
"1000174" -> "1000172"  [label="AST: "];
"1000180" -> "1000172"  [label="AST: "];
"1000182" -> "1000172"  [label="AST: "];
"1000184" -> "1000172"  [label="AST: "];
"1000172" -> "1000487"  [label="DDG: &off"];
"1000172" -> "1000487"  [label="DDG: &err"];
"1000172" -> "1000487"  [label="DDG: &peeked"];
"1000172" -> "1000487"  [label="DDG: sk"];
"1000172" -> "1000487"  [label="DDG: flags | (noblock ? MSG_DONTWAIT : 0)"];
"1000133" -> "1000172"  [label="DDG: sk"];
"1000477" -> "1000172"  [label="DDG: sk"];
"1000104" -> "1000172"  [label="DDG: sk"];
"1000174" -> "1000172"  [label="DDG: flags"];
"1000174" -> "1000172"  [label="DDG: noblock ? MSG_DONTWAIT : 0"];
"1000172" -> "1000292"  [label="DDG: sk"];
"1000172" -> "1000298"  [label="DDG: sk"];
"1000172" -> "1000310"  [label="DDG: sk"];
"1000172" -> "1000316"  [label="DDG: sk"];
"1000172" -> "1000320"  [label="DDG: sk"];
"1000172" -> "1000434"  [label="DDG: sk"];
"1000172" -> "1000443"  [label="DDG: sk"];
"1000133" -> "1000131"  [label="AST: "];
"1000133" -> "1000134"  [label="CFG: "];
"1000134" -> "1000133"  [label="AST: "];
"1000131" -> "1000133"  [label="CFG: "];
"1000133" -> "1000131"  [label="DDG: sk"];
"1000119" -> "1000133"  [label="DDG: sk"];
"1000104" -> "1000133"  [label="DDG: sk"];
"1000133" -> "1000146"  [label="DDG: sk"];
"1000133" -> "1000164"  [label="DDG: sk"];
"1000119" -> "1000117"  [label="AST: "];
"1000119" -> "1000120"  [label="CFG: "];
"1000120" -> "1000119"  [label="AST: "];
"1000117" -> "1000119"  [label="CFG: "];
"1000119" -> "1000117"  [label="DDG: sk"];
"1000114" -> "1000119"  [label="DDG: sk"];
"1000104" -> "1000119"  [label="DDG: sk"];
"1000114" -> "1000112"  [label="AST: "];
"1000114" -> "1000115"  [label="CFG: "];
"1000115" -> "1000114"  [label="AST: "];
"1000112" -> "1000114"  [label="CFG: "];
"1000114" -> "1000112"  [label="DDG: sk"];
"1000104" -> "1000114"  [label="DDG: sk"];
"1000104" -> "1000103"  [label="AST: "];
"1000104" -> "1000487"  [label="DDG: sk"];
"1000104" -> "1000146"  [label="DDG: sk"];
"1000104" -> "1000164"  [label="DDG: sk"];
"1000104" -> "1000292"  [label="DDG: sk"];
"1000104" -> "1000298"  [label="DDG: sk"];
"1000104" -> "1000310"  [label="DDG: sk"];
"1000104" -> "1000316"  [label="DDG: sk"];
"1000104" -> "1000320"  [label="DDG: sk"];
"1000104" -> "1000397"  [label="DDG: sk"];
"1000104" -> "1000419"  [label="DDG: sk"];
"1000104" -> "1000434"  [label="DDG: sk"];
"1000104" -> "1000443"  [label="DDG: sk"];
"1000104" -> "1000447"  [label="DDG: sk"];
"1000104" -> "1000456"  [label="DDG: sk"];
"1000104" -> "1000461"  [label="DDG: sk"];
"1000104" -> "1000468"  [label="DDG: sk"];
"1000104" -> "1000473"  [label="DDG: sk"];
"1000104" -> "1000477"  [label="DDG: sk"];
"1000477" -> "1000110"  [label="AST: "];
"1000477" -> "1000479"  [label="CFG: "];
"1000478" -> "1000477"  [label="AST: "];
"1000479" -> "1000477"  [label="AST: "];
"1000480" -> "1000477"  [label="CFG: "];
"1000477" -> "1000487"  [label="DDG: slow"];
"1000477" -> "1000487"  [label="DDG: unlock_sock_fast(sk, slow)"];
"1000473" -> "1000477"  [label="DDG: sk"];
"1000461" -> "1000477"  [label="DDG: sk"];
"1000447" -> "1000477"  [label="DDG: sk"];
"1000441" -> "1000477"  [label="DDG: slow"];
"1000473" -> "1000472"  [label="AST: "];
"1000473" -> "1000474"  [label="CFG: "];
"1000474" -> "1000473"  [label="AST: "];
"1000475" -> "1000473"  [label="CFG: "];
"1000473" -> "1000472"  [label="DDG: sk"];
"1000468" -> "1000473"  [label="DDG: sk"];
"1000468" -> "1000467"  [label="AST: "];
"1000468" -> "1000469"  [label="CFG: "];
"1000469" -> "1000468"  [label="AST: "];
"1000470" -> "1000468"  [label="CFG: "];
"1000468" -> "1000467"  [label="DDG: sk"];
"1000447" -> "1000468"  [label="DDG: sk"];
"1000447" -> "1000446"  [label="AST: "];
"1000447" -> "1000450"  [label="CFG: "];
"1000448" -> "1000447"  [label="AST: "];
"1000449" -> "1000447"  [label="AST: "];
"1000450" -> "1000447"  [label="AST: "];
"1000446" -> "1000447"  [label="CFG: "];
"1000447" -> "1000174"  [label="DDG: flags"];
"1000447" -> "1000446"  [label="DDG: sk"];
"1000447" -> "1000446"  [label="DDG: skb"];
"1000447" -> "1000446"  [label="DDG: flags"];
"1000443" -> "1000447"  [label="DDG: sk"];
"1000239" -> "1000447"  [label="DDG: skb"];
"1000262" -> "1000447"  [label="DDG: skb"];
"1000174" -> "1000447"  [label="DDG: flags"];
"1000108" -> "1000447"  [label="DDG: flags"];
"1000447" -> "1000456"  [label="DDG: sk"];
"1000443" -> "1000441"  [label="AST: "];
"1000443" -> "1000444"  [label="CFG: "];
"1000444" -> "1000443"  [label="AST: "];
"1000441" -> "1000443"  [label="CFG: "];
"1000443" -> "1000441"  [label="DDG: sk"];
"1000239" -> "1000238"  [label="AST: "];
"1000239" -> "1000240"  [label="CFG: "];
"1000240" -> "1000239"  [label="AST: "];
"1000238" -> "1000239"  [label="CFG: "];
"1000239" -> "1000238"  [label="DDG: skb"];
"1000187" -> "1000239"  [label="DDG: skb"];
"1000232" -> "1000239"  [label="DDG: skb"];
"1000239" -> "1000248"  [label="DDG: skb"];
"1000239" -> "1000252"  [label="DDG: skb"];
"1000239" -> "1000262"  [label="DDG: skb"];
"1000187" -> "1000186"  [label="AST: "];
"1000187" -> "1000188"  [label="CFG: "];
"1000188" -> "1000187"  [label="AST: "];
"1000189" -> "1000187"  [label="CFG: "];
"1000191" -> "1000187"  [label="CFG: "];
"1000187" -> "1000487"  [label="DDG: skb"];
"1000187" -> "1000487"  [label="DDG: !skb"];
"1000187" -> "1000232"  [label="DDG: skb"];
"1000187" -> "1000248"  [label="DDG: skb"];
"1000187" -> "1000252"  [label="DDG: skb"];
"1000187" -> "1000262"  [label="DDG: skb"];
"1000232" -> "1000231"  [label="AST: "];
"1000232" -> "1000233"  [label="CFG: "];
"1000233" -> "1000232"  [label="AST: "];
"1000234" -> "1000232"  [label="CFG: "];
"1000232" -> "1000248"  [label="DDG: skb"];
"1000232" -> "1000252"  [label="DDG: skb"];
"1000232" -> "1000262"  [label="DDG: skb"];
"1000262" -> "1000260"  [label="AST: "];
"1000262" -> "1000266"  [label="CFG: "];
"1000263" -> "1000262"  [label="AST: "];
"1000264" -> "1000262"  [label="AST: "];
"1000266" -> "1000262"  [label="AST: "];
"1000260" -> "1000262"  [label="CFG: "];
"1000262" -> "1000487"  [label="DDG: msg"];
"1000262" -> "1000252"  [label="DDG: msg"];
"1000262" -> "1000260"  [label="DDG: skb"];
"1000262" -> "1000260"  [label="DDG: msg"];
"1000248" -> "1000262"  [label="DDG: skb"];
"1000105" -> "1000262"  [label="DDG: msg"];
"1000262" -> "1000277"  [label="DDG: skb"];
"1000262" -> "1000320"  [label="DDG: msg"];
"1000262" -> "1000320"  [label="DDG: skb"];
"1000248" -> "1000246"  [label="AST: "];
"1000248" -> "1000249"  [label="CFG: "];
"1000249" -> "1000248"  [label="AST: "];
"1000246" -> "1000248"  [label="CFG: "];
"1000248" -> "1000246"  [label="DDG: skb"];
"1000248" -> "1000252"  [label="DDG: skb"];
"1000105" -> "1000103"  [label="AST: "];
"1000105" -> "1000487"  [label="DDG: msg"];
"1000105" -> "1000146"  [label="DDG: msg"];
"1000105" -> "1000164"  [label="DDG: msg"];
"1000105" -> "1000252"  [label="DDG: msg"];
"1000105" -> "1000320"  [label="DDG: msg"];
"1000105" -> "1000397"  [label="DDG: msg"];
"1000105" -> "1000408"  [label="DDG: msg"];
"1000105" -> "1000419"  [label="DDG: msg"];
"1000174" -> "1000176"  [label="CFG: "];
"1000175" -> "1000174"  [label="AST: "];
"1000176" -> "1000174"  [label="AST: "];
"1000181" -> "1000174"  [label="CFG: "];
"1000174" -> "1000487"  [label="DDG: noblock ? MSG_DONTWAIT : 0"];
"1000174" -> "1000487"  [label="DDG: flags"];
"1000142" -> "1000174"  [label="DDG: flags"];
"1000108" -> "1000174"  [label="DDG: flags"];
"1000107" -> "1000174"  [label="DDG: noblock"];
"1000174" -> "1000427"  [label="DDG: flags"];
"1000142" -> "1000141"  [label="AST: "];
"1000142" -> "1000144"  [label="CFG: "];
"1000143" -> "1000142"  [label="AST: "];
"1000144" -> "1000142"  [label="AST: "];
"1000147" -> "1000142"  [label="CFG: "];
"1000154" -> "1000142"  [label="CFG: "];
"1000142" -> "1000487"  [label="DDG: flags & MSG_ERRQUEUE"];
"1000142" -> "1000487"  [label="DDG: MSG_ERRQUEUE"];
"1000142" -> "1000487"  [label="DDG: flags"];
"1000108" -> "1000142"  [label="DDG: flags"];
"1000108" -> "1000103"  [label="AST: "];
"1000108" -> "1000487"  [label="DDG: flags"];
"1000108" -> "1000427"  [label="DDG: flags"];
"1000107" -> "1000103"  [label="AST: "];
"1000107" -> "1000487"  [label="DDG: noblock"];
"1000107" -> "1000176"  [label="DDG: noblock"];
"1000461" -> "1000460"  [label="AST: "];
"1000461" -> "1000462"  [label="CFG: "];
"1000462" -> "1000461"  [label="AST: "];
"1000463" -> "1000461"  [label="CFG: "];
"1000461" -> "1000460"  [label="DDG: sk"];
"1000456" -> "1000461"  [label="DDG: sk"];
"1000456" -> "1000455"  [label="AST: "];
"1000456" -> "1000457"  [label="CFG: "];
"1000457" -> "1000456"  [label="AST: "];
"1000458" -> "1000456"  [label="CFG: "];
"1000456" -> "1000455"  [label="DDG: sk"];
"1000441" -> "1000110"  [label="AST: "];
"1000442" -> "1000441"  [label="AST: "];
"1000448" -> "1000441"  [label="CFG: "];
"1000441" -> "1000487"  [label="DDG: lock_sock_fast(sk)"];
"1000238" -> "1000236"  [label="AST: "];
"1000236" -> "1000238"  [label="CFG: "];
"1000238" -> "1000487"  [label="DDG: udp_lib_checksum_complete(skb)"];
"1000238" -> "1000236"  [label="DDG: udp_lib_checksum_complete(skb)"];
"1000236" -> "1000235"  [label="AST: "];
"1000237" -> "1000236"  [label="AST: "];
"1000243" -> "1000236"  [label="CFG: "];
"1000236" -> "1000487"  [label="DDG: !udp_lib_checksum_complete(skb)"];
"1000236" -> "1000242"  [label="DDG: checksum_valid"];
"1000242" -> "1000241"  [label="AST: "];
"1000242" -> "1000243"  [label="CFG: "];
"1000243" -> "1000242"  [label="AST: "];
"1000244" -> "1000242"  [label="CFG: "];
"1000247" -> "1000242"  [label="CFG: "];
"1000242" -> "1000487"  [label="DDG: !checksum_valid"];
"1000242" -> "1000487"  [label="DDG: checksum_valid"];
"1000242" -> "1000246"  [label="DDG: checksum_valid"];
"1000246" -> "1000245"  [label="AST: "];
"1000246" -> "1000247"  [label="CFG: "];
"1000247" -> "1000246"  [label="AST: "];
"1000251" -> "1000246"  [label="CFG: "];
"1000261" -> "1000246"  [label="CFG: "];
"1000246" -> "1000487"  [label="DDG: skb_csum_unnecessary(skb)"];
"1000246" -> "1000487"  [label="DDG: checksum_valid || skb_csum_unnecessary(skb)"];
"1000246" -> "1000487"  [label="DDG: checksum_valid"];
"1000136" -> "1000246"  [label="DDG: checksum_valid"];
"1000252" -> "1000250"  [label="AST: "];
"1000252" -> "1000257"  [label="CFG: "];
"1000253" -> "1000252"  [label="AST: "];
"1000254" -> "1000252"  [label="AST: "];
"1000256" -> "1000252"  [label="AST: "];
"1000257" -> "1000252"  [label="AST: "];
"1000250" -> "1000252"  [label="CFG: "];
"1000252" -> "1000487"  [label="DDG: copied"];
"1000252" -> "1000487"  [label="DDG: msg"];
"1000252" -> "1000250"  [label="DDG: skb"];
"1000252" -> "1000250"  [label="DDG: msg"];
"1000252" -> "1000250"  [label="DDG: copied"];
"1000228" -> "1000252"  [label="DDG: copied"];
"1000252" -> "1000277"  [label="DDG: skb"];
"1000252" -> "1000320"  [label="DDG: msg"];
"1000252" -> "1000320"  [label="DDG: skb"];
"1000252" -> "1000423"  [label="DDG: copied"];
"1000250" -> "1000245"  [label="AST: "];
"1000251" -> "1000250"  [label="AST: "];
"1000275" -> "1000250"  [label="CFG: "];
"1000250" -> "1000487"  [label="DDG: skb_copy_datagram_msg(skb, sizeof(struct udphdr),\n \t\t\t\t\t    msg, copied)"];
"1000250" -> "1000274"  [label="DDG: err"];
"1000274" -> "1000273"  [label="AST: "];
"1000274" -> "1000275"  [label="CFG: "];
"1000275" -> "1000274"  [label="AST: "];
"1000278" -> "1000274"  [label="CFG: "];
"1000305" -> "1000274"  [label="CFG: "];
"1000274" -> "1000487"  [label="DDG: err"];
"1000274" -> "1000487"  [label="DDG: unlikely(err)"];
"1000268" -> "1000274"  [label="DDG: err"];
"1000274" -> "1000438"  [label="DDG: err"];
"1000438" -> "1000110"  [label="AST: "];
"1000438" -> "1000439"  [label="CFG: "];
"1000439" -> "1000438"  [label="AST: "];
"1000487" -> "1000438"  [label="CFG: "];
"1000438" -> "1000487"  [label="DDG: <RET>"];
"1000439" -> "1000438"  [label="DDG: err"];
"1000268" -> "1000438"  [label="DDG: err"];
"1000423" -> "1000438"  [label="DDG: err"];
"1000430" -> "1000438"  [label="DDG: err"];
"1000277" -> "1000276"  [label="AST: "];
"1000277" -> "1000279"  [label="CFG: "];
"1000278" -> "1000277"  [label="AST: "];
"1000279" -> "1000277"  [label="AST: "];
"1000282" -> "1000277"  [label="CFG: "];
"1000277" -> "1000487"  [label="DDG: trace_kfree_skb(skb, udpv6_recvmsg)"];
"1000277" -> "1000487"  [label="DDG: udpv6_recvmsg"];
"1000277" -> "1000434"  [label="DDG: skb"];
"1000434" -> "1000110"  [label="AST: "];
"1000434" -> "1000436"  [label="CFG: "];
"1000435" -> "1000434"  [label="AST: "];
"1000436" -> "1000434"  [label="AST: "];
"1000437" -> "1000434"  [label="CFG: "];
"1000434" -> "1000487"  [label="DDG: skb"];
"1000434" -> "1000487"  [label="DDG: skb_free_datagram_locked(sk, skb)"];
"1000434" -> "1000487"  [label="DDG: sk"];
"1000397" -> "1000434"  [label="DDG: sk"];
"1000397" -> "1000434"  [label="DDG: skb"];
"1000292" -> "1000434"  [label="DDG: sk"];
"1000298" -> "1000434"  [label="DDG: sk"];
"1000419" -> "1000434"  [label="DDG: sk"];
"1000419" -> "1000434"  [label="DDG: skb"];
"1000320" -> "1000434"  [label="DDG: sk"];
"1000320" -> "1000434"  [label="DDG: skb"];
"1000383" -> "1000434"  [label="DDG: skb"];
"1000352" -> "1000434"  [label="DDG: skb"];
"1000408" -> "1000434"  [label="DDG: skb"];
"1000320" -> "1000110"  [label="AST: "];
"1000320" -> "1000323"  [label="CFG: "];
"1000321" -> "1000320"  [label="AST: "];
"1000322" -> "1000320"  [label="AST: "];
"1000323" -> "1000320"  [label="AST: "];
"1000326" -> "1000320"  [label="CFG: "];
"1000320" -> "1000487"  [label="DDG: msg"];
"1000320" -> "1000487"  [label="DDG: sock_recv_ts_and_drops(msg, sk, skb)"];
"1000310" -> "1000320"  [label="DDG: sk"];
"1000316" -> "1000320"  [label="DDG: sk"];
"1000320" -> "1000339"  [label="DDG: skb"];
"1000320" -> "1000397"  [label="DDG: sk"];
"1000320" -> "1000397"  [label="DDG: msg"];
"1000320" -> "1000397"  [label="DDG: skb"];
"1000320" -> "1000408"  [label="DDG: msg"];
"1000320" -> "1000408"  [label="DDG: skb"];
"1000320" -> "1000419"  [label="DDG: sk"];
"1000320" -> "1000419"  [label="DDG: msg"];
"1000320" -> "1000419"  [label="DDG: skb"];
"1000339" -> "1000338"  [label="AST: "];
"1000339" -> "1000340"  [label="CFG: "];
"1000340" -> "1000339"  [label="AST: "];
"1000341" -> "1000339"  [label="CFG: "];
"1000339" -> "1000352"  [label="DDG: skb"];
"1000339" -> "1000371"  [label="DDG: skb"];
"1000352" -> "1000351"  [label="AST: "];
"1000352" -> "1000353"  [label="CFG: "];
"1000353" -> "1000352"  [label="AST: "];
"1000354" -> "1000352"  [label="CFG: "];
"1000352" -> "1000397"  [label="DDG: skb"];
"1000352" -> "1000408"  [label="DDG: skb"];
"1000352" -> "1000419"  [label="DDG: skb"];
"1000397" -> "1000391"  [label="AST: "];
"1000397" -> "1000400"  [label="CFG: "];
"1000398" -> "1000397"  [label="AST: "];
"1000399" -> "1000397"  [label="AST: "];
"1000400" -> "1000397"  [label="AST: "];
"1000402" -> "1000397"  [label="CFG: "];
"1000397" -> "1000487"  [label="DDG: ip6_datagram_recv_common_ctl(sk, msg, skb)"];
"1000397" -> "1000487"  [label="DDG: msg"];
"1000383" -> "1000397"  [label="DDG: skb"];
"1000397" -> "1000408"  [label="DDG: msg"];
"1000397" -> "1000408"  [label="DDG: skb"];
"1000397" -> "1000419"  [label="DDG: sk"];
"1000397" -> "1000419"  [label="DDG: msg"];
"1000397" -> "1000419"  [label="DDG: skb"];
"1000408" -> "1000404"  [label="AST: "];
"1000408" -> "1000410"  [label="CFG: "];
"1000409" -> "1000408"  [label="AST: "];
"1000410" -> "1000408"  [label="AST: "];
"1000424" -> "1000408"  [label="CFG: "];
"1000408" -> "1000487"  [label="DDG: msg"];
"1000408" -> "1000487"  [label="DDG: ip_cmsg_recv(msg, skb)"];
"1000383" -> "1000408"  [label="DDG: skb"];
"1000419" -> "1000413"  [label="AST: "];
"1000419" -> "1000422"  [label="CFG: "];
"1000420" -> "1000419"  [label="AST: "];
"1000421" -> "1000419"  [label="AST: "];
"1000422" -> "1000419"  [label="AST: "];
"1000424" -> "1000419"  [label="CFG: "];
"1000419" -> "1000487"  [label="DDG: msg"];
"1000419" -> "1000487"  [label="DDG: ip6_datagram_recv_specific_ctl(sk, msg, skb)"];
"1000383" -> "1000419"  [label="DDG: skb"];
"1000371" -> "1000370"  [label="AST: "];
"1000371" -> "1000372"  [label="CFG: "];
"1000372" -> "1000371"  [label="AST: "];
"1000373" -> "1000371"  [label="CFG: "];
"1000371" -> "1000383"  [label="DDG: skb"];
"1000383" -> "1000378"  [label="AST: "];
"1000383" -> "1000384"  [label="CFG: "];
"1000384" -> "1000383"  [label="AST: "];
"1000378" -> "1000383"  [label="CFG: "];
"1000383" -> "1000378"  [label="DDG: skb"];
"1000378" -> "1000374"  [label="AST: "];
"1000379" -> "1000378"  [label="AST: "];
"1000374" -> "1000378"  [label="CFG: "];
"1000378" -> "1000487"  [label="DDG: inet6_iif(skb)"];
"1000378" -> "1000487"  [label="DDG: &sin6->sin6_addr"];
"1000378" -> "1000374"  [label="DDG: &sin6->sin6_addr"];
"1000378" -> "1000374"  [label="DDG: inet6_iif(skb)"];
"1000366" -> "1000378"  [label="DDG: sin6->sin6_addr"];
"1000374" -> "1000365"  [label="AST: "];
"1000375" -> "1000374"  [label="AST: "];
"1000387" -> "1000374"  [label="CFG: "];
"1000374" -> "1000487"  [label="DDG: sin6->sin6_scope_id"];
"1000374" -> "1000487"  [label="DDG: ipv6_iface_scope_id(&sin6->sin6_addr,\n\t\t\t\t\t\t    inet6_iif(skb))"];
"1000423" -> "1000110"  [label="AST: "];
"1000423" -> "1000425"  [label="CFG: "];
"1000424" -> "1000423"  [label="AST: "];
"1000425" -> "1000423"  [label="AST: "];
"1000428" -> "1000423"  [label="CFG: "];
"1000423" -> "1000487"  [label="DDG: copied"];
"1000423" -> "1000487"  [label="DDG: err"];
"1000228" -> "1000423"  [label="DDG: copied"];
"1000260" -> "1000259"  [label="AST: "];
"1000261" -> "1000260"  [label="AST: "];
"1000269" -> "1000260"  [label="CFG: "];
"1000260" -> "1000487"  [label="DDG: skb_copy_and_csum_datagram_msg(skb, sizeof(struct udphdr), msg)"];
"1000260" -> "1000268"  [label="DDG: err"];
"1000268" -> "1000267"  [label="AST: "];
"1000268" -> "1000270"  [label="CFG: "];
"1000269" -> "1000268"  [label="AST: "];
"1000270" -> "1000268"  [label="AST: "];
"1000272" -> "1000268"  [label="CFG: "];
"1000275" -> "1000268"  [label="CFG: "];
"1000268" -> "1000487"  [label="DDG: err"];
"1000268" -> "1000487"  [label="DDG: err == -EINVAL"];
"1000268" -> "1000487"  [label="DDG: -EINVAL"];
"1000270" -> "1000268"  [label="DDG: EINVAL"];
"1000292" -> "1000291"  [label="AST: "];
"1000292" -> "1000293"  [label="CFG: "];
"1000293" -> "1000292"  [label="AST: "];
"1000294" -> "1000292"  [label="CFG: "];
"1000292" -> "1000291"  [label="DDG: sk"];
"1000291" -> "1000289"  [label="AST: "];
"1000291" -> "1000295"  [label="CFG: "];
"1000294" -> "1000291"  [label="AST: "];
"1000295" -> "1000291"  [label="AST: "];
"1000302" -> "1000291"  [label="CFG: "];
"1000291" -> "1000487"  [label="DDG: UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\t\t   UDP_MIB_INERRORS,\n\t\t\t\t\t\t   is_udplite)"];
"1000291" -> "1000487"  [label="DDG: sock_net(sk)"];
"1000291" -> "1000487"  [label="DDG: UDP_MIB_INERRORS"];
"1000291" -> "1000487"  [label="DDG: is_udplite"];
"1000460" -> "1000291"  [label="DDG: UDP_MIB_INERRORS"];
"1000460" -> "1000291"  [label="DDG: is_udplite"];
"1000472" -> "1000291"  [label="DDG: UDP_MIB_INERRORS"];
"1000472" -> "1000291"  [label="DDG: is_udplite"];
"1000131" -> "1000291"  [label="DDG: is_udplite"];
"1000298" -> "1000297"  [label="AST: "];
"1000298" -> "1000299"  [label="CFG: "];
"1000299" -> "1000298"  [label="AST: "];
"1000300" -> "1000298"  [label="CFG: "];
"1000298" -> "1000297"  [label="DDG: sk"];
"1000297" -> "1000296"  [label="AST: "];
"1000297" -> "1000301"  [label="CFG: "];
"1000300" -> "1000297"  [label="AST: "];
"1000301" -> "1000297"  [label="AST: "];
"1000302" -> "1000297"  [label="CFG: "];
"1000297" -> "1000487"  [label="DDG: sock_net(sk)"];
"1000297" -> "1000487"  [label="DDG: is_udplite"];
"1000297" -> "1000487"  [label="DDG: UDP_MIB_INERRORS"];
"1000297" -> "1000487"  [label="DDG: UDP6_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\t\t    UDP_MIB_INERRORS,\n\t\t\t\t\t\t    is_udplite)"];
"1000460" -> "1000297"  [label="DDG: UDP_MIB_INERRORS"];
"1000460" -> "1000297"  [label="DDG: is_udplite"];
"1000472" -> "1000297"  [label="DDG: UDP_MIB_INERRORS"];
"1000472" -> "1000297"  [label="DDG: is_udplite"];
"1000131" -> "1000297"  [label="DDG: is_udplite"];
"1000310" -> "1000309"  [label="AST: "];
"1000310" -> "1000311"  [label="CFG: "];
"1000311" -> "1000310"  [label="AST: "];
"1000312" -> "1000310"  [label="CFG: "];
"1000310" -> "1000309"  [label="DDG: sk"];
"1000309" -> "1000307"  [label="AST: "];
"1000309" -> "1000313"  [label="CFG: "];
"1000312" -> "1000309"  [label="AST: "];
"1000313" -> "1000309"  [label="AST: "];
"1000321" -> "1000309"  [label="CFG: "];
"1000309" -> "1000487"  [label="DDG: sock_net(sk)"];
"1000309" -> "1000487"  [label="DDG: UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\tUDP_MIB_INDATAGRAMS, is_udplite)"];
"1000309" -> "1000487"  [label="DDG: UDP_MIB_INDATAGRAMS"];
"1000309" -> "1000487"  [label="DDG: is_udplite"];
"1000131" -> "1000309"  [label="DDG: is_udplite"];
"1000472" -> "1000309"  [label="DDG: is_udplite"];
"1000460" -> "1000309"  [label="DDG: is_udplite"];
"1000316" -> "1000315"  [label="AST: "];
"1000316" -> "1000317"  [label="CFG: "];
"1000317" -> "1000316"  [label="AST: "];
"1000318" -> "1000316"  [label="CFG: "];
"1000316" -> "1000315"  [label="DDG: sk"];
"1000315" -> "1000314"  [label="AST: "];
"1000315" -> "1000319"  [label="CFG: "];
"1000318" -> "1000315"  [label="AST: "];
"1000319" -> "1000315"  [label="AST: "];
"1000321" -> "1000315"  [label="CFG: "];
"1000315" -> "1000487"  [label="DDG: UDP6_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\tUDP_MIB_INDATAGRAMS, is_udplite)"];
"1000315" -> "1000487"  [label="DDG: UDP_MIB_INDATAGRAMS"];
"1000315" -> "1000487"  [label="DDG: sock_net(sk)"];
"1000315" -> "1000487"  [label="DDG: is_udplite"];
"1000131" -> "1000315"  [label="DDG: is_udplite"];
"1000472" -> "1000315"  [label="DDG: is_udplite"];
"1000460" -> "1000315"  [label="DDG: is_udplite"];
"1000427" -> "1000426"  [label="AST: "];
"1000427" -> "1000429"  [label="CFG: "];
"1000428" -> "1000427"  [label="AST: "];
"1000429" -> "1000427"  [label="AST: "];
"1000431" -> "1000427"  [label="CFG: "];
"1000433" -> "1000427"  [label="CFG: "];
"1000427" -> "1000487"  [label="DDG: flags"];
"1000427" -> "1000487"  [label="DDG: flags & MSG_TRUNC"];
"1000427" -> "1000487"  [label="DDG: MSG_TRUNC"];
"1000213" -> "1000427"  [label="DDG: MSG_TRUNC"];
"1000446" -> "1000445"  [label="AST: "];
"1000453" -> "1000446"  [label="CFG: "];
"1000478" -> "1000446"  [label="CFG: "];
"1000446" -> "1000487"  [label="DDG: skb_kill_datagram(sk, skb, flags)"];
"1000446" -> "1000487"  [label="DDG: !skb_kill_datagram(sk, skb, flags)"];
"1000455" -> "1000454"  [label="AST: "];
"1000455" -> "1000459"  [label="CFG: "];
"1000458" -> "1000455"  [label="AST: "];
"1000459" -> "1000455"  [label="AST: "];
"1000462" -> "1000455"  [label="CFG: "];
"1000455" -> "1000487"  [label="DDG: UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\tUDP_MIB_CSUMERRORS, is_udplite)"];
"1000455" -> "1000487"  [label="DDG: UDP_MIB_CSUMERRORS"];
"1000467" -> "1000455"  [label="DDG: UDP_MIB_CSUMERRORS"];
"1000131" -> "1000455"  [label="DDG: is_udplite"];
"1000472" -> "1000455"  [label="DDG: is_udplite"];
"1000460" -> "1000455"  [label="DDG: is_udplite"];
"1000455" -> "1000460"  [label="DDG: is_udplite"];
"1000455" -> "1000467"  [label="DDG: UDP_MIB_CSUMERRORS"];
"1000460" -> "1000454"  [label="AST: "];
"1000460" -> "1000464"  [label="CFG: "];
"1000463" -> "1000460"  [label="AST: "];
"1000464" -> "1000460"  [label="AST: "];
"1000478" -> "1000460"  [label="CFG: "];
"1000460" -> "1000487"  [label="DDG: sock_net(sk)"];
"1000460" -> "1000487"  [label="DDG: UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\tUDP_MIB_INERRORS, is_udplite)"];
"1000460" -> "1000487"  [label="DDG: UDP_MIB_INERRORS"];
"1000460" -> "1000487"  [label="DDG: is_udplite"];
"1000472" -> "1000460"  [label="DDG: UDP_MIB_INERRORS"];
"1000460" -> "1000467"  [label="DDG: is_udplite"];
"1000460" -> "1000472"  [label="DDG: UDP_MIB_INERRORS"];
"1000467" -> "1000466"  [label="AST: "];
"1000467" -> "1000471"  [label="CFG: "];
"1000470" -> "1000467"  [label="AST: "];
"1000471" -> "1000467"  [label="AST: "];
"1000474" -> "1000467"  [label="CFG: "];
"1000467" -> "1000487"  [label="DDG: UDP6_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\tUDP_MIB_CSUMERRORS, is_udplite)"];
"1000467" -> "1000487"  [label="DDG: UDP_MIB_CSUMERRORS"];
"1000131" -> "1000467"  [label="DDG: is_udplite"];
"1000472" -> "1000467"  [label="DDG: is_udplite"];
"1000467" -> "1000472"  [label="DDG: is_udplite"];
"1000472" -> "1000466"  [label="AST: "];
"1000472" -> "1000476"  [label="CFG: "];
"1000475" -> "1000472"  [label="AST: "];
"1000476" -> "1000472"  [label="AST: "];
"1000478" -> "1000472"  [label="CFG: "];
"1000472" -> "1000487"  [label="DDG: UDP6_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\tUDP_MIB_INERRORS, is_udplite)"];
"1000472" -> "1000487"  [label="DDG: is_udplite"];
"1000472" -> "1000487"  [label="DDG: UDP_MIB_INERRORS"];
"1000472" -> "1000487"  [label="DDG: sock_net(sk)"];
}
