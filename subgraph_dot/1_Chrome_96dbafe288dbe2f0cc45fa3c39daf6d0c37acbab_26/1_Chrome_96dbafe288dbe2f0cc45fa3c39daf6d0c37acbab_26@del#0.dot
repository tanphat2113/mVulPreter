digraph "1_Chrome_96dbafe288dbe2f0cc45fa3c39daf6d0c37acbab_26@del" {
"1000417" [label="(Call,comp->steps[i].op == XSLT_OP_PREDICATE)"];
"1000234" [label="(Call,comp->steps[i].op = comp->steps[j].op)"];
"1000249" [label="(Call,comp->steps[j].op = op)"];
"1000225" [label="(Call,op = comp->steps[i].op)"];
"1000426" [label="(Call,comp->steps[i + 1].op == XSLT_OP_PREDICATE)"];
"1000417" [label="(Call,comp->steps[i].op == XSLT_OP_PREDICATE)"];
"1000416" [label="(Call,(comp->steps[i].op == XSLT_OP_PREDICATE) &&\n \t    (comp->steps[i + 1].op == XSLT_OP_PREDICATE))"];
"1000234" [label="(Call,comp->steps[i].op = comp->steps[j].op)"];
"1000253" [label="(Identifier,comp)"];
"1000121" [label="(Block,)"];
"1000238" [label="(Identifier,comp)"];
"1000430" [label="(Identifier,comp)"];
"1000257" [label="(Identifier,op)"];
"1000417" [label="(Call,comp->steps[i].op == XSLT_OP_PREDICATE)"];
"1000413" [label="(Identifier,i)"];
"1000436" [label="(Identifier,XSLT_OP_PREDICATE)"];
"1000425" [label="(Identifier,XSLT_OP_PREDICATE)"];
"1000249" [label="(Call,comp->steps[j].op = op)"];
"1000426" [label="(Call,comp->steps[i + 1].op == XSLT_OP_PREDICATE)"];
"1000259" [label="(Identifier,expr)"];
"1000250" [label="(Call,comp->steps[j].op)"];
"1000440" [label="(Identifier,comp)"];
"1000225" [label="(Call,op = comp->steps[i].op)"];
"1000235" [label="(Call,comp->steps[i].op)"];
"1000415" [label="(ControlStructure,if ((comp->steps[i].op == XSLT_OP_PREDICATE) &&\n \t    (comp->steps[i + 1].op == XSLT_OP_PREDICATE)))"];
"1000226" [label="(Identifier,op)"];
"1000242" [label="(Call,comp->steps[j].op)"];
"1000418" [label="(Call,comp->steps[i].op)"];
"1000416" [label="(Call,(comp->steps[i].op == XSLT_OP_PREDICATE) &&\n \t    (comp->steps[i + 1].op == XSLT_OP_PREDICATE))"];
"1000427" [label="(Call,comp->steps[i + 1].op)"];
"1000227" [label="(Call,comp->steps[i].op)"];
"1000478" [label="(MethodReturn,RET)"];
"1000417" -> "1000416"  [label="AST: "];
"1000417" -> "1000425"  [label="CFG: "];
"1000418" -> "1000417"  [label="AST: "];
"1000425" -> "1000417"  [label="AST: "];
"1000430" -> "1000417"  [label="CFG: "];
"1000416" -> "1000417"  [label="CFG: "];
"1000417" -> "1000478"  [label="DDG: XSLT_OP_PREDICATE"];
"1000417" -> "1000478"  [label="DDG: comp->steps[i].op"];
"1000417" -> "1000416"  [label="DDG: comp->steps[i].op"];
"1000417" -> "1000416"  [label="DDG: XSLT_OP_PREDICATE"];
"1000234" -> "1000417"  [label="DDG: comp->steps[i].op"];
"1000426" -> "1000417"  [label="DDG: XSLT_OP_PREDICATE"];
"1000417" -> "1000426"  [label="DDG: XSLT_OP_PREDICATE"];
"1000234" -> "1000121"  [label="AST: "];
"1000234" -> "1000242"  [label="CFG: "];
"1000235" -> "1000234"  [label="AST: "];
"1000242" -> "1000234"  [label="AST: "];
"1000253" -> "1000234"  [label="CFG: "];
"1000234" -> "1000478"  [label="DDG: comp->steps[i].op"];
"1000234" -> "1000225"  [label="DDG: comp->steps[i].op"];
"1000249" -> "1000234"  [label="DDG: comp->steps[j].op"];
"1000249" -> "1000121"  [label="AST: "];
"1000249" -> "1000257"  [label="CFG: "];
"1000250" -> "1000249"  [label="AST: "];
"1000257" -> "1000249"  [label="AST: "];
"1000259" -> "1000249"  [label="CFG: "];
"1000249" -> "1000478"  [label="DDG: comp->steps[j].op"];
"1000249" -> "1000478"  [label="DDG: op"];
"1000225" -> "1000249"  [label="DDG: op"];
"1000225" -> "1000121"  [label="AST: "];
"1000225" -> "1000227"  [label="CFG: "];
"1000226" -> "1000225"  [label="AST: "];
"1000227" -> "1000225"  [label="AST: "];
"1000238" -> "1000225"  [label="CFG: "];
"1000426" -> "1000416"  [label="AST: "];
"1000426" -> "1000436"  [label="CFG: "];
"1000427" -> "1000426"  [label="AST: "];
"1000436" -> "1000426"  [label="AST: "];
"1000416" -> "1000426"  [label="CFG: "];
"1000426" -> "1000478"  [label="DDG: XSLT_OP_PREDICATE"];
"1000426" -> "1000478"  [label="DDG: comp->steps[i + 1].op"];
"1000426" -> "1000416"  [label="DDG: comp->steps[i + 1].op"];
"1000426" -> "1000416"  [label="DDG: XSLT_OP_PREDICATE"];
"1000416" -> "1000415"  [label="AST: "];
"1000440" -> "1000416"  [label="CFG: "];
"1000413" -> "1000416"  [label="CFG: "];
"1000416" -> "1000478"  [label="DDG: comp->steps[i + 1].op == XSLT_OP_PREDICATE"];
"1000416" -> "1000478"  [label="DDG: (comp->steps[i].op == XSLT_OP_PREDICATE) &&\n \t    (comp->steps[i + 1].op == XSLT_OP_PREDICATE)"];
"1000416" -> "1000478"  [label="DDG: comp->steps[i].op == XSLT_OP_PREDICATE"];
}
