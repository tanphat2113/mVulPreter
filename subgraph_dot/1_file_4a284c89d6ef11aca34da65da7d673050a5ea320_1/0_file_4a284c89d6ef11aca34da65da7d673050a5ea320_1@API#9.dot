digraph "0_file_4a284c89d6ef11aca34da65da7d673050a5ea320_1@API" {
"1000673" [label="(Call,file_regfree(&rx))"];
"1000576" [label="(Call,file_regexec(&rx, (const char *)ms->search.s,\n\t\t\t    1, pmatch, REG_STARTEND))"];
"1000487" [label="(Call,file_regcomp(&rx, m->value.s,\n\t\t    REG_EXTENDED|REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0)))"];
"1000495" [label="(Call,REG_EXTENDED|REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0))"];
"1000497" [label="(Call,REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0))"];
"1000579" [label="(Call,(const char *)ms->search.s)"];
"1000565" [label="(Call,(intptr_t)ms->search.s)"];
"1000473" [label="(Call,ms->search.s == NULL)"];
"1000661" [label="(Call,file_regerror(&rx, rc, ms))"];
"1000574" [label="(Call,rc = file_regexec(&rx, (const char *)ms->search.s,\n\t\t\t    1, pmatch, REG_STARTEND))"];
"1000104" [label="(MethodParameterIn,struct magic_set *ms)"];
"1000510" [label="(Call,file_regerror(&rx, rc, ms))"];
"1000485" [label="(Call,rc = file_regcomp(&rx, m->value.s,\n\t\t    REG_EXTENDED|REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0)))"];
"1000661" [label="(Call,file_regerror(&rx, rc, ms))"];
"1000479" [label="(Identifier,NULL)"];
"1000693" [label="(Call,file_magerror(ms, \"invalid type %d in magiccheck()\", m->type))"];
"1000994" [label="(MethodReturn,RET)"];
"1000579" [label="(Call,(const char *)ms->search.s)"];
"1000581" [label="(Call,ms->search.s)"];
"1000587" [label="(Identifier,pmatch)"];
"1000678" [label="(Identifier,v)"];
"1000673" [label="(Call,file_regfree(&rx))"];
"1000577" [label="(Call,&rx)"];
"1000499" [label="(Call,(m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0)"];
"1000565" [label="(Call,(intptr_t)ms->search.s)"];
"1000664" [label="(Identifier,rc)"];
"1000516" [label="(Identifier,v)"];
"1000486" [label="(Identifier,rc)"];
"1000485" [label="(Call,rc = file_regcomp(&rx, m->value.s,\n\t\t    REG_EXTENDED|REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0)))"];
"1000496" [label="(Identifier,REG_EXTENDED)"];
"1000508" [label="(Identifier,rc)"];
"1000593" [label="(Call,(intptr_t)ms->search.s)"];
"1000604" [label="(Block,)"];
"1000667" [label="(Identifier,v)"];
"1000588" [label="(Identifier,REG_STARTEND)"];
"1000483" [label="(Identifier,l)"];
"1000472" [label="(ControlStructure,if (ms->search.s == NULL))"];
"1000522" [label="(Block,)"];
"1000509" [label="(Block,)"];
"1000497" [label="(Call,REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0))"];
"1000239" [label="(Call,file_magerror(ms, \"cannot happen with float: invalid relation `%c'\",\n\t\t\t    m->reln))"];
"1000510" [label="(Call,file_regerror(&rx, rc, ms))"];
"1000704" [label="(Call,file_signextend(ms, m, v))"];
"1000575" [label="(Identifier,rc)"];
"1000563" [label="(Call,(char *)(intptr_t)ms->search.s)"];
"1000514" [label="(Identifier,ms)"];
"1000473" [label="(Call,ms->search.s == NULL)"];
"1000104" [label="(MethodParameterIn,struct magic_set *ms)"];
"1000674" [label="(Call,&rx)"];
"1000487" [label="(Call,file_regcomp(&rx, m->value.s,\n\t\t    REG_EXTENDED|REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0)))"];
"1000498" [label="(Identifier,REG_NEWLINE)"];
"1000586" [label="(Literal,1)"];
"1000495" [label="(Call,REG_EXTENDED|REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0))"];
"1000567" [label="(Call,ms->search.s)"];
"1000304" [label="(Call,file_magerror(ms, \"cannot happen with double: invalid relation `%c'\", m->reln))"];
"1000983" [label="(Call,file_magerror(ms, \"cannot happen: invalid relation `%c'\",\n\t\t    m->reln))"];
"1000665" [label="(Identifier,ms)"];
"1000474" [label="(Call,ms->search.s)"];
"1000490" [label="(Call,m->value.s)"];
"1000469" [label="(Block,)"];
"1000576" [label="(Call,file_regexec(&rx, (const char *)ms->search.s,\n\t\t\t    1, pmatch, REG_STARTEND))"];
"1000481" [label="(Literal,0)"];
"1000662" [label="(Call,&rx)"];
"1000574" [label="(Call,rc = file_regexec(&rx, (const char *)ms->search.s,\n\t\t\t    1, pmatch, REG_STARTEND))"];
"1000511" [label="(Call,&rx)"];
"1000513" [label="(Identifier,rc)"];
"1000488" [label="(Call,&rx)"];
"1000673" -> "1000469"  [label="AST: "];
"1000673" -> "1000674"  [label="CFG: "];
"1000674" -> "1000673"  [label="AST: "];
"1000678" -> "1000673"  [label="CFG: "];
"1000673" -> "1000994"  [label="DDG: &rx"];
"1000673" -> "1000994"  [label="DDG: file_regfree(&rx)"];
"1000576" -> "1000673"  [label="DDG: &rx"];
"1000661" -> "1000673"  [label="DDG: &rx"];
"1000510" -> "1000673"  [label="DDG: &rx"];
"1000576" -> "1000574"  [label="AST: "];
"1000576" -> "1000588"  [label="CFG: "];
"1000577" -> "1000576"  [label="AST: "];
"1000579" -> "1000576"  [label="AST: "];
"1000586" -> "1000576"  [label="AST: "];
"1000587" -> "1000576"  [label="AST: "];
"1000588" -> "1000576"  [label="AST: "];
"1000574" -> "1000576"  [label="CFG: "];
"1000576" -> "1000994"  [label="DDG: (const char *)ms->search.s"];
"1000576" -> "1000994"  [label="DDG: &rx"];
"1000576" -> "1000994"  [label="DDG: REG_STARTEND"];
"1000576" -> "1000994"  [label="DDG: pmatch"];
"1000576" -> "1000574"  [label="DDG: REG_STARTEND"];
"1000576" -> "1000574"  [label="DDG: 1"];
"1000576" -> "1000574"  [label="DDG: &rx"];
"1000576" -> "1000574"  [label="DDG: pmatch"];
"1000576" -> "1000574"  [label="DDG: (const char *)ms->search.s"];
"1000487" -> "1000576"  [label="DDG: &rx"];
"1000579" -> "1000576"  [label="DDG: ms->search.s"];
"1000576" -> "1000661"  [label="DDG: &rx"];
"1000487" -> "1000485"  [label="AST: "];
"1000487" -> "1000495"  [label="CFG: "];
"1000488" -> "1000487"  [label="AST: "];
"1000490" -> "1000487"  [label="AST: "];
"1000495" -> "1000487"  [label="AST: "];
"1000485" -> "1000487"  [label="CFG: "];
"1000487" -> "1000994"  [label="DDG: REG_EXTENDED|REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0)"];
"1000487" -> "1000994"  [label="DDG: m->value.s"];
"1000487" -> "1000485"  [label="DDG: &rx"];
"1000487" -> "1000485"  [label="DDG: m->value.s"];
"1000487" -> "1000485"  [label="DDG: REG_EXTENDED|REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0)"];
"1000495" -> "1000487"  [label="DDG: REG_EXTENDED"];
"1000495" -> "1000487"  [label="DDG: REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0)"];
"1000487" -> "1000510"  [label="DDG: &rx"];
"1000495" -> "1000497"  [label="CFG: "];
"1000496" -> "1000495"  [label="AST: "];
"1000497" -> "1000495"  [label="AST: "];
"1000495" -> "1000994"  [label="DDG: REG_EXTENDED"];
"1000495" -> "1000994"  [label="DDG: REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0)"];
"1000497" -> "1000495"  [label="DDG: REG_NEWLINE"];
"1000497" -> "1000495"  [label="DDG: (m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0"];
"1000497" -> "1000499"  [label="CFG: "];
"1000498" -> "1000497"  [label="AST: "];
"1000499" -> "1000497"  [label="AST: "];
"1000497" -> "1000994"  [label="DDG: REG_NEWLINE"];
"1000497" -> "1000994"  [label="DDG: (m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0"];
"1000579" -> "1000581"  [label="CFG: "];
"1000580" -> "1000579"  [label="AST: "];
"1000581" -> "1000579"  [label="AST: "];
"1000586" -> "1000579"  [label="CFG: "];
"1000565" -> "1000579"  [label="DDG: ms->search.s"];
"1000579" -> "1000593"  [label="DDG: ms->search.s"];
"1000565" -> "1000563"  [label="AST: "];
"1000565" -> "1000567"  [label="CFG: "];
"1000566" -> "1000565"  [label="AST: "];
"1000567" -> "1000565"  [label="AST: "];
"1000563" -> "1000565"  [label="CFG: "];
"1000565" -> "1000563"  [label="DDG: ms->search.s"];
"1000473" -> "1000565"  [label="DDG: ms->search.s"];
"1000473" -> "1000472"  [label="AST: "];
"1000473" -> "1000479"  [label="CFG: "];
"1000474" -> "1000473"  [label="AST: "];
"1000479" -> "1000473"  [label="AST: "];
"1000481" -> "1000473"  [label="CFG: "];
"1000483" -> "1000473"  [label="CFG: "];
"1000473" -> "1000994"  [label="DDG: ms->search.s"];
"1000473" -> "1000994"  [label="DDG: NULL"];
"1000473" -> "1000994"  [label="DDG: ms->search.s == NULL"];
"1000661" -> "1000604"  [label="AST: "];
"1000661" -> "1000665"  [label="CFG: "];
"1000662" -> "1000661"  [label="AST: "];
"1000664" -> "1000661"  [label="AST: "];
"1000665" -> "1000661"  [label="AST: "];
"1000667" -> "1000661"  [label="CFG: "];
"1000661" -> "1000994"  [label="DDG: rc"];
"1000661" -> "1000994"  [label="DDG: file_regerror(&rx, rc, ms)"];
"1000661" -> "1000994"  [label="DDG: &rx"];
"1000661" -> "1000994"  [label="DDG: ms"];
"1000574" -> "1000661"  [label="DDG: rc"];
"1000104" -> "1000661"  [label="DDG: ms"];
"1000661" -> "1000704"  [label="DDG: ms"];
"1000574" -> "1000522"  [label="AST: "];
"1000575" -> "1000574"  [label="AST: "];
"1000592" -> "1000574"  [label="CFG: "];
"1000574" -> "1000994"  [label="DDG: rc"];
"1000574" -> "1000994"  [label="DDG: file_regexec(&rx, (const char *)ms->search.s,\n\t\t\t    1, pmatch, REG_STARTEND)"];
"1000104" -> "1000103"  [label="AST: "];
"1000104" -> "1000994"  [label="DDG: ms"];
"1000104" -> "1000239"  [label="DDG: ms"];
"1000104" -> "1000304"  [label="DDG: ms"];
"1000104" -> "1000510"  [label="DDG: ms"];
"1000104" -> "1000693"  [label="DDG: ms"];
"1000104" -> "1000704"  [label="DDG: ms"];
"1000104" -> "1000983"  [label="DDG: ms"];
"1000510" -> "1000509"  [label="AST: "];
"1000510" -> "1000514"  [label="CFG: "];
"1000511" -> "1000510"  [label="AST: "];
"1000513" -> "1000510"  [label="AST: "];
"1000514" -> "1000510"  [label="AST: "];
"1000516" -> "1000510"  [label="CFG: "];
"1000510" -> "1000994"  [label="DDG: rc"];
"1000510" -> "1000994"  [label="DDG: ms"];
"1000510" -> "1000994"  [label="DDG: file_regerror(&rx, rc, ms)"];
"1000485" -> "1000510"  [label="DDG: rc"];
"1000510" -> "1000704"  [label="DDG: ms"];
"1000485" -> "1000469"  [label="AST: "];
"1000486" -> "1000485"  [label="AST: "];
"1000508" -> "1000485"  [label="CFG: "];
"1000485" -> "1000994"  [label="DDG: file_regcomp(&rx, m->value.s,\n\t\t    REG_EXTENDED|REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0))"];
}
