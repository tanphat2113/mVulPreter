digraph "0_optee_os_70697bf3c5dc3d201341b01a1a8e5bc6d2fb48f8_0@pointer" {
"1000252" [label="(Call,TEE_ALG_GET_MAIN_ALG(cs->algo))"];
"1000259" [label="(Call,cs->algo != TEE_ALG_RSASSA_PKCS1_V1_5)"];
"1000267" [label="(Call,TEE_DIGEST_HASH_TO_ALGO(cs->algo))"];
"1000265" [label="(Call,hash_algo = TEE_DIGEST_HASH_TO_ALGO(cs->algo))"];
"1000273" [label="(Call,tee_hash_get_digest_size(hash_algo, &hash_size))"];
"1000271" [label="(Call,res = tee_hash_get_digest_size(hash_algo, &hash_size))"];
"1000278" [label="(Call,res != TEE_SUCCESS)"];
"1000375" [label="(Return,return res;)"];
"1000299" [label="(Call,crypto_acipher_rsassa_verify(cs->algo, o->attr, salt_len,\n\t\t\t\t\t\t   data, data_len, sig,\n\t\t\t\t\t\t   sig_len))"];
"1000297" [label="(Call,res = crypto_acipher_rsassa_verify(cs->algo, o->attr, salt_len,\n\t\t\t\t\t\t   data, data_len, sig,\n\t\t\t\t\t\t   sig_len))"];
"1000315" [label="(Call,TEE_DIGEST_HASH_TO_ALGO(cs->algo))"];
"1000313" [label="(Call,hash_algo = TEE_DIGEST_HASH_TO_ALGO(cs->algo))"];
"1000321" [label="(Call,tee_hash_get_digest_size(hash_algo, &hash_size))"];
"1000319" [label="(Call,res = tee_hash_get_digest_size(hash_algo, &hash_size))"];
"1000326" [label="(Call,res != TEE_SUCCESS)"];
"1000341" [label="(Call,crypto_acipher_dsa_verify(cs->algo, o->attr, data,\n\t\t\t\t\t\tdata_len, sig, sig_len))"];
"1000339" [label="(Call,res = crypto_acipher_dsa_verify(cs->algo, o->attr, data,\n\t\t\t\t\t\tdata_len, sig, sig_len))"];
"1000356" [label="(Call,crypto_acipher_ecc_verify(cs->algo, o->attr, data,\n\t\t\t\t\t\tdata_len, sig, sig_len))"];
"1000354" [label="(Call,res = crypto_acipher_ecc_verify(cs->algo, o->attr, data,\n\t\t\t\t\t\tdata_len, sig, sig_len))"];
"1000253" [label="(Call,cs->algo)"];
"1000264" [label="(Block,)"];
"1000251" [label="(ControlStructure,switch (TEE_ALG_GET_MAIN_ALG(cs->algo)))"];
"1000339" [label="(Call,res = crypto_acipher_dsa_verify(cs->algo, o->attr, data,\n\t\t\t\t\t\tdata_len, sig, sig_len))"];
"1000325" [label="(ControlStructure,if (res != TEE_SUCCESS))"];
"1000298" [label="(Identifier,res)"];
"1000105" [label="(MethodParameterIn,const void *data)"];
"1000263" [label="(Identifier,TEE_ALG_RSASSA_PKCS1_V1_5)"];
"1000315" [label="(Call,TEE_DIGEST_HASH_TO_ALGO(cs->algo))"];
"1000284" [label="(Identifier,data_len)"];
"1000332" [label="(Identifier,data_len)"];
"1000107" [label="(MethodParameterIn,const void *sig)"];
"1000272" [label="(Identifier,res)"];
"1000342" [label="(Call,cs->algo)"];
"1000331" [label="(Call,data_len > hash_size)"];
"1000257" [label="(JumpTarget,case TEE_MAIN_ALGO_RSA:)"];
"1000357" [label="(Call,cs->algo)"];
"1000306" [label="(Identifier,salt_len)"];
"1000369" [label="(Call,res = TEE_ERROR_NOT_SUPPORTED)"];
"1000291" [label="(Call,salt_len = pkcs1_get_salt_len(params, num_params,\n\t\t\t\t\t\t      hash_size))"];
"1000322" [label="(Identifier,hash_algo)"];
"1000297" [label="(Call,res = crypto_acipher_rsassa_verify(cs->algo, o->attr, salt_len,\n\t\t\t\t\t\t   data, data_len, sig,\n\t\t\t\t\t\t   sig_len))"];
"1000311" [label="(ControlStructure,break;)"];
"1000368" [label="(JumpTarget,default:)"];
"1000345" [label="(Call,o->attr)"];
"1000283" [label="(Call,data_len != hash_size)"];
"1000366" [label="(Identifier,sig_len)"];
"1000312" [label="(JumpTarget,case TEE_MAIN_ALGO_DSA:)"];
"1000280" [label="(Identifier,TEE_SUCCESS)"];
"1000352" [label="(ControlStructure,break;)"];
"1000287" [label="(Call,res = TEE_ERROR_BAD_PARAMETERS)"];
"1000354" [label="(Call,res = crypto_acipher_ecc_verify(cs->algo, o->attr, data,\n\t\t\t\t\t\tdata_len, sig, sig_len))"];
"1000166" [label="(Call,tee_mmu_check_access_rights(utc,\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\n\t\t\t\t\t  (uaddr_t)data, data_len))"];
"1000299" [label="(Call,crypto_acipher_rsassa_verify(cs->algo, o->attr, salt_len,\n\t\t\t\t\t\t   data, data_len, sig,\n\t\t\t\t\t\t   sig_len))"];
"1000116" [label="(Call,salt_len = 0)"];
"1000376" [label="(Identifier,res)"];
"1000275" [label="(Call,&hash_size)"];
"1000259" [label="(Call,cs->algo != TEE_ALG_RSASSA_PKCS1_V1_5)"];
"1000109" [label="(Block,)"];
"1000351" [label="(Identifier,sig_len)"];
"1000108" [label="(MethodParameterIn,size_t sig_len)"];
"1000353" [label="(JumpTarget,case TEE_MAIN_ALGO_ECDSA:)"];
"1000367" [label="(ControlStructure,break;)"];
"1000335" [label="(Call,res = TEE_ERROR_BAD_PARAMETERS)"];
"1000314" [label="(Identifier,hash_algo)"];
"1000350" [label="(Identifier,sig)"];
"1000267" [label="(Call,TEE_DIGEST_HASH_TO_ALGO(cs->algo))"];
"1000274" [label="(Identifier,hash_algo)"];
"1000183" [label="(Call,tee_mmu_check_access_rights(utc,\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\n\t\t\t\t\t  (uaddr_t)sig, sig_len))"];
"1000232" [label="(Call,res != TEE_SUCCESS)"];
"1000271" [label="(Call,res = tee_hash_get_digest_size(hash_algo, &hash_size))"];
"1000310" [label="(Identifier,sig_len)"];
"1000323" [label="(Call,&hash_size)"];
"1000300" [label="(Call,cs->algo)"];
"1000320" [label="(Identifier,res)"];
"1000307" [label="(Identifier,data)"];
"1000266" [label="(Identifier,hash_algo)"];
"1000328" [label="(Identifier,TEE_SUCCESS)"];
"1000363" [label="(Identifier,data)"];
"1000273" [label="(Call,tee_hash_get_digest_size(hash_algo, &hash_size))"];
"1000281" [label="(ControlStructure,break;)"];
"1000171" [label="(Call,(uaddr_t)data)"];
"1000326" [label="(Call,res != TEE_SUCCESS)"];
"1000247" [label="(Call,res = TEE_ERROR_BAD_PARAMETERS)"];
"1000303" [label="(Call,o->attr)"];
"1000313" [label="(Call,hash_algo = TEE_DIGEST_HASH_TO_ALGO(cs->algo))"];
"1000260" [label="(Call,cs->algo)"];
"1000252" [label="(Call,TEE_ALG_GET_MAIN_ALG(cs->algo))"];
"1000308" [label="(Identifier,data_len)"];
"1000355" [label="(Identifier,res)"];
"1000340" [label="(Identifier,res)"];
"1000319" [label="(Call,res = tee_hash_get_digest_size(hash_algo, &hash_size))"];
"1000327" [label="(Identifier,res)"];
"1000348" [label="(Identifier,data)"];
"1000377" [label="(MethodReturn,TEE_Result)"];
"1000360" [label="(Call,o->attr)"];
"1000316" [label="(Call,cs->algo)"];
"1000218" [label="(Call,res != TEE_SUCCESS)"];
"1000341" [label="(Call,crypto_acipher_dsa_verify(cs->algo, o->attr, data,\n\t\t\t\t\t\tdata_len, sig, sig_len))"];
"1000321" [label="(Call,tee_hash_get_digest_size(hash_algo, &hash_size))"];
"1000265" [label="(Call,hash_algo = TEE_DIGEST_HASH_TO_ALGO(cs->algo))"];
"1000268" [label="(Call,cs->algo)"];
"1000349" [label="(Identifier,data_len)"];
"1000106" [label="(MethodParameterIn,size_t data_len)"];
"1000356" [label="(Call,crypto_acipher_ecc_verify(cs->algo, o->attr, data,\n\t\t\t\t\t\tdata_len, sig, sig_len))"];
"1000258" [label="(ControlStructure,if (cs->algo != TEE_ALG_RSASSA_PKCS1_V1_5))"];
"1000364" [label="(Identifier,data_len)"];
"1000256" [label="(Block,)"];
"1000188" [label="(Call,(uaddr_t)sig)"];
"1000329" [label="(ControlStructure,break;)"];
"1000365" [label="(Identifier,sig)"];
"1000375" [label="(Return,return res;)"];
"1000278" [label="(Call,res != TEE_SUCCESS)"];
"1000279" [label="(Identifier,res)"];
"1000277" [label="(ControlStructure,if (res != TEE_SUCCESS))"];
"1000309" [label="(Identifier,sig)"];
"1000252" -> "1000251"  [label="AST: "];
"1000252" -> "1000253"  [label="CFG: "];
"1000253" -> "1000252"  [label="AST: "];
"1000257" -> "1000252"  [label="CFG: "];
"1000312" -> "1000252"  [label="CFG: "];
"1000353" -> "1000252"  [label="CFG: "];
"1000368" -> "1000252"  [label="CFG: "];
"1000252" -> "1000377"  [label="DDG: cs->algo"];
"1000252" -> "1000377"  [label="DDG: TEE_ALG_GET_MAIN_ALG(cs->algo)"];
"1000252" -> "1000259"  [label="DDG: cs->algo"];
"1000252" -> "1000315"  [label="DDG: cs->algo"];
"1000252" -> "1000356"  [label="DDG: cs->algo"];
"1000259" -> "1000258"  [label="AST: "];
"1000259" -> "1000263"  [label="CFG: "];
"1000260" -> "1000259"  [label="AST: "];
"1000263" -> "1000259"  [label="AST: "];
"1000266" -> "1000259"  [label="CFG: "];
"1000298" -> "1000259"  [label="CFG: "];
"1000259" -> "1000377"  [label="DDG: cs->algo != TEE_ALG_RSASSA_PKCS1_V1_5"];
"1000259" -> "1000377"  [label="DDG: TEE_ALG_RSASSA_PKCS1_V1_5"];
"1000259" -> "1000267"  [label="DDG: cs->algo"];
"1000259" -> "1000299"  [label="DDG: cs->algo"];
"1000267" -> "1000265"  [label="AST: "];
"1000267" -> "1000268"  [label="CFG: "];
"1000268" -> "1000267"  [label="AST: "];
"1000265" -> "1000267"  [label="CFG: "];
"1000267" -> "1000377"  [label="DDG: cs->algo"];
"1000267" -> "1000265"  [label="DDG: cs->algo"];
"1000267" -> "1000299"  [label="DDG: cs->algo"];
"1000265" -> "1000264"  [label="AST: "];
"1000266" -> "1000265"  [label="AST: "];
"1000272" -> "1000265"  [label="CFG: "];
"1000265" -> "1000377"  [label="DDG: TEE_DIGEST_HASH_TO_ALGO(cs->algo)"];
"1000265" -> "1000273"  [label="DDG: hash_algo"];
"1000273" -> "1000271"  [label="AST: "];
"1000273" -> "1000275"  [label="CFG: "];
"1000274" -> "1000273"  [label="AST: "];
"1000275" -> "1000273"  [label="AST: "];
"1000271" -> "1000273"  [label="CFG: "];
"1000273" -> "1000377"  [label="DDG: &hash_size"];
"1000273" -> "1000377"  [label="DDG: hash_algo"];
"1000273" -> "1000271"  [label="DDG: hash_algo"];
"1000273" -> "1000271"  [label="DDG: &hash_size"];
"1000271" -> "1000264"  [label="AST: "];
"1000272" -> "1000271"  [label="AST: "];
"1000279" -> "1000271"  [label="CFG: "];
"1000271" -> "1000377"  [label="DDG: tee_hash_get_digest_size(hash_algo, &hash_size)"];
"1000271" -> "1000278"  [label="DDG: res"];
"1000278" -> "1000277"  [label="AST: "];
"1000278" -> "1000280"  [label="CFG: "];
"1000279" -> "1000278"  [label="AST: "];
"1000280" -> "1000278"  [label="AST: "];
"1000281" -> "1000278"  [label="CFG: "];
"1000284" -> "1000278"  [label="CFG: "];
"1000278" -> "1000377"  [label="DDG: TEE_SUCCESS"];
"1000278" -> "1000377"  [label="DDG: res != TEE_SUCCESS"];
"1000278" -> "1000377"  [label="DDG: res"];
"1000232" -> "1000278"  [label="DDG: TEE_SUCCESS"];
"1000278" -> "1000375"  [label="DDG: res"];
"1000375" -> "1000109"  [label="AST: "];
"1000375" -> "1000376"  [label="CFG: "];
"1000376" -> "1000375"  [label="AST: "];
"1000377" -> "1000375"  [label="CFG: "];
"1000375" -> "1000377"  [label="DDG: <RET>"];
"1000376" -> "1000375"  [label="DDG: res"];
"1000247" -> "1000375"  [label="DDG: res"];
"1000297" -> "1000375"  [label="DDG: res"];
"1000335" -> "1000375"  [label="DDG: res"];
"1000232" -> "1000375"  [label="DDG: res"];
"1000369" -> "1000375"  [label="DDG: res"];
"1000218" -> "1000375"  [label="DDG: res"];
"1000339" -> "1000375"  [label="DDG: res"];
"1000287" -> "1000375"  [label="DDG: res"];
"1000326" -> "1000375"  [label="DDG: res"];
"1000354" -> "1000375"  [label="DDG: res"];
"1000299" -> "1000297"  [label="AST: "];
"1000299" -> "1000310"  [label="CFG: "];
"1000300" -> "1000299"  [label="AST: "];
"1000303" -> "1000299"  [label="AST: "];
"1000306" -> "1000299"  [label="AST: "];
"1000307" -> "1000299"  [label="AST: "];
"1000308" -> "1000299"  [label="AST: "];
"1000309" -> "1000299"  [label="AST: "];
"1000310" -> "1000299"  [label="AST: "];
"1000297" -> "1000299"  [label="CFG: "];
"1000299" -> "1000377"  [label="DDG: sig_len"];
"1000299" -> "1000377"  [label="DDG: sig"];
"1000299" -> "1000377"  [label="DDG: o->attr"];
"1000299" -> "1000377"  [label="DDG: data"];
"1000299" -> "1000377"  [label="DDG: salt_len"];
"1000299" -> "1000377"  [label="DDG: cs->algo"];
"1000299" -> "1000377"  [label="DDG: data_len"];
"1000299" -> "1000297"  [label="DDG: sig"];
"1000299" -> "1000297"  [label="DDG: data_len"];
"1000299" -> "1000297"  [label="DDG: sig_len"];
"1000299" -> "1000297"  [label="DDG: salt_len"];
"1000299" -> "1000297"  [label="DDG: data"];
"1000299" -> "1000297"  [label="DDG: o->attr"];
"1000299" -> "1000297"  [label="DDG: cs->algo"];
"1000116" -> "1000299"  [label="DDG: salt_len"];
"1000291" -> "1000299"  [label="DDG: salt_len"];
"1000171" -> "1000299"  [label="DDG: data"];
"1000105" -> "1000299"  [label="DDG: data"];
"1000283" -> "1000299"  [label="DDG: data_len"];
"1000166" -> "1000299"  [label="DDG: data_len"];
"1000106" -> "1000299"  [label="DDG: data_len"];
"1000188" -> "1000299"  [label="DDG: sig"];
"1000107" -> "1000299"  [label="DDG: sig"];
"1000183" -> "1000299"  [label="DDG: sig_len"];
"1000108" -> "1000299"  [label="DDG: sig_len"];
"1000297" -> "1000256"  [label="AST: "];
"1000298" -> "1000297"  [label="AST: "];
"1000311" -> "1000297"  [label="CFG: "];
"1000297" -> "1000377"  [label="DDG: res"];
"1000297" -> "1000377"  [label="DDG: crypto_acipher_rsassa_verify(cs->algo, o->attr, salt_len,\n\t\t\t\t\t\t   data, data_len, sig,\n\t\t\t\t\t\t   sig_len)"];
"1000315" -> "1000313"  [label="AST: "];
"1000315" -> "1000316"  [label="CFG: "];
"1000316" -> "1000315"  [label="AST: "];
"1000313" -> "1000315"  [label="CFG: "];
"1000315" -> "1000377"  [label="DDG: cs->algo"];
"1000315" -> "1000313"  [label="DDG: cs->algo"];
"1000315" -> "1000341"  [label="DDG: cs->algo"];
"1000313" -> "1000256"  [label="AST: "];
"1000314" -> "1000313"  [label="AST: "];
"1000320" -> "1000313"  [label="CFG: "];
"1000313" -> "1000377"  [label="DDG: TEE_DIGEST_HASH_TO_ALGO(cs->algo)"];
"1000313" -> "1000321"  [label="DDG: hash_algo"];
"1000321" -> "1000319"  [label="AST: "];
"1000321" -> "1000323"  [label="CFG: "];
"1000322" -> "1000321"  [label="AST: "];
"1000323" -> "1000321"  [label="AST: "];
"1000319" -> "1000321"  [label="CFG: "];
"1000321" -> "1000377"  [label="DDG: hash_algo"];
"1000321" -> "1000377"  [label="DDG: &hash_size"];
"1000321" -> "1000319"  [label="DDG: hash_algo"];
"1000321" -> "1000319"  [label="DDG: &hash_size"];
"1000319" -> "1000256"  [label="AST: "];
"1000320" -> "1000319"  [label="AST: "];
"1000327" -> "1000319"  [label="CFG: "];
"1000319" -> "1000377"  [label="DDG: tee_hash_get_digest_size(hash_algo, &hash_size)"];
"1000319" -> "1000326"  [label="DDG: res"];
"1000326" -> "1000325"  [label="AST: "];
"1000326" -> "1000328"  [label="CFG: "];
"1000327" -> "1000326"  [label="AST: "];
"1000328" -> "1000326"  [label="AST: "];
"1000329" -> "1000326"  [label="CFG: "];
"1000332" -> "1000326"  [label="CFG: "];
"1000326" -> "1000377"  [label="DDG: res != TEE_SUCCESS"];
"1000326" -> "1000377"  [label="DDG: TEE_SUCCESS"];
"1000326" -> "1000377"  [label="DDG: res"];
"1000232" -> "1000326"  [label="DDG: TEE_SUCCESS"];
"1000341" -> "1000339"  [label="AST: "];
"1000341" -> "1000351"  [label="CFG: "];
"1000342" -> "1000341"  [label="AST: "];
"1000345" -> "1000341"  [label="AST: "];
"1000348" -> "1000341"  [label="AST: "];
"1000349" -> "1000341"  [label="AST: "];
"1000350" -> "1000341"  [label="AST: "];
"1000351" -> "1000341"  [label="AST: "];
"1000339" -> "1000341"  [label="CFG: "];
"1000341" -> "1000377"  [label="DDG: data_len"];
"1000341" -> "1000377"  [label="DDG: sig_len"];
"1000341" -> "1000377"  [label="DDG: data"];
"1000341" -> "1000377"  [label="DDG: cs->algo"];
"1000341" -> "1000377"  [label="DDG: sig"];
"1000341" -> "1000377"  [label="DDG: o->attr"];
"1000341" -> "1000339"  [label="DDG: data_len"];
"1000341" -> "1000339"  [label="DDG: cs->algo"];
"1000341" -> "1000339"  [label="DDG: data"];
"1000341" -> "1000339"  [label="DDG: o->attr"];
"1000341" -> "1000339"  [label="DDG: sig_len"];
"1000341" -> "1000339"  [label="DDG: sig"];
"1000171" -> "1000341"  [label="DDG: data"];
"1000105" -> "1000341"  [label="DDG: data"];
"1000331" -> "1000341"  [label="DDG: data_len"];
"1000106" -> "1000341"  [label="DDG: data_len"];
"1000188" -> "1000341"  [label="DDG: sig"];
"1000107" -> "1000341"  [label="DDG: sig"];
"1000183" -> "1000341"  [label="DDG: sig_len"];
"1000108" -> "1000341"  [label="DDG: sig_len"];
"1000339" -> "1000256"  [label="AST: "];
"1000340" -> "1000339"  [label="AST: "];
"1000352" -> "1000339"  [label="CFG: "];
"1000339" -> "1000377"  [label="DDG: res"];
"1000339" -> "1000377"  [label="DDG: crypto_acipher_dsa_verify(cs->algo, o->attr, data,\n\t\t\t\t\t\tdata_len, sig, sig_len)"];
"1000356" -> "1000354"  [label="AST: "];
"1000356" -> "1000366"  [label="CFG: "];
"1000357" -> "1000356"  [label="AST: "];
"1000360" -> "1000356"  [label="AST: "];
"1000363" -> "1000356"  [label="AST: "];
"1000364" -> "1000356"  [label="AST: "];
"1000365" -> "1000356"  [label="AST: "];
"1000366" -> "1000356"  [label="AST: "];
"1000354" -> "1000356"  [label="CFG: "];
"1000356" -> "1000377"  [label="DDG: sig"];
"1000356" -> "1000377"  [label="DDG: data_len"];
"1000356" -> "1000377"  [label="DDG: cs->algo"];
"1000356" -> "1000377"  [label="DDG: sig_len"];
"1000356" -> "1000377"  [label="DDG: o->attr"];
"1000356" -> "1000377"  [label="DDG: data"];
"1000356" -> "1000354"  [label="DDG: data"];
"1000356" -> "1000354"  [label="DDG: sig_len"];
"1000356" -> "1000354"  [label="DDG: o->attr"];
"1000356" -> "1000354"  [label="DDG: data_len"];
"1000356" -> "1000354"  [label="DDG: sig"];
"1000356" -> "1000354"  [label="DDG: cs->algo"];
"1000171" -> "1000356"  [label="DDG: data"];
"1000105" -> "1000356"  [label="DDG: data"];
"1000166" -> "1000356"  [label="DDG: data_len"];
"1000106" -> "1000356"  [label="DDG: data_len"];
"1000188" -> "1000356"  [label="DDG: sig"];
"1000107" -> "1000356"  [label="DDG: sig"];
"1000183" -> "1000356"  [label="DDG: sig_len"];
"1000108" -> "1000356"  [label="DDG: sig_len"];
"1000354" -> "1000256"  [label="AST: "];
"1000355" -> "1000354"  [label="AST: "];
"1000367" -> "1000354"  [label="CFG: "];
"1000354" -> "1000377"  [label="DDG: crypto_acipher_ecc_verify(cs->algo, o->attr, data,\n\t\t\t\t\t\tdata_len, sig, sig_len)"];
"1000354" -> "1000377"  [label="DDG: res"];
}
