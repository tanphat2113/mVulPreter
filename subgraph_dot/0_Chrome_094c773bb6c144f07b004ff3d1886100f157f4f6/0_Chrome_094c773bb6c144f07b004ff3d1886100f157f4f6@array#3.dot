digraph "0_Chrome_094c773bb6c144f07b004ff3d1886100f157f4f6@array" {
"1000517" [label="(Call,element->steps[1].op == XSLT_OP_END)"];
"1000485" [label="(Call,element->steps[1].op == XSLT_OP_END)"];
"1000603" [label="(Call,element->steps[1].op == XSLT_OP_END)"];
"1000671" [label="(Call,element->steps[1].op == XSLT_OP_END)"];
"1000555" [label="(Call,element->steps[1].op == XSLT_OP_END)"];
"1000517" [label="(Call,element->steps[1].op == XSLT_OP_END)"];
"1000475" [label="(Call,(element->steps[0].value != NULL) &&\n\t\t(element->steps[1].op == XSLT_OP_END))"];
"1000445" [label="(Call,((element->steps[0].op == XSLT_OP_ELEM) ||\n\t\t (element->steps[0].op == XSLT_OP_ATTR) ||\n\t\t (element->steps[0].op == XSLT_OP_PI)) &&\n\t\t(element->steps[0].value != NULL) &&\n\t\t(element->steps[1].op == XSLT_OP_END))"];
"1000507" [label="(Call,(element->steps[0].value2 != NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END))"];
"1000497" [label="(Call,(element->steps[0].op == XSLT_OP_ATTR) &&\n\t\t       (element->steps[0].value2 != NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END))"];
"1000545" [label="(Call,(element->steps[0].value != NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END))"];
"1000535" [label="(Call,(element->steps[0].op == XSLT_OP_NS) &&\n\t\t       (element->steps[0].value != NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END))"];
"1000593" [label="(Call,(element->steps[0].value2 == NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END))"];
"1000583" [label="(Call,(element->steps[0].value == NULL) &&\n\t\t       (element->steps[0].value2 == NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END))"];
"1000573" [label="(Call,(element->steps[0].op == XSLT_OP_ATTR) &&\n\t\t       (element->steps[0].value == NULL) &&\n\t\t       (element->steps[0].value2 == NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END))"];
"1000621" [label="(Call,((element->steps[0].op == XSLT_OP_PI) ||\n\t\t       (element->steps[0].op == XSLT_OP_TEXT) ||\n\t\t       (element->steps[0].op == XSLT_OP_ALL) ||\n\t\t       (element->steps[0].op == XSLT_OP_NODE) ||\n\t\t       (element->steps[0].op == XSLT_OP_COMMENT)) &&\n\t\t       (element->steps[1].op == XSLT_OP_END))"];
"1000493" [label="(Identifier,XSLT_OP_END)"];
"1000752" [label="(MethodReturn,RET)"];
"1000679" [label="(Identifier,XSLT_OP_END)"];
"1000496" [label="(ControlStructure,if ((element->steps[0].op == XSLT_OP_ATTR) &&\n\t\t       (element->steps[0].value2 != NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END)))"];
"1000529" [label="(Identifier,element)"];
"1000671" [label="(Call,element->steps[1].op == XSLT_OP_END)"];
"1000535" [label="(Call,(element->steps[0].op == XSLT_OP_NS) &&\n\t\t       (element->steps[0].value != NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END))"];
"1000476" [label="(Call,element->steps[0].value != NULL)"];
"1000517" [label="(Call,element->steps[1].op == XSLT_OP_END)"];
"1000584" [label="(Call,element->steps[0].value == NULL)"];
"1000573" [label="(Call,(element->steps[0].op == XSLT_OP_ATTR) &&\n\t\t       (element->steps[0].value == NULL) &&\n\t\t       (element->steps[0].value2 == NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END))"];
"1000507" [label="(Call,(element->steps[0].value2 != NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END))"];
"1000627" [label="(Identifier,element)"];
"1000525" [label="(Identifier,XSLT_OP_END)"];
"1000536" [label="(Call,element->steps[0].op == XSLT_OP_NS)"];
"1000583" [label="(Call,(element->steps[0].value == NULL) &&\n\t\t       (element->steps[0].value2 == NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END))"];
"1000578" [label="(Identifier,element)"];
"1000534" [label="(ControlStructure,if ((element->steps[0].op == XSLT_OP_NS) &&\n\t\t       (element->steps[0].value != NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END)))"];
"1000622" [label="(Call,(element->steps[0].op == XSLT_OP_PI) ||\n\t\t       (element->steps[0].op == XSLT_OP_TEXT) ||\n\t\t       (element->steps[0].op == XSLT_OP_ALL) ||\n\t\t       (element->steps[0].op == XSLT_OP_NODE) ||\n\t\t       (element->steps[0].op == XSLT_OP_COMMENT))"];
"1000508" [label="(Call,element->steps[0].value2 != NULL)"];
"1000567" [label="(Identifier,element)"];
"1000604" [label="(Call,element->steps[1].op)"];
"1000485" [label="(Call,element->steps[1].op == XSLT_OP_END)"];
"1000475" [label="(Call,(element->steps[0].value != NULL) &&\n\t\t(element->steps[1].op == XSLT_OP_END))"];
"1000620" [label="(ControlStructure,if (((element->steps[0].op == XSLT_OP_PI) ||\n\t\t       (element->steps[0].op == XSLT_OP_TEXT) ||\n\t\t       (element->steps[0].op == XSLT_OP_ALL) ||\n\t\t       (element->steps[0].op == XSLT_OP_NODE) ||\n\t\t       (element->steps[0].op == XSLT_OP_COMMENT)) &&\n\t\t       (element->steps[1].op == XSLT_OP_END)))"];
"1000615" [label="(Identifier,element)"];
"1000672" [label="(Call,element->steps[1].op)"];
"1000498" [label="(Call,element->steps[0].op == XSLT_OP_ATTR)"];
"1000621" [label="(Call,((element->steps[0].op == XSLT_OP_PI) ||\n\t\t       (element->steps[0].op == XSLT_OP_TEXT) ||\n\t\t       (element->steps[0].op == XSLT_OP_ALL) ||\n\t\t       (element->steps[0].op == XSLT_OP_NODE) ||\n\t\t       (element->steps[0].op == XSLT_OP_COMMENT)) &&\n\t\t       (element->steps[1].op == XSLT_OP_END))"];
"1000555" [label="(Call,element->steps[1].op == XSLT_OP_END)"];
"1000611" [label="(Identifier,XSLT_OP_END)"];
"1000593" [label="(Call,(element->steps[0].value2 == NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END))"];
"1000546" [label="(Call,element->steps[0].value != NULL)"];
"1000446" [label="(Call,(element->steps[0].op == XSLT_OP_ELEM) ||\n\t\t (element->steps[0].op == XSLT_OP_ATTR) ||\n\t\t (element->steps[0].op == XSLT_OP_PI))"];
"1000518" [label="(Call,element->steps[1].op)"];
"1000502" [label="(Identifier,element)"];
"1000497" [label="(Call,(element->steps[0].op == XSLT_OP_ATTR) &&\n\t\t       (element->steps[0].value2 != NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END))"];
"1000556" [label="(Call,element->steps[1].op)"];
"1000445" [label="(Call,((element->steps[0].op == XSLT_OP_ELEM) ||\n\t\t (element->steps[0].op == XSLT_OP_ATTR) ||\n\t\t (element->steps[0].op == XSLT_OP_PI)) &&\n\t\t(element->steps[0].value != NULL) &&\n\t\t(element->steps[1].op == XSLT_OP_END))"];
"1000545" [label="(Call,(element->steps[0].value != NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END))"];
"1000691" [label="(Identifier,element)"];
"1000574" [label="(Call,element->steps[0].op == XSLT_OP_ATTR)"];
"1000572" [label="(ControlStructure,if ((element->steps[0].op == XSLT_OP_ATTR) &&\n\t\t       (element->steps[0].value == NULL) &&\n\t\t       (element->steps[0].value2 == NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END)))"];
"1000683" [label="(Identifier,element)"];
"1000563" [label="(Identifier,XSLT_OP_END)"];
"1000486" [label="(Call,element->steps[1].op)"];
"1000444" [label="(ControlStructure,if (((element->steps[0].op == XSLT_OP_ELEM) ||\n\t\t (element->steps[0].op == XSLT_OP_ATTR) ||\n\t\t (element->steps[0].op == XSLT_OP_PI)) &&\n\t\t(element->steps[0].value != NULL) &&\n\t\t(element->steps[1].op == XSLT_OP_END)))"];
"1000594" [label="(Call,element->steps[0].value2 == NULL)"];
"1000540" [label="(Identifier,element)"];
"1000603" [label="(Call,element->steps[1].op == XSLT_OP_END)"];
"1000517" -> "1000507"  [label="AST: "];
"1000517" -> "1000525"  [label="CFG: "];
"1000518" -> "1000517"  [label="AST: "];
"1000525" -> "1000517"  [label="AST: "];
"1000507" -> "1000517"  [label="CFG: "];
"1000517" -> "1000752"  [label="DDG: XSLT_OP_END"];
"1000517" -> "1000752"  [label="DDG: element->steps[1].op"];
"1000517" -> "1000485"  [label="DDG: element->steps[1].op"];
"1000517" -> "1000485"  [label="DDG: XSLT_OP_END"];
"1000517" -> "1000507"  [label="DDG: element->steps[1].op"];
"1000517" -> "1000507"  [label="DDG: XSLT_OP_END"];
"1000485" -> "1000517"  [label="DDG: element->steps[1].op"];
"1000485" -> "1000517"  [label="DDG: XSLT_OP_END"];
"1000603" -> "1000517"  [label="DDG: element->steps[1].op"];
"1000603" -> "1000517"  [label="DDG: XSLT_OP_END"];
"1000671" -> "1000517"  [label="DDG: element->steps[1].op"];
"1000671" -> "1000517"  [label="DDG: XSLT_OP_END"];
"1000555" -> "1000517"  [label="DDG: element->steps[1].op"];
"1000555" -> "1000517"  [label="DDG: XSLT_OP_END"];
"1000517" -> "1000555"  [label="DDG: element->steps[1].op"];
"1000517" -> "1000555"  [label="DDG: XSLT_OP_END"];
"1000517" -> "1000603"  [label="DDG: element->steps[1].op"];
"1000517" -> "1000603"  [label="DDG: XSLT_OP_END"];
"1000517" -> "1000671"  [label="DDG: element->steps[1].op"];
"1000517" -> "1000671"  [label="DDG: XSLT_OP_END"];
"1000485" -> "1000475"  [label="AST: "];
"1000485" -> "1000493"  [label="CFG: "];
"1000486" -> "1000485"  [label="AST: "];
"1000493" -> "1000485"  [label="AST: "];
"1000475" -> "1000485"  [label="CFG: "];
"1000485" -> "1000752"  [label="DDG: element->steps[1].op"];
"1000485" -> "1000752"  [label="DDG: XSLT_OP_END"];
"1000485" -> "1000475"  [label="DDG: element->steps[1].op"];
"1000485" -> "1000475"  [label="DDG: XSLT_OP_END"];
"1000603" -> "1000485"  [label="DDG: element->steps[1].op"];
"1000603" -> "1000485"  [label="DDG: XSLT_OP_END"];
"1000671" -> "1000485"  [label="DDG: element->steps[1].op"];
"1000671" -> "1000485"  [label="DDG: XSLT_OP_END"];
"1000555" -> "1000485"  [label="DDG: element->steps[1].op"];
"1000555" -> "1000485"  [label="DDG: XSLT_OP_END"];
"1000485" -> "1000555"  [label="DDG: element->steps[1].op"];
"1000485" -> "1000555"  [label="DDG: XSLT_OP_END"];
"1000485" -> "1000603"  [label="DDG: element->steps[1].op"];
"1000485" -> "1000603"  [label="DDG: XSLT_OP_END"];
"1000485" -> "1000671"  [label="DDG: element->steps[1].op"];
"1000485" -> "1000671"  [label="DDG: XSLT_OP_END"];
"1000603" -> "1000593"  [label="AST: "];
"1000603" -> "1000611"  [label="CFG: "];
"1000604" -> "1000603"  [label="AST: "];
"1000611" -> "1000603"  [label="AST: "];
"1000593" -> "1000603"  [label="CFG: "];
"1000603" -> "1000752"  [label="DDG: XSLT_OP_END"];
"1000603" -> "1000752"  [label="DDG: element->steps[1].op"];
"1000603" -> "1000555"  [label="DDG: element->steps[1].op"];
"1000603" -> "1000555"  [label="DDG: XSLT_OP_END"];
"1000603" -> "1000593"  [label="DDG: element->steps[1].op"];
"1000603" -> "1000593"  [label="DDG: XSLT_OP_END"];
"1000671" -> "1000603"  [label="DDG: element->steps[1].op"];
"1000671" -> "1000603"  [label="DDG: XSLT_OP_END"];
"1000555" -> "1000603"  [label="DDG: element->steps[1].op"];
"1000555" -> "1000603"  [label="DDG: XSLT_OP_END"];
"1000603" -> "1000671"  [label="DDG: element->steps[1].op"];
"1000603" -> "1000671"  [label="DDG: XSLT_OP_END"];
"1000671" -> "1000621"  [label="AST: "];
"1000671" -> "1000679"  [label="CFG: "];
"1000672" -> "1000671"  [label="AST: "];
"1000679" -> "1000671"  [label="AST: "];
"1000621" -> "1000671"  [label="CFG: "];
"1000671" -> "1000752"  [label="DDG: XSLT_OP_END"];
"1000671" -> "1000752"  [label="DDG: element->steps[1].op"];
"1000671" -> "1000555"  [label="DDG: element->steps[1].op"];
"1000671" -> "1000555"  [label="DDG: XSLT_OP_END"];
"1000671" -> "1000621"  [label="DDG: element->steps[1].op"];
"1000671" -> "1000621"  [label="DDG: XSLT_OP_END"];
"1000555" -> "1000671"  [label="DDG: element->steps[1].op"];
"1000555" -> "1000671"  [label="DDG: XSLT_OP_END"];
"1000555" -> "1000545"  [label="AST: "];
"1000555" -> "1000563"  [label="CFG: "];
"1000556" -> "1000555"  [label="AST: "];
"1000563" -> "1000555"  [label="AST: "];
"1000545" -> "1000555"  [label="CFG: "];
"1000555" -> "1000752"  [label="DDG: XSLT_OP_END"];
"1000555" -> "1000752"  [label="DDG: element->steps[1].op"];
"1000555" -> "1000545"  [label="DDG: element->steps[1].op"];
"1000555" -> "1000545"  [label="DDG: XSLT_OP_END"];
"1000475" -> "1000445"  [label="AST: "];
"1000475" -> "1000476"  [label="CFG: "];
"1000476" -> "1000475"  [label="AST: "];
"1000445" -> "1000475"  [label="CFG: "];
"1000475" -> "1000752"  [label="DDG: element->steps[0].value != NULL"];
"1000475" -> "1000752"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000475" -> "1000445"  [label="DDG: element->steps[0].value != NULL"];
"1000475" -> "1000445"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000476" -> "1000475"  [label="DDG: element->steps[0].value"];
"1000476" -> "1000475"  [label="DDG: NULL"];
"1000545" -> "1000475"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000621" -> "1000475"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000593" -> "1000475"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000507" -> "1000475"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000475" -> "1000507"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000475" -> "1000545"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000475" -> "1000593"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000475" -> "1000621"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000445" -> "1000444"  [label="AST: "];
"1000445" -> "1000446"  [label="CFG: "];
"1000446" -> "1000445"  [label="AST: "];
"1000502" -> "1000445"  [label="CFG: "];
"1000445" -> "1000752"  [label="DDG: (element->steps[0].op == XSLT_OP_ELEM) ||\n\t\t (element->steps[0].op == XSLT_OP_ATTR) ||\n\t\t (element->steps[0].op == XSLT_OP_PI)"];
"1000445" -> "1000752"  [label="DDG: ((element->steps[0].op == XSLT_OP_ELEM) ||\n\t\t (element->steps[0].op == XSLT_OP_ATTR) ||\n\t\t (element->steps[0].op == XSLT_OP_PI)) &&\n\t\t(element->steps[0].value != NULL) &&\n\t\t(element->steps[1].op == XSLT_OP_END)"];
"1000445" -> "1000752"  [label="DDG: (element->steps[0].value != NULL) &&\n\t\t(element->steps[1].op == XSLT_OP_END)"];
"1000446" -> "1000445"  [label="DDG: element->steps[0].op == XSLT_OP_ELEM"];
"1000446" -> "1000445"  [label="DDG: (element->steps[0].op == XSLT_OP_ATTR) ||\n\t\t (element->steps[0].op == XSLT_OP_PI)"];
"1000507" -> "1000497"  [label="AST: "];
"1000507" -> "1000508"  [label="CFG: "];
"1000508" -> "1000507"  [label="AST: "];
"1000497" -> "1000507"  [label="CFG: "];
"1000507" -> "1000752"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000507" -> "1000752"  [label="DDG: element->steps[0].value2 != NULL"];
"1000507" -> "1000497"  [label="DDG: element->steps[0].value2 != NULL"];
"1000507" -> "1000497"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000508" -> "1000507"  [label="DDG: element->steps[0].value2"];
"1000508" -> "1000507"  [label="DDG: NULL"];
"1000545" -> "1000507"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000621" -> "1000507"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000593" -> "1000507"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000507" -> "1000545"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000507" -> "1000593"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000507" -> "1000621"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000497" -> "1000496"  [label="AST: "];
"1000497" -> "1000498"  [label="CFG: "];
"1000498" -> "1000497"  [label="AST: "];
"1000529" -> "1000497"  [label="CFG: "];
"1000540" -> "1000497"  [label="CFG: "];
"1000497" -> "1000752"  [label="DDG: element->steps[0].op == XSLT_OP_ATTR"];
"1000497" -> "1000752"  [label="DDG: (element->steps[0].value2 != NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END)"];
"1000497" -> "1000752"  [label="DDG: (element->steps[0].op == XSLT_OP_ATTR) &&\n\t\t       (element->steps[0].value2 != NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END)"];
"1000498" -> "1000497"  [label="DDG: element->steps[0].op"];
"1000498" -> "1000497"  [label="DDG: XSLT_OP_ATTR"];
"1000545" -> "1000535"  [label="AST: "];
"1000545" -> "1000546"  [label="CFG: "];
"1000546" -> "1000545"  [label="AST: "];
"1000535" -> "1000545"  [label="CFG: "];
"1000545" -> "1000752"  [label="DDG: element->steps[0].value != NULL"];
"1000545" -> "1000752"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000545" -> "1000535"  [label="DDG: element->steps[0].value != NULL"];
"1000545" -> "1000535"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000546" -> "1000545"  [label="DDG: element->steps[0].value"];
"1000546" -> "1000545"  [label="DDG: NULL"];
"1000621" -> "1000545"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000593" -> "1000545"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000545" -> "1000593"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000545" -> "1000621"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000535" -> "1000534"  [label="AST: "];
"1000535" -> "1000536"  [label="CFG: "];
"1000536" -> "1000535"  [label="AST: "];
"1000567" -> "1000535"  [label="CFG: "];
"1000578" -> "1000535"  [label="CFG: "];
"1000535" -> "1000752"  [label="DDG: element->steps[0].op == XSLT_OP_NS"];
"1000535" -> "1000752"  [label="DDG: (element->steps[0].value != NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END)"];
"1000535" -> "1000752"  [label="DDG: (element->steps[0].op == XSLT_OP_NS) &&\n\t\t       (element->steps[0].value != NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END)"];
"1000536" -> "1000535"  [label="DDG: element->steps[0].op"];
"1000536" -> "1000535"  [label="DDG: XSLT_OP_NS"];
"1000593" -> "1000583"  [label="AST: "];
"1000593" -> "1000594"  [label="CFG: "];
"1000594" -> "1000593"  [label="AST: "];
"1000583" -> "1000593"  [label="CFG: "];
"1000593" -> "1000752"  [label="DDG: element->steps[0].value2 == NULL"];
"1000593" -> "1000752"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000593" -> "1000583"  [label="DDG: element->steps[0].value2 == NULL"];
"1000593" -> "1000583"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000594" -> "1000593"  [label="DDG: element->steps[0].value2"];
"1000594" -> "1000593"  [label="DDG: NULL"];
"1000621" -> "1000593"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000593" -> "1000621"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000583" -> "1000573"  [label="AST: "];
"1000583" -> "1000584"  [label="CFG: "];
"1000584" -> "1000583"  [label="AST: "];
"1000573" -> "1000583"  [label="CFG: "];
"1000583" -> "1000752"  [label="DDG: element->steps[0].value == NULL"];
"1000583" -> "1000752"  [label="DDG: (element->steps[0].value2 == NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END)"];
"1000583" -> "1000573"  [label="DDG: element->steps[0].value == NULL"];
"1000583" -> "1000573"  [label="DDG: (element->steps[0].value2 == NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END)"];
"1000584" -> "1000583"  [label="DDG: element->steps[0].value"];
"1000584" -> "1000583"  [label="DDG: NULL"];
"1000573" -> "1000572"  [label="AST: "];
"1000573" -> "1000574"  [label="CFG: "];
"1000574" -> "1000573"  [label="AST: "];
"1000615" -> "1000573"  [label="CFG: "];
"1000627" -> "1000573"  [label="CFG: "];
"1000573" -> "1000752"  [label="DDG: (element->steps[0].value == NULL) &&\n\t\t       (element->steps[0].value2 == NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END)"];
"1000573" -> "1000752"  [label="DDG: element->steps[0].op == XSLT_OP_ATTR"];
"1000573" -> "1000752"  [label="DDG: (element->steps[0].op == XSLT_OP_ATTR) &&\n\t\t       (element->steps[0].value == NULL) &&\n\t\t       (element->steps[0].value2 == NULL) &&\n\t\t       (element->steps[1].op == XSLT_OP_END)"];
"1000574" -> "1000573"  [label="DDG: element->steps[0].op"];
"1000574" -> "1000573"  [label="DDG: XSLT_OP_ATTR"];
"1000621" -> "1000620"  [label="AST: "];
"1000621" -> "1000622"  [label="CFG: "];
"1000622" -> "1000621"  [label="AST: "];
"1000683" -> "1000621"  [label="CFG: "];
"1000691" -> "1000621"  [label="CFG: "];
"1000621" -> "1000752"  [label="DDG: (element->steps[0].op == XSLT_OP_PI) ||\n\t\t       (element->steps[0].op == XSLT_OP_TEXT) ||\n\t\t       (element->steps[0].op == XSLT_OP_ALL) ||\n\t\t       (element->steps[0].op == XSLT_OP_NODE) ||\n\t\t       (element->steps[0].op == XSLT_OP_COMMENT)"];
"1000621" -> "1000752"  [label="DDG: ((element->steps[0].op == XSLT_OP_PI) ||\n\t\t       (element->steps[0].op == XSLT_OP_TEXT) ||\n\t\t       (element->steps[0].op == XSLT_OP_ALL) ||\n\t\t       (element->steps[0].op == XSLT_OP_NODE) ||\n\t\t       (element->steps[0].op == XSLT_OP_COMMENT)) &&\n\t\t       (element->steps[1].op == XSLT_OP_END)"];
"1000621" -> "1000752"  [label="DDG: element->steps[1].op == XSLT_OP_END"];
"1000622" -> "1000621"  [label="DDG: element->steps[0].op == XSLT_OP_PI"];
"1000622" -> "1000621"  [label="DDG: (element->steps[0].op == XSLT_OP_TEXT) ||\n\t\t       (element->steps[0].op == XSLT_OP_ALL) ||\n\t\t       (element->steps[0].op == XSLT_OP_NODE) ||\n\t\t       (element->steps[0].op == XSLT_OP_COMMENT)"];
}
