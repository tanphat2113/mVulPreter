digraph "0_ghostscript_60dabde18d7fe12b19da8b509bdfee9cc886aafc_2@pointer" {
"1000621" [label="(Call,lerp(stops[count-2].g, stops[count-1].g, d))"];
"1000597" [label="(Call,lerp(stops[count-2].r, stops[count-1].r, d))"];
"1000553" [label="(Call,d = (1 - stops[count-2].offset) / (stops[count-1].offset - stops[count-2].offset))"];
"1000555" [label="(Call,(1 - stops[count-2].offset) / (stops[count-1].offset - stops[count-2].offset))"];
"1000556" [label="(Call,1 - stops[count-2].offset)"];
"1000565" [label="(Call,stops[count-1].offset - stops[count-2].offset)"];
"1000542" [label="(Call,stops[count-1].offset > 1)"];
"1000613" [label="(Call,stops[count-1].g = lerp(stops[count-2].g, stops[count-1].g, d))"];
"1000730" [label="(Call,stops[count] = stops[count-1])"];
"1000645" [label="(Call,lerp(stops[count-2].b, stops[count-1].b, d))"];
"1000637" [label="(Call,stops[count-1].b = lerp(stops[count-2].b, stops[count-1].b, d))"];
"1000669" [label="(Call,lerp(stops[count-2].a, stops[count-1].a, d))"];
"1000661" [label="(Call,stops[count-1].a = lerp(stops[count-2].a, stops[count-1].a, d))"];
"1000677" [label="(Call,stops[count-1].a)"];
"1000720" [label="(Call,stops[count-1].offset < 1)"];
"1000734" [label="(Call,stops[count-1])"];
"1000637" [label="(Call,stops[count-1].b = lerp(stops[count-2].b, stops[count-1].b, d))"];
"1000750" [label="(MethodReturn,RET)"];
"1000597" [label="(Call,lerp(stops[count-2].r, stops[count-1].r, d))"];
"1000646" [label="(Call,stops[count-2].b)"];
"1000730" [label="(Call,stops[count] = stops[count-1])"];
"1000555" [label="(Call,(1 - stops[count-2].offset) / (stops[count-1].offset - stops[count-2].offset))"];
"1000622" [label="(Call,stops[count-2].g)"];
"1000629" [label="(Call,stops[count-1].g)"];
"1000381" [label="(Call,memmove(stops, stops + before, (count - before) * sizeof(struct stop)))"];
"1000553" [label="(Call,d = (1 - stops[count-2].offset) / (stops[count-1].offset - stops[count-2].offset))"];
"1000565" [label="(Call,stops[count-1].offset - stops[count-2].offset)"];
"1000661" [label="(Call,stops[count-1].a = lerp(stops[count-2].a, stops[count-1].a, d))"];
"1000660" [label="(Identifier,d)"];
"1000694" [label="(Call,memmove(stops + 1, stops, count * sizeof(struct stop)))"];
"1000729" [label="(Block,)"];
"1000605" [label="(Call,stops[count-1].r)"];
"1000653" [label="(Call,stops[count-1].b)"];
"1000742" [label="(Identifier,stops)"];
"1000113" [label="(MethodParameterIn,struct stop *stops)"];
"1000636" [label="(Identifier,d)"];
"1000589" [label="(Call,stops[count-1].r = lerp(stops[count-2].r, stops[count-1].r, d))"];
"1000542" [label="(Call,stops[count-1].offset > 1)"];
"1000664" [label="(Identifier,stops)"];
"1000621" [label="(Call,lerp(stops[count-2].g, stops[count-1].g, d))"];
"1000557" [label="(Literal,1)"];
"1000554" [label="(Identifier,d)"];
"1000556" [label="(Call,1 - stops[count-2].offset)"];
"1000573" [label="(Call,stops[count-2].offset)"];
"1000638" [label="(Call,stops[count-1].b)"];
"1000541" [label="(ControlStructure,if (stops[count-1].offset > 1))"];
"1000613" [label="(Call,stops[count-1].g = lerp(stops[count-2].g, stops[count-1].g, d))"];
"1000551" [label="(Block,)"];
"1000645" [label="(Call,lerp(stops[count-2].b, stops[count-1].b, d))"];
"1000550" [label="(Literal,1)"];
"1000689" [label="(Identifier,stops)"];
"1000598" [label="(Call,stops[count-2].r)"];
"1000614" [label="(Call,stops[count-1].g)"];
"1000684" [label="(Identifier,d)"];
"1000669" [label="(Call,lerp(stops[count-2].a, stops[count-1].a, d))"];
"1000566" [label="(Call,stops[count-1].offset)"];
"1000640" [label="(Identifier,stops)"];
"1000558" [label="(Call,stops[count-2].offset)"];
"1000543" [label="(Call,stops[count-1].offset)"];
"1000731" [label="(Call,stops[count])"];
"1000328" [label="(Call,qsort(stops, count, sizeof(struct stop), cmp_stop))"];
"1000662" [label="(Call,stops[count-1].a)"];
"1000670" [label="(Call,stops[count-2].a)"];
"1000583" [label="(Identifier,stops)"];
"1000612" [label="(Identifier,d)"];
"1000568" [label="(Identifier,stops)"];
"1000621" -> "1000613"  [label="AST: "];
"1000621" -> "1000636"  [label="CFG: "];
"1000622" -> "1000621"  [label="AST: "];
"1000629" -> "1000621"  [label="AST: "];
"1000636" -> "1000621"  [label="AST: "];
"1000613" -> "1000621"  [label="CFG: "];
"1000621" -> "1000750"  [label="DDG: stops[count-2].g"];
"1000621" -> "1000613"  [label="DDG: stops[count-2].g"];
"1000621" -> "1000613"  [label="DDG: stops[count-1].g"];
"1000621" -> "1000613"  [label="DDG: d"];
"1000597" -> "1000621"  [label="DDG: d"];
"1000621" -> "1000645"  [label="DDG: d"];
"1000597" -> "1000589"  [label="AST: "];
"1000597" -> "1000612"  [label="CFG: "];
"1000598" -> "1000597"  [label="AST: "];
"1000605" -> "1000597"  [label="AST: "];
"1000612" -> "1000597"  [label="AST: "];
"1000589" -> "1000597"  [label="CFG: "];
"1000597" -> "1000750"  [label="DDG: stops[count-2].r"];
"1000597" -> "1000589"  [label="DDG: stops[count-2].r"];
"1000597" -> "1000589"  [label="DDG: stops[count-1].r"];
"1000597" -> "1000589"  [label="DDG: d"];
"1000553" -> "1000597"  [label="DDG: d"];
"1000553" -> "1000551"  [label="AST: "];
"1000553" -> "1000555"  [label="CFG: "];
"1000554" -> "1000553"  [label="AST: "];
"1000555" -> "1000553"  [label="AST: "];
"1000583" -> "1000553"  [label="CFG: "];
"1000553" -> "1000750"  [label="DDG: (1 - stops[count-2].offset) / (stops[count-1].offset - stops[count-2].offset)"];
"1000555" -> "1000553"  [label="DDG: 1 - stops[count-2].offset"];
"1000555" -> "1000553"  [label="DDG: stops[count-1].offset - stops[count-2].offset"];
"1000555" -> "1000565"  [label="CFG: "];
"1000556" -> "1000555"  [label="AST: "];
"1000565" -> "1000555"  [label="AST: "];
"1000555" -> "1000750"  [label="DDG: 1 - stops[count-2].offset"];
"1000555" -> "1000750"  [label="DDG: stops[count-1].offset - stops[count-2].offset"];
"1000556" -> "1000555"  [label="DDG: 1"];
"1000556" -> "1000555"  [label="DDG: stops[count-2].offset"];
"1000565" -> "1000555"  [label="DDG: stops[count-1].offset"];
"1000565" -> "1000555"  [label="DDG: stops[count-2].offset"];
"1000556" -> "1000558"  [label="CFG: "];
"1000557" -> "1000556"  [label="AST: "];
"1000558" -> "1000556"  [label="AST: "];
"1000568" -> "1000556"  [label="CFG: "];
"1000556" -> "1000565"  [label="DDG: stops[count-2].offset"];
"1000565" -> "1000573"  [label="CFG: "];
"1000566" -> "1000565"  [label="AST: "];
"1000573" -> "1000565"  [label="AST: "];
"1000565" -> "1000750"  [label="DDG: stops[count-2].offset"];
"1000542" -> "1000565"  [label="DDG: stops[count-1].offset"];
"1000542" -> "1000541"  [label="AST: "];
"1000542" -> "1000550"  [label="CFG: "];
"1000543" -> "1000542"  [label="AST: "];
"1000550" -> "1000542"  [label="AST: "];
"1000554" -> "1000542"  [label="CFG: "];
"1000689" -> "1000542"  [label="CFG: "];
"1000542" -> "1000750"  [label="DDG: stops[count-1].offset > 1"];
"1000542" -> "1000720"  [label="DDG: stops[count-1].offset"];
"1000613" -> "1000551"  [label="AST: "];
"1000614" -> "1000613"  [label="AST: "];
"1000640" -> "1000613"  [label="CFG: "];
"1000613" -> "1000750"  [label="DDG: stops[count-1].g"];
"1000613" -> "1000750"  [label="DDG: lerp(stops[count-2].g, stops[count-1].g, d)"];
"1000613" -> "1000730"  [label="DDG: stops[count-1].g"];
"1000730" -> "1000729"  [label="AST: "];
"1000730" -> "1000734"  [label="CFG: "];
"1000731" -> "1000730"  [label="AST: "];
"1000734" -> "1000730"  [label="AST: "];
"1000742" -> "1000730"  [label="CFG: "];
"1000730" -> "1000750"  [label="DDG: stops[count-1]"];
"1000730" -> "1000750"  [label="DDG: stops[count]"];
"1000637" -> "1000730"  [label="DDG: stops[count-1].b"];
"1000589" -> "1000730"  [label="DDG: stops[count-1].r"];
"1000661" -> "1000730"  [label="DDG: stops[count-1].a"];
"1000720" -> "1000730"  [label="DDG: stops[count-1].offset"];
"1000328" -> "1000730"  [label="DDG: stops"];
"1000694" -> "1000730"  [label="DDG: stops"];
"1000381" -> "1000730"  [label="DDG: stops"];
"1000113" -> "1000730"  [label="DDG: stops"];
"1000645" -> "1000637"  [label="AST: "];
"1000645" -> "1000660"  [label="CFG: "];
"1000646" -> "1000645"  [label="AST: "];
"1000653" -> "1000645"  [label="AST: "];
"1000660" -> "1000645"  [label="AST: "];
"1000637" -> "1000645"  [label="CFG: "];
"1000645" -> "1000750"  [label="DDG: stops[count-2].b"];
"1000645" -> "1000637"  [label="DDG: stops[count-2].b"];
"1000645" -> "1000637"  [label="DDG: stops[count-1].b"];
"1000645" -> "1000637"  [label="DDG: d"];
"1000645" -> "1000669"  [label="DDG: d"];
"1000637" -> "1000551"  [label="AST: "];
"1000638" -> "1000637"  [label="AST: "];
"1000664" -> "1000637"  [label="CFG: "];
"1000637" -> "1000750"  [label="DDG: stops[count-1].b"];
"1000637" -> "1000750"  [label="DDG: lerp(stops[count-2].b, stops[count-1].b, d)"];
"1000669" -> "1000661"  [label="AST: "];
"1000669" -> "1000684"  [label="CFG: "];
"1000670" -> "1000669"  [label="AST: "];
"1000677" -> "1000669"  [label="AST: "];
"1000684" -> "1000669"  [label="AST: "];
"1000661" -> "1000669"  [label="CFG: "];
"1000669" -> "1000750"  [label="DDG: d"];
"1000669" -> "1000750"  [label="DDG: stops[count-2].a"];
"1000669" -> "1000661"  [label="DDG: stops[count-2].a"];
"1000669" -> "1000661"  [label="DDG: stops[count-1].a"];
"1000669" -> "1000661"  [label="DDG: d"];
"1000661" -> "1000551"  [label="AST: "];
"1000662" -> "1000661"  [label="AST: "];
"1000689" -> "1000661"  [label="CFG: "];
"1000661" -> "1000750"  [label="DDG: stops[count-1].a"];
"1000661" -> "1000750"  [label="DDG: lerp(stops[count-2].a, stops[count-1].a, d)"];
}
