digraph "0_linux_0926f91083f34d047abc74f1ca4fa6a9c161f7db_0@pointer" {
"1000151" [label="(Call,table->refs[i] == 0)"];
"1000164" [label="(Call,table->refs[i] &&\n\t\t    (vlan == (MLX4_VLAN_MASK &\n\t\t\t      be32_to_cpu(table->entries[i]))))"];
"1000151" [label="(Call,table->refs[i] == 0)"];
"1000170" [label="(Call,vlan == (MLX4_VLAN_MASK &\n\t\t\t      be32_to_cpu(table->entries[i])))"];
"1000106" [label="(MethodParameterIn,u16 vlan)"];
"1000172" [label="(Call,MLX4_VLAN_MASK &\n\t\t\t      be32_to_cpu(table->entries[i]))"];
"1000174" [label="(Call,be32_to_cpu(table->entries[i]))"];
"1000147" [label="(Call,free < 0 && (table->refs[i] == 0))"];
"1000185" [label="(Call,++table->refs[i])"];
"1000148" [label="(Call,free < 0)"];
"1000280" [label="(MethodReturn,int)"];
"1000185" [label="(Call,++table->refs[i])"];
"1000245" [label="(Call,mlx4_warn(dev, \"Failed adding vlan: %u\n\", vlan))"];
"1000175" [label="(Call,table->entries[i])"];
"1000163" [label="(ControlStructure,if (table->refs[i] &&\n\t\t    (vlan == (MLX4_VLAN_MASK &\n\t\t\t      be32_to_cpu(table->entries[i])))))"];
"1000174" [label="(Call,be32_to_cpu(table->entries[i]))"];
"1000170" [label="(Call,vlan == (MLX4_VLAN_MASK &\n\t\t\t      be32_to_cpu(table->entries[i])))"];
"1000171" [label="(Identifier,vlan)"];
"1000152" [label="(Call,table->refs[i])"];
"1000235" [label="(Call,mlx4_set_port_vlan_table(dev, port, table->entries))"];
"1000180" [label="(Block,)"];
"1000151" [label="(Call,table->refs[i] == 0)"];
"1000186" [label="(Call,table->refs[i])"];
"1000144" [label="(Identifier,i)"];
"1000160" [label="(Identifier,free)"];
"1000164" [label="(Call,table->refs[i] &&\n\t\t    (vlan == (MLX4_VLAN_MASK &\n\t\t\t      be32_to_cpu(table->entries[i]))))"];
"1000173" [label="(Identifier,MLX4_VLAN_MASK)"];
"1000165" [label="(Call,table->refs[i])"];
"1000146" [label="(ControlStructure,if (free < 0 && (table->refs[i] == 0)))"];
"1000106" [label="(MethodParameterIn,u16 vlan)"];
"1000230" [label="(Call,vlan | MLX4_VLAN_VALID)"];
"1000191" [label="(ControlStructure,goto out;)"];
"1000147" [label="(Call,free < 0 && (table->refs[i] == 0))"];
"1000183" [label="(Identifier,index)"];
"1000157" [label="(Literal,0)"];
"1000167" [label="(Identifier,table)"];
"1000172" [label="(Call,MLX4_VLAN_MASK &\n\t\t\t      be32_to_cpu(table->entries[i]))"];
"1000151" -> "1000147"  [label="AST: "];
"1000151" -> "1000157"  [label="CFG: "];
"1000152" -> "1000151"  [label="AST: "];
"1000157" -> "1000151"  [label="AST: "];
"1000147" -> "1000151"  [label="CFG: "];
"1000151" -> "1000280"  [label="DDG: table->refs[i]"];
"1000151" -> "1000147"  [label="DDG: table->refs[i]"];
"1000151" -> "1000147"  [label="DDG: 0"];
"1000164" -> "1000151"  [label="DDG: table->refs[i]"];
"1000151" -> "1000164"  [label="DDG: table->refs[i]"];
"1000164" -> "1000163"  [label="AST: "];
"1000164" -> "1000165"  [label="CFG: "];
"1000164" -> "1000170"  [label="CFG: "];
"1000165" -> "1000164"  [label="AST: "];
"1000170" -> "1000164"  [label="AST: "];
"1000183" -> "1000164"  [label="CFG: "];
"1000144" -> "1000164"  [label="CFG: "];
"1000164" -> "1000280"  [label="DDG: table->refs[i] &&\n\t\t    (vlan == (MLX4_VLAN_MASK &\n\t\t\t      be32_to_cpu(table->entries[i])))"];
"1000164" -> "1000280"  [label="DDG: vlan == (MLX4_VLAN_MASK &\n\t\t\t      be32_to_cpu(table->entries[i]))"];
"1000164" -> "1000280"  [label="DDG: table->refs[i]"];
"1000170" -> "1000164"  [label="DDG: vlan"];
"1000170" -> "1000164"  [label="DDG: MLX4_VLAN_MASK &\n\t\t\t      be32_to_cpu(table->entries[i])"];
"1000164" -> "1000185"  [label="DDG: table->refs[i]"];
"1000170" -> "1000172"  [label="CFG: "];
"1000171" -> "1000170"  [label="AST: "];
"1000172" -> "1000170"  [label="AST: "];
"1000170" -> "1000280"  [label="DDG: MLX4_VLAN_MASK &\n\t\t\t      be32_to_cpu(table->entries[i])"];
"1000170" -> "1000280"  [label="DDG: vlan"];
"1000106" -> "1000170"  [label="DDG: vlan"];
"1000172" -> "1000170"  [label="DDG: MLX4_VLAN_MASK"];
"1000172" -> "1000170"  [label="DDG: be32_to_cpu(table->entries[i])"];
"1000170" -> "1000230"  [label="DDG: vlan"];
"1000106" -> "1000103"  [label="AST: "];
"1000106" -> "1000280"  [label="DDG: vlan"];
"1000106" -> "1000230"  [label="DDG: vlan"];
"1000106" -> "1000245"  [label="DDG: vlan"];
"1000172" -> "1000174"  [label="CFG: "];
"1000173" -> "1000172"  [label="AST: "];
"1000174" -> "1000172"  [label="AST: "];
"1000172" -> "1000280"  [label="DDG: MLX4_VLAN_MASK"];
"1000172" -> "1000280"  [label="DDG: be32_to_cpu(table->entries[i])"];
"1000174" -> "1000172"  [label="DDG: table->entries[i]"];
"1000174" -> "1000175"  [label="CFG: "];
"1000175" -> "1000174"  [label="AST: "];
"1000174" -> "1000280"  [label="DDG: table->entries[i]"];
"1000174" -> "1000235"  [label="DDG: table->entries[i]"];
"1000147" -> "1000146"  [label="AST: "];
"1000147" -> "1000148"  [label="CFG: "];
"1000148" -> "1000147"  [label="AST: "];
"1000160" -> "1000147"  [label="CFG: "];
"1000167" -> "1000147"  [label="CFG: "];
"1000147" -> "1000280"  [label="DDG: table->refs[i] == 0"];
"1000147" -> "1000280"  [label="DDG: free < 0"];
"1000147" -> "1000280"  [label="DDG: free < 0 && (table->refs[i] == 0)"];
"1000148" -> "1000147"  [label="DDG: free"];
"1000148" -> "1000147"  [label="DDG: 0"];
"1000185" -> "1000180"  [label="AST: "];
"1000185" -> "1000186"  [label="CFG: "];
"1000186" -> "1000185"  [label="AST: "];
"1000191" -> "1000185"  [label="CFG: "];
"1000185" -> "1000280"  [label="DDG: table->refs[i]"];
}
