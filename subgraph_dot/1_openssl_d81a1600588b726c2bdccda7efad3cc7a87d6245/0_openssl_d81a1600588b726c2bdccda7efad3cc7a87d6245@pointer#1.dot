digraph "0_openssl_d81a1600588b726c2bdccda7efad3cc7a87d6245@pointer" {
"1000190" [label="(Call,ssl2_part_read(s, SSL_F_GET_CLIENT_HELLO, i))"];
"1000166" [label="(Call,ssl2_read(s, (char *)&(p[s->init_num]), 9 - s->init_num))"];
"1000109" [label="(MethodParameterIn,SSL *s)"];
"1000168" [label="(Call,(char *)&(p[s->init_num]))"];
"1000176" [label="(Call,9 - s->init_num)"];
"1000182" [label="(Call,i < (9 - s->init_num))"];
"1000164" [label="(Call,i = ssl2_read(s, (char *)&(p[s->init_num]), 9 - s->init_num))"];
"1000184" [label="(Call,9 - s->init_num)"];
"1000189" [label="(Return,return (ssl2_part_read(s, SSL_F_GET_CLIENT_HELLO, i));)"];
"1000668" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000381" [label="(Call,ssl2_read(s, (char *)&(p[s->init_num]), n))"];
"1000699" [label="(MethodReturn,static int)"];
"1000183" [label="(Identifier,i)"];
"1000168" [label="(Call,(char *)&(p[s->init_num]))"];
"1000163" [label="(Block,)"];
"1000227" [label="(Call,n2s(p, i))"];
"1000186" [label="(Call,s->init_num)"];
"1000466" [label="(Call,ssl_get_new_session(s, 1))"];
"1000170" [label="(Call,&(p[s->init_num]))"];
"1000176" [label="(Call,9 - s->init_num)"];
"1000177" [label="(Literal,9)"];
"1000192" [label="(Identifier,SSL_F_GET_CLIENT_HELLO)"];
"1000164" [label="(Call,i = ssl2_read(s, (char *)&(p[s->init_num]), 9 - s->init_num))"];
"1000397" [label="(Call,ssl2_part_read(s, SSL_F_GET_CLIENT_HELLO, i))"];
"1000517" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000383" [label="(Call,(char *)&(p[s->init_num]))"];
"1000406" [label="(Call,s->msg_callback(0, s->version, 0, p, (size_t)len, s,\n                        s->msg_callback_arg))"];
"1000165" [label="(Identifier,i)"];
"1000185" [label="(Literal,9)"];
"1000274" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000584" [label="(Call,SSL_get_ciphers(s))"];
"1000184" [label="(Call,9 - s->init_num)"];
"1000470" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000193" [label="(Identifier,i)"];
"1000189" [label="(Return,return (ssl2_part_read(s, SSL_F_GET_CLIENT_HELLO, i));)"];
"1000532" [label="(Call,ssl2_return_error(s, SSL2_PE_NO_CERTIFICATE))"];
"1000547" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000196" [label="(Identifier,s)"];
"1000178" [label="(Call,s->init_num)"];
"1000561" [label="(Call,ssl_bytes_to_cipher_list(s, p, s->s2->tmp.cipher_spec_length,\n                                      &s->session->ciphers))"];
"1000214" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000167" [label="(Identifier,s)"];
"1000191" [label="(Identifier,s)"];
"1000444" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000543" [label="(Call,ssl_get_new_session(s, 1))"];
"1000166" [label="(Call,ssl2_read(s, (char *)&(p[s->init_num]), 9 - s->init_num))"];
"1000181" [label="(ControlStructure,if (i < (9 - s->init_num)))"];
"1000302" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000361" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000182" [label="(Call,i < (9 - s->init_num))"];
"1000109" [label="(MethodParameterIn,SSL *s)"];
"1000190" [label="(Call,ssl2_part_read(s, SSL_F_GET_CLIENT_HELLO, i))"];
"1000480" [label="(Call,ssl_get_prev_session(s, &(p[s->s2->tmp.cipher_spec_length]),\n                                 s->s2->tmp.session_id_length, NULL))"];
"1000190" -> "1000189"  [label="AST: "];
"1000190" -> "1000193"  [label="CFG: "];
"1000191" -> "1000190"  [label="AST: "];
"1000192" -> "1000190"  [label="AST: "];
"1000193" -> "1000190"  [label="AST: "];
"1000189" -> "1000190"  [label="CFG: "];
"1000190" -> "1000699"  [label="DDG: ssl2_part_read(s, SSL_F_GET_CLIENT_HELLO, i)"];
"1000190" -> "1000699"  [label="DDG: s"];
"1000190" -> "1000699"  [label="DDG: i"];
"1000190" -> "1000699"  [label="DDG: SSL_F_GET_CLIENT_HELLO"];
"1000190" -> "1000189"  [label="DDG: ssl2_part_read(s, SSL_F_GET_CLIENT_HELLO, i)"];
"1000166" -> "1000190"  [label="DDG: s"];
"1000109" -> "1000190"  [label="DDG: s"];
"1000182" -> "1000190"  [label="DDG: i"];
"1000166" -> "1000164"  [label="AST: "];
"1000166" -> "1000176"  [label="CFG: "];
"1000167" -> "1000166"  [label="AST: "];
"1000168" -> "1000166"  [label="AST: "];
"1000176" -> "1000166"  [label="AST: "];
"1000164" -> "1000166"  [label="CFG: "];
"1000166" -> "1000699"  [label="DDG: (char *)&(p[s->init_num])"];
"1000166" -> "1000699"  [label="DDG: s"];
"1000166" -> "1000164"  [label="DDG: s"];
"1000166" -> "1000164"  [label="DDG: (char *)&(p[s->init_num])"];
"1000166" -> "1000164"  [label="DDG: 9 - s->init_num"];
"1000109" -> "1000166"  [label="DDG: s"];
"1000168" -> "1000166"  [label="DDG: &(p[s->init_num])"];
"1000176" -> "1000166"  [label="DDG: 9"];
"1000176" -> "1000166"  [label="DDG: s->init_num"];
"1000166" -> "1000214"  [label="DDG: s"];
"1000166" -> "1000274"  [label="DDG: s"];
"1000166" -> "1000302"  [label="DDG: s"];
"1000166" -> "1000361"  [label="DDG: s"];
"1000166" -> "1000381"  [label="DDG: s"];
"1000109" -> "1000108"  [label="AST: "];
"1000109" -> "1000699"  [label="DDG: s"];
"1000109" -> "1000214"  [label="DDG: s"];
"1000109" -> "1000274"  [label="DDG: s"];
"1000109" -> "1000302"  [label="DDG: s"];
"1000109" -> "1000361"  [label="DDG: s"];
"1000109" -> "1000381"  [label="DDG: s"];
"1000109" -> "1000397"  [label="DDG: s"];
"1000109" -> "1000406"  [label="DDG: s"];
"1000109" -> "1000444"  [label="DDG: s"];
"1000109" -> "1000466"  [label="DDG: s"];
"1000109" -> "1000470"  [label="DDG: s"];
"1000109" -> "1000480"  [label="DDG: s"];
"1000109" -> "1000517"  [label="DDG: s"];
"1000109" -> "1000532"  [label="DDG: s"];
"1000109" -> "1000543"  [label="DDG: s"];
"1000109" -> "1000547"  [label="DDG: s"];
"1000109" -> "1000561"  [label="DDG: s"];
"1000109" -> "1000584"  [label="DDG: s"];
"1000109" -> "1000668"  [label="DDG: s"];
"1000168" -> "1000170"  [label="CFG: "];
"1000169" -> "1000168"  [label="AST: "];
"1000170" -> "1000168"  [label="AST: "];
"1000177" -> "1000168"  [label="CFG: "];
"1000168" -> "1000699"  [label="DDG: &(p[s->init_num])"];
"1000168" -> "1000383"  [label="DDG: &(p[s->init_num])"];
"1000176" -> "1000178"  [label="CFG: "];
"1000177" -> "1000176"  [label="AST: "];
"1000178" -> "1000176"  [label="AST: "];
"1000176" -> "1000184"  [label="DDG: s->init_num"];
"1000182" -> "1000181"  [label="AST: "];
"1000182" -> "1000184"  [label="CFG: "];
"1000183" -> "1000182"  [label="AST: "];
"1000184" -> "1000182"  [label="AST: "];
"1000191" -> "1000182"  [label="CFG: "];
"1000196" -> "1000182"  [label="CFG: "];
"1000182" -> "1000699"  [label="DDG: i < (9 - s->init_num)"];
"1000182" -> "1000699"  [label="DDG: 9 - s->init_num"];
"1000182" -> "1000699"  [label="DDG: i"];
"1000164" -> "1000182"  [label="DDG: i"];
"1000184" -> "1000182"  [label="DDG: 9"];
"1000184" -> "1000182"  [label="DDG: s->init_num"];
"1000182" -> "1000227"  [label="DDG: i"];
"1000164" -> "1000163"  [label="AST: "];
"1000165" -> "1000164"  [label="AST: "];
"1000183" -> "1000164"  [label="CFG: "];
"1000164" -> "1000699"  [label="DDG: ssl2_read(s, (char *)&(p[s->init_num]), 9 - s->init_num)"];
"1000184" -> "1000186"  [label="CFG: "];
"1000185" -> "1000184"  [label="AST: "];
"1000186" -> "1000184"  [label="AST: "];
"1000184" -> "1000699"  [label="DDG: s->init_num"];
"1000189" -> "1000181"  [label="AST: "];
"1000699" -> "1000189"  [label="CFG: "];
"1000189" -> "1000699"  [label="DDG: <RET>"];
}
