digraph "0_Android_9d4853418ab2f754c2b63e091c29c5529b8b86ca_57@pointer" {
"1000129" [label="(Call,(display)\n\n /* At the end recalculate the digitized red green and blue values according\n    * to the current sample_depth of the pixel.\n    *\n    * The sample value is simply scaled to the maximum, checking for over\n    * and underflow (which can both happen for some image transforms,\n    * including simple size scaling, though libpng doesn't do that at present.\n\n     */\n    that->red)"];
"1000149" [label="(Call,that->red >>= that->sample_depth - that->red_sBIT)"];
"1000274" [label="(Call,that->blue = that->green = that->red)"];
"1000278" [label="(Call,that->green = that->red)"];
"1000278" [label="(Call,that->green = that->red)"];
"1000129" [label="(Call,(display)\n\n /* At the end recalculate the digitized red green and blue values according\n    * to the current sample_depth of the pixel.\n    *\n    * The sample value is simply scaled to the maximum, checking for over\n    * and underflow (which can both happen for some image transforms,\n    * including simple size scaling, though libpng doesn't do that at present.\n\n     */\n    that->red)"];
"1000139" [label="(ControlStructure,if (sig_bits && that->red_sBIT < that->sample_depth))"];
"1000153" [label="(Call,that->sample_depth - that->red_sBIT)"];
"1000274" [label="(Call,that->blue = that->green = that->red)"];
"1000279" [label="(Call,that->green)"];
"1000131" [label="(Call,that->red)"];
"1000382" [label="(MethodReturn,RET)"];
"1000282" [label="(Call,that->red)"];
"1000162" [label="(Identifier,that)"];
"1000287" [label="(Identifier,that)"];
"1000128" [label="(Call,(display)\n\n /* At the end recalculate the digitized red green and blue values according\n    * to the current sample_depth of the pixel.\n    *\n    * The sample value is simply scaled to the maximum, checking for over\n    * and underflow (which can both happen for some image transforms,\n    * including simple size scaling, though libpng doesn't do that at present.\n\n     */\n    that->red = sample_scale(that->redf, scale))"];
"1000150" [label="(Call,that->red)"];
"1000275" [label="(Call,that->blue)"];
"1000136" [label="(Identifier,that)"];
"1000273" [label="(Block,)"];
"1000149" [label="(Call,that->red >>= that->sample_depth - that->red_sBIT)"];
"1000129" -> "1000128"  [label="AST: "];
"1000129" -> "1000131"  [label="CFG: "];
"1000130" -> "1000129"  [label="AST: "];
"1000131" -> "1000129"  [label="AST: "];
"1000136" -> "1000129"  [label="CFG: "];
"1000129" -> "1000382"  [label="DDG: that->red"];
"1000129" -> "1000149"  [label="DDG: that->red"];
"1000129" -> "1000274"  [label="DDG: that->red"];
"1000129" -> "1000278"  [label="DDG: that->red"];
"1000149" -> "1000139"  [label="AST: "];
"1000149" -> "1000153"  [label="CFG: "];
"1000150" -> "1000149"  [label="AST: "];
"1000153" -> "1000149"  [label="AST: "];
"1000162" -> "1000149"  [label="CFG: "];
"1000149" -> "1000382"  [label="DDG: that->red >>= that->sample_depth - that->red_sBIT"];
"1000149" -> "1000382"  [label="DDG: that->sample_depth - that->red_sBIT"];
"1000149" -> "1000382"  [label="DDG: that->red"];
"1000153" -> "1000149"  [label="DDG: that->sample_depth"];
"1000153" -> "1000149"  [label="DDG: that->red_sBIT"];
"1000149" -> "1000274"  [label="DDG: that->red"];
"1000149" -> "1000278"  [label="DDG: that->red"];
"1000274" -> "1000273"  [label="AST: "];
"1000274" -> "1000278"  [label="CFG: "];
"1000275" -> "1000274"  [label="AST: "];
"1000278" -> "1000274"  [label="AST: "];
"1000287" -> "1000274"  [label="CFG: "];
"1000274" -> "1000382"  [label="DDG: that->blue"];
"1000278" -> "1000274"  [label="DDG: that->green"];
"1000278" -> "1000282"  [label="CFG: "];
"1000279" -> "1000278"  [label="AST: "];
"1000282" -> "1000278"  [label="AST: "];
"1000278" -> "1000382"  [label="DDG: that->red"];
"1000278" -> "1000382"  [label="DDG: that->green"];
}
