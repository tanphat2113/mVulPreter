digraph "0_qemu_509a41bab5306181044b5fff02eadf96d9c8676a@API" {
"1000235" [label="(Call,s->n_blocks > UINT32_MAX / sizeof(uint64_t))"];
"1000226" [label="(Call,s->n_blocks = be32_to_cpu(s->n_blocks))"];
"1000230" [label="(Call,be32_to_cpu(s->n_blocks))"];
"1000207" [label="(Call,bdrv_pread(bs->file, 128 + 4, &s->n_blocks, 4))"];
"1000130" [label="(Call,bdrv_pread(bs->file, 128, &s->block_size, 4))"];
"1000239" [label="(Call,UINT32_MAX / sizeof(uint64_t))"];
"1000244" [label="(Call,error_setg(errp, \"n_blocks %u must be %zu or less\",\n                   s->n_blocks,\n                   UINT32_MAX / sizeof(uint64_t)))"];
"1000259" [label="(Call,s->n_blocks * sizeof(uint64_t))"];
"1000257" [label="(Call,offsets_size = s->n_blocks * sizeof(uint64_t))"];
"1000269" [label="(Call,g_malloc(offsets_size))"];
"1000265" [label="(Call,s->offsets = g_malloc(offsets_size))"];
"1000241" [label="(Call,sizeof(uint64_t))"];
"1000208" [label="(Call,bs->file)"];
"1000236" [label="(Call,s->n_blocks)"];
"1000185" [label="(Call,s->block_size > MAX_BLOCK_SIZE)"];
"1000151" [label="(Call,be32_to_cpu(s->block_size))"];
"1000230" [label="(Call,be32_to_cpu(s->n_blocks))"];
"1000211" [label="(Call,128 + 4)"];
"1000247" [label="(Call,s->n_blocks)"];
"1000172" [label="(Call,s->block_size == 0)"];
"1000239" [label="(Call,UINT32_MAX / sizeof(uint64_t))"];
"1000231" [label="(Call,s->n_blocks)"];
"1000270" [label="(Identifier,offsets_size)"];
"1000234" [label="(ControlStructure,if (s->n_blocks > UINT32_MAX / sizeof(uint64_t)))"];
"1000218" [label="(Literal,4)"];
"1000130" [label="(Call,bdrv_pread(bs->file, 128, &s->block_size, 4))"];
"1000245" [label="(Identifier,errp)"];
"1000265" [label="(Call,s->offsets = g_malloc(offsets_size))"];
"1000162" [label="(Call,error_setg(errp, \"block_size %u must be a multiple of 512\",\n                   s->block_size))"];
"1000266" [label="(Call,s->offsets)"];
"1000235" [label="(Call,s->n_blocks > UINT32_MAX / sizeof(uint64_t))"];
"1000259" [label="(Call,s->n_blocks * sizeof(uint64_t))"];
"1000131" [label="(Call,bs->file)"];
"1000263" [label="(Call,sizeof(uint64_t))"];
"1000135" [label="(Call,&s->block_size)"];
"1000260" [label="(Call,s->n_blocks)"];
"1000205" [label="(Call,ret = bdrv_pread(bs->file, 128 + 4, &s->n_blocks, 4))"];
"1000156" [label="(Call,s->block_size % 512)"];
"1000214" [label="(Call,&s->n_blocks)"];
"1000269" [label="(Call,g_malloc(offsets_size))"];
"1000227" [label="(Call,s->n_blocks)"];
"1000273" [label="(Identifier,i)"];
"1000237" [label="(Identifier,s)"];
"1000244" [label="(Call,error_setg(errp, \"n_blocks %u must be %zu or less\",\n                   s->n_blocks,\n                   UINT32_MAX / sizeof(uint64_t)))"];
"1000226" [label="(Call,s->n_blocks = be32_to_cpu(s->n_blocks))"];
"1000139" [label="(Literal,4)"];
"1000256" [label="(Identifier,EINVAL)"];
"1000267" [label="(Identifier,s)"];
"1000109" [label="(Block,)"];
"1000108" [label="(MethodParameterIn,Error **errp)"];
"1000250" [label="(Call,UINT32_MAX / sizeof(uint64_t))"];
"1000246" [label="(Literal,\"n_blocks %u must be %zu or less\")"];
"1000243" [label="(Block,)"];
"1000257" [label="(Call,offsets_size = s->n_blocks * sizeof(uint64_t))"];
"1000191" [label="(Call,error_setg(errp, \"block_size %u must be %u MB or less\",\n                   s->block_size,\n                   MAX_BLOCK_SIZE / (1024 * 1024)))"];
"1000240" [label="(Identifier,UINT32_MAX)"];
"1000300" [label="(MethodReturn,static int)"];
"1000128" [label="(Call,ret = bdrv_pread(bs->file, 128, &s->block_size, 4))"];
"1000207" [label="(Call,bdrv_pread(bs->file, 128 + 4, &s->n_blocks, 4))"];
"1000258" [label="(Identifier,offsets_size)"];
"1000134" [label="(Literal,128)"];
"1000235" -> "1000234"  [label="AST: "];
"1000235" -> "1000239"  [label="CFG: "];
"1000236" -> "1000235"  [label="AST: "];
"1000239" -> "1000235"  [label="AST: "];
"1000245" -> "1000235"  [label="CFG: "];
"1000258" -> "1000235"  [label="CFG: "];
"1000235" -> "1000300"  [label="DDG: "];
"1000235" -> "1000300"  [label="DDG: "];
"1000226" -> "1000235"  [label="DDG: "];
"1000207" -> "1000235"  [label="DDG: "];
"1000239" -> "1000235"  [label="DDG: "];
"1000235" -> "1000244"  [label="DDG: "];
"1000235" -> "1000259"  [label="DDG: "];
"1000226" -> "1000109"  [label="AST: "];
"1000226" -> "1000230"  [label="CFG: "];
"1000227" -> "1000226"  [label="AST: "];
"1000230" -> "1000226"  [label="AST: "];
"1000237" -> "1000226"  [label="CFG: "];
"1000226" -> "1000300"  [label="DDG: "];
"1000230" -> "1000226"  [label="DDG: "];
"1000230" -> "1000231"  [label="CFG: "];
"1000231" -> "1000230"  [label="AST: "];
"1000207" -> "1000230"  [label="DDG: "];
"1000207" -> "1000205"  [label="AST: "];
"1000207" -> "1000218"  [label="CFG: "];
"1000208" -> "1000207"  [label="AST: "];
"1000211" -> "1000207"  [label="AST: "];
"1000214" -> "1000207"  [label="AST: "];
"1000218" -> "1000207"  [label="AST: "];
"1000205" -> "1000207"  [label="CFG: "];
"1000207" -> "1000300"  [label="DDG: "];
"1000207" -> "1000300"  [label="DDG: "];
"1000207" -> "1000300"  [label="DDG: "];
"1000207" -> "1000205"  [label="DDG: "];
"1000207" -> "1000205"  [label="DDG: "];
"1000207" -> "1000205"  [label="DDG: "];
"1000207" -> "1000205"  [label="DDG: "];
"1000130" -> "1000207"  [label="DDG: "];
"1000207" -> "1000244"  [label="DDG: "];
"1000207" -> "1000259"  [label="DDG: "];
"1000130" -> "1000128"  [label="AST: "];
"1000130" -> "1000139"  [label="CFG: "];
"1000131" -> "1000130"  [label="AST: "];
"1000134" -> "1000130"  [label="AST: "];
"1000135" -> "1000130"  [label="AST: "];
"1000139" -> "1000130"  [label="AST: "];
"1000128" -> "1000130"  [label="CFG: "];
"1000130" -> "1000300"  [label="DDG: "];
"1000130" -> "1000300"  [label="DDG: "];
"1000130" -> "1000128"  [label="DDG: "];
"1000130" -> "1000128"  [label="DDG: "];
"1000130" -> "1000128"  [label="DDG: "];
"1000130" -> "1000128"  [label="DDG: "];
"1000130" -> "1000151"  [label="DDG: "];
"1000130" -> "1000156"  [label="DDG: "];
"1000130" -> "1000162"  [label="DDG: "];
"1000130" -> "1000172"  [label="DDG: "];
"1000130" -> "1000185"  [label="DDG: "];
"1000130" -> "1000191"  [label="DDG: "];
"1000239" -> "1000241"  [label="CFG: "];
"1000240" -> "1000239"  [label="AST: "];
"1000241" -> "1000239"  [label="AST: "];
"1000239" -> "1000300"  [label="DDG: "];
"1000239" -> "1000250"  [label="DDG: "];
"1000244" -> "1000243"  [label="AST: "];
"1000244" -> "1000250"  [label="CFG: "];
"1000245" -> "1000244"  [label="AST: "];
"1000246" -> "1000244"  [label="AST: "];
"1000247" -> "1000244"  [label="AST: "];
"1000250" -> "1000244"  [label="AST: "];
"1000256" -> "1000244"  [label="CFG: "];
"1000244" -> "1000300"  [label="DDG: "];
"1000244" -> "1000300"  [label="DDG: "];
"1000244" -> "1000300"  [label="DDG: "];
"1000244" -> "1000300"  [label="DDG: "];
"1000108" -> "1000244"  [label="DDG: "];
"1000250" -> "1000244"  [label="DDG: "];
"1000259" -> "1000257"  [label="AST: "];
"1000259" -> "1000263"  [label="CFG: "];
"1000260" -> "1000259"  [label="AST: "];
"1000263" -> "1000259"  [label="AST: "];
"1000257" -> "1000259"  [label="CFG: "];
"1000259" -> "1000300"  [label="DDG: "];
"1000259" -> "1000257"  [label="DDG: "];
"1000257" -> "1000109"  [label="AST: "];
"1000258" -> "1000257"  [label="AST: "];
"1000267" -> "1000257"  [label="CFG: "];
"1000257" -> "1000300"  [label="DDG: "];
"1000257" -> "1000269"  [label="DDG: "];
"1000269" -> "1000265"  [label="AST: "];
"1000269" -> "1000270"  [label="CFG: "];
"1000270" -> "1000269"  [label="AST: "];
"1000265" -> "1000269"  [label="CFG: "];
"1000269" -> "1000300"  [label="DDG: "];
"1000269" -> "1000265"  [label="DDG: "];
"1000265" -> "1000109"  [label="AST: "];
"1000266" -> "1000265"  [label="AST: "];
"1000273" -> "1000265"  [label="CFG: "];
"1000265" -> "1000300"  [label="DDG: "];
"1000265" -> "1000300"  [label="DDG: "];
}
