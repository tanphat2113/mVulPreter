digraph "0_linux_3e10986d1d698140747fcfc2761ec9cb64c1d582@API" {
"1000571" [label="(Call,copy_from_user(&fprog, optval, sizeof(fprog)))"];
"1000147" [label="(Call,(int __user *)optval)"];
"1000111" [label="(MethodParameterIn,char __user *optval)"];
"1000580" [label="(Call,sk_attach_filter(&fprog, sk))"];
"1000578" [label="(Call,ret = sk_attach_filter(&fprog, sk))"];
"1000666" [label="(Return,return ret;)"];
"1000664" [label="(Call,release_sock(sk))"];
"1000572" [label="(Call,&fprog)"];
"1000584" [label="(ControlStructure,break;)"];
"1000457" [label="(Call,sock_reset_flag(sk, SOCK_RCVTSTAMPNS))"];
"1000350" [label="(Call,ret = -EINVAL)"];
"1000149" [label="(Identifier,optval)"];
"1000586" [label="(Call,ret = sk_detach_filter(sk))"];
"1000111" [label="(MethodParameterIn,char __user *optval)"];
"1000113" [label="(Block,)"];
"1000668" [label="(MethodReturn,int)"];
"1000207" [label="(Call,sock_valbool_flag(sk, SOCK_BROADCAST, valbool))"];
"1000581" [label="(Call,&fprog)"];
"1000631" [label="(Call,sock_valbool_flag(sk, SOCK_WIFI_STATUS, valbool))"];
"1000235" [label="(Call,sk->sk_write_space(sk))"];
"1000580" [label="(Call,sk_attach_filter(&fprog, sk))"];
"1000546" [label="(Call,sock_set_timeout(&sk->sk_sndtimeo, optval, optlen))"];
"1000244" [label="(Call,ret = -EPERM)"];
"1000159" [label="(Call,lock_sock(sk))"];
"1000613" [label="(Call,ret = -EPERM)"];
"1000356" [label="(Call,copy_from_user(&ling, optval, sizeof(ling)))"];
"1000467" [label="(Call,ret = -EINVAL)"];
"1000132" [label="(Call,sock_bindtodevice(sk, optval, optlen))"];
"1000533" [label="(Call,ret = sock_set_timeout(&sk->sk_rcvtimeo, optval, optlen))"];
"1000544" [label="(Call,ret = sock_set_timeout(&sk->sk_sndtimeo, optval, optlen))"];
"1000578" [label="(Call,ret = sk_attach_filter(&fprog, sk))"];
"1000515" [label="(Call,sock_valbool_flag(sk, SOCK_TIMESTAMPING_RAW_HARDWARE,\n\t\t\t\t  val & SOF_TIMESTAMPING_RAW_HARDWARE))"];
"1000363" [label="(Call,ret = -EFAULT)"];
"1000201" [label="(Call,sock_valbool_flag(sk, SOCK_LOCALROUTE, valbool))"];
"1000171" [label="(Call,ret = -EACCES)"];
"1000566" [label="(Call,ret = -EFAULT)"];
"1000653" [label="(Call,sock_valbool_flag(sk, SOCK_NOFCS, valbool))"];
"1000583" [label="(Identifier,sk)"];
"1000564" [label="(Block,)"];
"1000574" [label="(Identifier,optval)"];
"1000147" [label="(Call,(int __user *)optval)"];
"1000280" [label="(Call,ret = -EPERM)"];
"1000588" [label="(Call,sk_detach_filter(sk))"];
"1000176" [label="(Call,sock_valbool_flag(sk, SOCK_DBG, valbool))"];
"1000571" [label="(Call,copy_from_user(&fprog, optval, sizeof(fprog)))"];
"1000570" [label="(ControlStructure,if (copy_from_user(&fprog, optval, sizeof(fprog))))"];
"1000308" [label="(Call,sock_valbool_flag(sk, SOCK_URGINLINE, valbool))"];
"1000579" [label="(Identifier,ret)"];
"1000124" [label="(Call,ret = 0)"];
"1000575" [label="(Call,sizeof(fprog))"];
"1000555" [label="(Call,ret = -EINVAL)"];
"1000373" [label="(Call,sock_reset_flag(sk, SOCK_LINGER))"];
"1000302" [label="(Call,sock_valbool_flag(sk, SOCK_KEEPOPEN, valbool))"];
"1000659" [label="(Call,ret = -ENOPROTOOPT)"];
"1000647" [label="(Call,ret = -EOPNOTSUPP)"];
"1000405" [label="(Call,sock_set_flag(sk, SOCK_LINGER))"];
"1000449" [label="(Call,sock_enable_timestamp(sk, SOCK_TIMESTAMP))"];
"1000664" [label="(Call,release_sock(sk))"];
"1000535" [label="(Call,sock_set_timeout(&sk->sk_rcvtimeo, optval, optlen))"];
"1000667" [label="(Identifier,ret)"];
"1000625" [label="(Call,sock_valbool_flag(sk, SOCK_RXQ_OVFL, valbool))"];
"1000338" [label="(Call,ret = -EPERM)"];
"1000666" [label="(Return,return ret;)"];
"1000195" [label="(Call,ret = -ENOPROTOOPT)"];
"1000643" [label="(Call,sock->ops->set_peek_off(sk, val))"];
"1000665" [label="(Identifier,sk)"];
"1000145" [label="(Call,get_user(val, (int __user *)optval))"];
"1000577" [label="(ControlStructure,break;)"];
"1000571" -> "1000570"  [label="AST: "];
"1000571" -> "1000575"  [label="CFG: "];
"1000572" -> "1000571"  [label="AST: "];
"1000574" -> "1000571"  [label="AST: "];
"1000575" -> "1000571"  [label="AST: "];
"1000577" -> "1000571"  [label="CFG: "];
"1000579" -> "1000571"  [label="CFG: "];
"1000571" -> "1000668"  [label="DDG: copy_from_user(&fprog, optval, sizeof(fprog))"];
"1000571" -> "1000668"  [label="DDG: optval"];
"1000571" -> "1000668"  [label="DDG: &fprog"];
"1000147" -> "1000571"  [label="DDG: optval"];
"1000111" -> "1000571"  [label="DDG: optval"];
"1000571" -> "1000580"  [label="DDG: &fprog"];
"1000147" -> "1000145"  [label="AST: "];
"1000147" -> "1000149"  [label="CFG: "];
"1000148" -> "1000147"  [label="AST: "];
"1000149" -> "1000147"  [label="AST: "];
"1000145" -> "1000147"  [label="CFG: "];
"1000147" -> "1000668"  [label="DDG: optval"];
"1000147" -> "1000145"  [label="DDG: optval"];
"1000111" -> "1000147"  [label="DDG: optval"];
"1000147" -> "1000356"  [label="DDG: optval"];
"1000147" -> "1000535"  [label="DDG: optval"];
"1000147" -> "1000546"  [label="DDG: optval"];
"1000111" -> "1000107"  [label="AST: "];
"1000111" -> "1000668"  [label="DDG: optval"];
"1000111" -> "1000132"  [label="DDG: optval"];
"1000111" -> "1000356"  [label="DDG: optval"];
"1000111" -> "1000535"  [label="DDG: optval"];
"1000111" -> "1000546"  [label="DDG: optval"];
"1000580" -> "1000578"  [label="AST: "];
"1000580" -> "1000583"  [label="CFG: "];
"1000581" -> "1000580"  [label="AST: "];
"1000583" -> "1000580"  [label="AST: "];
"1000578" -> "1000580"  [label="CFG: "];
"1000580" -> "1000668"  [label="DDG: &fprog"];
"1000580" -> "1000578"  [label="DDG: &fprog"];
"1000580" -> "1000578"  [label="DDG: sk"];
"1000159" -> "1000580"  [label="DDG: sk"];
"1000580" -> "1000664"  [label="DDG: sk"];
"1000578" -> "1000564"  [label="AST: "];
"1000579" -> "1000578"  [label="AST: "];
"1000584" -> "1000578"  [label="CFG: "];
"1000578" -> "1000668"  [label="DDG: ret"];
"1000578" -> "1000668"  [label="DDG: sk_attach_filter(&fprog, sk)"];
"1000578" -> "1000666"  [label="DDG: ret"];
"1000666" -> "1000113"  [label="AST: "];
"1000666" -> "1000667"  [label="CFG: "];
"1000667" -> "1000666"  [label="AST: "];
"1000668" -> "1000666"  [label="CFG: "];
"1000666" -> "1000668"  [label="DDG: <RET>"];
"1000667" -> "1000666"  [label="DDG: ret"];
"1000338" -> "1000666"  [label="DDG: ret"];
"1000171" -> "1000666"  [label="DDG: ret"];
"1000124" -> "1000666"  [label="DDG: ret"];
"1000350" -> "1000666"  [label="DDG: ret"];
"1000659" -> "1000666"  [label="DDG: ret"];
"1000363" -> "1000666"  [label="DDG: ret"];
"1000467" -> "1000666"  [label="DDG: ret"];
"1000586" -> "1000666"  [label="DDG: ret"];
"1000566" -> "1000666"  [label="DDG: ret"];
"1000533" -> "1000666"  [label="DDG: ret"];
"1000244" -> "1000666"  [label="DDG: ret"];
"1000195" -> "1000666"  [label="DDG: ret"];
"1000613" -> "1000666"  [label="DDG: ret"];
"1000647" -> "1000666"  [label="DDG: ret"];
"1000555" -> "1000666"  [label="DDG: ret"];
"1000544" -> "1000666"  [label="DDG: ret"];
"1000280" -> "1000666"  [label="DDG: ret"];
"1000664" -> "1000113"  [label="AST: "];
"1000664" -> "1000665"  [label="CFG: "];
"1000665" -> "1000664"  [label="AST: "];
"1000667" -> "1000664"  [label="CFG: "];
"1000664" -> "1000668"  [label="DDG: release_sock(sk)"];
"1000664" -> "1000668"  [label="DDG: sk"];
"1000308" -> "1000664"  [label="DDG: sk"];
"1000588" -> "1000664"  [label="DDG: sk"];
"1000643" -> "1000664"  [label="DDG: sk"];
"1000159" -> "1000664"  [label="DDG: sk"];
"1000449" -> "1000664"  [label="DDG: sk"];
"1000515" -> "1000664"  [label="DDG: sk"];
"1000207" -> "1000664"  [label="DDG: sk"];
"1000176" -> "1000664"  [label="DDG: sk"];
"1000653" -> "1000664"  [label="DDG: sk"];
"1000373" -> "1000664"  [label="DDG: sk"];
"1000201" -> "1000664"  [label="DDG: sk"];
"1000625" -> "1000664"  [label="DDG: sk"];
"1000235" -> "1000664"  [label="DDG: sk"];
"1000631" -> "1000664"  [label="DDG: sk"];
"1000302" -> "1000664"  [label="DDG: sk"];
"1000405" -> "1000664"  [label="DDG: sk"];
"1000457" -> "1000664"  [label="DDG: sk"];
}
