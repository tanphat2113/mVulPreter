digraph "0_tor_56a7c5bc15e0447203a491c1ee37de9939ad1dcd@pointer" {
"1000935" [label="(Call,log_debug(domain,\"stream-level sendme, packagewindow now %d.\",\n                conn->package_window))"];
"1000149" [label="(Call,log_debug(domain, \"Now seen %d relay cells here (command %d, stream %d).\",\n            num_seen, rh.command, rh.stream_id))"];
"1000126" [label="(Call,domain = layer_hint?LD_APP:LD_EXIT)"];
"1000118" [label="(MethodParameterIn,crypt_path_t *layer_hint)"];
"1000147" [label="(Call,num_seen++)"];
"1000121" [label="(Call,num_seen=0)"];
"1000930" [label="(Call,conn->package_window += STREAMWINDOW_INCREMENT)"];
"1000607" [label="(Call,log_fn(LOG_PROTOCOL_WARN, domain, \"EXTEND cell received, \"\n                   \"but not via RELAY_EARLY. Dropping.%s\", m))"];
"1000637" [label="(Call,!layer_hint)"];
"1000813" [label="(Call,circuit_truncated(TO_ORIGIN_CIRCUIT(circ), layer_hint,\n                        get_uint8(cell->payload + RELAY_HEADER_SIZE)))"];
"1001049" [label="(Call,log_fn(LOG_PROTOCOL_WARN, LD_PROTOCOL,\n         \"Received unknown relay command %d. Perhaps the other side is using \"\n         \"a newer version of Tor? Dropping.\",\n         rh.command))"];
"1000148" [label="(Identifier,num_seen)"];
"1000151" [label="(Literal,\"Now seen %d relay cells here (command %d, stream %d).\")"];
"1000123" [label="(Literal,0)"];
"1000260" [label="(Block,)"];
"1001058" [label="(MethodReturn,RET)"];
"1000385" [label="(Call,layer_hint ?\n                layer_hint->deliver_window : circ->deliver_window)"];
"1000653" [label="(Call,extended_cell_parse(&extended_cell, rh.command,\n                        (const uint8_t*)cell->payload+RELAY_HEADER_SIZE,\n                        rh.length))"];
"1000393" [label="(Call,circuit_consider_sending_sendme(circ, layer_hint))"];
"1000936" [label="(Identifier,domain)"];
"1000934" [label="(Identifier,STREAMWINDOW_INCREMENT)"];
"1000174" [label="(Call,rh.stream_id == 0)"];
"1000943" [label="(Identifier,circ)"];
"1000552" [label="(Call,log_fn(LOG_PROTOCOL_WARN, domain,\n               \"'extend' cell received for non-zero stream. Dropping.\"))"];
"1000306" [label="(Call,log_fn(LOG_PROTOCOL_WARN, domain,\n                \"Begin cell for known stream. Dropping.\"))"];
"1000196" [label="(Call,(int)rh.command)"];
"1000979" [label="(Call,log_fn(LOG_PROTOCOL_WARN, domain,\n               \"resolve request for known stream; dropping.\"))"];
"1000127" [label="(Identifier,domain)"];
"1000357" [label="(Call,!layer_hint)"];
"1000836" [label="(Call,log_info(domain,\n               \"'connected' received, no conn attached anymore. Ignoring.\"))"];
"1000469" [label="(Call,log_info(domain,\"end cell (%s) dropped, unknown stream.\",\n                 stream_end_reason_to_string(reason)))"];
"1000313" [label="(Call,rh.command == RELAY_COMMAND_BEGIN_DIR)"];
"1000935" [label="(Call,log_debug(domain,\"stream-level sendme, packagewindow now %d.\",\n                conn->package_window))"];
"1001019" [label="(Call,log_info(domain,\n               \"'resolved' received, no conn attached anymore. Ignoring.\"))"];
"1000931" [label="(Call,conn->package_window)"];
"1000804" [label="(Call,!layer_hint)"];
"1000147" [label="(Call,num_seen++)"];
"1000152" [label="(Identifier,num_seen)"];
"1000938" [label="(Call,conn->package_window)"];
"1000937" [label="(Literal,\"stream-level sendme, packagewindow now %d.\")"];
"1000156" [label="(Call,rh.stream_id)"];
"1000237" [label="(Call,rh.command == RELAY_COMMAND_DATA)"];
"1000646" [label="(Call,log_debug(domain,\"Got an extended cell! Yay.\"))"];
"1000922" [label="(Call,log_info(domain,\"sendme cell dropped, unknown stream (streamid %d).\",\n                 rh.stream_id))"];
"1000382" [label="(Call,log_debug(domain,\"circ deliver_window now %d.\", layer_hint ?\n                layer_hint->deliver_window : circ->deliver_window))"];
"1000878" [label="(Call,circuit_resume_edge_reading(circ, layer_hint))"];
"1000621" [label="(Call,log_fn(LOG_WARN, domain,\n                 \"EXTEND cell received, in a cell with type %d! Dropping.\",\n                 cell->command))"];
"1000913" [label="(Call,circuit_resume_edge_reading(circ, layer_hint))"];
"1000150" [label="(Identifier,domain)"];
"1000118" [label="(MethodParameterIn,crypt_path_t *layer_hint)"];
"1001012" [label="(Call,log_fn(LOG_PROTOCOL_WARN, domain,\n               \"'resolved' unsupported while open. Closing circ.\"))"];
"1001033" [label="(Call,rend_process_relay_cell(circ, layer_hint,\n                              rh.command, rh.length,\n                              cell->payload+RELAY_HEADER_SIZE))"];
"1000135" [label="(Identifier,optimistic_data)"];
"1000153" [label="(Call,rh.command)"];
"1000121" [label="(Call,num_seen=0)"];
"1000119" [label="(Block,)"];
"1000149" [label="(Call,log_debug(domain, \"Now seen %d relay cells here (command %d, stream %d).\",\n            num_seen, rh.command, rh.stream_id))"];
"1000162" [label="(Identifier,rh)"];
"1000249" [label="(Call,connection_edge_process_relay_cell_not_open(\n               &rh, cell, circ, conn, layer_hint))"];
"1000126" [label="(Call,domain = layer_hint?LD_APP:LD_EXIT)"];
"1000122" [label="(Identifier,num_seen)"];
"1000267" [label="(Call,layer_hint &&\n          circ->purpose != CIRCUIT_PURPOSE_S_REND_JOINED)"];
"1000930" [label="(Call,conn->package_window += STREAMWINDOW_INCREMENT)"];
"1000993" [label="(Call,log_fn(LOG_PROTOCOL_WARN, domain,\n               \"resolve request on circ with purpose %d; dropping\",\n               circ->purpose))"];
"1000128" [label="(Call,layer_hint?LD_APP:LD_EXIT)"];
"1000348" [label="(Call,layer_hint && --layer_hint->deliver_window < 0)"];
"1000288" [label="(Call,layer_hint != TO_ORIGIN_CIRCUIT(circ)->cpath->prev)"];
"1000935" -> "1000260"  [label="AST: "];
"1000935" -> "1000938"  [label="CFG: "];
"1000936" -> "1000935"  [label="AST: "];
"1000937" -> "1000935"  [label="AST: "];
"1000938" -> "1000935"  [label="AST: "];
"1000943" -> "1000935"  [label="CFG: "];
"1000935" -> "1001058"  [label="DDG: "];
"1000935" -> "1001058"  [label="DDG: "];
"1000935" -> "1001058"  [label="DDG: "];
"1000149" -> "1000935"  [label="DDG: "];
"1000930" -> "1000935"  [label="DDG: "];
"1000149" -> "1000119"  [label="AST: "];
"1000149" -> "1000156"  [label="CFG: "];
"1000150" -> "1000149"  [label="AST: "];
"1000151" -> "1000149"  [label="AST: "];
"1000152" -> "1000149"  [label="AST: "];
"1000153" -> "1000149"  [label="AST: "];
"1000156" -> "1000149"  [label="AST: "];
"1000162" -> "1000149"  [label="CFG: "];
"1000149" -> "1001058"  [label="DDG: "];
"1000149" -> "1001058"  [label="DDG: "];
"1000149" -> "1001058"  [label="DDG: "];
"1000149" -> "1001058"  [label="DDG: "];
"1000149" -> "1001058"  [label="DDG: "];
"1000126" -> "1000149"  [label="DDG: "];
"1000147" -> "1000149"  [label="DDG: "];
"1000149" -> "1000174"  [label="DDG: "];
"1000149" -> "1000196"  [label="DDG: "];
"1000149" -> "1000237"  [label="DDG: "];
"1000149" -> "1000306"  [label="DDG: "];
"1000149" -> "1000313"  [label="DDG: "];
"1000149" -> "1000382"  [label="DDG: "];
"1000149" -> "1000469"  [label="DDG: "];
"1000149" -> "1000552"  [label="DDG: "];
"1000149" -> "1000607"  [label="DDG: "];
"1000149" -> "1000621"  [label="DDG: "];
"1000149" -> "1000646"  [label="DDG: "];
"1000149" -> "1000653"  [label="DDG: "];
"1000149" -> "1000836"  [label="DDG: "];
"1000149" -> "1000922"  [label="DDG: "];
"1000149" -> "1000979"  [label="DDG: "];
"1000149" -> "1000993"  [label="DDG: "];
"1000149" -> "1001012"  [label="DDG: "];
"1000149" -> "1001019"  [label="DDG: "];
"1000149" -> "1001033"  [label="DDG: "];
"1000149" -> "1001049"  [label="DDG: "];
"1000126" -> "1000119"  [label="AST: "];
"1000126" -> "1000128"  [label="CFG: "];
"1000127" -> "1000126"  [label="AST: "];
"1000128" -> "1000126"  [label="AST: "];
"1000135" -> "1000126"  [label="CFG: "];
"1000126" -> "1001058"  [label="DDG: "];
"1000118" -> "1000126"  [label="DDG: "];
"1000118" -> "1000114"  [label="AST: "];
"1000118" -> "1001058"  [label="DDG: "];
"1000118" -> "1000128"  [label="DDG: "];
"1000118" -> "1000249"  [label="DDG: "];
"1000118" -> "1000267"  [label="DDG: "];
"1000118" -> "1000288"  [label="DDG: "];
"1000118" -> "1000348"  [label="DDG: "];
"1000118" -> "1000357"  [label="DDG: "];
"1000118" -> "1000382"  [label="DDG: "];
"1000118" -> "1000385"  [label="DDG: "];
"1000118" -> "1000393"  [label="DDG: "];
"1000118" -> "1000637"  [label="DDG: "];
"1000118" -> "1000804"  [label="DDG: "];
"1000118" -> "1000813"  [label="DDG: "];
"1000118" -> "1000878"  [label="DDG: "];
"1000118" -> "1000913"  [label="DDG: "];
"1000118" -> "1001033"  [label="DDG: "];
"1000147" -> "1000119"  [label="AST: "];
"1000147" -> "1000148"  [label="CFG: "];
"1000148" -> "1000147"  [label="AST: "];
"1000150" -> "1000147"  [label="CFG: "];
"1000121" -> "1000147"  [label="DDG: "];
"1000121" -> "1000119"  [label="AST: "];
"1000121" -> "1000123"  [label="CFG: "];
"1000122" -> "1000121"  [label="AST: "];
"1000123" -> "1000121"  [label="AST: "];
"1000127" -> "1000121"  [label="CFG: "];
"1000930" -> "1000260"  [label="AST: "];
"1000930" -> "1000934"  [label="CFG: "];
"1000931" -> "1000930"  [label="AST: "];
"1000934" -> "1000930"  [label="AST: "];
"1000936" -> "1000930"  [label="CFG: "];
"1000930" -> "1001058"  [label="DDG: "];
}
