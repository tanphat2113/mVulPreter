digraph "0_linux_82939d7999dfc1f1998c4b1c12e2f19edbdff272_3@pointer" {
"1000563" [label="(Call,ce = NULL)"];
"1000393" [label="(Call,s->base == NULL)"];
"1000379" [label="(Call,s->base = kzalloc(sb->s_blocksize, GFP_NOFS))"];
"1000383" [label="(Call,kzalloc(sb->s_blocksize, GFP_NOFS))"];
"1000153" [label="(Call,i->value_len > sb->s_blocksize)"];
"1000315" [label="(Call,s->base == NULL)"];
"1000299" [label="(Call,s->base = kmalloc(bs->bh->b_size, GFP_NOFS))"];
"1000303" [label="(Call,kmalloc(bs->bh->b_size, GFP_NOFS))"];
"1000560" [label="(Call,mb2_cache_entry_put(ext4_mb_cache, ce))"];
"1000596" [label="(Call,mb2_cache_entry_touch(ext4_mb_cache, ce))"];
"1000599" [label="(Call,mb2_cache_entry_put(ext4_mb_cache, ce))"];
"1000782" [label="(Call,mb2_cache_entry_put(ext4_mb_cache, ce))"];
"1000737" [label="(Call,ext4_xattr_cache_insert(ext4_mb_cache, new_bh))"];
"1000742" [label="(Call,ext4_handle_dirty_xattr_block(handle,\n\t\t\t\t\t\t\t      inode, new_bh))"];
"1000740" [label="(Call,error = ext4_handle_dirty_xattr_block(handle,\n\t\t\t\t\t\t\t      inode, new_bh))"];
"1000806" [label="(Return,return error;)"];
"1000751" [label="(Call,EXT4_I(inode))"];
"1000770" [label="(Call,ext4_xattr_release_block(handle, inode, bs->bh))"];
"1000789" [label="(Call,bs->bh && s->base == bs->bh->b_data)"];
"1000788" [label="(Call,!(bs->bh && s->base == bs->bh->b_data))"];
"1000785" [label="(Call,brelse(new_bh))"];
"1000600" [label="(Identifier,ext4_mb_cache)"];
"1000739" [label="(Identifier,new_bh)"];
"1000791" [label="(Identifier,bs)"];
"1000765" [label="(Call,bs->bh != new_bh)"];
"1000744" [label="(Identifier,inode)"];
"1000315" [label="(Call,s->base == NULL)"];
"1000316" [label="(Call,s->base)"];
"1000387" [label="(Identifier,GFP_NOFS)"];
"1000785" [label="(Call,brelse(new_bh))"];
"1000465" [label="(Call,error == -EFSCORRUPTED)"];
"1000294" [label="(Call,ea_bdebug(bs->bh, \"cloning\"))"];
"1000320" [label="(ControlStructure,goto cleanup;)"];
"1000562" [label="(Identifier,ce)"];
"1000397" [label="(Identifier,NULL)"];
"1000509" [label="(Call,new_bh == bs->bh)"];
"1000793" [label="(Call,s->base == bs->bh->b_data)"];
"1000497" [label="(Call,ext4_xattr_cache_find(inode, header(s->base), &ce))"];
"1000782" [label="(Call,mb2_cache_entry_put(ext4_mb_cache, ce))"];
"1000788" [label="(Call,!(bs->bh && s->base == bs->bh->b_data))"];
"1000770" [label="(Call,ext4_xattr_release_block(handle, inode, bs->bh))"];
"1000535" [label="(Call,ext4_journal_get_write_access(handle,\n\t\t\t\t\t\t\t\t      new_bh))"];
"1000602" [label="(Call,ce = NULL)"];
"1000784" [label="(Identifier,ce)"];
"1000807" [label="(Identifier,error)"];
"1000392" [label="(ControlStructure,if (s->base == NULL))"];
"1000690" [label="(Call,!new_bh)"];
"1000384" [label="(Call,sb->s_blocksize)"];
"1000718" [label="(Call,error = -EIO)"];
"1000114" [label="(MethodParameterIn,struct inode *inode)"];
"1000743" [label="(Identifier,handle)"];
"1000157" [label="(Call,sb->s_blocksize)"];
"1000741" [label="(Identifier,error)"];
"1000300" [label="(Call,s->base)"];
"1000154" [label="(Call,i->value_len)"];
"1000254" [label="(Call,error == -EFSCORRUPTED)"];
"1000751" [label="(Call,EXT4_I(inode))"];
"1000783" [label="(Identifier,ext4_mb_cache)"];
"1000735" [label="(Call,unlock_buffer(new_bh))"];
"1000773" [label="(Call,bs->bh)"];
"1000589" [label="(Call,ext4_handle_dirty_xattr_block(handle,\n\t\t\t\t\t\t\t\t      inode,\n\t\t\t\t\t\t\t\t      new_bh))"];
"1000401" [label="(Call,header(s->base))"];
"1000321" [label="(Call,memcpy(s->base, BHDR(bs->bh), bs->bh->b_size))"];
"1000565" [label="(Identifier,NULL)"];
"1000747" [label="(Identifier,error)"];
"1000657" [label="(Call,ext4_new_meta_blocks(handle, inode, goal, 0,\n\t\t\t\t\t\t     NULL, &error))"];
"1000789" [label="(Call,bs->bh && s->base == bs->bh->b_data)"];
"1000561" [label="(Identifier,ext4_mb_cache)"];
"1000599" [label="(Call,mb2_cache_entry_put(ext4_mb_cache, ce))"];
"1000761" [label="(Call,bs->bh && bs->bh != new_bh)"];
"1000113" [label="(MethodParameterIn,handle_t *handle)"];
"1000737" [label="(Call,ext4_xattr_cache_insert(ext4_mb_cache, new_bh))"];
"1000323" [label="(Identifier,s)"];
"1000560" [label="(Call,mb2_cache_entry_put(ext4_mb_cache, ce))"];
"1000299" [label="(Call,s->base = kmalloc(bs->bh->b_size, GFP_NOFS))"];
"1000806" [label="(Return,return error;)"];
"1000383" [label="(Call,kzalloc(sb->s_blocksize, GFP_NOFS))"];
"1000776" [label="(Call,error = 0)"];
"1000153" [label="(Call,i->value_len > sb->s_blocksize)"];
"1000802" [label="(Call,kfree(s->base))"];
"1000745" [label="(Identifier,new_bh)"];
"1000597" [label="(Identifier,ext4_mb_cache)"];
"1000146" [label="(Call,EXT4_GET_MB_CACHE(inode))"];
"1000786" [label="(Identifier,new_bh)"];
"1000567" [label="(Identifier,new_bh)"];
"1000393" [label="(Call,s->base == NULL)"];
"1000710" [label="(Call,ext4_journal_get_create_access(handle, new_bh))"];
"1000601" [label="(Identifier,ce)"];
"1000780" [label="(ControlStructure,if (ce))"];
"1000787" [label="(ControlStructure,if (!(bs->bh && s->base == bs->bh->b_data)))"];
"1000314" [label="(ControlStructure,if (s->base == NULL))"];
"1000677" [label="(Call,ea_idebug(inode, \"creating block %llu\",\n\t\t\t\t  (unsigned long long)block))"];
"1000753" [label="(FieldIdentifier,i_file_acl)"];
"1000693" [label="(Call,error = -ENOMEM)"];
"1000379" [label="(Call,s->base = kzalloc(sb->s_blocksize, GFP_NOFS))"];
"1000738" [label="(Identifier,ext4_mb_cache)"];
"1000552" [label="(Call,dquot_free_block(inode,\n\t\t\t\t\t\t\t EXT4_C2B(EXT4_SB(sb),\n\t\t\t\t\t\t\t\t  1)))"];
"1000533" [label="(Call,error = ext4_journal_get_write_access(handle,\n\t\t\t\t\t\t\t\t      new_bh))"];
"1000249" [label="(Call,unlock_buffer(bs->bh))"];
"1000325" [label="(Call,BHDR(bs->bh))"];
"1000389" [label="(Identifier,error)"];
"1000750" [label="(Call,EXT4_I(inode)->i_file_acl)"];
"1000825" [label="(MethodReturn,RET)"];
"1000549" [label="(Block,)"];
"1000563" [label="(Call,ce = NULL)"];
"1000262" [label="(Call,error = ext4_handle_dirty_xattr_block(handle,\n\t\t\t\t\t\t\t\t      inode,\n\t\t\t\t\t\t\t\t      bs->bh))"];
"1000740" [label="(Call,error = ext4_handle_dirty_xattr_block(handle,\n\t\t\t\t\t\t\t      inode, new_bh))"];
"1000244" [label="(Call,ext4_xattr_cache_insert(ext4_mb_cache,\n\t\t\t\t\tbs->bh))"];
"1000125" [label="(Call,*new_bh = NULL)"];
"1000173" [label="(Call,error = ext4_journal_get_write_access(handle, bs->bh))"];
"1000752" [label="(Identifier,inode)"];
"1000716" [label="(Call,unlock_buffer(new_bh))"];
"1000634" [label="(Block,)"];
"1000777" [label="(Identifier,error)"];
"1000507" [label="(Block,)"];
"1000319" [label="(Identifier,NULL)"];
"1000564" [label="(Identifier,ce)"];
"1000495" [label="(Call,new_bh = ext4_xattr_cache_find(inode, header(s->base), &ce))"];
"1000519" [label="(Call,error = dquot_alloc_block(inode,\n\t\t\t\t\t\tEXT4_C2B(EXT4_SB(sb), 1)))"];
"1000403" [label="(Identifier,s)"];
"1000598" [label="(Identifier,ce)"];
"1000260" [label="(Call,!error)"];
"1000448" [label="(Call,s->end = s->base + sb->s_blocksize)"];
"1000587" [label="(Call,error = ext4_handle_dirty_xattr_block(handle,\n\t\t\t\t\t\t\t\t      inode,\n\t\t\t\t\t\t\t\t      new_bh))"];
"1000309" [label="(Identifier,GFP_NOFS)"];
"1000380" [label="(Call,s->base)"];
"1000175" [label="(Call,ext4_journal_get_write_access(handle, bs->bh))"];
"1000208" [label="(Call,mb2_cache_entry_delete_block(ext4_mb_cache, hash,\n\t\t\t\t\t\t     bs->bh->b_blocknr))"];
"1000772" [label="(Identifier,inode)"];
"1000275" [label="(Block,)"];
"1000149" [label="(Call,i->value && i->value_len > sb->s_blocksize)"];
"1000603" [label="(Identifier,ce)"];
"1000117" [label="(Block,)"];
"1000394" [label="(Call,s->base)"];
"1000804" [label="(Identifier,s)"];
"1000398" [label="(ControlStructure,goto cleanup;)"];
"1000311" [label="(Identifier,error)"];
"1000378" [label="(Block,)"];
"1000607" [label="(Call,bs->bh && s->base == bs->bh->b_data)"];
"1000388" [label="(Call,error = -ENOMEM)"];
"1000144" [label="(Call,*ext4_mb_cache = EXT4_GET_MB_CACHE(inode))"];
"1000790" [label="(Call,bs->bh)"];
"1000596" [label="(Call,mb2_cache_entry_touch(ext4_mb_cache, ce))"];
"1000264" [label="(Call,ext4_handle_dirty_xattr_block(handle,\n\t\t\t\t\t\t\t\t      inode,\n\t\t\t\t\t\t\t\t      bs->bh))"];
"1000760" [label="(ControlStructure,if (bs->bh && bs->bh != new_bh))"];
"1000310" [label="(Call,error = -ENOMEM)"];
"1000303" [label="(Call,kmalloc(bs->bh->b_size, GFP_NOFS))"];
"1000304" [label="(Call,bs->bh->b_size)"];
"1000742" [label="(Call,ext4_handle_dirty_xattr_block(handle,\n\t\t\t\t\t\t\t      inode, new_bh))"];
"1000136" [label="(Call,*ce = NULL)"];
"1000771" [label="(Identifier,handle)"];
"1000452" [label="(Call,s->base + sb->s_blocksize)"];
"1000563" -> "1000549"  [label="AST: "];
"1000563" -> "1000565"  [label="CFG: "];
"1000564" -> "1000563"  [label="AST: "];
"1000565" -> "1000563"  [label="AST: "];
"1000567" -> "1000563"  [label="CFG: "];
"1000563" -> "1000825"  [label="DDG: ce"];
"1000563" -> "1000560"  [label="DDG: ce"];
"1000393" -> "1000563"  [label="DDG: NULL"];
"1000315" -> "1000563"  [label="DDG: NULL"];
"1000563" -> "1000596"  [label="DDG: ce"];
"1000563" -> "1000782"  [label="DDG: ce"];
"1000393" -> "1000392"  [label="AST: "];
"1000393" -> "1000397"  [label="CFG: "];
"1000394" -> "1000393"  [label="AST: "];
"1000397" -> "1000393"  [label="AST: "];
"1000398" -> "1000393"  [label="CFG: "];
"1000403" -> "1000393"  [label="CFG: "];
"1000393" -> "1000825"  [label="DDG: NULL"];
"1000393" -> "1000825"  [label="DDG: s->base"];
"1000393" -> "1000825"  [label="DDG: s->base == NULL"];
"1000379" -> "1000393"  [label="DDG: s->base"];
"1000393" -> "1000401"  [label="DDG: s->base"];
"1000393" -> "1000602"  [label="DDG: NULL"];
"1000393" -> "1000657"  [label="DDG: NULL"];
"1000393" -> "1000793"  [label="DDG: s->base"];
"1000393" -> "1000802"  [label="DDG: s->base"];
"1000379" -> "1000378"  [label="AST: "];
"1000379" -> "1000383"  [label="CFG: "];
"1000380" -> "1000379"  [label="AST: "];
"1000383" -> "1000379"  [label="AST: "];
"1000389" -> "1000379"  [label="CFG: "];
"1000379" -> "1000825"  [label="DDG: kzalloc(sb->s_blocksize, GFP_NOFS)"];
"1000383" -> "1000379"  [label="DDG: sb->s_blocksize"];
"1000383" -> "1000379"  [label="DDG: GFP_NOFS"];
"1000383" -> "1000387"  [label="CFG: "];
"1000384" -> "1000383"  [label="AST: "];
"1000387" -> "1000383"  [label="AST: "];
"1000383" -> "1000825"  [label="DDG: sb->s_blocksize"];
"1000383" -> "1000825"  [label="DDG: GFP_NOFS"];
"1000153" -> "1000383"  [label="DDG: sb->s_blocksize"];
"1000383" -> "1000448"  [label="DDG: sb->s_blocksize"];
"1000383" -> "1000452"  [label="DDG: sb->s_blocksize"];
"1000153" -> "1000149"  [label="AST: "];
"1000153" -> "1000157"  [label="CFG: "];
"1000154" -> "1000153"  [label="AST: "];
"1000157" -> "1000153"  [label="AST: "];
"1000149" -> "1000153"  [label="CFG: "];
"1000153" -> "1000825"  [label="DDG: sb->s_blocksize"];
"1000153" -> "1000825"  [label="DDG: i->value_len"];
"1000153" -> "1000149"  [label="DDG: i->value_len"];
"1000153" -> "1000149"  [label="DDG: sb->s_blocksize"];
"1000315" -> "1000314"  [label="AST: "];
"1000315" -> "1000319"  [label="CFG: "];
"1000316" -> "1000315"  [label="AST: "];
"1000319" -> "1000315"  [label="AST: "];
"1000320" -> "1000315"  [label="CFG: "];
"1000323" -> "1000315"  [label="CFG: "];
"1000315" -> "1000825"  [label="DDG: s->base == NULL"];
"1000315" -> "1000825"  [label="DDG: s->base"];
"1000315" -> "1000825"  [label="DDG: NULL"];
"1000299" -> "1000315"  [label="DDG: s->base"];
"1000315" -> "1000321"  [label="DDG: s->base"];
"1000315" -> "1000602"  [label="DDG: NULL"];
"1000315" -> "1000657"  [label="DDG: NULL"];
"1000315" -> "1000793"  [label="DDG: s->base"];
"1000315" -> "1000802"  [label="DDG: s->base"];
"1000299" -> "1000275"  [label="AST: "];
"1000299" -> "1000303"  [label="CFG: "];
"1000300" -> "1000299"  [label="AST: "];
"1000303" -> "1000299"  [label="AST: "];
"1000311" -> "1000299"  [label="CFG: "];
"1000299" -> "1000825"  [label="DDG: kmalloc(bs->bh->b_size, GFP_NOFS)"];
"1000303" -> "1000299"  [label="DDG: bs->bh->b_size"];
"1000303" -> "1000299"  [label="DDG: GFP_NOFS"];
"1000303" -> "1000309"  [label="CFG: "];
"1000304" -> "1000303"  [label="AST: "];
"1000309" -> "1000303"  [label="AST: "];
"1000303" -> "1000825"  [label="DDG: GFP_NOFS"];
"1000303" -> "1000825"  [label="DDG: bs->bh->b_size"];
"1000303" -> "1000321"  [label="DDG: bs->bh->b_size"];
"1000560" -> "1000549"  [label="AST: "];
"1000560" -> "1000562"  [label="CFG: "];
"1000561" -> "1000560"  [label="AST: "];
"1000562" -> "1000560"  [label="AST: "];
"1000564" -> "1000560"  [label="CFG: "];
"1000560" -> "1000825"  [label="DDG: mb2_cache_entry_put(ext4_mb_cache, ce)"];
"1000560" -> "1000825"  [label="DDG: ext4_mb_cache"];
"1000208" -> "1000560"  [label="DDG: ext4_mb_cache"];
"1000144" -> "1000560"  [label="DDG: ext4_mb_cache"];
"1000244" -> "1000560"  [label="DDG: ext4_mb_cache"];
"1000136" -> "1000560"  [label="DDG: ce"];
"1000560" -> "1000596"  [label="DDG: ext4_mb_cache"];
"1000560" -> "1000737"  [label="DDG: ext4_mb_cache"];
"1000560" -> "1000782"  [label="DDG: ext4_mb_cache"];
"1000596" -> "1000507"  [label="AST: "];
"1000596" -> "1000598"  [label="CFG: "];
"1000597" -> "1000596"  [label="AST: "];
"1000598" -> "1000596"  [label="AST: "];
"1000600" -> "1000596"  [label="CFG: "];
"1000596" -> "1000825"  [label="DDG: mb2_cache_entry_touch(ext4_mb_cache, ce)"];
"1000208" -> "1000596"  [label="DDG: ext4_mb_cache"];
"1000144" -> "1000596"  [label="DDG: ext4_mb_cache"];
"1000244" -> "1000596"  [label="DDG: ext4_mb_cache"];
"1000136" -> "1000596"  [label="DDG: ce"];
"1000596" -> "1000599"  [label="DDG: ext4_mb_cache"];
"1000596" -> "1000599"  [label="DDG: ce"];
"1000599" -> "1000507"  [label="AST: "];
"1000599" -> "1000601"  [label="CFG: "];
"1000600" -> "1000599"  [label="AST: "];
"1000601" -> "1000599"  [label="AST: "];
"1000603" -> "1000599"  [label="CFG: "];
"1000599" -> "1000825"  [label="DDG: mb2_cache_entry_put(ext4_mb_cache, ce)"];
"1000599" -> "1000825"  [label="DDG: ext4_mb_cache"];
"1000599" -> "1000782"  [label="DDG: ext4_mb_cache"];
"1000782" -> "1000780"  [label="AST: "];
"1000782" -> "1000784"  [label="CFG: "];
"1000783" -> "1000782"  [label="AST: "];
"1000784" -> "1000782"  [label="AST: "];
"1000786" -> "1000782"  [label="CFG: "];
"1000782" -> "1000825"  [label="DDG: ext4_mb_cache"];
"1000782" -> "1000825"  [label="DDG: mb2_cache_entry_put(ext4_mb_cache, ce)"];
"1000782" -> "1000825"  [label="DDG: ce"];
"1000208" -> "1000782"  [label="DDG: ext4_mb_cache"];
"1000737" -> "1000782"  [label="DDG: ext4_mb_cache"];
"1000144" -> "1000782"  [label="DDG: ext4_mb_cache"];
"1000244" -> "1000782"  [label="DDG: ext4_mb_cache"];
"1000602" -> "1000782"  [label="DDG: ce"];
"1000136" -> "1000782"  [label="DDG: ce"];
"1000737" -> "1000634"  [label="AST: "];
"1000737" -> "1000739"  [label="CFG: "];
"1000738" -> "1000737"  [label="AST: "];
"1000739" -> "1000737"  [label="AST: "];
"1000741" -> "1000737"  [label="CFG: "];
"1000737" -> "1000825"  [label="DDG: ext4_mb_cache"];
"1000737" -> "1000825"  [label="DDG: ext4_xattr_cache_insert(ext4_mb_cache, new_bh)"];
"1000208" -> "1000737"  [label="DDG: ext4_mb_cache"];
"1000144" -> "1000737"  [label="DDG: ext4_mb_cache"];
"1000244" -> "1000737"  [label="DDG: ext4_mb_cache"];
"1000735" -> "1000737"  [label="DDG: new_bh"];
"1000737" -> "1000742"  [label="DDG: new_bh"];
"1000742" -> "1000740"  [label="AST: "];
"1000742" -> "1000745"  [label="CFG: "];
"1000743" -> "1000742"  [label="AST: "];
"1000744" -> "1000742"  [label="AST: "];
"1000745" -> "1000742"  [label="AST: "];
"1000740" -> "1000742"  [label="CFG: "];
"1000742" -> "1000825"  [label="DDG: inode"];
"1000742" -> "1000825"  [label="DDG: handle"];
"1000742" -> "1000740"  [label="DDG: handle"];
"1000742" -> "1000740"  [label="DDG: inode"];
"1000742" -> "1000740"  [label="DDG: new_bh"];
"1000710" -> "1000742"  [label="DDG: handle"];
"1000113" -> "1000742"  [label="DDG: handle"];
"1000677" -> "1000742"  [label="DDG: inode"];
"1000114" -> "1000742"  [label="DDG: inode"];
"1000742" -> "1000751"  [label="DDG: inode"];
"1000742" -> "1000770"  [label="DDG: handle"];
"1000742" -> "1000785"  [label="DDG: new_bh"];
"1000740" -> "1000634"  [label="AST: "];
"1000741" -> "1000740"  [label="AST: "];
"1000747" -> "1000740"  [label="CFG: "];
"1000740" -> "1000825"  [label="DDG: ext4_handle_dirty_xattr_block(handle,\n\t\t\t\t\t\t\t      inode, new_bh)"];
"1000740" -> "1000825"  [label="DDG: error"];
"1000740" -> "1000806"  [label="DDG: error"];
"1000806" -> "1000117"  [label="AST: "];
"1000806" -> "1000807"  [label="CFG: "];
"1000807" -> "1000806"  [label="AST: "];
"1000825" -> "1000806"  [label="CFG: "];
"1000806" -> "1000825"  [label="DDG: <RET>"];
"1000807" -> "1000806"  [label="DDG: error"];
"1000254" -> "1000806"  [label="DDG: error"];
"1000310" -> "1000806"  [label="DDG: error"];
"1000587" -> "1000806"  [label="DDG: error"];
"1000776" -> "1000806"  [label="DDG: error"];
"1000262" -> "1000806"  [label="DDG: error"];
"1000718" -> "1000806"  [label="DDG: error"];
"1000693" -> "1000806"  [label="DDG: error"];
"1000260" -> "1000806"  [label="DDG: error"];
"1000173" -> "1000806"  [label="DDG: error"];
"1000465" -> "1000806"  [label="DDG: error"];
"1000519" -> "1000806"  [label="DDG: error"];
"1000388" -> "1000806"  [label="DDG: error"];
"1000533" -> "1000806"  [label="DDG: error"];
"1000751" -> "1000750"  [label="AST: "];
"1000751" -> "1000752"  [label="CFG: "];
"1000752" -> "1000751"  [label="AST: "];
"1000753" -> "1000751"  [label="CFG: "];
"1000751" -> "1000825"  [label="DDG: inode"];
"1000552" -> "1000751"  [label="DDG: inode"];
"1000497" -> "1000751"  [label="DDG: inode"];
"1000589" -> "1000751"  [label="DDG: inode"];
"1000264" -> "1000751"  [label="DDG: inode"];
"1000146" -> "1000751"  [label="DDG: inode"];
"1000114" -> "1000751"  [label="DDG: inode"];
"1000751" -> "1000770"  [label="DDG: inode"];
"1000770" -> "1000760"  [label="AST: "];
"1000770" -> "1000773"  [label="CFG: "];
"1000771" -> "1000770"  [label="AST: "];
"1000772" -> "1000770"  [label="AST: "];
"1000773" -> "1000770"  [label="AST: "];
"1000777" -> "1000770"  [label="CFG: "];
"1000770" -> "1000825"  [label="DDG: ext4_xattr_release_block(handle, inode, bs->bh)"];
"1000770" -> "1000825"  [label="DDG: inode"];
"1000770" -> "1000825"  [label="DDG: handle"];
"1000589" -> "1000770"  [label="DDG: handle"];
"1000264" -> "1000770"  [label="DDG: handle"];
"1000535" -> "1000770"  [label="DDG: handle"];
"1000175" -> "1000770"  [label="DDG: handle"];
"1000113" -> "1000770"  [label="DDG: handle"];
"1000114" -> "1000770"  [label="DDG: inode"];
"1000761" -> "1000770"  [label="DDG: bs->bh"];
"1000770" -> "1000789"  [label="DDG: bs->bh"];
"1000789" -> "1000788"  [label="AST: "];
"1000789" -> "1000790"  [label="CFG: "];
"1000789" -> "1000793"  [label="CFG: "];
"1000790" -> "1000789"  [label="AST: "];
"1000793" -> "1000789"  [label="AST: "];
"1000788" -> "1000789"  [label="CFG: "];
"1000789" -> "1000825"  [label="DDG: s->base == bs->bh->b_data"];
"1000789" -> "1000825"  [label="DDG: bs->bh"];
"1000789" -> "1000788"  [label="DDG: bs->bh"];
"1000789" -> "1000788"  [label="DDG: s->base == bs->bh->b_data"];
"1000325" -> "1000789"  [label="DDG: bs->bh"];
"1000761" -> "1000789"  [label="DDG: bs->bh"];
"1000509" -> "1000789"  [label="DDG: bs->bh"];
"1000294" -> "1000789"  [label="DDG: bs->bh"];
"1000175" -> "1000789"  [label="DDG: bs->bh"];
"1000249" -> "1000789"  [label="DDG: bs->bh"];
"1000607" -> "1000789"  [label="DDG: bs->bh"];
"1000607" -> "1000789"  [label="DDG: s->base == bs->bh->b_data"];
"1000264" -> "1000789"  [label="DDG: bs->bh"];
"1000793" -> "1000789"  [label="DDG: s->base"];
"1000793" -> "1000789"  [label="DDG: bs->bh->b_data"];
"1000788" -> "1000787"  [label="AST: "];
"1000804" -> "1000788"  [label="CFG: "];
"1000807" -> "1000788"  [label="CFG: "];
"1000788" -> "1000825"  [label="DDG: bs->bh && s->base == bs->bh->b_data"];
"1000788" -> "1000825"  [label="DDG: !(bs->bh && s->base == bs->bh->b_data)"];
"1000785" -> "1000117"  [label="AST: "];
"1000785" -> "1000786"  [label="CFG: "];
"1000786" -> "1000785"  [label="AST: "];
"1000791" -> "1000785"  [label="CFG: "];
"1000785" -> "1000825"  [label="DDG: brelse(new_bh)"];
"1000785" -> "1000825"  [label="DDG: new_bh"];
"1000125" -> "1000785"  [label="DDG: new_bh"];
"1000495" -> "1000785"  [label="DDG: new_bh"];
"1000765" -> "1000785"  [label="DDG: new_bh"];
"1000509" -> "1000785"  [label="DDG: new_bh"];
"1000535" -> "1000785"  [label="DDG: new_bh"];
"1000690" -> "1000785"  [label="DDG: new_bh"];
"1000716" -> "1000785"  [label="DDG: new_bh"];
"1000589" -> "1000785"  [label="DDG: new_bh"];
}
