digraph "0_linux_234f3ce485d54017f15cf5e0699cff4100121601_8@pointer" {
"1001127" [label="(Call,count = ctxt->dst.count)"];
"1001139" [label="(Call,-count)"];
"1001134" [label="(Call,register_address_increment(ctxt, reg_rmw(ctxt, VCPU_REGS_RCX),\n\t\t\t\t-count))"];
"1001143" [label="(Call,string_insn_completed(ctxt))"];
"1001142" [label="(Call,!string_insn_completed(ctxt))"];
"1001155" [label="(Call,reg_read(ctxt, VCPU_REGS_RCX))"];
"1001154" [label="(Call,reg_read(ctxt, VCPU_REGS_RCX) & 0x3ff)"];
"1001148" [label="(Call,r->end != 0 || reg_read(ctxt, VCPU_REGS_RCX) & 0x3ff)"];
"1001147" [label="(Call,(r->end != 0 || reg_read(ctxt, VCPU_REGS_RCX) & 0x3ff) &&\n\t\t\t    (r->end == 0 || r->end != r->pos))"];
"1001180" [label="(Call,writeback_registers(ctxt))"];
"1001226" [label="(Call,writeback_registers(ctxt))"];
"1001154" [label="(Call,reg_read(ctxt, VCPU_REGS_RCX) & 0x3ff)"];
"1001257" [label="(Call,ops->get_cr(ctxt, ctxt->modrm_reg))"];
"1000264" [label="(Call,emulate_ud(ctxt))"];
"1001044" [label="(Call,writeback(ctxt, &ctxt->dst))"];
"1001162" [label="(Identifier,r)"];
"1000329" [label="(Call,flush_pending_x87_faults(ctxt))"];
"1000317" [label="(Call,emulate_nm(ctxt))"];
"1000194" [label="(Call,emulate_ud(ctxt))"];
"1000278" [label="(Call,ops->get_cr(ctxt, 0))"];
"1001136" [label="(Call,reg_rmw(ctxt, VCPU_REGS_RCX))"];
"1000145" [label="(MethodParameterIn,struct x86_emulate_ctxt *ctxt)"];
"1000428" [label="(Call,emulate_ud(ctxt))"];
"1001023" [label="(Call,writeback(ctxt, &ctxt->src))"];
"1000342" [label="(Call,fetch_possible_mmx_operand(ctxt, &ctxt->src2))"];
"1000726" [label="(Call,fastop(ctxt, fop))"];
"1001147" [label="(Call,(r->end != 0 || reg_read(ctxt, VCPU_REGS_RCX) & 0x3ff) &&\n\t\t\t    (r->end == 0 || r->end != r->pos))"];
"1001126" [label="(ControlStructure,else)"];
"1001085" [label="(Call,string_addr_inc(ctxt, VCPU_REGS_RDI, &ctxt->dst))"];
"1001226" [label="(Call,writeback_registers(ctxt))"];
"1001480" [label="(MethodReturn,int)"];
"1001176" [label="(Identifier,ctxt)"];
"1000936" [label="(Call,jmp_rel(ctxt, ctxt->src.val))"];
"1001181" [label="(Identifier,ctxt)"];
"1000404" [label="(Call,emulate_ud(ctxt))"];
"1001140" [label="(Identifier,count)"];
"1001127" [label="(Call,count = ctxt->dst.count)"];
"1001134" [label="(Call,register_address_increment(ctxt, reg_rmw(ctxt, VCPU_REGS_RCX),\n\t\t\t\t-count))"];
"1001119" [label="(Call,count = ctxt->src.count)"];
"1001231" [label="(Identifier,rc)"];
"1000290" [label="(Call,ops->get_cr(ctxt, 4))"];
"1001328" [label="(Call,jmp_rel(ctxt, ctxt->src.val))"];
"1001172" [label="(Block,)"];
"1001135" [label="(Identifier,ctxt)"];
"1001155" [label="(Call,reg_read(ctxt, VCPU_REGS_RCX))"];
"1000485" [label="(Call,address_mask(ctxt, reg_read(ctxt, VCPU_REGS_RCX)))"];
"1000569" [label="(Call,segmented_read(ctxt, ctxt->src2.addr.mem,\n\t\t\t\t    &ctxt->src2.val, ctxt->src2.bytes))"];
"1000375" [label="(Call,emulator_check_intercept(ctxt, ctxt->intercept,\n\t\t\t\t\t\t      X86_ICPT_PRE_EXCEPT))"];
"1001180" [label="(Call,writeback_registers(ctxt))"];
"1001148" [label="(Call,r->end != 0 || reg_read(ctxt, VCPU_REGS_RCX) & 0x3ff)"];
"1000672" [label="(Call,emulator_check_intercept(ctxt, ctxt->intercept,\n\t\t\t\t\t      X86_ICPT_POST_MEMACCESS))"];
"1000737" [label="(Call,ctxt->execute(ctxt))"];
"1001139" [label="(Call,-count)"];
"1000798" [label="(Call,jmp_rel(ctxt, ctxt->src.val))"];
"1000846" [label="(Call,em_xchg(ctxt))"];
"1001146" [label="(ControlStructure,if ((r->end != 0 || reg_read(ctxt, VCPU_REGS_RCX) & 0x3ff) &&\n\t\t\t    (r->end == 0 || r->end != r->pos)))"];
"1001129" [label="(Call,ctxt->dst.count)"];
"1001222" [label="(ControlStructure,if (rc == X86EMUL_CONTINUE))"];
"1001070" [label="(Call,string_addr_inc(ctxt, VCPU_REGS_RSI, &ctxt->src))"];
"1000621" [label="(Call,segmented_read(ctxt, ctxt->dst.addr.mem,\n\t\t\t\t   &ctxt->dst.val, ctxt->dst.bytes))"];
"1001141" [label="(ControlStructure,if (!string_insn_completed(ctxt)))"];
"1001156" [label="(Identifier,ctxt)"];
"1000355" [label="(Call,fetch_possible_mmx_operand(ctxt, &ctxt->dst))"];
"1001159" [label="(Call,r->end == 0 || r->end != r->pos)"];
"1000523" [label="(Call,segmented_read(ctxt, ctxt->src.addr.mem,\n\t\t\t\t    ctxt->src.valptr, ctxt->src.bytes))"];
"1001227" [label="(Identifier,ctxt)"];
"1001151" [label="(Identifier,r)"];
"1000409" [label="(Call,emulate_gp(ctxt, 0))"];
"1000833" [label="(Call,reg_rmw(ctxt, VCPU_REGS_RAX))"];
"1001149" [label="(Call,r->end != 0)"];
"1001183" [label="(Identifier,EMULATION_RESTART)"];
"1000952" [label="(Call,ctxt->ops->halt(ctxt))"];
"1000297" [label="(Call,emulate_ud(ctxt))"];
"1000440" [label="(Call,ctxt->check_perm(ctxt))"];
"1001102" [label="(Block,)"];
"1001158" [label="(Literal,0x3ff)"];
"1000393" [label="(Call,ops->cpl(ctxt))"];
"1001264" [label="(Call,ops->get_dr(ctxt, ctxt->modrm_reg, &ctxt->dst.val))"];
"1001144" [label="(Identifier,ctxt)"];
"1001187" [label="(Identifier,ctxt)"];
"1000216" [label="(Call,emulate_ud(ctxt))"];
"1001242" [label="(Call,(ctxt->ops->wbinvd)(ctxt))"];
"1000911" [label="(Call,emulate_int(ctxt, ctxt->src.val))"];
"1001157" [label="(Identifier,VCPU_REGS_RCX)"];
"1000928" [label="(Call,emulate_int(ctxt, 4))"];
"1000310" [label="(Call,ops->get_cr(ctxt, 0))"];
"1001184" [label="(ControlStructure,goto done;)"];
"1001143" [label="(Call,string_insn_completed(ctxt))"];
"1001142" [label="(Call,!string_insn_completed(ctxt))"];
"1000904" [label="(Call,emulate_int(ctxt, 3))"];
"1001128" [label="(Identifier,count)"];
"1000461" [label="(Call,emulator_check_intercept(ctxt, ctxt->intercept,\n\t\t\t\t\t\t      X86_ICPT_POST_EXCEPT))"];
"1001127" -> "1001126"  [label="AST: "];
"1001127" -> "1001129"  [label="CFG: "];
"1001128" -> "1001127"  [label="AST: "];
"1001129" -> "1001127"  [label="AST: "];
"1001135" -> "1001127"  [label="CFG: "];
"1001127" -> "1001480"  [label="DDG: ctxt->dst.count"];
"1001127" -> "1001139"  [label="DDG: count"];
"1001139" -> "1001134"  [label="AST: "];
"1001139" -> "1001140"  [label="CFG: "];
"1001140" -> "1001139"  [label="AST: "];
"1001134" -> "1001139"  [label="CFG: "];
"1001139" -> "1001480"  [label="DDG: count"];
"1001139" -> "1001134"  [label="DDG: count"];
"1001119" -> "1001139"  [label="DDG: count"];
"1001134" -> "1001102"  [label="AST: "];
"1001135" -> "1001134"  [label="AST: "];
"1001136" -> "1001134"  [label="AST: "];
"1001144" -> "1001134"  [label="CFG: "];
"1001134" -> "1001480"  [label="DDG: register_address_increment(ctxt, reg_rmw(ctxt, VCPU_REGS_RCX),\n\t\t\t\t-count)"];
"1001134" -> "1001480"  [label="DDG: -count"];
"1001134" -> "1001480"  [label="DDG: reg_rmw(ctxt, VCPU_REGS_RCX)"];
"1001136" -> "1001134"  [label="DDG: ctxt"];
"1001136" -> "1001134"  [label="DDG: VCPU_REGS_RCX"];
"1000145" -> "1001134"  [label="DDG: ctxt"];
"1001134" -> "1001143"  [label="DDG: ctxt"];
"1001143" -> "1001142"  [label="AST: "];
"1001143" -> "1001144"  [label="CFG: "];
"1001144" -> "1001143"  [label="AST: "];
"1001142" -> "1001143"  [label="CFG: "];
"1001143" -> "1001480"  [label="DDG: ctxt"];
"1001143" -> "1001142"  [label="DDG: ctxt"];
"1000145" -> "1001143"  [label="DDG: ctxt"];
"1001143" -> "1001155"  [label="DDG: ctxt"];
"1001143" -> "1001180"  [label="DDG: ctxt"];
"1001143" -> "1001226"  [label="DDG: ctxt"];
"1001142" -> "1001141"  [label="AST: "];
"1001151" -> "1001142"  [label="CFG: "];
"1001187" -> "1001142"  [label="CFG: "];
"1001142" -> "1001480"  [label="DDG: !string_insn_completed(ctxt)"];
"1001142" -> "1001480"  [label="DDG: string_insn_completed(ctxt)"];
"1001155" -> "1001154"  [label="AST: "];
"1001155" -> "1001157"  [label="CFG: "];
"1001156" -> "1001155"  [label="AST: "];
"1001157" -> "1001155"  [label="AST: "];
"1001158" -> "1001155"  [label="CFG: "];
"1001155" -> "1001480"  [label="DDG: ctxt"];
"1001155" -> "1001480"  [label="DDG: VCPU_REGS_RCX"];
"1001155" -> "1001154"  [label="DDG: ctxt"];
"1001155" -> "1001154"  [label="DDG: VCPU_REGS_RCX"];
"1000145" -> "1001155"  [label="DDG: ctxt"];
"1001136" -> "1001155"  [label="DDG: VCPU_REGS_RCX"];
"1001155" -> "1001180"  [label="DDG: ctxt"];
"1001155" -> "1001226"  [label="DDG: ctxt"];
"1001154" -> "1001148"  [label="AST: "];
"1001154" -> "1001158"  [label="CFG: "];
"1001158" -> "1001154"  [label="AST: "];
"1001148" -> "1001154"  [label="CFG: "];
"1001154" -> "1001480"  [label="DDG: reg_read(ctxt, VCPU_REGS_RCX)"];
"1001154" -> "1001148"  [label="DDG: reg_read(ctxt, VCPU_REGS_RCX)"];
"1001154" -> "1001148"  [label="DDG: 0x3ff"];
"1001148" -> "1001147"  [label="AST: "];
"1001148" -> "1001149"  [label="CFG: "];
"1001149" -> "1001148"  [label="AST: "];
"1001162" -> "1001148"  [label="CFG: "];
"1001147" -> "1001148"  [label="CFG: "];
"1001148" -> "1001480"  [label="DDG: reg_read(ctxt, VCPU_REGS_RCX) & 0x3ff"];
"1001148" -> "1001480"  [label="DDG: r->end != 0"];
"1001148" -> "1001147"  [label="DDG: r->end != 0"];
"1001148" -> "1001147"  [label="DDG: reg_read(ctxt, VCPU_REGS_RCX) & 0x3ff"];
"1001149" -> "1001148"  [label="DDG: r->end"];
"1001149" -> "1001148"  [label="DDG: 0"];
"1001147" -> "1001146"  [label="AST: "];
"1001147" -> "1001159"  [label="CFG: "];
"1001159" -> "1001147"  [label="AST: "];
"1001176" -> "1001147"  [label="CFG: "];
"1001184" -> "1001147"  [label="CFG: "];
"1001147" -> "1001480"  [label="DDG: r->end != 0 || reg_read(ctxt, VCPU_REGS_RCX) & 0x3ff"];
"1001147" -> "1001480"  [label="DDG: r->end == 0 || r->end != r->pos"];
"1001147" -> "1001480"  [label="DDG: (r->end != 0 || reg_read(ctxt, VCPU_REGS_RCX) & 0x3ff) &&\n\t\t\t    (r->end == 0 || r->end != r->pos)"];
"1001159" -> "1001147"  [label="DDG: r->end == 0"];
"1001159" -> "1001147"  [label="DDG: r->end != r->pos"];
"1001180" -> "1001172"  [label="AST: "];
"1001180" -> "1001181"  [label="CFG: "];
"1001181" -> "1001180"  [label="AST: "];
"1001183" -> "1001180"  [label="CFG: "];
"1001180" -> "1001480"  [label="DDG: ctxt"];
"1001180" -> "1001480"  [label="DDG: writeback_registers(ctxt)"];
"1000145" -> "1001180"  [label="DDG: ctxt"];
"1001226" -> "1001222"  [label="AST: "];
"1001226" -> "1001227"  [label="CFG: "];
"1001227" -> "1001226"  [label="AST: "];
"1001231" -> "1001226"  [label="CFG: "];
"1001226" -> "1001480"  [label="DDG: ctxt"];
"1001226" -> "1001480"  [label="DDG: writeback_registers(ctxt)"];
"1001264" -> "1001226"  [label="DDG: ctxt"];
"1000393" -> "1001226"  [label="DDG: ctxt"];
"1000936" -> "1001226"  [label="DDG: ctxt"];
"1000928" -> "1001226"  [label="DDG: ctxt"];
"1000737" -> "1001226"  [label="DDG: ctxt"];
"1000329" -> "1001226"  [label="DDG: ctxt"];
"1000409" -> "1001226"  [label="DDG: ctxt"];
"1000672" -> "1001226"  [label="DDG: ctxt"];
"1001070" -> "1001226"  [label="DDG: ctxt"];
"1000355" -> "1001226"  [label="DDG: ctxt"];
"1000297" -> "1001226"  [label="DDG: ctxt"];
"1000485" -> "1001226"  [label="DDG: ctxt"];
"1000290" -> "1001226"  [label="DDG: ctxt"];
"1000375" -> "1001226"  [label="DDG: ctxt"];
"1000621" -> "1001226"  [label="DDG: ctxt"];
"1001023" -> "1001226"  [label="DDG: ctxt"];
"1000404" -> "1001226"  [label="DDG: ctxt"];
"1000833" -> "1001226"  [label="DDG: ctxt"];
"1000952" -> "1001226"  [label="DDG: ctxt"];
"1001044" -> "1001226"  [label="DDG: ctxt"];
"1001257" -> "1001226"  [label="DDG: ctxt"];
"1000523" -> "1001226"  [label="DDG: ctxt"];
"1000904" -> "1001226"  [label="DDG: ctxt"];
"1000342" -> "1001226"  [label="DDG: ctxt"];
"1000317" -> "1001226"  [label="DDG: ctxt"];
"1001328" -> "1001226"  [label="DDG: ctxt"];
"1000726" -> "1001226"  [label="DDG: ctxt"];
"1000216" -> "1001226"  [label="DDG: ctxt"];
"1000310" -> "1001226"  [label="DDG: ctxt"];
"1001085" -> "1001226"  [label="DDG: ctxt"];
"1000194" -> "1001226"  [label="DDG: ctxt"];
"1000264" -> "1001226"  [label="DDG: ctxt"];
"1000798" -> "1001226"  [label="DDG: ctxt"];
"1001242" -> "1001226"  [label="DDG: ctxt"];
"1000911" -> "1001226"  [label="DDG: ctxt"];
"1000569" -> "1001226"  [label="DDG: ctxt"];
"1000461" -> "1001226"  [label="DDG: ctxt"];
"1000440" -> "1001226"  [label="DDG: ctxt"];
"1000278" -> "1001226"  [label="DDG: ctxt"];
"1000428" -> "1001226"  [label="DDG: ctxt"];
"1000846" -> "1001226"  [label="DDG: ctxt"];
"1000145" -> "1001226"  [label="DDG: ctxt"];
}
