digraph "0_linux_b9dd46188edc2f0d1f37328637860bb65a771124@pointer" {
"1000199" [label="(Call,le32_to_cpu(raw_super->log_sectorsize))"];
"1000198" [label="(Call,le32_to_cpu(raw_super->log_sectorsize) >\n\t\t\t\tF2FS_MAX_LOG_SECTOR_SIZE)"];
"1000197" [label="(Call,le32_to_cpu(raw_super->log_sectorsize) >\n\t\t\t\tF2FS_MAX_LOG_SECTOR_SIZE ||\n\t\tle32_to_cpu(raw_super->log_sectorsize) <\n\t\t\t\tF2FS_MIN_LOG_SECTOR_SIZE)"];
"1000222" [label="(Call,le32_to_cpu(raw_super->log_sectors_per_block) +\n\t\tle32_to_cpu(raw_super->log_sectorsize) !=\n\t\t\tF2FS_MAX_LOG_SECTOR_SIZE)"];
"1000205" [label="(Call,le32_to_cpu(raw_super->log_sectorsize))"];
"1000204" [label="(Call,le32_to_cpu(raw_super->log_sectorsize) <\n\t\t\t\tF2FS_MIN_LOG_SECTOR_SIZE)"];
"1000215" [label="(Call,le32_to_cpu(raw_super->log_sectorsize))"];
"1000211" [label="(Call,f2fs_msg(sb, KERN_INFO, \"Invalid log sectorsize (%u)\",\n\t\t\tle32_to_cpu(raw_super->log_sectorsize)))"];
"1000228" [label="(Call,le32_to_cpu(raw_super->log_sectorsize))"];
"1000223" [label="(Call,le32_to_cpu(raw_super->log_sectors_per_block) +\n\t\tle32_to_cpu(raw_super->log_sectorsize))"];
"1000242" [label="(Call,le32_to_cpu(raw_super->log_sectorsize))"];
"1000234" [label="(Call,f2fs_msg(sb, KERN_INFO,\n\t\t\t\"Invalid log sectors per block(%u) log sectorsize(%u)\",\n\t\t\tle32_to_cpu(raw_super->log_sectors_per_block),\n\t\t\tle32_to_cpu(raw_super->log_sectorsize)))"];
"1000204" [label="(Call,le32_to_cpu(raw_super->log_sectorsize) <\n\t\t\t\tF2FS_MIN_LOG_SECTOR_SIZE)"];
"1000234" [label="(Call,f2fs_msg(sb, KERN_INFO,\n\t\t\t\"Invalid log sectors per block(%u) log sectorsize(%u)\",\n\t\t\tle32_to_cpu(raw_super->log_sectors_per_block),\n\t\t\tle32_to_cpu(raw_super->log_sectorsize)))"];
"1000238" [label="(Call,le32_to_cpu(raw_super->log_sectors_per_block))"];
"1000214" [label="(Literal,\"Invalid log sectorsize (%u)\")"];
"1000121" [label="(Call,*sb = sbi->sb)"];
"1000211" [label="(Call,f2fs_msg(sb, KERN_INFO, \"Invalid log sectorsize (%u)\",\n\t\t\tle32_to_cpu(raw_super->log_sectorsize)))"];
"1000253" [label="(Identifier,raw_super)"];
"1000198" [label="(Call,le32_to_cpu(raw_super->log_sectorsize) >\n\t\t\t\tF2FS_MAX_LOG_SECTOR_SIZE)"];
"1000213" [label="(Identifier,KERN_INFO)"];
"1000197" [label="(Call,le32_to_cpu(raw_super->log_sectorsize) >\n\t\t\t\tF2FS_MAX_LOG_SECTOR_SIZE ||\n\t\tle32_to_cpu(raw_super->log_sectorsize) <\n\t\t\t\tF2FS_MIN_LOG_SECTOR_SIZE)"];
"1000224" [label="(Call,le32_to_cpu(raw_super->log_sectors_per_block))"];
"1000233" [label="(Block,)"];
"1000229" [label="(Call,raw_super->log_sectorsize)"];
"1000232" [label="(Identifier,F2FS_MAX_LOG_SECTOR_SIZE)"];
"1000243" [label="(Call,raw_super->log_sectorsize)"];
"1000212" [label="(Identifier,sb)"];
"1000210" [label="(Block,)"];
"1000223" [label="(Call,le32_to_cpu(raw_super->log_sectors_per_block) +\n\t\tle32_to_cpu(raw_super->log_sectorsize))"];
"1000216" [label="(Call,raw_super->log_sectorsize)"];
"1000228" [label="(Call,le32_to_cpu(raw_super->log_sectorsize))"];
"1000242" [label="(Call,le32_to_cpu(raw_super->log_sectorsize))"];
"1000221" [label="(ControlStructure,if (le32_to_cpu(raw_super->log_sectors_per_block) +\n\t\tle32_to_cpu(raw_super->log_sectorsize) !=\n\t\t\tF2FS_MAX_LOG_SECTOR_SIZE))"];
"1000200" [label="(Call,raw_super->log_sectorsize)"];
"1000247" [label="(Literal,1)"];
"1000222" [label="(Call,le32_to_cpu(raw_super->log_sectors_per_block) +\n\t\tle32_to_cpu(raw_super->log_sectorsize) !=\n\t\t\tF2FS_MAX_LOG_SECTOR_SIZE)"];
"1000199" [label="(Call,le32_to_cpu(raw_super->log_sectorsize))"];
"1000220" [label="(Literal,1)"];
"1000226" [label="(Identifier,raw_super)"];
"1000209" [label="(Identifier,F2FS_MIN_LOG_SECTOR_SIZE)"];
"1000237" [label="(Literal,\"Invalid log sectors per block(%u) log sectorsize(%u)\")"];
"1000314" [label="(MethodReturn,static int)"];
"1000206" [label="(Call,raw_super->log_sectorsize)"];
"1000215" [label="(Call,le32_to_cpu(raw_super->log_sectorsize))"];
"1000236" [label="(Identifier,KERN_INFO)"];
"1000205" [label="(Call,le32_to_cpu(raw_super->log_sectorsize))"];
"1000203" [label="(Identifier,F2FS_MAX_LOG_SECTOR_SIZE)"];
"1000235" [label="(Identifier,sb)"];
"1000196" [label="(ControlStructure,if (le32_to_cpu(raw_super->log_sectorsize) >\n\t\t\t\tF2FS_MAX_LOG_SECTOR_SIZE ||\n\t\tle32_to_cpu(raw_super->log_sectorsize) <\n\t\t\t\tF2FS_MIN_LOG_SECTOR_SIZE))"];
"1000207" [label="(Identifier,raw_super)"];
"1000199" -> "1000198"  [label="AST: "];
"1000199" -> "1000200"  [label="CFG: "];
"1000200" -> "1000199"  [label="AST: "];
"1000203" -> "1000199"  [label="CFG: "];
"1000199" -> "1000198"  [label="DDG: "];
"1000199" -> "1000205"  [label="DDG: "];
"1000199" -> "1000215"  [label="DDG: "];
"1000199" -> "1000228"  [label="DDG: "];
"1000198" -> "1000197"  [label="AST: "];
"1000198" -> "1000203"  [label="CFG: "];
"1000203" -> "1000198"  [label="AST: "];
"1000207" -> "1000198"  [label="CFG: "];
"1000197" -> "1000198"  [label="CFG: "];
"1000198" -> "1000314"  [label="DDG: "];
"1000198" -> "1000197"  [label="DDG: "];
"1000198" -> "1000197"  [label="DDG: "];
"1000198" -> "1000222"  [label="DDG: "];
"1000197" -> "1000196"  [label="AST: "];
"1000197" -> "1000204"  [label="CFG: "];
"1000204" -> "1000197"  [label="AST: "];
"1000212" -> "1000197"  [label="CFG: "];
"1000226" -> "1000197"  [label="CFG: "];
"1000197" -> "1000314"  [label="DDG: "];
"1000197" -> "1000314"  [label="DDG: "];
"1000197" -> "1000314"  [label="DDG: "];
"1000204" -> "1000197"  [label="DDG: "];
"1000204" -> "1000197"  [label="DDG: "];
"1000222" -> "1000221"  [label="AST: "];
"1000222" -> "1000232"  [label="CFG: "];
"1000223" -> "1000222"  [label="AST: "];
"1000232" -> "1000222"  [label="AST: "];
"1000235" -> "1000222"  [label="CFG: "];
"1000253" -> "1000222"  [label="CFG: "];
"1000222" -> "1000314"  [label="DDG: "];
"1000222" -> "1000314"  [label="DDG: "];
"1000222" -> "1000314"  [label="DDG: "];
"1000224" -> "1000222"  [label="DDG: "];
"1000228" -> "1000222"  [label="DDG: "];
"1000205" -> "1000204"  [label="AST: "];
"1000205" -> "1000206"  [label="CFG: "];
"1000206" -> "1000205"  [label="AST: "];
"1000209" -> "1000205"  [label="CFG: "];
"1000205" -> "1000204"  [label="DDG: "];
"1000205" -> "1000215"  [label="DDG: "];
"1000205" -> "1000228"  [label="DDG: "];
"1000204" -> "1000209"  [label="CFG: "];
"1000209" -> "1000204"  [label="AST: "];
"1000204" -> "1000314"  [label="DDG: "];
"1000215" -> "1000211"  [label="AST: "];
"1000215" -> "1000216"  [label="CFG: "];
"1000216" -> "1000215"  [label="AST: "];
"1000211" -> "1000215"  [label="CFG: "];
"1000215" -> "1000314"  [label="DDG: "];
"1000215" -> "1000211"  [label="DDG: "];
"1000211" -> "1000210"  [label="AST: "];
"1000212" -> "1000211"  [label="AST: "];
"1000213" -> "1000211"  [label="AST: "];
"1000214" -> "1000211"  [label="AST: "];
"1000220" -> "1000211"  [label="CFG: "];
"1000211" -> "1000314"  [label="DDG: "];
"1000211" -> "1000314"  [label="DDG: "];
"1000211" -> "1000314"  [label="DDG: "];
"1000211" -> "1000314"  [label="DDG: "];
"1000121" -> "1000211"  [label="DDG: "];
"1000228" -> "1000223"  [label="AST: "];
"1000228" -> "1000229"  [label="CFG: "];
"1000229" -> "1000228"  [label="AST: "];
"1000223" -> "1000228"  [label="CFG: "];
"1000228" -> "1000314"  [label="DDG: "];
"1000228" -> "1000223"  [label="DDG: "];
"1000228" -> "1000242"  [label="DDG: "];
"1000224" -> "1000223"  [label="AST: "];
"1000232" -> "1000223"  [label="CFG: "];
"1000223" -> "1000314"  [label="DDG: "];
"1000223" -> "1000314"  [label="DDG: "];
"1000224" -> "1000223"  [label="DDG: "];
"1000242" -> "1000234"  [label="AST: "];
"1000242" -> "1000243"  [label="CFG: "];
"1000243" -> "1000242"  [label="AST: "];
"1000234" -> "1000242"  [label="CFG: "];
"1000242" -> "1000314"  [label="DDG: "];
"1000242" -> "1000234"  [label="DDG: "];
"1000234" -> "1000233"  [label="AST: "];
"1000235" -> "1000234"  [label="AST: "];
"1000236" -> "1000234"  [label="AST: "];
"1000237" -> "1000234"  [label="AST: "];
"1000238" -> "1000234"  [label="AST: "];
"1000247" -> "1000234"  [label="CFG: "];
"1000234" -> "1000314"  [label="DDG: "];
"1000234" -> "1000314"  [label="DDG: "];
"1000234" -> "1000314"  [label="DDG: "];
"1000234" -> "1000314"  [label="DDG: "];
"1000234" -> "1000314"  [label="DDG: "];
"1000121" -> "1000234"  [label="DDG: "];
"1000238" -> "1000234"  [label="DDG: "];
}
