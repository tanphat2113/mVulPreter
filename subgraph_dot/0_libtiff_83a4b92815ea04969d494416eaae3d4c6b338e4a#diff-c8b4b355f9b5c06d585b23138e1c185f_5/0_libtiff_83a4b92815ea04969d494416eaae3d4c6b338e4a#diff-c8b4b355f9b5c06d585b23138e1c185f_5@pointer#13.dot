digraph "0_libtiff_83a4b92815ea04969d494416eaae3d4c6b338e4a#diff-c8b4b355f9b5c06d585b23138e1c185f_5@pointer" {
"1000751" [label="(Call,dump->infile != NULL)"];
"1000756" [label="(Call,dump_info (dump->infile, dump->format, \"\", \n                 \"Tilesize: %u, Number of Tiles: %u, Tile row size: %u\",\n                 tlsize, ntiles, tile_rowsize))"];
"1001154" [label="(Call,dump->infile != NULL)"];
"1001153" [label="(Call,(dump->infile != NULL) && (dump->level == 2))"];
"1001165" [label="(Call,dump_info  (dump->infile, dump->format, \"loadImage\", \n                \"Image width %d, length %d, Raw image data, %4d bytes\",\n                width, length,  buffsize))"];
"1001177" [label="(Call,dump_info  (dump->infile, dump->format, \"\", \n                \"Bits per sample %d, Samples per pixel %d\", bps, spp))"];
"1001197" [label="(Call,dump_buffer(dump->infile, dump->format, 1, scanlinesize, \n                  i, read_buff + (i * scanlinesize)))"];
"1001195" [label="(Call,i++)"];
"1001192" [label="(Call,i < length)"];
"1001209" [label="(Call,i * scanlinesize)"];
"1001207" [label="(Call,read_buff + (i * scanlinesize))"];
"1001159" [label="(Call,dump->level == 2)"];
"1000758" [label="(Identifier,dump)"];
"1000756" [label="(Call,dump_info (dump->infile, dump->format, \"\", \n                 \"Tilesize: %u, Number of Tiles: %u, Tile row size: %u\",\n                 tlsize, ntiles, tile_rowsize))"];
"1001210" [label="(Identifier,i)"];
"1000765" [label="(Identifier,tlsize)"];
"1001213" [label="(Literal,0)"];
"1000857" [label="(Call,length * width * spp * bps)"];
"1001186" [label="(Identifier,bps)"];
"1001184" [label="(Literal,\"\")"];
"1001206" [label="(Identifier,i)"];
"1000181" [label="(Call,width = 0)"];
"1001179" [label="(Identifier,dump)"];
"1000750" [label="(ControlStructure,if (dump->infile != NULL))"];
"1000757" [label="(Call,dump->infile)"];
"1001177" [label="(Call,dump_info  (dump->infile, dump->format, \"\", \n                \"Bits per sample %d, Samples per pixel %d\", bps, spp))"];
"1001181" [label="(Call,dump->format)"];
"1000420" [label="(Call,scanlinesize = TIFFScanlineSize(in))"];
"1001166" [label="(Call,dump->infile)"];
"1001199" [label="(Identifier,dump)"];
"1000752" [label="(Call,dump->infile)"];
"1001187" [label="(Identifier,spp)"];
"1001189" [label="(Call,i = 0)"];
"1000908" [label="(Identifier,input_compression)"];
"1001167" [label="(Identifier,dump)"];
"1001190" [label="(Identifier,i)"];
"1000159" [label="(Call,spp = 0)"];
"1000755" [label="(Identifier,NULL)"];
"1000875" [label="(Call,spp * bps)"];
"1001158" [label="(Identifier,NULL)"];
"1001176" [label="(Identifier,buffsize)"];
"1001208" [label="(Identifier,read_buff)"];
"1000185" [label="(Call,length = 0)"];
"1001204" [label="(Literal,1)"];
"1001154" [label="(Call,dump->infile != NULL)"];
"1001172" [label="(Literal,\"loadImage\")"];
"1000632" [label="(Call,spp == 0)"];
"1001038" [label="(Call,read_buff[buffsize+1] = 0)"];
"1001045" [label="(Call,read_buff[buffsize+2] = 0)"];
"1001201" [label="(Call,dump->format)"];
"1001198" [label="(Call,dump->infile)"];
"1001155" [label="(Call,dump->infile)"];
"1001084" [label="(Call,readSeparateStripsIntoBuffer(in, read_buff, length, width, spp, dump))"];
"1000861" [label="(Call,spp * bps)"];
"1001107" [label="(Call,readContigTilesIntoBuffer(in, read_buff, length, width, tw, tl, spp, bps))"];
"1000766" [label="(Identifier,ntiles)"];
"1001161" [label="(Identifier,dump)"];
"1000767" [label="(Identifier,tile_rowsize)"];
"1001209" [label="(Call,i * scanlinesize)"];
"1000715" [label="(Call,ntiles * tl * tile_rowsize)"];
"1000629" [label="(Call,bps == 0)"];
"1001033" [label="(Call,read_buff[buffsize] = 0)"];
"1000986" [label="(Call,buffsize > 0xFFFFFFFFU - 3)"];
"1001214" [label="(MethodReturn,RET)"];
"1000893" [label="(Call,dump_info (dump->infile, dump->format, \"\",\n                 \"Stripsize: %u, Number of Strips: %u, Rows per Strip: %u, Scanline size: %u\",\n\t\t stsize, nstrips, rowsperstrip, scanlinesize))"];
"1001164" [label="(Block,)"];
"1000859" [label="(Call,width * spp * bps)"];
"1001211" [label="(Identifier,scanlinesize)"];
"1000764" [label="(Literal,\"Tilesize: %u, Number of Tiles: %u, Tile row size: %u\")"];
"1000698" [label="(Call,tlsize != (buffsize / ntiles))"];
"1000981" [label="(Call,prev_readsize < buffsize)"];
"1000958" [label="(Call,buffsize > 0xFFFFFFFFU - 3)"];
"1001153" [label="(Call,(dump->infile != NULL) && (dump->level == 2))"];
"1000733" [label="(Call,tl / tile_rowsize)"];
"1000729" [label="(Call,ntiles != (buffsize / tl / tile_rowsize))"];
"1001173" [label="(Literal,\"Image width %d, length %d, Raw image data, %4d bytes\")"];
"1000763" [label="(Literal,\"\")"];
"1000743" [label="(Call,TIFFError(\"loadImage\",\n\t        \"Tilesize %u is too small, using ntiles * tilelength * tilerowsize %lu\",\n                tlsize, (unsigned long)buffsize))"];
"1000717" [label="(Call,tl * tile_rowsize)"];
"1001178" [label="(Call,dump->infile)"];
"1000760" [label="(Call,dump->format)"];
"1000873" [label="(Call,width * spp * bps)"];
"1001193" [label="(Identifier,i)"];
"1000871" [label="(Call,length * width * spp * bps)"];
"1001205" [label="(Identifier,scanlinesize)"];
"1001152" [label="(ControlStructure,if ((dump->infile != NULL) && (dump->level == 2)))"];
"1001127" [label="(Call,readSeparateTilesIntoBuffer(in, read_buff, length, width, tw, tl, spp, bps))"];
"1000888" [label="(Call,dump->infile != NULL)"];
"1001165" [label="(Call,dump_info  (dump->infile, dump->format, \"loadImage\", \n                \"Image width %d, length %d, Raw image data, %4d bytes\",\n                width, length,  buffsize))"];
"1001174" [label="(Identifier,width)"];
"1000751" [label="(Call,dump->infile != NULL)"];
"1001188" [label="(ControlStructure,for (i = 0; i < length; i++))"];
"1001169" [label="(Call,dump->format)"];
"1001175" [label="(Identifier,length)"];
"1001207" [label="(Call,read_buff + (i * scanlinesize))"];
"1001194" [label="(Identifier,length)"];
"1001192" [label="(Call,i < length)"];
"1001070" [label="(Call,readContigStripsIntoBuffer(in, read_buff))"];
"1001196" [label="(Identifier,i)"];
"1001197" [label="(Call,dump_buffer(dump->infile, dump->format, 1, scanlinesize, \n                  i, read_buff + (i * scanlinesize)))"];
"1001185" [label="(Literal,\"Bits per sample %d, Samples per pixel %d\")"];
"1001195" [label="(Call,i++)"];
"1000751" -> "1000750"  [label="AST: "];
"1000751" -> "1000755"  [label="CFG: "];
"1000752" -> "1000751"  [label="AST: "];
"1000755" -> "1000751"  [label="AST: "];
"1000758" -> "1000751"  [label="CFG: "];
"1000908" -> "1000751"  [label="CFG: "];
"1000751" -> "1001214"  [label="DDG: "];
"1000751" -> "1001214"  [label="DDG: "];
"1000751" -> "1001214"  [label="DDG: "];
"1000751" -> "1000756"  [label="DDG: "];
"1000751" -> "1001154"  [label="DDG: "];
"1000751" -> "1001154"  [label="DDG: "];
"1000756" -> "1000750"  [label="AST: "];
"1000756" -> "1000767"  [label="CFG: "];
"1000757" -> "1000756"  [label="AST: "];
"1000760" -> "1000756"  [label="AST: "];
"1000763" -> "1000756"  [label="AST: "];
"1000764" -> "1000756"  [label="AST: "];
"1000765" -> "1000756"  [label="AST: "];
"1000766" -> "1000756"  [label="AST: "];
"1000767" -> "1000756"  [label="AST: "];
"1000908" -> "1000756"  [label="CFG: "];
"1000756" -> "1001214"  [label="DDG: "];
"1000756" -> "1001214"  [label="DDG: "];
"1000756" -> "1001214"  [label="DDG: "];
"1000756" -> "1001214"  [label="DDG: "];
"1000756" -> "1001214"  [label="DDG: "];
"1000756" -> "1001214"  [label="DDG: "];
"1000698" -> "1000756"  [label="DDG: "];
"1000743" -> "1000756"  [label="DDG: "];
"1000715" -> "1000756"  [label="DDG: "];
"1000729" -> "1000756"  [label="DDG: "];
"1000733" -> "1000756"  [label="DDG: "];
"1000717" -> "1000756"  [label="DDG: "];
"1000756" -> "1001154"  [label="DDG: "];
"1000756" -> "1001165"  [label="DDG: "];
"1001154" -> "1001153"  [label="AST: "];
"1001154" -> "1001158"  [label="CFG: "];
"1001155" -> "1001154"  [label="AST: "];
"1001158" -> "1001154"  [label="AST: "];
"1001161" -> "1001154"  [label="CFG: "];
"1001153" -> "1001154"  [label="CFG: "];
"1001154" -> "1001214"  [label="DDG: "];
"1001154" -> "1001214"  [label="DDG: "];
"1001154" -> "1001153"  [label="DDG: "];
"1001154" -> "1001153"  [label="DDG: "];
"1000893" -> "1001154"  [label="DDG: "];
"1000888" -> "1001154"  [label="DDG: "];
"1000888" -> "1001154"  [label="DDG: "];
"1001154" -> "1001165"  [label="DDG: "];
"1001153" -> "1001152"  [label="AST: "];
"1001153" -> "1001159"  [label="CFG: "];
"1001159" -> "1001153"  [label="AST: "];
"1001167" -> "1001153"  [label="CFG: "];
"1001213" -> "1001153"  [label="CFG: "];
"1001153" -> "1001214"  [label="DDG: "];
"1001153" -> "1001214"  [label="DDG: "];
"1001153" -> "1001214"  [label="DDG: "];
"1001159" -> "1001153"  [label="DDG: "];
"1001159" -> "1001153"  [label="DDG: "];
"1001165" -> "1001164"  [label="AST: "];
"1001165" -> "1001176"  [label="CFG: "];
"1001166" -> "1001165"  [label="AST: "];
"1001169" -> "1001165"  [label="AST: "];
"1001172" -> "1001165"  [label="AST: "];
"1001173" -> "1001165"  [label="AST: "];
"1001174" -> "1001165"  [label="AST: "];
"1001175" -> "1001165"  [label="AST: "];
"1001176" -> "1001165"  [label="AST: "];
"1001179" -> "1001165"  [label="CFG: "];
"1001165" -> "1001214"  [label="DDG: "];
"1001165" -> "1001214"  [label="DDG: "];
"1001165" -> "1001214"  [label="DDG: "];
"1000893" -> "1001165"  [label="DDG: "];
"1000873" -> "1001165"  [label="DDG: "];
"1001084" -> "1001165"  [label="DDG: "];
"1001084" -> "1001165"  [label="DDG: "];
"1001107" -> "1001165"  [label="DDG: "];
"1001107" -> "1001165"  [label="DDG: "];
"1000859" -> "1001165"  [label="DDG: "];
"1001127" -> "1001165"  [label="DDG: "];
"1001127" -> "1001165"  [label="DDG: "];
"1000181" -> "1001165"  [label="DDG: "];
"1000857" -> "1001165"  [label="DDG: "];
"1000871" -> "1001165"  [label="DDG: "];
"1000185" -> "1001165"  [label="DDG: "];
"1000981" -> "1001165"  [label="DDG: "];
"1000986" -> "1001165"  [label="DDG: "];
"1000958" -> "1001165"  [label="DDG: "];
"1001165" -> "1001177"  [label="DDG: "];
"1001165" -> "1001177"  [label="DDG: "];
"1001165" -> "1001192"  [label="DDG: "];
"1001177" -> "1001164"  [label="AST: "];
"1001177" -> "1001187"  [label="CFG: "];
"1001178" -> "1001177"  [label="AST: "];
"1001181" -> "1001177"  [label="AST: "];
"1001184" -> "1001177"  [label="AST: "];
"1001185" -> "1001177"  [label="AST: "];
"1001186" -> "1001177"  [label="AST: "];
"1001187" -> "1001177"  [label="AST: "];
"1001190" -> "1001177"  [label="CFG: "];
"1001177" -> "1001214"  [label="DDG: "];
"1001177" -> "1001214"  [label="DDG: "];
"1001177" -> "1001214"  [label="DDG: "];
"1001177" -> "1001214"  [label="DDG: "];
"1001177" -> "1001214"  [label="DDG: "];
"1000629" -> "1001177"  [label="DDG: "];
"1001127" -> "1001177"  [label="DDG: "];
"1001127" -> "1001177"  [label="DDG: "];
"1001107" -> "1001177"  [label="DDG: "];
"1001107" -> "1001177"  [label="DDG: "];
"1000861" -> "1001177"  [label="DDG: "];
"1000861" -> "1001177"  [label="DDG: "];
"1000875" -> "1001177"  [label="DDG: "];
"1000875" -> "1001177"  [label="DDG: "];
"1000632" -> "1001177"  [label="DDG: "];
"1001084" -> "1001177"  [label="DDG: "];
"1000159" -> "1001177"  [label="DDG: "];
"1001177" -> "1001197"  [label="DDG: "];
"1001177" -> "1001197"  [label="DDG: "];
"1001197" -> "1001188"  [label="AST: "];
"1001197" -> "1001207"  [label="CFG: "];
"1001198" -> "1001197"  [label="AST: "];
"1001201" -> "1001197"  [label="AST: "];
"1001204" -> "1001197"  [label="AST: "];
"1001205" -> "1001197"  [label="AST: "];
"1001206" -> "1001197"  [label="AST: "];
"1001207" -> "1001197"  [label="AST: "];
"1001196" -> "1001197"  [label="CFG: "];
"1001197" -> "1001214"  [label="DDG: "];
"1001197" -> "1001214"  [label="DDG: "];
"1001197" -> "1001214"  [label="DDG: "];
"1001197" -> "1001214"  [label="DDG: "];
"1001197" -> "1001214"  [label="DDG: "];
"1001197" -> "1001195"  [label="DDG: "];
"1001209" -> "1001197"  [label="DDG: "];
"1001209" -> "1001197"  [label="DDG: "];
"1001127" -> "1001197"  [label="DDG: "];
"1001107" -> "1001197"  [label="DDG: "];
"1001084" -> "1001197"  [label="DDG: "];
"1001070" -> "1001197"  [label="DDG: "];
"1001045" -> "1001197"  [label="DDG: "];
"1001033" -> "1001197"  [label="DDG: "];
"1001038" -> "1001197"  [label="DDG: "];
"1001197" -> "1001209"  [label="DDG: "];
"1001195" -> "1001188"  [label="AST: "];
"1001195" -> "1001196"  [label="CFG: "];
"1001196" -> "1001195"  [label="AST: "];
"1001193" -> "1001195"  [label="CFG: "];
"1001195" -> "1001192"  [label="DDG: "];
"1001192" -> "1001188"  [label="AST: "];
"1001192" -> "1001194"  [label="CFG: "];
"1001193" -> "1001192"  [label="AST: "];
"1001194" -> "1001192"  [label="AST: "];
"1001199" -> "1001192"  [label="CFG: "];
"1001213" -> "1001192"  [label="CFG: "];
"1001192" -> "1001214"  [label="DDG: "];
"1001192" -> "1001214"  [label="DDG: "];
"1001192" -> "1001214"  [label="DDG: "];
"1001189" -> "1001192"  [label="DDG: "];
"1001192" -> "1001209"  [label="DDG: "];
"1001209" -> "1001207"  [label="AST: "];
"1001209" -> "1001211"  [label="CFG: "];
"1001210" -> "1001209"  [label="AST: "];
"1001211" -> "1001209"  [label="AST: "];
"1001207" -> "1001209"  [label="CFG: "];
"1001209" -> "1001207"  [label="DDG: "];
"1001209" -> "1001207"  [label="DDG: "];
"1000420" -> "1001209"  [label="DDG: "];
"1000893" -> "1001209"  [label="DDG: "];
"1001208" -> "1001207"  [label="AST: "];
"1001207" -> "1001214"  [label="DDG: "];
"1001207" -> "1001214"  [label="DDG: "];
"1001127" -> "1001207"  [label="DDG: "];
"1001107" -> "1001207"  [label="DDG: "];
"1001084" -> "1001207"  [label="DDG: "];
"1001070" -> "1001207"  [label="DDG: "];
"1001045" -> "1001207"  [label="DDG: "];
"1001033" -> "1001207"  [label="DDG: "];
"1001038" -> "1001207"  [label="DDG: "];
}
