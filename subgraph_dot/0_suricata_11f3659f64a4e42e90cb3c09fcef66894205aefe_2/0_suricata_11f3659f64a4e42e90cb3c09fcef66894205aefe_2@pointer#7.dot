digraph "0_suricata_11f3659f64a4e42e90cb3c09fcef66894205aefe_2@pointer" {
"1000115" [label="(MethodParameterIn,PacketQueue *pq)"];
"1000202" [label="(Call,DecodeTunnel(tv, dtv, p, GET_PKT_DATA(p),\n                        GET_PKT_LEN(p), pq, proto))"];
"1000200" [label="(Call,ret = DecodeTunnel(tv, dtv, p, GET_PKT_DATA(p),\n                        GET_PKT_LEN(p), pq, proto))"];
"1000215" [label="(Call,ret != TM_ECODE_OK)"];
"1000214" [label="(Call,unlikely(ret != TM_ECODE_OK))"];
"1000213" [label="(Call,unlikely(ret != TM_ECODE_OK) ||\n            (proto == DECODE_TUNNEL_IPV6_TEREDO && (p->flags & PKT_IS_INVALID)))"];
"1000219" [label="(Call,proto == DECODE_TUNNEL_IPV6_TEREDO)"];
"1000218" [label="(Call,proto == DECODE_TUNNEL_IPV6_TEREDO && (p->flags & PKT_IS_INVALID))"];
"1000235" [label="(Call,UNSET_TUNNEL_PKT(p))"];
"1000237" [label="(Call,TmqhOutputPacketpool(tv, p))"];
"1000245" [label="(Call,TUNNEL_INCR_PKT_TPR(p))"];
"1000249" [label="(Call,SCReturnPtr(p, \"Packet\"))"];
"1000212" [label="(ControlStructure,if (unlikely(ret != TM_ECODE_OK) ||\n            (proto == DECODE_TUNNEL_IPV6_TEREDO && (p->flags & PKT_IS_INVALID))))"];
"1000249" [label="(Call,SCReturnPtr(p, \"Packet\"))"];
"1000215" [label="(Call,ret != TM_ECODE_OK)"];
"1000203" [label="(Identifier,tv)"];
"1000239" [label="(Identifier,p)"];
"1000248" [label="(Identifier,parent)"];
"1000208" [label="(Call,GET_PKT_LEN(p))"];
"1000218" [label="(Call,proto == DECODE_TUNNEL_IPV6_TEREDO && (p->flags & PKT_IS_INVALID))"];
"1000221" [label="(Identifier,DECODE_TUNNEL_IPV6_TEREDO)"];
"1000229" [label="(Literal,\"tunnel packet is invalid\")"];
"1000116" [label="(Block,)"];
"1000244" [label="(Identifier,parent)"];
"1000236" [label="(Identifier,p)"];
"1000222" [label="(Call,p->flags & PKT_IS_INVALID)"];
"1000241" [label="(Identifier,NULL)"];
"1000251" [label="(Literal,\"Packet\")"];
"1000210" [label="(Identifier,pq)"];
"1000219" [label="(Call,proto == DECODE_TUNNEL_IPV6_TEREDO)"];
"1000200" [label="(Call,ret = DecodeTunnel(tv, dtv, p, GET_PKT_DATA(p),\n                        GET_PKT_LEN(p), pq, proto))"];
"1000216" [label="(Identifier,ret)"];
"1000246" [label="(Identifier,p)"];
"1000202" [label="(Call,DecodeTunnel(tv, dtv, p, GET_PKT_DATA(p),\n                        GET_PKT_LEN(p), pq, proto))"];
"1000217" [label="(Identifier,TM_ECODE_OK)"];
"1000235" [label="(Call,UNSET_TUNNEL_PKT(p))"];
"1000205" [label="(Identifier,p)"];
"1000109" [label="(MethodParameterIn,ThreadVars *tv)"];
"1000252" [label="(MethodReturn,Packet *)"];
"1000211" [label="(Identifier,proto)"];
"1000237" [label="(Call,TmqhOutputPacketpool(tv, p))"];
"1000227" [label="(Block,)"];
"1000245" [label="(Call,TUNNEL_INCR_PKT_TPR(p))"];
"1000115" [label="(MethodParameterIn,PacketQueue *pq)"];
"1000224" [label="(Identifier,p)"];
"1000213" [label="(Call,unlikely(ret != TM_ECODE_OK) ||\n            (proto == DECODE_TUNNEL_IPV6_TEREDO && (p->flags & PKT_IS_INVALID)))"];
"1000214" [label="(Call,unlikely(ret != TM_ECODE_OK))"];
"1000220" [label="(Identifier,proto)"];
"1000238" [label="(Identifier,tv)"];
"1000201" [label="(Identifier,ret)"];
"1000204" [label="(Identifier,dtv)"];
"1000110" [label="(MethodParameterIn,DecodeThreadVars *dtv)"];
"1000114" [label="(MethodParameterIn,enum DecodeTunnelProto proto)"];
"1000250" [label="(Identifier,p)"];
"1000206" [label="(Call,GET_PKT_DATA(p))"];
"1000115" -> "1000108"  [label="AST: "];
"1000115" -> "1000252"  [label="DDG: "];
"1000115" -> "1000202"  [label="DDG: "];
"1000202" -> "1000200"  [label="AST: "];
"1000202" -> "1000211"  [label="CFG: "];
"1000203" -> "1000202"  [label="AST: "];
"1000204" -> "1000202"  [label="AST: "];
"1000205" -> "1000202"  [label="AST: "];
"1000206" -> "1000202"  [label="AST: "];
"1000208" -> "1000202"  [label="AST: "];
"1000210" -> "1000202"  [label="AST: "];
"1000211" -> "1000202"  [label="AST: "];
"1000200" -> "1000202"  [label="CFG: "];
"1000202" -> "1000252"  [label="DDG: "];
"1000202" -> "1000252"  [label="DDG: "];
"1000202" -> "1000252"  [label="DDG: "];
"1000202" -> "1000252"  [label="DDG: "];
"1000202" -> "1000252"  [label="DDG: "];
"1000202" -> "1000252"  [label="DDG: "];
"1000202" -> "1000200"  [label="DDG: "];
"1000202" -> "1000200"  [label="DDG: "];
"1000202" -> "1000200"  [label="DDG: "];
"1000202" -> "1000200"  [label="DDG: "];
"1000202" -> "1000200"  [label="DDG: "];
"1000202" -> "1000200"  [label="DDG: "];
"1000202" -> "1000200"  [label="DDG: "];
"1000109" -> "1000202"  [label="DDG: "];
"1000110" -> "1000202"  [label="DDG: "];
"1000208" -> "1000202"  [label="DDG: "];
"1000206" -> "1000202"  [label="DDG: "];
"1000114" -> "1000202"  [label="DDG: "];
"1000202" -> "1000219"  [label="DDG: "];
"1000202" -> "1000235"  [label="DDG: "];
"1000202" -> "1000237"  [label="DDG: "];
"1000202" -> "1000245"  [label="DDG: "];
"1000200" -> "1000116"  [label="AST: "];
"1000201" -> "1000200"  [label="AST: "];
"1000216" -> "1000200"  [label="CFG: "];
"1000200" -> "1000252"  [label="DDG: "];
"1000200" -> "1000215"  [label="DDG: "];
"1000215" -> "1000214"  [label="AST: "];
"1000215" -> "1000217"  [label="CFG: "];
"1000216" -> "1000215"  [label="AST: "];
"1000217" -> "1000215"  [label="AST: "];
"1000214" -> "1000215"  [label="CFG: "];
"1000215" -> "1000252"  [label="DDG: "];
"1000215" -> "1000252"  [label="DDG: "];
"1000215" -> "1000214"  [label="DDG: "];
"1000215" -> "1000214"  [label="DDG: "];
"1000214" -> "1000213"  [label="AST: "];
"1000220" -> "1000214"  [label="CFG: "];
"1000213" -> "1000214"  [label="CFG: "];
"1000214" -> "1000252"  [label="DDG: "];
"1000214" -> "1000213"  [label="DDG: "];
"1000213" -> "1000212"  [label="AST: "];
"1000213" -> "1000218"  [label="CFG: "];
"1000218" -> "1000213"  [label="AST: "];
"1000229" -> "1000213"  [label="CFG: "];
"1000244" -> "1000213"  [label="CFG: "];
"1000213" -> "1000252"  [label="DDG: "];
"1000213" -> "1000252"  [label="DDG: "];
"1000213" -> "1000252"  [label="DDG: "];
"1000218" -> "1000213"  [label="DDG: "];
"1000218" -> "1000213"  [label="DDG: "];
"1000219" -> "1000218"  [label="AST: "];
"1000219" -> "1000221"  [label="CFG: "];
"1000220" -> "1000219"  [label="AST: "];
"1000221" -> "1000219"  [label="AST: "];
"1000224" -> "1000219"  [label="CFG: "];
"1000218" -> "1000219"  [label="CFG: "];
"1000219" -> "1000252"  [label="DDG: "];
"1000219" -> "1000252"  [label="DDG: "];
"1000219" -> "1000218"  [label="DDG: "];
"1000219" -> "1000218"  [label="DDG: "];
"1000114" -> "1000219"  [label="DDG: "];
"1000218" -> "1000222"  [label="CFG: "];
"1000222" -> "1000218"  [label="AST: "];
"1000218" -> "1000252"  [label="DDG: "];
"1000218" -> "1000252"  [label="DDG: "];
"1000222" -> "1000218"  [label="DDG: "];
"1000222" -> "1000218"  [label="DDG: "];
"1000235" -> "1000227"  [label="AST: "];
"1000235" -> "1000236"  [label="CFG: "];
"1000236" -> "1000235"  [label="AST: "];
"1000238" -> "1000235"  [label="CFG: "];
"1000235" -> "1000252"  [label="DDG: "];
"1000235" -> "1000237"  [label="DDG: "];
"1000237" -> "1000227"  [label="AST: "];
"1000237" -> "1000239"  [label="CFG: "];
"1000238" -> "1000237"  [label="AST: "];
"1000239" -> "1000237"  [label="AST: "];
"1000241" -> "1000237"  [label="CFG: "];
"1000237" -> "1000252"  [label="DDG: "];
"1000237" -> "1000252"  [label="DDG: "];
"1000109" -> "1000237"  [label="DDG: "];
"1000237" -> "1000245"  [label="DDG: "];
"1000245" -> "1000116"  [label="AST: "];
"1000245" -> "1000246"  [label="CFG: "];
"1000246" -> "1000245"  [label="AST: "];
"1000248" -> "1000245"  [label="CFG: "];
"1000245" -> "1000252"  [label="DDG: "];
"1000245" -> "1000249"  [label="DDG: "];
"1000249" -> "1000116"  [label="AST: "];
"1000249" -> "1000251"  [label="CFG: "];
"1000250" -> "1000249"  [label="AST: "];
"1000251" -> "1000249"  [label="AST: "];
"1000252" -> "1000249"  [label="CFG: "];
"1000249" -> "1000252"  [label="DDG: "];
"1000249" -> "1000252"  [label="DDG: "];
}
