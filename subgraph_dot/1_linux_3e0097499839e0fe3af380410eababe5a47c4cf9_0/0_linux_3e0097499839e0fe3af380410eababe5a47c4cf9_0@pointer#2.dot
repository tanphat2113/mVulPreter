digraph "0_linux_3e0097499839e0fe3af380410eababe5a47c4cf9_0@pointer" {
"1000750" [label="(Call,put_user((int) sfp->keep_orphan, ip))"];
"1000751" [label="(Call,(int) sfp->keep_orphan)"];
"1000118" [label="(Call,*ip = p)"];
"1000112" [label="(Call,*p = (void __user *)arg)"];
"1000114" [label="(Call,(void __user *)arg)"];
"1000109" [label="(MethodParameterIn,unsigned long arg)"];
"1000749" [label="(Return,return put_user((int) sfp->keep_orphan, ip);)"];
"1000116" [label="(Identifier,arg)"];
"1000753" [label="(Call,sfp->keep_orphan)"];
"1000971" [label="(Call,blk_trace_setup(sdp->device->request_queue,\n\t\t\t\t       sdp->disk->disk_name,\n\t\t\t\t       MKDEV(SCSI_GENERIC_MAJOR, sdp->index),\n\t\t\t\t       NULL, p))"];
"1000734" [label="(Call,get_user(val, ip))"];
"1000906" [label="(Call,*siocp = p)"];
"1000610" [label="(Call,get_user(val, ip))"];
"1000756" [label="(Identifier,ip)"];
"1000114" [label="(Call,(void __user *)arg)"];
"1000801" [label="(Call,put_user(val, ip))"];
"1000597" [label="(Call,put_user(val, ip))"];
"1000118" [label="(Call,*ip = p)"];
"1000750" [label="(Call,put_user((int) sfp->keep_orphan, ip))"];
"1000724" [label="(Call,put_user((int) sfp->cmd_q, ip))"];
"1000877" [label="(Call,put_user(sdp->device->host->hostt->emulated, ip))"];
"1000492" [label="(Call,get_user(val, ip))"];
"1000788" [label="(Call,put_user(sg_version_num, ip))"];
"1000760" [label="(Call,get_user(val, ip))"];
"1000807" [label="(Call,access_ok(VERIFY_WRITE, p, SZ_SG_REQ_INFO * SG_MAX_QUEUE))"];
"1000929" [label="(Call,sg_scsi_ioctl(sdp->device->request_queue, NULL, filp->f_mode, p))"];
"1000119" [label="(Identifier,ip)"];
"1000120" [label="(Identifier,p)"];
"1000110" [label="(Block,)"];
"1000699" [label="(Call,put_user(val, ip))"];
"1001060" [label="(MethodReturn,RET)"];
"1000943" [label="(Call,get_user(val, ip))"];
"1000189" [label="(Call,access_ok(VERIFY_WRITE, p, SZ_SG_IO_HDR))"];
"1000112" [label="(Call,*p = (void __user *)arg)"];
"1000749" [label="(Return,return put_user((int) sfp->keep_orphan, ip);)"];
"1000346" [label="(Call,put_user((int) sdp->device->host->unchecked_isa_dma, ip))"];
"1000961" [label="(Call,put_user(max_sectors_bytes(sdp->device->request_queue),\n\t\t\t\tip))"];
"1000113" [label="(Identifier,p)"];
"1000287" [label="(Call,get_user(val, ip))"];
"1000132" [label="(Identifier,sfp)"];
"1000705" [label="(Call,get_user(val, ip))"];
"1000109" [label="(MethodParameterIn,unsigned long arg)"];
"1000360" [label="(Call,access_ok(VERIFY_WRITE, p, sizeof (sg_scsi_id_t)))"];
"1001054" [label="(Call,scsi_ioctl(sdp->device, cmd_in, p))"];
"1000602" [label="(Call,put_user(sdp->sg_tablesize, ip))"];
"1000167" [label="(Block,)"];
"1000512" [label="(Call,access_ok(VERIFY_WRITE, ip, sizeof (int)))"];
"1000751" [label="(Call,(int) sfp->keep_orphan)"];
"1000750" -> "1000749"  [label="AST: "];
"1000750" -> "1000756"  [label="CFG: "];
"1000751" -> "1000750"  [label="AST: "];
"1000756" -> "1000750"  [label="AST: "];
"1000749" -> "1000750"  [label="CFG: "];
"1000750" -> "1001060"  [label="DDG: (int) sfp->keep_orphan"];
"1000750" -> "1001060"  [label="DDG: put_user((int) sfp->keep_orphan, ip)"];
"1000750" -> "1001060"  [label="DDG: ip"];
"1000750" -> "1000749"  [label="DDG: put_user((int) sfp->keep_orphan, ip)"];
"1000751" -> "1000750"  [label="DDG: sfp->keep_orphan"];
"1000118" -> "1000750"  [label="DDG: ip"];
"1000751" -> "1000753"  [label="CFG: "];
"1000752" -> "1000751"  [label="AST: "];
"1000753" -> "1000751"  [label="AST: "];
"1000756" -> "1000751"  [label="CFG: "];
"1000751" -> "1001060"  [label="DDG: sfp->keep_orphan"];
"1000118" -> "1000110"  [label="AST: "];
"1000118" -> "1000120"  [label="CFG: "];
"1000119" -> "1000118"  [label="AST: "];
"1000120" -> "1000118"  [label="AST: "];
"1000132" -> "1000118"  [label="CFG: "];
"1000118" -> "1001060"  [label="DDG: p"];
"1000118" -> "1001060"  [label="DDG: ip"];
"1000112" -> "1000118"  [label="DDG: p"];
"1000118" -> "1000287"  [label="DDG: ip"];
"1000118" -> "1000346"  [label="DDG: ip"];
"1000118" -> "1000492"  [label="DDG: ip"];
"1000118" -> "1000512"  [label="DDG: ip"];
"1000118" -> "1000597"  [label="DDG: ip"];
"1000118" -> "1000602"  [label="DDG: ip"];
"1000118" -> "1000610"  [label="DDG: ip"];
"1000118" -> "1000699"  [label="DDG: ip"];
"1000118" -> "1000705"  [label="DDG: ip"];
"1000118" -> "1000724"  [label="DDG: ip"];
"1000118" -> "1000734"  [label="DDG: ip"];
"1000118" -> "1000760"  [label="DDG: ip"];
"1000118" -> "1000788"  [label="DDG: ip"];
"1000118" -> "1000801"  [label="DDG: ip"];
"1000118" -> "1000877"  [label="DDG: ip"];
"1000118" -> "1000943"  [label="DDG: ip"];
"1000118" -> "1000961"  [label="DDG: ip"];
"1000112" -> "1000110"  [label="AST: "];
"1000112" -> "1000114"  [label="CFG: "];
"1000113" -> "1000112"  [label="AST: "];
"1000114" -> "1000112"  [label="AST: "];
"1000119" -> "1000112"  [label="CFG: "];
"1000112" -> "1001060"  [label="DDG: (void __user *)arg"];
"1000114" -> "1000112"  [label="DDG: arg"];
"1000112" -> "1000189"  [label="DDG: p"];
"1000112" -> "1000360"  [label="DDG: p"];
"1000112" -> "1000807"  [label="DDG: p"];
"1000112" -> "1000906"  [label="DDG: p"];
"1000112" -> "1000929"  [label="DDG: p"];
"1000112" -> "1000971"  [label="DDG: p"];
"1000112" -> "1001054"  [label="DDG: p"];
"1000114" -> "1000116"  [label="CFG: "];
"1000115" -> "1000114"  [label="AST: "];
"1000116" -> "1000114"  [label="AST: "];
"1000114" -> "1001060"  [label="DDG: arg"];
"1000109" -> "1000114"  [label="DDG: arg"];
"1000109" -> "1000106"  [label="AST: "];
"1000109" -> "1001060"  [label="DDG: arg"];
"1000749" -> "1000167"  [label="AST: "];
"1001060" -> "1000749"  [label="CFG: "];
"1000749" -> "1001060"  [label="DDG: <RET>"];
}
