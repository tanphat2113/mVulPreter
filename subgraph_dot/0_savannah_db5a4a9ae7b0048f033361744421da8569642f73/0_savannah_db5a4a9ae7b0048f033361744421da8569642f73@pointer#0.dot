digraph "0_savannah_db5a4a9ae7b0048f033361744421da8569642f73@pointer" {
"1000209" [label="(Call,skip_string( &cur, limit ))"];
"1000133" [label="(Call,skip_spaces( &cur, limit ))"];
"1000124" [label="(Call,*  limit = parser->limit)"];
"1000190" [label="(Call,cur + 1 < limit)"];
"1000138" [label="(Call,cur >= limit)"];
"1000118" [label="(Call,*  cur   = parser->cursor)"];
"1000207" [label="(Call,error = skip_string( &cur, limit ))"];
"1000289" [label="(Call,parser->error  = error)"];
"1000264" [label="(Call,cur < limit)"];
"1000263" [label="(Call,cur < limit && cur == parser->cursor)"];
"1000267" [label="(Call,cur == parser->cursor)"];
"1000283" [label="(Call,cur > limit)"];
"1000286" [label="(Call,cur = limit)"];
"1000294" [label="(Call,parser->cursor = cur)"];
"1000268" [label="(Identifier,cur)"];
"1000119" [label="(Identifier,cur)"];
"1000224" [label="(Call,cur >= limit)"];
"1000198" [label="(Identifier,cur)"];
"1000263" [label="(Call,cur < limit && cur == parser->cursor)"];
"1000138" [label="(Call,cur >= limit)"];
"1000197" [label="(Call,cur + 1)"];
"1000269" [label="(Call,parser->cursor)"];
"1000288" [label="(Identifier,limit)"];
"1000295" [label="(Call,parser->cursor)"];
"1000116" [label="(Block,)"];
"1000146" [label="(Identifier,cur)"];
"1000191" [label="(Call,cur + 1)"];
"1000265" [label="(Identifier,cur)"];
"1000175" [label="(Call,error = skip_literal_string( &cur, limit ))"];
"1000250" [label="(Call,cur < limit)"];
"1000162" [label="(Call,error = skip_procedure( &cur, limit ))"];
"1000294" [label="(Call,parser->cursor = cur)"];
"1000213" [label="(ControlStructure,goto Exit;)"];
"1000177" [label="(Call,skip_literal_string( &cur, limit ))"];
"1000194" [label="(Identifier,limit)"];
"1000130" [label="(Call,error = FT_Err_Ok)"];
"1000266" [label="(Identifier,limit)"];
"1000204" [label="(Call,cur++)"];
"1000189" [label="(Call,cur + 1 < limit && *(cur + 1) == '<')"];
"1000247" [label="(Call,cur++)"];
"1000286" [label="(Call,cur = limit)"];
"1000209" [label="(Call,skip_string( &cur, limit ))"];
"1000136" [label="(Identifier,limit)"];
"1000125" [label="(Identifier,limit)"];
"1000296" [label="(Identifier,parser)"];
"1000291" [label="(Identifier,parser)"];
"1000140" [label="(Identifier,limit)"];
"1000275" [label="(Literal,\"ps_parser_skip_PS_token:\"\n                 \" current token is `%c' which is self-delimiting\n\"\n                 \"                        \"\n                 \" but invalid at this point\n\")"];
"1000283" [label="(Call,cur > limit)"];
"1000264" [label="(Call,cur < limit)"];
"1000299" [label="(MethodReturn,RET)"];
"1000290" [label="(Call,parser->error)"];
"1000134" [label="(Call,&cur)"];
"1000206" [label="(ControlStructure,else)"];
"1000131" [label="(Identifier,error)"];
"1000262" [label="(ControlStructure,if ( cur < limit && cur == parser->cursor ))"];
"1000210" [label="(Call,&cur)"];
"1000239" [label="(Call,cur++)"];
"1000282" [label="(ControlStructure,if ( cur > limit ))"];
"1000133" [label="(Call,skip_spaces( &cur, limit ))"];
"1000278" [label="(Call,error = FT_THROW( Invalid_File_Format ))"];
"1000164" [label="(Call,skip_procedure( &cur, limit ))"];
"1000289" [label="(Call,parser->error  = error)"];
"1000190" [label="(Call,cur + 1 < limit)"];
"1000141" [label="(ControlStructure,goto Exit;)"];
"1000208" [label="(Identifier,error)"];
"1000284" [label="(Identifier,cur)"];
"1000220" [label="(Call,cur++)"];
"1000153" [label="(Call,cur++)"];
"1000287" [label="(Identifier,cur)"];
"1000126" [label="(Call,parser->limit)"];
"1000212" [label="(Identifier,limit)"];
"1000285" [label="(Identifier,limit)"];
"1000139" [label="(Identifier,cur)"];
"1000120" [label="(Call,parser->cursor)"];
"1000207" [label="(Call,error = skip_string( &cur, limit ))"];
"1000118" [label="(Call,*  cur   = parser->cursor)"];
"1000267" [label="(Call,cur == parser->cursor)"];
"1000137" [label="(ControlStructure,if ( cur >= limit ))"];
"1000298" [label="(Identifier,cur)"];
"1000293" [label="(Identifier,error)"];
"1000234" [label="(Call,error = FT_THROW( Invalid_File_Format ))"];
"1000124" [label="(Call,*  limit = parser->limit)"];
"1000202" [label="(Call,cur++)"];
"1000209" -> "1000207"  [label="AST: "];
"1000209" -> "1000212"  [label="CFG: "];
"1000210" -> "1000209"  [label="AST: "];
"1000212" -> "1000209"  [label="AST: "];
"1000207" -> "1000209"  [label="CFG: "];
"1000209" -> "1000299"  [label="DDG: &cur"];
"1000209" -> "1000207"  [label="DDG: &cur"];
"1000209" -> "1000207"  [label="DDG: limit"];
"1000133" -> "1000209"  [label="DDG: &cur"];
"1000190" -> "1000209"  [label="DDG: limit"];
"1000209" -> "1000264"  [label="DDG: limit"];
"1000133" -> "1000116"  [label="AST: "];
"1000133" -> "1000136"  [label="CFG: "];
"1000134" -> "1000133"  [label="AST: "];
"1000136" -> "1000133"  [label="AST: "];
"1000139" -> "1000133"  [label="CFG: "];
"1000133" -> "1000299"  [label="DDG: skip_spaces( &cur, limit )"];
"1000133" -> "1000299"  [label="DDG: &cur"];
"1000124" -> "1000133"  [label="DDG: limit"];
"1000133" -> "1000138"  [label="DDG: limit"];
"1000133" -> "1000164"  [label="DDG: &cur"];
"1000133" -> "1000177"  [label="DDG: &cur"];
"1000124" -> "1000116"  [label="AST: "];
"1000124" -> "1000126"  [label="CFG: "];
"1000125" -> "1000124"  [label="AST: "];
"1000126" -> "1000124"  [label="AST: "];
"1000131" -> "1000124"  [label="CFG: "];
"1000124" -> "1000299"  [label="DDG: parser->limit"];
"1000190" -> "1000189"  [label="AST: "];
"1000190" -> "1000194"  [label="CFG: "];
"1000191" -> "1000190"  [label="AST: "];
"1000194" -> "1000190"  [label="AST: "];
"1000198" -> "1000190"  [label="CFG: "];
"1000189" -> "1000190"  [label="CFG: "];
"1000190" -> "1000299"  [label="DDG: cur + 1"];
"1000190" -> "1000189"  [label="DDG: cur + 1"];
"1000190" -> "1000189"  [label="DDG: limit"];
"1000138" -> "1000190"  [label="DDG: cur"];
"1000138" -> "1000190"  [label="DDG: limit"];
"1000190" -> "1000264"  [label="DDG: limit"];
"1000138" -> "1000137"  [label="AST: "];
"1000138" -> "1000140"  [label="CFG: "];
"1000139" -> "1000138"  [label="AST: "];
"1000140" -> "1000138"  [label="AST: "];
"1000141" -> "1000138"  [label="CFG: "];
"1000146" -> "1000138"  [label="CFG: "];
"1000138" -> "1000299"  [label="DDG: cur >= limit"];
"1000118" -> "1000138"  [label="DDG: cur"];
"1000138" -> "1000153"  [label="DDG: cur"];
"1000138" -> "1000164"  [label="DDG: limit"];
"1000138" -> "1000177"  [label="DDG: limit"];
"1000138" -> "1000191"  [label="DDG: cur"];
"1000138" -> "1000197"  [label="DDG: cur"];
"1000138" -> "1000202"  [label="DDG: cur"];
"1000138" -> "1000220"  [label="DDG: cur"];
"1000138" -> "1000224"  [label="DDG: limit"];
"1000138" -> "1000247"  [label="DDG: cur"];
"1000138" -> "1000250"  [label="DDG: cur"];
"1000138" -> "1000250"  [label="DDG: limit"];
"1000138" -> "1000264"  [label="DDG: cur"];
"1000138" -> "1000264"  [label="DDG: limit"];
"1000118" -> "1000116"  [label="AST: "];
"1000118" -> "1000120"  [label="CFG: "];
"1000119" -> "1000118"  [label="AST: "];
"1000120" -> "1000118"  [label="AST: "];
"1000125" -> "1000118"  [label="CFG: "];
"1000207" -> "1000206"  [label="AST: "];
"1000208" -> "1000207"  [label="AST: "];
"1000213" -> "1000207"  [label="CFG: "];
"1000207" -> "1000299"  [label="DDG: skip_string( &cur, limit )"];
"1000207" -> "1000289"  [label="DDG: error"];
"1000289" -> "1000116"  [label="AST: "];
"1000289" -> "1000293"  [label="CFG: "];
"1000290" -> "1000289"  [label="AST: "];
"1000293" -> "1000289"  [label="AST: "];
"1000296" -> "1000289"  [label="CFG: "];
"1000289" -> "1000299"  [label="DDG: parser->error"];
"1000289" -> "1000299"  [label="DDG: error"];
"1000234" -> "1000289"  [label="DDG: error"];
"1000162" -> "1000289"  [label="DDG: error"];
"1000278" -> "1000289"  [label="DDG: error"];
"1000130" -> "1000289"  [label="DDG: error"];
"1000175" -> "1000289"  [label="DDG: error"];
"1000264" -> "1000263"  [label="AST: "];
"1000264" -> "1000266"  [label="CFG: "];
"1000265" -> "1000264"  [label="AST: "];
"1000266" -> "1000264"  [label="AST: "];
"1000268" -> "1000264"  [label="CFG: "];
"1000263" -> "1000264"  [label="CFG: "];
"1000264" -> "1000263"  [label="DDG: cur"];
"1000264" -> "1000263"  [label="DDG: limit"];
"1000224" -> "1000264"  [label="DDG: cur"];
"1000224" -> "1000264"  [label="DDG: limit"];
"1000250" -> "1000264"  [label="DDG: cur"];
"1000250" -> "1000264"  [label="DDG: limit"];
"1000239" -> "1000264"  [label="DDG: cur"];
"1000153" -> "1000264"  [label="DDG: cur"];
"1000204" -> "1000264"  [label="DDG: cur"];
"1000177" -> "1000264"  [label="DDG: limit"];
"1000164" -> "1000264"  [label="DDG: limit"];
"1000264" -> "1000267"  [label="DDG: cur"];
"1000264" -> "1000283"  [label="DDG: cur"];
"1000264" -> "1000283"  [label="DDG: limit"];
"1000263" -> "1000262"  [label="AST: "];
"1000263" -> "1000267"  [label="CFG: "];
"1000267" -> "1000263"  [label="AST: "];
"1000275" -> "1000263"  [label="CFG: "];
"1000284" -> "1000263"  [label="CFG: "];
"1000263" -> "1000299"  [label="DDG: cur == parser->cursor"];
"1000263" -> "1000299"  [label="DDG: cur < limit"];
"1000263" -> "1000299"  [label="DDG: cur < limit && cur == parser->cursor"];
"1000267" -> "1000263"  [label="DDG: cur"];
"1000267" -> "1000263"  [label="DDG: parser->cursor"];
"1000267" -> "1000269"  [label="CFG: "];
"1000268" -> "1000267"  [label="AST: "];
"1000269" -> "1000267"  [label="AST: "];
"1000267" -> "1000283"  [label="DDG: cur"];
"1000283" -> "1000282"  [label="AST: "];
"1000283" -> "1000285"  [label="CFG: "];
"1000284" -> "1000283"  [label="AST: "];
"1000285" -> "1000283"  [label="AST: "];
"1000287" -> "1000283"  [label="CFG: "];
"1000291" -> "1000283"  [label="CFG: "];
"1000283" -> "1000299"  [label="DDG: limit"];
"1000283" -> "1000299"  [label="DDG: cur > limit"];
"1000283" -> "1000286"  [label="DDG: limit"];
"1000283" -> "1000294"  [label="DDG: cur"];
"1000286" -> "1000282"  [label="AST: "];
"1000286" -> "1000288"  [label="CFG: "];
"1000287" -> "1000286"  [label="AST: "];
"1000288" -> "1000286"  [label="AST: "];
"1000291" -> "1000286"  [label="CFG: "];
"1000286" -> "1000299"  [label="DDG: limit"];
"1000286" -> "1000294"  [label="DDG: cur"];
"1000294" -> "1000116"  [label="AST: "];
"1000294" -> "1000298"  [label="CFG: "];
"1000295" -> "1000294"  [label="AST: "];
"1000298" -> "1000294"  [label="AST: "];
"1000299" -> "1000294"  [label="CFG: "];
"1000294" -> "1000299"  [label="DDG: cur"];
"1000294" -> "1000299"  [label="DDG: parser->cursor"];
}
