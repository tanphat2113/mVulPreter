digraph "0_FFmpeg_cb243972b121b1ae6b60a78ff55a0506c69f3879@array" {
"1000187" [label="(Call,hex_char_to_number(p[0]))"];
"1000126" [label="(Call,p++)"];
"1000101" [label="(MethodParameterIn,const char *p)"];
"1000121" [label="(Call,*p == '#')"];
"1000186" [label="(Call,hex_char_to_number(p[0]) << 28)"];
"1000179" [label="(Call,(hex_char_to_number(p[1]) << 20) |\n                   (hex_char_to_number(p[0]) << 28))"];
"1000172" [label="(Call,(hex_char_to_number(p[2]) << 12) |\n                   (hex_char_to_number(p[1]) << 20) |\n                   (hex_char_to_number(p[0]) << 28))"];
"1000165" [label="(Call,(hex_char_to_number(p[3]) <<  4) |\n                   (hex_char_to_number(p[2]) << 12) |\n                   (hex_char_to_number(p[1]) << 20) |\n                   (hex_char_to_number(p[0]) << 28))"];
"1000163" [label="(Call,ret  = (hex_char_to_number(p[3]) <<  4) |\n                   (hex_char_to_number(p[2]) << 12) |\n                   (hex_char_to_number(p[1]) << 20) |\n                   (hex_char_to_number(p[0]) << 28))"];
"1000331" [label="(Return,return ret;)"];
"1000191" [label="(Literal,28)"];
"1000165" [label="(Call,(hex_char_to_number(p[3]) <<  4) |\n                   (hex_char_to_number(p[2]) << 12) |\n                   (hex_char_to_number(p[1]) << 20) |\n                   (hex_char_to_number(p[0]) << 28))"];
"1000146" [label="(Call,hex_char_to_number(p[1]))"];
"1000254" [label="(Call,hex_char_to_number(p[6]))"];
"1000275" [label="(Call,hex_char_to_number(p[3]))"];
"1000139" [label="(Call,hex_char_to_number(p[2]))"];
"1000122" [label="(Call,*p)"];
"1000164" [label="(Identifier,ret)"];
"1000174" [label="(Call,hex_char_to_number(p[2]))"];
"1000245" [label="(Call,ret  =  hex_char_to_number(p[7])        |\n                   (hex_char_to_number(p[6]) <<  4) |\n                   (hex_char_to_number(p[5]) <<  8) |\n                   (hex_char_to_number(p[4]) << 12) |\n                   (hex_char_to_number(p[3]) << 16) |\n                   (hex_char_to_number(p[2]) << 20) |\n                   (hex_char_to_number(p[1]) << 24) |\n                   (hex_char_to_number(p[0]) << 28))"];
"1000179" [label="(Call,(hex_char_to_number(p[1]) << 20) |\n                   (hex_char_to_number(p[0]) << 28))"];
"1000332" [label="(Identifier,ret)"];
"1000180" [label="(Call,hex_char_to_number(p[1]) << 20)"];
"1000126" [label="(Call,p++)"];
"1000152" [label="(Call,hex_char_to_number(p[0]))"];
"1000101" [label="(MethodParameterIn,const char *p)"];
"1000214" [label="(Call,hex_char_to_number(p[3]))"];
"1000166" [label="(Call,hex_char_to_number(p[3]) <<  4)"];
"1000125" [label="(Block,)"];
"1000187" [label="(Call,hex_char_to_number(p[0]))"];
"1000303" [label="(Identifier,color_name)"];
"1000248" [label="(Call,hex_char_to_number(p[7]))"];
"1000173" [label="(Call,hex_char_to_number(p[2]) << 12)"];
"1000207" [label="(Call,hex_char_to_number(p[4]))"];
"1000198" [label="(Call,ret |=  hex_char_to_number(p[5])        |\n                   (hex_char_to_number(p[4]) <<  4) |\n                   (hex_char_to_number(p[3]) <<  8) |\n                   (hex_char_to_number(p[2]) << 12) |\n                   (hex_char_to_number(p[1]) << 16) |\n                   (hex_char_to_number(p[0]) << 20))"];
"1000221" [label="(Call,hex_char_to_number(p[2]))"];
"1000186" [label="(Call,hex_char_to_number(p[0]) << 28)"];
"1000103" [label="(Block,)"];
"1000181" [label="(Call,hex_char_to_number(p[1]))"];
"1000331" [label="(Return,return ret;)"];
"1000326" [label="(Call,ret = entry->rgb_color)"];
"1000261" [label="(Call,hex_char_to_number(p[5]))"];
"1000129" [label="(Identifier,len)"];
"1000167" [label="(Call,hex_char_to_number(p[3]))"];
"1000289" [label="(Call,hex_char_to_number(p[1]))"];
"1000121" [label="(Call,*p == '#')"];
"1000162" [label="(Block,)"];
"1000302" [label="(Call,strncpy(color_name, p, len))"];
"1000295" [label="(Call,hex_char_to_number(p[0]))"];
"1000188" [label="(Call,p[0])"];
"1000282" [label="(Call,hex_char_to_number(p[2]))"];
"1000105" [label="(Call,ret = 0xFF000000)"];
"1000135" [label="(Call,ret |= (hex_char_to_number(p[2]) <<  4) |\n                   (hex_char_to_number(p[1]) << 12) |\n                   (hex_char_to_number(p[0]) << 20))"];
"1000201" [label="(Call,hex_char_to_number(p[5]))"];
"1000228" [label="(Call,hex_char_to_number(p[1]))"];
"1000127" [label="(Identifier,p)"];
"1000234" [label="(Call,hex_char_to_number(p[0]))"];
"1000333" [label="(MethodReturn,static uint32_t)"];
"1000120" [label="(ControlStructure,if (*p == '#'))"];
"1000124" [label="(Literal,'#')"];
"1000172" [label="(Call,(hex_char_to_number(p[2]) << 12) |\n                   (hex_char_to_number(p[1]) << 20) |\n                   (hex_char_to_number(p[0]) << 28))"];
"1000268" [label="(Call,hex_char_to_number(p[4]))"];
"1000163" [label="(Call,ret  = (hex_char_to_number(p[3]) <<  4) |\n                   (hex_char_to_number(p[2]) << 12) |\n                   (hex_char_to_number(p[1]) << 20) |\n                   (hex_char_to_number(p[0]) << 28))"];
"1000187" -> "1000186"  [label="AST: "];
"1000187" -> "1000188"  [label="CFG: "];
"1000188" -> "1000187"  [label="AST: "];
"1000191" -> "1000187"  [label="CFG: "];
"1000187" -> "1000333"  [label="DDG: p[0]"];
"1000187" -> "1000186"  [label="DDG: p[0]"];
"1000126" -> "1000187"  [label="DDG: p"];
"1000121" -> "1000187"  [label="DDG: *p"];
"1000101" -> "1000187"  [label="DDG: p"];
"1000126" -> "1000125"  [label="AST: "];
"1000126" -> "1000127"  [label="CFG: "];
"1000127" -> "1000126"  [label="AST: "];
"1000129" -> "1000126"  [label="CFG: "];
"1000126" -> "1000333"  [label="DDG: p"];
"1000101" -> "1000126"  [label="DDG: p"];
"1000126" -> "1000139"  [label="DDG: p"];
"1000126" -> "1000146"  [label="DDG: p"];
"1000126" -> "1000152"  [label="DDG: p"];
"1000126" -> "1000167"  [label="DDG: p"];
"1000126" -> "1000174"  [label="DDG: p"];
"1000126" -> "1000181"  [label="DDG: p"];
"1000126" -> "1000201"  [label="DDG: p"];
"1000126" -> "1000207"  [label="DDG: p"];
"1000126" -> "1000214"  [label="DDG: p"];
"1000126" -> "1000221"  [label="DDG: p"];
"1000126" -> "1000228"  [label="DDG: p"];
"1000126" -> "1000234"  [label="DDG: p"];
"1000126" -> "1000248"  [label="DDG: p"];
"1000126" -> "1000254"  [label="DDG: p"];
"1000126" -> "1000261"  [label="DDG: p"];
"1000126" -> "1000268"  [label="DDG: p"];
"1000126" -> "1000275"  [label="DDG: p"];
"1000126" -> "1000282"  [label="DDG: p"];
"1000126" -> "1000289"  [label="DDG: p"];
"1000126" -> "1000295"  [label="DDG: p"];
"1000101" -> "1000100"  [label="AST: "];
"1000101" -> "1000333"  [label="DDG: p"];
"1000101" -> "1000139"  [label="DDG: p"];
"1000101" -> "1000146"  [label="DDG: p"];
"1000101" -> "1000152"  [label="DDG: p"];
"1000101" -> "1000167"  [label="DDG: p"];
"1000101" -> "1000174"  [label="DDG: p"];
"1000101" -> "1000181"  [label="DDG: p"];
"1000101" -> "1000201"  [label="DDG: p"];
"1000101" -> "1000207"  [label="DDG: p"];
"1000101" -> "1000214"  [label="DDG: p"];
"1000101" -> "1000221"  [label="DDG: p"];
"1000101" -> "1000228"  [label="DDG: p"];
"1000101" -> "1000234"  [label="DDG: p"];
"1000101" -> "1000248"  [label="DDG: p"];
"1000101" -> "1000254"  [label="DDG: p"];
"1000101" -> "1000261"  [label="DDG: p"];
"1000101" -> "1000268"  [label="DDG: p"];
"1000101" -> "1000275"  [label="DDG: p"];
"1000101" -> "1000282"  [label="DDG: p"];
"1000101" -> "1000289"  [label="DDG: p"];
"1000101" -> "1000295"  [label="DDG: p"];
"1000101" -> "1000302"  [label="DDG: p"];
"1000121" -> "1000120"  [label="AST: "];
"1000121" -> "1000124"  [label="CFG: "];
"1000122" -> "1000121"  [label="AST: "];
"1000124" -> "1000121"  [label="AST: "];
"1000127" -> "1000121"  [label="CFG: "];
"1000303" -> "1000121"  [label="CFG: "];
"1000121" -> "1000333"  [label="DDG: *p == '"];
"1000121" -> "1000333"  [label="DDG: *p"];
"1000121" -> "1000152"  [label="DDG: *p"];
"1000121" -> "1000234"  [label="DDG: *p"];
"1000121" -> "1000295"  [label="DDG: *p"];
"1000186" -> "1000179"  [label="AST: "];
"1000186" -> "1000191"  [label="CFG: "];
"1000191" -> "1000186"  [label="AST: "];
"1000179" -> "1000186"  [label="CFG: "];
"1000186" -> "1000333"  [label="DDG: hex_char_to_number(p[0])"];
"1000186" -> "1000179"  [label="DDG: hex_char_to_number(p[0])"];
"1000186" -> "1000179"  [label="DDG: 28"];
"1000179" -> "1000172"  [label="AST: "];
"1000180" -> "1000179"  [label="AST: "];
"1000172" -> "1000179"  [label="CFG: "];
"1000179" -> "1000333"  [label="DDG: hex_char_to_number(p[0]) << 28"];
"1000179" -> "1000333"  [label="DDG: hex_char_to_number(p[1]) << 20"];
"1000179" -> "1000172"  [label="DDG: hex_char_to_number(p[1]) << 20"];
"1000179" -> "1000172"  [label="DDG: hex_char_to_number(p[0]) << 28"];
"1000180" -> "1000179"  [label="DDG: hex_char_to_number(p[1])"];
"1000180" -> "1000179"  [label="DDG: 20"];
"1000172" -> "1000165"  [label="AST: "];
"1000173" -> "1000172"  [label="AST: "];
"1000165" -> "1000172"  [label="CFG: "];
"1000172" -> "1000333"  [label="DDG: (hex_char_to_number(p[1]) << 20) |\n                   (hex_char_to_number(p[0]) << 28)"];
"1000172" -> "1000333"  [label="DDG: hex_char_to_number(p[2]) << 12"];
"1000172" -> "1000165"  [label="DDG: hex_char_to_number(p[2]) << 12"];
"1000172" -> "1000165"  [label="DDG: (hex_char_to_number(p[1]) << 20) |\n                   (hex_char_to_number(p[0]) << 28)"];
"1000173" -> "1000172"  [label="DDG: hex_char_to_number(p[2])"];
"1000173" -> "1000172"  [label="DDG: 12"];
"1000165" -> "1000163"  [label="AST: "];
"1000166" -> "1000165"  [label="AST: "];
"1000163" -> "1000165"  [label="CFG: "];
"1000165" -> "1000333"  [label="DDG: (hex_char_to_number(p[2]) << 12) |\n                   (hex_char_to_number(p[1]) << 20) |\n                   (hex_char_to_number(p[0]) << 28)"];
"1000165" -> "1000333"  [label="DDG: hex_char_to_number(p[3]) <<  4"];
"1000165" -> "1000163"  [label="DDG: hex_char_to_number(p[3]) <<  4"];
"1000165" -> "1000163"  [label="DDG: (hex_char_to_number(p[2]) << 12) |\n                   (hex_char_to_number(p[1]) << 20) |\n                   (hex_char_to_number(p[0]) << 28)"];
"1000166" -> "1000165"  [label="DDG: hex_char_to_number(p[3])"];
"1000166" -> "1000165"  [label="DDG: 4"];
"1000163" -> "1000162"  [label="AST: "];
"1000164" -> "1000163"  [label="AST: "];
"1000332" -> "1000163"  [label="CFG: "];
"1000163" -> "1000333"  [label="DDG: ret"];
"1000163" -> "1000333"  [label="DDG: (hex_char_to_number(p[3]) <<  4) |\n                   (hex_char_to_number(p[2]) << 12) |\n                   (hex_char_to_number(p[1]) << 20) |\n                   (hex_char_to_number(p[0]) << 28)"];
"1000163" -> "1000331"  [label="DDG: ret"];
"1000331" -> "1000103"  [label="AST: "];
"1000331" -> "1000332"  [label="CFG: "];
"1000332" -> "1000331"  [label="AST: "];
"1000333" -> "1000331"  [label="CFG: "];
"1000331" -> "1000333"  [label="DDG: <RET>"];
"1000332" -> "1000331"  [label="DDG: ret"];
"1000198" -> "1000331"  [label="DDG: ret"];
"1000135" -> "1000331"  [label="DDG: ret"];
"1000326" -> "1000331"  [label="DDG: ret"];
"1000245" -> "1000331"  [label="DDG: ret"];
"1000105" -> "1000331"  [label="DDG: ret"];
}
