digraph "0_linux_bceaa90240b6019ed73b49965eac7d167610be69_2@API" {
"1000229" [label="(Call,skb_copy_and_csum_datagram_iovec(skb,\n\t\t\t\t\t\t       sizeof(struct udphdr),\n\t\t\t\t\t\t       msg->msg_iov))"];
"1000213" [label="(Call,skb_csum_unnecessary(skb))"];
"1000167" [label="(Call,!skb)"];
"1000150" [label="(Call,skb = __skb_recv_datagram(sk, flags | (noblock ? MSG_DONTWAIT : 0),\n\t\t\t\t  &peeked, &off, &err))"];
"1000152" [label="(Call,__skb_recv_datagram(sk, flags | (noblock ? MSG_DONTWAIT : 0),\n\t\t\t\t  &peeked, &off, &err))"];
"1000363" [label="(Call,unlock_sock_fast(sk, slow))"];
"1000348" [label="(Call,skb_kill_datagram(sk, skb, flags))"];
"1000344" [label="(Call,lock_sock_fast(sk))"];
"1000105" [label="(MethodParameterIn,struct sock *sk)"];
"1000209" [label="(Call,udp_lib_checksum_complete(skb))"];
"1000204" [label="(Call,UDP_SKB_CB(skb))"];
"1000229" [label="(Call,skb_copy_and_csum_datagram_iovec(skb,\n\t\t\t\t\t\t       sizeof(struct udphdr),\n\t\t\t\t\t\t       msg->msg_iov))"];
"1000154" [label="(Call,flags | (noblock ? MSG_DONTWAIT : 0))"];
"1000141" [label="(Call,flags & MSG_ERRQUEUE)"];
"1000109" [label="(MethodParameterIn,int flags)"];
"1000108" [label="(MethodParameterIn,int noblock)"];
"1000359" [label="(Call,sock_net(sk))"];
"1000354" [label="(Call,sock_net(sk))"];
"1000342" [label="(Call,slow = lock_sock_fast(sk))"];
"1000137" [label="(Call,IS_UDPLITE(sk))"];
"1000115" [label="(Call,inet_sk(sk))"];
"1000217" [label="(Call,skb_copy_datagram_iovec(skb, sizeof(struct udphdr),\n\t\t\t\t\t      msg->msg_iov, copied))"];
"1000215" [label="(Call,err = skb_copy_datagram_iovec(skb, sizeof(struct udphdr),\n\t\t\t\t\t      msg->msg_iov, copied))"];
"1000243" [label="(Call,unlikely(err))"];
"1000339" [label="(Return,return err;)"];
"1000246" [label="(Call,trace_kfree_skb(skb, udp_recvmsg))"];
"1000335" [label="(Call,skb_free_datagram_locked(sk, skb))"];
"1000272" [label="(Call,sock_recv_ts_and_drops(msg, sk, skb))"];
"1000289" [label="(Call,udp_hdr(skb))"];
"1000299" [label="(Call,ip_hdr(skb))"];
"1000321" [label="(Call,ip_cmsg_recv(msg, skb))"];
"1000324" [label="(Call,err = copied)"];
"1000227" [label="(Call,err = skb_copy_and_csum_datagram_iovec(skb,\n\t\t\t\t\t\t       sizeof(struct udphdr),\n\t\t\t\t\t\t       msg->msg_iov))"];
"1000237" [label="(Call,err == -EINVAL)"];
"1000259" [label="(Call,sock_net(sk))"];
"1000258" [label="(Call,UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\t   UDP_MIB_INERRORS, is_udplite))"];
"1000268" [label="(Call,sock_net(sk))"];
"1000267" [label="(Call,UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\tUDP_MIB_INDATAGRAMS, is_udplite))"];
"1000328" [label="(Call,flags & MSG_TRUNC)"];
"1000347" [label="(Call,!skb_kill_datagram(sk, skb, flags))"];
"1000353" [label="(Call,UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_CSUMERRORS, is_udplite))"];
"1000358" [label="(Call,UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite))"];
"1000334" [label="(JumpTarget,out_free:)"];
"1000219" [label="(Call,sizeof(struct udphdr))"];
"1000264" [label="(ControlStructure,if (!peeked))"];
"1000211" [label="(ControlStructure,goto csum_copy_err;)"];
"1000246" [label="(Call,trace_kfree_skb(skb, udp_recvmsg))"];
"1000336" [label="(Identifier,sk)"];
"1000251" [label="(Identifier,peeked)"];
"1000243" [label="(Call,unlikely(err))"];
"1000339" [label="(Return,return err;)"];
"1000216" [label="(Identifier,err)"];
"1000325" [label="(Identifier,err)"];
"1000160" [label="(Call,&peeked)"];
"1000208" [label="(ControlStructure,if (udp_lib_checksum_complete(skb)))"];
"1000298" [label="(Call,ip_hdr(skb)->saddr)"];
"1000105" [label="(MethodParameterIn,struct sock *sk)"];
"1000358" [label="(Call,UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite))"];
"1000167" [label="(Call,!skb)"];
"1000224" [label="(Identifier,copied)"];
"1000263" [label="(ControlStructure,goto out_free;)"];
"1000324" [label="(Call,err = copied)"];
"1000210" [label="(Identifier,skb)"];
"1000155" [label="(Identifier,flags)"];
"1000289" [label="(Call,udp_hdr(skb))"];
"1000270" [label="(Identifier,UDP_MIB_INDATAGRAMS)"];
"1000346" [label="(ControlStructure,if (!skb_kill_datagram(sk, skb, flags)))"];
"1000209" [label="(Call,udp_lib_checksum_complete(skb))"];
"1000332" [label="(Identifier,err)"];
"1000272" [label="(Call,sock_recv_ts_and_drops(msg, sk, skb))"];
"1000231" [label="(Call,sizeof(struct udphdr))"];
"1000138" [label="(Identifier,sk)"];
"1000342" [label="(Call,slow = lock_sock_fast(sk))"];
"1000361" [label="(Identifier,UDP_MIB_INERRORS)"];
"1000343" [label="(Identifier,slow)"];
"1000331" [label="(Call,err = ulen)"];
"1000338" [label="(JumpTarget,out:)"];
"1000154" [label="(Call,flags | (noblock ? MSG_DONTWAIT : 0))"];
"1000290" [label="(Identifier,skb)"];
"1000151" [label="(Identifier,skb)"];
"1000357" [label="(Identifier,is_udplite)"];
"1000193" [label="(Call,msg->msg_flags |= MSG_TRUNC)"];
"1000142" [label="(Identifier,flags)"];
"1000322" [label="(Identifier,msg)"];
"1000291" [label="(FieldIdentifier,source)"];
"1000269" [label="(Identifier,sk)"];
"1000149" [label="(JumpTarget,try_again:)"];
"1000317" [label="(ControlStructure,if (inet->cmsg_flags))"];
"1000169" [label="(ControlStructure,goto out;)"];
"1000212" [label="(ControlStructure,if (skb_csum_unnecessary(skb)))"];
"1000345" [label="(Identifier,sk)"];
"1000288" [label="(Call,udp_hdr(skb)->source)"];
"1000115" [label="(Call,inet_sk(sk))"];
"1000206" [label="(FieldIdentifier,partial_cov)"];
"1000226" [label="(Block,)"];
"1000352" [label="(Block,)"];
"1000301" [label="(FieldIdentifier,saddr)"];
"1000166" [label="(ControlStructure,if (!skb))"];
"1000354" [label="(Call,sock_net(sk))"];
"1000248" [label="(Identifier,udp_recvmsg)"];
"1000299" [label="(Call,ip_hdr(skb))"];
"1000116" [label="(Identifier,sk)"];
"1000109" [label="(MethodParameterIn,int flags)"];
"1000259" [label="(Call,sock_net(sk))"];
"1000275" [label="(Identifier,skb)"];
"1000351" [label="(Identifier,flags)"];
"1000205" [label="(Identifier,skb)"];
"1000108" [label="(MethodParameterIn,int noblock)"];
"1000214" [label="(Identifier,skb)"];
"1000353" [label="(Call,UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_CSUMERRORS, is_udplite))"];
"1000367" [label="(Identifier,noblock)"];
"1000335" [label="(Call,skb_free_datagram_locked(sk, skb))"];
"1000217" [label="(Call,skb_copy_datagram_iovec(skb, sizeof(struct udphdr),\n\t\t\t\t\t      msg->msg_iov, copied))"];
"1000350" [label="(Identifier,skb)"];
"1000274" [label="(Identifier,sk)"];
"1000267" [label="(Call,UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\tUDP_MIB_INDATAGRAMS, is_udplite))"];
"1000111" [label="(Block,)"];
"1000113" [label="(Call,*inet = inet_sk(sk))"];
"1000271" [label="(Identifier,is_udplite)"];
"1000323" [label="(Identifier,skb)"];
"1000300" [label="(Identifier,skb)"];
"1000244" [label="(Identifier,err)"];
"1000162" [label="(Call,&off)"];
"1000266" [label="(Identifier,peeked)"];
"1000328" [label="(Call,flags & MSG_TRUNC)"];
"1000156" [label="(Call,noblock ? MSG_DONTWAIT : 0)"];
"1000363" [label="(Call,unlock_sock_fast(sk, slow))"];
"1000273" [label="(Identifier,msg)"];
"1000171" [label="(Identifier,ulen)"];
"1000326" [label="(Identifier,copied)"];
"1000247" [label="(Identifier,skb)"];
"1000237" [label="(Call,err == -EINVAL)"];
"1000260" [label="(Identifier,sk)"];
"1000141" [label="(Call,flags & MSG_ERRQUEUE)"];
"1000150" [label="(Call,skb = __skb_recv_datagram(sk, flags | (noblock ? MSG_DONTWAIT : 0),\n\t\t\t\t  &peeked, &off, &err))"];
"1000215" [label="(Call,err = skb_copy_datagram_iovec(skb, sizeof(struct udphdr),\n\t\t\t\t\t      msg->msg_iov, copied))"];
"1000242" [label="(ControlStructure,if (unlikely(err)))"];
"1000252" [label="(Block,)"];
"1000168" [label="(Identifier,skb)"];
"1000355" [label="(Identifier,sk)"];
"1000340" [label="(Identifier,err)"];
"1000227" [label="(Call,err = skb_copy_and_csum_datagram_iovec(skb,\n\t\t\t\t\t\t       sizeof(struct udphdr),\n\t\t\t\t\t\t       msg->msg_iov))"];
"1000344" [label="(Call,lock_sock_fast(sk))"];
"1000152" [label="(Call,__skb_recv_datagram(sk, flags | (noblock ? MSG_DONTWAIT : 0),\n\t\t\t\t  &peeked, &off, &err))"];
"1000327" [label="(ControlStructure,if (flags & MSG_TRUNC))"];
"1000348" [label="(Call,skb_kill_datagram(sk, skb, flags))"];
"1000204" [label="(Call,UDP_SKB_CB(skb))"];
"1000164" [label="(Call,&err)"];
"1000377" [label="(MethodReturn,int)"];
"1000360" [label="(Identifier,sk)"];
"1000239" [label="(Call,-EINVAL)"];
"1000137" [label="(Call,IS_UDPLITE(sk))"];
"1000140" [label="(ControlStructure,if (flags & MSG_ERRQUEUE))"];
"1000153" [label="(Identifier,sk)"];
"1000221" [label="(Call,msg->msg_iov)"];
"1000347" [label="(Call,!skb_kill_datagram(sk, skb, flags))"];
"1000145" [label="(Call,ip_recv_error(sk, msg, len))"];
"1000362" [label="(Identifier,is_udplite)"];
"1000218" [label="(Identifier,skb)"];
"1000213" [label="(Call,skb_csum_unnecessary(skb))"];
"1000321" [label="(Call,ip_cmsg_recv(msg, skb))"];
"1000359" [label="(Call,sock_net(sk))"];
"1000161" [label="(Identifier,peeked)"];
"1000200" [label="(Call,copied < ulen)"];
"1000245" [label="(Block,)"];
"1000268" [label="(Call,sock_net(sk))"];
"1000349" [label="(Identifier,sk)"];
"1000106" [label="(MethodParameterIn,struct msghdr *msg)"];
"1000203" [label="(Call,UDP_SKB_CB(skb)->partial_cov)"];
"1000356" [label="(Identifier,UDP_MIB_CSUMERRORS)"];
"1000258" [label="(Call,UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\t   UDP_MIB_INERRORS, is_udplite))"];
"1000230" [label="(Identifier,skb)"];
"1000262" [label="(Identifier,is_udplite)"];
"1000364" [label="(Identifier,sk)"];
"1000143" [label="(Identifier,MSG_ERRQUEUE)"];
"1000241" [label="(ControlStructure,goto csum_copy_err;)"];
"1000236" [label="(ControlStructure,if (err == -EINVAL))"];
"1000135" [label="(Call,is_udplite = IS_UDPLITE(sk))"];
"1000233" [label="(Call,msg->msg_iov)"];
"1000228" [label="(Identifier,err)"];
"1000329" [label="(Identifier,flags)"];
"1000365" [label="(Identifier,slow)"];
"1000330" [label="(Identifier,MSG_TRUNC)"];
"1000238" [label="(Identifier,err)"];
"1000261" [label="(Identifier,UDP_MIB_INERRORS)"];
"1000146" [label="(Identifier,sk)"];
"1000337" [label="(Identifier,skb)"];
"1000277" [label="(Identifier,sin)"];
"1000229" [label="(Call,skb_copy_and_csum_datagram_iovec(skb,\n\t\t\t\t\t\t       sizeof(struct udphdr),\n\t\t\t\t\t\t       msg->msg_iov))"];
"1000229" -> "1000227"  [label="AST: "];
"1000229" -> "1000233"  [label="CFG: "];
"1000230" -> "1000229"  [label="AST: "];
"1000231" -> "1000229"  [label="AST: "];
"1000233" -> "1000229"  [label="AST: "];
"1000227" -> "1000229"  [label="CFG: "];
"1000229" -> "1000377"  [label="DDG: msg->msg_iov"];
"1000229" -> "1000217"  [label="DDG: msg->msg_iov"];
"1000229" -> "1000227"  [label="DDG: skb"];
"1000229" -> "1000227"  [label="DDG: msg->msg_iov"];
"1000213" -> "1000229"  [label="DDG: skb"];
"1000229" -> "1000246"  [label="DDG: skb"];
"1000229" -> "1000272"  [label="DDG: skb"];
"1000229" -> "1000348"  [label="DDG: skb"];
"1000213" -> "1000212"  [label="AST: "];
"1000213" -> "1000214"  [label="CFG: "];
"1000214" -> "1000213"  [label="AST: "];
"1000216" -> "1000213"  [label="CFG: "];
"1000228" -> "1000213"  [label="CFG: "];
"1000213" -> "1000377"  [label="DDG: skb_csum_unnecessary(skb)"];
"1000167" -> "1000213"  [label="DDG: skb"];
"1000209" -> "1000213"  [label="DDG: skb"];
"1000204" -> "1000213"  [label="DDG: skb"];
"1000213" -> "1000217"  [label="DDG: skb"];
"1000167" -> "1000166"  [label="AST: "];
"1000167" -> "1000168"  [label="CFG: "];
"1000168" -> "1000167"  [label="AST: "];
"1000169" -> "1000167"  [label="CFG: "];
"1000171" -> "1000167"  [label="CFG: "];
"1000167" -> "1000377"  [label="DDG: skb"];
"1000167" -> "1000377"  [label="DDG: !skb"];
"1000150" -> "1000167"  [label="DDG: skb"];
"1000167" -> "1000204"  [label="DDG: skb"];
"1000167" -> "1000209"  [label="DDG: skb"];
"1000150" -> "1000111"  [label="AST: "];
"1000150" -> "1000152"  [label="CFG: "];
"1000151" -> "1000150"  [label="AST: "];
"1000152" -> "1000150"  [label="AST: "];
"1000168" -> "1000150"  [label="CFG: "];
"1000150" -> "1000377"  [label="DDG: __skb_recv_datagram(sk, flags | (noblock ? MSG_DONTWAIT : 0),\n\t\t\t\t  &peeked, &off, &err)"];
"1000152" -> "1000150"  [label="DDG: sk"];
"1000152" -> "1000150"  [label="DDG: &off"];
"1000152" -> "1000150"  [label="DDG: &peeked"];
"1000152" -> "1000150"  [label="DDG: &err"];
"1000152" -> "1000150"  [label="DDG: flags | (noblock ? MSG_DONTWAIT : 0)"];
"1000152" -> "1000164"  [label="CFG: "];
"1000153" -> "1000152"  [label="AST: "];
"1000154" -> "1000152"  [label="AST: "];
"1000160" -> "1000152"  [label="AST: "];
"1000162" -> "1000152"  [label="AST: "];
"1000164" -> "1000152"  [label="AST: "];
"1000152" -> "1000377"  [label="DDG: &err"];
"1000152" -> "1000377"  [label="DDG: &peeked"];
"1000152" -> "1000377"  [label="DDG: sk"];
"1000152" -> "1000377"  [label="DDG: flags | (noblock ? MSG_DONTWAIT : 0)"];
"1000152" -> "1000377"  [label="DDG: &off"];
"1000363" -> "1000152"  [label="DDG: sk"];
"1000137" -> "1000152"  [label="DDG: sk"];
"1000105" -> "1000152"  [label="DDG: sk"];
"1000154" -> "1000152"  [label="DDG: flags"];
"1000154" -> "1000152"  [label="DDG: noblock ? MSG_DONTWAIT : 0"];
"1000152" -> "1000259"  [label="DDG: sk"];
"1000152" -> "1000268"  [label="DDG: sk"];
"1000152" -> "1000272"  [label="DDG: sk"];
"1000152" -> "1000335"  [label="DDG: sk"];
"1000152" -> "1000344"  [label="DDG: sk"];
"1000363" -> "1000111"  [label="AST: "];
"1000363" -> "1000365"  [label="CFG: "];
"1000364" -> "1000363"  [label="AST: "];
"1000365" -> "1000363"  [label="AST: "];
"1000367" -> "1000363"  [label="CFG: "];
"1000363" -> "1000377"  [label="DDG: slow"];
"1000363" -> "1000377"  [label="DDG: sk"];
"1000363" -> "1000377"  [label="DDG: unlock_sock_fast(sk, slow)"];
"1000348" -> "1000363"  [label="DDG: sk"];
"1000359" -> "1000363"  [label="DDG: sk"];
"1000105" -> "1000363"  [label="DDG: sk"];
"1000342" -> "1000363"  [label="DDG: slow"];
"1000348" -> "1000347"  [label="AST: "];
"1000348" -> "1000351"  [label="CFG: "];
"1000349" -> "1000348"  [label="AST: "];
"1000350" -> "1000348"  [label="AST: "];
"1000351" -> "1000348"  [label="AST: "];
"1000347" -> "1000348"  [label="CFG: "];
"1000348" -> "1000377"  [label="DDG: skb"];
"1000348" -> "1000377"  [label="DDG: flags"];
"1000348" -> "1000154"  [label="DDG: flags"];
"1000348" -> "1000347"  [label="DDG: sk"];
"1000348" -> "1000347"  [label="DDG: skb"];
"1000348" -> "1000347"  [label="DDG: flags"];
"1000344" -> "1000348"  [label="DDG: sk"];
"1000105" -> "1000348"  [label="DDG: sk"];
"1000209" -> "1000348"  [label="DDG: skb"];
"1000154" -> "1000348"  [label="DDG: flags"];
"1000109" -> "1000348"  [label="DDG: flags"];
"1000348" -> "1000354"  [label="DDG: sk"];
"1000344" -> "1000342"  [label="AST: "];
"1000344" -> "1000345"  [label="CFG: "];
"1000345" -> "1000344"  [label="AST: "];
"1000342" -> "1000344"  [label="CFG: "];
"1000344" -> "1000342"  [label="DDG: sk"];
"1000105" -> "1000344"  [label="DDG: sk"];
"1000105" -> "1000103"  [label="AST: "];
"1000105" -> "1000377"  [label="DDG: sk"];
"1000105" -> "1000115"  [label="DDG: sk"];
"1000105" -> "1000137"  [label="DDG: sk"];
"1000105" -> "1000145"  [label="DDG: sk"];
"1000105" -> "1000259"  [label="DDG: sk"];
"1000105" -> "1000268"  [label="DDG: sk"];
"1000105" -> "1000272"  [label="DDG: sk"];
"1000105" -> "1000335"  [label="DDG: sk"];
"1000105" -> "1000354"  [label="DDG: sk"];
"1000105" -> "1000359"  [label="DDG: sk"];
"1000209" -> "1000208"  [label="AST: "];
"1000209" -> "1000210"  [label="CFG: "];
"1000210" -> "1000209"  [label="AST: "];
"1000211" -> "1000209"  [label="CFG: "];
"1000214" -> "1000209"  [label="CFG: "];
"1000209" -> "1000377"  [label="DDG: udp_lib_checksum_complete(skb)"];
"1000204" -> "1000209"  [label="DDG: skb"];
"1000204" -> "1000203"  [label="AST: "];
"1000204" -> "1000205"  [label="CFG: "];
"1000205" -> "1000204"  [label="AST: "];
"1000206" -> "1000204"  [label="CFG: "];
"1000154" -> "1000156"  [label="CFG: "];
"1000155" -> "1000154"  [label="AST: "];
"1000156" -> "1000154"  [label="AST: "];
"1000161" -> "1000154"  [label="CFG: "];
"1000154" -> "1000377"  [label="DDG: flags"];
"1000154" -> "1000377"  [label="DDG: noblock ? MSG_DONTWAIT : 0"];
"1000141" -> "1000154"  [label="DDG: flags"];
"1000109" -> "1000154"  [label="DDG: flags"];
"1000108" -> "1000154"  [label="DDG: noblock"];
"1000154" -> "1000328"  [label="DDG: flags"];
"1000141" -> "1000140"  [label="AST: "];
"1000141" -> "1000143"  [label="CFG: "];
"1000142" -> "1000141"  [label="AST: "];
"1000143" -> "1000141"  [label="AST: "];
"1000146" -> "1000141"  [label="CFG: "];
"1000149" -> "1000141"  [label="CFG: "];
"1000141" -> "1000377"  [label="DDG: flags"];
"1000141" -> "1000377"  [label="DDG: flags & MSG_ERRQUEUE"];
"1000141" -> "1000377"  [label="DDG: MSG_ERRQUEUE"];
"1000109" -> "1000141"  [label="DDG: flags"];
"1000109" -> "1000103"  [label="AST: "];
"1000109" -> "1000377"  [label="DDG: flags"];
"1000109" -> "1000328"  [label="DDG: flags"];
"1000108" -> "1000103"  [label="AST: "];
"1000108" -> "1000377"  [label="DDG: noblock"];
"1000108" -> "1000156"  [label="DDG: noblock"];
"1000359" -> "1000358"  [label="AST: "];
"1000359" -> "1000360"  [label="CFG: "];
"1000360" -> "1000359"  [label="AST: "];
"1000361" -> "1000359"  [label="CFG: "];
"1000359" -> "1000358"  [label="DDG: sk"];
"1000354" -> "1000359"  [label="DDG: sk"];
"1000354" -> "1000353"  [label="AST: "];
"1000354" -> "1000355"  [label="CFG: "];
"1000355" -> "1000354"  [label="AST: "];
"1000356" -> "1000354"  [label="CFG: "];
"1000354" -> "1000353"  [label="DDG: sk"];
"1000342" -> "1000111"  [label="AST: "];
"1000343" -> "1000342"  [label="AST: "];
"1000349" -> "1000342"  [label="CFG: "];
"1000342" -> "1000377"  [label="DDG: lock_sock_fast(sk)"];
"1000137" -> "1000135"  [label="AST: "];
"1000137" -> "1000138"  [label="CFG: "];
"1000138" -> "1000137"  [label="AST: "];
"1000135" -> "1000137"  [label="CFG: "];
"1000137" -> "1000135"  [label="DDG: sk"];
"1000115" -> "1000137"  [label="DDG: sk"];
"1000137" -> "1000145"  [label="DDG: sk"];
"1000115" -> "1000113"  [label="AST: "];
"1000115" -> "1000116"  [label="CFG: "];
"1000116" -> "1000115"  [label="AST: "];
"1000113" -> "1000115"  [label="CFG: "];
"1000115" -> "1000113"  [label="DDG: sk"];
"1000217" -> "1000215"  [label="AST: "];
"1000217" -> "1000224"  [label="CFG: "];
"1000218" -> "1000217"  [label="AST: "];
"1000219" -> "1000217"  [label="AST: "];
"1000221" -> "1000217"  [label="AST: "];
"1000224" -> "1000217"  [label="AST: "];
"1000215" -> "1000217"  [label="CFG: "];
"1000217" -> "1000377"  [label="DDG: msg->msg_iov"];
"1000217" -> "1000377"  [label="DDG: copied"];
"1000217" -> "1000215"  [label="DDG: skb"];
"1000217" -> "1000215"  [label="DDG: msg->msg_iov"];
"1000217" -> "1000215"  [label="DDG: copied"];
"1000200" -> "1000217"  [label="DDG: copied"];
"1000217" -> "1000246"  [label="DDG: skb"];
"1000217" -> "1000272"  [label="DDG: skb"];
"1000217" -> "1000324"  [label="DDG: copied"];
"1000215" -> "1000212"  [label="AST: "];
"1000216" -> "1000215"  [label="AST: "];
"1000244" -> "1000215"  [label="CFG: "];
"1000215" -> "1000377"  [label="DDG: skb_copy_datagram_iovec(skb, sizeof(struct udphdr),\n\t\t\t\t\t      msg->msg_iov, copied)"];
"1000215" -> "1000243"  [label="DDG: err"];
"1000243" -> "1000242"  [label="AST: "];
"1000243" -> "1000244"  [label="CFG: "];
"1000244" -> "1000243"  [label="AST: "];
"1000247" -> "1000243"  [label="CFG: "];
"1000266" -> "1000243"  [label="CFG: "];
"1000243" -> "1000377"  [label="DDG: err"];
"1000243" -> "1000377"  [label="DDG: unlikely(err)"];
"1000237" -> "1000243"  [label="DDG: err"];
"1000243" -> "1000339"  [label="DDG: err"];
"1000339" -> "1000111"  [label="AST: "];
"1000339" -> "1000340"  [label="CFG: "];
"1000340" -> "1000339"  [label="AST: "];
"1000377" -> "1000339"  [label="CFG: "];
"1000339" -> "1000377"  [label="DDG: <RET>"];
"1000340" -> "1000339"  [label="DDG: err"];
"1000237" -> "1000339"  [label="DDG: err"];
"1000331" -> "1000339"  [label="DDG: err"];
"1000324" -> "1000339"  [label="DDG: err"];
"1000246" -> "1000245"  [label="AST: "];
"1000246" -> "1000248"  [label="CFG: "];
"1000247" -> "1000246"  [label="AST: "];
"1000248" -> "1000246"  [label="AST: "];
"1000251" -> "1000246"  [label="CFG: "];
"1000246" -> "1000377"  [label="DDG: udp_recvmsg"];
"1000246" -> "1000377"  [label="DDG: trace_kfree_skb(skb, udp_recvmsg)"];
"1000246" -> "1000335"  [label="DDG: skb"];
"1000335" -> "1000111"  [label="AST: "];
"1000335" -> "1000337"  [label="CFG: "];
"1000336" -> "1000335"  [label="AST: "];
"1000337" -> "1000335"  [label="AST: "];
"1000338" -> "1000335"  [label="CFG: "];
"1000335" -> "1000377"  [label="DDG: sk"];
"1000335" -> "1000377"  [label="DDG: skb"];
"1000335" -> "1000377"  [label="DDG: skb_free_datagram_locked(sk, skb)"];
"1000259" -> "1000335"  [label="DDG: sk"];
"1000272" -> "1000335"  [label="DDG: sk"];
"1000272" -> "1000335"  [label="DDG: skb"];
"1000299" -> "1000335"  [label="DDG: skb"];
"1000321" -> "1000335"  [label="DDG: skb"];
"1000272" -> "1000111"  [label="AST: "];
"1000272" -> "1000275"  [label="CFG: "];
"1000273" -> "1000272"  [label="AST: "];
"1000274" -> "1000272"  [label="AST: "];
"1000275" -> "1000272"  [label="AST: "];
"1000277" -> "1000272"  [label="CFG: "];
"1000272" -> "1000377"  [label="DDG: msg"];
"1000272" -> "1000377"  [label="DDG: sock_recv_ts_and_drops(msg, sk, skb)"];
"1000106" -> "1000272"  [label="DDG: msg"];
"1000268" -> "1000272"  [label="DDG: sk"];
"1000272" -> "1000289"  [label="DDG: skb"];
"1000272" -> "1000321"  [label="DDG: msg"];
"1000272" -> "1000321"  [label="DDG: skb"];
"1000289" -> "1000288"  [label="AST: "];
"1000289" -> "1000290"  [label="CFG: "];
"1000290" -> "1000289"  [label="AST: "];
"1000291" -> "1000289"  [label="CFG: "];
"1000289" -> "1000299"  [label="DDG: skb"];
"1000299" -> "1000298"  [label="AST: "];
"1000299" -> "1000300"  [label="CFG: "];
"1000300" -> "1000299"  [label="AST: "];
"1000301" -> "1000299"  [label="CFG: "];
"1000299" -> "1000321"  [label="DDG: skb"];
"1000321" -> "1000317"  [label="AST: "];
"1000321" -> "1000323"  [label="CFG: "];
"1000322" -> "1000321"  [label="AST: "];
"1000323" -> "1000321"  [label="AST: "];
"1000325" -> "1000321"  [label="CFG: "];
"1000321" -> "1000377"  [label="DDG: msg"];
"1000321" -> "1000377"  [label="DDG: ip_cmsg_recv(msg, skb)"];
"1000106" -> "1000321"  [label="DDG: msg"];
"1000324" -> "1000111"  [label="AST: "];
"1000324" -> "1000326"  [label="CFG: "];
"1000325" -> "1000324"  [label="AST: "];
"1000326" -> "1000324"  [label="AST: "];
"1000329" -> "1000324"  [label="CFG: "];
"1000324" -> "1000377"  [label="DDG: copied"];
"1000324" -> "1000377"  [label="DDG: err"];
"1000200" -> "1000324"  [label="DDG: copied"];
"1000227" -> "1000226"  [label="AST: "];
"1000228" -> "1000227"  [label="AST: "];
"1000238" -> "1000227"  [label="CFG: "];
"1000227" -> "1000377"  [label="DDG: skb_copy_and_csum_datagram_iovec(skb,\n\t\t\t\t\t\t       sizeof(struct udphdr),\n\t\t\t\t\t\t       msg->msg_iov)"];
"1000227" -> "1000237"  [label="DDG: err"];
"1000237" -> "1000236"  [label="AST: "];
"1000237" -> "1000239"  [label="CFG: "];
"1000238" -> "1000237"  [label="AST: "];
"1000239" -> "1000237"  [label="AST: "];
"1000241" -> "1000237"  [label="CFG: "];
"1000244" -> "1000237"  [label="CFG: "];
"1000237" -> "1000377"  [label="DDG: err == -EINVAL"];
"1000237" -> "1000377"  [label="DDG: -EINVAL"];
"1000237" -> "1000377"  [label="DDG: err"];
"1000239" -> "1000237"  [label="DDG: EINVAL"];
"1000259" -> "1000258"  [label="AST: "];
"1000259" -> "1000260"  [label="CFG: "];
"1000260" -> "1000259"  [label="AST: "];
"1000261" -> "1000259"  [label="CFG: "];
"1000259" -> "1000258"  [label="DDG: sk"];
"1000258" -> "1000252"  [label="AST: "];
"1000258" -> "1000262"  [label="CFG: "];
"1000261" -> "1000258"  [label="AST: "];
"1000262" -> "1000258"  [label="AST: "];
"1000263" -> "1000258"  [label="CFG: "];
"1000258" -> "1000377"  [label="DDG: sock_net(sk)"];
"1000258" -> "1000377"  [label="DDG: UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\t   UDP_MIB_INERRORS, is_udplite)"];
"1000258" -> "1000377"  [label="DDG: is_udplite"];
"1000258" -> "1000377"  [label="DDG: UDP_MIB_INERRORS"];
"1000358" -> "1000258"  [label="DDG: UDP_MIB_INERRORS"];
"1000358" -> "1000258"  [label="DDG: is_udplite"];
"1000135" -> "1000258"  [label="DDG: is_udplite"];
"1000268" -> "1000267"  [label="AST: "];
"1000268" -> "1000269"  [label="CFG: "];
"1000269" -> "1000268"  [label="AST: "];
"1000270" -> "1000268"  [label="CFG: "];
"1000268" -> "1000267"  [label="DDG: sk"];
"1000267" -> "1000264"  [label="AST: "];
"1000267" -> "1000271"  [label="CFG: "];
"1000270" -> "1000267"  [label="AST: "];
"1000271" -> "1000267"  [label="AST: "];
"1000273" -> "1000267"  [label="CFG: "];
"1000267" -> "1000377"  [label="DDG: UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\tUDP_MIB_INDATAGRAMS, is_udplite)"];
"1000267" -> "1000377"  [label="DDG: sock_net(sk)"];
"1000267" -> "1000377"  [label="DDG: UDP_MIB_INDATAGRAMS"];
"1000267" -> "1000377"  [label="DDG: is_udplite"];
"1000135" -> "1000267"  [label="DDG: is_udplite"];
"1000358" -> "1000267"  [label="DDG: is_udplite"];
"1000328" -> "1000327"  [label="AST: "];
"1000328" -> "1000330"  [label="CFG: "];
"1000329" -> "1000328"  [label="AST: "];
"1000330" -> "1000328"  [label="AST: "];
"1000332" -> "1000328"  [label="CFG: "];
"1000334" -> "1000328"  [label="CFG: "];
"1000328" -> "1000377"  [label="DDG: flags & MSG_TRUNC"];
"1000328" -> "1000377"  [label="DDG: flags"];
"1000328" -> "1000377"  [label="DDG: MSG_TRUNC"];
"1000193" -> "1000328"  [label="DDG: MSG_TRUNC"];
"1000347" -> "1000346"  [label="AST: "];
"1000355" -> "1000347"  [label="CFG: "];
"1000364" -> "1000347"  [label="CFG: "];
"1000347" -> "1000377"  [label="DDG: skb_kill_datagram(sk, skb, flags)"];
"1000347" -> "1000377"  [label="DDG: !skb_kill_datagram(sk, skb, flags)"];
"1000353" -> "1000352"  [label="AST: "];
"1000353" -> "1000357"  [label="CFG: "];
"1000356" -> "1000353"  [label="AST: "];
"1000357" -> "1000353"  [label="AST: "];
"1000360" -> "1000353"  [label="CFG: "];
"1000353" -> "1000377"  [label="DDG: UDP_MIB_CSUMERRORS"];
"1000353" -> "1000377"  [label="DDG: UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_CSUMERRORS, is_udplite)"];
"1000135" -> "1000353"  [label="DDG: is_udplite"];
"1000358" -> "1000353"  [label="DDG: is_udplite"];
"1000353" -> "1000358"  [label="DDG: is_udplite"];
"1000358" -> "1000352"  [label="AST: "];
"1000358" -> "1000362"  [label="CFG: "];
"1000361" -> "1000358"  [label="AST: "];
"1000362" -> "1000358"  [label="AST: "];
"1000364" -> "1000358"  [label="CFG: "];
"1000358" -> "1000377"  [label="DDG: UDP_MIB_INERRORS"];
"1000358" -> "1000377"  [label="DDG: UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite)"];
"1000358" -> "1000377"  [label="DDG: is_udplite"];
"1000358" -> "1000377"  [label="DDG: sock_net(sk)"];
}
