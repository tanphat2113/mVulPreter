digraph "0_Chrome_d9e316238aee59acf665d80b544cf4e1edfd3349@pointer" {
"1000107" [label="(Call,fd.OpenReadOnly(zip_file))"];
"1000101" [label="(MethodParameterIn,const char* zip_file)"];
"1000106" [label="(Call,!fd.OpenReadOnly(zip_file))"];
"1000110" [label="(Call,LOG_ERRNO(\"%s: open failed trying to open zip file %s\n\",\n              __FUNCTION__, zip_file))"];
"1000119" [label="(Call,stat(zip_file, &stat_buf))"];
"1000118" [label="(Call,stat(zip_file, &stat_buf) == -1)"];
"1000126" [label="(Call,LOG_ERRNO(\"%s: stat failed trying to stat zip file %s\n\",\n              __FUNCTION__, zip_file))"];
"1000139" [label="(Call,LOG(\"%s: The size %ld of %s is too large to map\n\",\n        __FUNCTION__, stat_buf.st_size, zip_file))"];
"1000164" [label="(Call,LOG_ERRNO(\"%s: mmap failed trying to mmap zip file %s\n\",\n              __FUNCTION__, zip_file))"];
"1000207" [label="(Call,LOG(\"%s: Failed to find end of central directory in %s\n\",\n        __FUNCTION__, zip_file))"];
"1000234" [label="(Call,LOG(\"%s: Found out of range offset %u for start of directory in %s\n\",\n        __FUNCTION__, start_of_central_dir, zip_file))"];
"1000252" [label="(Call,LOG(\"%s: Found out of range offset %u for end of directory in %s\n\",\n        __FUNCTION__, end_of_central_dir, zip_file))"];
"1000301" [label="(Call,LOG(\"%s: Failed to find central directory header marker in %s. \"\n          \"Found 0x%x but expected 0x%x\n\", __FUNCTION__,\n          zip_file, marker, kCentralDirHeaderMarker))"];
"1000382" [label="(Call,LOG(\"%s: Failed to find local file header marker in %s. \"\n            \"Found 0x%x but expected 0x%x\n\", __FUNCTION__,\n            zip_file, marker, kLocalHeaderMarker))"];
"1000403" [label="(Call,LOG(\"%s: %s is compressed within %s. \"\n            \"Found compression method %u but expected %u\n\", __FUNCTION__,\n            filename, zip_file, compression_method, kCompressionMethodStored))"];
"1000464" [label="(Call,LOG(\"%s: Did not find %s in %s\n\", __FUNCTION__, filename, zip_file))"];
"1000141" [label="(Identifier,__FUNCTION__)"];
"1000305" [label="(Identifier,marker)"];
"1000119" [label="(Call,stat(zip_file, &stat_buf))"];
"1000169" [label="(Identifier,CRAZY_OFFSET_FAILED)"];
"1000407" [label="(Identifier,zip_file)"];
"1000133" [label="(Call,stat_buf.st_size > kMaxZipFileLength)"];
"1000210" [label="(Identifier,zip_file)"];
"1000466" [label="(Identifier,__FUNCTION__)"];
"1000233" [label="(Block,)"];
"1000235" [label="(Literal,\"%s: Found out of range offset %u for start of directory in %s\n\")"];
"1000140" [label="(Literal,\"%s: The size %ld of %s is too large to map\n\")"];
"1000254" [label="(Identifier,__FUNCTION__)"];
"1000120" [label="(Identifier,zip_file)"];
"1000253" [label="(Literal,\"%s: Found out of range offset %u for end of directory in %s\n\")"];
"1000102" [label="(MethodParameterIn,const char* filename)"];
"1000458" [label="(Call,LOG(\"%s: There are %d extra bytes at the end of the central directory.\n\",\n        __FUNCTION__, end_of_central_dir - off))"];
"1000256" [label="(Identifier,zip_file)"];
"1000308" [label="(Identifier,CRAZY_OFFSET_FAILED)"];
"1000112" [label="(Identifier,__FUNCTION__)"];
"1000107" [label="(Call,fd.OpenReadOnly(zip_file))"];
"1000382" [label="(Call,LOG(\"%s: Failed to find local file header marker in %s. \"\n            \"Found 0x%x but expected 0x%x\n\", __FUNCTION__,\n            zip_file, marker, kLocalHeaderMarker))"];
"1000273" [label="(Call,strlen(filename))"];
"1000212" [label="(Identifier,CRAZY_OFFSET_FAILED)"];
"1000209" [label="(Identifier,__FUNCTION__)"];
"1000234" [label="(Call,LOG(\"%s: Found out of range offset %u for start of directory in %s\n\",\n        __FUNCTION__, start_of_central_dir, zip_file))"];
"1000403" [label="(Call,LOG(\"%s: %s is compressed within %s. \"\n            \"Found compression method %u but expected %u\n\", __FUNCTION__,\n            filename, zip_file, compression_method, kCompressionMethodStored))"];
"1000127" [label="(Literal,\"%s: stat failed trying to stat zip file %s\n\")"];
"1000387" [label="(Identifier,kLocalHeaderMarker)"];
"1000402" [label="(Block,)"];
"1000208" [label="(Literal,\"%s: Failed to find end of central directory in %s\n\")"];
"1000128" [label="(Identifier,__FUNCTION__)"];
"1000206" [label="(Block,)"];
"1000300" [label="(Block,)"];
"1000121" [label="(Call,&stat_buf)"];
"1000131" [label="(Identifier,CRAZY_OFFSET_FAILED)"];
"1000471" [label="(MethodReturn,int)"];
"1000258" [label="(Identifier,CRAZY_OFFSET_FAILED)"];
"1000111" [label="(Literal,\"%s: open failed trying to open zip file %s\n\")"];
"1000465" [label="(Literal,\"%s: Did not find %s in %s\n\")"];
"1000135" [label="(Identifier,stat_buf)"];
"1000165" [label="(Literal,\"%s: mmap failed trying to mmap zip file %s\n\")"];
"1000385" [label="(Identifier,zip_file)"];
"1000304" [label="(Identifier,zip_file)"];
"1000399" [label="(Call,compression_method != kCompressionMethodStored)"];
"1000167" [label="(Identifier,zip_file)"];
"1000101" [label="(MethodParameterIn,const char* zip_file)"];
"1000145" [label="(Identifier,zip_file)"];
"1000126" [label="(Call,LOG_ERRNO(\"%s: stat failed trying to stat zip file %s\n\",\n              __FUNCTION__, zip_file))"];
"1000106" [label="(Call,!fd.OpenReadOnly(zip_file))"];
"1000381" [label="(Block,)"];
"1000164" [label="(Call,LOG_ERRNO(\"%s: mmap failed trying to mmap zip file %s\n\",\n              __FUNCTION__, zip_file))"];
"1000109" [label="(Block,)"];
"1000386" [label="(Identifier,marker)"];
"1000389" [label="(Identifier,CRAZY_OFFSET_FAILED)"];
"1000236" [label="(Identifier,__FUNCTION__)"];
"1000230" [label="(Call,start_of_central_dir > off)"];
"1000142" [label="(Call,stat_buf.st_size)"];
"1000365" [label="(Call,memcmp(filename_bytes, filename, target_len))"];
"1000406" [label="(Identifier,filename)"];
"1000404" [label="(Literal,\"%s: %s is compressed within %s. \"\n            \"Found compression method %u but expected %u\n\")"];
"1000384" [label="(Identifier,__FUNCTION__)"];
"1000303" [label="(Identifier,__FUNCTION__)"];
"1000251" [label="(Block,)"];
"1000166" [label="(Identifier,__FUNCTION__)"];
"1000405" [label="(Identifier,__FUNCTION__)"];
"1000110" [label="(Call,LOG_ERRNO(\"%s: open failed trying to open zip file %s\n\",\n              __FUNCTION__, zip_file))"];
"1000248" [label="(Call,end_of_central_dir > off)"];
"1000378" [label="(Call,marker != kLocalHeaderMarker)"];
"1000411" [label="(Identifier,CRAZY_OFFSET_FAILED)"];
"1000468" [label="(Identifier,zip_file)"];
"1000125" [label="(Block,)"];
"1000147" [label="(Identifier,CRAZY_OFFSET_FAILED)"];
"1000301" [label="(Call,LOG(\"%s: Failed to find central directory header marker in %s. \"\n          \"Found 0x%x but expected 0x%x\n\", __FUNCTION__,\n          zip_file, marker, kCentralDirHeaderMarker))"];
"1000238" [label="(Identifier,zip_file)"];
"1000467" [label="(Identifier,filename)"];
"1000113" [label="(Identifier,zip_file)"];
"1000123" [label="(Call,-1)"];
"1000237" [label="(Identifier,start_of_central_dir)"];
"1000240" [label="(Identifier,CRAZY_OFFSET_FAILED)"];
"1000383" [label="(Literal,\"%s: Failed to find local file header marker in %s. \"\n            \"Found 0x%x but expected 0x%x\n\")"];
"1000408" [label="(Identifier,compression_method)"];
"1000117" [label="(ControlStructure,if (stat(zip_file, &stat_buf) == -1))"];
"1000118" [label="(Call,stat(zip_file, &stat_buf) == -1)"];
"1000105" [label="(ControlStructure,if (!fd.OpenReadOnly(zip_file)))"];
"1000409" [label="(Identifier,kCompressionMethodStored)"];
"1000139" [label="(Call,LOG(\"%s: The size %ld of %s is too large to map\n\",\n        __FUNCTION__, stat_buf.st_size, zip_file))"];
"1000103" [label="(Block,)"];
"1000448" [label="(Call,LOG(\"%s: Did not find all the expected entries in the central directory. \"\n        \"Found %d but expected %d\n\", __FUNCTION__, n, num_entries))"];
"1000207" [label="(Call,LOG(\"%s: Failed to find end of central directory in %s\n\",\n        __FUNCTION__, zip_file))"];
"1000464" [label="(Call,LOG(\"%s: Did not find %s in %s\n\", __FUNCTION__, filename, zip_file))"];
"1000302" [label="(Literal,\"%s: Failed to find central directory header marker in %s. \"\n          \"Found 0x%x but expected 0x%x\n\")"];
"1000138" [label="(Block,)"];
"1000470" [label="(Identifier,CRAZY_OFFSET_FAILED)"];
"1000297" [label="(Call,marker != kCentralDirHeaderMarker)"];
"1000108" [label="(Identifier,zip_file)"];
"1000115" [label="(Identifier,CRAZY_OFFSET_FAILED)"];
"1000124" [label="(Literal,1)"];
"1000129" [label="(Identifier,zip_file)"];
"1000306" [label="(Identifier,kCentralDirHeaderMarker)"];
"1000163" [label="(Block,)"];
"1000252" [label="(Call,LOG(\"%s: Found out of range offset %u for end of directory in %s\n\",\n        __FUNCTION__, end_of_central_dir, zip_file))"];
"1000255" [label="(Identifier,end_of_central_dir)"];
"1000107" -> "1000106"  [label="AST: "];
"1000107" -> "1000108"  [label="CFG: "];
"1000108" -> "1000107"  [label="AST: "];
"1000106" -> "1000107"  [label="CFG: "];
"1000107" -> "1000106"  [label="DDG: "];
"1000101" -> "1000107"  [label="DDG: "];
"1000107" -> "1000110"  [label="DDG: "];
"1000107" -> "1000119"  [label="DDG: "];
"1000101" -> "1000100"  [label="AST: "];
"1000101" -> "1000471"  [label="DDG: "];
"1000101" -> "1000110"  [label="DDG: "];
"1000101" -> "1000119"  [label="DDG: "];
"1000101" -> "1000126"  [label="DDG: "];
"1000101" -> "1000139"  [label="DDG: "];
"1000101" -> "1000164"  [label="DDG: "];
"1000101" -> "1000207"  [label="DDG: "];
"1000101" -> "1000234"  [label="DDG: "];
"1000101" -> "1000252"  [label="DDG: "];
"1000101" -> "1000301"  [label="DDG: "];
"1000101" -> "1000382"  [label="DDG: "];
"1000101" -> "1000403"  [label="DDG: "];
"1000101" -> "1000464"  [label="DDG: "];
"1000106" -> "1000105"  [label="AST: "];
"1000111" -> "1000106"  [label="CFG: "];
"1000120" -> "1000106"  [label="CFG: "];
"1000106" -> "1000471"  [label="DDG: "];
"1000106" -> "1000471"  [label="DDG: "];
"1000110" -> "1000109"  [label="AST: "];
"1000110" -> "1000113"  [label="CFG: "];
"1000111" -> "1000110"  [label="AST: "];
"1000112" -> "1000110"  [label="AST: "];
"1000113" -> "1000110"  [label="AST: "];
"1000115" -> "1000110"  [label="CFG: "];
"1000110" -> "1000471"  [label="DDG: "];
"1000110" -> "1000471"  [label="DDG: "];
"1000110" -> "1000471"  [label="DDG: "];
"1000119" -> "1000118"  [label="AST: "];
"1000119" -> "1000121"  [label="CFG: "];
"1000120" -> "1000119"  [label="AST: "];
"1000121" -> "1000119"  [label="AST: "];
"1000124" -> "1000119"  [label="CFG: "];
"1000119" -> "1000471"  [label="DDG: "];
"1000119" -> "1000471"  [label="DDG: "];
"1000119" -> "1000118"  [label="DDG: "];
"1000119" -> "1000118"  [label="DDG: "];
"1000119" -> "1000126"  [label="DDG: "];
"1000119" -> "1000139"  [label="DDG: "];
"1000119" -> "1000164"  [label="DDG: "];
"1000119" -> "1000207"  [label="DDG: "];
"1000119" -> "1000234"  [label="DDG: "];
"1000119" -> "1000252"  [label="DDG: "];
"1000119" -> "1000301"  [label="DDG: "];
"1000119" -> "1000382"  [label="DDG: "];
"1000119" -> "1000403"  [label="DDG: "];
"1000119" -> "1000464"  [label="DDG: "];
"1000118" -> "1000117"  [label="AST: "];
"1000118" -> "1000123"  [label="CFG: "];
"1000123" -> "1000118"  [label="AST: "];
"1000127" -> "1000118"  [label="CFG: "];
"1000135" -> "1000118"  [label="CFG: "];
"1000118" -> "1000471"  [label="DDG: "];
"1000118" -> "1000471"  [label="DDG: "];
"1000118" -> "1000471"  [label="DDG: "];
"1000123" -> "1000118"  [label="DDG: "];
"1000126" -> "1000125"  [label="AST: "];
"1000126" -> "1000129"  [label="CFG: "];
"1000127" -> "1000126"  [label="AST: "];
"1000128" -> "1000126"  [label="AST: "];
"1000129" -> "1000126"  [label="AST: "];
"1000131" -> "1000126"  [label="CFG: "];
"1000126" -> "1000471"  [label="DDG: "];
"1000126" -> "1000471"  [label="DDG: "];
"1000126" -> "1000471"  [label="DDG: "];
"1000139" -> "1000138"  [label="AST: "];
"1000139" -> "1000145"  [label="CFG: "];
"1000140" -> "1000139"  [label="AST: "];
"1000141" -> "1000139"  [label="AST: "];
"1000142" -> "1000139"  [label="AST: "];
"1000145" -> "1000139"  [label="AST: "];
"1000147" -> "1000139"  [label="CFG: "];
"1000139" -> "1000471"  [label="DDG: "];
"1000139" -> "1000471"  [label="DDG: "];
"1000139" -> "1000471"  [label="DDG: "];
"1000139" -> "1000471"  [label="DDG: "];
"1000133" -> "1000139"  [label="DDG: "];
"1000164" -> "1000163"  [label="AST: "];
"1000164" -> "1000167"  [label="CFG: "];
"1000165" -> "1000164"  [label="AST: "];
"1000166" -> "1000164"  [label="AST: "];
"1000167" -> "1000164"  [label="AST: "];
"1000169" -> "1000164"  [label="CFG: "];
"1000164" -> "1000471"  [label="DDG: "];
"1000164" -> "1000471"  [label="DDG: "];
"1000164" -> "1000471"  [label="DDG: "];
"1000207" -> "1000206"  [label="AST: "];
"1000207" -> "1000210"  [label="CFG: "];
"1000208" -> "1000207"  [label="AST: "];
"1000209" -> "1000207"  [label="AST: "];
"1000210" -> "1000207"  [label="AST: "];
"1000212" -> "1000207"  [label="CFG: "];
"1000207" -> "1000471"  [label="DDG: "];
"1000207" -> "1000471"  [label="DDG: "];
"1000207" -> "1000471"  [label="DDG: "];
"1000234" -> "1000233"  [label="AST: "];
"1000234" -> "1000238"  [label="CFG: "];
"1000235" -> "1000234"  [label="AST: "];
"1000236" -> "1000234"  [label="AST: "];
"1000237" -> "1000234"  [label="AST: "];
"1000238" -> "1000234"  [label="AST: "];
"1000240" -> "1000234"  [label="CFG: "];
"1000234" -> "1000471"  [label="DDG: "];
"1000234" -> "1000471"  [label="DDG: "];
"1000234" -> "1000471"  [label="DDG: "];
"1000234" -> "1000471"  [label="DDG: "];
"1000230" -> "1000234"  [label="DDG: "];
"1000252" -> "1000251"  [label="AST: "];
"1000252" -> "1000256"  [label="CFG: "];
"1000253" -> "1000252"  [label="AST: "];
"1000254" -> "1000252"  [label="AST: "];
"1000255" -> "1000252"  [label="AST: "];
"1000256" -> "1000252"  [label="AST: "];
"1000258" -> "1000252"  [label="CFG: "];
"1000252" -> "1000471"  [label="DDG: "];
"1000252" -> "1000471"  [label="DDG: "];
"1000252" -> "1000471"  [label="DDG: "];
"1000252" -> "1000471"  [label="DDG: "];
"1000248" -> "1000252"  [label="DDG: "];
"1000301" -> "1000300"  [label="AST: "];
"1000301" -> "1000306"  [label="CFG: "];
"1000302" -> "1000301"  [label="AST: "];
"1000303" -> "1000301"  [label="AST: "];
"1000304" -> "1000301"  [label="AST: "];
"1000305" -> "1000301"  [label="AST: "];
"1000306" -> "1000301"  [label="AST: "];
"1000308" -> "1000301"  [label="CFG: "];
"1000301" -> "1000471"  [label="DDG: "];
"1000301" -> "1000471"  [label="DDG: "];
"1000301" -> "1000471"  [label="DDG: "];
"1000301" -> "1000471"  [label="DDG: "];
"1000301" -> "1000471"  [label="DDG: "];
"1000297" -> "1000301"  [label="DDG: "];
"1000297" -> "1000301"  [label="DDG: "];
"1000382" -> "1000381"  [label="AST: "];
"1000382" -> "1000387"  [label="CFG: "];
"1000383" -> "1000382"  [label="AST: "];
"1000384" -> "1000382"  [label="AST: "];
"1000385" -> "1000382"  [label="AST: "];
"1000386" -> "1000382"  [label="AST: "];
"1000387" -> "1000382"  [label="AST: "];
"1000389" -> "1000382"  [label="CFG: "];
"1000382" -> "1000471"  [label="DDG: "];
"1000382" -> "1000471"  [label="DDG: "];
"1000382" -> "1000471"  [label="DDG: "];
"1000382" -> "1000471"  [label="DDG: "];
"1000382" -> "1000471"  [label="DDG: "];
"1000378" -> "1000382"  [label="DDG: "];
"1000378" -> "1000382"  [label="DDG: "];
"1000403" -> "1000402"  [label="AST: "];
"1000403" -> "1000409"  [label="CFG: "];
"1000404" -> "1000403"  [label="AST: "];
"1000405" -> "1000403"  [label="AST: "];
"1000406" -> "1000403"  [label="AST: "];
"1000407" -> "1000403"  [label="AST: "];
"1000408" -> "1000403"  [label="AST: "];
"1000409" -> "1000403"  [label="AST: "];
"1000411" -> "1000403"  [label="CFG: "];
"1000403" -> "1000471"  [label="DDG: "];
"1000403" -> "1000471"  [label="DDG: "];
"1000403" -> "1000471"  [label="DDG: "];
"1000403" -> "1000471"  [label="DDG: "];
"1000403" -> "1000471"  [label="DDG: "];
"1000403" -> "1000471"  [label="DDG: "];
"1000273" -> "1000403"  [label="DDG: "];
"1000365" -> "1000403"  [label="DDG: "];
"1000102" -> "1000403"  [label="DDG: "];
"1000399" -> "1000403"  [label="DDG: "];
"1000399" -> "1000403"  [label="DDG: "];
"1000464" -> "1000103"  [label="AST: "];
"1000464" -> "1000468"  [label="CFG: "];
"1000465" -> "1000464"  [label="AST: "];
"1000466" -> "1000464"  [label="AST: "];
"1000467" -> "1000464"  [label="AST: "];
"1000468" -> "1000464"  [label="AST: "];
"1000470" -> "1000464"  [label="CFG: "];
"1000464" -> "1000471"  [label="DDG: "];
"1000464" -> "1000471"  [label="DDG: "];
"1000464" -> "1000471"  [label="DDG: "];
"1000464" -> "1000471"  [label="DDG: "];
"1000458" -> "1000464"  [label="DDG: "];
"1000448" -> "1000464"  [label="DDG: "];
"1000273" -> "1000464"  [label="DDG: "];
"1000365" -> "1000464"  [label="DDG: "];
"1000102" -> "1000464"  [label="DDG: "];
}
