digraph "0_Chrome_d9e316238aee59acf665d80b544cf4e1edfd3349@pointer" {
"1000273" [label="(Call,strlen(filename))"];
"1000102" [label="(MethodParameterIn,const char* filename)"];
"1000271" [label="(Call,target_len = strlen(filename))"];
"1000361" [label="(Call,file_name_length == target_len)"];
"1000360" [label="(Call,file_name_length == target_len &&\n        memcmp(filename_bytes, filename, target_len) == 0)"];
"1000365" [label="(Call,memcmp(filename_bytes, filename, target_len))"];
"1000364" [label="(Call,memcmp(filename_bytes, filename, target_len) == 0)"];
"1000403" [label="(Call,LOG(\"%s: %s is compressed within %s. \"\n            \"Found compression method %u but expected %u\n\", __FUNCTION__,\n            filename, zip_file, compression_method, kCompressionMethodStored))"];
"1000464" [label="(Call,LOG(\"%s: Did not find %s in %s\n\", __FUNCTION__, filename, zip_file))"];
"1000408" [label="(Identifier,compression_method)"];
"1000365" [label="(Call,memcmp(filename_bytes, filename, target_len))"];
"1000406" [label="(Identifier,filename)"];
"1000441" [label="(Identifier,off)"];
"1000404" [label="(Literal,\"%s: %s is compressed within %s. \"\n            \"Found compression method %u but expected %u\n\")"];
"1000409" [label="(Identifier,kCompressionMethodStored)"];
"1000360" [label="(Call,file_name_length == target_len &&\n        memcmp(filename_bytes, filename, target_len) == 0)"];
"1000364" [label="(Call,memcmp(filename_bytes, filename, target_len) == 0)"];
"1000119" [label="(Call,stat(zip_file, &stat_buf))"];
"1000407" [label="(Identifier,zip_file)"];
"1000362" [label="(Identifier,file_name_length)"];
"1000367" [label="(Identifier,filename)"];
"1000466" [label="(Identifier,__FUNCTION__)"];
"1000405" [label="(Identifier,__FUNCTION__)"];
"1000102" [label="(MethodParameterIn,const char* filename)"];
"1000103" [label="(Block,)"];
"1000471" [label="(MethodReturn,int)"];
"1000274" [label="(Identifier,filename)"];
"1000368" [label="(Identifier,target_len)"];
"1000271" [label="(Call,target_len = strlen(filename))"];
"1000458" [label="(Call,LOG(\"%s: There are %d extra bytes at the end of the central directory.\n\",\n        __FUNCTION__, end_of_central_dir - off))"];
"1000465" [label="(Literal,\"%s: Did not find %s in %s\n\")"];
"1000352" [label="(Call,* filename_bytes =\n        mem_bytes + off + kOffsetFilenameInCentralDirectory)"];
"1000411" [label="(Identifier,CRAZY_OFFSET_FAILED)"];
"1000273" [label="(Call,strlen(filename))"];
"1000363" [label="(Identifier,target_len)"];
"1000468" [label="(Identifier,zip_file)"];
"1000448" [label="(Call,LOG(\"%s: Did not find all the expected entries in the central directory. \"\n        \"Found %d but expected %d\n\", __FUNCTION__, n, num_entries))"];
"1000369" [label="(Literal,0)"];
"1000310" [label="(Call,file_name_length =\n        ReadUInt16(mem_bytes, off + kOffsetFilenameLengthInCentralDirectory))"];
"1000373" [label="(Identifier,marker)"];
"1000399" [label="(Call,compression_method != kCompressionMethodStored)"];
"1000464" [label="(Call,LOG(\"%s: Did not find %s in %s\n\", __FUNCTION__, filename, zip_file))"];
"1000361" [label="(Call,file_name_length == target_len)"];
"1000470" [label="(Identifier,CRAZY_OFFSET_FAILED)"];
"1000277" [label="(Identifier,n)"];
"1000101" [label="(MethodParameterIn,const char* zip_file)"];
"1000272" [label="(Identifier,target_len)"];
"1000467" [label="(Identifier,filename)"];
"1000403" [label="(Call,LOG(\"%s: %s is compressed within %s. \"\n            \"Found compression method %u but expected %u\n\", __FUNCTION__,\n            filename, zip_file, compression_method, kCompressionMethodStored))"];
"1000402" [label="(Block,)"];
"1000359" [label="(ControlStructure,if (file_name_length == target_len &&\n        memcmp(filename_bytes, filename, target_len) == 0))"];
"1000366" [label="(Identifier,filename_bytes)"];
"1000273" -> "1000271"  [label="AST: "];
"1000273" -> "1000274"  [label="CFG: "];
"1000274" -> "1000273"  [label="AST: "];
"1000271" -> "1000273"  [label="CFG: "];
"1000273" -> "1000471"  [label="DDG: "];
"1000273" -> "1000271"  [label="DDG: "];
"1000102" -> "1000273"  [label="DDG: "];
"1000273" -> "1000365"  [label="DDG: "];
"1000273" -> "1000403"  [label="DDG: "];
"1000273" -> "1000464"  [label="DDG: "];
"1000102" -> "1000100"  [label="AST: "];
"1000102" -> "1000471"  [label="DDG: "];
"1000102" -> "1000365"  [label="DDG: "];
"1000102" -> "1000403"  [label="DDG: "];
"1000102" -> "1000464"  [label="DDG: "];
"1000271" -> "1000103"  [label="AST: "];
"1000272" -> "1000271"  [label="AST: "];
"1000277" -> "1000271"  [label="CFG: "];
"1000271" -> "1000471"  [label="DDG: "];
"1000271" -> "1000471"  [label="DDG: "];
"1000271" -> "1000361"  [label="DDG: "];
"1000361" -> "1000360"  [label="AST: "];
"1000361" -> "1000363"  [label="CFG: "];
"1000362" -> "1000361"  [label="AST: "];
"1000363" -> "1000361"  [label="AST: "];
"1000366" -> "1000361"  [label="CFG: "];
"1000360" -> "1000361"  [label="CFG: "];
"1000361" -> "1000471"  [label="DDG: "];
"1000361" -> "1000471"  [label="DDG: "];
"1000361" -> "1000360"  [label="DDG: "];
"1000361" -> "1000360"  [label="DDG: "];
"1000310" -> "1000361"  [label="DDG: "];
"1000365" -> "1000361"  [label="DDG: "];
"1000361" -> "1000365"  [label="DDG: "];
"1000360" -> "1000359"  [label="AST: "];
"1000360" -> "1000364"  [label="CFG: "];
"1000364" -> "1000360"  [label="AST: "];
"1000373" -> "1000360"  [label="CFG: "];
"1000441" -> "1000360"  [label="CFG: "];
"1000360" -> "1000471"  [label="DDG: "];
"1000360" -> "1000471"  [label="DDG: "];
"1000360" -> "1000471"  [label="DDG: "];
"1000364" -> "1000360"  [label="DDG: "];
"1000364" -> "1000360"  [label="DDG: "];
"1000365" -> "1000364"  [label="AST: "];
"1000365" -> "1000368"  [label="CFG: "];
"1000366" -> "1000365"  [label="AST: "];
"1000367" -> "1000365"  [label="AST: "];
"1000368" -> "1000365"  [label="AST: "];
"1000369" -> "1000365"  [label="CFG: "];
"1000365" -> "1000471"  [label="DDG: "];
"1000365" -> "1000471"  [label="DDG: "];
"1000365" -> "1000471"  [label="DDG: "];
"1000365" -> "1000364"  [label="DDG: "];
"1000365" -> "1000364"  [label="DDG: "];
"1000365" -> "1000364"  [label="DDG: "];
"1000352" -> "1000365"  [label="DDG: "];
"1000365" -> "1000403"  [label="DDG: "];
"1000365" -> "1000464"  [label="DDG: "];
"1000364" -> "1000369"  [label="CFG: "];
"1000369" -> "1000364"  [label="AST: "];
"1000364" -> "1000471"  [label="DDG: "];
"1000403" -> "1000402"  [label="AST: "];
"1000403" -> "1000409"  [label="CFG: "];
"1000404" -> "1000403"  [label="AST: "];
"1000405" -> "1000403"  [label="AST: "];
"1000406" -> "1000403"  [label="AST: "];
"1000407" -> "1000403"  [label="AST: "];
"1000408" -> "1000403"  [label="AST: "];
"1000409" -> "1000403"  [label="AST: "];
"1000411" -> "1000403"  [label="CFG: "];
"1000403" -> "1000471"  [label="DDG: "];
"1000403" -> "1000471"  [label="DDG: "];
"1000403" -> "1000471"  [label="DDG: "];
"1000403" -> "1000471"  [label="DDG: "];
"1000403" -> "1000471"  [label="DDG: "];
"1000403" -> "1000471"  [label="DDG: "];
"1000119" -> "1000403"  [label="DDG: "];
"1000101" -> "1000403"  [label="DDG: "];
"1000399" -> "1000403"  [label="DDG: "];
"1000399" -> "1000403"  [label="DDG: "];
"1000464" -> "1000103"  [label="AST: "];
"1000464" -> "1000468"  [label="CFG: "];
"1000465" -> "1000464"  [label="AST: "];
"1000466" -> "1000464"  [label="AST: "];
"1000467" -> "1000464"  [label="AST: "];
"1000468" -> "1000464"  [label="AST: "];
"1000470" -> "1000464"  [label="CFG: "];
"1000464" -> "1000471"  [label="DDG: "];
"1000464" -> "1000471"  [label="DDG: "];
"1000464" -> "1000471"  [label="DDG: "];
"1000464" -> "1000471"  [label="DDG: "];
"1000458" -> "1000464"  [label="DDG: "];
"1000448" -> "1000464"  [label="DDG: "];
"1000119" -> "1000464"  [label="DDG: "];
"1000101" -> "1000464"  [label="DDG: "];
}
