digraph "0_krb5_e6ae703ae597d798e310368d52b8f38ee11c6a73_0@pointer" {
"1000112" [label="(MethodParameterIn,gss_iov_buffer_desc *iov)"];
"1000163" [label="(Call,kg_locate_header_iov(iov, iov_count, toktype))"];
"1000161" [label="(Call,header = kg_locate_header_iov(iov, iov_count, toktype))"];
"1000168" [label="(Call,header != NULL)"];
"1000167" [label="(Call,assert(header != NULL))"];
"1000179" [label="(Call,trailer != NULL)"];
"1000178" [label="(Call,trailer != NULL && trailer->buffer.length != 0)"];
"1000502" [label="(Call,kg_decrypt_iov(context, 0,\n                                      ((ctx->gss_flags & GSS_C_DCE_STYLE) != 0),\n                                      0 /*EC*/, 0 /*RRC*/,\n                                      ctx->enc, KG_USAGE_SEAL, NULL,\n                                      iov, iov_count))"];
"1000500" [label="(Call,code = kg_decrypt_iov(context, 0,\n                                      ((ctx->gss_flags & GSS_C_DCE_STYLE) != 0),\n                                      0 /*EC*/, 0 /*RRC*/,\n                                      ctx->enc, KG_USAGE_SEAL, NULL,\n                                      iov, iov_count))"];
"1000522" [label="(Call,code != 0)"];
"1000834" [label="(Call,*minor_status = code)"];
"1000532" [label="(Call,kg_confounder_size(context, ctx->enc->keyblock.enctype))"];
"1000530" [label="(Call,conflen = kg_confounder_size(context, ctx->enc->keyblock.enctype))"];
"1000542" [label="(Call,header->buffer.length != token_wrapper_len + 14 + cksum_len + conflen)"];
"1000548" [label="(Call,token_wrapper_len + 14 + cksum_len + conflen)"];
"1000550" [label="(Call,14 + cksum_len + conflen)"];
"1000552" [label="(Call,cksum_len + conflen)"];
"1000591" [label="(Call,krb5_c_checksum_length(context, md5cksum.checksum_type, &sumlen))"];
"1000589" [label="(Call,code = krb5_c_checksum_length(context, md5cksum.checksum_type, &sumlen))"];
"1000599" [label="(Call,code != 0)"];
"1000614" [label="(Call,kg_make_checksum_iov_v1(context, md5cksum.checksum_type,\n                                   cksum_len, ctx->seq, ctx->enc,\n                                   sign_usage, iov, iov_count, toktype,\n                                   &md5cksum))"];
"1000612" [label="(Call,code = kg_make_checksum_iov_v1(context, md5cksum.checksum_type,\n                                   cksum_len, ctx->seq, ctx->enc,\n                                   sign_usage, iov, iov_count, toktype,\n                                   &md5cksum))"];
"1000633" [label="(Call,code != 0)"];
"1000648" [label="(Call,kg_encrypt_inplace(context, ctx->seq, KG_USAGE_SEAL,\n                                  (g_OID_equal(ctx->mech_used,\n                                               gss_mech_krb5_old) ?\n                                   ctx->seq->keyblock.contents : NULL),\n                                  md5cksum.contents, 16))"];
"1000646" [label="(Call,code = kg_encrypt_inplace(context, ctx->seq, KG_USAGE_SEAL,\n                                  (g_OID_equal(ctx->mech_used,\n                                               gss_mech_krb5_old) ?\n                                   ctx->seq->keyblock.contents : NULL),\n                                  md5cksum.contents, 16))"];
"1000673" [label="(Call,code != 0)"];
"1000686" [label="(Call,cksum.contents = md5cksum.contents + 16 - cksum.length)"];
"1000701" [label="(Call,k5_bcmp(cksum.contents, ptr + 14, cksum.length))"];
"1000699" [label="(Call,code = k5_bcmp(cksum.contents, ptr + 14, cksum.length))"];
"1000735" [label="(Call,code != 0)"];
"1000690" [label="(Call,md5cksum.contents + 16 - cksum.length)"];
"1000830" [label="(Call,krb5_free_checksum_contents(context, &md5cksum))"];
"1000681" [label="(Call,cksum.length = cksum_len)"];
"1000694" [label="(Call,16 - cksum.length)"];
"1000716" [label="(Call,k5_bcmp(md5cksum.contents, ptr + 14, cksum_len))"];
"1000714" [label="(Call,code = k5_bcmp(md5cksum.contents, ptr + 14, cksum_len))"];
"1000748" [label="(Call,toktype == KG_TOK_WRAP_MSG)"];
"1000747" [label="(Call,toktype == KG_TOK_WRAP_MSG &&\n        (ctx->gss_flags & GSS_C_DCE_STYLE) == 0)"];
"1000761" [label="(Call,kg_fixup_padding_iov(&code, iov, iov_count))"];
"1000759" [label="(Call,retval = kg_fixup_padding_iov(&code, iov, iov_count))"];
"1000767" [label="(Call,retval != GSS_S_COMPLETE)"];
"1000838" [label="(Return,return retval;)"];
"1000654" [label="(Call,g_OID_equal(ctx->mech_used,\n                                               gss_mech_krb5_old) ?\n                                   ctx->seq->keyblock.contents : NULL)"];
"1000772" [label="(Call,conf_state != NULL)"];
"1000782" [label="(Call,qop_state != NULL)"];
"1000173" [label="(Call,kg_locate_iov(iov, iov_count, GSS_IOV_BUFFER_TYPE_TRAILER))"];
"1000171" [label="(Call,trailer = kg_locate_iov(iov, iov_count, GSS_IOV_BUFFER_TYPE_TRAILER))"];
"1000484" [label="(Call,kg_arcfour_docrypt_iov(context, enc_key, 0,\n                                              &bigend_seqnum[0], 4,\n                                              iov, iov_count))"];
"1000482" [label="(Call,code = kg_arcfour_docrypt_iov(context, enc_key, 0,\n                                              &bigend_seqnum[0], 4,\n                                              iov, iov_count))"];
"1000495" [label="(Call,krb5_free_keyblock(context, enc_key))"];
"1000271" [label="(Call,toktype != KG_TOK_WRAP_MSG)"];
"1000270" [label="(Call,toktype != KG_TOK_WRAP_MSG && sealalg != 0xFFFF)"];
"1000286" [label="(Call,toktype == KG_TOK_WRAP_MSG)"];
"1000285" [label="(Call,toktype == KG_TOK_WRAP_MSG &&\n        !(sealalg == 0xFFFF || sealalg == ctx->sealalg))"];
"1000363" [label="(Call,toktype != KG_TOK_WRAP_MSG)"];
"1000416" [label="(Call,toktype == KG_TOK_WRAP_MSG)"];
"1000422" [label="(Identifier,sealalg)"];
"1000700" [label="(Identifier,code)"];
"1000419" [label="(Block,)"];
"1000171" [label="(Call,trailer = kg_locate_iov(iov, iov_count, GSS_IOV_BUFFER_TYPE_TRAILER))"];
"1000649" [label="(Identifier,context)"];
"1000686" [label="(Call,cksum.contents = md5cksum.contents + 16 - cksum.length)"];
"1000365" [label="(Identifier,KG_TOK_WRAP_MSG)"];
"1000162" [label="(Identifier,header)"];
"1000202" [label="(Identifier,header)"];
"1000638" [label="(Identifier,retval)"];
"1000672" [label="(ControlStructure,if (code != 0))"];
"1000287" [label="(Identifier,toktype)"];
"1000687" [label="(Call,cksum.contents)"];
"1000726" [label="(Call,code = 0)"];
"1000764" [label="(Identifier,iov)"];
"1000165" [label="(Identifier,iov_count)"];
"1000518" [label="(Identifier,NULL)"];
"1000550" [label="(Call,14 + cksum_len + conflen)"];
"1000440" [label="(Call,krb5_k_key_keyblock(context, ctx->enc, &enc_key))"];
"1000233" [label="(Call,ptr[1] << 8)"];
"1000152" [label="(Call,md5cksum.contents = cksum.contents = NULL)"];
"1000634" [label="(Identifier,code)"];
"1000782" [label="(Call,qop_state != NULL)"];
"1000302" [label="(Identifier,minor_status)"];
"1000787" [label="(Identifier,qop_state)"];
"1000532" [label="(Call,kg_confounder_size(context, ctx->enc->keyblock.enctype))"];
"1000765" [label="(Identifier,iov_count)"];
"1000269" [label="(ControlStructure,if (toktype != KG_TOK_WRAP_MSG && sealalg != 0xFFFF))"];
"1000448" [label="(Call,code != 0)"];
"1000541" [label="(ControlStructure,if (header->buffer.length != token_wrapper_len + 14 + cksum_len + conflen))"];
"1000551" [label="(Literal,14)"];
"1000783" [label="(Identifier,qop_state)"];
"1000415" [label="(ControlStructure,if (toktype == KG_TOK_WRAP_MSG))"];
"1000431" [label="(Block,)"];
"1000272" [label="(Identifier,toktype)"];
"1000747" [label="(Call,toktype == KG_TOK_WRAP_MSG &&\n        (ctx->gss_flags & GSS_C_DCE_STYLE) == 0)"];
"1000531" [label="(Identifier,conflen)"];
"1000674" [label="(Identifier,code)"];
"1000499" [label="(Block,)"];
"1000523" [label="(Identifier,code)"];
"1000561" [label="(Identifier,signalg)"];
"1000590" [label="(Identifier,code)"];
"1000742" [label="(Call,retval = GSS_S_BAD_SIG)"];
"1000723" [label="(Identifier,cksum_len)"];
"1000647" [label="(Identifier,code)"];
"1000486" [label="(Identifier,enc_key)"];
"1000601" [label="(Literal,0)"];
"1000517" [label="(Identifier,KG_USAGE_SEAL)"];
"1000668" [label="(Call,md5cksum.contents)"];
"1000405" [label="(Call,code != 0)"];
"1000545" [label="(Identifier,header)"];
"1000527" [label="(Identifier,retval)"];
"1000736" [label="(Identifier,code)"];
"1000140" [label="(Call,sign_usage = KG_USAGE_SIGN)"];
"1000172" [label="(Identifier,trailer)"];
"1000215" [label="(Call,ptr = (unsigned char *)header->buffer.value + token_wrapper_len)"];
"1000556" [label="(Call,retval = GSS_S_DEFECTIVE_TOKEN)"];
"1000603" [label="(Call,retval = GSS_S_FAILURE)"];
"1000117" [label="(MethodParameterIn,int toktype)"];
"1000774" [label="(Identifier,NULL)"];
"1000839" [label="(Identifier,retval)"];
"1000181" [label="(Identifier,NULL)"];
"1000168" [label="(Call,header != NULL)"];
"1000635" [label="(Literal,0)"];
"1000600" [label="(Identifier,code)"];
"1000836" [label="(Identifier,minor_status)"];
"1000758" [label="(Block,)"];
"1000174" [label="(Identifier,iov)"];
"1000274" [label="(Call,sealalg != 0xFFFF)"];
"1000629" [label="(Identifier,toktype)"];
"1000288" [label="(Identifier,KG_TOK_WRAP_MSG)"];
"1000596" [label="(Call,&sumlen)"];
"1000678" [label="(Identifier,retval)"];
"1000592" [label="(Identifier,context)"];
"1000452" [label="(Call,retval = GSS_S_FAILURE)"];
"1000176" [label="(Identifier,GSS_IOV_BUFFER_TYPE_TRAILER)"];
"1000716" [label="(Call,k5_bcmp(md5cksum.contents, ptr + 14, cksum_len))"];
"1000362" [label="(ControlStructure,if (toktype != KG_TOK_WRAP_MSG))"];
"1000708" [label="(Call,cksum.length)"];
"1000589" [label="(Call,code = krb5_c_checksum_length(context, md5cksum.checksum_type, &sumlen))"];
"1000838" [label="(Return,return retval;)"];
"1000831" [label="(Identifier,context)"];
"1000273" [label="(Identifier,KG_TOK_WRAP_MSG)"];
"1000643" [label="(Block,)"];
"1000751" [label="(Call,(ctx->gss_flags & GSS_C_DCE_STYLE) == 0)"];
"1000691" [label="(Call,md5cksum.contents)"];
"1000688" [label="(Identifier,cksum)"];
"1000696" [label="(Call,cksum.length)"];
"1000609" [label="(Identifier,md5cksum)"];
"1000543" [label="(Call,header->buffer.length)"];
"1000513" [label="(Literal,0)"];
"1000552" [label="(Call,cksum_len + conflen)"];
"1000766" [label="(ControlStructure,if (retval != GSS_S_COMPLETE))"];
"1000178" [label="(Call,trailer != NULL && trailer->buffer.length != 0)"];
"1000175" [label="(Identifier,iov_count)"];
"1000633" [label="(Call,code != 0)"];
"1000311" [label="(Identifier,ctx)"];
"1000548" [label="(Call,token_wrapper_len + 14 + cksum_len + conflen)"];
"1000737" [label="(Literal,0)"];
"1000762" [label="(Call,&code)"];
"1000717" [label="(Call,md5cksum.contents)"];
"1000292" [label="(Identifier,sealalg)"];
"1000754" [label="(Identifier,ctx)"];
"1000270" [label="(Call,toktype != KG_TOK_WRAP_MSG && sealalg != 0xFFFF)"];
"1000275" [label="(Identifier,sealalg)"];
"1000626" [label="(Identifier,sign_usage)"];
"1000773" [label="(Identifier,conf_state)"];
"1000170" [label="(Identifier,NULL)"];
"1000161" [label="(Call,header = kg_locate_header_iov(iov, iov_count, toktype))"];
"1000284" [label="(ControlStructure,if (toktype == KG_TOK_WRAP_MSG &&\n        !(sealalg == 0xFFFF || sealalg == ctx->sealalg)))"];
"1000367" [label="(Identifier,sign_usage)"];
"1000485" [label="(Identifier,context)"];
"1000371" [label="(Call,cksum_len = 16)"];
"1000724" [label="(ControlStructure,break;)"];
"1000115" [label="(MethodParameterIn,int *conf_state)"];
"1000521" [label="(ControlStructure,if (code != 0))"];
"1000646" [label="(Call,code = kg_encrypt_inplace(context, ctx->seq, KG_USAGE_SEAL,\n                                  (g_OID_equal(ctx->mech_used,\n                                               gss_mech_krb5_old) ?\n                                   ctx->seq->keyblock.contents : NULL),\n                                  md5cksum.contents, 16))"];
"1000526" [label="(Call,retval = GSS_S_FAILURE)"];
"1000654" [label="(Call,g_OID_equal(ctx->mech_used,\n                                               gss_mech_krb5_old) ?\n                                   ctx->seq->keyblock.contents : NULL)"];
"1000166" [label="(Identifier,toktype)"];
"1000520" [label="(Identifier,iov_count)"];
"1000673" [label="(Call,code != 0)"];
"1000359" [label="(Call,cksum_len = 8)"];
"1000777" [label="(Identifier,conf_state)"];
"1000581" [label="(Call,md5cksum.checksum_type = CKSUMTYPE_HMAC_SHA1_DES3)"];
"1000522" [label="(Call,code != 0)"];
"1000416" [label="(Call,toktype == KG_TOK_WRAP_MSG)"];
"1000637" [label="(Call,retval = GSS_S_FAILURE)"];
"1000496" [label="(Identifier,context)"];
"1000613" [label="(Identifier,code)"];
"1000173" [label="(Call,kg_locate_iov(iov, iov_count, GSS_IOV_BUFFER_TYPE_TRAILER))"];
"1000628" [label="(Identifier,iov_count)"];
"1000772" [label="(Call,conf_state != NULL)"];
"1000376" [label="(Call,cksum_len = 20)"];
"1000648" [label="(Call,kg_encrypt_inplace(context, ctx->seq, KG_USAGE_SEAL,\n                                  (g_OID_equal(ctx->mech_used,\n                                               gss_mech_krb5_old) ?\n                                   ctx->seq->keyblock.contents : NULL),\n                                  md5cksum.contents, 16))"];
"1000735" [label="(Call,code != 0)"];
"1000748" [label="(Call,toktype == KG_TOK_WRAP_MSG)"];
"1000720" [label="(Call,ptr + 14)"];
"1000113" [label="(MethodParameterIn,int iov_count)"];
"1000169" [label="(Identifier,header)"];
"1000505" [label="(Call,(ctx->gss_flags & GSS_C_DCE_STYLE) != 0)"];
"1000729" [label="(Call,retval = GSS_S_DEFECTIVE_TOKEN)"];
"1000677" [label="(Call,retval = GSS_S_FAILURE)"];
"1000768" [label="(Identifier,retval)"];
"1000280" [label="(Identifier,minor_status)"];
"1000502" [label="(Call,kg_decrypt_iov(context, 0,\n                                      ((ctx->gss_flags & GSS_C_DCE_STYLE) != 0),\n                                      0 /*EC*/, 0 /*RRC*/,\n                                      ctx->enc, KG_USAGE_SEAL, NULL,\n                                      iov, iov_count))"];
"1000514" [label="(Call,ctx->enc)"];
"1000286" [label="(Call,toktype == KG_TOK_WRAP_MSG)"];
"1000739" [label="(Call,code = 0)"];
"1000740" [label="(Identifier,code)"];
"1000488" [label="(Call,&bigend_seqnum[0])"];
"1000837" [label="(Identifier,code)"];
"1000109" [label="(MethodParameterIn,krb5_context context)"];
"1000554" [label="(Identifier,conflen)"];
"1000389" [label="(Call,kg_get_seq_num(context, ctx->seq, ptr + 14, ptr + 6, &direction,\n                          &seqnum))"];
"1000252" [label="(Call,ptr[4] != 0xFF)"];
"1000682" [label="(Call,cksum.length)"];
"1000289" [label="(Call,!(sealalg == 0xFFFF || sealalg == ctx->sealalg))"];
"1000685" [label="(Identifier,cksum_len)"];
"1000482" [label="(Call,code = kg_arcfour_docrypt_iov(context, enc_key, 0,\n                                              &bigend_seqnum[0], 4,\n                                              iov, iov_count))"];
"1000504" [label="(Literal,0)"];
"1000690" [label="(Call,md5cksum.contents + 16 - cksum.length)"];
"1000699" [label="(Call,code = k5_bcmp(cksum.contents, ptr + 14, cksum.length))"];
"1000164" [label="(Identifier,iov)"];
"1000734" [label="(ControlStructure,if (code != 0))"];
"1000750" [label="(Identifier,KG_TOK_WRAP_MSG)"];
"1000840" [label="(MethodReturn,RET)"];
"1000627" [label="(Identifier,iov)"];
"1000669" [label="(Identifier,md5cksum)"];
"1000542" [label="(Call,header->buffer.length != token_wrapper_len + 14 + cksum_len + conflen)"];
"1000364" [label="(Identifier,toktype)"];
"1000177" [label="(ControlStructure,if (trailer != NULL && trailer->buffer.length != 0))"];
"1000192" [label="(Identifier,minor_status)"];
"1000492" [label="(Literal,4)"];
"1000667" [label="(Identifier,NULL)"];
"1000112" [label="(MethodParameterIn,gss_iov_buffer_desc *iov)"];
"1000705" [label="(Call,ptr + 14)"];
"1000784" [label="(Identifier,NULL)"];
"1000512" [label="(Literal,0)"];
"1000182" [label="(Call,trailer->buffer.length != 0)"];
"1000257" [label="(Call,ptr[5] != 0xFF)"];
"1000834" [label="(Call,*minor_status = code)"];
"1000557" [label="(Identifier,retval)"];
"1000761" [label="(Call,kg_fixup_padding_iov(&code, iov, iov_count))"];
"1000553" [label="(Identifier,cksum_len)"];
"1000533" [label="(Identifier,context)"];
"1000245" [label="(Call,ptr[3] << 8)"];
"1000417" [label="(Identifier,toktype)"];
"1000493" [label="(Identifier,iov)"];
"1000619" [label="(Identifier,cksum_len)"];
"1000132" [label="(Call,conflen = 0)"];
"1000497" [label="(Identifier,enc_key)"];
"1000793" [label="(Identifier,ctx)"];
"1000363" [label="(Call,toktype != KG_TOK_WRAP_MSG)"];
"1000632" [label="(ControlStructure,if (code != 0))"];
"1000816" [label="(Call,code = 0)"];
"1000549" [label="(Identifier,token_wrapper_len)"];
"1000179" [label="(Call,trailer != NULL)"];
"1000524" [label="(Literal,0)"];
"1000702" [label="(Call,cksum.contents)"];
"1000759" [label="(Call,retval = kg_fixup_padding_iov(&code, iov, iov_count))"];
"1000271" [label="(Call,toktype != KG_TOK_WRAP_MSG)"];
"1000593" [label="(Call,md5cksum.checksum_type)"];
"1000769" [label="(Identifier,GSS_S_COMPLETE)"];
"1000612" [label="(Call,code = kg_make_checksum_iov_v1(context, md5cksum.checksum_type,\n                                   cksum_len, ctx->seq, ctx->enc,\n                                   sign_usage, iov, iov_count, toktype,\n                                   &md5cksum))"];
"1000835" [label="(Call,*minor_status)"];
"1000604" [label="(Identifier,retval)"];
"1000530" [label="(Call,conflen = kg_confounder_size(context, ctx->enc->keyblock.enctype))"];
"1000369" [label="(ControlStructure,break;)"];
"1000285" [label="(Call,toktype == KG_TOK_WRAP_MSG &&\n        !(sealalg == 0xFFFF || sealalg == ctx->sealalg))"];
"1000642" [label="(Identifier,signalg)"];
"1000770" [label="(ControlStructure,goto cleanup;)"];
"1000185" [label="(Identifier,trailer)"];
"1000695" [label="(Literal,16)"];
"1000614" [label="(Call,kg_make_checksum_iov_v1(context, md5cksum.checksum_type,\n                                   cksum_len, ctx->seq, ctx->enc,\n                                   sign_usage, iov, iov_count, toktype,\n                                   &md5cksum))"];
"1000760" [label="(Identifier,retval)"];
"1000681" [label="(Call,cksum.length = cksum_len)"];
"1000591" [label="(Call,krb5_c_checksum_length(context, md5cksum.checksum_type, &sumlen))"];
"1000832" [label="(Call,&md5cksum)"];
"1000167" [label="(Call,assert(header != NULL))"];
"1000616" [label="(Call,md5cksum.checksum_type)"];
"1000500" [label="(Call,code = kg_decrypt_iov(context, 0,\n                                      ((ctx->gss_flags & GSS_C_DCE_STYLE) != 0),\n                                      0 /*EC*/, 0 /*RRC*/,\n                                      ctx->enc, KG_USAGE_SEAL, NULL,\n                                      iov, iov_count))"];
"1000494" [label="(Identifier,iov_count)"];
"1000599" [label="(Call,code != 0)"];
"1000483" [label="(Identifier,code)"];
"1000574" [label="(Call,md5cksum.checksum_type = CKSUMTYPE_HMAC_MD5_ARCFOUR)"];
"1000519" [label="(Identifier,iov)"];
"1000567" [label="(Call,md5cksum.checksum_type = CKSUMTYPE_RSA_MD5)"];
"1000660" [label="(Call,ctx->seq->keyblock.contents)"];
"1000180" [label="(Identifier,trailer)"];
"1000620" [label="(Call,ctx->seq)"];
"1000118" [label="(Block,)"];
"1000714" [label="(Call,code = k5_bcmp(md5cksum.contents, ptr + 14, cksum_len))"];
"1000114" [label="(MethodParameterIn,size_t token_wrapper_len)"];
"1000163" [label="(Call,kg_locate_header_iov(iov, iov_count, toktype))"];
"1000671" [label="(Literal,16)"];
"1000746" [label="(ControlStructure,if (toktype == KG_TOK_WRAP_MSG &&\n        (ctx->gss_flags & GSS_C_DCE_STYLE) == 0))"];
"1000767" [label="(Call,retval != GSS_S_COMPLETE)"];
"1000655" [label="(Call,g_OID_equal(ctx->mech_used,\n                                               gss_mech_krb5_old))"];
"1000418" [label="(Identifier,KG_TOK_WRAP_MSG)"];
"1000711" [label="(ControlStructure,break;)"];
"1000819" [label="(Call,retval = g_order_check(&ctx->seqstate, (gssint_uint64)seqnum))"];
"1000534" [label="(Call,ctx->enc->keyblock.enctype)"];
"1000650" [label="(Call,ctx->seq)"];
"1000771" [label="(ControlStructure,if (conf_state != NULL))"];
"1000503" [label="(Identifier,context)"];
"1000484" [label="(Call,kg_arcfour_docrypt_iov(context, enc_key, 0,\n                                              &bigend_seqnum[0], 4,\n                                              iov, iov_count))"];
"1000830" [label="(Call,krb5_free_checksum_contents(context, &md5cksum))"];
"1000694" [label="(Call,16 - cksum.length)"];
"1000630" [label="(Call,&md5cksum)"];
"1000623" [label="(Call,ctx->enc)"];
"1000116" [label="(MethodParameterIn,gss_qop_t *qop_state)"];
"1000199" [label="(Call,header->buffer.length < token_wrapper_len + 14)"];
"1000749" [label="(Identifier,toktype)"];
"1000501" [label="(Identifier,code)"];
"1000701" [label="(Call,k5_bcmp(cksum.contents, ptr + 14, cksum.length))"];
"1000615" [label="(Identifier,context)"];
"1000683" [label="(Identifier,cksum)"];
"1000366" [label="(Call,sign_usage = 15)"];
"1000675" [label="(Literal,0)"];
"1000715" [label="(Identifier,code)"];
"1000653" [label="(Identifier,KG_USAGE_SEAL)"];
"1000598" [label="(ControlStructure,if (code != 0))"];
"1000781" [label="(ControlStructure,if (qop_state != NULL))"];
"1000487" [label="(Literal,0)"];
"1000495" [label="(Call,krb5_free_keyblock(context, enc_key))"];
"1000112" -> "1000108"  [label="AST: "];
"1000112" -> "1000840"  [label="DDG: iov"];
"1000112" -> "1000163"  [label="DDG: iov"];
"1000112" -> "1000173"  [label="DDG: iov"];
"1000112" -> "1000484"  [label="DDG: iov"];
"1000112" -> "1000502"  [label="DDG: iov"];
"1000112" -> "1000614"  [label="DDG: iov"];
"1000112" -> "1000761"  [label="DDG: iov"];
"1000163" -> "1000161"  [label="AST: "];
"1000163" -> "1000166"  [label="CFG: "];
"1000164" -> "1000163"  [label="AST: "];
"1000165" -> "1000163"  [label="AST: "];
"1000166" -> "1000163"  [label="AST: "];
"1000161" -> "1000163"  [label="CFG: "];
"1000163" -> "1000840"  [label="DDG: toktype"];
"1000163" -> "1000161"  [label="DDG: iov"];
"1000163" -> "1000161"  [label="DDG: iov_count"];
"1000163" -> "1000161"  [label="DDG: toktype"];
"1000113" -> "1000163"  [label="DDG: iov_count"];
"1000117" -> "1000163"  [label="DDG: toktype"];
"1000163" -> "1000173"  [label="DDG: iov"];
"1000163" -> "1000173"  [label="DDG: iov_count"];
"1000163" -> "1000271"  [label="DDG: toktype"];
"1000161" -> "1000118"  [label="AST: "];
"1000162" -> "1000161"  [label="AST: "];
"1000169" -> "1000161"  [label="CFG: "];
"1000161" -> "1000840"  [label="DDG: kg_locate_header_iov(iov, iov_count, toktype)"];
"1000161" -> "1000168"  [label="DDG: header"];
"1000168" -> "1000167"  [label="AST: "];
"1000168" -> "1000170"  [label="CFG: "];
"1000169" -> "1000168"  [label="AST: "];
"1000170" -> "1000168"  [label="AST: "];
"1000167" -> "1000168"  [label="CFG: "];
"1000168" -> "1000840"  [label="DDG: header"];
"1000168" -> "1000167"  [label="DDG: header"];
"1000168" -> "1000167"  [label="DDG: NULL"];
"1000168" -> "1000179"  [label="DDG: NULL"];
"1000167" -> "1000118"  [label="AST: "];
"1000172" -> "1000167"  [label="CFG: "];
"1000167" -> "1000840"  [label="DDG: header != NULL"];
"1000167" -> "1000840"  [label="DDG: assert(header != NULL)"];
"1000179" -> "1000178"  [label="AST: "];
"1000179" -> "1000181"  [label="CFG: "];
"1000180" -> "1000179"  [label="AST: "];
"1000181" -> "1000179"  [label="AST: "];
"1000185" -> "1000179"  [label="CFG: "];
"1000178" -> "1000179"  [label="CFG: "];
"1000179" -> "1000840"  [label="DDG: NULL"];
"1000179" -> "1000840"  [label="DDG: trailer"];
"1000179" -> "1000178"  [label="DDG: trailer"];
"1000179" -> "1000178"  [label="DDG: NULL"];
"1000171" -> "1000179"  [label="DDG: trailer"];
"1000179" -> "1000502"  [label="DDG: NULL"];
"1000179" -> "1000648"  [label="DDG: NULL"];
"1000179" -> "1000654"  [label="DDG: NULL"];
"1000179" -> "1000772"  [label="DDG: NULL"];
"1000178" -> "1000177"  [label="AST: "];
"1000178" -> "1000182"  [label="CFG: "];
"1000182" -> "1000178"  [label="AST: "];
"1000192" -> "1000178"  [label="CFG: "];
"1000202" -> "1000178"  [label="CFG: "];
"1000178" -> "1000840"  [label="DDG: trailer->buffer.length != 0"];
"1000178" -> "1000840"  [label="DDG: trailer != NULL && trailer->buffer.length != 0"];
"1000178" -> "1000840"  [label="DDG: trailer != NULL"];
"1000182" -> "1000178"  [label="DDG: trailer->buffer.length"];
"1000182" -> "1000178"  [label="DDG: 0"];
"1000502" -> "1000500"  [label="AST: "];
"1000502" -> "1000520"  [label="CFG: "];
"1000503" -> "1000502"  [label="AST: "];
"1000504" -> "1000502"  [label="AST: "];
"1000505" -> "1000502"  [label="AST: "];
"1000512" -> "1000502"  [label="AST: "];
"1000513" -> "1000502"  [label="AST: "];
"1000514" -> "1000502"  [label="AST: "];
"1000517" -> "1000502"  [label="AST: "];
"1000518" -> "1000502"  [label="AST: "];
"1000519" -> "1000502"  [label="AST: "];
"1000520" -> "1000502"  [label="AST: "];
"1000500" -> "1000502"  [label="CFG: "];
"1000502" -> "1000840"  [label="DDG: iov_count"];
"1000502" -> "1000840"  [label="DDG: ctx->enc"];
"1000502" -> "1000840"  [label="DDG: iov"];
"1000502" -> "1000840"  [label="DDG: NULL"];
"1000502" -> "1000840"  [label="DDG: (ctx->gss_flags & GSS_C_DCE_STYLE) != 0"];
"1000502" -> "1000840"  [label="DDG: KG_USAGE_SEAL"];
"1000502" -> "1000500"  [label="DDG: 0"];
"1000502" -> "1000500"  [label="DDG: KG_USAGE_SEAL"];
"1000502" -> "1000500"  [label="DDG: ctx->enc"];
"1000502" -> "1000500"  [label="DDG: iov"];
"1000502" -> "1000500"  [label="DDG: context"];
"1000502" -> "1000500"  [label="DDG: (ctx->gss_flags & GSS_C_DCE_STYLE) != 0"];
"1000502" -> "1000500"  [label="DDG: NULL"];
"1000502" -> "1000500"  [label="DDG: iov_count"];
"1000389" -> "1000502"  [label="DDG: context"];
"1000109" -> "1000502"  [label="DDG: context"];
"1000505" -> "1000502"  [label="DDG: ctx->gss_flags & GSS_C_DCE_STYLE"];
"1000505" -> "1000502"  [label="DDG: 0"];
"1000173" -> "1000502"  [label="DDG: iov"];
"1000173" -> "1000502"  [label="DDG: iov_count"];
"1000113" -> "1000502"  [label="DDG: iov_count"];
"1000502" -> "1000532"  [label="DDG: context"];
"1000502" -> "1000614"  [label="DDG: ctx->enc"];
"1000502" -> "1000614"  [label="DDG: iov"];
"1000502" -> "1000614"  [label="DDG: iov_count"];
"1000502" -> "1000648"  [label="DDG: KG_USAGE_SEAL"];
"1000502" -> "1000648"  [label="DDG: NULL"];
"1000502" -> "1000654"  [label="DDG: NULL"];
"1000502" -> "1000772"  [label="DDG: NULL"];
"1000502" -> "1000830"  [label="DDG: context"];
"1000500" -> "1000499"  [label="AST: "];
"1000501" -> "1000500"  [label="AST: "];
"1000523" -> "1000500"  [label="CFG: "];
"1000500" -> "1000840"  [label="DDG: kg_decrypt_iov(context, 0,\n                                      ((ctx->gss_flags & GSS_C_DCE_STYLE) != 0),\n                                      0 /*EC*/, 0 /*RRC*/,\n                                      ctx->enc, KG_USAGE_SEAL, NULL,\n                                      iov, iov_count)"];
"1000500" -> "1000522"  [label="DDG: code"];
"1000522" -> "1000521"  [label="AST: "];
"1000522" -> "1000524"  [label="CFG: "];
"1000523" -> "1000522"  [label="AST: "];
"1000524" -> "1000522"  [label="AST: "];
"1000527" -> "1000522"  [label="CFG: "];
"1000531" -> "1000522"  [label="CFG: "];
"1000522" -> "1000840"  [label="DDG: code != 0"];
"1000482" -> "1000522"  [label="DDG: code"];
"1000522" -> "1000834"  [label="DDG: code"];
"1000834" -> "1000118"  [label="AST: "];
"1000834" -> "1000837"  [label="CFG: "];
"1000835" -> "1000834"  [label="AST: "];
"1000837" -> "1000834"  [label="AST: "];
"1000839" -> "1000834"  [label="CFG: "];
"1000834" -> "1000840"  [label="DDG: *minor_status"];
"1000834" -> "1000840"  [label="DDG: code"];
"1000816" -> "1000834"  [label="DDG: code"];
"1000726" -> "1000834"  [label="DDG: code"];
"1000599" -> "1000834"  [label="DDG: code"];
"1000448" -> "1000834"  [label="DDG: code"];
"1000405" -> "1000834"  [label="DDG: code"];
"1000735" -> "1000834"  [label="DDG: code"];
"1000633" -> "1000834"  [label="DDG: code"];
"1000673" -> "1000834"  [label="DDG: code"];
"1000739" -> "1000834"  [label="DDG: code"];
"1000532" -> "1000530"  [label="AST: "];
"1000532" -> "1000534"  [label="CFG: "];
"1000533" -> "1000532"  [label="AST: "];
"1000534" -> "1000532"  [label="AST: "];
"1000530" -> "1000532"  [label="CFG: "];
"1000532" -> "1000840"  [label="DDG: ctx->enc->keyblock.enctype"];
"1000532" -> "1000530"  [label="DDG: context"];
"1000532" -> "1000530"  [label="DDG: ctx->enc->keyblock.enctype"];
"1000495" -> "1000532"  [label="DDG: context"];
"1000389" -> "1000532"  [label="DDG: context"];
"1000109" -> "1000532"  [label="DDG: context"];
"1000532" -> "1000591"  [label="DDG: context"];
"1000532" -> "1000830"  [label="DDG: context"];
"1000530" -> "1000419"  [label="AST: "];
"1000531" -> "1000530"  [label="AST: "];
"1000545" -> "1000530"  [label="CFG: "];
"1000530" -> "1000840"  [label="DDG: kg_confounder_size(context, ctx->enc->keyblock.enctype)"];
"1000530" -> "1000542"  [label="DDG: conflen"];
"1000530" -> "1000548"  [label="DDG: conflen"];
"1000530" -> "1000550"  [label="DDG: conflen"];
"1000530" -> "1000552"  [label="DDG: conflen"];
"1000542" -> "1000541"  [label="AST: "];
"1000542" -> "1000548"  [label="CFG: "];
"1000543" -> "1000542"  [label="AST: "];
"1000548" -> "1000542"  [label="AST: "];
"1000557" -> "1000542"  [label="CFG: "];
"1000561" -> "1000542"  [label="CFG: "];
"1000542" -> "1000840"  [label="DDG: token_wrapper_len + 14 + cksum_len + conflen"];
"1000542" -> "1000840"  [label="DDG: header->buffer.length != token_wrapper_len + 14 + cksum_len + conflen"];
"1000542" -> "1000840"  [label="DDG: header->buffer.length"];
"1000199" -> "1000542"  [label="DDG: header->buffer.length"];
"1000114" -> "1000542"  [label="DDG: token_wrapper_len"];
"1000376" -> "1000542"  [label="DDG: cksum_len"];
"1000359" -> "1000542"  [label="DDG: cksum_len"];
"1000371" -> "1000542"  [label="DDG: cksum_len"];
"1000132" -> "1000542"  [label="DDG: conflen"];
"1000548" -> "1000550"  [label="CFG: "];
"1000549" -> "1000548"  [label="AST: "];
"1000550" -> "1000548"  [label="AST: "];
"1000548" -> "1000840"  [label="DDG: 14 + cksum_len + conflen"];
"1000548" -> "1000840"  [label="DDG: token_wrapper_len"];
"1000114" -> "1000548"  [label="DDG: token_wrapper_len"];
"1000376" -> "1000548"  [label="DDG: cksum_len"];
"1000359" -> "1000548"  [label="DDG: cksum_len"];
"1000371" -> "1000548"  [label="DDG: cksum_len"];
"1000132" -> "1000548"  [label="DDG: conflen"];
"1000550" -> "1000552"  [label="CFG: "];
"1000551" -> "1000550"  [label="AST: "];
"1000552" -> "1000550"  [label="AST: "];
"1000550" -> "1000840"  [label="DDG: cksum_len + conflen"];
"1000376" -> "1000550"  [label="DDG: cksum_len"];
"1000359" -> "1000550"  [label="DDG: cksum_len"];
"1000371" -> "1000550"  [label="DDG: cksum_len"];
"1000132" -> "1000550"  [label="DDG: conflen"];
"1000552" -> "1000554"  [label="CFG: "];
"1000553" -> "1000552"  [label="AST: "];
"1000554" -> "1000552"  [label="AST: "];
"1000552" -> "1000840"  [label="DDG: cksum_len"];
"1000552" -> "1000840"  [label="DDG: conflen"];
"1000376" -> "1000552"  [label="DDG: cksum_len"];
"1000359" -> "1000552"  [label="DDG: cksum_len"];
"1000371" -> "1000552"  [label="DDG: cksum_len"];
"1000132" -> "1000552"  [label="DDG: conflen"];
"1000591" -> "1000589"  [label="AST: "];
"1000591" -> "1000596"  [label="CFG: "];
"1000592" -> "1000591"  [label="AST: "];
"1000593" -> "1000591"  [label="AST: "];
"1000596" -> "1000591"  [label="AST: "];
"1000589" -> "1000591"  [label="CFG: "];
"1000591" -> "1000840"  [label="DDG: &sumlen"];
"1000591" -> "1000840"  [label="DDG: md5cksum.checksum_type"];
"1000591" -> "1000589"  [label="DDG: context"];
"1000591" -> "1000589"  [label="DDG: md5cksum.checksum_type"];
"1000591" -> "1000589"  [label="DDG: &sumlen"];
"1000389" -> "1000591"  [label="DDG: context"];
"1000109" -> "1000591"  [label="DDG: context"];
"1000574" -> "1000591"  [label="DDG: md5cksum.checksum_type"];
"1000567" -> "1000591"  [label="DDG: md5cksum.checksum_type"];
"1000581" -> "1000591"  [label="DDG: md5cksum.checksum_type"];
"1000591" -> "1000614"  [label="DDG: context"];
"1000591" -> "1000614"  [label="DDG: md5cksum.checksum_type"];
"1000591" -> "1000830"  [label="DDG: context"];
"1000589" -> "1000118"  [label="AST: "];
"1000590" -> "1000589"  [label="AST: "];
"1000600" -> "1000589"  [label="CFG: "];
"1000589" -> "1000840"  [label="DDG: krb5_c_checksum_length(context, md5cksum.checksum_type, &sumlen)"];
"1000589" -> "1000599"  [label="DDG: code"];
"1000599" -> "1000598"  [label="AST: "];
"1000599" -> "1000601"  [label="CFG: "];
"1000600" -> "1000599"  [label="AST: "];
"1000601" -> "1000599"  [label="AST: "];
"1000604" -> "1000599"  [label="CFG: "];
"1000609" -> "1000599"  [label="CFG: "];
"1000599" -> "1000840"  [label="DDG: code != 0"];
"1000614" -> "1000612"  [label="AST: "];
"1000614" -> "1000630"  [label="CFG: "];
"1000615" -> "1000614"  [label="AST: "];
"1000616" -> "1000614"  [label="AST: "];
"1000619" -> "1000614"  [label="AST: "];
"1000620" -> "1000614"  [label="AST: "];
"1000623" -> "1000614"  [label="AST: "];
"1000626" -> "1000614"  [label="AST: "];
"1000627" -> "1000614"  [label="AST: "];
"1000628" -> "1000614"  [label="AST: "];
"1000629" -> "1000614"  [label="AST: "];
"1000630" -> "1000614"  [label="AST: "];
"1000612" -> "1000614"  [label="CFG: "];
"1000614" -> "1000840"  [label="DDG: ctx->enc"];
"1000614" -> "1000840"  [label="DDG: toktype"];
"1000614" -> "1000840"  [label="DDG: sign_usage"];
"1000614" -> "1000840"  [label="DDG: md5cksum.checksum_type"];
"1000614" -> "1000840"  [label="DDG: iov"];
"1000614" -> "1000840"  [label="DDG: iov_count"];
"1000614" -> "1000840"  [label="DDG: cksum_len"];
"1000614" -> "1000840"  [label="DDG: ctx->seq"];
"1000614" -> "1000612"  [label="DDG: iov"];
"1000614" -> "1000612"  [label="DDG: cksum_len"];
"1000614" -> "1000612"  [label="DDG: md5cksum.checksum_type"];
"1000614" -> "1000612"  [label="DDG: ctx->enc"];
"1000614" -> "1000612"  [label="DDG: &md5cksum"];
"1000614" -> "1000612"  [label="DDG: iov_count"];
"1000614" -> "1000612"  [label="DDG: ctx->seq"];
"1000614" -> "1000612"  [label="DDG: sign_usage"];
"1000614" -> "1000612"  [label="DDG: context"];
"1000614" -> "1000612"  [label="DDG: toktype"];
"1000109" -> "1000614"  [label="DDG: context"];
"1000376" -> "1000614"  [label="DDG: cksum_len"];
"1000359" -> "1000614"  [label="DDG: cksum_len"];
"1000371" -> "1000614"  [label="DDG: cksum_len"];
"1000389" -> "1000614"  [label="DDG: ctx->seq"];
"1000440" -> "1000614"  [label="DDG: ctx->enc"];
"1000140" -> "1000614"  [label="DDG: sign_usage"];
"1000366" -> "1000614"  [label="DDG: sign_usage"];
"1000484" -> "1000614"  [label="DDG: iov"];
"1000484" -> "1000614"  [label="DDG: iov_count"];
"1000173" -> "1000614"  [label="DDG: iov"];
"1000173" -> "1000614"  [label="DDG: iov_count"];
"1000113" -> "1000614"  [label="DDG: iov_count"];
"1000416" -> "1000614"  [label="DDG: toktype"];
"1000117" -> "1000614"  [label="DDG: toktype"];
"1000614" -> "1000648"  [label="DDG: context"];
"1000614" -> "1000648"  [label="DDG: ctx->seq"];
"1000614" -> "1000681"  [label="DDG: cksum_len"];
"1000614" -> "1000716"  [label="DDG: cksum_len"];
"1000614" -> "1000748"  [label="DDG: toktype"];
"1000614" -> "1000761"  [label="DDG: iov"];
"1000614" -> "1000761"  [label="DDG: iov_count"];
"1000614" -> "1000830"  [label="DDG: context"];
"1000614" -> "1000830"  [label="DDG: &md5cksum"];
"1000612" -> "1000118"  [label="AST: "];
"1000613" -> "1000612"  [label="AST: "];
"1000634" -> "1000612"  [label="CFG: "];
"1000612" -> "1000840"  [label="DDG: kg_make_checksum_iov_v1(context, md5cksum.checksum_type,\n                                   cksum_len, ctx->seq, ctx->enc,\n                                   sign_usage, iov, iov_count, toktype,\n                                   &md5cksum)"];
"1000612" -> "1000633"  [label="DDG: code"];
"1000633" -> "1000632"  [label="AST: "];
"1000633" -> "1000635"  [label="CFG: "];
"1000634" -> "1000633"  [label="AST: "];
"1000635" -> "1000633"  [label="AST: "];
"1000638" -> "1000633"  [label="CFG: "];
"1000642" -> "1000633"  [label="CFG: "];
"1000633" -> "1000840"  [label="DDG: code != 0"];
"1000648" -> "1000646"  [label="AST: "];
"1000648" -> "1000671"  [label="CFG: "];
"1000649" -> "1000648"  [label="AST: "];
"1000650" -> "1000648"  [label="AST: "];
"1000653" -> "1000648"  [label="AST: "];
"1000654" -> "1000648"  [label="AST: "];
"1000668" -> "1000648"  [label="AST: "];
"1000671" -> "1000648"  [label="AST: "];
"1000646" -> "1000648"  [label="CFG: "];
"1000648" -> "1000840"  [label="DDG: ctx->seq"];
"1000648" -> "1000840"  [label="DDG: md5cksum.contents"];
"1000648" -> "1000840"  [label="DDG: KG_USAGE_SEAL"];
"1000648" -> "1000840"  [label="DDG: g_OID_equal(ctx->mech_used,\n                                               gss_mech_krb5_old) ?\n                                   ctx->seq->keyblock.contents : NULL"];
"1000648" -> "1000646"  [label="DDG: g_OID_equal(ctx->mech_used,\n                                               gss_mech_krb5_old) ?\n                                   ctx->seq->keyblock.contents : NULL"];
"1000648" -> "1000646"  [label="DDG: md5cksum.contents"];
"1000648" -> "1000646"  [label="DDG: KG_USAGE_SEAL"];
"1000648" -> "1000646"  [label="DDG: context"];
"1000648" -> "1000646"  [label="DDG: ctx->seq"];
"1000648" -> "1000646"  [label="DDG: 16"];
"1000109" -> "1000648"  [label="DDG: context"];
"1000152" -> "1000648"  [label="DDG: md5cksum.contents"];
"1000648" -> "1000686"  [label="DDG: md5cksum.contents"];
"1000648" -> "1000690"  [label="DDG: md5cksum.contents"];
"1000648" -> "1000830"  [label="DDG: context"];
"1000646" -> "1000643"  [label="AST: "];
"1000647" -> "1000646"  [label="AST: "];
"1000674" -> "1000646"  [label="CFG: "];
"1000646" -> "1000840"  [label="DDG: kg_encrypt_inplace(context, ctx->seq, KG_USAGE_SEAL,\n                                  (g_OID_equal(ctx->mech_used,\n                                               gss_mech_krb5_old) ?\n                                   ctx->seq->keyblock.contents : NULL),\n                                  md5cksum.contents, 16)"];
"1000646" -> "1000673"  [label="DDG: code"];
"1000673" -> "1000672"  [label="AST: "];
"1000673" -> "1000675"  [label="CFG: "];
"1000674" -> "1000673"  [label="AST: "];
"1000675" -> "1000673"  [label="AST: "];
"1000678" -> "1000673"  [label="CFG: "];
"1000683" -> "1000673"  [label="CFG: "];
"1000673" -> "1000840"  [label="DDG: code != 0"];
"1000686" -> "1000643"  [label="AST: "];
"1000686" -> "1000690"  [label="CFG: "];
"1000687" -> "1000686"  [label="AST: "];
"1000690" -> "1000686"  [label="AST: "];
"1000700" -> "1000686"  [label="CFG: "];
"1000686" -> "1000840"  [label="DDG: md5cksum.contents + 16 - cksum.length"];
"1000694" -> "1000686"  [label="DDG: 16"];
"1000694" -> "1000686"  [label="DDG: cksum.length"];
"1000686" -> "1000701"  [label="DDG: cksum.contents"];
"1000701" -> "1000699"  [label="AST: "];
"1000701" -> "1000708"  [label="CFG: "];
"1000702" -> "1000701"  [label="AST: "];
"1000705" -> "1000701"  [label="AST: "];
"1000708" -> "1000701"  [label="AST: "];
"1000699" -> "1000701"  [label="CFG: "];
"1000701" -> "1000840"  [label="DDG: cksum.length"];
"1000701" -> "1000840"  [label="DDG: ptr + 14"];
"1000701" -> "1000840"  [label="DDG: cksum.contents"];
"1000701" -> "1000699"  [label="DDG: cksum.contents"];
"1000701" -> "1000699"  [label="DDG: ptr + 14"];
"1000701" -> "1000699"  [label="DDG: cksum.length"];
"1000252" -> "1000701"  [label="DDG: ptr[4]"];
"1000257" -> "1000701"  [label="DDG: ptr[5]"];
"1000233" -> "1000701"  [label="DDG: ptr[1]"];
"1000245" -> "1000701"  [label="DDG: ptr[3]"];
"1000215" -> "1000701"  [label="DDG: ptr"];
"1000694" -> "1000701"  [label="DDG: cksum.length"];
"1000699" -> "1000643"  [label="AST: "];
"1000700" -> "1000699"  [label="AST: "];
"1000711" -> "1000699"  [label="CFG: "];
"1000699" -> "1000840"  [label="DDG: k5_bcmp(cksum.contents, ptr + 14, cksum.length)"];
"1000699" -> "1000735"  [label="DDG: code"];
"1000735" -> "1000734"  [label="AST: "];
"1000735" -> "1000737"  [label="CFG: "];
"1000736" -> "1000735"  [label="AST: "];
"1000737" -> "1000735"  [label="AST: "];
"1000740" -> "1000735"  [label="CFG: "];
"1000749" -> "1000735"  [label="CFG: "];
"1000735" -> "1000840"  [label="DDG: code != 0"];
"1000714" -> "1000735"  [label="DDG: code"];
"1000690" -> "1000694"  [label="CFG: "];
"1000691" -> "1000690"  [label="AST: "];
"1000694" -> "1000690"  [label="AST: "];
"1000690" -> "1000840"  [label="DDG: 16 - cksum.length"];
"1000690" -> "1000840"  [label="DDG: md5cksum.contents"];
"1000694" -> "1000690"  [label="DDG: 16"];
"1000694" -> "1000690"  [label="DDG: cksum.length"];
"1000830" -> "1000118"  [label="AST: "];
"1000830" -> "1000832"  [label="CFG: "];
"1000831" -> "1000830"  [label="AST: "];
"1000832" -> "1000830"  [label="AST: "];
"1000836" -> "1000830"  [label="CFG: "];
"1000830" -> "1000840"  [label="DDG: krb5_free_checksum_contents(context, &md5cksum)"];
"1000830" -> "1000840"  [label="DDG: &md5cksum"];
"1000830" -> "1000840"  [label="DDG: context"];
"1000495" -> "1000830"  [label="DDG: context"];
"1000389" -> "1000830"  [label="DDG: context"];
"1000440" -> "1000830"  [label="DDG: context"];
"1000109" -> "1000830"  [label="DDG: context"];
"1000681" -> "1000643"  [label="AST: "];
"1000681" -> "1000685"  [label="CFG: "];
"1000682" -> "1000681"  [label="AST: "];
"1000685" -> "1000681"  [label="AST: "];
"1000688" -> "1000681"  [label="CFG: "];
"1000681" -> "1000840"  [label="DDG: cksum_len"];
"1000681" -> "1000694"  [label="DDG: cksum.length"];
"1000694" -> "1000696"  [label="CFG: "];
"1000695" -> "1000694"  [label="AST: "];
"1000696" -> "1000694"  [label="AST: "];
"1000716" -> "1000714"  [label="AST: "];
"1000716" -> "1000723"  [label="CFG: "];
"1000717" -> "1000716"  [label="AST: "];
"1000720" -> "1000716"  [label="AST: "];
"1000723" -> "1000716"  [label="AST: "];
"1000714" -> "1000716"  [label="CFG: "];
"1000716" -> "1000840"  [label="DDG: md5cksum.contents"];
"1000716" -> "1000840"  [label="DDG: ptr + 14"];
"1000716" -> "1000840"  [label="DDG: cksum_len"];
"1000716" -> "1000714"  [label="DDG: md5cksum.contents"];
"1000716" -> "1000714"  [label="DDG: ptr + 14"];
"1000716" -> "1000714"  [label="DDG: cksum_len"];
"1000152" -> "1000716"  [label="DDG: md5cksum.contents"];
"1000252" -> "1000716"  [label="DDG: ptr[4]"];
"1000257" -> "1000716"  [label="DDG: ptr[5]"];
"1000233" -> "1000716"  [label="DDG: ptr[1]"];
"1000245" -> "1000716"  [label="DDG: ptr[3]"];
"1000215" -> "1000716"  [label="DDG: ptr"];
"1000714" -> "1000643"  [label="AST: "];
"1000715" -> "1000714"  [label="AST: "];
"1000724" -> "1000714"  [label="CFG: "];
"1000714" -> "1000840"  [label="DDG: k5_bcmp(md5cksum.contents, ptr + 14, cksum_len)"];
"1000748" -> "1000747"  [label="AST: "];
"1000748" -> "1000750"  [label="CFG: "];
"1000749" -> "1000748"  [label="AST: "];
"1000750" -> "1000748"  [label="AST: "];
"1000754" -> "1000748"  [label="CFG: "];
"1000747" -> "1000748"  [label="CFG: "];
"1000748" -> "1000840"  [label="DDG: KG_TOK_WRAP_MSG"];
"1000748" -> "1000840"  [label="DDG: toktype"];
"1000748" -> "1000747"  [label="DDG: toktype"];
"1000748" -> "1000747"  [label="DDG: KG_TOK_WRAP_MSG"];
"1000117" -> "1000748"  [label="DDG: toktype"];
"1000416" -> "1000748"  [label="DDG: KG_TOK_WRAP_MSG"];
"1000747" -> "1000746"  [label="AST: "];
"1000747" -> "1000751"  [label="CFG: "];
"1000751" -> "1000747"  [label="AST: "];
"1000760" -> "1000747"  [label="CFG: "];
"1000773" -> "1000747"  [label="CFG: "];
"1000747" -> "1000840"  [label="DDG: (ctx->gss_flags & GSS_C_DCE_STYLE) == 0"];
"1000747" -> "1000840"  [label="DDG: toktype == KG_TOK_WRAP_MSG"];
"1000747" -> "1000840"  [label="DDG: toktype == KG_TOK_WRAP_MSG &&\n        (ctx->gss_flags & GSS_C_DCE_STYLE) == 0"];
"1000751" -> "1000747"  [label="DDG: ctx->gss_flags & GSS_C_DCE_STYLE"];
"1000751" -> "1000747"  [label="DDG: 0"];
"1000761" -> "1000759"  [label="AST: "];
"1000761" -> "1000765"  [label="CFG: "];
"1000762" -> "1000761"  [label="AST: "];
"1000764" -> "1000761"  [label="AST: "];
"1000765" -> "1000761"  [label="AST: "];
"1000759" -> "1000761"  [label="CFG: "];
"1000761" -> "1000840"  [label="DDG: &code"];
"1000761" -> "1000840"  [label="DDG: iov"];
"1000761" -> "1000840"  [label="DDG: iov_count"];
"1000761" -> "1000759"  [label="DDG: &code"];
"1000761" -> "1000759"  [label="DDG: iov"];
"1000761" -> "1000759"  [label="DDG: iov_count"];
"1000113" -> "1000761"  [label="DDG: iov_count"];
"1000759" -> "1000758"  [label="AST: "];
"1000760" -> "1000759"  [label="AST: "];
"1000768" -> "1000759"  [label="CFG: "];
"1000759" -> "1000840"  [label="DDG: kg_fixup_padding_iov(&code, iov, iov_count)"];
"1000759" -> "1000767"  [label="DDG: retval"];
"1000767" -> "1000766"  [label="AST: "];
"1000767" -> "1000769"  [label="CFG: "];
"1000768" -> "1000767"  [label="AST: "];
"1000769" -> "1000767"  [label="AST: "];
"1000770" -> "1000767"  [label="CFG: "];
"1000773" -> "1000767"  [label="CFG: "];
"1000767" -> "1000840"  [label="DDG: retval != GSS_S_COMPLETE"];
"1000767" -> "1000840"  [label="DDG: GSS_S_COMPLETE"];
"1000767" -> "1000840"  [label="DDG: retval"];
"1000767" -> "1000838"  [label="DDG: retval"];
"1000838" -> "1000118"  [label="AST: "];
"1000838" -> "1000839"  [label="CFG: "];
"1000839" -> "1000838"  [label="AST: "];
"1000840" -> "1000838"  [label="CFG: "];
"1000838" -> "1000840"  [label="DDG: <RET>"];
"1000839" -> "1000838"  [label="DDG: retval"];
"1000637" -> "1000838"  [label="DDG: retval"];
"1000677" -> "1000838"  [label="DDG: retval"];
"1000729" -> "1000838"  [label="DDG: retval"];
"1000556" -> "1000838"  [label="DDG: retval"];
"1000819" -> "1000838"  [label="DDG: retval"];
"1000603" -> "1000838"  [label="DDG: retval"];
"1000526" -> "1000838"  [label="DDG: retval"];
"1000742" -> "1000838"  [label="DDG: retval"];
"1000452" -> "1000838"  [label="DDG: retval"];
"1000654" -> "1000660"  [label="CFG: "];
"1000654" -> "1000667"  [label="CFG: "];
"1000655" -> "1000654"  [label="AST: "];
"1000660" -> "1000654"  [label="AST: "];
"1000667" -> "1000654"  [label="AST: "];
"1000669" -> "1000654"  [label="CFG: "];
"1000654" -> "1000840"  [label="DDG: g_OID_equal(ctx->mech_used,\n                                               gss_mech_krb5_old)"];
"1000654" -> "1000840"  [label="DDG: ctx->seq->keyblock.contents"];
"1000654" -> "1000840"  [label="DDG: NULL"];
"1000772" -> "1000771"  [label="AST: "];
"1000772" -> "1000774"  [label="CFG: "];
"1000773" -> "1000772"  [label="AST: "];
"1000774" -> "1000772"  [label="AST: "];
"1000777" -> "1000772"  [label="CFG: "];
"1000783" -> "1000772"  [label="CFG: "];
"1000772" -> "1000840"  [label="DDG: conf_state"];
"1000772" -> "1000840"  [label="DDG: conf_state != NULL"];
"1000115" -> "1000772"  [label="DDG: conf_state"];
"1000772" -> "1000782"  [label="DDG: NULL"];
"1000782" -> "1000781"  [label="AST: "];
"1000782" -> "1000784"  [label="CFG: "];
"1000783" -> "1000782"  [label="AST: "];
"1000784" -> "1000782"  [label="AST: "];
"1000787" -> "1000782"  [label="CFG: "];
"1000793" -> "1000782"  [label="CFG: "];
"1000782" -> "1000840"  [label="DDG: qop_state"];
"1000782" -> "1000840"  [label="DDG: qop_state != NULL"];
"1000782" -> "1000840"  [label="DDG: NULL"];
"1000116" -> "1000782"  [label="DDG: qop_state"];
"1000173" -> "1000171"  [label="AST: "];
"1000173" -> "1000176"  [label="CFG: "];
"1000174" -> "1000173"  [label="AST: "];
"1000175" -> "1000173"  [label="AST: "];
"1000176" -> "1000173"  [label="AST: "];
"1000171" -> "1000173"  [label="CFG: "];
"1000173" -> "1000840"  [label="DDG: GSS_IOV_BUFFER_TYPE_TRAILER"];
"1000173" -> "1000840"  [label="DDG: iov"];
"1000173" -> "1000840"  [label="DDG: iov_count"];
"1000173" -> "1000171"  [label="DDG: iov"];
"1000173" -> "1000171"  [label="DDG: iov_count"];
"1000173" -> "1000171"  [label="DDG: GSS_IOV_BUFFER_TYPE_TRAILER"];
"1000113" -> "1000173"  [label="DDG: iov_count"];
"1000173" -> "1000484"  [label="DDG: iov"];
"1000173" -> "1000484"  [label="DDG: iov_count"];
"1000171" -> "1000118"  [label="AST: "];
"1000172" -> "1000171"  [label="AST: "];
"1000180" -> "1000171"  [label="CFG: "];
"1000171" -> "1000840"  [label="DDG: kg_locate_iov(iov, iov_count, GSS_IOV_BUFFER_TYPE_TRAILER)"];
"1000484" -> "1000482"  [label="AST: "];
"1000484" -> "1000494"  [label="CFG: "];
"1000485" -> "1000484"  [label="AST: "];
"1000486" -> "1000484"  [label="AST: "];
"1000487" -> "1000484"  [label="AST: "];
"1000488" -> "1000484"  [label="AST: "];
"1000492" -> "1000484"  [label="AST: "];
"1000493" -> "1000484"  [label="AST: "];
"1000494" -> "1000484"  [label="AST: "];
"1000482" -> "1000484"  [label="CFG: "];
"1000484" -> "1000840"  [label="DDG: iov_count"];
"1000484" -> "1000840"  [label="DDG: &bigend_seqnum[0]"];
"1000484" -> "1000840"  [label="DDG: iov"];
"1000484" -> "1000482"  [label="DDG: &bigend_seqnum[0]"];
"1000484" -> "1000482"  [label="DDG: 4"];
"1000484" -> "1000482"  [label="DDG: 0"];
"1000484" -> "1000482"  [label="DDG: enc_key"];
"1000484" -> "1000482"  [label="DDG: context"];
"1000484" -> "1000482"  [label="DDG: iov"];
"1000484" -> "1000482"  [label="DDG: iov_count"];
"1000440" -> "1000484"  [label="DDG: context"];
"1000109" -> "1000484"  [label="DDG: context"];
"1000113" -> "1000484"  [label="DDG: iov_count"];
"1000484" -> "1000495"  [label="DDG: context"];
"1000484" -> "1000495"  [label="DDG: enc_key"];
"1000482" -> "1000431"  [label="AST: "];
"1000483" -> "1000482"  [label="AST: "];
"1000496" -> "1000482"  [label="CFG: "];
"1000482" -> "1000840"  [label="DDG: kg_arcfour_docrypt_iov(context, enc_key, 0,\n                                              &bigend_seqnum[0], 4,\n                                              iov, iov_count)"];
"1000495" -> "1000431"  [label="AST: "];
"1000495" -> "1000497"  [label="CFG: "];
"1000496" -> "1000495"  [label="AST: "];
"1000497" -> "1000495"  [label="AST: "];
"1000523" -> "1000495"  [label="CFG: "];
"1000495" -> "1000840"  [label="DDG: enc_key"];
"1000495" -> "1000840"  [label="DDG: krb5_free_keyblock(context, enc_key)"];
"1000109" -> "1000495"  [label="DDG: context"];
"1000271" -> "1000270"  [label="AST: "];
"1000271" -> "1000273"  [label="CFG: "];
"1000272" -> "1000271"  [label="AST: "];
"1000273" -> "1000271"  [label="AST: "];
"1000275" -> "1000271"  [label="CFG: "];
"1000270" -> "1000271"  [label="CFG: "];
"1000271" -> "1000840"  [label="DDG: KG_TOK_WRAP_MSG"];
"1000271" -> "1000840"  [label="DDG: toktype"];
"1000271" -> "1000270"  [label="DDG: toktype"];
"1000271" -> "1000270"  [label="DDG: KG_TOK_WRAP_MSG"];
"1000117" -> "1000271"  [label="DDG: toktype"];
"1000271" -> "1000286"  [label="DDG: toktype"];
"1000271" -> "1000286"  [label="DDG: KG_TOK_WRAP_MSG"];
"1000270" -> "1000269"  [label="AST: "];
"1000270" -> "1000274"  [label="CFG: "];
"1000274" -> "1000270"  [label="AST: "];
"1000280" -> "1000270"  [label="CFG: "];
"1000287" -> "1000270"  [label="CFG: "];
"1000270" -> "1000840"  [label="DDG: sealalg != 0xFFFF"];
"1000270" -> "1000840"  [label="DDG: toktype != KG_TOK_WRAP_MSG && sealalg != 0xFFFF"];
"1000270" -> "1000840"  [label="DDG: toktype != KG_TOK_WRAP_MSG"];
"1000274" -> "1000270"  [label="DDG: sealalg"];
"1000274" -> "1000270"  [label="DDG: 0xFFFF"];
"1000286" -> "1000285"  [label="AST: "];
"1000286" -> "1000288"  [label="CFG: "];
"1000287" -> "1000286"  [label="AST: "];
"1000288" -> "1000286"  [label="AST: "];
"1000292" -> "1000286"  [label="CFG: "];
"1000285" -> "1000286"  [label="CFG: "];
"1000286" -> "1000840"  [label="DDG: toktype"];
"1000286" -> "1000840"  [label="DDG: KG_TOK_WRAP_MSG"];
"1000286" -> "1000285"  [label="DDG: toktype"];
"1000286" -> "1000285"  [label="DDG: KG_TOK_WRAP_MSG"];
"1000117" -> "1000286"  [label="DDG: toktype"];
"1000286" -> "1000363"  [label="DDG: toktype"];
"1000286" -> "1000363"  [label="DDG: KG_TOK_WRAP_MSG"];
"1000286" -> "1000416"  [label="DDG: toktype"];
"1000286" -> "1000416"  [label="DDG: KG_TOK_WRAP_MSG"];
"1000285" -> "1000284"  [label="AST: "];
"1000285" -> "1000289"  [label="CFG: "];
"1000289" -> "1000285"  [label="AST: "];
"1000302" -> "1000285"  [label="CFG: "];
"1000311" -> "1000285"  [label="CFG: "];
"1000285" -> "1000840"  [label="DDG: toktype == KG_TOK_WRAP_MSG"];
"1000285" -> "1000840"  [label="DDG: toktype == KG_TOK_WRAP_MSG &&\n        !(sealalg == 0xFFFF || sealalg == ctx->sealalg)"];
"1000285" -> "1000840"  [label="DDG: !(sealalg == 0xFFFF || sealalg == ctx->sealalg)"];
"1000289" -> "1000285"  [label="DDG: sealalg == 0xFFFF || sealalg == ctx->sealalg"];
"1000363" -> "1000362"  [label="AST: "];
"1000363" -> "1000365"  [label="CFG: "];
"1000364" -> "1000363"  [label="AST: "];
"1000365" -> "1000363"  [label="AST: "];
"1000367" -> "1000363"  [label="CFG: "];
"1000369" -> "1000363"  [label="CFG: "];
"1000363" -> "1000840"  [label="DDG: KG_TOK_WRAP_MSG"];
"1000363" -> "1000840"  [label="DDG: toktype"];
"1000363" -> "1000840"  [label="DDG: toktype != KG_TOK_WRAP_MSG"];
"1000117" -> "1000363"  [label="DDG: toktype"];
"1000363" -> "1000416"  [label="DDG: toktype"];
"1000363" -> "1000416"  [label="DDG: KG_TOK_WRAP_MSG"];
"1000416" -> "1000415"  [label="AST: "];
"1000416" -> "1000418"  [label="CFG: "];
"1000417" -> "1000416"  [label="AST: "];
"1000418" -> "1000416"  [label="AST: "];
"1000422" -> "1000416"  [label="CFG: "];
"1000545" -> "1000416"  [label="CFG: "];
"1000416" -> "1000840"  [label="DDG: toktype == KG_TOK_WRAP_MSG"];
"1000416" -> "1000840"  [label="DDG: KG_TOK_WRAP_MSG"];
"1000416" -> "1000840"  [label="DDG: toktype"];
"1000117" -> "1000416"  [label="DDG: toktype"];
}
