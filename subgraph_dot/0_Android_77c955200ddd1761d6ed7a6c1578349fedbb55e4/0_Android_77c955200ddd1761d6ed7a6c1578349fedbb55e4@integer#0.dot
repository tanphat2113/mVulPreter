digraph "0_Android_77c955200ddd1761d6ed7a6c1578349fedbb55e4@integer" {
"1000240" [label="(Call,bytesRead = kIcoDirectoryBytes + numImages * kIcoDirEntryBytes)"];
"1000117" [label="(Call,inputStream.get()->read(dirBuffer.get(), kIcoDirectoryBytes) !=\n            kIcoDirectoryBytes)"];
"1000118" [label="(Call,inputStream.get()->read(dirBuffer.get(), kIcoDirectoryBytes))"];
"1000106" [label="(Call,kIcoDirectoryBytes = 6)"];
"1000244" [label="(Call,numImages * kIcoDirEntryBytes)"];
"1000235" [label="(Call,numImages - 1)"];
"1000176" [label="(Call,i < numImages)"];
"1000179" [label="(Call,i++)"];
"1000173" [label="(Call,i = 0)"];
"1000138" [label="(Call,0 == numImages)"];
"1000132" [label="(Call,numImages = get_short(dirBuffer.get(), 4))"];
"1000134" [label="(Call,get_short(dirBuffer.get(), 4))"];
"1000184" [label="(Call,inputStream->read(entryBuffer, kIcoDirEntryBytes) !=\n                kIcoDirEntryBytes)"];
"1000185" [label="(Call,inputStream->read(entryBuffer, kIcoDirEntryBytes))"];
"1000207" [label="(Call,get_int(entryBuffer, 12))"];
"1000201" [label="(Call,get_int(entryBuffer, 8))"];
"1000110" [label="(Call,kIcoDirEntryBytes = 16)"];
"1000275" [label="(Call,offset < bytesRead)"];
"1000285" [label="(Call,offset - bytesRead)"];
"1000284" [label="(Call,inputStream.get()->skip(offset - bytesRead))"];
"1000283" [label="(Call,inputStream.get()->skip(offset - bytesRead) != offset - bytesRead)"];
"1000288" [label="(Call,offset - bytesRead)"];
"1000295" [label="(Call,bytesRead = offset)"];
"1000322" [label="(Call,bytesRead += size)"];
"1000188" [label="(Identifier,kIcoDirEntryBytes)"];
"1000240" [label="(Call,bytesRead = kIcoDirectoryBytes + numImages * kIcoDirEntryBytes)"];
"1000116" [label="(ControlStructure,if (inputStream.get()->read(dirBuffer.get(), kIcoDirectoryBytes) !=\n            kIcoDirectoryBytes))"];
"1000183" [label="(ControlStructure,if (inputStream->read(entryBuffer, kIcoDirEntryBytes) !=\n                kIcoDirEntryBytes))"];
"1000205" [label="(Call,offset = get_int(entryBuffer, 12))"];
"1000199" [label="(Call,size = get_int(entryBuffer, 8))"];
"1000285" [label="(Call,offset - bytesRead)"];
"1000186" [label="(Identifier,entryBuffer)"];
"1000235" [label="(Call,numImages - 1)"];
"1000257" [label="(Block,)"];
"1000327" [label="(Identifier,codec)"];
"1000110" [label="(Call,kIcoDirEntryBytes = 16)"];
"1000208" [label="(Identifier,entryBuffer)"];
"1000133" [label="(Identifier,numImages)"];
"1000119" [label="(Call,dirBuffer.get())"];
"1000134" [label="(Call,get_short(dirBuffer.get(), 4))"];
"1000202" [label="(Identifier,entryBuffer)"];
"1000140" [label="(Identifier,numImages)"];
"1000287" [label="(Identifier,bytesRead)"];
"1000290" [label="(Identifier,bytesRead)"];
"1000143" [label="(Literal,\"Error: No images embedded in ico.\n\")"];
"1000250" [label="(Identifier,i)"];
"1000280" [label="(Literal,\"Warning: invalid ico offset.\n\")"];
"1000132" [label="(Call,numImages = get_short(dirBuffer.get(), 4))"];
"1000293" [label="(Literal,\"Warning: could not skip to ico offset.\n\")"];
"1000180" [label="(Identifier,i)"];
"1000282" [label="(ControlStructure,if (inputStream.get()->skip(offset - bytesRead) != offset - bytesRead))"];
"1000241" [label="(Identifier,bytesRead)"];
"1000323" [label="(Identifier,bytesRead)"];
"1000121" [label="(Identifier,kIcoDirectoryBytes)"];
"1000286" [label="(Identifier,offset)"];
"1000200" [label="(Identifier,size)"];
"1000246" [label="(Identifier,kIcoDirEntryBytes)"];
"1000324" [label="(Identifier,size)"];
"1000289" [label="(Identifier,offset)"];
"1000322" [label="(Call,bytesRead += size)"];
"1000185" [label="(Call,inputStream->read(entryBuffer, kIcoDirEntryBytes))"];
"1000117" [label="(Call,inputStream.get()->read(dirBuffer.get(), kIcoDirectoryBytes) !=\n            kIcoDirectoryBytes)"];
"1000274" [label="(ControlStructure,if (offset < bytesRead))"];
"1000137" [label="(ControlStructure,if (0 == numImages))"];
"1000276" [label="(Identifier,offset)"];
"1000111" [label="(Identifier,kIcoDirEntryBytes)"];
"1000135" [label="(Call,dirBuffer.get())"];
"1000108" [label="(Literal,6)"];
"1000171" [label="(ControlStructure,for (uint32_t i = 0; i < numImages; i++))"];
"1000288" [label="(Call,offset - bytesRead)"];
"1000177" [label="(Identifier,i)"];
"1000284" [label="(Call,inputStream.get()->skip(offset - bytesRead))"];
"1000242" [label="(Call,kIcoDirectoryBytes + numImages * kIcoDirEntryBytes)"];
"1000244" [label="(Call,numImages * kIcoDirEntryBytes)"];
"1000233" [label="(Call,directoryEntries[numImages - 1])"];
"1000112" [label="(Literal,16)"];
"1000301" [label="(Identifier,buffer)"];
"1000174" [label="(Identifier,i)"];
"1000178" [label="(Identifier,numImages)"];
"1000124" [label="(Literal,\"Error: unable to read ico directory header.\n\")"];
"1000138" [label="(Call,0 == numImages)"];
"1000295" [label="(Call,bytesRead = offset)"];
"1000226" [label="(Identifier,result)"];
"1000115" [label="(Identifier,uint8_t)"];
"1000176" [label="(Call,i < numImages)"];
"1000283" [label="(Call,inputStream.get()->skip(offset - bytesRead) != offset - bytesRead)"];
"1000203" [label="(Literal,8)"];
"1000236" [label="(Identifier,numImages)"];
"1000120" [label="(Identifier,kIcoDirectoryBytes)"];
"1000139" [label="(Literal,0)"];
"1000201" [label="(Call,get_int(entryBuffer, 8))"];
"1000296" [label="(Identifier,bytesRead)"];
"1000307" [label="(Call,inputStream->read(buffer.get(), size) != size)"];
"1000245" [label="(Identifier,numImages)"];
"1000103" [label="(Block,)"];
"1000209" [label="(Literal,12)"];
"1000414" [label="(MethodReturn,SkCodec*)"];
"1000107" [label="(Identifier,kIcoDirectoryBytes)"];
"1000136" [label="(Literal,4)"];
"1000252" [label="(Call,i < numImages)"];
"1000187" [label="(Identifier,kIcoDirEntryBytes)"];
"1000184" [label="(Call,inputStream->read(entryBuffer, kIcoDirEntryBytes) !=\n                kIcoDirEntryBytes)"];
"1000207" [label="(Call,get_int(entryBuffer, 12))"];
"1000237" [label="(Literal,1)"];
"1000118" [label="(Call,inputStream.get()->read(dirBuffer.get(), kIcoDirectoryBytes))"];
"1000275" [label="(Call,offset < bytesRead)"];
"1000173" [label="(Call,i = 0)"];
"1000259" [label="(Call,offset = directoryEntries[i].offset)"];
"1000106" [label="(Call,kIcoDirectoryBytes = 6)"];
"1000156" [label="(Call,SkCodecPrintf(\"Error: OOM allocating ICO directory for %i images.\n\",\n                       numImages))"];
"1000191" [label="(Literal,\"Error: Dir entries truncated in ico.\n\")"];
"1000179" [label="(Call,i++)"];
"1000297" [label="(Identifier,offset)"];
"1000175" [label="(Literal,0)"];
"1000154" [label="(Identifier,dirEntryBuffer)"];
"1000277" [label="(Identifier,bytesRead)"];
"1000240" -> "1000103"  [label="AST: "];
"1000240" -> "1000242"  [label="CFG: "];
"1000241" -> "1000240"  [label="AST: "];
"1000242" -> "1000240"  [label="AST: "];
"1000250" -> "1000240"  [label="CFG: "];
"1000240" -> "1000414"  [label="DDG: kIcoDirectoryBytes + numImages * kIcoDirEntryBytes"];
"1000240" -> "1000414"  [label="DDG: bytesRead"];
"1000117" -> "1000240"  [label="DDG: kIcoDirectoryBytes"];
"1000244" -> "1000240"  [label="DDG: numImages"];
"1000244" -> "1000240"  [label="DDG: kIcoDirEntryBytes"];
"1000240" -> "1000275"  [label="DDG: bytesRead"];
"1000117" -> "1000116"  [label="AST: "];
"1000117" -> "1000121"  [label="CFG: "];
"1000118" -> "1000117"  [label="AST: "];
"1000121" -> "1000117"  [label="AST: "];
"1000124" -> "1000117"  [label="CFG: "];
"1000133" -> "1000117"  [label="CFG: "];
"1000117" -> "1000414"  [label="DDG: inputStream.get()->read(dirBuffer.get(), kIcoDirectoryBytes) !=\n            kIcoDirectoryBytes"];
"1000117" -> "1000414"  [label="DDG: kIcoDirectoryBytes"];
"1000117" -> "1000414"  [label="DDG: inputStream.get()->read(dirBuffer.get(), kIcoDirectoryBytes)"];
"1000118" -> "1000117"  [label="DDG: dirBuffer.get()"];
"1000118" -> "1000117"  [label="DDG: kIcoDirectoryBytes"];
"1000117" -> "1000242"  [label="DDG: kIcoDirectoryBytes"];
"1000118" -> "1000120"  [label="CFG: "];
"1000119" -> "1000118"  [label="AST: "];
"1000120" -> "1000118"  [label="AST: "];
"1000121" -> "1000118"  [label="CFG: "];
"1000118" -> "1000414"  [label="DDG: dirBuffer.get()"];
"1000106" -> "1000118"  [label="DDG: kIcoDirectoryBytes"];
"1000106" -> "1000103"  [label="AST: "];
"1000106" -> "1000108"  [label="CFG: "];
"1000107" -> "1000106"  [label="AST: "];
"1000108" -> "1000106"  [label="AST: "];
"1000111" -> "1000106"  [label="CFG: "];
"1000244" -> "1000242"  [label="AST: "];
"1000244" -> "1000246"  [label="CFG: "];
"1000245" -> "1000244"  [label="AST: "];
"1000246" -> "1000244"  [label="AST: "];
"1000242" -> "1000244"  [label="CFG: "];
"1000244" -> "1000414"  [label="DDG: kIcoDirEntryBytes"];
"1000244" -> "1000242"  [label="DDG: numImages"];
"1000244" -> "1000242"  [label="DDG: kIcoDirEntryBytes"];
"1000235" -> "1000244"  [label="DDG: numImages"];
"1000184" -> "1000244"  [label="DDG: kIcoDirEntryBytes"];
"1000110" -> "1000244"  [label="DDG: kIcoDirEntryBytes"];
"1000244" -> "1000252"  [label="DDG: numImages"];
"1000235" -> "1000233"  [label="AST: "];
"1000235" -> "1000237"  [label="CFG: "];
"1000236" -> "1000235"  [label="AST: "];
"1000237" -> "1000235"  [label="AST: "];
"1000233" -> "1000235"  [label="CFG: "];
"1000176" -> "1000235"  [label="DDG: numImages"];
"1000176" -> "1000171"  [label="AST: "];
"1000176" -> "1000178"  [label="CFG: "];
"1000177" -> "1000176"  [label="AST: "];
"1000178" -> "1000176"  [label="AST: "];
"1000186" -> "1000176"  [label="CFG: "];
"1000226" -> "1000176"  [label="CFG: "];
"1000176" -> "1000414"  [label="DDG: numImages"];
"1000176" -> "1000414"  [label="DDG: i < numImages"];
"1000176" -> "1000414"  [label="DDG: i"];
"1000179" -> "1000176"  [label="DDG: i"];
"1000173" -> "1000176"  [label="DDG: i"];
"1000138" -> "1000176"  [label="DDG: numImages"];
"1000176" -> "1000179"  [label="DDG: i"];
"1000179" -> "1000171"  [label="AST: "];
"1000179" -> "1000180"  [label="CFG: "];
"1000180" -> "1000179"  [label="AST: "];
"1000177" -> "1000179"  [label="CFG: "];
"1000173" -> "1000171"  [label="AST: "];
"1000173" -> "1000175"  [label="CFG: "];
"1000174" -> "1000173"  [label="AST: "];
"1000175" -> "1000173"  [label="AST: "];
"1000177" -> "1000173"  [label="CFG: "];
"1000138" -> "1000137"  [label="AST: "];
"1000138" -> "1000140"  [label="CFG: "];
"1000139" -> "1000138"  [label="AST: "];
"1000140" -> "1000138"  [label="AST: "];
"1000143" -> "1000138"  [label="CFG: "];
"1000154" -> "1000138"  [label="CFG: "];
"1000138" -> "1000414"  [label="DDG: numImages"];
"1000138" -> "1000414"  [label="DDG: 0 == numImages"];
"1000132" -> "1000138"  [label="DDG: numImages"];
"1000138" -> "1000156"  [label="DDG: numImages"];
"1000132" -> "1000103"  [label="AST: "];
"1000132" -> "1000134"  [label="CFG: "];
"1000133" -> "1000132"  [label="AST: "];
"1000134" -> "1000132"  [label="AST: "];
"1000139" -> "1000132"  [label="CFG: "];
"1000132" -> "1000414"  [label="DDG: get_short(dirBuffer.get(), 4)"];
"1000134" -> "1000132"  [label="DDG: dirBuffer.get()"];
"1000134" -> "1000132"  [label="DDG: 4"];
"1000134" -> "1000136"  [label="CFG: "];
"1000135" -> "1000134"  [label="AST: "];
"1000136" -> "1000134"  [label="AST: "];
"1000134" -> "1000414"  [label="DDG: dirBuffer.get()"];
"1000184" -> "1000183"  [label="AST: "];
"1000184" -> "1000188"  [label="CFG: "];
"1000185" -> "1000184"  [label="AST: "];
"1000188" -> "1000184"  [label="AST: "];
"1000191" -> "1000184"  [label="CFG: "];
"1000200" -> "1000184"  [label="CFG: "];
"1000184" -> "1000414"  [label="DDG: inputStream->read(entryBuffer, kIcoDirEntryBytes)"];
"1000184" -> "1000414"  [label="DDG: kIcoDirEntryBytes"];
"1000184" -> "1000414"  [label="DDG: inputStream->read(entryBuffer, kIcoDirEntryBytes) !=\n                kIcoDirEntryBytes"];
"1000185" -> "1000184"  [label="DDG: entryBuffer"];
"1000185" -> "1000184"  [label="DDG: kIcoDirEntryBytes"];
"1000184" -> "1000185"  [label="DDG: kIcoDirEntryBytes"];
"1000185" -> "1000187"  [label="CFG: "];
"1000186" -> "1000185"  [label="AST: "];
"1000187" -> "1000185"  [label="AST: "];
"1000188" -> "1000185"  [label="CFG: "];
"1000185" -> "1000414"  [label="DDG: entryBuffer"];
"1000207" -> "1000185"  [label="DDG: entryBuffer"];
"1000110" -> "1000185"  [label="DDG: kIcoDirEntryBytes"];
"1000185" -> "1000201"  [label="DDG: entryBuffer"];
"1000207" -> "1000205"  [label="AST: "];
"1000207" -> "1000209"  [label="CFG: "];
"1000208" -> "1000207"  [label="AST: "];
"1000209" -> "1000207"  [label="AST: "];
"1000205" -> "1000207"  [label="CFG: "];
"1000207" -> "1000414"  [label="DDG: entryBuffer"];
"1000207" -> "1000205"  [label="DDG: entryBuffer"];
"1000207" -> "1000205"  [label="DDG: 12"];
"1000201" -> "1000207"  [label="DDG: entryBuffer"];
"1000201" -> "1000199"  [label="AST: "];
"1000201" -> "1000203"  [label="CFG: "];
"1000202" -> "1000201"  [label="AST: "];
"1000203" -> "1000201"  [label="AST: "];
"1000199" -> "1000201"  [label="CFG: "];
"1000201" -> "1000199"  [label="DDG: entryBuffer"];
"1000201" -> "1000199"  [label="DDG: 8"];
"1000110" -> "1000103"  [label="AST: "];
"1000110" -> "1000112"  [label="CFG: "];
"1000111" -> "1000110"  [label="AST: "];
"1000112" -> "1000110"  [label="AST: "];
"1000115" -> "1000110"  [label="CFG: "];
"1000110" -> "1000414"  [label="DDG: kIcoDirEntryBytes"];
"1000275" -> "1000274"  [label="AST: "];
"1000275" -> "1000277"  [label="CFG: "];
"1000276" -> "1000275"  [label="AST: "];
"1000277" -> "1000275"  [label="AST: "];
"1000280" -> "1000275"  [label="CFG: "];
"1000286" -> "1000275"  [label="CFG: "];
"1000275" -> "1000414"  [label="DDG: offset < bytesRead"];
"1000275" -> "1000414"  [label="DDG: offset"];
"1000275" -> "1000414"  [label="DDG: bytesRead"];
"1000259" -> "1000275"  [label="DDG: offset"];
"1000322" -> "1000275"  [label="DDG: bytesRead"];
"1000275" -> "1000285"  [label="DDG: offset"];
"1000275" -> "1000285"  [label="DDG: bytesRead"];
"1000285" -> "1000284"  [label="AST: "];
"1000285" -> "1000287"  [label="CFG: "];
"1000286" -> "1000285"  [label="AST: "];
"1000287" -> "1000285"  [label="AST: "];
"1000284" -> "1000285"  [label="CFG: "];
"1000285" -> "1000284"  [label="DDG: offset"];
"1000285" -> "1000284"  [label="DDG: bytesRead"];
"1000285" -> "1000288"  [label="DDG: offset"];
"1000285" -> "1000288"  [label="DDG: bytesRead"];
"1000284" -> "1000283"  [label="AST: "];
"1000289" -> "1000284"  [label="CFG: "];
"1000284" -> "1000283"  [label="DDG: offset - bytesRead"];
"1000283" -> "1000282"  [label="AST: "];
"1000283" -> "1000288"  [label="CFG: "];
"1000288" -> "1000283"  [label="AST: "];
"1000293" -> "1000283"  [label="CFG: "];
"1000296" -> "1000283"  [label="CFG: "];
"1000283" -> "1000414"  [label="DDG: inputStream.get()->skip(offset - bytesRead)"];
"1000283" -> "1000414"  [label="DDG: offset - bytesRead"];
"1000283" -> "1000414"  [label="DDG: inputStream.get()->skip(offset - bytesRead) != offset - bytesRead"];
"1000288" -> "1000283"  [label="DDG: offset"];
"1000288" -> "1000283"  [label="DDG: bytesRead"];
"1000288" -> "1000290"  [label="CFG: "];
"1000289" -> "1000288"  [label="AST: "];
"1000290" -> "1000288"  [label="AST: "];
"1000288" -> "1000414"  [label="DDG: bytesRead"];
"1000288" -> "1000414"  [label="DDG: offset"];
"1000288" -> "1000295"  [label="DDG: offset"];
"1000295" -> "1000257"  [label="AST: "];
"1000295" -> "1000297"  [label="CFG: "];
"1000296" -> "1000295"  [label="AST: "];
"1000297" -> "1000295"  [label="AST: "];
"1000301" -> "1000295"  [label="CFG: "];
"1000295" -> "1000414"  [label="DDG: bytesRead"];
"1000295" -> "1000414"  [label="DDG: offset"];
"1000295" -> "1000322"  [label="DDG: bytesRead"];
"1000322" -> "1000257"  [label="AST: "];
"1000322" -> "1000324"  [label="CFG: "];
"1000323" -> "1000322"  [label="AST: "];
"1000324" -> "1000322"  [label="AST: "];
"1000327" -> "1000322"  [label="CFG: "];
"1000322" -> "1000414"  [label="DDG: size"];
"1000322" -> "1000414"  [label="DDG: bytesRead"];
"1000307" -> "1000322"  [label="DDG: size"];
}
