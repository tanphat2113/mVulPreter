digraph "0_linux_6062a8dc0517bce23e3c2f7d2fea5e22411269a3_0@API" {
"1000629" [label="(Call,kfree(sops))"];
"1000626" [label="(Call,sops != fast_sops)"];
"1000378" [label="(Call,security_sem_semop(sma, sops, nsops, alter))"];
"1000334" [label="(Call,IS_ERR(sma))"];
"1000328" [label="(Call,sma = sem_obtain_object_check(ns, semid))"];
"1000330" [label="(Call,sem_obtain_object_check(ns, semid))"];
"1000308" [label="(Call,find_alloc_undo(ns, semid))"];
"1000149" [label="(Call,ns = current->nsproxy->ipc_ns)"];
"1000161" [label="(Call,semid < 0)"];
"1000198" [label="(Call,copy_from_user (sops, tsops, nsops * sizeof(*tsops)))"];
"1000128" [label="(Call,* sops = fast_sops)"];
"1000191" [label="(Call,sops==NULL)"];
"1000181" [label="(Call,sops = kmalloc(sizeof(*sops)*nsops,GFP_KERNEL))"];
"1000183" [label="(Call,kmalloc(sizeof(*sops)*nsops,GFP_KERNEL))"];
"1000184" [label="(Call,sizeof(*sops)*nsops)"];
"1000177" [label="(Call,nsops > SEMOPM_FAST)"];
"1000168" [label="(Call,nsops > ns->sc_semopm)"];
"1000158" [label="(Call,nsops < 1)"];
"1000201" [label="(Call,nsops * sizeof(*tsops))"];
"1000415" [label="(Call,try_atomic_semop (sma, sops, nsops, un, task_tgid_vnr(current)))"];
"1000312" [label="(Call,IS_ERR(un))"];
"1000306" [label="(Call,un = find_alloc_undo(ns, semid))"];
"1000321" [label="(Call,un = NULL)"];
"1000420" [label="(Call,task_tgid_vnr(current))"];
"1000433" [label="(Call,do_smart_update(sma, sops, nsops, 1, &tasks))"];
"1000324" [label="(Call,INIT_LIST_HEAD(&tasks))"];
"1000189" [label="(Identifier,GFP_KERNEL)"];
"1000326" [label="(Identifier,tasks)"];
"1000382" [label="(Identifier,alter)"];
"1000308" [label="(Call,find_alloc_undo(ns, semid))"];
"1000199" [label="(Identifier,sops)"];
"1000197" [label="(ControlStructure,if (copy_from_user (sops, tsops, nsops * sizeof(*tsops))))"];
"1000180" [label="(Block,)"];
"1000451" [label="(Call,queue.undo = un)"];
"1000363" [label="(Call,ipcperms(ns, &sma->sem_perm, alter ? S_IWUGO : S_IRUGO))"];
"1000628" [label="(Identifier,fast_sops)"];
"1000191" [label="(Call,sops==NULL)"];
"1000376" [label="(Call,error = security_sem_semop(sma, sops, nsops, alter))"];
"1000573" [label="(Call,sem_obtain_lock(ns, semid))"];
"1000176" [label="(ControlStructure,if(nsops > SEMOPM_FAST))"];
"1000128" [label="(Call,* sops = fast_sops)"];
"1000175" [label="(Identifier,E2BIG)"];
"1000161" [label="(Call,semid < 0)"];
"1000158" [label="(Call,nsops < 1)"];
"1000313" [label="(Identifier,un)"];
"1000415" [label="(Call,try_atomic_semop (sma, sops, nsops, un, task_tgid_vnr(current)))"];
"1000330" [label="(Call,sem_obtain_object_check(ns, semid))"];
"1000162" [label="(Identifier,semid)"];
"1000436" [label="(Identifier,nsops)"];
"1000309" [label="(Identifier,ns)"];
"1000188" [label="(Identifier,nsops)"];
"1000632" [label="(Identifier,error)"];
"1000433" [label="(Call,do_smart_update(sma, sops, nsops, 1, &tasks))"];
"1000307" [label="(Identifier,un)"];
"1000625" [label="(ControlStructure,if(sops != fast_sops))"];
"1000418" [label="(Identifier,nsops)"];
"1000437" [label="(Literal,1)"];
"1000182" [label="(Identifier,sops)"];
"1000179" [label="(Identifier,SEMOPM_FAST)"];
"1000421" [label="(Identifier,current)"];
"1000435" [label="(Identifier,sops)"];
"1000630" [label="(Identifier,sops)"];
"1000266" [label="(Call,sop < sops + nsops)"];
"1000413" [label="(Call,error = try_atomic_semop (sma, sops, nsops, un, task_tgid_vnr(current)))"];
"1000311" [label="(ControlStructure,if (IS_ERR(un)))"];
"1000178" [label="(Identifier,nsops)"];
"1000323" [label="(Identifier,NULL)"];
"1000428" [label="(Call,alter && error == 0)"];
"1000346" [label="(Identifier,error)"];
"1000322" [label="(Identifier,un)"];
"1000150" [label="(Identifier,ns)"];
"1000434" [label="(Identifier,sma)"];
"1000200" [label="(Identifier,tsops)"];
"1000159" [label="(Identifier,nsops)"];
"1000618" [label="(Call,sem_unlock(sma))"];
"1000633" [label="(MethodReturn,RET)"];
"1000201" [label="(Call,nsops * sizeof(*tsops))"];
"1000329" [label="(Identifier,sma)"];
"1000169" [label="(Identifier,nsops)"];
"1000160" [label="(Literal,1)"];
"1000438" [label="(Call,&tasks)"];
"1000446" [label="(Call,queue.nsops = nsops)"];
"1000417" [label="(Identifier,sops)"];
"1000324" [label="(Call,INIT_LIST_HEAD(&tasks))"];
"1000268" [label="(Call,sops + nsops)"];
"1000130" [label="(Identifier,fast_sops)"];
"1000184" [label="(Call,sizeof(*sops)*nsops)"];
"1000312" [label="(Call,IS_ERR(un))"];
"1000332" [label="(Identifier,semid)"];
"1000151" [label="(Call,current->nsproxy->ipc_ns)"];
"1000325" [label="(Call,&tasks)"];
"1000380" [label="(Identifier,sops)"];
"1000193" [label="(Identifier,NULL)"];
"1000379" [label="(Identifier,sma)"];
"1000629" [label="(Call,kfree(sops))"];
"1000328" [label="(Call,sma = sem_obtain_object_check(ns, semid))"];
"1000129" [label="(Identifier,sops)"];
"1000190" [label="(ControlStructure,if(sops==NULL))"];
"1000342" [label="(Call,PTR_ERR(sma))"];
"1000208" [label="(Identifier,error)"];
"1000320" [label="(ControlStructure,else)"];
"1000548" [label="(Call,sem_unlock(sma))"];
"1000419" [label="(Identifier,un)"];
"1000627" [label="(Identifier,sops)"];
"1000263" [label="(Call,sop = sops)"];
"1000626" [label="(Call,sops != fast_sops)"];
"1000335" [label="(Identifier,sma)"];
"1000198" [label="(Call,copy_from_user (sops, tsops, nsops * sizeof(*tsops)))"];
"1000192" [label="(Identifier,sops)"];
"1000310" [label="(Identifier,semid)"];
"1000183" [label="(Call,kmalloc(sizeof(*sops)*nsops,GFP_KERNEL))"];
"1000334" [label="(Call,IS_ERR(sma))"];
"1000317" [label="(Call,PTR_ERR(un))"];
"1000185" [label="(Call,sizeof(*sops))"];
"1000203" [label="(Call,sizeof(*tsops))"];
"1000177" [label="(Call,nsops > SEMOPM_FAST)"];
"1000462" [label="(Call,queue.alter = alter)"];
"1000316" [label="(Identifier,error)"];
"1000202" [label="(Identifier,nsops)"];
"1000460" [label="(Call,task_tgid_vnr(current))"];
"1000338" [label="(Identifier,un)"];
"1000468" [label="(Call,nsops == 1)"];
"1000420" [label="(Call,task_tgid_vnr(current))"];
"1000305" [label="(Block,)"];
"1000327" [label="(Call,rcu_read_lock())"];
"1000170" [label="(Call,ns->sc_semopm)"];
"1000163" [label="(Literal,0)"];
"1000157" [label="(Call,nsops < 1 || semid < 0)"];
"1000167" [label="(ControlStructure,if (nsops > ns->sc_semopm))"];
"1000333" [label="(ControlStructure,if (IS_ERR(sma)))"];
"1000196" [label="(Identifier,ENOMEM)"];
"1000119" [label="(Block,)"];
"1000213" [label="(Identifier,timeout)"];
"1000440" [label="(ControlStructure,goto out_unlock_free;)"];
"1000135" [label="(Identifier,undos)"];
"1000427" [label="(ControlStructure,if (alter && error == 0))"];
"1000168" [label="(Call,nsops > ns->sc_semopm)"];
"1000441" [label="(Call,queue.sops = sops)"];
"1000621" [label="(Call,wake_up_sem_queue_do(&tasks))"];
"1000306" [label="(Call,un = find_alloc_undo(ns, semid))"];
"1000149" [label="(Call,ns = current->nsproxy->ipc_ns)"];
"1000378" [label="(Call,security_sem_semop(sma, sops, nsops, alter))"];
"1000181" [label="(Call,sops = kmalloc(sizeof(*sops)*nsops,GFP_KERNEL))"];
"1000381" [label="(Identifier,nsops)"];
"1000321" [label="(Call,un = NULL)"];
"1000331" [label="(Identifier,ns)"];
"1000416" [label="(Identifier,sma)"];
"1000629" -> "1000625"  [label="AST: "];
"1000629" -> "1000630"  [label="CFG: "];
"1000630" -> "1000629"  [label="AST: "];
"1000632" -> "1000629"  [label="CFG: "];
"1000629" -> "1000633"  [label="DDG: sops"];
"1000629" -> "1000633"  [label="DDG: kfree(sops)"];
"1000626" -> "1000629"  [label="DDG: sops"];
"1000626" -> "1000625"  [label="AST: "];
"1000626" -> "1000628"  [label="CFG: "];
"1000627" -> "1000626"  [label="AST: "];
"1000628" -> "1000626"  [label="AST: "];
"1000630" -> "1000626"  [label="CFG: "];
"1000632" -> "1000626"  [label="CFG: "];
"1000626" -> "1000633"  [label="DDG: sops != fast_sops"];
"1000626" -> "1000633"  [label="DDG: sops"];
"1000626" -> "1000633"  [label="DDG: fast_sops"];
"1000378" -> "1000626"  [label="DDG: sops"];
"1000415" -> "1000626"  [label="DDG: sops"];
"1000433" -> "1000626"  [label="DDG: sops"];
"1000198" -> "1000626"  [label="DDG: sops"];
"1000378" -> "1000376"  [label="AST: "];
"1000378" -> "1000382"  [label="CFG: "];
"1000379" -> "1000378"  [label="AST: "];
"1000380" -> "1000378"  [label="AST: "];
"1000381" -> "1000378"  [label="AST: "];
"1000382" -> "1000378"  [label="AST: "];
"1000376" -> "1000378"  [label="CFG: "];
"1000378" -> "1000633"  [label="DDG: sma"];
"1000378" -> "1000633"  [label="DDG: alter"];
"1000378" -> "1000633"  [label="DDG: nsops"];
"1000378" -> "1000376"  [label="DDG: sma"];
"1000378" -> "1000376"  [label="DDG: sops"];
"1000378" -> "1000376"  [label="DDG: nsops"];
"1000378" -> "1000376"  [label="DDG: alter"];
"1000334" -> "1000378"  [label="DDG: sma"];
"1000198" -> "1000378"  [label="DDG: sops"];
"1000201" -> "1000378"  [label="DDG: nsops"];
"1000378" -> "1000415"  [label="DDG: sma"];
"1000378" -> "1000415"  [label="DDG: sops"];
"1000378" -> "1000415"  [label="DDG: nsops"];
"1000378" -> "1000428"  [label="DDG: alter"];
"1000378" -> "1000462"  [label="DDG: alter"];
"1000378" -> "1000618"  [label="DDG: sma"];
"1000334" -> "1000333"  [label="AST: "];
"1000334" -> "1000335"  [label="CFG: "];
"1000335" -> "1000334"  [label="AST: "];
"1000338" -> "1000334"  [label="CFG: "];
"1000346" -> "1000334"  [label="CFG: "];
"1000334" -> "1000633"  [label="DDG: IS_ERR(sma)"];
"1000334" -> "1000633"  [label="DDG: sma"];
"1000328" -> "1000334"  [label="DDG: sma"];
"1000334" -> "1000342"  [label="DDG: sma"];
"1000328" -> "1000119"  [label="AST: "];
"1000328" -> "1000330"  [label="CFG: "];
"1000329" -> "1000328"  [label="AST: "];
"1000330" -> "1000328"  [label="AST: "];
"1000335" -> "1000328"  [label="CFG: "];
"1000328" -> "1000633"  [label="DDG: sem_obtain_object_check(ns, semid)"];
"1000330" -> "1000328"  [label="DDG: ns"];
"1000330" -> "1000328"  [label="DDG: semid"];
"1000330" -> "1000332"  [label="CFG: "];
"1000331" -> "1000330"  [label="AST: "];
"1000332" -> "1000330"  [label="AST: "];
"1000330" -> "1000633"  [label="DDG: ns"];
"1000330" -> "1000633"  [label="DDG: semid"];
"1000308" -> "1000330"  [label="DDG: ns"];
"1000308" -> "1000330"  [label="DDG: semid"];
"1000149" -> "1000330"  [label="DDG: ns"];
"1000161" -> "1000330"  [label="DDG: semid"];
"1000330" -> "1000363"  [label="DDG: ns"];
"1000330" -> "1000573"  [label="DDG: semid"];
"1000308" -> "1000306"  [label="AST: "];
"1000308" -> "1000310"  [label="CFG: "];
"1000309" -> "1000308"  [label="AST: "];
"1000310" -> "1000308"  [label="AST: "];
"1000306" -> "1000308"  [label="CFG: "];
"1000308" -> "1000633"  [label="DDG: semid"];
"1000308" -> "1000633"  [label="DDG: ns"];
"1000308" -> "1000306"  [label="DDG: ns"];
"1000308" -> "1000306"  [label="DDG: semid"];
"1000149" -> "1000308"  [label="DDG: ns"];
"1000161" -> "1000308"  [label="DDG: semid"];
"1000149" -> "1000119"  [label="AST: "];
"1000149" -> "1000151"  [label="CFG: "];
"1000150" -> "1000149"  [label="AST: "];
"1000151" -> "1000149"  [label="AST: "];
"1000159" -> "1000149"  [label="CFG: "];
"1000149" -> "1000633"  [label="DDG: current->nsproxy->ipc_ns"];
"1000149" -> "1000633"  [label="DDG: ns"];
"1000161" -> "1000157"  [label="AST: "];
"1000161" -> "1000163"  [label="CFG: "];
"1000162" -> "1000161"  [label="AST: "];
"1000163" -> "1000161"  [label="AST: "];
"1000157" -> "1000161"  [label="CFG: "];
"1000161" -> "1000633"  [label="DDG: semid"];
"1000161" -> "1000157"  [label="DDG: semid"];
"1000161" -> "1000157"  [label="DDG: 0"];
"1000198" -> "1000197"  [label="AST: "];
"1000198" -> "1000201"  [label="CFG: "];
"1000199" -> "1000198"  [label="AST: "];
"1000200" -> "1000198"  [label="AST: "];
"1000201" -> "1000198"  [label="AST: "];
"1000208" -> "1000198"  [label="CFG: "];
"1000213" -> "1000198"  [label="CFG: "];
"1000198" -> "1000633"  [label="DDG: nsops * sizeof(*tsops)"];
"1000198" -> "1000633"  [label="DDG: tsops"];
"1000198" -> "1000633"  [label="DDG: copy_from_user (sops, tsops, nsops * sizeof(*tsops))"];
"1000128" -> "1000198"  [label="DDG: sops"];
"1000191" -> "1000198"  [label="DDG: sops"];
"1000201" -> "1000198"  [label="DDG: nsops"];
"1000198" -> "1000263"  [label="DDG: sops"];
"1000198" -> "1000266"  [label="DDG: sops"];
"1000198" -> "1000268"  [label="DDG: sops"];
"1000128" -> "1000119"  [label="AST: "];
"1000128" -> "1000130"  [label="CFG: "];
"1000129" -> "1000128"  [label="AST: "];
"1000130" -> "1000128"  [label="AST: "];
"1000135" -> "1000128"  [label="CFG: "];
"1000128" -> "1000633"  [label="DDG: fast_sops"];
"1000128" -> "1000633"  [label="DDG: sops"];
"1000191" -> "1000190"  [label="AST: "];
"1000191" -> "1000193"  [label="CFG: "];
"1000192" -> "1000191"  [label="AST: "];
"1000193" -> "1000191"  [label="AST: "];
"1000196" -> "1000191"  [label="CFG: "];
"1000199" -> "1000191"  [label="CFG: "];
"1000191" -> "1000633"  [label="DDG: sops==NULL"];
"1000191" -> "1000633"  [label="DDG: NULL"];
"1000191" -> "1000633"  [label="DDG: sops"];
"1000181" -> "1000191"  [label="DDG: sops"];
"1000191" -> "1000321"  [label="DDG: NULL"];
"1000181" -> "1000180"  [label="AST: "];
"1000181" -> "1000183"  [label="CFG: "];
"1000182" -> "1000181"  [label="AST: "];
"1000183" -> "1000181"  [label="AST: "];
"1000192" -> "1000181"  [label="CFG: "];
"1000181" -> "1000633"  [label="DDG: kmalloc(sizeof(*sops)*nsops,GFP_KERNEL)"];
"1000183" -> "1000181"  [label="DDG: sizeof(*sops)*nsops"];
"1000183" -> "1000181"  [label="DDG: GFP_KERNEL"];
"1000183" -> "1000189"  [label="CFG: "];
"1000184" -> "1000183"  [label="AST: "];
"1000189" -> "1000183"  [label="AST: "];
"1000183" -> "1000633"  [label="DDG: GFP_KERNEL"];
"1000183" -> "1000633"  [label="DDG: sizeof(*sops)*nsops"];
"1000184" -> "1000183"  [label="DDG: nsops"];
"1000184" -> "1000188"  [label="CFG: "];
"1000185" -> "1000184"  [label="AST: "];
"1000188" -> "1000184"  [label="AST: "];
"1000189" -> "1000184"  [label="CFG: "];
"1000184" -> "1000633"  [label="DDG: nsops"];
"1000177" -> "1000184"  [label="DDG: nsops"];
"1000184" -> "1000201"  [label="DDG: nsops"];
"1000177" -> "1000176"  [label="AST: "];
"1000177" -> "1000179"  [label="CFG: "];
"1000178" -> "1000177"  [label="AST: "];
"1000179" -> "1000177"  [label="AST: "];
"1000182" -> "1000177"  [label="CFG: "];
"1000199" -> "1000177"  [label="CFG: "];
"1000177" -> "1000633"  [label="DDG: SEMOPM_FAST"];
"1000177" -> "1000633"  [label="DDG: nsops > SEMOPM_FAST"];
"1000168" -> "1000177"  [label="DDG: nsops"];
"1000177" -> "1000201"  [label="DDG: nsops"];
"1000168" -> "1000167"  [label="AST: "];
"1000168" -> "1000170"  [label="CFG: "];
"1000169" -> "1000168"  [label="AST: "];
"1000170" -> "1000168"  [label="AST: "];
"1000175" -> "1000168"  [label="CFG: "];
"1000178" -> "1000168"  [label="CFG: "];
"1000168" -> "1000633"  [label="DDG: nsops > ns->sc_semopm"];
"1000168" -> "1000633"  [label="DDG: nsops"];
"1000168" -> "1000633"  [label="DDG: ns->sc_semopm"];
"1000158" -> "1000168"  [label="DDG: nsops"];
"1000158" -> "1000157"  [label="AST: "];
"1000158" -> "1000160"  [label="CFG: "];
"1000159" -> "1000158"  [label="AST: "];
"1000160" -> "1000158"  [label="AST: "];
"1000162" -> "1000158"  [label="CFG: "];
"1000157" -> "1000158"  [label="CFG: "];
"1000158" -> "1000633"  [label="DDG: nsops"];
"1000158" -> "1000157"  [label="DDG: nsops"];
"1000158" -> "1000157"  [label="DDG: 1"];
"1000201" -> "1000203"  [label="CFG: "];
"1000202" -> "1000201"  [label="AST: "];
"1000203" -> "1000201"  [label="AST: "];
"1000201" -> "1000633"  [label="DDG: nsops"];
"1000201" -> "1000266"  [label="DDG: nsops"];
"1000201" -> "1000268"  [label="DDG: nsops"];
"1000415" -> "1000413"  [label="AST: "];
"1000415" -> "1000420"  [label="CFG: "];
"1000416" -> "1000415"  [label="AST: "];
"1000417" -> "1000415"  [label="AST: "];
"1000418" -> "1000415"  [label="AST: "];
"1000419" -> "1000415"  [label="AST: "];
"1000420" -> "1000415"  [label="AST: "];
"1000413" -> "1000415"  [label="CFG: "];
"1000415" -> "1000633"  [label="DDG: task_tgid_vnr(current)"];
"1000415" -> "1000633"  [label="DDG: nsops"];
"1000415" -> "1000633"  [label="DDG: un"];
"1000415" -> "1000413"  [label="DDG: nsops"];
"1000415" -> "1000413"  [label="DDG: sma"];
"1000415" -> "1000413"  [label="DDG: un"];
"1000415" -> "1000413"  [label="DDG: sops"];
"1000415" -> "1000413"  [label="DDG: task_tgid_vnr(current)"];
"1000312" -> "1000415"  [label="DDG: un"];
"1000321" -> "1000415"  [label="DDG: un"];
"1000420" -> "1000415"  [label="DDG: current"];
"1000415" -> "1000433"  [label="DDG: sma"];
"1000415" -> "1000433"  [label="DDG: sops"];
"1000415" -> "1000433"  [label="DDG: nsops"];
"1000415" -> "1000441"  [label="DDG: sops"];
"1000415" -> "1000446"  [label="DDG: nsops"];
"1000415" -> "1000451"  [label="DDG: un"];
"1000415" -> "1000468"  [label="DDG: nsops"];
"1000415" -> "1000548"  [label="DDG: sma"];
"1000415" -> "1000618"  [label="DDG: sma"];
"1000312" -> "1000311"  [label="AST: "];
"1000312" -> "1000313"  [label="CFG: "];
"1000313" -> "1000312"  [label="AST: "];
"1000316" -> "1000312"  [label="CFG: "];
"1000326" -> "1000312"  [label="CFG: "];
"1000312" -> "1000633"  [label="DDG: IS_ERR(un)"];
"1000312" -> "1000633"  [label="DDG: un"];
"1000306" -> "1000312"  [label="DDG: un"];
"1000312" -> "1000317"  [label="DDG: un"];
"1000306" -> "1000305"  [label="AST: "];
"1000307" -> "1000306"  [label="AST: "];
"1000313" -> "1000306"  [label="CFG: "];
"1000306" -> "1000633"  [label="DDG: find_alloc_undo(ns, semid)"];
"1000321" -> "1000320"  [label="AST: "];
"1000321" -> "1000323"  [label="CFG: "];
"1000322" -> "1000321"  [label="AST: "];
"1000323" -> "1000321"  [label="AST: "];
"1000326" -> "1000321"  [label="CFG: "];
"1000321" -> "1000633"  [label="DDG: un"];
"1000321" -> "1000633"  [label="DDG: NULL"];
"1000420" -> "1000421"  [label="CFG: "];
"1000421" -> "1000420"  [label="AST: "];
"1000420" -> "1000633"  [label="DDG: current"];
"1000420" -> "1000460"  [label="DDG: current"];
"1000433" -> "1000427"  [label="AST: "];
"1000433" -> "1000438"  [label="CFG: "];
"1000434" -> "1000433"  [label="AST: "];
"1000435" -> "1000433"  [label="AST: "];
"1000436" -> "1000433"  [label="AST: "];
"1000437" -> "1000433"  [label="AST: "];
"1000438" -> "1000433"  [label="AST: "];
"1000440" -> "1000433"  [label="CFG: "];
"1000433" -> "1000633"  [label="DDG: nsops"];
"1000433" -> "1000633"  [label="DDG: do_smart_update(sma, sops, nsops, 1, &tasks)"];
"1000324" -> "1000433"  [label="DDG: &tasks"];
"1000433" -> "1000618"  [label="DDG: sma"];
"1000433" -> "1000621"  [label="DDG: &tasks"];
"1000324" -> "1000119"  [label="AST: "];
"1000324" -> "1000325"  [label="CFG: "];
"1000325" -> "1000324"  [label="AST: "];
"1000327" -> "1000324"  [label="CFG: "];
"1000324" -> "1000633"  [label="DDG: INIT_LIST_HEAD(&tasks)"];
"1000324" -> "1000633"  [label="DDG: &tasks"];
"1000324" -> "1000621"  [label="DDG: &tasks"];
}
