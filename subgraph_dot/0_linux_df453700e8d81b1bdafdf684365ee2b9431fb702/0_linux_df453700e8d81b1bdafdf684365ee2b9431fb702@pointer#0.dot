digraph "0_linux_df453700e8d81b1bdafdf684365ee2b9431fb702@pointer" {
"1000117" [label="(Call,get_random_bytes(&net->ipv4.ip_id_key,\n\t\t\t\t sizeof(net->ipv4.ip_id_key)))"];
"1000110" [label="(Call,siphash_key_is_zero(&net->ipv4.ip_id_key))"];
"1000132" [label="(Call,siphash_3u32((__force u32)iph->daddr,\n \t\t\t    (__force u32)iph->saddr,\n\t\t\t    iph->protocol,\n\t\t\t    &net->ipv4.ip_id_key))"];
"1000130" [label="(Call,hash = siphash_3u32((__force u32)iph->daddr,\n \t\t\t    (__force u32)iph->saddr,\n\t\t\t    iph->protocol,\n\t\t\t    &net->ipv4.ip_id_key))"];
"1000154" [label="(Call,ip_idents_reserve(hash, segs))"];
"1000152" [label="(Call,id = ip_idents_reserve(hash, segs))"];
"1000161" [label="(Call,htons(id))"];
"1000157" [label="(Call,iph->id = htons(id))"];
"1000143" [label="(Call,iph->protocol)"];
"1000130" [label="(Call,hash = siphash_3u32((__force u32)iph->daddr,\n \t\t\t    (__force u32)iph->saddr,\n\t\t\t    iph->protocol,\n\t\t\t    &net->ipv4.ip_id_key))"];
"1000155" [label="(Identifier,hash)"];
"1000157" [label="(Call,iph->id = htons(id))"];
"1000104" [label="(MethodParameterIn,int segs)"];
"1000117" [label="(Call,get_random_bytes(&net->ipv4.ip_id_key,\n\t\t\t\t sizeof(net->ipv4.ip_id_key)))"];
"1000109" [label="(Call,unlikely(siphash_key_is_zero(&net->ipv4.ip_id_key)))"];
"1000111" [label="(Call,&net->ipv4.ip_id_key)"];
"1000110" [label="(Call,siphash_key_is_zero(&net->ipv4.ip_id_key))"];
"1000161" [label="(Call,htons(id))"];
"1000156" [label="(Identifier,segs)"];
"1000118" [label="(Call,&net->ipv4.ip_id_key)"];
"1000138" [label="(Call,(__force u32)iph->saddr)"];
"1000108" [label="(ControlStructure,if (unlikely(siphash_key_is_zero(&net->ipv4.ip_id_key))))"];
"1000146" [label="(Call,&net->ipv4.ip_id_key)"];
"1000124" [label="(Call,sizeof(net->ipv4.ip_id_key))"];
"1000153" [label="(Identifier,id)"];
"1000133" [label="(Call,(__force u32)iph->daddr)"];
"1000131" [label="(Identifier,hash)"];
"1000159" [label="(Identifier,iph)"];
"1000162" [label="(Identifier,id)"];
"1000163" [label="(MethodReturn,void)"];
"1000154" [label="(Call,ip_idents_reserve(hash, segs))"];
"1000132" [label="(Call,siphash_3u32((__force u32)iph->daddr,\n \t\t\t    (__force u32)iph->saddr,\n\t\t\t    iph->protocol,\n\t\t\t    &net->ipv4.ip_id_key))"];
"1000152" [label="(Call,id = ip_idents_reserve(hash, segs))"];
"1000105" [label="(Block,)"];
"1000158" [label="(Call,iph->id)"];
"1000117" -> "1000108"  [label="AST: "];
"1000117" -> "1000124"  [label="CFG: "];
"1000118" -> "1000117"  [label="AST: "];
"1000124" -> "1000117"  [label="AST: "];
"1000131" -> "1000117"  [label="CFG: "];
"1000117" -> "1000163"  [label="DDG: get_random_bytes(&net->ipv4.ip_id_key,\n\t\t\t\t sizeof(net->ipv4.ip_id_key))"];
"1000110" -> "1000117"  [label="DDG: &net->ipv4.ip_id_key"];
"1000117" -> "1000132"  [label="DDG: &net->ipv4.ip_id_key"];
"1000110" -> "1000109"  [label="AST: "];
"1000110" -> "1000111"  [label="CFG: "];
"1000111" -> "1000110"  [label="AST: "];
"1000109" -> "1000110"  [label="CFG: "];
"1000110" -> "1000109"  [label="DDG: &net->ipv4.ip_id_key"];
"1000110" -> "1000132"  [label="DDG: &net->ipv4.ip_id_key"];
"1000132" -> "1000130"  [label="AST: "];
"1000132" -> "1000146"  [label="CFG: "];
"1000133" -> "1000132"  [label="AST: "];
"1000138" -> "1000132"  [label="AST: "];
"1000143" -> "1000132"  [label="AST: "];
"1000146" -> "1000132"  [label="AST: "];
"1000130" -> "1000132"  [label="CFG: "];
"1000132" -> "1000163"  [label="DDG: iph->protocol"];
"1000132" -> "1000163"  [label="DDG: (__force u32)iph->daddr"];
"1000132" -> "1000163"  [label="DDG: (__force u32)iph->saddr"];
"1000132" -> "1000163"  [label="DDG: &net->ipv4.ip_id_key"];
"1000132" -> "1000130"  [label="DDG: (__force u32)iph->daddr"];
"1000132" -> "1000130"  [label="DDG: (__force u32)iph->saddr"];
"1000132" -> "1000130"  [label="DDG: iph->protocol"];
"1000132" -> "1000130"  [label="DDG: &net->ipv4.ip_id_key"];
"1000133" -> "1000132"  [label="DDG: iph->daddr"];
"1000138" -> "1000132"  [label="DDG: iph->saddr"];
"1000130" -> "1000105"  [label="AST: "];
"1000131" -> "1000130"  [label="AST: "];
"1000153" -> "1000130"  [label="CFG: "];
"1000130" -> "1000163"  [label="DDG: siphash_3u32((__force u32)iph->daddr,\n \t\t\t    (__force u32)iph->saddr,\n\t\t\t    iph->protocol,\n\t\t\t    &net->ipv4.ip_id_key)"];
"1000130" -> "1000154"  [label="DDG: hash"];
"1000154" -> "1000152"  [label="AST: "];
"1000154" -> "1000156"  [label="CFG: "];
"1000155" -> "1000154"  [label="AST: "];
"1000156" -> "1000154"  [label="AST: "];
"1000152" -> "1000154"  [label="CFG: "];
"1000154" -> "1000163"  [label="DDG: hash"];
"1000154" -> "1000163"  [label="DDG: segs"];
"1000154" -> "1000152"  [label="DDG: hash"];
"1000154" -> "1000152"  [label="DDG: segs"];
"1000104" -> "1000154"  [label="DDG: segs"];
"1000152" -> "1000105"  [label="AST: "];
"1000153" -> "1000152"  [label="AST: "];
"1000159" -> "1000152"  [label="CFG: "];
"1000152" -> "1000163"  [label="DDG: ip_idents_reserve(hash, segs)"];
"1000152" -> "1000161"  [label="DDG: id"];
"1000161" -> "1000157"  [label="AST: "];
"1000161" -> "1000162"  [label="CFG: "];
"1000162" -> "1000161"  [label="AST: "];
"1000157" -> "1000161"  [label="CFG: "];
"1000161" -> "1000163"  [label="DDG: id"];
"1000161" -> "1000157"  [label="DDG: id"];
"1000157" -> "1000105"  [label="AST: "];
"1000158" -> "1000157"  [label="AST: "];
"1000163" -> "1000157"  [label="CFG: "];
"1000157" -> "1000163"  [label="DDG: htons(id)"];
"1000157" -> "1000163"  [label="DDG: iph->id"];
}
