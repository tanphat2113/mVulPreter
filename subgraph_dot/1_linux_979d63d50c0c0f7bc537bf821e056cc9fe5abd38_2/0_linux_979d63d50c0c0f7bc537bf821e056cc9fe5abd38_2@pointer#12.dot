digraph "0_linux_979d63d50c0c0f7bc537bf821e056cc9fe5abd38_2@pointer" {
"1000130" [label="(Call,insn_cnt = env->prog->len)"];
"1000211" [label="(Call,env->insn_idx >= insn_cnt)"];
"1000217" [label="(Call,verbose(env, \"invalid insn idx %d insn_cnt %d\n\",\n\t\t\t\tenv->insn_idx, insn_cnt))"];
"1000254" [label="(Call,is_state_visited(env, env->insn_idx))"];
"1000252" [label="(Call,err = is_state_visited(env, env->insn_idx))"];
"1000260" [label="(Call,err < 0)"];
"1000263" [label="(Return,return err;)"];
"1000266" [label="(Call,err == 1)"];
"1000279" [label="(Call,verbose(env, \"\nfrom %d to %d: safe\n\",\n\t\t\t\t\t\tenv->prev_insn_idx, env->insn_idx))"];
"1000979" [label="(Call,pop_stack(env, &env->prev_insn_idx,\n\t\t\t\t\t\t&env->insn_idx))"];
"1000245" [label="(Call,verbose(env,\n\t\t\t\t\"BPF program is too large. Processed %d insn\n\",\n\t\t\t\tinsn_processed))"];
"1000289" [label="(Call,verbose(env, \"%d: safe\n\", env->insn_idx))"];
"1000977" [label="(Call,err = pop_stack(env, &env->prev_insn_idx,\n\t\t\t\t\t\t&env->insn_idx))"];
"1000990" [label="(Call,err < 0)"];
"1000995" [label="(Call,err != -ENOENT)"];
"1000999" [label="(Return,return err;)"];
"1001091" [label="(Call,verbose(env, \"processed %d insns (limit %d), stack depth \",\n\t\tinsn_processed, BPF_COMPLEXITY_LIMIT_INSNS))"];
"1001118" [label="(Call,verbose(env, \"%d\", depth))"];
"1001130" [label="(Call,verbose(env, \"+\"))"];
"1001133" [label="(Call,verbose(env, \"\n\"))"];
"1000212" [label="(Call,env->insn_idx)"];
"1000995" [label="(Call,err != -ENOENT)"];
"1001001" [label="(ControlStructure,break;)"];
"1000996" [label="(Identifier,err)"];
"1000265" [label="(ControlStructure,if (err == 1))"];
"1000280" [label="(Identifier,env)"];
"1001057" [label="(Call,check_ld_imm(env, insn))"];
"1000266" [label="(Call,err == 1)"];
"1000273" [label="(Identifier,env)"];
"1001106" [label="(Identifier,i)"];
"1000253" [label="(Identifier,err)"];
"1000997" [label="(Call,-ENOENT)"];
"1001012" [label="(Call,check_cond_jmp_op(env, insn, &env->insn_idx))"];
"1000562" [label="(Call,env->insn_idx++)"];
"1000260" [label="(Call,err < 0)"];
"1000245" [label="(Call,verbose(env,\n\t\t\t\t\"BPF program is too large. Processed %d insn\n\",\n\t\t\t\tinsn_processed))"];
"1000985" [label="(Call,&env->insn_idx)"];
"1000244" [label="(Block,)"];
"1000803" [label="(Call,check_func_call(env, insn, &env->insn_idx))"];
"1000878" [label="(Block,)"];
"1000999" [label="(Return,return err;)"];
"1001092" [label="(Identifier,env)"];
"1000291" [label="(Literal,\"%d: safe\n\")"];
"1000552" [label="(Call,check_xadd(env, env->insn_idx, insn))"];
"1000916" [label="(Call,env->prev_insn_idx = env->insn_idx)"];
"1000210" [label="(ControlStructure,if (env->insn_idx >= insn_cnt))"];
"1000118" [label="(Block,)"];
"1000223" [label="(Identifier,insn_cnt)"];
"1000246" [label="(Identifier,env)"];
"1000281" [label="(Literal,\"\nfrom %d to %d: safe\n\")"];
"1001118" [label="(Call,verbose(env, \"%d\", depth))"];
"1000117" [label="(MethodParameterIn,struct bpf_verifier_env *env)"];
"1000132" [label="(Call,env->prog->len)"];
"1000196" [label="(Call,init_func_state(env, state->frame[0],\n\t\t\tBPF_MAIN_FUNC /* callsite */,\n\t\t\t0 /* frameno */,\n\t\t\t0 /* subprogno, zero == main subprog */))"];
"1000925" [label="(Call,prepare_func_exit(env, &env->insn_idx))"];
"1000981" [label="(Call,&env->prev_insn_idx)"];
"1000300" [label="(Identifier,EINVAL)"];
"1000279" [label="(Call,verbose(env, \"\nfrom %d to %d: safe\n\",\n\t\t\t\t\t\tenv->prev_insn_idx, env->insn_idx))"];
"1000261" [label="(Identifier,err)"];
"1000248" [label="(Identifier,insn_processed)"];
"1000228" [label="(Identifier,insn)"];
"1001131" [label="(Identifier,env)"];
"1000226" [label="(Identifier,EFAULT)"];
"1001132" [label="(Literal,\"+\")"];
"1000215" [label="(Identifier,insn_cnt)"];
"1001094" [label="(Identifier,insn_processed)"];
"1001125" [label="(Identifier,i)"];
"1001093" [label="(Literal,\"processed %d insns (limit %d), stack depth \")"];
"1000241" [label="(Call,++insn_processed)"];
"1001091" [label="(Call,verbose(env, \"processed %d insns (limit %d), stack depth \",\n\t\tinsn_processed, BPF_COMPLEXITY_LIMIT_INSNS))"];
"1001107" [label="(Block,)"];
"1000863" [label="(Call,env->insn_idx += insn->off + 1)"];
"1001120" [label="(Literal,\"%d\")"];
"1001000" [label="(Identifier,err)"];
"1000251" [label="(Identifier,E2BIG)"];
"1001095" [label="(Identifier,BPF_COMPLEXITY_LIMIT_INSNS)"];
"1000247" [label="(Literal,\"BPF program is too large. Processed %d insn\n\")"];
"1000980" [label="(Identifier,env)"];
"1000218" [label="(Identifier,env)"];
"1000994" [label="(ControlStructure,if (err != -ENOENT))"];
"1000277" [label="(ControlStructure,if (do_print_state))"];
"1000267" [label="(Identifier,err)"];
"1000211" [label="(Call,env->insn_idx >= insn_cnt)"];
"1000991" [label="(Identifier,err)"];
"1000288" [label="(ControlStructure,else)"];
"1000290" [label="(Identifier,env)"];
"1001098" [label="(Identifier,i)"];
"1001153" [label="(MethodReturn,static int)"];
"1000344" [label="(Call,verbose(env, \"\nfrom %d to %d:\",\n\t\t\t\t\tenv->prev_insn_idx, env->insn_idx))"];
"1000254" [label="(Call,is_state_visited(env, env->insn_idx))"];
"1000979" [label="(Call,pop_stack(env, &env->prev_insn_idx,\n\t\t\t\t\t\t&env->insn_idx))"];
"1000240" [label="(Call,++insn_processed > BPF_COMPLEXITY_LIMIT_INSNS)"];
"1000721" [label="(Call,check_mem_access(env, env->insn_idx, insn->dst_reg,\n\t\t\t\t\t       insn->off, BPF_SIZE(insn->code),\n\t\t\t\t\t       BPF_WRITE, -1, false))"];
"1001134" [label="(Identifier,env)"];
"1000216" [label="(Block,)"];
"1000295" [label="(ControlStructure,goto process_bpf_exit;)"];
"1001130" [label="(Call,verbose(env, \"+\"))"];
"1001042" [label="(Call,check_ld_abs(env, insn))"];
"1000268" [label="(Literal,1)"];
"1001119" [label="(Identifier,env)"];
"1000217" [label="(Call,verbose(env, \"invalid insn idx %d insn_cnt %d\n\",\n\t\t\t\tenv->insn_idx, insn_cnt))"];
"1000255" [label="(Identifier,env)"];
"1000259" [label="(ControlStructure,if (err < 0))"];
"1000990" [label="(Call,err < 0)"];
"1000989" [label="(ControlStructure,if (err < 0))"];
"1001109" [label="(Call,depth = env->subprog_info[i].stack_depth)"];
"1000140" [label="(Identifier,insn_processed)"];
"1000263" [label="(Return,return err;)"];
"1001005" [label="(Identifier,do_print_state)"];
"1001140" [label="(Identifier,env)"];
"1000992" [label="(Literal,0)"];
"1000262" [label="(Literal,0)"];
"1000285" [label="(Call,env->insn_idx)"];
"1000220" [label="(Call,env->insn_idx)"];
"1000256" [label="(Call,env->insn_idx)"];
"1000282" [label="(Call,env->prev_insn_idx)"];
"1000131" [label="(Identifier,insn_cnt)"];
"1000978" [label="(Identifier,err)"];
"1001133" [label="(Call,verbose(env, \"\n\"))"];
"1000130" [label="(Call,insn_cnt = env->prog->len)"];
"1000404" [label="(Call,bpf_prog_offload_verify_insn(env, env->insn_idx,\n\t\t\t\t\t\t\t   env->prev_insn_idx))"];
"1001121" [label="(Identifier,depth)"];
"1000970" [label="(Call,check_return_code(env))"];
"1000289" [label="(Call,verbose(env, \"%d: safe\n\", env->insn_idx))"];
"1000264" [label="(Identifier,err)"];
"1000207" [label="(Block,)"];
"1001122" [label="(ControlStructure,if (i + 1 < env->subprog_cnt))"];
"1000219" [label="(Literal,\"invalid insn idx %d insn_cnt %d\n\")"];
"1000292" [label="(Call,env->insn_idx)"];
"1000977" [label="(Call,err = pop_stack(env, &env->prev_insn_idx,\n\t\t\t\t\t\t&env->insn_idx))"];
"1001087" [label="(Call,env->insn_idx++)"];
"1001135" [label="(Literal,\"\n\")"];
"1000252" [label="(Call,err = is_state_visited(env, env->insn_idx))"];
"1000130" -> "1000118"  [label="AST: "];
"1000130" -> "1000132"  [label="CFG: "];
"1000131" -> "1000130"  [label="AST: "];
"1000132" -> "1000130"  [label="AST: "];
"1000140" -> "1000130"  [label="CFG: "];
"1000130" -> "1001153"  [label="DDG: "];
"1000130" -> "1001153"  [label="DDG: "];
"1000130" -> "1000211"  [label="DDG: "];
"1000211" -> "1000210"  [label="AST: "];
"1000211" -> "1000215"  [label="CFG: "];
"1000212" -> "1000211"  [label="AST: "];
"1000215" -> "1000211"  [label="AST: "];
"1000218" -> "1000211"  [label="CFG: "];
"1000228" -> "1000211"  [label="CFG: "];
"1000211" -> "1001153"  [label="DDG: "];
"1000211" -> "1001153"  [label="DDG: "];
"1000211" -> "1001153"  [label="DDG: "];
"1001012" -> "1000211"  [label="DDG: "];
"1000803" -> "1000211"  [label="DDG: "];
"1001087" -> "1000211"  [label="DDG: "];
"1000925" -> "1000211"  [label="DDG: "];
"1000863" -> "1000211"  [label="DDG: "];
"1000979" -> "1000211"  [label="DDG: "];
"1000289" -> "1000211"  [label="DDG: "];
"1000279" -> "1000211"  [label="DDG: "];
"1000562" -> "1000211"  [label="DDG: "];
"1000721" -> "1000211"  [label="DDG: "];
"1000254" -> "1000211"  [label="DDG: "];
"1000211" -> "1000217"  [label="DDG: "];
"1000211" -> "1000217"  [label="DDG: "];
"1000211" -> "1000254"  [label="DDG: "];
"1000217" -> "1000216"  [label="AST: "];
"1000217" -> "1000223"  [label="CFG: "];
"1000218" -> "1000217"  [label="AST: "];
"1000219" -> "1000217"  [label="AST: "];
"1000220" -> "1000217"  [label="AST: "];
"1000223" -> "1000217"  [label="AST: "];
"1000226" -> "1000217"  [label="CFG: "];
"1000217" -> "1001153"  [label="DDG: "];
"1000217" -> "1001153"  [label="DDG: "];
"1000217" -> "1001153"  [label="DDG: "];
"1000217" -> "1001153"  [label="DDG: "];
"1001057" -> "1000217"  [label="DDG: "];
"1001042" -> "1000217"  [label="DDG: "];
"1000721" -> "1000217"  [label="DDG: "];
"1000925" -> "1000217"  [label="DDG: "];
"1000925" -> "1000217"  [label="DDG: "];
"1000552" -> "1000217"  [label="DDG: "];
"1000196" -> "1000217"  [label="DDG: "];
"1000979" -> "1000217"  [label="DDG: "];
"1000979" -> "1000217"  [label="DDG: "];
"1000117" -> "1000217"  [label="DDG: "];
"1001012" -> "1000217"  [label="DDG: "];
"1000803" -> "1000217"  [label="DDG: "];
"1000254" -> "1000252"  [label="AST: "];
"1000254" -> "1000256"  [label="CFG: "];
"1000255" -> "1000254"  [label="AST: "];
"1000256" -> "1000254"  [label="AST: "];
"1000252" -> "1000254"  [label="CFG: "];
"1000254" -> "1001153"  [label="DDG: "];
"1000254" -> "1001153"  [label="DDG: "];
"1000254" -> "1000252"  [label="DDG: "];
"1000254" -> "1000252"  [label="DDG: "];
"1001057" -> "1000254"  [label="DDG: "];
"1001042" -> "1000254"  [label="DDG: "];
"1000721" -> "1000254"  [label="DDG: "];
"1000925" -> "1000254"  [label="DDG: "];
"1000925" -> "1000254"  [label="DDG: "];
"1000552" -> "1000254"  [label="DDG: "];
"1000196" -> "1000254"  [label="DDG: "];
"1000979" -> "1000254"  [label="DDG: "];
"1000979" -> "1000254"  [label="DDG: "];
"1000117" -> "1000254"  [label="DDG: "];
"1001012" -> "1000254"  [label="DDG: "];
"1000803" -> "1000254"  [label="DDG: "];
"1000254" -> "1000279"  [label="DDG: "];
"1000254" -> "1000279"  [label="DDG: "];
"1000254" -> "1000289"  [label="DDG: "];
"1000254" -> "1000289"  [label="DDG: "];
"1000254" -> "1000979"  [label="DDG: "];
"1000254" -> "1000979"  [label="DDG: "];
"1000252" -> "1000207"  [label="AST: "];
"1000253" -> "1000252"  [label="AST: "];
"1000261" -> "1000252"  [label="CFG: "];
"1000252" -> "1001153"  [label="DDG: "];
"1000252" -> "1000260"  [label="DDG: "];
"1000260" -> "1000259"  [label="AST: "];
"1000260" -> "1000262"  [label="CFG: "];
"1000261" -> "1000260"  [label="AST: "];
"1000262" -> "1000260"  [label="AST: "];
"1000264" -> "1000260"  [label="CFG: "];
"1000267" -> "1000260"  [label="CFG: "];
"1000260" -> "1001153"  [label="DDG: "];
"1000260" -> "1001153"  [label="DDG: "];
"1000260" -> "1000263"  [label="DDG: "];
"1000260" -> "1000266"  [label="DDG: "];
"1000263" -> "1000259"  [label="AST: "];
"1000263" -> "1000264"  [label="CFG: "];
"1000264" -> "1000263"  [label="AST: "];
"1001153" -> "1000263"  [label="CFG: "];
"1000263" -> "1001153"  [label="DDG: "];
"1000264" -> "1000263"  [label="DDG: "];
"1000266" -> "1000265"  [label="AST: "];
"1000266" -> "1000268"  [label="CFG: "];
"1000267" -> "1000266"  [label="AST: "];
"1000268" -> "1000266"  [label="AST: "];
"1000273" -> "1000266"  [label="CFG: "];
"1000300" -> "1000266"  [label="CFG: "];
"1000266" -> "1001153"  [label="DDG: "];
"1000266" -> "1001153"  [label="DDG: "];
"1000279" -> "1000277"  [label="AST: "];
"1000279" -> "1000285"  [label="CFG: "];
"1000280" -> "1000279"  [label="AST: "];
"1000281" -> "1000279"  [label="AST: "];
"1000282" -> "1000279"  [label="AST: "];
"1000285" -> "1000279"  [label="AST: "];
"1000295" -> "1000279"  [label="CFG: "];
"1000279" -> "1001153"  [label="DDG: "];
"1000279" -> "1001153"  [label="DDG: "];
"1000279" -> "1001153"  [label="DDG: "];
"1000117" -> "1000279"  [label="DDG: "];
"1000344" -> "1000279"  [label="DDG: "];
"1000916" -> "1000279"  [label="DDG: "];
"1000404" -> "1000279"  [label="DDG: "];
"1000979" -> "1000279"  [label="DDG: "];
"1000979" -> "1000279"  [label="DDG: "];
"1001012" -> "1000279"  [label="DDG: "];
"1000803" -> "1000279"  [label="DDG: "];
"1000925" -> "1000279"  [label="DDG: "];
"1000279" -> "1000979"  [label="DDG: "];
"1000279" -> "1000979"  [label="DDG: "];
"1000279" -> "1000979"  [label="DDG: "];
"1000979" -> "1000977"  [label="AST: "];
"1000979" -> "1000985"  [label="CFG: "];
"1000980" -> "1000979"  [label="AST: "];
"1000981" -> "1000979"  [label="AST: "];
"1000985" -> "1000979"  [label="AST: "];
"1000977" -> "1000979"  [label="CFG: "];
"1000979" -> "1001153"  [label="DDG: "];
"1000979" -> "1001153"  [label="DDG: "];
"1000979" -> "1001153"  [label="DDG: "];
"1000979" -> "1000245"  [label="DDG: "];
"1000979" -> "1000289"  [label="DDG: "];
"1000979" -> "1000977"  [label="DDG: "];
"1000979" -> "1000977"  [label="DDG: "];
"1000979" -> "1000977"  [label="DDG: "];
"1000970" -> "1000979"  [label="DDG: "];
"1000289" -> "1000979"  [label="DDG: "];
"1000289" -> "1000979"  [label="DDG: "];
"1000117" -> "1000979"  [label="DDG: "];
"1000344" -> "1000979"  [label="DDG: "];
"1000916" -> "1000979"  [label="DDG: "];
"1000404" -> "1000979"  [label="DDG: "];
"1001012" -> "1000979"  [label="DDG: "];
"1000803" -> "1000979"  [label="DDG: "];
"1000925" -> "1000979"  [label="DDG: "];
"1000721" -> "1000979"  [label="DDG: "];
"1000979" -> "1001091"  [label="DDG: "];
"1000245" -> "1000244"  [label="AST: "];
"1000245" -> "1000248"  [label="CFG: "];
"1000246" -> "1000245"  [label="AST: "];
"1000247" -> "1000245"  [label="AST: "];
"1000248" -> "1000245"  [label="AST: "];
"1000251" -> "1000245"  [label="CFG: "];
"1000245" -> "1001153"  [label="DDG: "];
"1000245" -> "1001153"  [label="DDG: "];
"1000245" -> "1001153"  [label="DDG: "];
"1001057" -> "1000245"  [label="DDG: "];
"1001042" -> "1000245"  [label="DDG: "];
"1000721" -> "1000245"  [label="DDG: "];
"1000925" -> "1000245"  [label="DDG: "];
"1000552" -> "1000245"  [label="DDG: "];
"1000196" -> "1000245"  [label="DDG: "];
"1000117" -> "1000245"  [label="DDG: "];
"1000241" -> "1000245"  [label="DDG: "];
"1000289" -> "1000288"  [label="AST: "];
"1000289" -> "1000292"  [label="CFG: "];
"1000290" -> "1000289"  [label="AST: "];
"1000291" -> "1000289"  [label="AST: "];
"1000292" -> "1000289"  [label="AST: "];
"1000295" -> "1000289"  [label="CFG: "];
"1000289" -> "1001153"  [label="DDG: "];
"1000289" -> "1001153"  [label="DDG: "];
"1000117" -> "1000289"  [label="DDG: "];
"1001012" -> "1000289"  [label="DDG: "];
"1000803" -> "1000289"  [label="DDG: "];
"1000925" -> "1000289"  [label="DDG: "];
"1000977" -> "1000878"  [label="AST: "];
"1000978" -> "1000977"  [label="AST: "];
"1000991" -> "1000977"  [label="CFG: "];
"1000977" -> "1001153"  [label="DDG: "];
"1000977" -> "1000990"  [label="DDG: "];
"1000990" -> "1000989"  [label="AST: "];
"1000990" -> "1000992"  [label="CFG: "];
"1000991" -> "1000990"  [label="AST: "];
"1000992" -> "1000990"  [label="AST: "];
"1000996" -> "1000990"  [label="CFG: "];
"1001005" -> "1000990"  [label="CFG: "];
"1000990" -> "1001153"  [label="DDG: "];
"1000990" -> "1001153"  [label="DDG: "];
"1000990" -> "1000995"  [label="DDG: "];
"1000995" -> "1000994"  [label="AST: "];
"1000995" -> "1000997"  [label="CFG: "];
"1000996" -> "1000995"  [label="AST: "];
"1000997" -> "1000995"  [label="AST: "];
"1001000" -> "1000995"  [label="CFG: "];
"1001001" -> "1000995"  [label="CFG: "];
"1000995" -> "1001153"  [label="DDG: "];
"1000995" -> "1001153"  [label="DDG: "];
"1000995" -> "1001153"  [label="DDG: "];
"1000997" -> "1000995"  [label="DDG: "];
"1000995" -> "1000999"  [label="DDG: "];
"1000999" -> "1000994"  [label="AST: "];
"1000999" -> "1001000"  [label="CFG: "];
"1001000" -> "1000999"  [label="AST: "];
"1001153" -> "1000999"  [label="CFG: "];
"1000999" -> "1001153"  [label="DDG: "];
"1001000" -> "1000999"  [label="DDG: "];
"1001091" -> "1000118"  [label="AST: "];
"1001091" -> "1001095"  [label="CFG: "];
"1001092" -> "1001091"  [label="AST: "];
"1001093" -> "1001091"  [label="AST: "];
"1001094" -> "1001091"  [label="AST: "];
"1001095" -> "1001091"  [label="AST: "];
"1001098" -> "1001091"  [label="CFG: "];
"1001091" -> "1001153"  [label="DDG: "];
"1001091" -> "1001153"  [label="DDG: "];
"1001091" -> "1001153"  [label="DDG: "];
"1000117" -> "1001091"  [label="DDG: "];
"1000241" -> "1001091"  [label="DDG: "];
"1000240" -> "1001091"  [label="DDG: "];
"1001091" -> "1001118"  [label="DDG: "];
"1001091" -> "1001133"  [label="DDG: "];
"1001118" -> "1001107"  [label="AST: "];
"1001118" -> "1001121"  [label="CFG: "];
"1001119" -> "1001118"  [label="AST: "];
"1001120" -> "1001118"  [label="AST: "];
"1001121" -> "1001118"  [label="AST: "];
"1001125" -> "1001118"  [label="CFG: "];
"1001118" -> "1001153"  [label="DDG: "];
"1001118" -> "1001153"  [label="DDG: "];
"1001130" -> "1001118"  [label="DDG: "];
"1000117" -> "1001118"  [label="DDG: "];
"1001109" -> "1001118"  [label="DDG: "];
"1001118" -> "1001130"  [label="DDG: "];
"1001118" -> "1001133"  [label="DDG: "];
"1001130" -> "1001122"  [label="AST: "];
"1001130" -> "1001132"  [label="CFG: "];
"1001131" -> "1001130"  [label="AST: "];
"1001132" -> "1001130"  [label="AST: "];
"1001106" -> "1001130"  [label="CFG: "];
"1001130" -> "1001153"  [label="DDG: "];
"1000117" -> "1001130"  [label="DDG: "];
"1001130" -> "1001133"  [label="DDG: "];
"1001133" -> "1000118"  [label="AST: "];
"1001133" -> "1001135"  [label="CFG: "];
"1001134" -> "1001133"  [label="AST: "];
"1001135" -> "1001133"  [label="AST: "];
"1001140" -> "1001133"  [label="CFG: "];
"1001133" -> "1001153"  [label="DDG: "];
"1001133" -> "1001153"  [label="DDG: "];
"1000117" -> "1001133"  [label="DDG: "];
}
