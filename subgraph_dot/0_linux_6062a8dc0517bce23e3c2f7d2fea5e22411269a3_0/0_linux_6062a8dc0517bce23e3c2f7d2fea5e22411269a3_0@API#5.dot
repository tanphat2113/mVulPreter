digraph "0_linux_6062a8dc0517bce23e3c2f7d2fea5e22411269a3_0@API" {
"1000182" [label="(Call,sops = kmalloc(sizeof(*sops)*nsops,GFP_KERNEL))"];
"1000184" [label="(Call,kmalloc(sizeof(*sops)*nsops,GFP_KERNEL))"];
"1000185" [label="(Call,sizeof(*sops)*nsops)"];
"1000178" [label="(Call,nsops > SEMOPM_FAST)"];
"1000169" [label="(Call,nsops > ns->sc_semopm)"];
"1000159" [label="(Call,nsops < 1)"];
"1000192" [label="(Call,sops==NULL)"];
"1000199" [label="(Call,copy_from_user (sops, tsops, nsops * sizeof(*tsops)))"];
"1000264" [label="(Call,sop = sops)"];
"1000267" [label="(Call,sop < sops + nsops)"];
"1000272" [label="(Call,sop++)"];
"1000269" [label="(Call,sops + nsops)"];
"1000378" [label="(Call,security_sem_semop(sma, sops, nsops, alter))"];
"1000376" [label="(Call,error = security_sem_semop(sma, sops, nsops, alter))"];
"1000632" [label="(Return,return error;)"];
"1000394" [label="(Call,sem_lock(sma, sops, nsops))"];
"1000392" [label="(Call,locknum = sem_lock(sma, sops, nsops))"];
"1000543" [label="(Call,sem_unlock(sma, locknum))"];
"1000618" [label="(Call,sem_unlock(sma, locknum))"];
"1000410" [label="(Call,try_atomic_semop (sma, sops, nsops, un, task_tgid_vnr(current)))"];
"1000408" [label="(Call,error = try_atomic_semop (sma, sops, nsops, un, task_tgid_vnr(current)))"];
"1000418" [label="(Call,error <= 0)"];
"1000425" [label="(Call,error == 0)"];
"1000423" [label="(Call,alter && error == 0)"];
"1000428" [label="(Call,do_smart_update(sma, sops, nsops, 1, &tasks))"];
"1000622" [label="(Call,wake_up_sem_queue_do(&tasks))"];
"1000627" [label="(Call,sops != fast_sops)"];
"1000630" [label="(Call,kfree(sops))"];
"1000436" [label="(Call,queue.sops = sops)"];
"1000441" [label="(Call,queue.nsops = nsops)"];
"1000446" [label="(Call,queue.undo = un)"];
"1000463" [label="(Call,nsops == 1)"];
"1000569" [label="(Call,sem_obtain_lock(ns, semid, sops, nsops, &locknum))"];
"1000567" [label="(Call,sma = sem_obtain_lock(ns, semid, sops, nsops, &locknum))"];
"1000582" [label="(Call,IS_ERR(sma))"];
"1000613" [label="(Call,unlink_queue(sma, &queue))"];
"1000457" [label="(Call,queue.alter = alter)"];
"1000326" [label="(Call,un = NULL)"];
"1000399" [label="(Call,un && un->semid == -1)"];
"1000576" [label="(Call,error = get_queue_result(&queue))"];
"1000465" [label="(Literal,1)"];
"1000400" [label="(Identifier,un)"];
"1000177" [label="(ControlStructure,if(nsops > SEMOPM_FAST))"];
"1000629" [label="(Identifier,fast_sops)"];
"1000438" [label="(Identifier,queue)"];
"1000388" [label="(Call,error = -EIDRM)"];
"1000226" [label="(Call,error = -EFAULT)"];
"1000443" [label="(Identifier,queue)"];
"1000544" [label="(Identifier,sma)"];
"1000420" [label="(Literal,0)"];
"1000573" [label="(Identifier,nsops)"];
"1000463" [label="(Call,nsops == 1)"];
"1000623" [label="(Call,&tasks)"];
"1000264" [label="(Call,sop = sops)"];
"1000458" [label="(Call,queue.alter)"];
"1000399" [label="(Call,un && un->semid == -1)"];
"1000567" [label="(Call,sma = sem_obtain_lock(ns, semid, sops, nsops, &locknum))"];
"1000630" [label="(Call,kfree(sops))"];
"1000250" [label="(Call,error = -EINVAL)"];
"1000272" [label="(Call,sop++)"];
"1000417" [label="(ControlStructure,if (error <= 0))"];
"1000442" [label="(Call,queue.nsops)"];
"1000547" [label="(Identifier,timeout)"];
"1000183" [label="(Identifier,sops)"];
"1000615" [label="(Call,&queue)"];
"1000201" [label="(Identifier,tsops)"];
"1000428" [label="(Call,do_smart_update(sma, sops, nsops, 1, &tasks))"];
"1000432" [label="(Literal,1)"];
"1000332" [label="(Call,sem_obtain_object_check(ns, semid))"];
"1000180" [label="(Identifier,SEMOPM_FAST)"];
"1000450" [label="(Identifier,un)"];
"1000268" [label="(Identifier,sop)"];
"1000325" [label="(Block,)"];
"1000426" [label="(Identifier,error)"];
"1000179" [label="(Identifier,nsops)"];
"1000181" [label="(Block,)"];
"1000316" [label="(Call,IS_ERR(un))"];
"1000270" [label="(Identifier,sops)"];
"1000628" [label="(Identifier,sops)"];
"1000185" [label="(Call,sizeof(*sops)*nsops)"];
"1000199" [label="(Call,copy_from_user (sops, tsops, nsops * sizeof(*tsops)))"];
"1000423" [label="(Call,alter && error == 0)"];
"1000209" [label="(Identifier,error)"];
"1000560" [label="(Call,error != -EINTR)"];
"1000570" [label="(Identifier,ns)"];
"1000194" [label="(Identifier,NULL)"];
"1000336" [label="(Call,IS_ERR(sma))"];
"1000265" [label="(Identifier,sop)"];
"1000329" [label="(Call,rcu_read_lock())"];
"1000168" [label="(ControlStructure,if (nsops > ns->sc_semopm))"];
"1000568" [label="(Identifier,sma)"];
"1000424" [label="(Identifier,alter)"];
"1000632" [label="(Return,return error;)"];
"1000625" [label="(JumpTarget,out_free:)"];
"1000381" [label="(Identifier,nsops)"];
"1000433" [label="(Call,&tasks)"];
"1000119" [label="(Block,)"];
"1000429" [label="(Identifier,sma)"];
"1000159" [label="(Call,nsops < 1)"];
"1000191" [label="(ControlStructure,if(sops==NULL))"];
"1000198" [label="(ControlStructure,if (copy_from_user (sops, tsops, nsops * sizeof(*tsops))))"];
"1000418" [label="(Call,error <= 0)"];
"1000327" [label="(Identifier,un)"];
"1000392" [label="(Call,locknum = sem_lock(sma, sops, nsops))"];
"1000415" [label="(Call,task_tgid_vnr(current))"];
"1000419" [label="(Identifier,error)"];
"1000410" [label="(Call,try_atomic_semop (sma, sops, nsops, un, task_tgid_vnr(current)))"];
"1000588" [label="(Identifier,error)"];
"1000345" [label="(Call,error = -EFBIG)"];
"1000571" [label="(Identifier,semid)"];
"1000577" [label="(Identifier,error)"];
"1000189" [label="(Identifier,nsops)"];
"1000376" [label="(Call,error = security_sem_semop(sma, sops, nsops, alter))"];
"1000382" [label="(Identifier,alter)"];
"1000384" [label="(Identifier,error)"];
"1000306" [label="(Identifier,tasks)"];
"1000326" [label="(Call,un = NULL)"];
"1000446" [label="(Call,queue.undo = un)"];
"1000437" [label="(Call,queue.sops)"];
"1000412" [label="(Identifier,sops)"];
"1000543" [label="(Call,sem_unlock(sma, locknum))"];
"1000396" [label="(Identifier,sops)"];
"1000448" [label="(Identifier,queue)"];
"1000427" [label="(Literal,0)"];
"1000393" [label="(Identifier,locknum)"];
"1000634" [label="(MethodReturn,RET)"];
"1000582" [label="(Call,IS_ERR(sma))"];
"1000379" [label="(Identifier,sma)"];
"1000169" [label="(Call,nsops > ns->sc_semopm)"];
"1000263" [label="(ControlStructure,for (sop = sops; sop < sops + nsops; sop++))"];
"1000190" [label="(Identifier,GFP_KERNEL)"];
"1000161" [label="(Literal,1)"];
"1000267" [label="(Call,sop < sops + nsops)"];
"1000613" [label="(Call,unlink_queue(sma, &queue))"];
"1000409" [label="(Identifier,error)"];
"1000440" [label="(Identifier,sops)"];
"1000461" [label="(Identifier,alter)"];
"1000585" [label="(ControlStructure,goto out_free;)"];
"1000626" [label="(ControlStructure,if(sops != fast_sops))"];
"1000200" [label="(Identifier,sops)"];
"1000186" [label="(Call,sizeof(*sops))"];
"1000184" [label="(Call,kmalloc(sizeof(*sops)*nsops,GFP_KERNEL))"];
"1000627" [label="(Call,sops != fast_sops)"];
"1000411" [label="(Identifier,sma)"];
"1000435" [label="(ControlStructure,goto out_unlock_free;)"];
"1000583" [label="(Identifier,sma)"];
"1000380" [label="(Identifier,sops)"];
"1000569" [label="(Call,sem_obtain_lock(ns, semid, sops, nsops, &locknum))"];
"1000447" [label="(Call,queue.undo)"];
"1000377" [label="(Identifier,error)"];
"1000269" [label="(Call,sops + nsops)"];
"1000266" [label="(Identifier,sops)"];
"1000441" [label="(Call,queue.nsops = nsops)"];
"1000197" [label="(Identifier,ENOMEM)"];
"1000620" [label="(Identifier,locknum)"];
"1000587" [label="(Call,error != -EINTR)"];
"1000363" [label="(Call,ipcperms(ns, &sma->sem_perm, alter ? S_IWUGO : S_IRUGO))"];
"1000176" [label="(Identifier,E2BIG)"];
"1000431" [label="(Identifier,nsops)"];
"1000614" [label="(Identifier,sma)"];
"1000170" [label="(Identifier,nsops)"];
"1000407" [label="(ControlStructure,goto out_unlock_free;)"];
"1000619" [label="(Identifier,sma)"];
"1000158" [label="(Call,nsops < 1 || semid < 0)"];
"1000502" [label="(Identifier,alter)"];
"1000271" [label="(Identifier,nsops)"];
"1000163" [label="(Identifier,semid)"];
"1000445" [label="(Identifier,nsops)"];
"1000545" [label="(Identifier,locknum)"];
"1000304" [label="(Call,INIT_LIST_HEAD(&tasks))"];
"1000633" [label="(Identifier,error)"];
"1000574" [label="(Call,&locknum)"];
"1000617" [label="(JumpTarget,out_unlock_free:)"];
"1000401" [label="(Call,un->semid == -1)"];
"1000572" [label="(Identifier,sops)"];
"1000394" [label="(Call,sem_lock(sma, sops, nsops))"];
"1000193" [label="(Identifier,sops)"];
"1000414" [label="(Identifier,un)"];
"1000605" [label="(Call,error == -EINTR)"];
"1000464" [label="(Identifier,nsops)"];
"1000192" [label="(Call,sops==NULL)"];
"1000378" [label="(Call,security_sem_semop(sma, sops, nsops, alter))"];
"1000128" [label="(Call,* sops = fast_sops)"];
"1000436" [label="(Call,queue.sops = sops)"];
"1000469" [label="(Identifier,curr)"];
"1000581" [label="(ControlStructure,if (IS_ERR(sma)))"];
"1000182" [label="(Call,sops = kmalloc(sizeof(*sops)*nsops,GFP_KERNEL))"];
"1000578" [label="(Call,get_queue_result(&queue))"];
"1000622" [label="(Call,wake_up_sem_queue_do(&tasks))"];
"1000453" [label="(Identifier,queue)"];
"1000171" [label="(Call,ns->sc_semopm)"];
"1000408" [label="(Call,error = try_atomic_semop (sma, sops, nsops, un, task_tgid_vnr(current)))"];
"1000214" [label="(Identifier,timeout)"];
"1000395" [label="(Identifier,sma)"];
"1000618" [label="(Call,sem_unlock(sma, locknum))"];
"1000178" [label="(Call,nsops > SEMOPM_FAST)"];
"1000457" [label="(Call,queue.alter = alter)"];
"1000397" [label="(Identifier,nsops)"];
"1000328" [label="(Identifier,NULL)"];
"1000621" [label="(JumpTarget,out_wakeup:)"];
"1000413" [label="(Identifier,nsops)"];
"1000273" [label="(Identifier,sop)"];
"1000358" [label="(Call,error = -EACCES)"];
"1000425" [label="(Call,error == 0)"];
"1000319" [label="(Call,error = PTR_ERR(un))"];
"1000340" [label="(Call,error = PTR_ERR(sma))"];
"1000430" [label="(Identifier,sops)"];
"1000631" [label="(Identifier,sops)"];
"1000398" [label="(ControlStructure,if (un && un->semid == -1))"];
"1000422" [label="(ControlStructure,if (alter && error == 0))"];
"1000208" [label="(Call,error=-EFAULT)"];
"1000278" [label="(Identifier,sop)"];
"1000160" [label="(Identifier,nsops)"];
"1000462" [label="(ControlStructure,if (nsops == 1))"];
"1000202" [label="(Call,nsops * sizeof(*tsops))"];
"1000182" -> "1000181"  [label="AST: "];
"1000182" -> "1000184"  [label="CFG: "];
"1000183" -> "1000182"  [label="AST: "];
"1000184" -> "1000182"  [label="AST: "];
"1000193" -> "1000182"  [label="CFG: "];
"1000182" -> "1000634"  [label="DDG: kmalloc(sizeof(*sops)*nsops,GFP_KERNEL)"];
"1000184" -> "1000182"  [label="DDG: sizeof(*sops)*nsops"];
"1000184" -> "1000182"  [label="DDG: GFP_KERNEL"];
"1000182" -> "1000192"  [label="DDG: sops"];
"1000184" -> "1000190"  [label="CFG: "];
"1000185" -> "1000184"  [label="AST: "];
"1000190" -> "1000184"  [label="AST: "];
"1000184" -> "1000634"  [label="DDG: sizeof(*sops)*nsops"];
"1000184" -> "1000634"  [label="DDG: GFP_KERNEL"];
"1000185" -> "1000184"  [label="DDG: nsops"];
"1000185" -> "1000189"  [label="CFG: "];
"1000186" -> "1000185"  [label="AST: "];
"1000189" -> "1000185"  [label="AST: "];
"1000190" -> "1000185"  [label="CFG: "];
"1000185" -> "1000634"  [label="DDG: nsops"];
"1000178" -> "1000185"  [label="DDG: nsops"];
"1000185" -> "1000202"  [label="DDG: nsops"];
"1000178" -> "1000177"  [label="AST: "];
"1000178" -> "1000180"  [label="CFG: "];
"1000179" -> "1000178"  [label="AST: "];
"1000180" -> "1000178"  [label="AST: "];
"1000183" -> "1000178"  [label="CFG: "];
"1000200" -> "1000178"  [label="CFG: "];
"1000178" -> "1000634"  [label="DDG: nsops > SEMOPM_FAST"];
"1000178" -> "1000634"  [label="DDG: SEMOPM_FAST"];
"1000169" -> "1000178"  [label="DDG: nsops"];
"1000178" -> "1000202"  [label="DDG: nsops"];
"1000169" -> "1000168"  [label="AST: "];
"1000169" -> "1000171"  [label="CFG: "];
"1000170" -> "1000169"  [label="AST: "];
"1000171" -> "1000169"  [label="AST: "];
"1000176" -> "1000169"  [label="CFG: "];
"1000179" -> "1000169"  [label="CFG: "];
"1000169" -> "1000634"  [label="DDG: nsops > ns->sc_semopm"];
"1000169" -> "1000634"  [label="DDG: ns->sc_semopm"];
"1000169" -> "1000634"  [label="DDG: nsops"];
"1000159" -> "1000169"  [label="DDG: nsops"];
"1000159" -> "1000158"  [label="AST: "];
"1000159" -> "1000161"  [label="CFG: "];
"1000160" -> "1000159"  [label="AST: "];
"1000161" -> "1000159"  [label="AST: "];
"1000163" -> "1000159"  [label="CFG: "];
"1000158" -> "1000159"  [label="CFG: "];
"1000159" -> "1000634"  [label="DDG: nsops"];
"1000159" -> "1000158"  [label="DDG: nsops"];
"1000159" -> "1000158"  [label="DDG: 1"];
"1000192" -> "1000191"  [label="AST: "];
"1000192" -> "1000194"  [label="CFG: "];
"1000193" -> "1000192"  [label="AST: "];
"1000194" -> "1000192"  [label="AST: "];
"1000197" -> "1000192"  [label="CFG: "];
"1000200" -> "1000192"  [label="CFG: "];
"1000192" -> "1000634"  [label="DDG: NULL"];
"1000192" -> "1000634"  [label="DDG: sops"];
"1000192" -> "1000634"  [label="DDG: sops==NULL"];
"1000192" -> "1000199"  [label="DDG: sops"];
"1000192" -> "1000326"  [label="DDG: NULL"];
"1000199" -> "1000198"  [label="AST: "];
"1000199" -> "1000202"  [label="CFG: "];
"1000200" -> "1000199"  [label="AST: "];
"1000201" -> "1000199"  [label="AST: "];
"1000202" -> "1000199"  [label="AST: "];
"1000209" -> "1000199"  [label="CFG: "];
"1000214" -> "1000199"  [label="CFG: "];
"1000199" -> "1000634"  [label="DDG: tsops"];
"1000199" -> "1000634"  [label="DDG: copy_from_user (sops, tsops, nsops * sizeof(*tsops))"];
"1000199" -> "1000634"  [label="DDG: nsops * sizeof(*tsops)"];
"1000128" -> "1000199"  [label="DDG: sops"];
"1000202" -> "1000199"  [label="DDG: nsops"];
"1000199" -> "1000264"  [label="DDG: sops"];
"1000199" -> "1000267"  [label="DDG: sops"];
"1000199" -> "1000269"  [label="DDG: sops"];
"1000199" -> "1000378"  [label="DDG: sops"];
"1000199" -> "1000627"  [label="DDG: sops"];
"1000264" -> "1000263"  [label="AST: "];
"1000264" -> "1000266"  [label="CFG: "];
"1000265" -> "1000264"  [label="AST: "];
"1000266" -> "1000264"  [label="AST: "];
"1000268" -> "1000264"  [label="CFG: "];
"1000264" -> "1000267"  [label="DDG: sop"];
"1000267" -> "1000263"  [label="AST: "];
"1000267" -> "1000269"  [label="CFG: "];
"1000268" -> "1000267"  [label="AST: "];
"1000269" -> "1000267"  [label="AST: "];
"1000278" -> "1000267"  [label="CFG: "];
"1000306" -> "1000267"  [label="CFG: "];
"1000267" -> "1000634"  [label="DDG: sops + nsops"];
"1000267" -> "1000634"  [label="DDG: sop < sops + nsops"];
"1000267" -> "1000634"  [label="DDG: sop"];
"1000272" -> "1000267"  [label="DDG: sop"];
"1000202" -> "1000267"  [label="DDG: nsops"];
"1000267" -> "1000272"  [label="DDG: sop"];
"1000272" -> "1000263"  [label="AST: "];
"1000272" -> "1000273"  [label="CFG: "];
"1000273" -> "1000272"  [label="AST: "];
"1000268" -> "1000272"  [label="CFG: "];
"1000269" -> "1000271"  [label="CFG: "];
"1000270" -> "1000269"  [label="AST: "];
"1000271" -> "1000269"  [label="AST: "];
"1000269" -> "1000634"  [label="DDG: nsops"];
"1000202" -> "1000269"  [label="DDG: nsops"];
"1000378" -> "1000376"  [label="AST: "];
"1000378" -> "1000382"  [label="CFG: "];
"1000379" -> "1000378"  [label="AST: "];
"1000380" -> "1000378"  [label="AST: "];
"1000381" -> "1000378"  [label="AST: "];
"1000382" -> "1000378"  [label="AST: "];
"1000376" -> "1000378"  [label="CFG: "];
"1000378" -> "1000634"  [label="DDG: sma"];
"1000378" -> "1000634"  [label="DDG: alter"];
"1000378" -> "1000634"  [label="DDG: nsops"];
"1000378" -> "1000376"  [label="DDG: sma"];
"1000378" -> "1000376"  [label="DDG: sops"];
"1000378" -> "1000376"  [label="DDG: nsops"];
"1000378" -> "1000376"  [label="DDG: alter"];
"1000336" -> "1000378"  [label="DDG: sma"];
"1000202" -> "1000378"  [label="DDG: nsops"];
"1000378" -> "1000394"  [label="DDG: sma"];
"1000378" -> "1000394"  [label="DDG: sops"];
"1000378" -> "1000394"  [label="DDG: nsops"];
"1000378" -> "1000423"  [label="DDG: alter"];
"1000378" -> "1000457"  [label="DDG: alter"];
"1000378" -> "1000627"  [label="DDG: sops"];
"1000376" -> "1000119"  [label="AST: "];
"1000377" -> "1000376"  [label="AST: "];
"1000384" -> "1000376"  [label="CFG: "];
"1000376" -> "1000634"  [label="DDG: error"];
"1000376" -> "1000634"  [label="DDG: security_sem_semop(sma, sops, nsops, alter)"];
"1000376" -> "1000632"  [label="DDG: error"];
"1000632" -> "1000119"  [label="AST: "];
"1000632" -> "1000633"  [label="CFG: "];
"1000633" -> "1000632"  [label="AST: "];
"1000634" -> "1000632"  [label="CFG: "];
"1000632" -> "1000634"  [label="DDG: <RET>"];
"1000633" -> "1000632"  [label="DDG: error"];
"1000208" -> "1000632"  [label="DDG: error"];
"1000388" -> "1000632"  [label="DDG: error"];
"1000576" -> "1000632"  [label="DDG: error"];
"1000587" -> "1000632"  [label="DDG: error"];
"1000425" -> "1000632"  [label="DDG: error"];
"1000345" -> "1000632"  [label="DDG: error"];
"1000340" -> "1000632"  [label="DDG: error"];
"1000560" -> "1000632"  [label="DDG: error"];
"1000358" -> "1000632"  [label="DDG: error"];
"1000250" -> "1000632"  [label="DDG: error"];
"1000226" -> "1000632"  [label="DDG: error"];
"1000319" -> "1000632"  [label="DDG: error"];
"1000605" -> "1000632"  [label="DDG: error"];
"1000418" -> "1000632"  [label="DDG: error"];
"1000394" -> "1000392"  [label="AST: "];
"1000394" -> "1000397"  [label="CFG: "];
"1000395" -> "1000394"  [label="AST: "];
"1000396" -> "1000394"  [label="AST: "];
"1000397" -> "1000394"  [label="AST: "];
"1000392" -> "1000394"  [label="CFG: "];
"1000394" -> "1000634"  [label="DDG: nsops"];
"1000394" -> "1000392"  [label="DDG: sma"];
"1000394" -> "1000392"  [label="DDG: sops"];
"1000394" -> "1000392"  [label="DDG: nsops"];
"1000394" -> "1000410"  [label="DDG: sma"];
"1000394" -> "1000410"  [label="DDG: sops"];
"1000394" -> "1000410"  [label="DDG: nsops"];
"1000394" -> "1000618"  [label="DDG: sma"];
"1000394" -> "1000627"  [label="DDG: sops"];
"1000392" -> "1000119"  [label="AST: "];
"1000393" -> "1000392"  [label="AST: "];
"1000400" -> "1000392"  [label="CFG: "];
"1000392" -> "1000634"  [label="DDG: sem_lock(sma, sops, nsops)"];
"1000392" -> "1000543"  [label="DDG: locknum"];
"1000392" -> "1000618"  [label="DDG: locknum"];
"1000543" -> "1000119"  [label="AST: "];
"1000543" -> "1000545"  [label="CFG: "];
"1000544" -> "1000543"  [label="AST: "];
"1000545" -> "1000543"  [label="AST: "];
"1000547" -> "1000543"  [label="CFG: "];
"1000543" -> "1000634"  [label="DDG: sem_unlock(sma, locknum)"];
"1000543" -> "1000634"  [label="DDG: locknum"];
"1000543" -> "1000634"  [label="DDG: sma"];
"1000410" -> "1000543"  [label="DDG: sma"];
"1000582" -> "1000543"  [label="DDG: sma"];
"1000543" -> "1000618"  [label="DDG: locknum"];
"1000618" -> "1000119"  [label="AST: "];
"1000618" -> "1000620"  [label="CFG: "];
"1000619" -> "1000618"  [label="AST: "];
"1000620" -> "1000618"  [label="AST: "];
"1000621" -> "1000618"  [label="CFG: "];
"1000618" -> "1000634"  [label="DDG: sem_unlock(sma, locknum)"];
"1000618" -> "1000634"  [label="DDG: sma"];
"1000618" -> "1000634"  [label="DDG: locknum"];
"1000613" -> "1000618"  [label="DDG: sma"];
"1000410" -> "1000618"  [label="DDG: sma"];
"1000582" -> "1000618"  [label="DDG: sma"];
"1000428" -> "1000618"  [label="DDG: sma"];
"1000410" -> "1000408"  [label="AST: "];
"1000410" -> "1000415"  [label="CFG: "];
"1000411" -> "1000410"  [label="AST: "];
"1000412" -> "1000410"  [label="AST: "];
"1000413" -> "1000410"  [label="AST: "];
"1000414" -> "1000410"  [label="AST: "];
"1000415" -> "1000410"  [label="AST: "];
"1000408" -> "1000410"  [label="CFG: "];
"1000410" -> "1000634"  [label="DDG: un"];
"1000410" -> "1000634"  [label="DDG: nsops"];
"1000410" -> "1000634"  [label="DDG: task_tgid_vnr(current)"];
"1000410" -> "1000408"  [label="DDG: un"];
"1000410" -> "1000408"  [label="DDG: task_tgid_vnr(current)"];
"1000410" -> "1000408"  [label="DDG: nsops"];
"1000410" -> "1000408"  [label="DDG: sops"];
"1000410" -> "1000408"  [label="DDG: sma"];
"1000399" -> "1000410"  [label="DDG: un"];
"1000415" -> "1000410"  [label="DDG: current"];
"1000410" -> "1000428"  [label="DDG: sma"];
"1000410" -> "1000428"  [label="DDG: sops"];
"1000410" -> "1000428"  [label="DDG: nsops"];
"1000410" -> "1000436"  [label="DDG: sops"];
"1000410" -> "1000441"  [label="DDG: nsops"];
"1000410" -> "1000446"  [label="DDG: un"];
"1000410" -> "1000463"  [label="DDG: nsops"];
"1000410" -> "1000569"  [label="DDG: sops"];
"1000410" -> "1000627"  [label="DDG: sops"];
"1000408" -> "1000119"  [label="AST: "];
"1000409" -> "1000408"  [label="AST: "];
"1000419" -> "1000408"  [label="CFG: "];
"1000408" -> "1000634"  [label="DDG: try_atomic_semop (sma, sops, nsops, un, task_tgid_vnr(current))"];
"1000408" -> "1000418"  [label="DDG: error"];
"1000418" -> "1000417"  [label="AST: "];
"1000418" -> "1000420"  [label="CFG: "];
"1000419" -> "1000418"  [label="AST: "];
"1000420" -> "1000418"  [label="AST: "];
"1000424" -> "1000418"  [label="CFG: "];
"1000438" -> "1000418"  [label="CFG: "];
"1000418" -> "1000634"  [label="DDG: error <= 0"];
"1000418" -> "1000634"  [label="DDG: error"];
"1000418" -> "1000425"  [label="DDG: error"];
"1000425" -> "1000423"  [label="AST: "];
"1000425" -> "1000427"  [label="CFG: "];
"1000426" -> "1000425"  [label="AST: "];
"1000427" -> "1000425"  [label="AST: "];
"1000423" -> "1000425"  [label="CFG: "];
"1000425" -> "1000634"  [label="DDG: error"];
"1000425" -> "1000423"  [label="DDG: error"];
"1000425" -> "1000423"  [label="DDG: 0"];
"1000423" -> "1000422"  [label="AST: "];
"1000423" -> "1000424"  [label="CFG: "];
"1000424" -> "1000423"  [label="AST: "];
"1000429" -> "1000423"  [label="CFG: "];
"1000435" -> "1000423"  [label="CFG: "];
"1000423" -> "1000634"  [label="DDG: alter && error == 0"];
"1000423" -> "1000634"  [label="DDG: error == 0"];
"1000423" -> "1000634"  [label="DDG: alter"];
"1000428" -> "1000422"  [label="AST: "];
"1000428" -> "1000433"  [label="CFG: "];
"1000429" -> "1000428"  [label="AST: "];
"1000430" -> "1000428"  [label="AST: "];
"1000431" -> "1000428"  [label="AST: "];
"1000432" -> "1000428"  [label="AST: "];
"1000433" -> "1000428"  [label="AST: "];
"1000435" -> "1000428"  [label="CFG: "];
"1000428" -> "1000634"  [label="DDG: do_smart_update(sma, sops, nsops, 1, &tasks)"];
"1000428" -> "1000634"  [label="DDG: nsops"];
"1000304" -> "1000428"  [label="DDG: &tasks"];
"1000428" -> "1000622"  [label="DDG: &tasks"];
"1000428" -> "1000627"  [label="DDG: sops"];
"1000622" -> "1000119"  [label="AST: "];
"1000622" -> "1000623"  [label="CFG: "];
"1000623" -> "1000622"  [label="AST: "];
"1000625" -> "1000622"  [label="CFG: "];
"1000622" -> "1000634"  [label="DDG: wake_up_sem_queue_do(&tasks)"];
"1000622" -> "1000634"  [label="DDG: &tasks"];
"1000304" -> "1000622"  [label="DDG: &tasks"];
"1000627" -> "1000626"  [label="AST: "];
"1000627" -> "1000629"  [label="CFG: "];
"1000628" -> "1000627"  [label="AST: "];
"1000629" -> "1000627"  [label="AST: "];
"1000631" -> "1000627"  [label="CFG: "];
"1000633" -> "1000627"  [label="CFG: "];
"1000627" -> "1000634"  [label="DDG: fast_sops"];
"1000627" -> "1000634"  [label="DDG: sops != fast_sops"];
"1000627" -> "1000634"  [label="DDG: sops"];
"1000569" -> "1000627"  [label="DDG: sops"];
"1000627" -> "1000630"  [label="DDG: sops"];
"1000630" -> "1000626"  [label="AST: "];
"1000630" -> "1000631"  [label="CFG: "];
"1000631" -> "1000630"  [label="AST: "];
"1000633" -> "1000630"  [label="CFG: "];
"1000630" -> "1000634"  [label="DDG: kfree(sops)"];
"1000630" -> "1000634"  [label="DDG: sops"];
"1000436" -> "1000119"  [label="AST: "];
"1000436" -> "1000440"  [label="CFG: "];
"1000437" -> "1000436"  [label="AST: "];
"1000440" -> "1000436"  [label="AST: "];
"1000443" -> "1000436"  [label="CFG: "];
"1000436" -> "1000634"  [label="DDG: queue.sops"];
"1000441" -> "1000119"  [label="AST: "];
"1000441" -> "1000445"  [label="CFG: "];
"1000442" -> "1000441"  [label="AST: "];
"1000445" -> "1000441"  [label="AST: "];
"1000448" -> "1000441"  [label="CFG: "];
"1000441" -> "1000634"  [label="DDG: queue.nsops"];
"1000446" -> "1000119"  [label="AST: "];
"1000446" -> "1000450"  [label="CFG: "];
"1000447" -> "1000446"  [label="AST: "];
"1000450" -> "1000446"  [label="AST: "];
"1000453" -> "1000446"  [label="CFG: "];
"1000446" -> "1000634"  [label="DDG: un"];
"1000446" -> "1000634"  [label="DDG: queue.undo"];
"1000463" -> "1000462"  [label="AST: "];
"1000463" -> "1000465"  [label="CFG: "];
"1000464" -> "1000463"  [label="AST: "];
"1000465" -> "1000463"  [label="AST: "];
"1000469" -> "1000463"  [label="CFG: "];
"1000502" -> "1000463"  [label="CFG: "];
"1000463" -> "1000634"  [label="DDG: nsops == 1"];
"1000463" -> "1000634"  [label="DDG: nsops"];
"1000463" -> "1000569"  [label="DDG: nsops"];
"1000569" -> "1000567"  [label="AST: "];
"1000569" -> "1000574"  [label="CFG: "];
"1000570" -> "1000569"  [label="AST: "];
"1000571" -> "1000569"  [label="AST: "];
"1000572" -> "1000569"  [label="AST: "];
"1000573" -> "1000569"  [label="AST: "];
"1000574" -> "1000569"  [label="AST: "];
"1000567" -> "1000569"  [label="CFG: "];
"1000569" -> "1000634"  [label="DDG: semid"];
"1000569" -> "1000634"  [label="DDG: &locknum"];
"1000569" -> "1000634"  [label="DDG: ns"];
"1000569" -> "1000634"  [label="DDG: nsops"];
"1000569" -> "1000567"  [label="DDG: &locknum"];
"1000569" -> "1000567"  [label="DDG: semid"];
"1000569" -> "1000567"  [label="DDG: sops"];
"1000569" -> "1000567"  [label="DDG: ns"];
"1000569" -> "1000567"  [label="DDG: nsops"];
"1000363" -> "1000569"  [label="DDG: ns"];
"1000332" -> "1000569"  [label="DDG: semid"];
"1000567" -> "1000119"  [label="AST: "];
"1000568" -> "1000567"  [label="AST: "];
"1000577" -> "1000567"  [label="CFG: "];
"1000567" -> "1000634"  [label="DDG: sem_obtain_lock(ns, semid, sops, nsops, &locknum)"];
"1000567" -> "1000582"  [label="DDG: sma"];
"1000582" -> "1000581"  [label="AST: "];
"1000582" -> "1000583"  [label="CFG: "];
"1000583" -> "1000582"  [label="AST: "];
"1000585" -> "1000582"  [label="CFG: "];
"1000588" -> "1000582"  [label="CFG: "];
"1000582" -> "1000634"  [label="DDG: sma"];
"1000582" -> "1000634"  [label="DDG: IS_ERR(sma)"];
"1000582" -> "1000613"  [label="DDG: sma"];
"1000613" -> "1000119"  [label="AST: "];
"1000613" -> "1000615"  [label="CFG: "];
"1000614" -> "1000613"  [label="AST: "];
"1000615" -> "1000613"  [label="AST: "];
"1000617" -> "1000613"  [label="CFG: "];
"1000613" -> "1000634"  [label="DDG: unlink_queue(sma, &queue)"];
"1000613" -> "1000634"  [label="DDG: &queue"];
"1000578" -> "1000613"  [label="DDG: &queue"];
"1000457" -> "1000119"  [label="AST: "];
"1000457" -> "1000461"  [label="CFG: "];
"1000458" -> "1000457"  [label="AST: "];
"1000461" -> "1000457"  [label="AST: "];
"1000464" -> "1000457"  [label="CFG: "];
"1000457" -> "1000634"  [label="DDG: alter"];
"1000457" -> "1000634"  [label="DDG: queue.alter"];
"1000326" -> "1000325"  [label="AST: "];
"1000326" -> "1000328"  [label="CFG: "];
"1000327" -> "1000326"  [label="AST: "];
"1000328" -> "1000326"  [label="AST: "];
"1000329" -> "1000326"  [label="CFG: "];
"1000326" -> "1000634"  [label="DDG: NULL"];
"1000326" -> "1000634"  [label="DDG: un"];
"1000326" -> "1000399"  [label="DDG: un"];
"1000399" -> "1000398"  [label="AST: "];
"1000399" -> "1000400"  [label="CFG: "];
"1000399" -> "1000401"  [label="CFG: "];
"1000400" -> "1000399"  [label="AST: "];
"1000401" -> "1000399"  [label="AST: "];
"1000407" -> "1000399"  [label="CFG: "];
"1000409" -> "1000399"  [label="CFG: "];
"1000399" -> "1000634"  [label="DDG: un->semid == -1"];
"1000399" -> "1000634"  [label="DDG: un"];
"1000399" -> "1000634"  [label="DDG: un && un->semid == -1"];
"1000316" -> "1000399"  [label="DDG: un"];
"1000401" -> "1000399"  [label="DDG: un->semid"];
"1000401" -> "1000399"  [label="DDG: -1"];
}
