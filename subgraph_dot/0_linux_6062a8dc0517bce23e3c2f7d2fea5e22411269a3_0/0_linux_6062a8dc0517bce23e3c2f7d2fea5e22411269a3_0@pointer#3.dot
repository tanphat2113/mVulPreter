digraph "0_linux_6062a8dc0517bce23e3c2f7d2fea5e22411269a3_0@pointer" {
"1000363" [label="(Call,ipcperms(ns, &sma->sem_perm, alter ? S_IWUGO : S_IRUGO))"];
"1000332" [label="(Call,sem_obtain_object_check(ns, semid))"];
"1000150" [label="(Call,ns = current->nsproxy->ipc_ns)"];
"1000312" [label="(Call,find_alloc_undo(ns, semid))"];
"1000162" [label="(Call,semid < 0)"];
"1000569" [label="(Call,sem_obtain_lock(ns, semid, sops, nsops, &locknum))"];
"1000567" [label="(Call,sma = sem_obtain_lock(ns, semid, sops, nsops, &locknum))"];
"1000582" [label="(Call,IS_ERR(sma))"];
"1000543" [label="(Call,sem_unlock(sma, locknum))"];
"1000618" [label="(Call,sem_unlock(sma, locknum))"];
"1000613" [label="(Call,unlink_queue(sma, &queue))"];
"1000627" [label="(Call,sops != fast_sops)"];
"1000630" [label="(Call,kfree(sops))"];
"1000570" [label="(Identifier,ns)"];
"1000330" [label="(Call,sma = sem_obtain_object_check(ns, semid))"];
"1000629" [label="(Identifier,fast_sops)"];
"1000613" [label="(Call,unlink_queue(sma, &queue))"];
"1000378" [label="(Call,security_sem_semop(sma, sops, nsops, alter))"];
"1000585" [label="(ControlStructure,goto out_free;)"];
"1000626" [label="(ControlStructure,if(sops != fast_sops))"];
"1000150" [label="(Call,ns = current->nsproxy->ipc_ns)"];
"1000573" [label="(Identifier,nsops)"];
"1000313" [label="(Identifier,ns)"];
"1000544" [label="(Identifier,sma)"];
"1000627" [label="(Call,sops != fast_sops)"];
"1000463" [label="(Call,nsops == 1)"];
"1000568" [label="(Identifier,sma)"];
"1000581" [label="(ControlStructure,if (IS_ERR(sma)))"];
"1000152" [label="(Call,current->nsproxy->ipc_ns)"];
"1000314" [label="(Identifier,semid)"];
"1000583" [label="(Identifier,sma)"];
"1000569" [label="(Call,sem_obtain_lock(ns, semid, sops, nsops, &locknum))"];
"1000333" [label="(Identifier,ns)"];
"1000119" [label="(Block,)"];
"1000164" [label="(Literal,0)"];
"1000578" [label="(Call,get_queue_result(&queue))"];
"1000377" [label="(Identifier,error)"];
"1000567" [label="(Call,sma = sem_obtain_lock(ns, semid, sops, nsops, &locknum))"];
"1000162" [label="(Call,semid < 0)"];
"1000630" [label="(Call,kfree(sops))"];
"1000369" [label="(Call,alter ? S_IWUGO : S_IRUGO)"];
"1000547" [label="(Identifier,timeout)"];
"1000618" [label="(Call,sem_unlock(sma, locknum))"];
"1000392" [label="(Call,locknum = sem_lock(sma, sops, nsops))"];
"1000620" [label="(Identifier,locknum)"];
"1000410" [label="(Call,try_atomic_semop (sma, sops, nsops, un, task_tgid_vnr(current)))"];
"1000364" [label="(Identifier,ns)"];
"1000588" [label="(Identifier,error)"];
"1000615" [label="(Call,&queue)"];
"1000374" [label="(Call,rcu_read_unlock())"];
"1000571" [label="(Identifier,semid)"];
"1000577" [label="(Identifier,error)"];
"1000363" [label="(Call,ipcperms(ns, &sma->sem_perm, alter ? S_IWUGO : S_IRUGO))"];
"1000621" [label="(JumpTarget,out_wakeup:)"];
"1000428" [label="(Call,do_smart_update(sma, sops, nsops, 1, &tasks))"];
"1000199" [label="(Call,copy_from_user (sops, tsops, nsops * sizeof(*tsops)))"];
"1000614" [label="(Identifier,sma)"];
"1000619" [label="(Identifier,sma)"];
"1000332" [label="(Call,sem_obtain_object_check(ns, semid))"];
"1000158" [label="(Call,nsops < 1 || semid < 0)"];
"1000362" [label="(ControlStructure,if (ipcperms(ns, &sma->sem_perm, alter ? S_IWUGO : S_IRUGO)))"];
"1000163" [label="(Identifier,semid)"];
"1000312" [label="(Call,find_alloc_undo(ns, semid))"];
"1000545" [label="(Identifier,locknum)"];
"1000543" [label="(Call,sem_unlock(sma, locknum))"];
"1000365" [label="(Call,&sma->sem_perm)"];
"1000574" [label="(Call,&locknum)"];
"1000617" [label="(JumpTarget,out_unlock_free:)"];
"1000631" [label="(Identifier,sops)"];
"1000334" [label="(Identifier,semid)"];
"1000572" [label="(Identifier,sops)"];
"1000633" [label="(Identifier,error)"];
"1000160" [label="(Identifier,nsops)"];
"1000634" [label="(MethodReturn,RET)"];
"1000394" [label="(Call,sem_lock(sma, sops, nsops))"];
"1000582" [label="(Call,IS_ERR(sma))"];
"1000628" [label="(Identifier,sops)"];
"1000151" [label="(Identifier,ns)"];
"1000310" [label="(Call,un = find_alloc_undo(ns, semid))"];
"1000363" -> "1000362"  [label="AST: "];
"1000363" -> "1000369"  [label="CFG: "];
"1000364" -> "1000363"  [label="AST: "];
"1000365" -> "1000363"  [label="AST: "];
"1000369" -> "1000363"  [label="AST: "];
"1000374" -> "1000363"  [label="CFG: "];
"1000377" -> "1000363"  [label="CFG: "];
"1000363" -> "1000634"  [label="DDG: &sma->sem_perm"];
"1000363" -> "1000634"  [label="DDG: alter ? S_IWUGO : S_IRUGO"];
"1000363" -> "1000634"  [label="DDG: ns"];
"1000363" -> "1000634"  [label="DDG: ipcperms(ns, &sma->sem_perm, alter ? S_IWUGO : S_IRUGO)"];
"1000332" -> "1000363"  [label="DDG: ns"];
"1000363" -> "1000569"  [label="DDG: ns"];
"1000332" -> "1000330"  [label="AST: "];
"1000332" -> "1000334"  [label="CFG: "];
"1000333" -> "1000332"  [label="AST: "];
"1000334" -> "1000332"  [label="AST: "];
"1000330" -> "1000332"  [label="CFG: "];
"1000332" -> "1000634"  [label="DDG: semid"];
"1000332" -> "1000634"  [label="DDG: ns"];
"1000332" -> "1000330"  [label="DDG: ns"];
"1000332" -> "1000330"  [label="DDG: semid"];
"1000150" -> "1000332"  [label="DDG: ns"];
"1000312" -> "1000332"  [label="DDG: ns"];
"1000312" -> "1000332"  [label="DDG: semid"];
"1000162" -> "1000332"  [label="DDG: semid"];
"1000332" -> "1000569"  [label="DDG: semid"];
"1000150" -> "1000119"  [label="AST: "];
"1000150" -> "1000152"  [label="CFG: "];
"1000151" -> "1000150"  [label="AST: "];
"1000152" -> "1000150"  [label="AST: "];
"1000160" -> "1000150"  [label="CFG: "];
"1000150" -> "1000634"  [label="DDG: ns"];
"1000150" -> "1000634"  [label="DDG: current->nsproxy->ipc_ns"];
"1000150" -> "1000312"  [label="DDG: ns"];
"1000312" -> "1000310"  [label="AST: "];
"1000312" -> "1000314"  [label="CFG: "];
"1000313" -> "1000312"  [label="AST: "];
"1000314" -> "1000312"  [label="AST: "];
"1000310" -> "1000312"  [label="CFG: "];
"1000312" -> "1000634"  [label="DDG: ns"];
"1000312" -> "1000634"  [label="DDG: semid"];
"1000312" -> "1000310"  [label="DDG: ns"];
"1000312" -> "1000310"  [label="DDG: semid"];
"1000162" -> "1000312"  [label="DDG: semid"];
"1000162" -> "1000158"  [label="AST: "];
"1000162" -> "1000164"  [label="CFG: "];
"1000163" -> "1000162"  [label="AST: "];
"1000164" -> "1000162"  [label="AST: "];
"1000158" -> "1000162"  [label="CFG: "];
"1000162" -> "1000634"  [label="DDG: semid"];
"1000162" -> "1000158"  [label="DDG: semid"];
"1000162" -> "1000158"  [label="DDG: 0"];
"1000569" -> "1000567"  [label="AST: "];
"1000569" -> "1000574"  [label="CFG: "];
"1000570" -> "1000569"  [label="AST: "];
"1000571" -> "1000569"  [label="AST: "];
"1000572" -> "1000569"  [label="AST: "];
"1000573" -> "1000569"  [label="AST: "];
"1000574" -> "1000569"  [label="AST: "];
"1000567" -> "1000569"  [label="CFG: "];
"1000569" -> "1000634"  [label="DDG: semid"];
"1000569" -> "1000634"  [label="DDG: &locknum"];
"1000569" -> "1000634"  [label="DDG: ns"];
"1000569" -> "1000634"  [label="DDG: nsops"];
"1000569" -> "1000567"  [label="DDG: &locknum"];
"1000569" -> "1000567"  [label="DDG: semid"];
"1000569" -> "1000567"  [label="DDG: sops"];
"1000569" -> "1000567"  [label="DDG: ns"];
"1000569" -> "1000567"  [label="DDG: nsops"];
"1000410" -> "1000569"  [label="DDG: sops"];
"1000463" -> "1000569"  [label="DDG: nsops"];
"1000569" -> "1000627"  [label="DDG: sops"];
"1000567" -> "1000119"  [label="AST: "];
"1000568" -> "1000567"  [label="AST: "];
"1000577" -> "1000567"  [label="CFG: "];
"1000567" -> "1000634"  [label="DDG: sem_obtain_lock(ns, semid, sops, nsops, &locknum)"];
"1000567" -> "1000582"  [label="DDG: sma"];
"1000582" -> "1000581"  [label="AST: "];
"1000582" -> "1000583"  [label="CFG: "];
"1000583" -> "1000582"  [label="AST: "];
"1000585" -> "1000582"  [label="CFG: "];
"1000588" -> "1000582"  [label="CFG: "];
"1000582" -> "1000634"  [label="DDG: sma"];
"1000582" -> "1000634"  [label="DDG: IS_ERR(sma)"];
"1000582" -> "1000543"  [label="DDG: sma"];
"1000582" -> "1000613"  [label="DDG: sma"];
"1000582" -> "1000618"  [label="DDG: sma"];
"1000543" -> "1000119"  [label="AST: "];
"1000543" -> "1000545"  [label="CFG: "];
"1000544" -> "1000543"  [label="AST: "];
"1000545" -> "1000543"  [label="AST: "];
"1000547" -> "1000543"  [label="CFG: "];
"1000543" -> "1000634"  [label="DDG: sem_unlock(sma, locknum)"];
"1000543" -> "1000634"  [label="DDG: locknum"];
"1000543" -> "1000634"  [label="DDG: sma"];
"1000410" -> "1000543"  [label="DDG: sma"];
"1000392" -> "1000543"  [label="DDG: locknum"];
"1000543" -> "1000618"  [label="DDG: locknum"];
"1000618" -> "1000119"  [label="AST: "];
"1000618" -> "1000620"  [label="CFG: "];
"1000619" -> "1000618"  [label="AST: "];
"1000620" -> "1000618"  [label="AST: "];
"1000621" -> "1000618"  [label="CFG: "];
"1000618" -> "1000634"  [label="DDG: sem_unlock(sma, locknum)"];
"1000618" -> "1000634"  [label="DDG: sma"];
"1000618" -> "1000634"  [label="DDG: locknum"];
"1000613" -> "1000618"  [label="DDG: sma"];
"1000410" -> "1000618"  [label="DDG: sma"];
"1000428" -> "1000618"  [label="DDG: sma"];
"1000394" -> "1000618"  [label="DDG: sma"];
"1000392" -> "1000618"  [label="DDG: locknum"];
"1000613" -> "1000119"  [label="AST: "];
"1000613" -> "1000615"  [label="CFG: "];
"1000614" -> "1000613"  [label="AST: "];
"1000615" -> "1000613"  [label="AST: "];
"1000617" -> "1000613"  [label="CFG: "];
"1000613" -> "1000634"  [label="DDG: unlink_queue(sma, &queue)"];
"1000613" -> "1000634"  [label="DDG: &queue"];
"1000578" -> "1000613"  [label="DDG: &queue"];
"1000627" -> "1000626"  [label="AST: "];
"1000627" -> "1000629"  [label="CFG: "];
"1000628" -> "1000627"  [label="AST: "];
"1000629" -> "1000627"  [label="AST: "];
"1000631" -> "1000627"  [label="CFG: "];
"1000633" -> "1000627"  [label="CFG: "];
"1000627" -> "1000634"  [label="DDG: fast_sops"];
"1000627" -> "1000634"  [label="DDG: sops != fast_sops"];
"1000627" -> "1000634"  [label="DDG: sops"];
"1000394" -> "1000627"  [label="DDG: sops"];
"1000199" -> "1000627"  [label="DDG: sops"];
"1000378" -> "1000627"  [label="DDG: sops"];
"1000428" -> "1000627"  [label="DDG: sops"];
"1000410" -> "1000627"  [label="DDG: sops"];
"1000627" -> "1000630"  [label="DDG: sops"];
"1000630" -> "1000626"  [label="AST: "];
"1000630" -> "1000631"  [label="CFG: "];
"1000631" -> "1000630"  [label="AST: "];
"1000633" -> "1000630"  [label="CFG: "];
"1000630" -> "1000634"  [label="DDG: kfree(sops)"];
"1000630" -> "1000634"  [label="DDG: sops"];
}
