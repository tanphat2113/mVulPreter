digraph "0_Chrome_0d151e09e13a704e9738ea913d117df7282e6c7d_1@integer" {
"1000299" [label="(Call,averageTime = totalTime / static_cast<double>(iterations))"];
"1000301" [label="(Call,totalTime / static_cast<double>(iterations))"];
"1000283" [label="(Call,totalTime += elapsedTime)"];
"1000278" [label="(Call,elapsedTime = getCurrentTime() - startTime)"];
"1000280" [label="(Call,getCurrentTime() - startTime)"];
"1000267" [label="(Call,startTime = getCurrentTime())"];
"1000252" [label="(Call,totalTime = 0.0)"];
"1000303" [label="(Call,static_cast<double>(iterations))"];
"1000260" [label="(Call,i < iterations)"];
"1000263" [label="(Call,++i)"];
"1000257" [label="(Call,i = 0)"];
"1000161" [label="(Call,iterations = strtol(argv[2], &end, 10))"];
"1000163" [label="(Call,strtol(argv[2], &end, 10))"];
"1000134" [label="(Call,++argv)"];
"1000104" [label="(MethodParameterIn,char* argv[])"];
"1000176" [label="(Call,!iterations)"];
"1000149" [label="(Call,iterations = 1)"];
"1000306" [label="(Call,printf(\"%f %f\n\", totalTime, averageTime))"];
"1000283" [label="(Call,totalTime += elapsedTime)"];
"1000255" [label="(ControlStructure,for (size_t i = 0; i < iterations; ++i))"];
"1000258" [label="(Identifier,i)"];
"1000133" [label="(Block,)"];
"1000299" [label="(Call,averageTime = totalTime / static_cast<double>(iterations))"];
"1000288" [label="(Identifier,decoded)"];
"1000161" [label="(Call,iterations = strtol(argv[2], &end, 10))"];
"1000267" [label="(Call,startTime = getCurrentTime())"];
"1000177" [label="(Identifier,iterations)"];
"1000254" [label="(Literal,0.0)"];
"1000156" [label="(Block,)"];
"1000280" [label="(Call,getCurrentTime() - startTime)"];
"1000265" [label="(Block,)"];
"1000279" [label="(Identifier,elapsedTime)"];
"1000285" [label="(Identifier,elapsedTime)"];
"1000150" [label="(Identifier,iterations)"];
"1000134" [label="(Call,++argv)"];
"1000252" [label="(Call,totalTime = 0.0)"];
"1000263" [label="(Call,++i)"];
"1000309" [label="(Identifier,averageTime)"];
"1000264" [label="(Identifier,i)"];
"1000253" [label="(Identifier,totalTime)"];
"1000164" [label="(Call,argv[2])"];
"1000174" [label="(Identifier,end)"];
"1000257" [label="(Call,i = 0)"];
"1000261" [label="(Identifier,i)"];
"1000105" [label="(Block,)"];
"1000162" [label="(Identifier,iterations)"];
"1000269" [label="(Call,getCurrentTime())"];
"1000272" [label="(Identifier,decoded)"];
"1000171" [label="(Call,*end != '\0' || !iterations)"];
"1000311" [label="(Literal,0)"];
"1000281" [label="(Call,getCurrentTime())"];
"1000259" [label="(Literal,0)"];
"1000302" [label="(Identifier,totalTime)"];
"1000176" [label="(Call,!iterations)"];
"1000301" [label="(Call,totalTime / static_cast<double>(iterations))"];
"1000135" [label="(Identifier,argv)"];
"1000107" [label="(Call,* name = argv[0])"];
"1000290" [label="(Call,fprintf(stderr, \"Image decode failed [%s]\n\", argv[1]))"];
"1000121" [label="(Call,strcmp(argv[1], \"--color-correct\") == 0)"];
"1000231" [label="(Call,readFile(argv[1]))"];
"1000306" [label="(Call,printf(\"%f %f\n\", totalTime, averageTime))"];
"1000284" [label="(Identifier,totalTime)"];
"1000260" [label="(Call,i < iterations)"];
"1000215" [label="(Call,fprintf(stderr, \"Third argument should be packet size. Default is \"\n                \"0, meaning to decode the entire image in one packet. You \"\n                \"supplied %s\n\", argv[3]))"];
"1000282" [label="(Identifier,startTime)"];
"1000242" [label="(Call,fprintf(stderr, \"Error reading image data from [%s]\n\", argv[1]))"];
"1000149" [label="(Call,iterations = 1)"];
"1000312" [label="(MethodReturn,int)"];
"1000163" [label="(Call,strtol(argv[2], &end, 10))"];
"1000300" [label="(Identifier,averageTime)"];
"1000303" [label="(Call,static_cast<double>(iterations))"];
"1000268" [label="(Identifier,startTime)"];
"1000154" [label="(Identifier,argc)"];
"1000122" [label="(Call,strcmp(argv[1], \"--color-correct\"))"];
"1000308" [label="(Identifier,totalTime)"];
"1000305" [label="(Identifier,iterations)"];
"1000278" [label="(Call,elapsedTime = getCurrentTime() - startTime)"];
"1000307" [label="(Literal,\"%f %f\n\")"];
"1000179" [label="(Call,fprintf(stderr, \"Second argument should be number of iterations. \"\n                \"The default is 1. You supplied %s\n\", argv[2]))"];
"1000202" [label="(Call,strtol(argv[3], &end, 10))"];
"1000167" [label="(Call,&end)"];
"1000104" [label="(MethodParameterIn,char* argv[])"];
"1000151" [label="(Literal,1)"];
"1000169" [label="(Literal,10)"];
"1000262" [label="(Identifier,iterations)"];
"1000136" [label="(Identifier,true)"];
"1000299" -> "1000105"  [label="AST: "];
"1000299" -> "1000301"  [label="CFG: "];
"1000300" -> "1000299"  [label="AST: "];
"1000301" -> "1000299"  [label="AST: "];
"1000307" -> "1000299"  [label="CFG: "];
"1000299" -> "1000312"  [label="DDG: "];
"1000301" -> "1000299"  [label="DDG: "];
"1000301" -> "1000299"  [label="DDG: "];
"1000299" -> "1000306"  [label="DDG: "];
"1000301" -> "1000303"  [label="CFG: "];
"1000302" -> "1000301"  [label="AST: "];
"1000303" -> "1000301"  [label="AST: "];
"1000301" -> "1000312"  [label="DDG: "];
"1000283" -> "1000301"  [label="DDG: "];
"1000252" -> "1000301"  [label="DDG: "];
"1000303" -> "1000301"  [label="DDG: "];
"1000301" -> "1000306"  [label="DDG: "];
"1000283" -> "1000265"  [label="AST: "];
"1000283" -> "1000285"  [label="CFG: "];
"1000284" -> "1000283"  [label="AST: "];
"1000285" -> "1000283"  [label="AST: "];
"1000288" -> "1000283"  [label="CFG: "];
"1000283" -> "1000312"  [label="DDG: "];
"1000278" -> "1000283"  [label="DDG: "];
"1000252" -> "1000283"  [label="DDG: "];
"1000278" -> "1000265"  [label="AST: "];
"1000278" -> "1000280"  [label="CFG: "];
"1000279" -> "1000278"  [label="AST: "];
"1000280" -> "1000278"  [label="AST: "];
"1000284" -> "1000278"  [label="CFG: "];
"1000278" -> "1000312"  [label="DDG: "];
"1000280" -> "1000278"  [label="DDG: "];
"1000280" -> "1000278"  [label="DDG: "];
"1000280" -> "1000282"  [label="CFG: "];
"1000281" -> "1000280"  [label="AST: "];
"1000282" -> "1000280"  [label="AST: "];
"1000280" -> "1000312"  [label="DDG: "];
"1000280" -> "1000312"  [label="DDG: "];
"1000267" -> "1000280"  [label="DDG: "];
"1000267" -> "1000265"  [label="AST: "];
"1000267" -> "1000269"  [label="CFG: "];
"1000268" -> "1000267"  [label="AST: "];
"1000269" -> "1000267"  [label="AST: "];
"1000272" -> "1000267"  [label="CFG: "];
"1000252" -> "1000105"  [label="AST: "];
"1000252" -> "1000254"  [label="CFG: "];
"1000253" -> "1000252"  [label="AST: "];
"1000254" -> "1000252"  [label="AST: "];
"1000258" -> "1000252"  [label="CFG: "];
"1000303" -> "1000305"  [label="CFG: "];
"1000304" -> "1000303"  [label="AST: "];
"1000305" -> "1000303"  [label="AST: "];
"1000303" -> "1000312"  [label="DDG: "];
"1000260" -> "1000303"  [label="DDG: "];
"1000260" -> "1000255"  [label="AST: "];
"1000260" -> "1000262"  [label="CFG: "];
"1000261" -> "1000260"  [label="AST: "];
"1000262" -> "1000260"  [label="AST: "];
"1000268" -> "1000260"  [label="CFG: "];
"1000300" -> "1000260"  [label="CFG: "];
"1000260" -> "1000312"  [label="DDG: "];
"1000260" -> "1000312"  [label="DDG: "];
"1000263" -> "1000260"  [label="DDG: "];
"1000257" -> "1000260"  [label="DDG: "];
"1000161" -> "1000260"  [label="DDG: "];
"1000176" -> "1000260"  [label="DDG: "];
"1000149" -> "1000260"  [label="DDG: "];
"1000260" -> "1000263"  [label="DDG: "];
"1000263" -> "1000255"  [label="AST: "];
"1000263" -> "1000264"  [label="CFG: "];
"1000264" -> "1000263"  [label="AST: "];
"1000261" -> "1000263"  [label="CFG: "];
"1000257" -> "1000255"  [label="AST: "];
"1000257" -> "1000259"  [label="CFG: "];
"1000258" -> "1000257"  [label="AST: "];
"1000259" -> "1000257"  [label="AST: "];
"1000261" -> "1000257"  [label="CFG: "];
"1000161" -> "1000156"  [label="AST: "];
"1000161" -> "1000163"  [label="CFG: "];
"1000162" -> "1000161"  [label="AST: "];
"1000163" -> "1000161"  [label="AST: "];
"1000174" -> "1000161"  [label="CFG: "];
"1000161" -> "1000312"  [label="DDG: "];
"1000163" -> "1000161"  [label="DDG: "];
"1000163" -> "1000161"  [label="DDG: "];
"1000163" -> "1000161"  [label="DDG: "];
"1000161" -> "1000176"  [label="DDG: "];
"1000163" -> "1000169"  [label="CFG: "];
"1000164" -> "1000163"  [label="AST: "];
"1000167" -> "1000163"  [label="AST: "];
"1000169" -> "1000163"  [label="AST: "];
"1000163" -> "1000312"  [label="DDG: "];
"1000163" -> "1000312"  [label="DDG: "];
"1000134" -> "1000163"  [label="DDG: "];
"1000104" -> "1000163"  [label="DDG: "];
"1000163" -> "1000179"  [label="DDG: "];
"1000163" -> "1000202"  [label="DDG: "];
"1000134" -> "1000133"  [label="AST: "];
"1000134" -> "1000135"  [label="CFG: "];
"1000135" -> "1000134"  [label="AST: "];
"1000136" -> "1000134"  [label="CFG: "];
"1000134" -> "1000312"  [label="DDG: "];
"1000104" -> "1000134"  [label="DDG: "];
"1000134" -> "1000179"  [label="DDG: "];
"1000134" -> "1000202"  [label="DDG: "];
"1000134" -> "1000215"  [label="DDG: "];
"1000134" -> "1000231"  [label="DDG: "];
"1000134" -> "1000242"  [label="DDG: "];
"1000134" -> "1000290"  [label="DDG: "];
"1000104" -> "1000102"  [label="AST: "];
"1000104" -> "1000312"  [label="DDG: "];
"1000104" -> "1000107"  [label="DDG: "];
"1000104" -> "1000121"  [label="DDG: "];
"1000104" -> "1000122"  [label="DDG: "];
"1000104" -> "1000179"  [label="DDG: "];
"1000104" -> "1000202"  [label="DDG: "];
"1000104" -> "1000215"  [label="DDG: "];
"1000104" -> "1000231"  [label="DDG: "];
"1000104" -> "1000242"  [label="DDG: "];
"1000104" -> "1000290"  [label="DDG: "];
"1000176" -> "1000171"  [label="AST: "];
"1000176" -> "1000177"  [label="CFG: "];
"1000177" -> "1000176"  [label="AST: "];
"1000171" -> "1000176"  [label="CFG: "];
"1000176" -> "1000171"  [label="DDG: "];
"1000149" -> "1000105"  [label="AST: "];
"1000149" -> "1000151"  [label="CFG: "];
"1000150" -> "1000149"  [label="AST: "];
"1000151" -> "1000149"  [label="AST: "];
"1000154" -> "1000149"  [label="CFG: "];
"1000306" -> "1000105"  [label="AST: "];
"1000306" -> "1000309"  [label="CFG: "];
"1000307" -> "1000306"  [label="AST: "];
"1000308" -> "1000306"  [label="AST: "];
"1000309" -> "1000306"  [label="AST: "];
"1000311" -> "1000306"  [label="CFG: "];
"1000306" -> "1000312"  [label="DDG: "];
"1000306" -> "1000312"  [label="DDG: "];
"1000306" -> "1000312"  [label="DDG: "];
}
