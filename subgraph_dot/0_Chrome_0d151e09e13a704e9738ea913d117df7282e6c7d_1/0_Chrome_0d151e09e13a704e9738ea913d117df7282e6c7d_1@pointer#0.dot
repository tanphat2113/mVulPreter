digraph "0_Chrome_0d151e09e13a704e9738ea913d117df7282e6c7d_1@pointer" {
"1000163" [label="(Call,strtol(argv[2], &end, 10))"];
"1000134" [label="(Call,++argv)"];
"1000104" [label="(MethodParameterIn,char* argv[])"];
"1000161" [label="(Call,iterations = strtol(argv[2], &end, 10))"];
"1000176" [label="(Call,!iterations)"];
"1000171" [label="(Call,*end != '\0' || !iterations)"];
"1000260" [label="(Call,i < iterations)"];
"1000263" [label="(Call,++i)"];
"1000303" [label="(Call,static_cast<double>(iterations))"];
"1000301" [label="(Call,totalTime / static_cast<double>(iterations))"];
"1000299" [label="(Call,averageTime = totalTime / static_cast<double>(iterations))"];
"1000306" [label="(Call,printf(\"%f %f\n\", totalTime, averageTime))"];
"1000179" [label="(Call,fprintf(stderr, \"Second argument should be number of iterations. \"\n                \"The default is 1. You supplied %s\n\", argv[2]))"];
"1000215" [label="(Call,fprintf(stderr, \"Third argument should be packet size. Default is \"\n                \"0, meaning to decode the entire image in one packet. You \"\n                \"supplied %s\n\", argv[3]))"];
"1000242" [label="(Call,fprintf(stderr, \"Error reading image data from [%s]\n\", argv[1]))"];
"1000290" [label="(Call,fprintf(stderr, \"Image decode failed [%s]\n\", argv[1]))"];
"1000202" [label="(Call,strtol(argv[3], &end, 10))"];
"1000200" [label="(Call,packetSize = strtol(argv[3], &end, 10))"];
"1000273" [label="(Call,decodeImageData(data.get(), applyColorCorrection, packetSize))"];
"1000271" [label="(Call,decoded = decodeImageData(data.get(), applyColorCorrection, packetSize))"];
"1000287" [label="(Call,!decoded)"];
"1000283" [label="(Call,totalTime += elapsedTime)"];
"1000133" [label="(Block,)"];
"1000177" [label="(Identifier,iterations)"];
"1000241" [label="(Block,)"];
"1000275" [label="(Identifier,applyColorCorrection)"];
"1000279" [label="(Identifier,elapsedTime)"];
"1000134" [label="(Call,++argv)"];
"1000252" [label="(Call,totalTime = 0.0)"];
"1000203" [label="(Call,argv[3])"];
"1000264" [label="(Identifier,i)"];
"1000257" [label="(Call,i = 0)"];
"1000272" [label="(Identifier,decoded)"];
"1000201" [label="(Identifier,packetSize)"];
"1000302" [label="(Identifier,totalTime)"];
"1000301" [label="(Call,totalTime / static_cast<double>(iterations))"];
"1000135" [label="(Identifier,argv)"];
"1000260" [label="(Call,i < iterations)"];
"1000180" [label="(Identifier,stderr)"];
"1000297" [label="(Literal,3)"];
"1000312" [label="(MethodReturn,int)"];
"1000268" [label="(Identifier,startTime)"];
"1000308" [label="(Identifier,totalTime)"];
"1000188" [label="(Call,packetSize = 0)"];
"1000172" [label="(Call,*end != '\0')"];
"1000179" [label="(Call,fprintf(stderr, \"Second argument should be number of iterations. \"\n                \"The default is 1. You supplied %s\n\", argv[2]))"];
"1000181" [label="(Literal,\"Second argument should be number of iterations. \"\n                \"The default is 1. You supplied %s\n\")"];
"1000222" [label="(Literal,1)"];
"1000299" [label="(Call,averageTime = totalTime / static_cast<double>(iterations))"];
"1000265" [label="(Block,)"];
"1000286" [label="(ControlStructure,if (!decoded))"];
"1000212" [label="(Identifier,end)"];
"1000261" [label="(Identifier,i)"];
"1000105" [label="(Block,)"];
"1000162" [label="(Identifier,iterations)"];
"1000217" [label="(Literal,\"Third argument should be packet size. Default is \"\n                \"0, meaning to decode the entire image in one packet. You \"\n                \"supplied %s\n\")"];
"1000189" [label="(Identifier,packetSize)"];
"1000107" [label="(Call,* name = argv[0])"];
"1000306" [label="(Call,printf(\"%f %f\n\", totalTime, averageTime))"];
"1000245" [label="(Call,argv[1])"];
"1000242" [label="(Call,fprintf(stderr, \"Error reading image data from [%s]\n\", argv[1]))"];
"1000300" [label="(Identifier,averageTime)"];
"1000303" [label="(Call,static_cast<double>(iterations))"];
"1000287" [label="(Call,!decoded)"];
"1000305" [label="(Identifier,iterations)"];
"1000216" [label="(Identifier,stderr)"];
"1000104" [label="(MethodParameterIn,char* argv[])"];
"1000169" [label="(Literal,10)"];
"1000263" [label="(Call,++i)"];
"1000161" [label="(Call,iterations = strtol(argv[2], &end, 10))"];
"1000291" [label="(Identifier,stderr)"];
"1000200" [label="(Call,packetSize = strtol(argv[3], &end, 10))"];
"1000186" [label="(Literal,1)"];
"1000309" [label="(Identifier,averageTime)"];
"1000195" [label="(Block,)"];
"1000142" [label="(Call,fprintf(stderr, \"Usage: %s [--color-correct] file [iterations] [packetSize]\n\", name))"];
"1000292" [label="(Literal,\"Image decode failed [%s]\n\")"];
"1000244" [label="(Literal,\"Error reading image data from [%s]\n\")"];
"1000176" [label="(Call,!iterations)"];
"1000170" [label="(ControlStructure,if (*end != '\0' || !iterations))"];
"1000290" [label="(Call,fprintf(stderr, \"Image decode failed [%s]\n\", argv[1]))"];
"1000121" [label="(Call,strcmp(argv[1], \"--color-correct\") == 0)"];
"1000271" [label="(Call,decoded = decodeImageData(data.get(), applyColorCorrection, packetSize))"];
"1000163" [label="(Call,strtol(argv[2], &end, 10))"];
"1000149" [label="(Call,iterations = 1)"];
"1000293" [label="(Call,argv[1])"];
"1000122" [label="(Call,strcmp(argv[1], \"--color-correct\"))"];
"1000276" [label="(Identifier,packetSize)"];
"1000262" [label="(Identifier,iterations)"];
"1000255" [label="(ControlStructure,for (size_t i = 0; i < iterations; ++i))"];
"1000288" [label="(Identifier,decoded)"];
"1000289" [label="(Block,)"];
"1000156" [label="(Block,)"];
"1000128" [label="(Call,applyColorCorrection = (--argc, ++argv, true))"];
"1000218" [label="(Call,argv[3])"];
"1000164" [label="(Call,argv[2])"];
"1000174" [label="(Identifier,end)"];
"1000182" [label="(Call,argv[2])"];
"1000171" [label="(Call,*end != '\0' || !iterations)"];
"1000311" [label="(Literal,0)"];
"1000214" [label="(Block,)"];
"1000178" [label="(Block,)"];
"1000249" [label="(Literal,2)"];
"1000273" [label="(Call,decodeImageData(data.get(), applyColorCorrection, packetSize))"];
"1000231" [label="(Call,readFile(argv[1]))"];
"1000215" [label="(Call,fprintf(stderr, \"Third argument should be packet size. Default is \"\n                \"0, meaning to decode the entire image in one packet. You \"\n                \"supplied %s\n\", argv[3]))"];
"1000206" [label="(Call,&end)"];
"1000113" [label="(Call,applyColorCorrection = false)"];
"1000243" [label="(Identifier,stderr)"];
"1000208" [label="(Literal,10)"];
"1000307" [label="(Literal,\"%f %f\n\")"];
"1000202" [label="(Call,strtol(argv[3], &end, 10))"];
"1000167" [label="(Call,&end)"];
"1000274" [label="(Call,data.get())"];
"1000136" [label="(Identifier,true)"];
"1000163" -> "1000161"  [label="AST: "];
"1000163" -> "1000169"  [label="CFG: "];
"1000164" -> "1000163"  [label="AST: "];
"1000167" -> "1000163"  [label="AST: "];
"1000169" -> "1000163"  [label="AST: "];
"1000161" -> "1000163"  [label="CFG: "];
"1000163" -> "1000312"  [label="DDG: "];
"1000163" -> "1000312"  [label="DDG: "];
"1000163" -> "1000161"  [label="DDG: "];
"1000163" -> "1000161"  [label="DDG: "];
"1000163" -> "1000161"  [label="DDG: "];
"1000134" -> "1000163"  [label="DDG: "];
"1000104" -> "1000163"  [label="DDG: "];
"1000163" -> "1000179"  [label="DDG: "];
"1000163" -> "1000202"  [label="DDG: "];
"1000134" -> "1000133"  [label="AST: "];
"1000134" -> "1000135"  [label="CFG: "];
"1000135" -> "1000134"  [label="AST: "];
"1000136" -> "1000134"  [label="CFG: "];
"1000134" -> "1000312"  [label="DDG: "];
"1000104" -> "1000134"  [label="DDG: "];
"1000134" -> "1000179"  [label="DDG: "];
"1000134" -> "1000202"  [label="DDG: "];
"1000134" -> "1000215"  [label="DDG: "];
"1000134" -> "1000231"  [label="DDG: "];
"1000134" -> "1000242"  [label="DDG: "];
"1000134" -> "1000290"  [label="DDG: "];
"1000104" -> "1000102"  [label="AST: "];
"1000104" -> "1000312"  [label="DDG: "];
"1000104" -> "1000107"  [label="DDG: "];
"1000104" -> "1000121"  [label="DDG: "];
"1000104" -> "1000122"  [label="DDG: "];
"1000104" -> "1000179"  [label="DDG: "];
"1000104" -> "1000202"  [label="DDG: "];
"1000104" -> "1000215"  [label="DDG: "];
"1000104" -> "1000231"  [label="DDG: "];
"1000104" -> "1000242"  [label="DDG: "];
"1000104" -> "1000290"  [label="DDG: "];
"1000161" -> "1000156"  [label="AST: "];
"1000162" -> "1000161"  [label="AST: "];
"1000174" -> "1000161"  [label="CFG: "];
"1000161" -> "1000312"  [label="DDG: "];
"1000161" -> "1000176"  [label="DDG: "];
"1000161" -> "1000260"  [label="DDG: "];
"1000176" -> "1000171"  [label="AST: "];
"1000176" -> "1000177"  [label="CFG: "];
"1000177" -> "1000176"  [label="AST: "];
"1000171" -> "1000176"  [label="CFG: "];
"1000176" -> "1000171"  [label="DDG: "];
"1000176" -> "1000260"  [label="DDG: "];
"1000171" -> "1000170"  [label="AST: "];
"1000171" -> "1000172"  [label="CFG: "];
"1000172" -> "1000171"  [label="AST: "];
"1000180" -> "1000171"  [label="CFG: "];
"1000189" -> "1000171"  [label="CFG: "];
"1000171" -> "1000312"  [label="DDG: "];
"1000171" -> "1000312"  [label="DDG: "];
"1000171" -> "1000312"  [label="DDG: "];
"1000172" -> "1000171"  [label="DDG: "];
"1000172" -> "1000171"  [label="DDG: "];
"1000260" -> "1000255"  [label="AST: "];
"1000260" -> "1000262"  [label="CFG: "];
"1000261" -> "1000260"  [label="AST: "];
"1000262" -> "1000260"  [label="AST: "];
"1000268" -> "1000260"  [label="CFG: "];
"1000300" -> "1000260"  [label="CFG: "];
"1000260" -> "1000312"  [label="DDG: "];
"1000260" -> "1000312"  [label="DDG: "];
"1000263" -> "1000260"  [label="DDG: "];
"1000257" -> "1000260"  [label="DDG: "];
"1000149" -> "1000260"  [label="DDG: "];
"1000260" -> "1000263"  [label="DDG: "];
"1000260" -> "1000303"  [label="DDG: "];
"1000263" -> "1000255"  [label="AST: "];
"1000263" -> "1000264"  [label="CFG: "];
"1000264" -> "1000263"  [label="AST: "];
"1000261" -> "1000263"  [label="CFG: "];
"1000303" -> "1000301"  [label="AST: "];
"1000303" -> "1000305"  [label="CFG: "];
"1000304" -> "1000303"  [label="AST: "];
"1000305" -> "1000303"  [label="AST: "];
"1000301" -> "1000303"  [label="CFG: "];
"1000303" -> "1000312"  [label="DDG: "];
"1000303" -> "1000301"  [label="DDG: "];
"1000301" -> "1000299"  [label="AST: "];
"1000302" -> "1000301"  [label="AST: "];
"1000299" -> "1000301"  [label="CFG: "];
"1000301" -> "1000312"  [label="DDG: "];
"1000301" -> "1000299"  [label="DDG: "];
"1000301" -> "1000299"  [label="DDG: "];
"1000283" -> "1000301"  [label="DDG: "];
"1000252" -> "1000301"  [label="DDG: "];
"1000301" -> "1000306"  [label="DDG: "];
"1000299" -> "1000105"  [label="AST: "];
"1000300" -> "1000299"  [label="AST: "];
"1000307" -> "1000299"  [label="CFG: "];
"1000299" -> "1000312"  [label="DDG: "];
"1000299" -> "1000306"  [label="DDG: "];
"1000306" -> "1000105"  [label="AST: "];
"1000306" -> "1000309"  [label="CFG: "];
"1000307" -> "1000306"  [label="AST: "];
"1000308" -> "1000306"  [label="AST: "];
"1000309" -> "1000306"  [label="AST: "];
"1000311" -> "1000306"  [label="CFG: "];
"1000306" -> "1000312"  [label="DDG: "];
"1000306" -> "1000312"  [label="DDG: "];
"1000306" -> "1000312"  [label="DDG: "];
"1000179" -> "1000178"  [label="AST: "];
"1000179" -> "1000182"  [label="CFG: "];
"1000180" -> "1000179"  [label="AST: "];
"1000181" -> "1000179"  [label="AST: "];
"1000182" -> "1000179"  [label="AST: "];
"1000186" -> "1000179"  [label="CFG: "];
"1000179" -> "1000312"  [label="DDG: "];
"1000179" -> "1000312"  [label="DDG: "];
"1000179" -> "1000312"  [label="DDG: "];
"1000142" -> "1000179"  [label="DDG: "];
"1000179" -> "1000215"  [label="DDG: "];
"1000179" -> "1000242"  [label="DDG: "];
"1000179" -> "1000290"  [label="DDG: "];
"1000215" -> "1000214"  [label="AST: "];
"1000215" -> "1000218"  [label="CFG: "];
"1000216" -> "1000215"  [label="AST: "];
"1000217" -> "1000215"  [label="AST: "];
"1000218" -> "1000215"  [label="AST: "];
"1000222" -> "1000215"  [label="CFG: "];
"1000215" -> "1000312"  [label="DDG: "];
"1000215" -> "1000312"  [label="DDG: "];
"1000215" -> "1000312"  [label="DDG: "];
"1000142" -> "1000215"  [label="DDG: "];
"1000202" -> "1000215"  [label="DDG: "];
"1000215" -> "1000242"  [label="DDG: "];
"1000215" -> "1000290"  [label="DDG: "];
"1000242" -> "1000241"  [label="AST: "];
"1000242" -> "1000245"  [label="CFG: "];
"1000243" -> "1000242"  [label="AST: "];
"1000244" -> "1000242"  [label="AST: "];
"1000245" -> "1000242"  [label="AST: "];
"1000249" -> "1000242"  [label="CFG: "];
"1000242" -> "1000312"  [label="DDG: "];
"1000242" -> "1000312"  [label="DDG: "];
"1000242" -> "1000312"  [label="DDG: "];
"1000142" -> "1000242"  [label="DDG: "];
"1000231" -> "1000242"  [label="DDG: "];
"1000242" -> "1000290"  [label="DDG: "];
"1000242" -> "1000290"  [label="DDG: "];
"1000290" -> "1000289"  [label="AST: "];
"1000290" -> "1000293"  [label="CFG: "];
"1000291" -> "1000290"  [label="AST: "];
"1000292" -> "1000290"  [label="AST: "];
"1000293" -> "1000290"  [label="AST: "];
"1000297" -> "1000290"  [label="CFG: "];
"1000290" -> "1000312"  [label="DDG: "];
"1000290" -> "1000312"  [label="DDG: "];
"1000290" -> "1000312"  [label="DDG: "];
"1000142" -> "1000290"  [label="DDG: "];
"1000231" -> "1000290"  [label="DDG: "];
"1000202" -> "1000200"  [label="AST: "];
"1000202" -> "1000208"  [label="CFG: "];
"1000203" -> "1000202"  [label="AST: "];
"1000206" -> "1000202"  [label="AST: "];
"1000208" -> "1000202"  [label="AST: "];
"1000200" -> "1000202"  [label="CFG: "];
"1000202" -> "1000312"  [label="DDG: "];
"1000202" -> "1000312"  [label="DDG: "];
"1000202" -> "1000200"  [label="DDG: "];
"1000202" -> "1000200"  [label="DDG: "];
"1000202" -> "1000200"  [label="DDG: "];
"1000200" -> "1000195"  [label="AST: "];
"1000201" -> "1000200"  [label="AST: "];
"1000212" -> "1000200"  [label="CFG: "];
"1000200" -> "1000312"  [label="DDG: "];
"1000200" -> "1000312"  [label="DDG: "];
"1000200" -> "1000273"  [label="DDG: "];
"1000273" -> "1000271"  [label="AST: "];
"1000273" -> "1000276"  [label="CFG: "];
"1000274" -> "1000273"  [label="AST: "];
"1000275" -> "1000273"  [label="AST: "];
"1000276" -> "1000273"  [label="AST: "];
"1000271" -> "1000273"  [label="CFG: "];
"1000273" -> "1000312"  [label="DDG: "];
"1000273" -> "1000312"  [label="DDG: "];
"1000273" -> "1000312"  [label="DDG: "];
"1000273" -> "1000271"  [label="DDG: "];
"1000273" -> "1000271"  [label="DDG: "];
"1000273" -> "1000271"  [label="DDG: "];
"1000113" -> "1000273"  [label="DDG: "];
"1000128" -> "1000273"  [label="DDG: "];
"1000188" -> "1000273"  [label="DDG: "];
"1000271" -> "1000265"  [label="AST: "];
"1000272" -> "1000271"  [label="AST: "];
"1000279" -> "1000271"  [label="CFG: "];
"1000271" -> "1000312"  [label="DDG: "];
"1000271" -> "1000287"  [label="DDG: "];
"1000287" -> "1000286"  [label="AST: "];
"1000287" -> "1000288"  [label="CFG: "];
"1000288" -> "1000287"  [label="AST: "];
"1000291" -> "1000287"  [label="CFG: "];
"1000264" -> "1000287"  [label="CFG: "];
"1000287" -> "1000312"  [label="DDG: "];
"1000287" -> "1000312"  [label="DDG: "];
}
