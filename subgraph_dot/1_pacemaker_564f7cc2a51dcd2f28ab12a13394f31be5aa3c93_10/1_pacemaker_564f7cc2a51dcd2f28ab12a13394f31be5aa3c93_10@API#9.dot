digraph "1_pacemaker_564f7cc2a51dcd2f28ab12a13394f31be5aa3c93_10@API" {
"1000277" [label="(Call,connect(sock, (struct sockaddr *)&addr, sizeof(addr)) == -1)"];
"1000278" [label="(Call,connect(sock, (struct sockaddr *)&addr, sizeof(addr)))"];
"1000158" [label="(Call,sock == -1)"];
"1000151" [label="(Call,sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP))"];
"1000153" [label="(Call,socket(PF_INET, SOCK_STREAM, IPPROTO_TCP))"];
"1000160" [label="(Call,-1)"];
"1000280" [label="(Call,(struct sockaddr *)&addr)"];
"1000259" [label="(Call,memcpy(&addr, res->ai_addr, res->ai_addrlen))"];
"1000249" [label="(Call,!res->ai_addr)"];
"1000286" [label="(Call,-1)"];
"1000285" [label="(Identifier,addr)"];
"1000284" [label="(Call,sizeof(addr))"];
"1000110" [label="(Block,)"];
"1000159" [label="(Identifier,sock)"];
"1000250" [label="(Call,res->ai_addr)"];
"1000277" [label="(Call,connect(sock, (struct sockaddr *)&addr, sizeof(addr)) == -1)"];
"1000158" [label="(Call,sock == -1)"];
"1000227" [label="(Call,close(sock))"];
"1000282" [label="(Call,&addr)"];
"1000276" [label="(ControlStructure,if (connect(sock, (struct sockaddr *)&addr, sizeof(addr)) == -1))"];
"1000153" [label="(Call,socket(PF_INET, SOCK_STREAM, IPPROTO_TCP))"];
"1000151" [label="(Call,sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP))"];
"1000344" [label="(Call,GUINT_TO_POINTER(sock))"];
"1000270" [label="(Identifier,addr)"];
"1000255" [label="(Identifier,stderr)"];
"1000261" [label="(Identifier,addr)"];
"1000278" [label="(Call,connect(sock, (struct sockaddr *)&addr, sizeof(addr)))"];
"1000265" [label="(Call,res->ai_addrlen)"];
"1000303" [label="(Identifier,connection)"];
"1000473" [label="(MethodReturn,RET)"];
"1000160" [label="(Call,-1)"];
"1000164" [label="(Identifier,LOG_ERR)"];
"1000280" [label="(Call,(struct sockaddr *)&addr)"];
"1000154" [label="(Identifier,PF_INET)"];
"1000161" [label="(Literal,1)"];
"1000155" [label="(Identifier,SOCK_STREAM)"];
"1000152" [label="(Identifier,sock)"];
"1000279" [label="(Identifier,sock)"];
"1000157" [label="(ControlStructure,if (sock == -1))"];
"1000260" [label="(Call,&addr)"];
"1000287" [label="(Literal,1)"];
"1000248" [label="(ControlStructure,if (!res->ai_addr))"];
"1000296" [label="(Call,close(sock))"];
"1000314" [label="(Call,create_tls_session(sock, GNUTLS_CLIENT))"];
"1000156" [label="(Identifier,IPPROTO_TCP)"];
"1000249" [label="(Call,!res->ai_addr)"];
"1000262" [label="(Call,res->ai_addr)"];
"1000259" [label="(Call,memcpy(&addr, res->ai_addr, res->ai_addrlen))"];
"1000286" [label="(Call,-1)"];
"1000290" [label="(Identifier,LOG_ERR)"];
"1000171" [label="(Identifier,hints)"];
"1000277" -> "1000276"  [label="AST: "];
"1000277" -> "1000286"  [label="CFG: "];
"1000278" -> "1000277"  [label="AST: "];
"1000286" -> "1000277"  [label="AST: "];
"1000290" -> "1000277"  [label="CFG: "];
"1000303" -> "1000277"  [label="CFG: "];
"1000277" -> "1000473"  [label="DDG: -1"];
"1000277" -> "1000473"  [label="DDG: connect(sock, (struct sockaddr *)&addr, sizeof(addr))"];
"1000277" -> "1000473"  [label="DDG: connect(sock, (struct sockaddr *)&addr, sizeof(addr)) == -1"];
"1000278" -> "1000277"  [label="DDG: sock"];
"1000278" -> "1000277"  [label="DDG: (struct sockaddr *)&addr"];
"1000286" -> "1000277"  [label="DDG: 1"];
"1000278" -> "1000284"  [label="CFG: "];
"1000279" -> "1000278"  [label="AST: "];
"1000280" -> "1000278"  [label="AST: "];
"1000284" -> "1000278"  [label="AST: "];
"1000287" -> "1000278"  [label="CFG: "];
"1000278" -> "1000473"  [label="DDG: (struct sockaddr *)&addr"];
"1000158" -> "1000278"  [label="DDG: sock"];
"1000280" -> "1000278"  [label="DDG: &addr"];
"1000278" -> "1000296"  [label="DDG: sock"];
"1000278" -> "1000314"  [label="DDG: sock"];
"1000278" -> "1000344"  [label="DDG: sock"];
"1000158" -> "1000157"  [label="AST: "];
"1000158" -> "1000160"  [label="CFG: "];
"1000159" -> "1000158"  [label="AST: "];
"1000160" -> "1000158"  [label="AST: "];
"1000164" -> "1000158"  [label="CFG: "];
"1000171" -> "1000158"  [label="CFG: "];
"1000158" -> "1000473"  [label="DDG: sock"];
"1000158" -> "1000473"  [label="DDG: sock == -1"];
"1000151" -> "1000158"  [label="DDG: sock"];
"1000160" -> "1000158"  [label="DDG: 1"];
"1000158" -> "1000227"  [label="DDG: sock"];
"1000151" -> "1000110"  [label="AST: "];
"1000151" -> "1000153"  [label="CFG: "];
"1000152" -> "1000151"  [label="AST: "];
"1000153" -> "1000151"  [label="AST: "];
"1000159" -> "1000151"  [label="CFG: "];
"1000151" -> "1000473"  [label="DDG: socket(PF_INET, SOCK_STREAM, IPPROTO_TCP)"];
"1000153" -> "1000151"  [label="DDG: PF_INET"];
"1000153" -> "1000151"  [label="DDG: SOCK_STREAM"];
"1000153" -> "1000151"  [label="DDG: IPPROTO_TCP"];
"1000153" -> "1000156"  [label="CFG: "];
"1000154" -> "1000153"  [label="AST: "];
"1000155" -> "1000153"  [label="AST: "];
"1000156" -> "1000153"  [label="AST: "];
"1000153" -> "1000473"  [label="DDG: SOCK_STREAM"];
"1000153" -> "1000473"  [label="DDG: PF_INET"];
"1000153" -> "1000473"  [label="DDG: IPPROTO_TCP"];
"1000160" -> "1000161"  [label="CFG: "];
"1000161" -> "1000160"  [label="AST: "];
"1000280" -> "1000282"  [label="CFG: "];
"1000281" -> "1000280"  [label="AST: "];
"1000282" -> "1000280"  [label="AST: "];
"1000285" -> "1000280"  [label="CFG: "];
"1000280" -> "1000473"  [label="DDG: &addr"];
"1000259" -> "1000280"  [label="DDG: &addr"];
"1000259" -> "1000110"  [label="AST: "];
"1000259" -> "1000265"  [label="CFG: "];
"1000260" -> "1000259"  [label="AST: "];
"1000262" -> "1000259"  [label="AST: "];
"1000265" -> "1000259"  [label="AST: "];
"1000270" -> "1000259"  [label="CFG: "];
"1000259" -> "1000473"  [label="DDG: memcpy(&addr, res->ai_addr, res->ai_addrlen)"];
"1000259" -> "1000473"  [label="DDG: res->ai_addrlen"];
"1000259" -> "1000473"  [label="DDG: res->ai_addr"];
"1000249" -> "1000259"  [label="DDG: res->ai_addr"];
"1000249" -> "1000248"  [label="AST: "];
"1000249" -> "1000250"  [label="CFG: "];
"1000250" -> "1000249"  [label="AST: "];
"1000255" -> "1000249"  [label="CFG: "];
"1000261" -> "1000249"  [label="CFG: "];
"1000249" -> "1000473"  [label="DDG: !res->ai_addr"];
"1000286" -> "1000287"  [label="CFG: "];
"1000287" -> "1000286"  [label="AST: "];
}
