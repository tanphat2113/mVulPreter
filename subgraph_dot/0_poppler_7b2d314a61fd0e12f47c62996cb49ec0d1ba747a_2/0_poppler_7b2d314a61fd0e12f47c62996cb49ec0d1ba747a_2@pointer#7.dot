digraph "0_poppler_7b2d314a61fd0e12f47c62996cb49ec0d1ba747a_2@pointer" {
"1000355" [label="(Call,cairo_surface_destroy (image))"];
"1000291" [label="(Call,cairo_pattern_create_for_surface (image))"];
"1000282" [label="(Call,image == NULL)"];
"1000271" [label="(Call,image = cairo_image_surface_create_for_data (buffer, CAIRO_FORMAT_RGB24,\n\t\t\t\t\t\t width, height, width * 4))"];
"1000273" [label="(Call,cairo_image_surface_create_for_data (buffer, CAIRO_FORMAT_RGB24,\n\t\t\t\t\t\t width, height, width * 4))"];
"1000217" [label="(Call,buffer = (unsigned char *)gmallocn3 (width, height, 4))"];
"1000219" [label="(Call,(unsigned char *)gmallocn3 (width, height, 4))"];
"1000221" [label="(Call,gmallocn3 (width, height, 4))"];
"1000109" [label="(MethodParameterIn,int width)"];
"1000110" [label="(MethodParameterIn,int height)"];
"1000278" [label="(Call,width * 4)"];
"1000267" [label="(Call,colorMap->getRGBLine (pix, dest, width))"];
"1000183" [label="(Call,pix[x] ^ invert_bit)"];
"1000162" [label="(Call,pix = maskImgStr->getLine())"];
"1000146" [label="(Call,invert_bit = maskInvert ? 1 : 0)"];
"1000115" [label="(MethodParameterIn,GBool maskInvert)"];
"1000264" [label="(Call,pix = imgStr->getLine())"];
"1000253" [label="(Call,dest = (unsigned int *) (buffer + y * 4 * width))"];
"1000255" [label="(Call,(unsigned int *) (buffer + y * 4 * width))"];
"1000259" [label="(Call,y * 4 * width)"];
"1000247" [label="(Call,y < height)"];
"1000250" [label="(Call,y++)"];
"1000244" [label="(Call,y = 0)"];
"1000261" [label="(Call,4 * width)"];
"1000281" [label="(ControlStructure,if (image == NULL))"];
"1000244" [label="(Call,y = 0)"];
"1000246" [label="(Literal,0)"];
"1000249" [label="(Identifier,height)"];
"1000272" [label="(Identifier,image)"];
"1000282" [label="(Call,image == NULL)"];
"1000363" [label="(MethodReturn,void)"];
"1000251" [label="(Identifier,y)"];
"1000267" [label="(Call,colorMap->getRGBLine (pix, dest, width))"];
"1000266" [label="(Call,imgStr->getLine())"];
"1000257" [label="(Call,buffer + y * 4 * width)"];
"1000280" [label="(Literal,4)"];
"1000276" [label="(Identifier,width)"];
"1000217" [label="(Call,buffer = (unsigned char *)gmallocn3 (width, height, 4))"];
"1000277" [label="(Identifier,height)"];
"1000166" [label="(Identifier,maskDest)"];
"1000182" [label="(ControlStructure,if (pix[x] ^ invert_bit))"];
"1000226" [label="(Identifier,imgStr)"];
"1000259" [label="(Call,y * 4 * width)"];
"1000162" [label="(Call,pix = maskImgStr->getLine())"];
"1000183" [label="(Call,pix[x] ^ invert_bit)"];
"1000163" [label="(Identifier,pix)"];
"1000265" [label="(Identifier,pix)"];
"1000261" [label="(Call,4 * width)"];
"1000284" [label="(Identifier,NULL)"];
"1000219" [label="(Call,(unsigned char *)gmallocn3 (width, height, 4))"];
"1000147" [label="(Identifier,invert_bit)"];
"1000275" [label="(Identifier,CAIRO_FORMAT_RGB24)"];
"1000222" [label="(Identifier,width)"];
"1000260" [label="(Identifier,y)"];
"1000252" [label="(Block,)"];
"1000274" [label="(Identifier,buffer)"];
"1000298" [label="(Call,pattern == NULL)"];
"1000341" [label="(Call,cairo_rectangle (cairo_shape, 0., 0., width, height))"];
"1000263" [label="(Identifier,width)"];
"1000116" [label="(Block,)"];
"1000269" [label="(Identifier,dest)"];
"1000191" [label="(Identifier,maskDest)"];
"1000255" [label="(Call,(unsigned int *) (buffer + y * 4 * width))"];
"1000279" [label="(Identifier,width)"];
"1000250" [label="(Call,y++)"];
"1000262" [label="(Literal,4)"];
"1000154" [label="(Identifier,y)"];
"1000283" [label="(Identifier,image)"];
"1000268" [label="(Identifier,pix)"];
"1000315" [label="(Call,cairo_matrix_scale (&matrix, width, -height))"];
"1000110" [label="(MethodParameterIn,int height)"];
"1000253" [label="(Call,dest = (unsigned int *) (buffer + y * 4 * width))"];
"1000270" [label="(Identifier,width)"];
"1000223" [label="(Identifier,height)"];
"1000164" [label="(Call,maskImgStr->getLine())"];
"1000254" [label="(Identifier,dest)"];
"1000356" [label="(Identifier,image)"];
"1000357" [label="(Call,free (buffer))"];
"1000310" [label="(Call,cairo_matrix_init_translate (&matrix, 0, height))"];
"1000287" [label="(Identifier,imgStr)"];
"1000197" [label="(Identifier,maskDest)"];
"1000187" [label="(Identifier,invert_bit)"];
"1000248" [label="(Identifier,y)"];
"1000148" [label="(Call,maskInvert ? 1 : 0)"];
"1000289" [label="(Call,pattern = cairo_pattern_create_for_surface (image))"];
"1000146" [label="(Call,invert_bit = maskInvert ? 1 : 0)"];
"1000243" [label="(ControlStructure,for (y = 0; y < height; y++))"];
"1000291" [label="(Call,cairo_pattern_create_for_surface (image))"];
"1000109" [label="(MethodParameterIn,int width)"];
"1000115" [label="(MethodParameterIn,GBool maskInvert)"];
"1000273" [label="(Call,cairo_image_surface_create_for_data (buffer, CAIRO_FORMAT_RGB24,\n\t\t\t\t\t\t width, height, width * 4))"];
"1000319" [label="(Call,-height)"];
"1000161" [label="(Block,)"];
"1000355" [label="(Call,cairo_surface_destroy (image))"];
"1000290" [label="(Identifier,pattern)"];
"1000221" [label="(Call,gmallocn3 (width, height, 4))"];
"1000184" [label="(Call,pix[x])"];
"1000271" [label="(Call,image = cairo_image_surface_create_for_data (buffer, CAIRO_FORMAT_RGB24,\n\t\t\t\t\t\t width, height, width * 4))"];
"1000292" [label="(Identifier,image)"];
"1000306" [label="(Call,printf (\"drawMaskedImage %dx%d\n\", width, height))"];
"1000247" [label="(Call,y < height)"];
"1000224" [label="(Literal,4)"];
"1000264" [label="(Call,pix = imgStr->getLine())"];
"1000278" [label="(Call,width * 4)"];
"1000245" [label="(Identifier,y)"];
"1000218" [label="(Identifier,buffer)"];
"1000358" [label="(Identifier,buffer)"];
"1000355" -> "1000116"  [label="AST: "];
"1000355" -> "1000356"  [label="CFG: "];
"1000356" -> "1000355"  [label="AST: "];
"1000358" -> "1000355"  [label="CFG: "];
"1000355" -> "1000363"  [label="DDG: image"];
"1000355" -> "1000363"  [label="DDG: cairo_surface_destroy (image)"];
"1000291" -> "1000355"  [label="DDG: image"];
"1000291" -> "1000289"  [label="AST: "];
"1000291" -> "1000292"  [label="CFG: "];
"1000292" -> "1000291"  [label="AST: "];
"1000289" -> "1000291"  [label="CFG: "];
"1000291" -> "1000363"  [label="DDG: image"];
"1000291" -> "1000289"  [label="DDG: image"];
"1000282" -> "1000291"  [label="DDG: image"];
"1000282" -> "1000281"  [label="AST: "];
"1000282" -> "1000284"  [label="CFG: "];
"1000283" -> "1000282"  [label="AST: "];
"1000284" -> "1000282"  [label="AST: "];
"1000287" -> "1000282"  [label="CFG: "];
"1000290" -> "1000282"  [label="CFG: "];
"1000282" -> "1000363"  [label="DDG: image == NULL"];
"1000282" -> "1000363"  [label="DDG: NULL"];
"1000282" -> "1000363"  [label="DDG: image"];
"1000271" -> "1000282"  [label="DDG: image"];
"1000282" -> "1000298"  [label="DDG: NULL"];
"1000271" -> "1000116"  [label="AST: "];
"1000271" -> "1000273"  [label="CFG: "];
"1000272" -> "1000271"  [label="AST: "];
"1000273" -> "1000271"  [label="AST: "];
"1000283" -> "1000271"  [label="CFG: "];
"1000271" -> "1000363"  [label="DDG: cairo_image_surface_create_for_data (buffer, CAIRO_FORMAT_RGB24,\n\t\t\t\t\t\t width, height, width * 4)"];
"1000273" -> "1000271"  [label="DDG: width * 4"];
"1000273" -> "1000271"  [label="DDG: CAIRO_FORMAT_RGB24"];
"1000273" -> "1000271"  [label="DDG: width"];
"1000273" -> "1000271"  [label="DDG: height"];
"1000273" -> "1000271"  [label="DDG: buffer"];
"1000273" -> "1000278"  [label="CFG: "];
"1000274" -> "1000273"  [label="AST: "];
"1000275" -> "1000273"  [label="AST: "];
"1000276" -> "1000273"  [label="AST: "];
"1000277" -> "1000273"  [label="AST: "];
"1000278" -> "1000273"  [label="AST: "];
"1000273" -> "1000363"  [label="DDG: CAIRO_FORMAT_RGB24"];
"1000273" -> "1000363"  [label="DDG: buffer"];
"1000273" -> "1000363"  [label="DDG: width * 4"];
"1000273" -> "1000363"  [label="DDG: width"];
"1000273" -> "1000363"  [label="DDG: height"];
"1000217" -> "1000273"  [label="DDG: buffer"];
"1000278" -> "1000273"  [label="DDG: width"];
"1000278" -> "1000273"  [label="DDG: 4"];
"1000109" -> "1000273"  [label="DDG: width"];
"1000247" -> "1000273"  [label="DDG: height"];
"1000110" -> "1000273"  [label="DDG: height"];
"1000273" -> "1000306"  [label="DDG: width"];
"1000273" -> "1000306"  [label="DDG: height"];
"1000273" -> "1000357"  [label="DDG: buffer"];
"1000217" -> "1000116"  [label="AST: "];
"1000217" -> "1000219"  [label="CFG: "];
"1000218" -> "1000217"  [label="AST: "];
"1000219" -> "1000217"  [label="AST: "];
"1000226" -> "1000217"  [label="CFG: "];
"1000217" -> "1000363"  [label="DDG: (unsigned char *)gmallocn3 (width, height, 4)"];
"1000219" -> "1000217"  [label="DDG: gmallocn3 (width, height, 4)"];
"1000217" -> "1000255"  [label="DDG: buffer"];
"1000217" -> "1000257"  [label="DDG: buffer"];
"1000219" -> "1000221"  [label="CFG: "];
"1000220" -> "1000219"  [label="AST: "];
"1000221" -> "1000219"  [label="AST: "];
"1000219" -> "1000363"  [label="DDG: gmallocn3 (width, height, 4)"];
"1000221" -> "1000219"  [label="DDG: width"];
"1000221" -> "1000219"  [label="DDG: height"];
"1000221" -> "1000219"  [label="DDG: 4"];
"1000221" -> "1000224"  [label="CFG: "];
"1000222" -> "1000221"  [label="AST: "];
"1000223" -> "1000221"  [label="AST: "];
"1000224" -> "1000221"  [label="AST: "];
"1000109" -> "1000221"  [label="DDG: width"];
"1000110" -> "1000221"  [label="DDG: height"];
"1000221" -> "1000247"  [label="DDG: height"];
"1000221" -> "1000261"  [label="DDG: width"];
"1000221" -> "1000278"  [label="DDG: width"];
"1000109" -> "1000105"  [label="AST: "];
"1000109" -> "1000363"  [label="DDG: width"];
"1000109" -> "1000261"  [label="DDG: width"];
"1000109" -> "1000267"  [label="DDG: width"];
"1000109" -> "1000278"  [label="DDG: width"];
"1000109" -> "1000306"  [label="DDG: width"];
"1000109" -> "1000315"  [label="DDG: width"];
"1000109" -> "1000341"  [label="DDG: width"];
"1000110" -> "1000105"  [label="AST: "];
"1000110" -> "1000363"  [label="DDG: height"];
"1000110" -> "1000247"  [label="DDG: height"];
"1000110" -> "1000306"  [label="DDG: height"];
"1000110" -> "1000310"  [label="DDG: height"];
"1000110" -> "1000319"  [label="DDG: height"];
"1000110" -> "1000341"  [label="DDG: height"];
"1000278" -> "1000280"  [label="CFG: "];
"1000279" -> "1000278"  [label="AST: "];
"1000280" -> "1000278"  [label="AST: "];
"1000267" -> "1000278"  [label="DDG: width"];
"1000267" -> "1000252"  [label="AST: "];
"1000267" -> "1000270"  [label="CFG: "];
"1000268" -> "1000267"  [label="AST: "];
"1000269" -> "1000267"  [label="AST: "];
"1000270" -> "1000267"  [label="AST: "];
"1000251" -> "1000267"  [label="CFG: "];
"1000267" -> "1000363"  [label="DDG: dest"];
"1000267" -> "1000363"  [label="DDG: colorMap->getRGBLine (pix, dest, width)"];
"1000267" -> "1000363"  [label="DDG: pix"];
"1000267" -> "1000261"  [label="DDG: width"];
"1000183" -> "1000267"  [label="DDG: pix[x]"];
"1000264" -> "1000267"  [label="DDG: pix"];
"1000253" -> "1000267"  [label="DDG: dest"];
"1000261" -> "1000267"  [label="DDG: width"];
"1000183" -> "1000182"  [label="AST: "];
"1000183" -> "1000187"  [label="CFG: "];
"1000184" -> "1000183"  [label="AST: "];
"1000187" -> "1000183"  [label="AST: "];
"1000191" -> "1000183"  [label="CFG: "];
"1000197" -> "1000183"  [label="CFG: "];
"1000183" -> "1000363"  [label="DDG: invert_bit"];
"1000183" -> "1000363"  [label="DDG: pix[x]"];
"1000183" -> "1000363"  [label="DDG: pix[x] ^ invert_bit"];
"1000162" -> "1000183"  [label="DDG: pix"];
"1000146" -> "1000183"  [label="DDG: invert_bit"];
"1000162" -> "1000161"  [label="AST: "];
"1000162" -> "1000164"  [label="CFG: "];
"1000163" -> "1000162"  [label="AST: "];
"1000164" -> "1000162"  [label="AST: "];
"1000166" -> "1000162"  [label="CFG: "];
"1000162" -> "1000363"  [label="DDG: maskImgStr->getLine()"];
"1000162" -> "1000363"  [label="DDG: pix"];
"1000146" -> "1000116"  [label="AST: "];
"1000146" -> "1000148"  [label="CFG: "];
"1000147" -> "1000146"  [label="AST: "];
"1000148" -> "1000146"  [label="AST: "];
"1000154" -> "1000146"  [label="CFG: "];
"1000146" -> "1000363"  [label="DDG: maskInvert ? 1 : 0"];
"1000146" -> "1000363"  [label="DDG: invert_bit"];
"1000115" -> "1000146"  [label="DDG: maskInvert"];
"1000115" -> "1000105"  [label="AST: "];
"1000115" -> "1000363"  [label="DDG: maskInvert"];
"1000115" -> "1000148"  [label="DDG: maskInvert"];
"1000264" -> "1000252"  [label="AST: "];
"1000264" -> "1000266"  [label="CFG: "];
"1000265" -> "1000264"  [label="AST: "];
"1000266" -> "1000264"  [label="AST: "];
"1000268" -> "1000264"  [label="CFG: "];
"1000264" -> "1000363"  [label="DDG: imgStr->getLine()"];
"1000253" -> "1000252"  [label="AST: "];
"1000253" -> "1000255"  [label="CFG: "];
"1000254" -> "1000253"  [label="AST: "];
"1000255" -> "1000253"  [label="AST: "];
"1000265" -> "1000253"  [label="CFG: "];
"1000253" -> "1000363"  [label="DDG: (unsigned int *) (buffer + y * 4 * width)"];
"1000255" -> "1000253"  [label="DDG: buffer + y * 4 * width"];
"1000255" -> "1000257"  [label="CFG: "];
"1000256" -> "1000255"  [label="AST: "];
"1000257" -> "1000255"  [label="AST: "];
"1000255" -> "1000363"  [label="DDG: buffer + y * 4 * width"];
"1000259" -> "1000255"  [label="DDG: y"];
"1000259" -> "1000255"  [label="DDG: 4 * width"];
"1000259" -> "1000257"  [label="AST: "];
"1000259" -> "1000261"  [label="CFG: "];
"1000260" -> "1000259"  [label="AST: "];
"1000261" -> "1000259"  [label="AST: "];
"1000257" -> "1000259"  [label="CFG: "];
"1000259" -> "1000363"  [label="DDG: 4 * width"];
"1000259" -> "1000250"  [label="DDG: y"];
"1000259" -> "1000257"  [label="DDG: y"];
"1000259" -> "1000257"  [label="DDG: 4 * width"];
"1000247" -> "1000259"  [label="DDG: y"];
"1000261" -> "1000259"  [label="DDG: 4"];
"1000261" -> "1000259"  [label="DDG: width"];
"1000247" -> "1000243"  [label="AST: "];
"1000247" -> "1000249"  [label="CFG: "];
"1000248" -> "1000247"  [label="AST: "];
"1000249" -> "1000247"  [label="AST: "];
"1000254" -> "1000247"  [label="CFG: "];
"1000272" -> "1000247"  [label="CFG: "];
"1000247" -> "1000363"  [label="DDG: y"];
"1000247" -> "1000363"  [label="DDG: y < height"];
"1000250" -> "1000247"  [label="DDG: y"];
"1000244" -> "1000247"  [label="DDG: y"];
"1000250" -> "1000243"  [label="AST: "];
"1000250" -> "1000251"  [label="CFG: "];
"1000251" -> "1000250"  [label="AST: "];
"1000248" -> "1000250"  [label="CFG: "];
"1000244" -> "1000243"  [label="AST: "];
"1000244" -> "1000246"  [label="CFG: "];
"1000245" -> "1000244"  [label="AST: "];
"1000246" -> "1000244"  [label="AST: "];
"1000248" -> "1000244"  [label="CFG: "];
"1000261" -> "1000263"  [label="CFG: "];
"1000262" -> "1000261"  [label="AST: "];
"1000263" -> "1000261"  [label="AST: "];
}
