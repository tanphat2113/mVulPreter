digraph "0_Android_22f824feac43d5758f9a70b77f2aca840ba62c3b@API" {
"1000232" [label="(Call,data.read(iv, sizeof(iv)))"];
"1000378" [label="(Call,decrypt(\n                    secure,\n                    key,\n                    iv,\n                    mode,\n                    sharedBuffer, offset,\n                    subSamples, numSubSamples,\n                    secure ? secureBufferId : dstPtr,\n &errorDetailMsg))"];
"1000376" [label="(Call,result = decrypt(\n                    secure,\n                    key,\n                    iv,\n                    mode,\n                    sharedBuffer, offset,\n                    subSamples, numSubSamples,\n                    secure ? secureBufferId : dstPtr,\n &errorDetailMsg))"];
"1000393" [label="(Call,reply->writeInt32(result))"];
"1000396" [label="(Call,isCryptoError(result))"];
"1000406" [label="(Call,result >= 0)"];
"1000410" [label="(Call,CHECK_LE(result, static_cast<ssize_t>(totalSize)))"];
"1000415" [label="(Call,reply->write(dstPtr, result))"];
"1000418" [label="(Call,free(dstPtr))"];
"1000402" [label="(Call,!secure)"];
"1000423" [label="(Call,delete[] subSamples)"];
"1000419" [label="(Identifier,dstPtr)"];
"1000215" [label="(Call,secure = data.readInt32() != 0)"];
"1000301" [label="(Call,i < numSubSamples)"];
"1000380" [label="(Identifier,key)"];
"1000261" [label="(Call,data.read(\n                    subSamples,\n sizeof(CryptoPlugin::SubSample) * numSubSamples))"];
"1000241" [label="(Call,sharedBuffer =\n                interface_cast<IMemory>(data.readStrongBinder()))"];
"1000358" [label="(Call,result = -EINVAL)"];
"1000249" [label="(Call,offset = data.readInt32())"];
"1000408" [label="(Literal,0)"];
"1000387" [label="(Call,secure ? secureBufferId : dstPtr)"];
"1000375" [label="(Block,)"];
"1000384" [label="(Identifier,offset)"];
"1000385" [label="(Identifier,subSamples)"];
"1000400" [label="(Call,errorDetailMsg.c_str())"];
"1000376" [label="(Call,result = decrypt(\n                    secure,\n                    key,\n                    iv,\n                    mode,\n                    sharedBuffer, offset,\n                    subSamples, numSubSamples,\n                    secure ? secureBufferId : dstPtr,\n &errorDetailMsg))"];
"1000379" [label="(Identifier,secure)"];
"1000395" [label="(ControlStructure,if (isCryptoError(result)))"];
"1000401" [label="(ControlStructure,if (!secure))"];
"1000234" [label="(Call,sizeof(iv))"];
"1000415" [label="(Call,reply->write(dstPtr, result))"];
"1000377" [label="(Identifier,result)"];
"1000421" [label="(Identifier,dstPtr)"];
"1000391" [label="(Call,&errorDetailMsg)"];
"1000402" [label="(Call,!secure)"];
"1000403" [label="(Identifier,secure)"];
"1000471" [label="(MethodReturn,status_t)"];
"1000232" [label="(Call,data.read(iv, sizeof(iv)))"];
"1000393" [label="(Call,reply->writeInt32(result))"];
"1000382" [label="(Identifier,mode)"];
"1000405" [label="(ControlStructure,if (result >= 0))"];
"1000281" [label="(Call,dstPtr = calloc(1, totalSize))"];
"1000238" [label="(Identifier,totalSize)"];
"1000381" [label="(Identifier,iv)"];
"1000407" [label="(Identifier,result)"];
"1000409" [label="(Block,)"];
"1000378" [label="(Call,decrypt(\n                    secure,\n                    key,\n                    iv,\n                    mode,\n                    sharedBuffer, offset,\n                    subSamples, numSubSamples,\n                    secure ? secureBufferId : dstPtr,\n &errorDetailMsg))"];
"1000227" [label="(Call,data.read(key, sizeof(key)))"];
"1000416" [label="(Identifier,dstPtr)"];
"1000423" [label="(Call,delete[] subSamples)"];
"1000406" [label="(Call,result >= 0)"];
"1000424" [label="(Identifier,subSamples)"];
"1000410" [label="(Call,CHECK_LE(result, static_cast<ssize_t>(totalSize)))"];
"1000272" [label="(Call,secureBufferId = reinterpret_cast<void *>(static_cast<uintptr_t>(data.readInt64())))"];
"1000417" [label="(Identifier,result)"];
"1000209" [label="(Block,)"];
"1000394" [label="(Identifier,result)"];
"1000396" [label="(Call,isCryptoError(result))"];
"1000370" [label="(Call,result = -EINVAL)"];
"1000221" [label="(Call,mode = (CryptoPlugin::Mode)data.readInt32())"];
"1000426" [label="(Identifier,subSamples)"];
"1000404" [label="(Block,)"];
"1000397" [label="(Identifier,result)"];
"1000411" [label="(Identifier,result)"];
"1000383" [label="(Identifier,sharedBuffer)"];
"1000418" [label="(Call,free(dstPtr))"];
"1000412" [label="(Call,static_cast<ssize_t>(totalSize))"];
"1000386" [label="(Identifier,numSubSamples)"];
"1000233" [label="(Identifier,iv)"];
"1000232" -> "1000209"  [label="AST: "];
"1000232" -> "1000234"  [label="CFG: "];
"1000233" -> "1000232"  [label="AST: "];
"1000234" -> "1000232"  [label="AST: "];
"1000238" -> "1000232"  [label="CFG: "];
"1000232" -> "1000471"  [label="DDG: iv"];
"1000232" -> "1000471"  [label="DDG: data.read(iv, sizeof(iv))"];
"1000232" -> "1000378"  [label="DDG: iv"];
"1000378" -> "1000376"  [label="AST: "];
"1000378" -> "1000391"  [label="CFG: "];
"1000379" -> "1000378"  [label="AST: "];
"1000380" -> "1000378"  [label="AST: "];
"1000381" -> "1000378"  [label="AST: "];
"1000382" -> "1000378"  [label="AST: "];
"1000383" -> "1000378"  [label="AST: "];
"1000384" -> "1000378"  [label="AST: "];
"1000385" -> "1000378"  [label="AST: "];
"1000386" -> "1000378"  [label="AST: "];
"1000387" -> "1000378"  [label="AST: "];
"1000391" -> "1000378"  [label="AST: "];
"1000376" -> "1000378"  [label="CFG: "];
"1000378" -> "1000471"  [label="DDG: sharedBuffer"];
"1000378" -> "1000471"  [label="DDG: offset"];
"1000378" -> "1000471"  [label="DDG: key"];
"1000378" -> "1000471"  [label="DDG: secure ? secureBufferId : dstPtr"];
"1000378" -> "1000471"  [label="DDG: mode"];
"1000378" -> "1000471"  [label="DDG: &errorDetailMsg"];
"1000378" -> "1000471"  [label="DDG: numSubSamples"];
"1000378" -> "1000471"  [label="DDG: iv"];
"1000378" -> "1000376"  [label="DDG: mode"];
"1000378" -> "1000376"  [label="DDG: subSamples"];
"1000378" -> "1000376"  [label="DDG: sharedBuffer"];
"1000378" -> "1000376"  [label="DDG: &errorDetailMsg"];
"1000378" -> "1000376"  [label="DDG: numSubSamples"];
"1000378" -> "1000376"  [label="DDG: offset"];
"1000378" -> "1000376"  [label="DDG: iv"];
"1000378" -> "1000376"  [label="DDG: secure"];
"1000378" -> "1000376"  [label="DDG: key"];
"1000378" -> "1000376"  [label="DDG: secure ? secureBufferId : dstPtr"];
"1000227" -> "1000378"  [label="DDG: key"];
"1000221" -> "1000378"  [label="DDG: mode"];
"1000241" -> "1000378"  [label="DDG: sharedBuffer"];
"1000249" -> "1000378"  [label="DDG: offset"];
"1000261" -> "1000378"  [label="DDG: subSamples"];
"1000301" -> "1000378"  [label="DDG: numSubSamples"];
"1000272" -> "1000378"  [label="DDG: secureBufferId"];
"1000281" -> "1000378"  [label="DDG: dstPtr"];
"1000378" -> "1000402"  [label="DDG: secure"];
"1000378" -> "1000423"  [label="DDG: subSamples"];
"1000376" -> "1000375"  [label="AST: "];
"1000377" -> "1000376"  [label="AST: "];
"1000394" -> "1000376"  [label="CFG: "];
"1000376" -> "1000471"  [label="DDG: decrypt(\n                    secure,\n                    key,\n                    iv,\n                    mode,\n                    sharedBuffer, offset,\n                    subSamples, numSubSamples,\n                    secure ? secureBufferId : dstPtr,\n &errorDetailMsg)"];
"1000376" -> "1000393"  [label="DDG: result"];
"1000393" -> "1000209"  [label="AST: "];
"1000393" -> "1000394"  [label="CFG: "];
"1000394" -> "1000393"  [label="AST: "];
"1000397" -> "1000393"  [label="CFG: "];
"1000393" -> "1000471"  [label="DDG: reply->writeInt32(result)"];
"1000370" -> "1000393"  [label="DDG: result"];
"1000358" -> "1000393"  [label="DDG: result"];
"1000393" -> "1000396"  [label="DDG: result"];
"1000396" -> "1000395"  [label="AST: "];
"1000396" -> "1000397"  [label="CFG: "];
"1000397" -> "1000396"  [label="AST: "];
"1000400" -> "1000396"  [label="CFG: "];
"1000403" -> "1000396"  [label="CFG: "];
"1000396" -> "1000471"  [label="DDG: isCryptoError(result)"];
"1000396" -> "1000471"  [label="DDG: result"];
"1000396" -> "1000406"  [label="DDG: result"];
"1000406" -> "1000405"  [label="AST: "];
"1000406" -> "1000408"  [label="CFG: "];
"1000407" -> "1000406"  [label="AST: "];
"1000408" -> "1000406"  [label="AST: "];
"1000411" -> "1000406"  [label="CFG: "];
"1000419" -> "1000406"  [label="CFG: "];
"1000406" -> "1000471"  [label="DDG: result"];
"1000406" -> "1000471"  [label="DDG: result >= 0"];
"1000406" -> "1000410"  [label="DDG: result"];
"1000410" -> "1000409"  [label="AST: "];
"1000410" -> "1000412"  [label="CFG: "];
"1000411" -> "1000410"  [label="AST: "];
"1000412" -> "1000410"  [label="AST: "];
"1000416" -> "1000410"  [label="CFG: "];
"1000410" -> "1000471"  [label="DDG: static_cast<ssize_t>(totalSize)"];
"1000410" -> "1000471"  [label="DDG: CHECK_LE(result, static_cast<ssize_t>(totalSize))"];
"1000412" -> "1000410"  [label="DDG: totalSize"];
"1000410" -> "1000415"  [label="DDG: result"];
"1000415" -> "1000409"  [label="AST: "];
"1000415" -> "1000417"  [label="CFG: "];
"1000416" -> "1000415"  [label="AST: "];
"1000417" -> "1000415"  [label="AST: "];
"1000419" -> "1000415"  [label="CFG: "];
"1000415" -> "1000471"  [label="DDG: reply->write(dstPtr, result)"];
"1000415" -> "1000471"  [label="DDG: result"];
"1000281" -> "1000415"  [label="DDG: dstPtr"];
"1000415" -> "1000418"  [label="DDG: dstPtr"];
"1000418" -> "1000404"  [label="AST: "];
"1000418" -> "1000419"  [label="CFG: "];
"1000419" -> "1000418"  [label="AST: "];
"1000421" -> "1000418"  [label="CFG: "];
"1000281" -> "1000418"  [label="DDG: dstPtr"];
"1000402" -> "1000401"  [label="AST: "];
"1000402" -> "1000403"  [label="CFG: "];
"1000403" -> "1000402"  [label="AST: "];
"1000407" -> "1000402"  [label="CFG: "];
"1000424" -> "1000402"  [label="CFG: "];
"1000402" -> "1000471"  [label="DDG: !secure"];
"1000402" -> "1000471"  [label="DDG: secure"];
"1000215" -> "1000402"  [label="DDG: secure"];
"1000423" -> "1000209"  [label="AST: "];
"1000423" -> "1000424"  [label="CFG: "];
"1000424" -> "1000423"  [label="AST: "];
"1000426" -> "1000423"  [label="CFG: "];
"1000423" -> "1000471"  [label="DDG: delete[] subSamples"];
"1000261" -> "1000423"  [label="DDG: subSamples"];
}
