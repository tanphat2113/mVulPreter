digraph "0_exempi_aabedb5e749dd59112a3fe1e8e08f2d934f56666@array" {
"1000283" [label="(Call,PutLE32(&this->data[0], flags))"];
"1000266" [label="(Call,GetLE32(&this->data[0]))"];
"1000273" [label="(Call,flags ^= (-hasXMP ^ flags) & (1 << XMP_FLAG_BIT))"];
"1000276" [label="(Call,-hasXMP ^ flags)"];
"1000277" [label="(Call,-hasXMP)"];
"1000264" [label="(Call,flags = GetLE32(&this->data[0]))"];
"1000275" [label="(Call,(-hasXMP ^ flags) & (1 << XMP_FLAG_BIT))"];
"1000280" [label="(Call,1 << XMP_FLAG_BIT)"];
"1000281" [label="(Literal,1)"];
"1000273" [label="(Call,flags ^= (-hasXMP ^ flags) & (1 << XMP_FLAG_BIT))"];
"1000275" [label="(Call,(-hasXMP ^ flags) & (1 << XMP_FLAG_BIT))"];
"1000276" [label="(Call,-hasXMP ^ flags)"];
"1000280" [label="(Call,1 << XMP_FLAG_BIT)"];
"1000274" [label="(Identifier,flags)"];
"1000284" [label="(Call,&this->data[0])"];
"1000266" [label="(Call,GetLE32(&this->data[0]))"];
"1000262" [label="(Block,)"];
"1000279" [label="(Identifier,flags)"];
"1000294" [label="(Identifier,this)"];
"1000283" [label="(Call,PutLE32(&this->data[0], flags))"];
"1000545" [label="(MethodReturn,RET)"];
"1000287" [label="(Identifier,this)"];
"1000278" [label="(Identifier,hasXMP)"];
"1000264" [label="(Call,flags = GetLE32(&this->data[0]))"];
"1000267" [label="(Call,&this->data[0])"];
"1000265" [label="(Identifier,flags)"];
"1000282" [label="(Identifier,XMP_FLAG_BIT)"];
"1000277" [label="(Call,-hasXMP)"];
"1000290" [label="(Identifier,flags)"];
"1000283" -> "1000262"  [label="AST: "];
"1000283" -> "1000290"  [label="CFG: "];
"1000284" -> "1000283"  [label="AST: "];
"1000290" -> "1000283"  [label="AST: "];
"1000294" -> "1000283"  [label="CFG: "];
"1000283" -> "1000545"  [label="DDG: &this->data[0]"];
"1000283" -> "1000545"  [label="DDG: flags"];
"1000283" -> "1000545"  [label="DDG: PutLE32(&this->data[0], flags)"];
"1000266" -> "1000283"  [label="DDG: &this->data[0]"];
"1000273" -> "1000283"  [label="DDG: flags"];
"1000266" -> "1000264"  [label="AST: "];
"1000266" -> "1000267"  [label="CFG: "];
"1000267" -> "1000266"  [label="AST: "];
"1000264" -> "1000266"  [label="CFG: "];
"1000266" -> "1000264"  [label="DDG: &this->data[0]"];
"1000273" -> "1000262"  [label="AST: "];
"1000273" -> "1000275"  [label="CFG: "];
"1000274" -> "1000273"  [label="AST: "];
"1000275" -> "1000273"  [label="AST: "];
"1000287" -> "1000273"  [label="CFG: "];
"1000273" -> "1000545"  [label="DDG: (-hasXMP ^ flags) & (1 << XMP_FLAG_BIT)"];
"1000273" -> "1000545"  [label="DDG: flags ^= (-hasXMP ^ flags) & (1 << XMP_FLAG_BIT)"];
"1000276" -> "1000273"  [label="DDG: flags"];
"1000275" -> "1000273"  [label="DDG: -hasXMP ^ flags"];
"1000275" -> "1000273"  [label="DDG: 1 << XMP_FLAG_BIT"];
"1000276" -> "1000275"  [label="AST: "];
"1000276" -> "1000279"  [label="CFG: "];
"1000277" -> "1000276"  [label="AST: "];
"1000279" -> "1000276"  [label="AST: "];
"1000281" -> "1000276"  [label="CFG: "];
"1000276" -> "1000545"  [label="DDG: -hasXMP"];
"1000276" -> "1000275"  [label="DDG: -hasXMP"];
"1000276" -> "1000275"  [label="DDG: flags"];
"1000277" -> "1000276"  [label="DDG: hasXMP"];
"1000264" -> "1000276"  [label="DDG: flags"];
"1000277" -> "1000278"  [label="CFG: "];
"1000278" -> "1000277"  [label="AST: "];
"1000279" -> "1000277"  [label="CFG: "];
"1000277" -> "1000545"  [label="DDG: hasXMP"];
"1000264" -> "1000262"  [label="AST: "];
"1000265" -> "1000264"  [label="AST: "];
"1000274" -> "1000264"  [label="CFG: "];
"1000264" -> "1000545"  [label="DDG: GetLE32(&this->data[0])"];
"1000275" -> "1000280"  [label="CFG: "];
"1000280" -> "1000275"  [label="AST: "];
"1000275" -> "1000545"  [label="DDG: 1 << XMP_FLAG_BIT"];
"1000275" -> "1000545"  [label="DDG: -hasXMP ^ flags"];
"1000280" -> "1000275"  [label="DDG: 1"];
"1000280" -> "1000275"  [label="DDG: XMP_FLAG_BIT"];
"1000280" -> "1000282"  [label="CFG: "];
"1000281" -> "1000280"  [label="AST: "];
"1000282" -> "1000280"  [label="AST: "];
"1000280" -> "1000545"  [label="DDG: XMP_FLAG_BIT"];
}
