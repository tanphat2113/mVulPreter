digraph "0_FFmpeg_b05cd1ea7e45a836f7f6071a716c38bb30326e0f@API" {
"1000865" [label="(Call,read_quant_tables(c, f->quant_table))"];
"1000113" [label="(Call,c = &f->slice_context[0]->c)"];
"1000255" [label="(Call,get_rac(c, state))"];
"1000249" [label="(Call,get_symbol(c, state, 0))"];
"1000243" [label="(Call,get_symbol(c, state, 0))"];
"1000238" [label="(Call,get_rac(c, state))"];
"1000215" [label="(Call,get_symbol(c, state, 0))"];
"1000177" [label="(Call,get_symbol(c, state, 0))"];
"1000144" [label="(Call,get_symbol(c, state, 0))"];
"1000123" [label="(Call,memset(state, 128, sizeof(state)))"];
"1000204" [label="(Call,get_symbol(c, state, 1))"];
"1000227" [label="(Call,get_symbol(c, state, 0))"];
"1000863" [label="(Call,context_count = read_quant_tables(c, f->quant_table))"];
"1000871" [label="(Call,context_count < 0)"];
"1001295" [label="(Call,context_count >= 0)"];
"1001294" [label="(Call,av_assert0(context_count >= 0))"];
"1001299" [label="(Call,p->context_count < context_count)"];
"1001315" [label="(Call,p->context_count = context_count)"];
"1001043" [label="(Call,get_symbol(c, state, 0))"];
"1001042" [label="(Call,get_symbol(c, state, 0)      * f->width)"];
"1001038" [label="(Call,fs->slice_x      =  get_symbol(c, state, 0)      * f->width)"];
"1001062" [label="(Call,fs->slice_width  = (get_symbol(c, state, 0) + 1) * f->width  + fs->slice_x)"];
"1001117" [label="(Call,fs->slice_width  / f->num_h_slices)"];
"1001098" [label="(Call,fs->slice_x     /= f->num_h_slices)"];
"1001116" [label="(Call,fs->slice_width  / f->num_h_slices - fs->slice_x)"];
"1001112" [label="(Call,fs->slice_width  = fs->slice_width  / f->num_h_slices - fs->slice_x)"];
"1001145" [label="(Call,(unsigned)fs->slice_width)"];
"1001144" [label="(Call,(unsigned)fs->slice_width  > f->width)"];
"1001143" [label="(Call,(unsigned)fs->slice_width  > f->width ||\n                (unsigned)fs->slice_height > f->height)"];
"1001166" [label="(Call,(unsigned)fs->slice_x + (uint64_t)fs->slice_width  > f->width)"];
"1001165" [label="(Call,(unsigned)fs->slice_x + (uint64_t)fs->slice_width  > f->width\n                || (unsigned)fs->slice_y + (uint64_t)fs->slice_height > f->height)"];
"1001173" [label="(Call,(uint64_t)fs->slice_width)"];
"1001167" [label="(Call,(unsigned)fs->slice_x + (uint64_t)fs->slice_width)"];
"1001168" [label="(Call,(unsigned)fs->slice_x)"];
"1001066" [label="(Call,(get_symbol(c, state, 0) + 1) * f->width  + fs->slice_x)"];
"1001067" [label="(Call,(get_symbol(c, state, 0) + 1) * f->width)"];
"1001055" [label="(Call,get_symbol(c, state, 0))"];
"1001054" [label="(Call,get_symbol(c, state, 0)      * f->height)"];
"1001050" [label="(Call,fs->slice_y      =  get_symbol(c, state, 0)      * f->height)"];
"1001080" [label="(Call,fs->slice_height = (get_symbol(c, state, 0) + 1) * f->height + fs->slice_y)"];
"1001132" [label="(Call,fs->slice_height / f->num_v_slices)"];
"1001105" [label="(Call,fs->slice_y     /= f->num_v_slices)"];
"1001131" [label="(Call,fs->slice_height / f->num_v_slices - fs->slice_y)"];
"1001127" [label="(Call,fs->slice_height = fs->slice_height / f->num_v_slices - fs->slice_y)"];
"1001154" [label="(Call,(unsigned)fs->slice_height)"];
"1001153" [label="(Call,(unsigned)fs->slice_height > f->height)"];
"1001181" [label="(Call,(unsigned)fs->slice_y + (uint64_t)fs->slice_height > f->height)"];
"1001188" [label="(Call,(uint64_t)fs->slice_height)"];
"1001182" [label="(Call,(unsigned)fs->slice_y + (uint64_t)fs->slice_height)"];
"1001183" [label="(Call,(unsigned)fs->slice_y)"];
"1001084" [label="(Call,(get_symbol(c, state, 0) + 1) * f->height + fs->slice_y)"];
"1001085" [label="(Call,(get_symbol(c, state, 0) + 1) * f->height)"];
"1001069" [label="(Call,get_symbol(c, state, 0))"];
"1001068" [label="(Call,get_symbol(c, state, 0) + 1)"];
"1001087" [label="(Call,get_symbol(c, state, 0))"];
"1001086" [label="(Call,get_symbol(c, state, 0) + 1)"];
"1001228" [label="(Call,get_symbol(c, state, 0))"];
"1001226" [label="(Call,idx = get_symbol(c, state, 0))"];
"1001233" [label="(Call,idx > (unsigned)f->quant_table_count)"];
"1001249" [label="(Call,p->quant_table_index = idx)"];
"1001276" [label="(Call,memcpy(p->quant_table, f->quant_table, sizeof(p->quant_table)))"];
"1000249" [label="(Call,get_symbol(c, state, 0))"];
"1000109" [label="(Call,context_count = -1)"];
"1001159" [label="(Call,f->height)"];
"1001102" [label="(Call,f->num_h_slices)"];
"1000864" [label="(Identifier,context_count)"];
"1001233" [label="(Call,idx > (unsigned)f->quant_table_count)"];
"1001057" [label="(Identifier,state)"];
"1000243" [label="(Call,get_symbol(c, state, 0))"];
"1001095" [label="(Call,fs->slice_y)"];
"1000114" [label="(Identifier,c)"];
"1000197" [label="(Call,f->state_transition[i] = get_symbol(c, state, 1) + c->one_state[i])"];
"1001124" [label="(Call,fs->slice_x)"];
"1001228" [label="(Call,get_symbol(c, state, 0))"];
"1001142" [label="(ControlStructure,if ((unsigned)fs->slice_width  > f->width ||\n                (unsigned)fs->slice_height > f->height))"];
"1001185" [label="(Call,fs->slice_y)"];
"1001290" [label="(Identifier,f)"];
"1001125" [label="(Identifier,fs)"];
"1000180" [label="(Literal,0)"];
"1001308" [label="(Identifier,p)"];
"1001181" [label="(Call,(unsigned)fs->slice_y + (uint64_t)fs->slice_height > f->height)"];
"1000873" [label="(Literal,0)"];
"1001227" [label="(Identifier,idx)"];
"1001073" [label="(Literal,1)"];
"1001048" [label="(Identifier,f)"];
"1000207" [label="(Literal,1)"];
"1000230" [label="(Literal,0)"];
"1001129" [label="(Identifier,fs)"];
"1001170" [label="(Call,fs->slice_x)"];
"1001089" [label="(Identifier,state)"];
"1000131" [label="(Identifier,f)"];
"1001113" [label="(Call,fs->slice_width)"];
"1001280" [label="(Call,f->quant_table)"];
"1001054" [label="(Call,get_symbol(c, state, 0)      * f->height)"];
"1001091" [label="(Literal,1)"];
"1001319" [label="(Identifier,context_count)"];
"1000895" [label="(Call,get_symbol(c, state, 0))"];
"1001082" [label="(Identifier,fs)"];
"1001164" [label="(ControlStructure,if (   (unsigned)fs->slice_x + (uint64_t)fs->slice_width  > f->width\n                || (unsigned)fs->slice_y + (uint64_t)fs->slice_height > f->height))"];
"1001051" [label="(Call,fs->slice_y)"];
"1001046" [label="(Literal,0)"];
"1001072" [label="(Literal,0)"];
"1000218" [label="(Literal,0)"];
"1001276" [label="(Call,memcpy(p->quant_table, f->quant_table, sizeof(p->quant_table)))"];
"1001107" [label="(Identifier,fs)"];
"1001131" [label="(Call,fs->slice_height / f->num_v_slices - fs->slice_y)"];
"1001253" [label="(Identifier,idx)"];
"1001293" [label="(Block,)"];
"1001043" [label="(Call,get_symbol(c, state, 0))"];
"1001235" [label="(Call,(unsigned)f->quant_table_count)"];
"1001200" [label="(Identifier,i)"];
"1000871" [label="(Call,context_count < 0)"];
"1001179" [label="(Identifier,f)"];
"1001188" [label="(Call,(uint64_t)fs->slice_height)"];
"1000104" [label="(Block,)"];
"1001056" [label="(Identifier,c)"];
"1001093" [label="(Identifier,f)"];
"1001047" [label="(Call,f->width)"];
"1001038" [label="(Call,fs->slice_x      =  get_symbol(c, state, 0)      * f->width)"];
"1001243" [label="(Identifier,f)"];
"1001039" [label="(Call,fs->slice_x)"];
"1000206" [label="(Identifier,state)"];
"1001317" [label="(Identifier,p)"];
"1001118" [label="(Call,fs->slice_width)"];
"1000125" [label="(Literal,128)"];
"1001175" [label="(Call,fs->slice_width)"];
"1000204" [label="(Call,get_symbol(c, state, 1))"];
"1001077" [label="(Call,fs->slice_x)"];
"1001165" [label="(Call,(unsigned)fs->slice_x + (uint64_t)fs->slice_width  > f->width\n                || (unsigned)fs->slice_y + (uint64_t)fs->slice_height > f->height)"];
"1000179" [label="(Identifier,state)"];
"1001080" [label="(Call,fs->slice_height = (get_symbol(c, state, 0) + 1) * f->height + fs->slice_y)"];
"1000144" [label="(Call,get_symbol(c, state, 0))"];
"1001067" [label="(Call,(get_symbol(c, state, 0) + 1) * f->width)"];
"1000205" [label="(Identifier,c)"];
"1001062" [label="(Call,fs->slice_width  = (get_symbol(c, state, 0) + 1) * f->width  + fs->slice_x)"];
"1001296" [label="(Identifier,context_count)"];
"1000253" [label="(Call,transparency   = get_rac(c, state))"];
"1000256" [label="(Identifier,c)"];
"1000236" [label="(Call,chroma_planes  = get_rac(c, state))"];
"1000178" [label="(Identifier,c)"];
"1001163" [label="(Identifier,AVERROR_INVALIDDATA)"];
"1001106" [label="(Call,fs->slice_y)"];
"1000255" [label="(Call,get_rac(c, state))"];
"1001173" [label="(Call,(uint64_t)fs->slice_width)"];
"1001069" [label="(Call,get_symbol(c, state, 0))"];
"1001100" [label="(Identifier,fs)"];
"1000147" [label="(Literal,0)"];
"1000227" [label="(Call,get_symbol(c, state, 0))"];
"1000216" [label="(Identifier,c)"];
"1001294" [label="(Call,av_assert0(context_count >= 0))"];
"1001232" [label="(ControlStructure,if (idx > (unsigned)f->quant_table_count))"];
"1000246" [label="(Literal,0)"];
"1001147" [label="(Call,fs->slice_width)"];
"1000238" [label="(Call,get_rac(c, state))"];
"1000217" [label="(Identifier,state)"];
"1000863" [label="(Call,context_count = read_quant_tables(c, f->quant_table))"];
"1001132" [label="(Call,fs->slice_height / f->num_v_slices)"];
"1001249" [label="(Call,p->quant_table_index = idx)"];
"1001303" [label="(Identifier,context_count)"];
"1001121" [label="(Call,f->num_h_slices)"];
"1001153" [label="(Call,(unsigned)fs->slice_height > f->height)"];
"1001044" [label="(Identifier,c)"];
"1000867" [label="(Call,f->quant_table)"];
"1001068" [label="(Call,get_symbol(c, state, 0) + 1)"];
"1001315" [label="(Call,p->context_count = context_count)"];
"1001166" [label="(Call,(unsigned)fs->slice_x + (uint64_t)fs->slice_width  > f->width)"];
"1000126" [label="(Call,sizeof(state))"];
"1001127" [label="(Call,fs->slice_height = fs->slice_height / f->num_v_slices - fs->slice_y)"];
"1001194" [label="(Identifier,f)"];
"1001297" [label="(Literal,0)"];
"1001299" [label="(Call,p->context_count < context_count)"];
"1001081" [label="(Call,fs->slice_height)"];
"1000142" [label="(Call,v= get_symbol(c, state, 0))"];
"1000244" [label="(Identifier,c)"];
"1001105" [label="(Call,fs->slice_y     /= f->num_v_slices)"];
"1001301" [label="(Identifier,p)"];
"1001116" [label="(Call,fs->slice_width  / f->num_h_slices - fs->slice_x)"];
"1001322" [label="(MethodReturn,static int)"];
"1001267" [label="(Call,context_count = f->context_count[idx])"];
"1000221" [label="(Call,f->version > 0 ? get_symbol(c, state, 0) : f->avctx->bits_per_raw_sample)"];
"1001088" [label="(Identifier,c)"];
"1001071" [label="(Identifier,state)"];
"1000115" [label="(Call,&f->slice_context[0]->c)"];
"1000877" [label="(Identifier,f)"];
"1001066" [label="(Call,(get_symbol(c, state, 0) + 1) * f->width  + fs->slice_x)"];
"1001063" [label="(Call,fs->slice_width)"];
"1001139" [label="(Call,fs->slice_y)"];
"1001128" [label="(Call,fs->slice_height)"];
"1001086" [label="(Call,get_symbol(c, state, 0) + 1)"];
"1000240" [label="(Identifier,state)"];
"1001178" [label="(Call,f->width)"];
"1000113" [label="(Call,c = &f->slice_context[0]->c)"];
"1001136" [label="(Call,f->num_v_slices)"];
"1001300" [label="(Call,p->context_count)"];
"1001256" [label="(Identifier,p)"];
"1001145" [label="(Call,(unsigned)fs->slice_width)"];
"1001092" [label="(Call,f->height)"];
"1000257" [label="(Identifier,state)"];
"1000970" [label="(Identifier,f)"];
"1001109" [label="(Call,f->num_v_slices)"];
"1000241" [label="(Call,chroma_h_shift = get_symbol(c, state, 0))"];
"1001075" [label="(Identifier,f)"];
"1001050" [label="(Call,fs->slice_y      =  get_symbol(c, state, 0)      * f->height)"];
"1001275" [label="(Block,)"];
"1001060" [label="(Identifier,f)"];
"1000239" [label="(Identifier,c)"];
"1000210" [label="(Identifier,c)"];
"1000872" [label="(Identifier,context_count)"];
"1001160" [label="(Identifier,f)"];
"1001183" [label="(Call,(unsigned)fs->slice_y)"];
"1001226" [label="(Call,idx = get_symbol(c, state, 0))"];
"1000866" [label="(Identifier,c)"];
"1000862" [label="(Block,)"];
"1000203" [label="(Call,get_symbol(c, state, 1) + c->one_state[i])"];
"1000252" [label="(Literal,0)"];
"1000177" [label="(Call,get_symbol(c, state, 0))"];
"1001224" [label="(Block,)"];
"1001277" [label="(Call,p->quant_table)"];
"1000171" [label="(Call,f->avctx->coder_type = get_symbol(c, state, 0))"];
"1001064" [label="(Identifier,fs)"];
"1001099" [label="(Call,fs->slice_x)"];
"1000146" [label="(Identifier,state)"];
"1001133" [label="(Call,fs->slice_height)"];
"1001098" [label="(Call,fs->slice_x     /= f->num_h_slices)"];
"1001037" [label="(Block,)"];
"1001074" [label="(Call,f->width)"];
"1001078" [label="(Identifier,fs)"];
"1001144" [label="(Call,(unsigned)fs->slice_width  > f->width)"];
"1001096" [label="(Identifier,fs)"];
"1001140" [label="(Identifier,fs)"];
"1001229" [label="(Identifier,c)"];
"1001250" [label="(Call,p->quant_table_index)"];
"1000247" [label="(Call,chroma_v_shift = get_symbol(c, state, 0))"];
"1001154" [label="(Call,(unsigned)fs->slice_height)"];
"1001112" [label="(Call,fs->slice_width  = fs->slice_width  / f->num_h_slices - fs->slice_x)"];
"1001114" [label="(Identifier,fs)"];
"1000219" [label="(Call,bits_per_raw_sample = f->version > 0 ? get_symbol(c, state, 0) : f->avctx->bits_per_raw_sample)"];
"1001251" [label="(Identifier,p)"];
"1000145" [label="(Identifier,c)"];
"1001052" [label="(Identifier,fs)"];
"1001059" [label="(Call,f->height)"];
"1001197" [label="(Identifier,AVERROR_INVALIDDATA)"];
"1001087" [label="(Call,get_symbol(c, state, 0))"];
"1001167" [label="(Call,(unsigned)fs->slice_x + (uint64_t)fs->slice_width)"];
"1001156" [label="(Call,fs->slice_height)"];
"1000251" [label="(Identifier,state)"];
"1000167" [label="(Call,f->ac      = f->avctx->coder_type = get_symbol(c, state, 0))"];
"1001045" [label="(Identifier,state)"];
"1001150" [label="(Call,f->width)"];
"1001117" [label="(Call,fs->slice_width  / f->num_h_slices)"];
"1001084" [label="(Call,(get_symbol(c, state, 0) + 1) * f->height + fs->slice_y)"];
"1001090" [label="(Literal,0)"];
"1001230" [label="(Identifier,state)"];
"1001042" [label="(Call,get_symbol(c, state, 0)      * f->width)"];
"1001231" [label="(Literal,0)"];
"1000124" [label="(Identifier,state)"];
"1000213" [label="(Call,colorspace     = get_symbol(c, state, 0))"];
"1001298" [label="(ControlStructure,if (p->context_count < context_count))"];
"1000865" [label="(Call,read_quant_tables(c, f->quant_table))"];
"1000123" [label="(Call,memset(state, 128, sizeof(state)))"];
"1001055" [label="(Call,get_symbol(c, state, 0))"];
"1001168" [label="(Call,(unsigned)fs->slice_x)"];
"1001143" [label="(Call,(unsigned)fs->slice_width  > f->width ||\n                (unsigned)fs->slice_height > f->height)"];
"1001070" [label="(Identifier,c)"];
"1001190" [label="(Call,fs->slice_height)"];
"1001151" [label="(Identifier,f)"];
"1000228" [label="(Identifier,c)"];
"1001208" [label="(Identifier,i)"];
"1001316" [label="(Call,p->context_count)"];
"1000245" [label="(Identifier,state)"];
"1001058" [label="(Literal,0)"];
"1000250" [label="(Identifier,c)"];
"1001295" [label="(Call,context_count >= 0)"];
"1001234" [label="(Identifier,idx)"];
"1001182" [label="(Call,(unsigned)fs->slice_y + (uint64_t)fs->slice_height)"];
"1001193" [label="(Call,f->height)"];
"1001283" [label="(Call,sizeof(p->quant_table))"];
"1000215" [label="(Call,get_symbol(c, state, 0))"];
"1000870" [label="(ControlStructure,if (context_count < 0))"];
"1000229" [label="(Identifier,state)"];
"1001085" [label="(Call,(get_symbol(c, state, 0) + 1) * f->height)"];
"1000865" -> "1000863"  [label="AST: "];
"1000865" -> "1000867"  [label="CFG: "];
"1000866" -> "1000865"  [label="AST: "];
"1000867" -> "1000865"  [label="AST: "];
"1000863" -> "1000865"  [label="CFG: "];
"1000865" -> "1001322"  [label="DDG: c"];
"1000865" -> "1001322"  [label="DDG: f->quant_table"];
"1000865" -> "1000863"  [label="DDG: c"];
"1000865" -> "1000863"  [label="DDG: f->quant_table"];
"1000113" -> "1000865"  [label="DDG: c"];
"1000255" -> "1000865"  [label="DDG: c"];
"1000865" -> "1001043"  [label="DDG: c"];
"1000865" -> "1001228"  [label="DDG: c"];
"1000865" -> "1001276"  [label="DDG: f->quant_table"];
"1000113" -> "1000104"  [label="AST: "];
"1000113" -> "1000115"  [label="CFG: "];
"1000114" -> "1000113"  [label="AST: "];
"1000115" -> "1000113"  [label="AST: "];
"1000124" -> "1000113"  [label="CFG: "];
"1000113" -> "1001322"  [label="DDG: c"];
"1000113" -> "1001322"  [label="DDG: &f->slice_context[0]->c"];
"1000113" -> "1000144"  [label="DDG: c"];
"1000113" -> "1000895"  [label="DDG: c"];
"1000113" -> "1001043"  [label="DDG: c"];
"1000113" -> "1001228"  [label="DDG: c"];
"1000255" -> "1000253"  [label="AST: "];
"1000255" -> "1000257"  [label="CFG: "];
"1000256" -> "1000255"  [label="AST: "];
"1000257" -> "1000255"  [label="AST: "];
"1000253" -> "1000255"  [label="CFG: "];
"1000255" -> "1001322"  [label="DDG: state"];
"1000255" -> "1001322"  [label="DDG: c"];
"1000255" -> "1000253"  [label="DDG: c"];
"1000255" -> "1000253"  [label="DDG: state"];
"1000249" -> "1000255"  [label="DDG: c"];
"1000249" -> "1000255"  [label="DDG: state"];
"1000255" -> "1000895"  [label="DDG: c"];
"1000255" -> "1000895"  [label="DDG: state"];
"1000255" -> "1001043"  [label="DDG: c"];
"1000255" -> "1001043"  [label="DDG: state"];
"1000255" -> "1001228"  [label="DDG: c"];
"1000255" -> "1001228"  [label="DDG: state"];
"1000249" -> "1000247"  [label="AST: "];
"1000249" -> "1000252"  [label="CFG: "];
"1000250" -> "1000249"  [label="AST: "];
"1000251" -> "1000249"  [label="AST: "];
"1000252" -> "1000249"  [label="AST: "];
"1000247" -> "1000249"  [label="CFG: "];
"1000249" -> "1000247"  [label="DDG: c"];
"1000249" -> "1000247"  [label="DDG: state"];
"1000249" -> "1000247"  [label="DDG: 0"];
"1000243" -> "1000249"  [label="DDG: c"];
"1000243" -> "1000249"  [label="DDG: state"];
"1000243" -> "1000241"  [label="AST: "];
"1000243" -> "1000246"  [label="CFG: "];
"1000244" -> "1000243"  [label="AST: "];
"1000245" -> "1000243"  [label="AST: "];
"1000246" -> "1000243"  [label="AST: "];
"1000241" -> "1000243"  [label="CFG: "];
"1000243" -> "1000241"  [label="DDG: c"];
"1000243" -> "1000241"  [label="DDG: state"];
"1000243" -> "1000241"  [label="DDG: 0"];
"1000238" -> "1000243"  [label="DDG: c"];
"1000238" -> "1000243"  [label="DDG: state"];
"1000238" -> "1000236"  [label="AST: "];
"1000238" -> "1000240"  [label="CFG: "];
"1000239" -> "1000238"  [label="AST: "];
"1000240" -> "1000238"  [label="AST: "];
"1000236" -> "1000238"  [label="CFG: "];
"1000238" -> "1000236"  [label="DDG: c"];
"1000238" -> "1000236"  [label="DDG: state"];
"1000215" -> "1000238"  [label="DDG: c"];
"1000215" -> "1000238"  [label="DDG: state"];
"1000227" -> "1000238"  [label="DDG: c"];
"1000227" -> "1000238"  [label="DDG: state"];
"1000215" -> "1000213"  [label="AST: "];
"1000215" -> "1000218"  [label="CFG: "];
"1000216" -> "1000215"  [label="AST: "];
"1000217" -> "1000215"  [label="AST: "];
"1000218" -> "1000215"  [label="AST: "];
"1000213" -> "1000215"  [label="CFG: "];
"1000215" -> "1000213"  [label="DDG: c"];
"1000215" -> "1000213"  [label="DDG: state"];
"1000215" -> "1000213"  [label="DDG: 0"];
"1000177" -> "1000215"  [label="DDG: c"];
"1000177" -> "1000215"  [label="DDG: state"];
"1000204" -> "1000215"  [label="DDG: c"];
"1000204" -> "1000215"  [label="DDG: state"];
"1000215" -> "1000219"  [label="DDG: c"];
"1000215" -> "1000219"  [label="DDG: state"];
"1000215" -> "1000219"  [label="DDG: 0"];
"1000215" -> "1000221"  [label="DDG: c"];
"1000215" -> "1000221"  [label="DDG: state"];
"1000215" -> "1000221"  [label="DDG: 0"];
"1000215" -> "1000227"  [label="DDG: c"];
"1000215" -> "1000227"  [label="DDG: state"];
"1000177" -> "1000171"  [label="AST: "];
"1000177" -> "1000180"  [label="CFG: "];
"1000178" -> "1000177"  [label="AST: "];
"1000179" -> "1000177"  [label="AST: "];
"1000180" -> "1000177"  [label="AST: "];
"1000171" -> "1000177"  [label="CFG: "];
"1000177" -> "1000167"  [label="DDG: c"];
"1000177" -> "1000167"  [label="DDG: state"];
"1000177" -> "1000167"  [label="DDG: 0"];
"1000177" -> "1000171"  [label="DDG: c"];
"1000177" -> "1000171"  [label="DDG: state"];
"1000177" -> "1000171"  [label="DDG: 0"];
"1000144" -> "1000177"  [label="DDG: c"];
"1000144" -> "1000177"  [label="DDG: state"];
"1000177" -> "1000204"  [label="DDG: c"];
"1000177" -> "1000204"  [label="DDG: state"];
"1000144" -> "1000142"  [label="AST: "];
"1000144" -> "1000147"  [label="CFG: "];
"1000145" -> "1000144"  [label="AST: "];
"1000146" -> "1000144"  [label="AST: "];
"1000147" -> "1000144"  [label="AST: "];
"1000142" -> "1000144"  [label="CFG: "];
"1000144" -> "1001322"  [label="DDG: c"];
"1000144" -> "1001322"  [label="DDG: state"];
"1000144" -> "1000142"  [label="DDG: c"];
"1000144" -> "1000142"  [label="DDG: state"];
"1000144" -> "1000142"  [label="DDG: 0"];
"1000123" -> "1000144"  [label="DDG: state"];
"1000123" -> "1000104"  [label="AST: "];
"1000123" -> "1000126"  [label="CFG: "];
"1000124" -> "1000123"  [label="AST: "];
"1000125" -> "1000123"  [label="AST: "];
"1000126" -> "1000123"  [label="AST: "];
"1000131" -> "1000123"  [label="CFG: "];
"1000123" -> "1001322"  [label="DDG: memset(state, 128, sizeof(state))"];
"1000123" -> "1001322"  [label="DDG: state"];
"1000123" -> "1000895"  [label="DDG: state"];
"1000123" -> "1001043"  [label="DDG: state"];
"1000123" -> "1001228"  [label="DDG: state"];
"1000204" -> "1000203"  [label="AST: "];
"1000204" -> "1000207"  [label="CFG: "];
"1000205" -> "1000204"  [label="AST: "];
"1000206" -> "1000204"  [label="AST: "];
"1000207" -> "1000204"  [label="AST: "];
"1000210" -> "1000204"  [label="CFG: "];
"1000204" -> "1000197"  [label="DDG: c"];
"1000204" -> "1000197"  [label="DDG: state"];
"1000204" -> "1000197"  [label="DDG: 1"];
"1000204" -> "1000203"  [label="DDG: c"];
"1000204" -> "1000203"  [label="DDG: state"];
"1000204" -> "1000203"  [label="DDG: 1"];
"1000227" -> "1000221"  [label="AST: "];
"1000227" -> "1000230"  [label="CFG: "];
"1000228" -> "1000227"  [label="AST: "];
"1000229" -> "1000227"  [label="AST: "];
"1000230" -> "1000227"  [label="AST: "];
"1000221" -> "1000227"  [label="CFG: "];
"1000227" -> "1000219"  [label="DDG: c"];
"1000227" -> "1000219"  [label="DDG: state"];
"1000227" -> "1000219"  [label="DDG: 0"];
"1000227" -> "1000221"  [label="DDG: c"];
"1000227" -> "1000221"  [label="DDG: state"];
"1000227" -> "1000221"  [label="DDG: 0"];
"1000863" -> "1000862"  [label="AST: "];
"1000864" -> "1000863"  [label="AST: "];
"1000872" -> "1000863"  [label="CFG: "];
"1000863" -> "1001322"  [label="DDG: read_quant_tables(c, f->quant_table)"];
"1000863" -> "1000871"  [label="DDG: context_count"];
"1000871" -> "1000870"  [label="AST: "];
"1000871" -> "1000873"  [label="CFG: "];
"1000872" -> "1000871"  [label="AST: "];
"1000873" -> "1000871"  [label="AST: "];
"1000877" -> "1000871"  [label="CFG: "];
"1000970" -> "1000871"  [label="CFG: "];
"1000871" -> "1001322"  [label="DDG: context_count"];
"1000871" -> "1001322"  [label="DDG: context_count < 0"];
"1000871" -> "1001295"  [label="DDG: context_count"];
"1001295" -> "1001294"  [label="AST: "];
"1001295" -> "1001297"  [label="CFG: "];
"1001296" -> "1001295"  [label="AST: "];
"1001297" -> "1001295"  [label="AST: "];
"1001294" -> "1001295"  [label="CFG: "];
"1001295" -> "1001294"  [label="DDG: context_count"];
"1001295" -> "1001294"  [label="DDG: 0"];
"1001267" -> "1001295"  [label="DDG: context_count"];
"1000109" -> "1001295"  [label="DDG: context_count"];
"1001299" -> "1001295"  [label="DDG: context_count"];
"1001295" -> "1001299"  [label="DDG: context_count"];
"1001294" -> "1001293"  [label="AST: "];
"1001301" -> "1001294"  [label="CFG: "];
"1001294" -> "1001322"  [label="DDG: context_count >= 0"];
"1001294" -> "1001322"  [label="DDG: av_assert0(context_count >= 0)"];
"1001299" -> "1001298"  [label="AST: "];
"1001299" -> "1001303"  [label="CFG: "];
"1001300" -> "1001299"  [label="AST: "];
"1001303" -> "1001299"  [label="AST: "];
"1001308" -> "1001299"  [label="CFG: "];
"1001317" -> "1001299"  [label="CFG: "];
"1001299" -> "1001322"  [label="DDG: p->context_count < context_count"];
"1001315" -> "1001299"  [label="DDG: p->context_count"];
"1001299" -> "1001315"  [label="DDG: context_count"];
"1001315" -> "1001293"  [label="AST: "];
"1001315" -> "1001319"  [label="CFG: "];
"1001316" -> "1001315"  [label="AST: "];
"1001319" -> "1001315"  [label="AST: "];
"1001208" -> "1001315"  [label="CFG: "];
"1001315" -> "1001322"  [label="DDG: p->context_count"];
"1001315" -> "1001322"  [label="DDG: context_count"];
"1001043" -> "1001042"  [label="AST: "];
"1001043" -> "1001046"  [label="CFG: "];
"1001044" -> "1001043"  [label="AST: "];
"1001045" -> "1001043"  [label="AST: "];
"1001046" -> "1001043"  [label="AST: "];
"1001048" -> "1001043"  [label="CFG: "];
"1001043" -> "1001042"  [label="DDG: c"];
"1001043" -> "1001042"  [label="DDG: state"];
"1001043" -> "1001042"  [label="DDG: 0"];
"1001228" -> "1001043"  [label="DDG: c"];
"1001228" -> "1001043"  [label="DDG: state"];
"1000895" -> "1001043"  [label="DDG: c"];
"1000895" -> "1001043"  [label="DDG: state"];
"1001087" -> "1001043"  [label="DDG: c"];
"1001087" -> "1001043"  [label="DDG: state"];
"1001043" -> "1001055"  [label="DDG: c"];
"1001043" -> "1001055"  [label="DDG: state"];
"1001042" -> "1001038"  [label="AST: "];
"1001042" -> "1001047"  [label="CFG: "];
"1001047" -> "1001042"  [label="AST: "];
"1001038" -> "1001042"  [label="CFG: "];
"1001042" -> "1001038"  [label="DDG: get_symbol(c, state, 0)"];
"1001042" -> "1001038"  [label="DDG: f->width"];
"1001166" -> "1001042"  [label="DDG: f->width"];
"1001042" -> "1001067"  [label="DDG: f->width"];
"1001038" -> "1001037"  [label="AST: "];
"1001039" -> "1001038"  [label="AST: "];
"1001052" -> "1001038"  [label="CFG: "];
"1001038" -> "1001322"  [label="DDG: get_symbol(c, state, 0)      * f->width"];
"1001038" -> "1001062"  [label="DDG: fs->slice_x"];
"1001038" -> "1001066"  [label="DDG: fs->slice_x"];
"1001038" -> "1001098"  [label="DDG: fs->slice_x"];
"1001062" -> "1001037"  [label="AST: "];
"1001062" -> "1001066"  [label="CFG: "];
"1001063" -> "1001062"  [label="AST: "];
"1001066" -> "1001062"  [label="AST: "];
"1001082" -> "1001062"  [label="CFG: "];
"1001062" -> "1001322"  [label="DDG: (get_symbol(c, state, 0) + 1) * f->width  + fs->slice_x"];
"1001067" -> "1001062"  [label="DDG: get_symbol(c, state, 0) + 1"];
"1001067" -> "1001062"  [label="DDG: f->width"];
"1001062" -> "1001117"  [label="DDG: fs->slice_width"];
"1001117" -> "1001116"  [label="AST: "];
"1001117" -> "1001121"  [label="CFG: "];
"1001118" -> "1001117"  [label="AST: "];
"1001121" -> "1001117"  [label="AST: "];
"1001125" -> "1001117"  [label="CFG: "];
"1001117" -> "1001322"  [label="DDG: f->num_h_slices"];
"1001117" -> "1001098"  [label="DDG: f->num_h_slices"];
"1001117" -> "1001116"  [label="DDG: fs->slice_width"];
"1001117" -> "1001116"  [label="DDG: f->num_h_slices"];
"1001098" -> "1001037"  [label="AST: "];
"1001098" -> "1001102"  [label="CFG: "];
"1001099" -> "1001098"  [label="AST: "];
"1001102" -> "1001098"  [label="AST: "];
"1001107" -> "1001098"  [label="CFG: "];
"1001098" -> "1001116"  [label="DDG: fs->slice_x"];
"1001116" -> "1001112"  [label="AST: "];
"1001116" -> "1001124"  [label="CFG: "];
"1001124" -> "1001116"  [label="AST: "];
"1001112" -> "1001116"  [label="CFG: "];
"1001116" -> "1001322"  [label="DDG: fs->slice_x"];
"1001116" -> "1001322"  [label="DDG: fs->slice_width  / f->num_h_slices"];
"1001116" -> "1001112"  [label="DDG: fs->slice_width  / f->num_h_slices"];
"1001116" -> "1001112"  [label="DDG: fs->slice_x"];
"1001116" -> "1001168"  [label="DDG: fs->slice_x"];
"1001112" -> "1001037"  [label="AST: "];
"1001113" -> "1001112"  [label="AST: "];
"1001129" -> "1001112"  [label="CFG: "];
"1001112" -> "1001322"  [label="DDG: fs->slice_width  / f->num_h_slices - fs->slice_x"];
"1001112" -> "1001145"  [label="DDG: fs->slice_width"];
"1001145" -> "1001144"  [label="AST: "];
"1001145" -> "1001147"  [label="CFG: "];
"1001146" -> "1001145"  [label="AST: "];
"1001147" -> "1001145"  [label="AST: "];
"1001151" -> "1001145"  [label="CFG: "];
"1001145" -> "1001322"  [label="DDG: fs->slice_width"];
"1001145" -> "1001144"  [label="DDG: fs->slice_width"];
"1001145" -> "1001173"  [label="DDG: fs->slice_width"];
"1001144" -> "1001143"  [label="AST: "];
"1001144" -> "1001150"  [label="CFG: "];
"1001150" -> "1001144"  [label="AST: "];
"1001155" -> "1001144"  [label="CFG: "];
"1001143" -> "1001144"  [label="CFG: "];
"1001144" -> "1001322"  [label="DDG: f->width"];
"1001144" -> "1001322"  [label="DDG: (unsigned)fs->slice_width"];
"1001144" -> "1001143"  [label="DDG: (unsigned)fs->slice_width"];
"1001144" -> "1001143"  [label="DDG: f->width"];
"1001067" -> "1001144"  [label="DDG: f->width"];
"1001144" -> "1001166"  [label="DDG: f->width"];
"1001143" -> "1001142"  [label="AST: "];
"1001143" -> "1001153"  [label="CFG: "];
"1001153" -> "1001143"  [label="AST: "];
"1001163" -> "1001143"  [label="CFG: "];
"1001169" -> "1001143"  [label="CFG: "];
"1001143" -> "1001322"  [label="DDG: (unsigned)fs->slice_height > f->height"];
"1001143" -> "1001322"  [label="DDG: (unsigned)fs->slice_width  > f->width"];
"1001143" -> "1001322"  [label="DDG: (unsigned)fs->slice_width  > f->width ||\n                (unsigned)fs->slice_height > f->height"];
"1001153" -> "1001143"  [label="DDG: (unsigned)fs->slice_height"];
"1001153" -> "1001143"  [label="DDG: f->height"];
"1001166" -> "1001165"  [label="AST: "];
"1001166" -> "1001178"  [label="CFG: "];
"1001167" -> "1001166"  [label="AST: "];
"1001178" -> "1001166"  [label="AST: "];
"1001184" -> "1001166"  [label="CFG: "];
"1001165" -> "1001166"  [label="CFG: "];
"1001166" -> "1001322"  [label="DDG: f->width"];
"1001166" -> "1001322"  [label="DDG: (unsigned)fs->slice_x + (uint64_t)fs->slice_width"];
"1001166" -> "1001165"  [label="DDG: (unsigned)fs->slice_x + (uint64_t)fs->slice_width"];
"1001166" -> "1001165"  [label="DDG: f->width"];
"1001168" -> "1001166"  [label="DDG: fs->slice_x"];
"1001173" -> "1001166"  [label="DDG: fs->slice_width"];
"1001165" -> "1001164"  [label="AST: "];
"1001165" -> "1001181"  [label="CFG: "];
"1001181" -> "1001165"  [label="AST: "];
"1001197" -> "1001165"  [label="CFG: "];
"1001200" -> "1001165"  [label="CFG: "];
"1001165" -> "1001322"  [label="DDG: (unsigned)fs->slice_x + (uint64_t)fs->slice_width  > f->width"];
"1001165" -> "1001322"  [label="DDG: (unsigned)fs->slice_x + (uint64_t)fs->slice_width  > f->width\n                || (unsigned)fs->slice_y + (uint64_t)fs->slice_height > f->height"];
"1001165" -> "1001322"  [label="DDG: (unsigned)fs->slice_y + (uint64_t)fs->slice_height > f->height"];
"1001181" -> "1001165"  [label="DDG: (unsigned)fs->slice_y + (uint64_t)fs->slice_height"];
"1001181" -> "1001165"  [label="DDG: f->height"];
"1001173" -> "1001167"  [label="AST: "];
"1001173" -> "1001175"  [label="CFG: "];
"1001174" -> "1001173"  [label="AST: "];
"1001175" -> "1001173"  [label="AST: "];
"1001167" -> "1001173"  [label="CFG: "];
"1001173" -> "1001322"  [label="DDG: fs->slice_width"];
"1001173" -> "1001167"  [label="DDG: fs->slice_width"];
"1001168" -> "1001167"  [label="AST: "];
"1001179" -> "1001167"  [label="CFG: "];
"1001167" -> "1001322"  [label="DDG: (uint64_t)fs->slice_width"];
"1001167" -> "1001322"  [label="DDG: (unsigned)fs->slice_x"];
"1001168" -> "1001167"  [label="DDG: fs->slice_x"];
"1001168" -> "1001170"  [label="CFG: "];
"1001169" -> "1001168"  [label="AST: "];
"1001170" -> "1001168"  [label="AST: "];
"1001174" -> "1001168"  [label="CFG: "];
"1001168" -> "1001322"  [label="DDG: fs->slice_x"];
"1001066" -> "1001077"  [label="CFG: "];
"1001067" -> "1001066"  [label="AST: "];
"1001077" -> "1001066"  [label="AST: "];
"1001066" -> "1001322"  [label="DDG: (get_symbol(c, state, 0) + 1) * f->width"];
"1001067" -> "1001066"  [label="DDG: get_symbol(c, state, 0) + 1"];
"1001067" -> "1001066"  [label="DDG: f->width"];
"1001067" -> "1001074"  [label="CFG: "];
"1001068" -> "1001067"  [label="AST: "];
"1001074" -> "1001067"  [label="AST: "];
"1001078" -> "1001067"  [label="CFG: "];
"1001069" -> "1001067"  [label="DDG: c"];
"1001069" -> "1001067"  [label="DDG: state"];
"1001069" -> "1001067"  [label="DDG: 0"];
"1001055" -> "1001054"  [label="AST: "];
"1001055" -> "1001058"  [label="CFG: "];
"1001056" -> "1001055"  [label="AST: "];
"1001057" -> "1001055"  [label="AST: "];
"1001058" -> "1001055"  [label="AST: "];
"1001060" -> "1001055"  [label="CFG: "];
"1001055" -> "1001054"  [label="DDG: c"];
"1001055" -> "1001054"  [label="DDG: state"];
"1001055" -> "1001054"  [label="DDG: 0"];
"1001055" -> "1001069"  [label="DDG: c"];
"1001055" -> "1001069"  [label="DDG: state"];
"1001054" -> "1001050"  [label="AST: "];
"1001054" -> "1001059"  [label="CFG: "];
"1001059" -> "1001054"  [label="AST: "];
"1001050" -> "1001054"  [label="CFG: "];
"1001054" -> "1001050"  [label="DDG: get_symbol(c, state, 0)"];
"1001054" -> "1001050"  [label="DDG: f->height"];
"1001153" -> "1001054"  [label="DDG: f->height"];
"1001085" -> "1001054"  [label="DDG: f->height"];
"1001181" -> "1001054"  [label="DDG: f->height"];
"1001054" -> "1001085"  [label="DDG: f->height"];
"1001050" -> "1001037"  [label="AST: "];
"1001051" -> "1001050"  [label="AST: "];
"1001064" -> "1001050"  [label="CFG: "];
"1001050" -> "1001322"  [label="DDG: get_symbol(c, state, 0)      * f->height"];
"1001050" -> "1001080"  [label="DDG: fs->slice_y"];
"1001050" -> "1001084"  [label="DDG: fs->slice_y"];
"1001050" -> "1001105"  [label="DDG: fs->slice_y"];
"1001080" -> "1001037"  [label="AST: "];
"1001080" -> "1001084"  [label="CFG: "];
"1001081" -> "1001080"  [label="AST: "];
"1001084" -> "1001080"  [label="AST: "];
"1001100" -> "1001080"  [label="CFG: "];
"1001080" -> "1001322"  [label="DDG: (get_symbol(c, state, 0) + 1) * f->height + fs->slice_y"];
"1001085" -> "1001080"  [label="DDG: get_symbol(c, state, 0) + 1"];
"1001085" -> "1001080"  [label="DDG: f->height"];
"1001080" -> "1001132"  [label="DDG: fs->slice_height"];
"1001132" -> "1001131"  [label="AST: "];
"1001132" -> "1001136"  [label="CFG: "];
"1001133" -> "1001132"  [label="AST: "];
"1001136" -> "1001132"  [label="AST: "];
"1001140" -> "1001132"  [label="CFG: "];
"1001132" -> "1001322"  [label="DDG: f->num_v_slices"];
"1001132" -> "1001105"  [label="DDG: f->num_v_slices"];
"1001132" -> "1001131"  [label="DDG: fs->slice_height"];
"1001132" -> "1001131"  [label="DDG: f->num_v_slices"];
"1001105" -> "1001037"  [label="AST: "];
"1001105" -> "1001109"  [label="CFG: "];
"1001106" -> "1001105"  [label="AST: "];
"1001109" -> "1001105"  [label="AST: "];
"1001114" -> "1001105"  [label="CFG: "];
"1001105" -> "1001131"  [label="DDG: fs->slice_y"];
"1001131" -> "1001127"  [label="AST: "];
"1001131" -> "1001139"  [label="CFG: "];
"1001139" -> "1001131"  [label="AST: "];
"1001127" -> "1001131"  [label="CFG: "];
"1001131" -> "1001322"  [label="DDG: fs->slice_y"];
"1001131" -> "1001322"  [label="DDG: fs->slice_height / f->num_v_slices"];
"1001131" -> "1001127"  [label="DDG: fs->slice_height / f->num_v_slices"];
"1001131" -> "1001127"  [label="DDG: fs->slice_y"];
"1001131" -> "1001183"  [label="DDG: fs->slice_y"];
"1001127" -> "1001037"  [label="AST: "];
"1001128" -> "1001127"  [label="AST: "];
"1001146" -> "1001127"  [label="CFG: "];
"1001127" -> "1001322"  [label="DDG: fs->slice_height"];
"1001127" -> "1001322"  [label="DDG: fs->slice_height / f->num_v_slices - fs->slice_y"];
"1001127" -> "1001154"  [label="DDG: fs->slice_height"];
"1001127" -> "1001188"  [label="DDG: fs->slice_height"];
"1001154" -> "1001153"  [label="AST: "];
"1001154" -> "1001156"  [label="CFG: "];
"1001155" -> "1001154"  [label="AST: "];
"1001156" -> "1001154"  [label="AST: "];
"1001160" -> "1001154"  [label="CFG: "];
"1001154" -> "1001322"  [label="DDG: fs->slice_height"];
"1001154" -> "1001153"  [label="DDG: fs->slice_height"];
"1001154" -> "1001188"  [label="DDG: fs->slice_height"];
"1001153" -> "1001159"  [label="CFG: "];
"1001159" -> "1001153"  [label="AST: "];
"1001153" -> "1001322"  [label="DDG: (unsigned)fs->slice_height"];
"1001153" -> "1001322"  [label="DDG: f->height"];
"1001085" -> "1001153"  [label="DDG: f->height"];
"1001153" -> "1001181"  [label="DDG: f->height"];
"1001181" -> "1001193"  [label="CFG: "];
"1001182" -> "1001181"  [label="AST: "];
"1001193" -> "1001181"  [label="AST: "];
"1001181" -> "1001322"  [label="DDG: (unsigned)fs->slice_y + (uint64_t)fs->slice_height"];
"1001181" -> "1001322"  [label="DDG: f->height"];
"1001183" -> "1001181"  [label="DDG: fs->slice_y"];
"1001188" -> "1001181"  [label="DDG: fs->slice_height"];
"1001085" -> "1001181"  [label="DDG: f->height"];
"1001188" -> "1001182"  [label="AST: "];
"1001188" -> "1001190"  [label="CFG: "];
"1001189" -> "1001188"  [label="AST: "];
"1001190" -> "1001188"  [label="AST: "];
"1001182" -> "1001188"  [label="CFG: "];
"1001188" -> "1001322"  [label="DDG: fs->slice_height"];
"1001188" -> "1001182"  [label="DDG: fs->slice_height"];
"1001183" -> "1001182"  [label="AST: "];
"1001194" -> "1001182"  [label="CFG: "];
"1001182" -> "1001322"  [label="DDG: (uint64_t)fs->slice_height"];
"1001182" -> "1001322"  [label="DDG: (unsigned)fs->slice_y"];
"1001183" -> "1001182"  [label="DDG: fs->slice_y"];
"1001183" -> "1001185"  [label="CFG: "];
"1001184" -> "1001183"  [label="AST: "];
"1001185" -> "1001183"  [label="AST: "];
"1001189" -> "1001183"  [label="CFG: "];
"1001183" -> "1001322"  [label="DDG: fs->slice_y"];
"1001084" -> "1001095"  [label="CFG: "];
"1001085" -> "1001084"  [label="AST: "];
"1001095" -> "1001084"  [label="AST: "];
"1001084" -> "1001322"  [label="DDG: (get_symbol(c, state, 0) + 1) * f->height"];
"1001085" -> "1001084"  [label="DDG: get_symbol(c, state, 0) + 1"];
"1001085" -> "1001084"  [label="DDG: f->height"];
"1001085" -> "1001092"  [label="CFG: "];
"1001086" -> "1001085"  [label="AST: "];
"1001092" -> "1001085"  [label="AST: "];
"1001096" -> "1001085"  [label="CFG: "];
"1001085" -> "1001322"  [label="DDG: get_symbol(c, state, 0) + 1"];
"1001085" -> "1001322"  [label="DDG: f->height"];
"1001087" -> "1001085"  [label="DDG: c"];
"1001087" -> "1001085"  [label="DDG: state"];
"1001087" -> "1001085"  [label="DDG: 0"];
"1001069" -> "1001068"  [label="AST: "];
"1001069" -> "1001072"  [label="CFG: "];
"1001070" -> "1001069"  [label="AST: "];
"1001071" -> "1001069"  [label="AST: "];
"1001072" -> "1001069"  [label="AST: "];
"1001073" -> "1001069"  [label="CFG: "];
"1001069" -> "1001068"  [label="DDG: c"];
"1001069" -> "1001068"  [label="DDG: state"];
"1001069" -> "1001068"  [label="DDG: 0"];
"1001069" -> "1001087"  [label="DDG: c"];
"1001069" -> "1001087"  [label="DDG: state"];
"1001068" -> "1001073"  [label="CFG: "];
"1001073" -> "1001068"  [label="AST: "];
"1001075" -> "1001068"  [label="CFG: "];
"1001087" -> "1001086"  [label="AST: "];
"1001087" -> "1001090"  [label="CFG: "];
"1001088" -> "1001087"  [label="AST: "];
"1001089" -> "1001087"  [label="AST: "];
"1001090" -> "1001087"  [label="AST: "];
"1001091" -> "1001087"  [label="CFG: "];
"1001087" -> "1001322"  [label="DDG: c"];
"1001087" -> "1001322"  [label="DDG: state"];
"1001087" -> "1001086"  [label="DDG: c"];
"1001087" -> "1001086"  [label="DDG: state"];
"1001087" -> "1001086"  [label="DDG: 0"];
"1001087" -> "1001228"  [label="DDG: c"];
"1001087" -> "1001228"  [label="DDG: state"];
"1001086" -> "1001091"  [label="CFG: "];
"1001091" -> "1001086"  [label="AST: "];
"1001093" -> "1001086"  [label="CFG: "];
"1001086" -> "1001322"  [label="DDG: get_symbol(c, state, 0)"];
"1001228" -> "1001226"  [label="AST: "];
"1001228" -> "1001231"  [label="CFG: "];
"1001229" -> "1001228"  [label="AST: "];
"1001230" -> "1001228"  [label="AST: "];
"1001231" -> "1001228"  [label="AST: "];
"1001226" -> "1001228"  [label="CFG: "];
"1001228" -> "1001322"  [label="DDG: c"];
"1001228" -> "1001322"  [label="DDG: state"];
"1001228" -> "1001226"  [label="DDG: c"];
"1001228" -> "1001226"  [label="DDG: state"];
"1001228" -> "1001226"  [label="DDG: 0"];
"1000895" -> "1001228"  [label="DDG: c"];
"1000895" -> "1001228"  [label="DDG: state"];
"1001226" -> "1001224"  [label="AST: "];
"1001227" -> "1001226"  [label="AST: "];
"1001234" -> "1001226"  [label="CFG: "];
"1001226" -> "1001322"  [label="DDG: get_symbol(c, state, 0)"];
"1001226" -> "1001233"  [label="DDG: idx"];
"1001233" -> "1001232"  [label="AST: "];
"1001233" -> "1001235"  [label="CFG: "];
"1001234" -> "1001233"  [label="AST: "];
"1001235" -> "1001233"  [label="AST: "];
"1001243" -> "1001233"  [label="CFG: "];
"1001251" -> "1001233"  [label="CFG: "];
"1001233" -> "1001322"  [label="DDG: idx > (unsigned)f->quant_table_count"];
"1001233" -> "1001322"  [label="DDG: (unsigned)f->quant_table_count"];
"1001233" -> "1001322"  [label="DDG: idx"];
"1001235" -> "1001233"  [label="DDG: f->quant_table_count"];
"1001233" -> "1001249"  [label="DDG: idx"];
"1001249" -> "1001224"  [label="AST: "];
"1001249" -> "1001253"  [label="CFG: "];
"1001250" -> "1001249"  [label="AST: "];
"1001253" -> "1001249"  [label="AST: "];
"1001256" -> "1001249"  [label="CFG: "];
"1001249" -> "1001322"  [label="DDG: idx"];
"1001249" -> "1001322"  [label="DDG: p->quant_table_index"];
"1001276" -> "1001275"  [label="AST: "];
"1001276" -> "1001283"  [label="CFG: "];
"1001277" -> "1001276"  [label="AST: "];
"1001280" -> "1001276"  [label="AST: "];
"1001283" -> "1001276"  [label="AST: "];
"1001290" -> "1001276"  [label="CFG: "];
"1001276" -> "1001322"  [label="DDG: f->quant_table"];
"1001276" -> "1001322"  [label="DDG: p->quant_table"];
"1001276" -> "1001322"  [label="DDG: memcpy(p->quant_table, f->quant_table, sizeof(p->quant_table))"];
}
