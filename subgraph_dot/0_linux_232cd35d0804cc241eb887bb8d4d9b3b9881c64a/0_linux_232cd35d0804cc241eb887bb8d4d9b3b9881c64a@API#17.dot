digraph "0_linux_232cd35d0804cc241eb887bb8d4d9b3b9881c64a@API" {
"1001035" [label="(Call,pfrag->offset += copy)"];
"1001017" [label="(Call,getfrag(from,\n\t\t\t\t    page_address(pfrag->page) + pfrag->offset,\n\t\t\t\t    offset, copy, skb->len, skb))"];
"1000847" [label="(Call,getfrag(from, data + transhdrlen, offset,\n\t\t\t\t    copy, fraggap, skb))"];
"1000923" [label="(Call,getfrag(from, skb_put(skb, copy),\n\t\t\t\t\t\toffset, copy, off, skb))"];
"1000121" [label="(MethodParameterIn,void *from)"];
"1000925" [label="(Call,skb_put(skb, copy))"];
"1001044" [label="(Call,skb_shinfo(skb))"];
"1000892" [label="(Call,__skb_queue_tail(queue, skb))"];
"1000182" [label="(Call,skb_peek_tail(queue))"];
"1000116" [label="(MethodParameterIn,struct sk_buff_head *queue)"];
"1000794" [label="(Call,skb_set_network_header(skb, exthdrlen))"];
"1000791" [label="(Call,skb_put(skb, fraglen))"];
"1000782" [label="(Call,skb_shinfo(skb))"];
"1000773" [label="(Call,skb_shinfo(skb))"];
"1000763" [label="(Call,skb_reserve(skb, hh_len + sizeof(struct frag_hdr) +\n\t\t\t\t    dst_exthdrlen))"];
"1000744" [label="(Call,!skb)"];
"1000695" [label="(Call,skb = sock_alloc_send_skb(sk,\n \t\t\t\t\t\talloclen + hh_len,\n\t\t\t\t\t\t(flags & MSG_DONTWAIT), &err))"];
"1000697" [label="(Call,sock_alloc_send_skb(sk,\n \t\t\t\t\t\talloclen + hh_len,\n\t\t\t\t\t\t(flags & MSG_DONTWAIT), &err))"];
"1000317" [label="(Call,ip6_sk_ignore_df(sk))"];
"1000114" [label="(MethodParameterIn,struct sock *sk)"];
"1000406" [label="(Call,sock_tx_timestamp(sk, sockc->tsflags, &tx_flags))"];
"1000957" [label="(Call,sk_page_frag_refill(sk, pfrag))"];
"1000476" [label="(Call,udp_get_no_check6_tx(sk))"];
"1000726" [label="(Call,sock_wmalloc(sk,\n\t\t\t\t\t\t\t   alloclen + hh_len, 1,\n\t\t\t\t\t\t\t   sk->sk_allocation))"];
"1000671" [label="(Call,alloclen += sizeof(struct frag_hdr))"];
"1000659" [label="(Call,alloclen += rt->dst.trailer_len)"];
"1000611" [label="(Call,fragheaderlen - rt->dst.trailer_len)"];
"1000590" [label="(Call,(cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - fragheaderlen)"];
"1000593" [label="(Call,cork->length <= mtu)"];
"1000513" [label="(Call,cork->length <= mtu)"];
"1000429" [label="(Call,cork->length += length)"];
"1000369" [label="(Call,length <= mtu - headersize)"];
"1000122" [label="(MethodParameterIn,int length)"];
"1000371" [label="(Call,mtu - headersize)"];
"1000287" [label="(Call,mtu - headersize)"];
"1000242" [label="(Call,mtu - fragheaderlen)"];
"1000207" [label="(Call,mtu = cork->fragsize)"];
"1000223" [label="(Call,fragheaderlen = sizeof(struct ipv6hdr) + rt->rt6i_nfheader_len +\n\t\t\t(opt ? opt->opt_nflen : 0))"];
"1000198" [label="(Call,rt->dst.header_len - rt->rt6i_nfheader_len)"];
"1000250" [label="(Call,headersize = sizeof(struct ipv6hdr) +\n\t\t     (opt ? opt->opt_flen + opt->opt_nflen : 0) +\n\t\t     (dst_allfrag(&rt->dst) ?\n\t\t      sizeof(struct frag_hdr) : 0) +\n\t\t     rt->rt6i_nfheader_len)"];
"1000364" [label="(Call,headersize == sizeof(struct ipv6hdr))"];
"1000336" [label="(Call,maxnonfragsize - headersize)"];
"1000326" [label="(Call,maxnonfragsize = mtu)"];
"1000319" [label="(Call,maxnonfragsize = sizeof(struct ipv6hdr) + IPV6_MAXPLEN)"];
"1000437" [label="(Call,(length + fragheaderlen) > mtu)"];
"1000246" [label="(Call,fragheaderlen -\n\t\t     sizeof(struct frag_hdr))"];
"1000238" [label="(Call,maxfraglen = ((mtu - fragheaderlen) & ~7) + fragheaderlen -\n\t\t     sizeof(struct frag_hdr))"];
"1000241" [label="(Call,(mtu - fragheaderlen) & ~7)"];
"1000535" [label="(Call,maxfraglen - skb->len)"];
"1000609" [label="(Call,maxfraglen - fragheaderlen - rt->dst.trailer_len)"];
"1000555" [label="(Call,skb->len - maxfraglen)"];
"1000510" [label="(Call,(cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - skb->len)"];
"1000838" [label="(Call,pskb_trim_unique(skb_prev, maxfraglen))"];
"1000816" [label="(Call,skb_copy_and_csum_bits(\n\t\t\t\t\tskb_prev, maxfraglen,\n\t\t\t\t\tdata + transhdrlen, fraggap, 0))"];
"1000579" [label="(Call,skb_prev = skb)"];
"1000566" [label="(Call,!skb)"];
"1000500" [label="(Call,!skb)"];
"1000185" [label="(Call,!skb)"];
"1000180" [label="(Call,skb = skb_peek_tail(queue))"];
"1000442" [label="(Call,skb && skb_is_gso(skb))"];
"1000444" [label="(Call,skb_is_gso(skb))"];
"1000570" [label="(Call,ip6_append_data_mtu(&mtu, &maxfraglen,\n\t\t\t\t\t\t    fragheaderlen, skb, rt,\n\t\t\t\t\t\t    orig_mtu))"];
"1000161" [label="(Call,*rt = (struct rt6_info *)cork->dst)"];
"1000163" [label="(Call,(struct rt6_info *)cork->dst)"];
"1000212" [label="(Call,orig_mtu = mtu)"];
"1000797" [label="(Call,data += fragheaderlen)"];
"1000789" [label="(Call,data = skb_put(skb, fraglen))"];
"1000679" [label="(Call,transhdrlen - fraggap)"];
"1000355" [label="(Call,transhdrlen && sk->sk_protocol == IPPROTO_UDP &&\n\t    headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000123" [label="(MethodParameterIn,int transhdrlen)"];
"1000357" [label="(Call,sk->sk_protocol == IPPROTO_UDP &&\n\t    headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000358" [label="(Call,sk->sk_protocol == IPPROTO_UDP)"];
"1000295" [label="(Call,sk->sk_protocol == IPPROTO_UDP)"];
"1000300" [label="(Call,sk->sk_protocol == IPPROTO_RAW)"];
"1000363" [label="(Call,headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000368" [label="(Call,length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000374" [label="(Call,!(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000375" [label="(Call,!(flags & MSG_MORE))"];
"1000376" [label="(Call,flags & MSG_MORE)"];
"1000124" [label="(MethodParameterIn,unsigned int flags)"];
"1000379" [label="(Call,rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000387" [label="(Call,NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000873" [label="(Call,transhdrlen = 0)"];
"1000561" [label="(Call,fraggap = 0)"];
"1000553" [label="(Call,fraggap = skb->len - maxfraglen)"];
"1001051" [label="(Call,skb->len += copy)"];
"1001040" [label="(Call,skb_frag_size_add(&skb_shinfo(skb)->frags[i - 1], copy))"];
"1000642" [label="(Call,alloclen += dst_exthdrlen)"];
"1000196" [label="(Call,dst_exthdrlen = rt->dst.header_len - rt->rt6i_nfheader_len)"];
"1000142" [label="(Call,dst_exthdrlen = 0)"];
"1000879" [label="(Call,dst_exthdrlen = 0)"];
"1000637" [label="(Call,alloclen = datalen + fragheaderlen)"];
"1000588" [label="(Call,datalen > (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - fragheaderlen)"];
"1000582" [label="(Call,datalen = length + fraggap)"];
"1000530" [label="(Call,copy < length)"];
"1000508" [label="(Call,copy = (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - skb->len)"];
"1000504" [label="(Call,length > 0)"];
"1001075" [label="(Call,length -= copy)"];
"1001066" [label="(Call,atomic_add(copy, &sk->sk_wmem_alloc))"];
"1000714" [label="(Call,atomic_read(&sk->sk_wmem_alloc))"];
"1000897" [label="(Call,copy > length)"];
"1000541" [label="(Call,copy <= 0)"];
"1000533" [label="(Call,copy = maxfraglen - skb->len)"];
"1000868" [label="(Call,length -= datalen - fraggap)"];
"1000870" [label="(Call,datalen - fraggap)"];
"1000677" [label="(Call,datalen - transhdrlen - fraggap)"];
"1000646" [label="(Call,datalen != length + fraggap)"];
"1000607" [label="(Call,datalen = maxfraglen - fragheaderlen - rt->dst.trailer_len)"];
"1000652" [label="(Call,datalen += rt->dst.trailer_len)"];
"1000633" [label="(Call,alloclen = mtu)"];
"1000215" [label="(Call,hh_len = LL_RESERVED_SPACE(rt->dst.dev))"];
"1000217" [label="(Call,LL_RESERVED_SPACE(rt->dst.dev))"];
"1000119" [label="(MethodParameterIn,struct page_frag *pfrag)"];
"1000702" [label="(Call,flags & MSG_DONTWAIT)"];
"1000620" [label="(Call,flags & MSG_MORE)"];
"1000884" [label="(Call,flags & MSG_CONFIRM)"];
"1000737" [label="(Call,!skb)"];
"1000709" [label="(Call,skb = NULL)"];
"1000724" [label="(Call,skb = sock_wmalloc(sk,\n\t\t\t\t\t\t\t   alloclen + hh_len, 1,\n\t\t\t\t\t\t\t   sk->sk_allocation))"];
"1000666" [label="(Call,fraglen = datalen + fragheaderlen)"];
"1000188" [label="(Call,exthdrlen = opt ? opt->opt_flen : 0)"];
"1000138" [label="(Call,exthdrlen = 0)"];
"1000876" [label="(Call,exthdrlen = 0)"];
"1000889" [label="(Call,skb_set_dst_pending_confirm(skb, 1))"];
"1000900" [label="(Call,copy = length)"];
"1000865" [label="(Call,offset += copy)"];
"1000843" [label="(Call,copy > 0)"];
"1000683" [label="(Call,copy < 0)"];
"1000675" [label="(Call,copy = datalen - transhdrlen - fraggap)"];
"1001072" [label="(Call,offset += copy)"];
"1000149" [label="(Call,offset = 0)"];
"1000916" [label="(Call,off = skb->len)"];
"1000835" [label="(Call,data += fraggap)"];
"1001020" [label="(Call,page_address(pfrag->page))"];
"1000963" [label="(Call,skb_can_coalesce(skb, i, pfrag->page,\n\t\t\t\t\t      pfrag->offset))"];
"1000948" [label="(Call,skb_shinfo(skb))"];
"1000945" [label="(Call,i = skb_shinfo(skb)->nr_frags)"];
"1000992" [label="(Call,skb_shinfo(skb)->nr_frags = ++i)"];
"1000997" [label="(Call,++i)"];
"1000982" [label="(Call,__skb_fill_page_desc(skb, i, pfrag->page,\n\t\t\t\t\t\t     pfrag->offset, 0))"];
"1000978" [label="(Call,i == MAX_SKB_FRAGS)"];
"1001035" [label="(Call,pfrag->offset += copy)"];
"1001008" [label="(Call,pfrag->size - pfrag->offset)"];
"1000999" [label="(Call,get_page(pfrag->page))"];
"1001003" [label="(Call,copy = min_t(int, copy, pfrag->size - pfrag->offset))"];
"1001005" [label="(Call,min_t(int, copy, pfrag->size - pfrag->offset))"];
"1000994" [label="(Call,skb_shinfo(skb))"];
"1000962" [label="(Call,!skb_can_coalesce(skb, i, pfrag->page,\n\t\t\t\t\t      pfrag->offset))"];
"1000846" [label="(Call,getfrag(from, data + transhdrlen, offset,\n\t\t\t\t    copy, fraggap, skb) < 0)"];
"1000842" [label="(Call,copy > 0 &&\n\t\t\t    getfrag(from, data + transhdrlen, offset,\n\t\t\t\t    copy, fraggap, skb) < 0)"];
"1000862" [label="(Call,kfree_skb(skb))"];
"1000565" [label="(Call,!skb || !skb_prev)"];
"1000883" [label="(Call,(flags & MSG_CONFIRM) && !skb_prev)"];
"1000568" [label="(Call,!skb_prev)"];
"1000812" [label="(Call,skb->csum = skb_copy_and_csum_bits(\n\t\t\t\t\tskb_prev, maxfraglen,\n\t\t\t\t\tdata + transhdrlen, fraggap, 0))"];
"1000828" [label="(Call,csum_sub(skb_prev->csum,\n\t\t\t\t\t\t\t  skb->csum))"];
"1000824" [label="(Call,skb_prev->csum = csum_sub(skb_prev->csum,\n\t\t\t\t\t\t\t  skb->csum))"];
"1000849" [label="(Call,data + transhdrlen)"];
"1001086" [label="(Call,cork->length -= length)"];
"1000819" [label="(Call,data + transhdrlen)"];
"1000736" [label="(Call,unlikely(!skb))"];
"1000956" [label="(Call,!sk_page_frag_refill(sk, pfrag))"];
"1001092" [label="(Call,sock_net(sk))"];
"1001091" [label="(Call,IP6_INC_STATS(sock_net(sk), rt->rt6i_idev, IPSTATS_MIB_OUTDISCARDS))"];
"1000699" [label="(Call,alloclen + hh_len)"];
"1000728" [label="(Call,alloclen + hh_len)"];
"1000639" [label="(Call,datalen + fragheaderlen)"];
"1000668" [label="(Call,datalen + fragheaderlen)"];
"1000584" [label="(Call,length + fraggap)"];
"1000648" [label="(Call,length + fraggap)"];
"1000511" [label="(Call,cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen)"];
"1000800" [label="(Call,skb->transport_header = (skb->network_header +\n\t\t\t\t\t\t fragheaderlen))"];
"1000804" [label="(Call,skb->network_header +\n\t\t\t\t\t\t fragheaderlen)"];
"1000591" [label="(Call,cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen)"];
"1000887" [label="(Call,!skb_prev)"];
"1000922" [label="(Call,getfrag(from, skb_put(skb, copy),\n\t\t\t\t\t\toffset, copy, off, skb) < 0)"];
"1000934" [label="(Call,__skb_trim(skb, off))"];
"1001016" [label="(Call,getfrag(from,\n\t\t\t\t    page_address(pfrag->page) + pfrag->offset,\n\t\t\t\t    offset, copy, skb->len, skb) < 0)"];
"1001056" [label="(Call,skb->data_len += copy)"];
"1001061" [label="(Call,skb->truesize += copy)"];
"1000713" [label="(Call,atomic_read(&sk->sk_wmem_alloc) <=\n\t\t\t\t    2 * sk->sk_sndbuf)"];
"1001047" [label="(Call,i - 1)"];
"1001019" [label="(Call,page_address(pfrag->page) + pfrag->offset)"];
"1000124" [label="(MethodParameterIn,unsigned int flags)"];
"1000438" [label="(Call,length + fragheaderlen)"];
"1000359" [label="(Call,sk->sk_protocol)"];
"1001058" [label="(Identifier,skb)"];
"1000443" [label="(Identifier,skb)"];
"1000597" [label="(Identifier,mtu)"];
"1000745" [label="(Identifier,skb)"];
"1001053" [label="(Identifier,skb)"];
"1000888" [label="(Identifier,skb_prev)"];
"1001027" [label="(Identifier,offset)"];
"1000731" [label="(Literal,1)"];
"1000604" [label="(Identifier,mtu)"];
"1000854" [label="(Identifier,fraggap)"];
"1000442" [label="(Call,skb && skb_is_gso(skb))"];
"1000127" [label="(Block,)"];
"1000997" [label="(Call,++i)"];
"1000510" [label="(Call,(cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - skb->len)"];
"1001057" [label="(Call,skb->data_len)"];
"1001079" [label="(Literal,0)"];
"1000302" [label="(Identifier,sk)"];
"1000962" [label="(Call,!skb_can_coalesce(skb, i, pfrag->page,\n\t\t\t\t\t      pfrag->offset))"];
"1000375" [label="(Call,!(flags & MSG_MORE))"];
"1000405" [label="(Block,)"];
"1000139" [label="(Identifier,exthdrlen)"];
"1000736" [label="(Call,unlikely(!skb))"];
"1000880" [label="(Identifier,dst_exthdrlen)"];
"1001075" [label="(Call,length -= copy)"];
"1000325" [label="(ControlStructure,else)"];
"1000824" [label="(Call,skb_prev->csum = csum_sub(skb_prev->csum,\n\t\t\t\t\t\t\t  skb->csum))"];
"1000683" [label="(Call,copy < 0)"];
"1000972" [label="(Block,)"];
"1000818" [label="(Identifier,maxfraglen)"];
"1000743" [label="(ControlStructure,if (!skb))"];
"1000594" [label="(Call,cork->length)"];
"1000628" [label="(Identifier,rt)"];
"1000984" [label="(Identifier,i)"];
"1000982" [label="(Call,__skb_fill_page_desc(skb, i, pfrag->page,\n\t\t\t\t\t\t     pfrag->offset, 0))"];
"1000165" [label="(Call,cork->dst)"];
"1000991" [label="(Literal,0)"];
"1000732" [label="(Call,sk->sk_allocation)"];
"1000526" [label="(Call,skb->len)"];
"1000299" [label="(Identifier,IPPROTO_UDP)"];
"1000950" [label="(FieldIdentifier,nr_frags)"];
"1000893" [label="(Identifier,queue)"];
"1000592" [label="(Call,cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG))"];
"1000832" [label="(Call,skb->csum)"];
"1000811" [label="(Block,)"];
"1000433" [label="(Identifier,length)"];
"1000429" [label="(Call,cork->length += length)"];
"1000943" [label="(Block,)"];
"1000699" [label="(Call,alloclen + hh_len)"];
"1000345" [label="(Call,mtu - headersize +\n\t\t\t\t sizeof(struct ipv6hdr))"];
"1000792" [label="(Identifier,skb)"];
"1000577" [label="(Identifier,rt)"];
"1000964" [label="(Identifier,skb)"];
"1000189" [label="(Identifier,exthdrlen)"];
"1000387" [label="(Call,NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000306" [label="(Call,ipv6_local_rxpmtu(sk, fl6, mtu - headersize +\n\t\t\t\tsizeof(struct ipv6hdr)))"];
"1000326" [label="(Call,maxnonfragsize = mtu)"];
"1000242" [label="(Call,mtu - fragheaderlen)"];
"1000843" [label="(Call,copy > 0)"];
"1000886" [label="(Identifier,MSG_CONFIRM)"];
"1000228" [label="(Call,rt->rt6i_nfheader_len +\n\t\t\t(opt ? opt->opt_nflen : 0))"];
"1000635" [label="(Identifier,mtu)"];
"1001037" [label="(Identifier,pfrag)"];
"1000892" [label="(Call,__skb_queue_tail(queue, skb))"];
"1000977" [label="(ControlStructure,if (i == MAX_SKB_FRAGS))"];
"1000705" [label="(Call,&err)"];
"1000928" [label="(Identifier,offset)"];
"1000737" [label="(Call,!skb)"];
"1001046" [label="(FieldIdentifier,frags)"];
"1001092" [label="(Call,sock_net(sk))"];
"1000532" [label="(Identifier,length)"];
"1000636" [label="(ControlStructure,else)"];
"1000709" [label="(Call,skb = NULL)"];
"1000902" [label="(Identifier,length)"];
"1000934" [label="(Call,__skb_trim(skb, off))"];
"1000979" [label="(Identifier,i)"];
"1000746" [label="(ControlStructure,goto error;)"];
"1000695" [label="(Call,skb = sock_alloc_send_skb(sk,\n \t\t\t\t\t\talloclen + hh_len,\n\t\t\t\t\t\t(flags & MSG_DONTWAIT), &err))"];
"1000377" [label="(Identifier,flags)"];
"1000765" [label="(Call,hh_len + sizeof(struct frag_hdr) +\n\t\t\t\t    dst_exthdrlen)"];
"1000266" [label="(Call,(dst_allfrag(&rt->dst) ?\n\t\t      sizeof(struct frag_hdr) : 0) +\n\t\t     rt->rt6i_nfheader_len)"];
"1000882" [label="(ControlStructure,if ((flags & MSG_CONFIRM) && !skb_prev))"];
"1000531" [label="(Identifier,copy)"];
"1000666" [label="(Call,fraglen = datalen + fragheaderlen)"];
"1000407" [label="(Identifier,sk)"];
"1000170" [label="(Identifier,opt)"];
"1000808" [label="(Identifier,fragheaderlen)"];
"1000121" [label="(MethodParameterIn,void *from)"];
"1000196" [label="(Call,dst_exthdrlen = rt->dst.header_len - rt->rt6i_nfheader_len)"];
"1000502" [label="(ControlStructure,goto alloc_new_skb;)"];
"1000793" [label="(Identifier,fraglen)"];
"1000607" [label="(Call,datalen = maxfraglen - fragheaderlen - rt->dst.trailer_len)"];
"1001045" [label="(Identifier,skb)"];
"1000822" [label="(Identifier,fraggap)"];
"1000988" [label="(Call,pfrag->offset)"];
"1000853" [label="(Identifier,copy)"];
"1000798" [label="(Identifier,data)"];
"1000646" [label="(Call,datalen != length + fraggap)"];
"1000378" [label="(Identifier,MSG_MORE)"];
"1000696" [label="(Identifier,skb)"];
"1000321" [label="(Call,sizeof(struct ipv6hdr) + IPV6_MAXPLEN)"];
"1000218" [label="(Call,rt->dst.dev)"];
"1000863" [label="(Identifier,skb)"];
"1000897" [label="(Call,copy > length)"];
"1000648" [label="(Call,length + fraggap)"];
"1000354" [label="(ControlStructure,if (transhdrlen && sk->sk_protocol == IPPROTO_UDP &&\n\t    headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)))"];
"1000980" [label="(Identifier,MAX_SKB_FRAGS)"];
"1000622" [label="(Identifier,MSG_MORE)"];
"1001043" [label="(Call,skb_shinfo(skb)->frags)"];
"1000839" [label="(Identifier,skb_prev)"];
"1000981" [label="(ControlStructure,goto error;)"];
"1000871" [label="(Identifier,datalen)"];
"1000311" [label="(Call,headersize +\n\t\t\t\tsizeof(struct ipv6hdr))"];
"1000618" [label="(ControlStructure,if ((flags & MSG_MORE) &&\n\t\t\t    !(rt->dst.dev->features&NETIF_F_SG)))"];
"1000397" [label="(Identifier,sk)"];
"1001005" [label="(Call,min_t(int, copy, pfrag->size - pfrag->offset))"];
"1000960" [label="(ControlStructure,goto error;)"];
"1000735" [label="(ControlStructure,if (unlikely(!skb)))"];
"1000501" [label="(Identifier,skb)"];
"1000947" [label="(Call,skb_shinfo(skb)->nr_frags)"];
"1000812" [label="(Call,skb->csum = skb_copy_and_csum_bits(\n\t\t\t\t\tskb_prev, maxfraglen,\n\t\t\t\t\tdata + transhdrlen, fraggap, 0))"];
"1000717" [label="(Identifier,sk)"];
"1000749" [label="(Identifier,skb)"];
"1000556" [label="(Call,skb->len)"];
"1001076" [label="(Identifier,length)"];
"1000243" [label="(Identifier,mtu)"];
"1000702" [label="(Call,flags & MSG_DONTWAIT)"];
"1000965" [label="(Identifier,i)"];
"1000828" [label="(Call,csum_sub(skb_prev->csum,\n\t\t\t\t\t\t\t  skb->csum))"];
"1000317" [label="(Call,ip6_sk_ignore_df(sk))"];
"1001035" [label="(Call,pfrag->offset += copy)"];
"1001032" [label="(Identifier,skb)"];
"1000797" [label="(Call,data += fragheaderlen)"];
"1000533" [label="(Call,copy = maxfraglen - skb->len)"];
"1000224" [label="(Identifier,fragheaderlen)"];
"1000576" [label="(Identifier,skb)"];
"1001100" [label="(MethodReturn,static int)"];
"1000926" [label="(Identifier,skb)"];
"1000651" [label="(Block,)"];
"1000727" [label="(Identifier,sk)"];
"1001052" [label="(Call,skb->len)"];
"1000959" [label="(Identifier,pfrag)"];
"1000406" [label="(Call,sock_tx_timestamp(sk, sockc->tsflags, &tx_flags))"];
"1000931" [label="(Identifier,skb)"];
"1000642" [label="(Call,alloclen += dst_exthdrlen)"];
"1000963" [label="(Call,skb_can_coalesce(skb, i, pfrag->page,\n\t\t\t\t\t      pfrag->offset))"];
"1000357" [label="(Call,sk->sk_protocol == IPPROTO_UDP &&\n\t    headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000567" [label="(Identifier,skb)"];
"1000958" [label="(Identifier,sk)"];
"1000187" [label="(Block,)"];
"1000250" [label="(Call,headersize = sizeof(struct ipv6hdr) +\n\t\t     (opt ? opt->opt_flen + opt->opt_nflen : 0) +\n\t\t     (dst_allfrag(&rt->dst) ?\n\t\t      sizeof(struct frag_hdr) : 0) +\n\t\t     rt->rt6i_nfheader_len)"];
"1000704" [label="(Identifier,MSG_DONTWAIT)"];
"1000183" [label="(Identifier,queue)"];
"1001003" [label="(Call,copy = min_t(int, copy, pfrag->size - pfrag->offset))"];
"1000805" [label="(Call,skb->network_header)"];
"1000301" [label="(Call,sk->sk_protocol)"];
"1000900" [label="(Call,copy = length)"];
"1000624" [label="(Call,rt->dst.dev->features&NETIF_F_SG)"];
"1000362" [label="(Identifier,IPPROTO_UDP)"];
"1000180" [label="(Call,skb = skb_peek_tail(queue))"];
"1000612" [label="(Identifier,fragheaderlen)"];
"1000869" [label="(Identifier,length)"];
"1000188" [label="(Call,exthdrlen = opt ? opt->opt_flen : 0)"];
"1000246" [label="(Call,fragheaderlen -\n\t\t     sizeof(struct frag_hdr))"];
"1000813" [label="(Call,skb->csum)"];
"1000570" [label="(Call,ip6_append_data_mtu(&mtu, &maxfraglen,\n\t\t\t\t\t\t    fragheaderlen, skb, rt,\n\t\t\t\t\t\t    orig_mtu))"];
"1000116" [label="(MethodParameterIn,struct sk_buff_head *queue)"];
"1000330" [label="(Call,cork->length + length > maxnonfragsize - headersize)"];
"1000541" [label="(Call,copy <= 0)"];
"1000740" [label="(Identifier,err)"];
"1000682" [label="(ControlStructure,if (copy < 0))"];
"1001019" [label="(Call,page_address(pfrag->page) + pfrag->offset)"];
"1000517" [label="(Identifier,mtu)"];
"1000816" [label="(Call,skb_copy_and_csum_bits(\n\t\t\t\t\tskb_prev, maxfraglen,\n\t\t\t\t\tdata + transhdrlen, fraggap, 0))"];
"1000542" [label="(Identifier,copy)"];
"1000983" [label="(Identifier,skb)"];
"1001066" [label="(Call,atomic_add(copy, &sk->sk_wmem_alloc))"];
"1001004" [label="(Identifier,copy)"];
"1001021" [label="(Call,pfrag->page)"];
"1000537" [label="(Call,skb->len)"];
"1000162" [label="(Identifier,rt)"];
"1000909" [label="(Identifier,rt)"];
"1000550" [label="(JumpTarget,alloc_new_skb:)"];
"1001055" [label="(Identifier,copy)"];
"1000826" [label="(Identifier,skb_prev)"];
"1000144" [label="(Literal,0)"];
"1000588" [label="(Call,datalen > (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - fragheaderlen)"];
"1000284" [label="(Identifier,cork)"];
"1000282" [label="(Call,cork->length + length)"];
"1000530" [label="(Call,copy < length)"];
"1000883" [label="(Call,(flags & MSG_CONFIRM) && !skb_prev)"];
"1000946" [label="(Identifier,i)"];
"1000713" [label="(Call,atomic_read(&sk->sk_wmem_alloc) <=\n\t\t\t\t    2 * sk->sk_sndbuf)"];
"1001072" [label="(Call,offset += copy)"];
"1000543" [label="(Literal,0)"];
"1000561" [label="(Call,fraggap = 0)"];
"1001047" [label="(Call,i - 1)"];
"1000847" [label="(Call,getfrag(from, data + transhdrlen, offset,\n\t\t\t\t    copy, fraggap, skb))"];
"1000444" [label="(Call,skb_is_gso(skb))"];
"1000634" [label="(Identifier,alloclen)"];
"1000143" [label="(Identifier,dst_exthdrlen)"];
"1000613" [label="(Call,rt->dst.trailer_len)"];
"1000535" [label="(Call,maxfraglen - skb->len)"];
"1000995" [label="(Identifier,skb)"];
"1000864" [label="(ControlStructure,goto error;)"];
"1000856" [label="(Literal,0)"];
"1000499" [label="(ControlStructure,if (!skb))"];
"1000719" [label="(Call,2 * sk->sk_sndbuf)"];
"1000641" [label="(Identifier,fragheaderlen)"];
"1000184" [label="(ControlStructure,if (!skb))"];
"1000966" [label="(Call,pfrag->page)"];
"1000383" [label="(Identifier,rt)"];
"1000728" [label="(Call,alloclen + hh_len)"];
"1000569" [label="(Identifier,skb_prev)"];
"1000914" [label="(Block,)"];
"1000796" [label="(Identifier,exthdrlen)"];
"1000142" [label="(Call,dst_exthdrlen = 0)"];
"1000644" [label="(Identifier,dst_exthdrlen)"];
"1000773" [label="(Call,skb_shinfo(skb))"];
"1000587" [label="(ControlStructure,if (datalen > (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - fragheaderlen))"];
"1000318" [label="(Identifier,sk)"];
"1000363" [label="(Call,headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000867" [label="(Identifier,copy)"];
"1000837" [label="(Identifier,fraggap)"];
"1000936" [label="(Identifier,off)"];
"1000791" [label="(Call,skb_put(skb, fraglen))"];
"1000654" [label="(Call,rt->dst.trailer_len)"];
"1000667" [label="(Identifier,fraglen)"];
"1000794" [label="(Call,skb_set_network_header(skb, exthdrlen))"];
"1001099" [label="(Identifier,err)"];
"1000223" [label="(Call,fragheaderlen = sizeof(struct ipv6hdr) + rt->rt6i_nfheader_len +\n\t\t\t(opt ? opt->opt_nflen : 0))"];
"1000917" [label="(Identifier,off)"];
"1001086" [label="(Call,cork->length -= length)"];
"1000725" [label="(Identifier,skb)"];
"1000563" [label="(Literal,0)"];
"1000562" [label="(Identifier,fraggap)"];
"1000591" [label="(Call,cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen)"];
"1000512" [label="(Call,cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG))"];
"1000207" [label="(Call,mtu = cork->fragsize)"];
"1000255" [label="(Call,(opt ? opt->opt_flen + opt->opt_nflen : 0) +\n\t\t     (dst_allfrag(&rt->dst) ?\n\t\t      sizeof(struct frag_hdr) : 0) +\n\t\t     rt->rt6i_nfheader_len)"];
"1001000" [label="(Call,pfrag->page)"];
"1000338" [label="(Identifier,headersize)"];
"1000580" [label="(Identifier,skb_prev)"];
"1000653" [label="(Identifier,datalen)"];
"1000239" [label="(Identifier,maxfraglen)"];
"1000477" [label="(Identifier,sk)"];
"1000575" [label="(Identifier,fragheaderlen)"];
"1000932" [label="(Literal,0)"];
"1000801" [label="(Call,skb->transport_header)"];
"1000589" [label="(Identifier,datalen)"];
"1000584" [label="(Call,length + fraggap)"];
"1000389" [label="(Identifier,NETIF_F_HW_CSUM)"];
"1000608" [label="(Identifier,datalen)"];
"1000724" [label="(Call,skb = sock_wmalloc(sk,\n\t\t\t\t\t\t\t   alloclen + hh_len, 1,\n\t\t\t\t\t\t\t   sk->sk_allocation))"];
"1000925" [label="(Call,skb_put(skb, copy))"];
"1000581" [label="(Identifier,skb)"];
"1000840" [label="(Identifier,maxfraglen)"];
"1000296" [label="(Call,sk->sk_protocol)"];
"1000714" [label="(Call,atomic_read(&sk->sk_wmem_alloc))"];
"1001028" [label="(Identifier,copy)"];
"1000851" [label="(Identifier,transhdrlen)"];
"1000251" [label="(Identifier,headersize)"];
"1000508" [label="(Call,copy = (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - skb->len)"];
"1001040" [label="(Call,skb_frag_size_add(&skb_shinfo(skb)->frags[i - 1], copy))"];
"1000868" [label="(Call,length -= datalen - fraggap)"];
"1000408" [label="(Call,sockc->tsflags)"];
"1000559" [label="(Identifier,maxfraglen)"];
"1000566" [label="(Call,!skb)"];
"1000781" [label="(Call,skb_shinfo(skb)->tskey)"];
"1000845" [label="(Literal,0)"];
"1000855" [label="(Identifier,skb)"];
"1000215" [label="(Call,hh_len = LL_RESERVED_SPACE(rt->dst.dev))"];
"1000763" [label="(Call,skb_reserve(skb, hh_len + sizeof(struct frag_hdr) +\n\t\t\t\t    dst_exthdrlen))"];
"1000331" [label="(Call,cork->length + length)"];
"1000698" [label="(Identifier,sk)"];
"1000551" [label="(ControlStructure,if (skb))"];
"1000789" [label="(Call,data = skb_put(skb, fraglen))"];
"1000504" [label="(Call,length > 0)"];
"1001049" [label="(Literal,1)"];
"1000481" [label="(Call,ip6_ufo_append_data(sk, queue, getfrag, from, length,\n\t\t\t\t\t  hh_len, fragheaderlen, exthdrlen,\n\t\t\t\t\t  transhdrlen, mtu, flags, fl6))"];
"1000637" [label="(Call,alloclen = datalen + fragheaderlen)"];
"1001093" [label="(Identifier,sk)"];
"1000697" [label="(Call,sock_alloc_send_skb(sk,\n \t\t\t\t\t\talloclen + hh_len,\n\t\t\t\t\t\t(flags & MSG_DONTWAIT), &err))"];
"1000527" [label="(Identifier,skb)"];
"1000241" [label="(Call,(mtu - fragheaderlen) & ~7)"];
"1000660" [label="(Identifier,alloclen)"];
"1000870" [label="(Call,datalen - fraggap)"];
"1000388" [label="(Identifier,NETIF_F_IPV6_CSUM)"];
"1000872" [label="(Identifier,fraggap)"];
"1000668" [label="(Call,datalen + fragheaderlen)"];
"1000645" [label="(ControlStructure,if (datalen != length + fraggap))"];
"1000544" [label="(Block,)"];
"1000573" [label="(Call,&maxfraglen)"];
"1000507" [label="(Block,)"];
"1000810" [label="(Identifier,fraggap)"];
"1000536" [label="(Identifier,maxfraglen)"];
"1000738" [label="(Identifier,skb)"];
"1000956" [label="(Call,!sk_page_frag_refill(sk, pfrag))"];
"1000804" [label="(Call,skb->network_header +\n\t\t\t\t\t\t fragheaderlen)"];
"1000364" [label="(Call,headersize == sizeof(struct ipv6hdr))"];
"1000875" [label="(Literal,0)"];
"1000782" [label="(Call,skb_shinfo(skb))"];
"1000927" [label="(Identifier,copy)"];
"1000994" [label="(Call,skb_shinfo(skb))"];
"1000978" [label="(Call,i == MAX_SKB_FRAGS)"];
"1000553" [label="(Call,fraggap = skb->len - maxfraglen)"];
"1000849" [label="(Call,data + transhdrlen)"];
"1000873" [label="(Call,transhdrlen = 0)"];
"1000918" [label="(Call,skb->len)"];
"1000371" [label="(Call,mtu - headersize)"];
"1000952" [label="(Identifier,err)"];
"1000889" [label="(Call,skb_set_dst_pending_confirm(skb, 1))"];
"1001007" [label="(Identifier,copy)"];
"1000876" [label="(Call,exthdrlen = 0)"];
"1000961" [label="(ControlStructure,if (!skb_can_coalesce(skb, i, pfrag->page,\n\t\t\t\t\t      pfrag->offset)))"];
"1000225" [label="(Call,sizeof(struct ipv6hdr) + rt->rt6i_nfheader_len +\n\t\t\t(opt ? opt->opt_nflen : 0))"];
"1000901" [label="(Identifier,copy)"];
"1000996" [label="(FieldIdentifier,nr_frags)"];
"1000957" [label="(Call,sk_page_frag_refill(sk, pfrag))"];
"1000935" [label="(Identifier,skb)"];
"1000199" [label="(Call,rt->dst.header_len)"];
"1000819" [label="(Call,data + transhdrlen)"];
"1000700" [label="(Identifier,alloclen)"];
"1000679" [label="(Call,transhdrlen - fraggap)"];
"1000878" [label="(Literal,0)"];
"1000336" [label="(Call,maxnonfragsize - headersize)"];
"1000678" [label="(Identifier,datalen)"];
"1000784" [label="(FieldIdentifier,tskey)"];
"1000366" [label="(Call,sizeof(struct ipv6hdr))"];
"1001097" [label="(Identifier,IPSTATS_MIB_OUTDISCARDS)"];
"1000568" [label="(Call,!skb_prev)"];
"1000850" [label="(Identifier,data)"];
"1000859" [label="(Identifier,err)"];
"1000565" [label="(Call,!skb || !skb_prev)"];
"1000884" [label="(Call,flags & MSG_CONFIRM)"];
"1000726" [label="(Call,sock_wmalloc(sk,\n\t\t\t\t\t\t\t   alloclen + hh_len, 1,\n\t\t\t\t\t\t\t   sk->sk_allocation))"];
"1000119" [label="(MethodParameterIn,struct page_frag *pfrag)"];
"1000333" [label="(Identifier,cork)"];
"1000198" [label="(Call,rt->dst.header_len - rt->rt6i_nfheader_len)"];
"1001062" [label="(Call,skb->truesize)"];
"1000930" [label="(Identifier,off)"];
"1000138" [label="(Call,exthdrlen = 0)"];
"1000659" [label="(Call,alloclen += rt->dst.trailer_len)"];
"1000554" [label="(Identifier,fraggap)"];
"1000715" [label="(Call,&sk->sk_wmem_alloc)"];
"1000672" [label="(Identifier,alloclen)"];
"1000376" [label="(Call,flags & MSG_MORE)"];
"1001033" [label="(Literal,0)"];
"1000437" [label="(Call,(length + fragheaderlen) > mtu)"];
"1000846" [label="(Call,getfrag(from, data + transhdrlen, offset,\n\t\t\t\t    copy, fraggap, skb) < 0)"];
"1000916" [label="(Call,off = skb->len)"];
"1000511" [label="(Call,cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen)"];
"1000154" [label="(Identifier,tx_flags)"];
"1000945" [label="(Call,i = skb_shinfo(skb)->nr_frags)"];
"1000643" [label="(Identifier,alloclen)"];
"1000151" [label="(Literal,0)"];
"1000379" [label="(Call,rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000835" [label="(Call,data += fraggap)"];
"1000161" [label="(Call,*rt = (struct rt6_info *)cork->dst)"];
"1000476" [label="(Call,udp_get_no_check6_tx(sk))"];
"1000585" [label="(Identifier,length)"];
"1000823" [label="(Literal,0)"];
"1000186" [label="(Identifier,skb)"];
"1000411" [label="(Call,&tx_flags)"];
"1000525" [label="(Identifier,maxfraglen)"];
"1000877" [label="(Identifier,exthdrlen)"];
"1000583" [label="(Identifier,datalen)"];
"1001051" [label="(Call,skb->len += copy)"];
"1001025" [label="(Identifier,pfrag)"];
"1000447" [label="(Call,sk->sk_protocol == IPPROTO_UDP)"];
"1000521" [label="(Identifier,cork)"];
"1001091" [label="(Call,IP6_INC_STATS(sock_net(sk), rt->rt6i_idev, IPSTATS_MIB_OUTDISCARDS))"];
"1000606" [label="(Identifier,fragheaderlen)"];
"1000240" [label="(Call,((mtu - fragheaderlen) & ~7) + fragheaderlen -\n\t\t     sizeof(struct frag_hdr))"];
"1000844" [label="(Identifier,copy)"];
"1000949" [label="(Identifier,skb)"];
"1000475" [label="(Call,!udp_get_no_check6_tx(sk))"];
"1000197" [label="(Identifier,dst_exthdrlen)"];
"1000650" [label="(Identifier,fraggap)"];
"1000817" [label="(Identifier,skb_prev)"];
"1000238" [label="(Call,maxfraglen = ((mtu - fragheaderlen) & ~7) + fragheaderlen -\n\t\t     sizeof(struct frag_hdr))"];
"1000661" [label="(Call,rt->dst.trailer_len)"];
"1000304" [label="(Identifier,IPPROTO_RAW)"];
"1000365" [label="(Identifier,headersize)"];
"1000122" [label="(MethodParameterIn,int length)"];
"1000842" [label="(Call,copy > 0 &&\n\t\t\t    getfrag(from, data + transhdrlen, offset,\n\t\t\t\t    copy, fraggap, skb) < 0)"];
"1000874" [label="(Identifier,transhdrlen)"];
"1000684" [label="(Identifier,copy)"];
"1001056" [label="(Call,skb->data_len += copy)"];
"1001041" [label="(Call,&skb_shinfo(skb)->frags[i - 1])"];
"1000320" [label="(Identifier,maxnonfragsize)"];
"1001090" [label="(Identifier,length)"];
"1000294" [label="(Call,sk->sk_protocol == IPPROTO_UDP ||\n\t     sk->sk_protocol == IPPROTO_RAW)"];
"1000288" [label="(Identifier,mtu)"];
"1000529" [label="(ControlStructure,if (copy < length))"];
"1000610" [label="(Identifier,maxfraglen)"];
"1000289" [label="(Identifier,headersize)"];
"1000800" [label="(Call,skb->transport_header = (skb->network_header +\n\t\t\t\t\t\t fragheaderlen))"];
"1000372" [label="(Identifier,mtu)"];
"1000368" [label="(Call,length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000905" [label="(Call,rt->dst.dev->features&NETIF_F_SG)"];
"1000929" [label="(Identifier,copy)"];
"1000712" [label="(ControlStructure,if (atomic_read(&sk->sk_wmem_alloc) <=\n\t\t\t\t    2 * sk->sk_sndbuf))"];
"1000640" [label="(Identifier,datalen)"];
"1000453" [label="(Call,rt->dst.dev->features & NETIF_F_UFO)"];
"1000852" [label="(Identifier,offset)"];
"1000933" [label="(Block,)"];
"1000214" [label="(Identifier,mtu)"];
"1001018" [label="(Identifier,from)"];
"1000328" [label="(Identifier,mtu)"];
"1000621" [label="(Identifier,flags)"];
"1000593" [label="(Call,cork->length <= mtu)"];
"1001095" [label="(Identifier,rt)"];
"1000358" [label="(Call,sk->sk_protocol == IPPROTO_UDP)"];
"1000898" [label="(Identifier,copy)"];
"1000802" [label="(Identifier,skb)"];
"1000894" [label="(Identifier,skb)"];
"1001020" [label="(Call,page_address(pfrag->page))"];
"1000430" [label="(Call,cork->length)"];
"1000701" [label="(Identifier,hh_len)"];
"1000720" [label="(Literal,2)"];
"1000673" [label="(Call,sizeof(struct frag_hdr))"];
"1000838" [label="(Call,pskb_trim_unique(skb_prev, maxfraglen))"];
"1000895" [label="(ControlStructure,continue;)"];
"1000652" [label="(Call,datalen += rt->dst.trailer_len)"];
"1000204" [label="(Call,rt->rt6i_nfheader_len)"];
"1000890" [label="(Identifier,skb)"];
"1000694" [label="(Block,)"];
"1001017" [label="(Call,getfrag(from,\n\t\t\t\t    page_address(pfrag->page) + pfrag->offset,\n\t\t\t\t    offset, copy, skb->len, skb))"];
"1000744" [label="(Call,!skb)"];
"1000252" [label="(Call,sizeof(struct ipv6hdr) +\n\t\t     (opt ? opt->opt_flen + opt->opt_nflen : 0) +\n\t\t     (dst_allfrag(&rt->dst) ?\n\t\t      sizeof(struct frag_hdr) : 0) +\n\t\t     rt->rt6i_nfheader_len)"];
"1000706" [label="(Identifier,err)"];
"1000416" [label="(Identifier,tx_flags)"];
"1000881" [label="(Literal,0)"];
"1000685" [label="(Literal,0)"];
"1000693" [label="(Identifier,transhdrlen)"];
"1000848" [label="(Identifier,from)"];
"1000503" [label="(ControlStructure,while (length > 0))"];
"1000369" [label="(Call,length <= mtu - headersize)"];
"1000841" [label="(ControlStructure,if (copy > 0 &&\n\t\t\t    getfrag(from, data + transhdrlen, offset,\n\t\t\t\t    copy, fraggap, skb) < 0))"];
"1000948" [label="(Call,skb_shinfo(skb))"];
"1000609" [label="(Call,maxfraglen - fragheaderlen - rt->dst.trailer_len)"];
"1000710" [label="(Identifier,skb)"];
"1000213" [label="(Identifier,orig_mtu)"];
"1000675" [label="(Call,copy = datalen - transhdrlen - fraggap)"];
"1001006" [label="(Identifier,int)"];
"1000974" [label="(Identifier,err)"];
"1001008" [label="(Call,pfrag->size - pfrag->offset)"];
"1000676" [label="(Identifier,copy)"];
"1001073" [label="(Identifier,offset)"];
"1000836" [label="(Identifier,data)"];
"1000355" [label="(Call,transhdrlen && sk->sk_protocol == IPPROTO_UDP &&\n\t    headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1001029" [label="(Call,skb->len)"];
"1000506" [label="(Literal,0)"];
"1001001" [label="(Identifier,pfrag)"];
"1000181" [label="(Identifier,skb)"];
"1000316" [label="(ControlStructure,if (ip6_sk_ignore_df(sk)))"];
"1000185" [label="(Call,!skb)"];
"1001074" [label="(Identifier,copy)"];
"1000209" [label="(Call,cork->fragsize)"];
"1000799" [label="(Identifier,fragheaderlen)"];
"1000560" [label="(ControlStructure,else)"];
"1001094" [label="(Call,rt->rt6i_idev)"];
"1000681" [label="(Identifier,fraggap)"];
"1000969" [label="(Call,pfrag->offset)"];
"1000857" [label="(Block,)"];
"1000564" [label="(ControlStructure,if (!skb || !skb_prev))"];
"1000669" [label="(Identifier,datalen)"];
"1000649" [label="(Identifier,length)"];
"1001015" [label="(ControlStructure,if (getfrag(from,\n\t\t\t\t    page_address(pfrag->page) + pfrag->offset,\n\t\t\t\t    offset, copy, skb->len, skb) < 0))"];
"1000671" [label="(Call,alloclen += sizeof(struct frag_hdr))"];
"1000524" [label="(Identifier,mtu)"];
"1000885" [label="(Identifier,flags)"];
"1000938" [label="(Identifier,err)"];
"1000123" [label="(MethodParameterIn,int transhdrlen)"];
"1000513" [label="(Call,cork->length <= mtu)"];
"1000829" [label="(Call,skb_prev->csum)"];
"1000212" [label="(Call,orig_mtu = mtu)"];
"1000439" [label="(Identifier,length)"];
"1000677" [label="(Call,datalen - transhdrlen - fraggap)"];
"1000140" [label="(Literal,0)"];
"1000505" [label="(Identifier,length)"];
"1001060" [label="(Identifier,copy)"];
"1000922" [label="(Call,getfrag(from, skb_put(skb, copy),\n\t\t\t\t\t\toffset, copy, off, skb) < 0)"];
"1000327" [label="(Identifier,maxnonfragsize)"];
"1000899" [label="(Identifier,length)"];
"1000217" [label="(Call,LL_RESERVED_SPACE(rt->dst.dev))"];
"1000999" [label="(Call,get_page(pfrag->page))"];
"1000341" [label="(Call,ipv6_local_error(sk, EMSGSIZE, fl6,\n\t\t\t\t mtu - headersize +\n\t\t\t\t sizeof(struct ipv6hdr)))"];
"1000500" [label="(Call,!skb)"];
"1000571" [label="(Call,&mtu)"];
"1000555" [label="(Call,skb->len - maxfraglen)"];
"1001009" [label="(Call,pfrag->size)"];
"1000764" [label="(Identifier,skb)"];
"1000821" [label="(Identifier,transhdrlen)"];
"1000579" [label="(Call,skb_prev = skb)"];
"1000245" [label="(Identifier,~7)"];
"1000774" [label="(Identifier,skb)"];
"1000866" [label="(Identifier,offset)"];
"1000300" [label="(Call,sk->sk_protocol == IPPROTO_RAW)"];
"1000287" [label="(Call,mtu - headersize)"];
"1001036" [label="(Call,pfrag->offset)"];
"1000216" [label="(Identifier,hh_len)"];
"1000586" [label="(Identifier,fraggap)"];
"1000865" [label="(Call,offset += copy)"];
"1000582" [label="(Call,datalen = length + fraggap)"];
"1000540" [label="(ControlStructure,if (copy <= 0))"];
"1001039" [label="(Identifier,copy)"];
"1000985" [label="(Call,pfrag->page)"];
"1000190" [label="(Call,opt ? opt->opt_flen : 0)"];
"1001063" [label="(Identifier,skb)"];
"1000795" [label="(Identifier,skb)"];
"1000114" [label="(MethodParameterIn,struct sock *sk)"];
"1000891" [label="(Literal,1)"];
"1000887" [label="(Call,!skb_prev)"];
"1000309" [label="(Call,mtu - headersize +\n\t\t\t\tsizeof(struct ipv6hdr))"];
"1000711" [label="(Identifier,NULL)"];
"1000730" [label="(Identifier,hh_len)"];
"1000380" [label="(Call,rt->dst.dev->features)"];
"1001061" [label="(Call,skb->truesize += copy)"];
"1000638" [label="(Identifier,alloclen)"];
"1000337" [label="(Identifier,maxnonfragsize)"];
"1000534" [label="(Identifier,copy)"];
"1000647" [label="(Identifier,datalen)"];
"1000998" [label="(Identifier,i)"];
"1000441" [label="(Identifier,mtu)"];
"1000790" [label="(Identifier,data)"];
"1000620" [label="(Call,flags & MSG_MORE)"];
"1000248" [label="(Call,sizeof(struct frag_hdr))"];
"1000374" [label="(Call,!(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000244" [label="(Identifier,fragheaderlen)"];
"1000783" [label="(Identifier,skb)"];
"1001012" [label="(Call,pfrag->offset)"];
"1000619" [label="(Call,(flags & MSG_MORE) &&\n\t\t\t    !(rt->dst.dev->features&NETIF_F_SG))"];
"1001067" [label="(Identifier,copy)"];
"1000639" [label="(Call,datalen + fragheaderlen)"];
"1001024" [label="(Call,pfrag->offset)"];
"1000149" [label="(Call,offset = 0)"];
"1000163" [label="(Call,(struct rt6_info *)cork->dst)"];
"1000445" [label="(Identifier,skb)"];
"1000633" [label="(Call,alloclen = mtu)"];
"1000767" [label="(Call,sizeof(struct frag_hdr) +\n\t\t\t\t    dst_exthdrlen)"];
"1000572" [label="(Identifier,mtu)"];
"1000590" [label="(Call,(cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - fragheaderlen)"];
"1000896" [label="(ControlStructure,if (copy > length))"];
"1000391" [label="(Identifier,csummode)"];
"1000347" [label="(Call,headersize +\n\t\t\t\t sizeof(struct ipv6hdr))"];
"1000605" [label="(Identifier,maxfraglen)"];
"1000992" [label="(Call,skb_shinfo(skb)->nr_frags = ++i)"];
"1001044" [label="(Call,skb_shinfo(skb))"];
"1001087" [label="(Call,cork->length)"];
"1000921" [label="(ControlStructure,if (getfrag(from, skb_put(skb, copy),\n\t\t\t\t\t\toffset, copy, off, skb) < 0))"];
"1000923" [label="(Call,getfrag(from, skb_put(skb, copy),\n\t\t\t\t\t\toffset, copy, off, skb))"];
"1000703" [label="(Identifier,flags)"];
"1000670" [label="(Identifier,fragheaderlen)"];
"1000150" [label="(Identifier,offset)"];
"1000436" [label="(Call,((length + fragheaderlen) > mtu) ||\n\t     (skb && skb_is_gso(skb)))"];
"1001042" [label="(Call,skb_shinfo(skb)->frags[i - 1])"];
"1000509" [label="(Identifier,copy)"];
"1000295" [label="(Call,sk->sk_protocol == IPPROTO_UDP)"];
"1000993" [label="(Call,skb_shinfo(skb)->nr_frags)"];
"1000924" [label="(Identifier,from)"];
"1000879" [label="(Call,dst_exthdrlen = 0)"];
"1000247" [label="(Identifier,fragheaderlen)"];
"1000708" [label="(Block,)"];
"1000825" [label="(Call,skb_prev->csum)"];
"1000182" [label="(Call,skb_peek_tail(queue))"];
"1000862" [label="(Call,kfree_skb(skb))"];
"1000514" [label="(Call,cork->length)"];
"1000578" [label="(Identifier,orig_mtu)"];
"1001068" [label="(Call,&sk->sk_wmem_alloc)"];
"1001048" [label="(Identifier,i)"];
"1001065" [label="(Identifier,copy)"];
"1000130" [label="(Call,*skb_prev = NULL)"];
"1000281" [label="(Call,cork->length + length > mtu - headersize)"];
"1000601" [label="(Identifier,cork)"];
"1000955" [label="(ControlStructure,if (!sk_page_frag_refill(sk, pfrag)))"];
"1000680" [label="(Identifier,transhdrlen)"];
"1000611" [label="(Call,fragheaderlen - rt->dst.trailer_len)"];
"1000370" [label="(Identifier,length)"];
"1000775" [label="(FieldIdentifier,tx_flags)"];
"1001050" [label="(Identifier,copy)"];
"1000356" [label="(Identifier,transhdrlen)"];
"1001077" [label="(Identifier,copy)"];
"1000772" [label="(Call,skb_shinfo(skb)->tx_flags)"];
"1000373" [label="(Identifier,headersize)"];
"1000319" [label="(Call,maxnonfragsize = sizeof(struct ipv6hdr) + IPV6_MAXPLEN)"];
"1000820" [label="(Identifier,data)"];
"1000208" [label="(Identifier,mtu)"];
"1001034" [label="(ControlStructure,goto error_efault;)"];
"1000688" [label="(Identifier,err)"];
"1001016" [label="(Call,getfrag(from,\n\t\t\t\t    page_address(pfrag->page) + pfrag->offset,\n\t\t\t\t    offset, copy, skb->len, skb) < 0)"];
"1000729" [label="(Identifier,alloclen)"];
"1001035" -> "1000943"  [label="AST: "];
"1001035" -> "1001039"  [label="CFG: "];
"1001036" -> "1001035"  [label="AST: "];
"1001039" -> "1001035"  [label="AST: "];
"1001045" -> "1001035"  [label="CFG: "];
"1001035" -> "1001100"  [label="DDG: pfrag->offset"];
"1001035" -> "1000963"  [label="DDG: pfrag->offset"];
"1001017" -> "1001035"  [label="DDG: copy"];
"1001008" -> "1001035"  [label="DDG: pfrag->offset"];
"1001017" -> "1001016"  [label="AST: "];
"1001017" -> "1001032"  [label="CFG: "];
"1001018" -> "1001017"  [label="AST: "];
"1001019" -> "1001017"  [label="AST: "];
"1001027" -> "1001017"  [label="AST: "];
"1001028" -> "1001017"  [label="AST: "];
"1001029" -> "1001017"  [label="AST: "];
"1001032" -> "1001017"  [label="AST: "];
"1001033" -> "1001017"  [label="CFG: "];
"1001017" -> "1001100"  [label="DDG: offset"];
"1001017" -> "1001100"  [label="DDG: copy"];
"1001017" -> "1001100"  [label="DDG: from"];
"1001017" -> "1001100"  [label="DDG: page_address(pfrag->page) + pfrag->offset"];
"1001017" -> "1001100"  [label="DDG: skb->len"];
"1001017" -> "1001100"  [label="DDG: skb"];
"1001017" -> "1000847"  [label="DDG: from"];
"1001017" -> "1000923"  [label="DDG: from"];
"1001017" -> "1001016"  [label="DDG: skb->len"];
"1001017" -> "1001016"  [label="DDG: page_address(pfrag->page) + pfrag->offset"];
"1001017" -> "1001016"  [label="DDG: skb"];
"1001017" -> "1001016"  [label="DDG: from"];
"1001017" -> "1001016"  [label="DDG: offset"];
"1001017" -> "1001016"  [label="DDG: copy"];
"1000847" -> "1001017"  [label="DDG: from"];
"1000923" -> "1001017"  [label="DDG: from"];
"1000121" -> "1001017"  [label="DDG: from"];
"1001020" -> "1001017"  [label="DDG: pfrag->page"];
"1001008" -> "1001017"  [label="DDG: pfrag->offset"];
"1000865" -> "1001017"  [label="DDG: offset"];
"1001072" -> "1001017"  [label="DDG: offset"];
"1000149" -> "1001017"  [label="DDG: offset"];
"1001003" -> "1001017"  [label="DDG: copy"];
"1000510" -> "1001017"  [label="DDG: skb->len"];
"1000535" -> "1001017"  [label="DDG: skb->len"];
"1000963" -> "1001017"  [label="DDG: skb"];
"1000994" -> "1001017"  [label="DDG: skb"];
"1001017" -> "1001044"  [label="DDG: skb"];
"1001017" -> "1001040"  [label="DDG: copy"];
"1001017" -> "1001051"  [label="DDG: skb->len"];
"1001017" -> "1001072"  [label="DDG: offset"];
"1000847" -> "1000846"  [label="AST: "];
"1000847" -> "1000855"  [label="CFG: "];
"1000848" -> "1000847"  [label="AST: "];
"1000849" -> "1000847"  [label="AST: "];
"1000852" -> "1000847"  [label="AST: "];
"1000853" -> "1000847"  [label="AST: "];
"1000854" -> "1000847"  [label="AST: "];
"1000855" -> "1000847"  [label="AST: "];
"1000856" -> "1000847"  [label="CFG: "];
"1000847" -> "1001100"  [label="DDG: data + transhdrlen"];
"1000847" -> "1001100"  [label="DDG: copy"];
"1000847" -> "1001100"  [label="DDG: offset"];
"1000847" -> "1001100"  [label="DDG: from"];
"1000847" -> "1001100"  [label="DDG: fraggap"];
"1000847" -> "1000846"  [label="DDG: data + transhdrlen"];
"1000847" -> "1000846"  [label="DDG: skb"];
"1000847" -> "1000846"  [label="DDG: fraggap"];
"1000847" -> "1000846"  [label="DDG: copy"];
"1000847" -> "1000846"  [label="DDG: from"];
"1000847" -> "1000846"  [label="DDG: offset"];
"1000923" -> "1000847"  [label="DDG: from"];
"1000121" -> "1000847"  [label="DDG: from"];
"1000835" -> "1000847"  [label="DDG: data"];
"1000797" -> "1000847"  [label="DDG: data"];
"1000679" -> "1000847"  [label="DDG: transhdrlen"];
"1000679" -> "1000847"  [label="DDG: fraggap"];
"1000123" -> "1000847"  [label="DDG: transhdrlen"];
"1000865" -> "1000847"  [label="DDG: offset"];
"1001072" -> "1000847"  [label="DDG: offset"];
"1000149" -> "1000847"  [label="DDG: offset"];
"1000843" -> "1000847"  [label="DDG: copy"];
"1000816" -> "1000847"  [label="DDG: fraggap"];
"1000794" -> "1000847"  [label="DDG: skb"];
"1000847" -> "1000862"  [label="DDG: skb"];
"1000847" -> "1000865"  [label="DDG: copy"];
"1000847" -> "1000865"  [label="DDG: offset"];
"1000847" -> "1000870"  [label="DDG: fraggap"];
"1000847" -> "1000889"  [label="DDG: skb"];
"1000847" -> "1000892"  [label="DDG: skb"];
"1000847" -> "1000923"  [label="DDG: from"];
"1000923" -> "1000922"  [label="AST: "];
"1000923" -> "1000931"  [label="CFG: "];
"1000924" -> "1000923"  [label="AST: "];
"1000925" -> "1000923"  [label="AST: "];
"1000928" -> "1000923"  [label="AST: "];
"1000929" -> "1000923"  [label="AST: "];
"1000930" -> "1000923"  [label="AST: "];
"1000931" -> "1000923"  [label="AST: "];
"1000932" -> "1000923"  [label="CFG: "];
"1000923" -> "1001100"  [label="DDG: skb_put(skb, copy)"];
"1000923" -> "1001100"  [label="DDG: copy"];
"1000923" -> "1001100"  [label="DDG: off"];
"1000923" -> "1001100"  [label="DDG: offset"];
"1000923" -> "1001100"  [label="DDG: skb"];
"1000923" -> "1001100"  [label="DDG: from"];
"1000923" -> "1000566"  [label="DDG: skb"];
"1000923" -> "1000922"  [label="DDG: off"];
"1000923" -> "1000922"  [label="DDG: copy"];
"1000923" -> "1000922"  [label="DDG: skb_put(skb, copy)"];
"1000923" -> "1000922"  [label="DDG: from"];
"1000923" -> "1000922"  [label="DDG: offset"];
"1000923" -> "1000922"  [label="DDG: skb"];
"1000121" -> "1000923"  [label="DDG: from"];
"1000925" -> "1000923"  [label="DDG: skb"];
"1000925" -> "1000923"  [label="DDG: copy"];
"1000923" -> "1000925"  [label="DDG: skb"];
"1000865" -> "1000923"  [label="DDG: offset"];
"1001072" -> "1000923"  [label="DDG: offset"];
"1000149" -> "1000923"  [label="DDG: offset"];
"1000916" -> "1000923"  [label="DDG: off"];
"1000923" -> "1000934"  [label="DDG: skb"];
"1000923" -> "1000934"  [label="DDG: off"];
"1000923" -> "1000948"  [label="DDG: skb"];
"1000923" -> "1001072"  [label="DDG: copy"];
"1000923" -> "1001072"  [label="DDG: offset"];
"1000923" -> "1001075"  [label="DDG: copy"];
"1000121" -> "1000113"  [label="AST: "];
"1000121" -> "1001100"  [label="DDG: from"];
"1000121" -> "1000481"  [label="DDG: from"];
"1000925" -> "1000927"  [label="CFG: "];
"1000926" -> "1000925"  [label="AST: "];
"1000927" -> "1000925"  [label="AST: "];
"1000928" -> "1000925"  [label="CFG: "];
"1001044" -> "1000925"  [label="DDG: skb"];
"1000892" -> "1000925"  [label="DDG: skb"];
"1000500" -> "1000925"  [label="DDG: skb"];
"1000897" -> "1000925"  [label="DDG: copy"];
"1000900" -> "1000925"  [label="DDG: copy"];
"1001044" -> "1001043"  [label="AST: "];
"1001044" -> "1001045"  [label="CFG: "];
"1001045" -> "1001044"  [label="AST: "];
"1001046" -> "1001044"  [label="CFG: "];
"1001044" -> "1001100"  [label="DDG: skb"];
"1001044" -> "1000566"  [label="DDG: skb"];
"1001044" -> "1000948"  [label="DDG: skb"];
"1000892" -> "1000544"  [label="AST: "];
"1000892" -> "1000894"  [label="CFG: "];
"1000893" -> "1000892"  [label="AST: "];
"1000894" -> "1000892"  [label="AST: "];
"1000895" -> "1000892"  [label="CFG: "];
"1000892" -> "1001100"  [label="DDG: queue"];
"1000892" -> "1001100"  [label="DDG: __skb_queue_tail(queue, skb)"];
"1000892" -> "1001100"  [label="DDG: skb"];
"1000892" -> "1000566"  [label="DDG: skb"];
"1000182" -> "1000892"  [label="DDG: queue"];
"1000116" -> "1000892"  [label="DDG: queue"];
"1000794" -> "1000892"  [label="DDG: skb"];
"1000889" -> "1000892"  [label="DDG: skb"];
"1000892" -> "1000948"  [label="DDG: skb"];
"1000182" -> "1000180"  [label="AST: "];
"1000182" -> "1000183"  [label="CFG: "];
"1000183" -> "1000182"  [label="AST: "];
"1000180" -> "1000182"  [label="CFG: "];
"1000182" -> "1001100"  [label="DDG: queue"];
"1000182" -> "1000180"  [label="DDG: queue"];
"1000116" -> "1000182"  [label="DDG: queue"];
"1000182" -> "1000481"  [label="DDG: queue"];
"1000116" -> "1000113"  [label="AST: "];
"1000116" -> "1001100"  [label="DDG: queue"];
"1000116" -> "1000481"  [label="DDG: queue"];
"1000794" -> "1000544"  [label="AST: "];
"1000794" -> "1000796"  [label="CFG: "];
"1000795" -> "1000794"  [label="AST: "];
"1000796" -> "1000794"  [label="AST: "];
"1000798" -> "1000794"  [label="CFG: "];
"1000794" -> "1001100"  [label="DDG: exthdrlen"];
"1000794" -> "1001100"  [label="DDG: skb_set_network_header(skb, exthdrlen)"];
"1000791" -> "1000794"  [label="DDG: skb"];
"1000188" -> "1000794"  [label="DDG: exthdrlen"];
"1000138" -> "1000794"  [label="DDG: exthdrlen"];
"1000876" -> "1000794"  [label="DDG: exthdrlen"];
"1000794" -> "1000862"  [label="DDG: skb"];
"1000794" -> "1000889"  [label="DDG: skb"];
"1000791" -> "1000789"  [label="AST: "];
"1000791" -> "1000793"  [label="CFG: "];
"1000792" -> "1000791"  [label="AST: "];
"1000793" -> "1000791"  [label="AST: "];
"1000789" -> "1000791"  [label="CFG: "];
"1000791" -> "1001100"  [label="DDG: fraglen"];
"1000791" -> "1000789"  [label="DDG: skb"];
"1000791" -> "1000789"  [label="DDG: fraglen"];
"1000782" -> "1000791"  [label="DDG: skb"];
"1000666" -> "1000791"  [label="DDG: fraglen"];
"1000782" -> "1000781"  [label="AST: "];
"1000782" -> "1000783"  [label="CFG: "];
"1000783" -> "1000782"  [label="AST: "];
"1000784" -> "1000782"  [label="CFG: "];
"1000773" -> "1000782"  [label="DDG: skb"];
"1000773" -> "1000772"  [label="AST: "];
"1000773" -> "1000774"  [label="CFG: "];
"1000774" -> "1000773"  [label="AST: "];
"1000775" -> "1000773"  [label="CFG: "];
"1000763" -> "1000773"  [label="DDG: skb"];
"1000763" -> "1000544"  [label="AST: "];
"1000763" -> "1000765"  [label="CFG: "];
"1000764" -> "1000763"  [label="AST: "];
"1000765" -> "1000763"  [label="AST: "];
"1000774" -> "1000763"  [label="CFG: "];
"1000763" -> "1001100"  [label="DDG: skb_reserve(skb, hh_len + sizeof(struct frag_hdr) +\n\t\t\t\t    dst_exthdrlen)"];
"1000763" -> "1001100"  [label="DDG: hh_len + sizeof(struct frag_hdr) +\n\t\t\t\t    dst_exthdrlen"];
"1000744" -> "1000763"  [label="DDG: skb"];
"1000215" -> "1000763"  [label="DDG: hh_len"];
"1000196" -> "1000763"  [label="DDG: dst_exthdrlen"];
"1000142" -> "1000763"  [label="DDG: dst_exthdrlen"];
"1000879" -> "1000763"  [label="DDG: dst_exthdrlen"];
"1000744" -> "1000743"  [label="AST: "];
"1000744" -> "1000745"  [label="CFG: "];
"1000745" -> "1000744"  [label="AST: "];
"1000746" -> "1000744"  [label="CFG: "];
"1000749" -> "1000744"  [label="CFG: "];
"1000744" -> "1001100"  [label="DDG: !skb"];
"1000744" -> "1001100"  [label="DDG: skb"];
"1000695" -> "1000744"  [label="DDG: skb"];
"1000737" -> "1000744"  [label="DDG: skb"];
"1000695" -> "1000694"  [label="AST: "];
"1000695" -> "1000697"  [label="CFG: "];
"1000696" -> "1000695"  [label="AST: "];
"1000697" -> "1000695"  [label="AST: "];
"1000745" -> "1000695"  [label="CFG: "];
"1000695" -> "1001100"  [label="DDG: sock_alloc_send_skb(sk,\n \t\t\t\t\t\talloclen + hh_len,\n\t\t\t\t\t\t(flags & MSG_DONTWAIT), &err)"];
"1000697" -> "1000695"  [label="DDG: sk"];
"1000697" -> "1000695"  [label="DDG: alloclen + hh_len"];
"1000697" -> "1000695"  [label="DDG: flags & MSG_DONTWAIT"];
"1000697" -> "1000695"  [label="DDG: &err"];
"1000697" -> "1000705"  [label="CFG: "];
"1000698" -> "1000697"  [label="AST: "];
"1000699" -> "1000697"  [label="AST: "];
"1000702" -> "1000697"  [label="AST: "];
"1000705" -> "1000697"  [label="AST: "];
"1000697" -> "1001100"  [label="DDG: alloclen + hh_len"];
"1000697" -> "1001100"  [label="DDG: &err"];
"1000697" -> "1001100"  [label="DDG: flags & MSG_DONTWAIT"];
"1000697" -> "1001100"  [label="DDG: sk"];
"1000317" -> "1000697"  [label="DDG: sk"];
"1000406" -> "1000697"  [label="DDG: sk"];
"1000957" -> "1000697"  [label="DDG: sk"];
"1000476" -> "1000697"  [label="DDG: sk"];
"1000726" -> "1000697"  [label="DDG: sk"];
"1000114" -> "1000697"  [label="DDG: sk"];
"1000671" -> "1000697"  [label="DDG: alloclen"];
"1000215" -> "1000697"  [label="DDG: hh_len"];
"1000702" -> "1000697"  [label="DDG: flags"];
"1000702" -> "1000697"  [label="DDG: MSG_DONTWAIT"];
"1000697" -> "1000726"  [label="DDG: sk"];
"1000697" -> "1000957"  [label="DDG: sk"];
"1000697" -> "1001092"  [label="DDG: sk"];
"1000317" -> "1000316"  [label="AST: "];
"1000317" -> "1000318"  [label="CFG: "];
"1000318" -> "1000317"  [label="AST: "];
"1000320" -> "1000317"  [label="CFG: "];
"1000327" -> "1000317"  [label="CFG: "];
"1000317" -> "1001100"  [label="DDG: sk"];
"1000317" -> "1001100"  [label="DDG: ip6_sk_ignore_df(sk)"];
"1000114" -> "1000317"  [label="DDG: sk"];
"1000317" -> "1000341"  [label="DDG: sk"];
"1000317" -> "1000406"  [label="DDG: sk"];
"1000317" -> "1000476"  [label="DDG: sk"];
"1000317" -> "1000481"  [label="DDG: sk"];
"1000317" -> "1000726"  [label="DDG: sk"];
"1000317" -> "1000957"  [label="DDG: sk"];
"1000317" -> "1001092"  [label="DDG: sk"];
"1000114" -> "1000113"  [label="AST: "];
"1000114" -> "1001100"  [label="DDG: sk"];
"1000114" -> "1000306"  [label="DDG: sk"];
"1000114" -> "1000341"  [label="DDG: sk"];
"1000114" -> "1000406"  [label="DDG: sk"];
"1000114" -> "1000476"  [label="DDG: sk"];
"1000114" -> "1000481"  [label="DDG: sk"];
"1000114" -> "1000726"  [label="DDG: sk"];
"1000114" -> "1000957"  [label="DDG: sk"];
"1000114" -> "1001092"  [label="DDG: sk"];
"1000406" -> "1000405"  [label="AST: "];
"1000406" -> "1000411"  [label="CFG: "];
"1000407" -> "1000406"  [label="AST: "];
"1000408" -> "1000406"  [label="AST: "];
"1000411" -> "1000406"  [label="AST: "];
"1000416" -> "1000406"  [label="CFG: "];
"1000406" -> "1001100"  [label="DDG: &tx_flags"];
"1000406" -> "1001100"  [label="DDG: sk"];
"1000406" -> "1001100"  [label="DDG: sockc->tsflags"];
"1000406" -> "1001100"  [label="DDG: sock_tx_timestamp(sk, sockc->tsflags, &tx_flags)"];
"1000406" -> "1000476"  [label="DDG: sk"];
"1000406" -> "1000481"  [label="DDG: sk"];
"1000406" -> "1000726"  [label="DDG: sk"];
"1000406" -> "1000957"  [label="DDG: sk"];
"1000406" -> "1001092"  [label="DDG: sk"];
"1000957" -> "1000956"  [label="AST: "];
"1000957" -> "1000959"  [label="CFG: "];
"1000958" -> "1000957"  [label="AST: "];
"1000959" -> "1000957"  [label="AST: "];
"1000956" -> "1000957"  [label="CFG: "];
"1000957" -> "1001100"  [label="DDG: sk"];
"1000957" -> "1001100"  [label="DDG: pfrag"];
"1000957" -> "1000726"  [label="DDG: sk"];
"1000957" -> "1000956"  [label="DDG: sk"];
"1000957" -> "1000956"  [label="DDG: pfrag"];
"1000476" -> "1000957"  [label="DDG: sk"];
"1000726" -> "1000957"  [label="DDG: sk"];
"1000119" -> "1000957"  [label="DDG: pfrag"];
"1000957" -> "1001092"  [label="DDG: sk"];
"1000476" -> "1000475"  [label="AST: "];
"1000476" -> "1000477"  [label="CFG: "];
"1000477" -> "1000476"  [label="AST: "];
"1000475" -> "1000476"  [label="CFG: "];
"1000476" -> "1001100"  [label="DDG: sk"];
"1000476" -> "1000475"  [label="DDG: sk"];
"1000476" -> "1000481"  [label="DDG: sk"];
"1000476" -> "1000726"  [label="DDG: sk"];
"1000476" -> "1001092"  [label="DDG: sk"];
"1000726" -> "1000724"  [label="AST: "];
"1000726" -> "1000732"  [label="CFG: "];
"1000727" -> "1000726"  [label="AST: "];
"1000728" -> "1000726"  [label="AST: "];
"1000731" -> "1000726"  [label="AST: "];
"1000732" -> "1000726"  [label="AST: "];
"1000724" -> "1000726"  [label="CFG: "];
"1000726" -> "1001100"  [label="DDG: sk"];
"1000726" -> "1001100"  [label="DDG: alloclen + hh_len"];
"1000726" -> "1001100"  [label="DDG: sk->sk_allocation"];
"1000726" -> "1000724"  [label="DDG: sk"];
"1000726" -> "1000724"  [label="DDG: alloclen + hh_len"];
"1000726" -> "1000724"  [label="DDG: 1"];
"1000726" -> "1000724"  [label="DDG: sk->sk_allocation"];
"1000671" -> "1000726"  [label="DDG: alloclen"];
"1000215" -> "1000726"  [label="DDG: hh_len"];
"1000726" -> "1001092"  [label="DDG: sk"];
"1000671" -> "1000544"  [label="AST: "];
"1000671" -> "1000673"  [label="CFG: "];
"1000672" -> "1000671"  [label="AST: "];
"1000673" -> "1000671"  [label="AST: "];
"1000676" -> "1000671"  [label="CFG: "];
"1000671" -> "1001100"  [label="DDG: alloclen"];
"1000659" -> "1000671"  [label="DDG: alloclen"];
"1000671" -> "1000699"  [label="DDG: alloclen"];
"1000671" -> "1000728"  [label="DDG: alloclen"];
"1000659" -> "1000544"  [label="AST: "];
"1000659" -> "1000661"  [label="CFG: "];
"1000660" -> "1000659"  [label="AST: "];
"1000661" -> "1000659"  [label="AST: "];
"1000667" -> "1000659"  [label="CFG: "];
"1000659" -> "1001100"  [label="DDG: rt->dst.trailer_len"];
"1000611" -> "1000659"  [label="DDG: rt->dst.trailer_len"];
"1000642" -> "1000659"  [label="DDG: alloclen"];
"1000611" -> "1000609"  [label="AST: "];
"1000611" -> "1000613"  [label="CFG: "];
"1000612" -> "1000611"  [label="AST: "];
"1000613" -> "1000611"  [label="AST: "];
"1000609" -> "1000611"  [label="CFG: "];
"1000611" -> "1000570"  [label="DDG: fragheaderlen"];
"1000611" -> "1000590"  [label="DDG: fragheaderlen"];
"1000611" -> "1000609"  [label="DDG: fragheaderlen"];
"1000611" -> "1000609"  [label="DDG: rt->dst.trailer_len"];
"1000590" -> "1000611"  [label="DDG: fragheaderlen"];
"1000611" -> "1000637"  [label="DDG: fragheaderlen"];
"1000611" -> "1000639"  [label="DDG: fragheaderlen"];
"1000611" -> "1000652"  [label="DDG: rt->dst.trailer_len"];
"1000611" -> "1000666"  [label="DDG: fragheaderlen"];
"1000611" -> "1000668"  [label="DDG: fragheaderlen"];
"1000611" -> "1000797"  [label="DDG: fragheaderlen"];
"1000611" -> "1000800"  [label="DDG: fragheaderlen"];
"1000611" -> "1000804"  [label="DDG: fragheaderlen"];
"1000590" -> "1000588"  [label="AST: "];
"1000590" -> "1000606"  [label="CFG: "];
"1000591" -> "1000590"  [label="AST: "];
"1000606" -> "1000590"  [label="AST: "];
"1000588" -> "1000590"  [label="CFG: "];
"1000590" -> "1001100"  [label="DDG: cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen"];
"1000590" -> "1000570"  [label="DDG: fragheaderlen"];
"1000590" -> "1000588"  [label="DDG: cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen"];
"1000590" -> "1000588"  [label="DDG: fragheaderlen"];
"1000593" -> "1000590"  [label="DDG: mtu"];
"1000238" -> "1000590"  [label="DDG: maxfraglen"];
"1000535" -> "1000590"  [label="DDG: maxfraglen"];
"1000555" -> "1000590"  [label="DDG: maxfraglen"];
"1000570" -> "1000590"  [label="DDG: fragheaderlen"];
"1000246" -> "1000590"  [label="DDG: fragheaderlen"];
"1000590" -> "1000637"  [label="DDG: fragheaderlen"];
"1000590" -> "1000639"  [label="DDG: fragheaderlen"];
"1000590" -> "1000666"  [label="DDG: fragheaderlen"];
"1000590" -> "1000668"  [label="DDG: fragheaderlen"];
"1000590" -> "1000797"  [label="DDG: fragheaderlen"];
"1000590" -> "1000800"  [label="DDG: fragheaderlen"];
"1000590" -> "1000804"  [label="DDG: fragheaderlen"];
"1000593" -> "1000592"  [label="AST: "];
"1000593" -> "1000597"  [label="CFG: "];
"1000594" -> "1000593"  [label="AST: "];
"1000597" -> "1000593"  [label="AST: "];
"1000601" -> "1000593"  [label="CFG: "];
"1000592" -> "1000593"  [label="CFG: "];
"1000593" -> "1001100"  [label="DDG: cork->length"];
"1000593" -> "1000513"  [label="DDG: cork->length"];
"1000593" -> "1000513"  [label="DDG: mtu"];
"1000593" -> "1000592"  [label="DDG: cork->length"];
"1000593" -> "1000592"  [label="DDG: mtu"];
"1000513" -> "1000593"  [label="DDG: cork->length"];
"1000513" -> "1000593"  [label="DDG: mtu"];
"1000429" -> "1000593"  [label="DDG: cork->length"];
"1000437" -> "1000593"  [label="DDG: mtu"];
"1000593" -> "1000591"  [label="DDG: mtu"];
"1000593" -> "1000633"  [label="DDG: mtu"];
"1000593" -> "1001086"  [label="DDG: cork->length"];
"1000513" -> "1000512"  [label="AST: "];
"1000513" -> "1000517"  [label="CFG: "];
"1000514" -> "1000513"  [label="AST: "];
"1000517" -> "1000513"  [label="AST: "];
"1000521" -> "1000513"  [label="CFG: "];
"1000512" -> "1000513"  [label="CFG: "];
"1000513" -> "1001100"  [label="DDG: cork->length"];
"1000513" -> "1000510"  [label="DDG: mtu"];
"1000513" -> "1000512"  [label="DDG: cork->length"];
"1000513" -> "1000512"  [label="DDG: mtu"];
"1000429" -> "1000513"  [label="DDG: cork->length"];
"1000437" -> "1000513"  [label="DDG: mtu"];
"1000513" -> "1000511"  [label="DDG: mtu"];
"1000513" -> "1001086"  [label="DDG: cork->length"];
"1000429" -> "1000127"  [label="AST: "];
"1000429" -> "1000433"  [label="CFG: "];
"1000430" -> "1000429"  [label="AST: "];
"1000433" -> "1000429"  [label="AST: "];
"1000439" -> "1000429"  [label="CFG: "];
"1000429" -> "1001100"  [label="DDG: cork->length"];
"1000369" -> "1000429"  [label="DDG: length"];
"1000122" -> "1000429"  [label="DDG: length"];
"1000429" -> "1001086"  [label="DDG: cork->length"];
"1000369" -> "1000368"  [label="AST: "];
"1000369" -> "1000371"  [label="CFG: "];
"1000370" -> "1000369"  [label="AST: "];
"1000371" -> "1000369"  [label="AST: "];
"1000377" -> "1000369"  [label="CFG: "];
"1000368" -> "1000369"  [label="CFG: "];
"1000369" -> "1001100"  [label="DDG: mtu - headersize"];
"1000369" -> "1000368"  [label="DDG: length"];
"1000369" -> "1000368"  [label="DDG: mtu - headersize"];
"1000122" -> "1000369"  [label="DDG: length"];
"1000371" -> "1000369"  [label="DDG: mtu"];
"1000371" -> "1000369"  [label="DDG: headersize"];
"1000369" -> "1000437"  [label="DDG: length"];
"1000369" -> "1000438"  [label="DDG: length"];
"1000369" -> "1000481"  [label="DDG: length"];
"1000369" -> "1000504"  [label="DDG: length"];
"1000369" -> "1000582"  [label="DDG: length"];
"1000369" -> "1000584"  [label="DDG: length"];
"1000369" -> "1000646"  [label="DDG: length"];
"1000369" -> "1000648"  [label="DDG: length"];
"1000369" -> "1000868"  [label="DDG: length"];
"1000369" -> "1001086"  [label="DDG: length"];
"1000122" -> "1000113"  [label="AST: "];
"1000122" -> "1001100"  [label="DDG: length"];
"1000122" -> "1000281"  [label="DDG: length"];
"1000122" -> "1000282"  [label="DDG: length"];
"1000122" -> "1000330"  [label="DDG: length"];
"1000122" -> "1000331"  [label="DDG: length"];
"1000122" -> "1000437"  [label="DDG: length"];
"1000122" -> "1000438"  [label="DDG: length"];
"1000122" -> "1000481"  [label="DDG: length"];
"1000122" -> "1000504"  [label="DDG: length"];
"1000122" -> "1000530"  [label="DDG: length"];
"1000122" -> "1000582"  [label="DDG: length"];
"1000122" -> "1000584"  [label="DDG: length"];
"1000122" -> "1000646"  [label="DDG: length"];
"1000122" -> "1000648"  [label="DDG: length"];
"1000122" -> "1000868"  [label="DDG: length"];
"1000122" -> "1000897"  [label="DDG: length"];
"1000122" -> "1000900"  [label="DDG: length"];
"1000122" -> "1001075"  [label="DDG: length"];
"1000122" -> "1001086"  [label="DDG: length"];
"1000371" -> "1000373"  [label="CFG: "];
"1000372" -> "1000371"  [label="AST: "];
"1000373" -> "1000371"  [label="AST: "];
"1000371" -> "1001100"  [label="DDG: headersize"];
"1000287" -> "1000371"  [label="DDG: mtu"];
"1000364" -> "1000371"  [label="DDG: headersize"];
"1000371" -> "1000437"  [label="DDG: mtu"];
"1000287" -> "1000281"  [label="AST: "];
"1000287" -> "1000289"  [label="CFG: "];
"1000288" -> "1000287"  [label="AST: "];
"1000289" -> "1000287"  [label="AST: "];
"1000281" -> "1000287"  [label="CFG: "];
"1000287" -> "1000281"  [label="DDG: mtu"];
"1000287" -> "1000281"  [label="DDG: headersize"];
"1000242" -> "1000287"  [label="DDG: mtu"];
"1000250" -> "1000287"  [label="DDG: headersize"];
"1000287" -> "1000309"  [label="DDG: mtu"];
"1000287" -> "1000309"  [label="DDG: headersize"];
"1000287" -> "1000311"  [label="DDG: headersize"];
"1000287" -> "1000326"  [label="DDG: mtu"];
"1000287" -> "1000336"  [label="DDG: headersize"];
"1000287" -> "1000345"  [label="DDG: mtu"];
"1000287" -> "1000345"  [label="DDG: headersize"];
"1000287" -> "1000347"  [label="DDG: headersize"];
"1000287" -> "1000437"  [label="DDG: mtu"];
"1000242" -> "1000241"  [label="AST: "];
"1000242" -> "1000244"  [label="CFG: "];
"1000243" -> "1000242"  [label="AST: "];
"1000244" -> "1000242"  [label="AST: "];
"1000245" -> "1000242"  [label="CFG: "];
"1000242" -> "1000241"  [label="DDG: mtu"];
"1000242" -> "1000241"  [label="DDG: fragheaderlen"];
"1000207" -> "1000242"  [label="DDG: mtu"];
"1000223" -> "1000242"  [label="DDG: fragheaderlen"];
"1000242" -> "1000246"  [label="DDG: fragheaderlen"];
"1000207" -> "1000127"  [label="AST: "];
"1000207" -> "1000209"  [label="CFG: "];
"1000208" -> "1000207"  [label="AST: "];
"1000209" -> "1000207"  [label="AST: "];
"1000213" -> "1000207"  [label="CFG: "];
"1000207" -> "1001100"  [label="DDG: cork->fragsize"];
"1000207" -> "1000212"  [label="DDG: mtu"];
"1000223" -> "1000127"  [label="AST: "];
"1000223" -> "1000225"  [label="CFG: "];
"1000224" -> "1000223"  [label="AST: "];
"1000225" -> "1000223"  [label="AST: "];
"1000239" -> "1000223"  [label="CFG: "];
"1000223" -> "1001100"  [label="DDG: sizeof(struct ipv6hdr) + rt->rt6i_nfheader_len +\n\t\t\t(opt ? opt->opt_nflen : 0)"];
"1000198" -> "1000223"  [label="DDG: rt->rt6i_nfheader_len"];
"1000198" -> "1000196"  [label="AST: "];
"1000198" -> "1000204"  [label="CFG: "];
"1000199" -> "1000198"  [label="AST: "];
"1000204" -> "1000198"  [label="AST: "];
"1000196" -> "1000198"  [label="CFG: "];
"1000198" -> "1001100"  [label="DDG: rt->dst.header_len"];
"1000198" -> "1000196"  [label="DDG: rt->dst.header_len"];
"1000198" -> "1000196"  [label="DDG: rt->rt6i_nfheader_len"];
"1000198" -> "1000225"  [label="DDG: rt->rt6i_nfheader_len"];
"1000198" -> "1000228"  [label="DDG: rt->rt6i_nfheader_len"];
"1000198" -> "1000250"  [label="DDG: rt->rt6i_nfheader_len"];
"1000198" -> "1000252"  [label="DDG: rt->rt6i_nfheader_len"];
"1000198" -> "1000255"  [label="DDG: rt->rt6i_nfheader_len"];
"1000198" -> "1000266"  [label="DDG: rt->rt6i_nfheader_len"];
"1000250" -> "1000127"  [label="AST: "];
"1000250" -> "1000252"  [label="CFG: "];
"1000251" -> "1000250"  [label="AST: "];
"1000252" -> "1000250"  [label="AST: "];
"1000284" -> "1000250"  [label="CFG: "];
"1000250" -> "1001100"  [label="DDG: sizeof(struct ipv6hdr) +\n\t\t     (opt ? opt->opt_flen + opt->opt_nflen : 0) +\n\t\t     (dst_allfrag(&rt->dst) ?\n\t\t      sizeof(struct frag_hdr) : 0) +\n\t\t     rt->rt6i_nfheader_len"];
"1000364" -> "1000363"  [label="AST: "];
"1000364" -> "1000366"  [label="CFG: "];
"1000365" -> "1000364"  [label="AST: "];
"1000366" -> "1000364"  [label="AST: "];
"1000370" -> "1000364"  [label="CFG: "];
"1000363" -> "1000364"  [label="CFG: "];
"1000364" -> "1001100"  [label="DDG: headersize"];
"1000364" -> "1000363"  [label="DDG: headersize"];
"1000336" -> "1000364"  [label="DDG: headersize"];
"1000336" -> "1000330"  [label="AST: "];
"1000336" -> "1000338"  [label="CFG: "];
"1000337" -> "1000336"  [label="AST: "];
"1000338" -> "1000336"  [label="AST: "];
"1000330" -> "1000336"  [label="CFG: "];
"1000336" -> "1001100"  [label="DDG: headersize"];
"1000336" -> "1001100"  [label="DDG: maxnonfragsize"];
"1000336" -> "1000330"  [label="DDG: maxnonfragsize"];
"1000336" -> "1000330"  [label="DDG: headersize"];
"1000326" -> "1000336"  [label="DDG: maxnonfragsize"];
"1000319" -> "1000336"  [label="DDG: maxnonfragsize"];
"1000336" -> "1000345"  [label="DDG: headersize"];
"1000336" -> "1000347"  [label="DDG: headersize"];
"1000326" -> "1000325"  [label="AST: "];
"1000326" -> "1000328"  [label="CFG: "];
"1000327" -> "1000326"  [label="AST: "];
"1000328" -> "1000326"  [label="AST: "];
"1000333" -> "1000326"  [label="CFG: "];
"1000319" -> "1000316"  [label="AST: "];
"1000319" -> "1000321"  [label="CFG: "];
"1000320" -> "1000319"  [label="AST: "];
"1000321" -> "1000319"  [label="AST: "];
"1000333" -> "1000319"  [label="CFG: "];
"1000319" -> "1001100"  [label="DDG: sizeof(struct ipv6hdr) + IPV6_MAXPLEN"];
"1000437" -> "1000436"  [label="AST: "];
"1000437" -> "1000441"  [label="CFG: "];
"1000438" -> "1000437"  [label="AST: "];
"1000441" -> "1000437"  [label="AST: "];
"1000443" -> "1000437"  [label="CFG: "];
"1000436" -> "1000437"  [label="CFG: "];
"1000437" -> "1001100"  [label="DDG: length + fragheaderlen"];
"1000437" -> "1001100"  [label="DDG: mtu"];
"1000437" -> "1000436"  [label="DDG: length + fragheaderlen"];
"1000437" -> "1000436"  [label="DDG: mtu"];
"1000246" -> "1000437"  [label="DDG: fragheaderlen"];
"1000437" -> "1000481"  [label="DDG: mtu"];
"1000246" -> "1000240"  [label="AST: "];
"1000246" -> "1000248"  [label="CFG: "];
"1000247" -> "1000246"  [label="AST: "];
"1000248" -> "1000246"  [label="AST: "];
"1000240" -> "1000246"  [label="CFG: "];
"1000246" -> "1001100"  [label="DDG: fragheaderlen"];
"1000246" -> "1000238"  [label="DDG: fragheaderlen"];
"1000246" -> "1000240"  [label="DDG: fragheaderlen"];
"1000246" -> "1000438"  [label="DDG: fragheaderlen"];
"1000246" -> "1000481"  [label="DDG: fragheaderlen"];
"1000246" -> "1000570"  [label="DDG: fragheaderlen"];
"1000238" -> "1000127"  [label="AST: "];
"1000238" -> "1000240"  [label="CFG: "];
"1000239" -> "1000238"  [label="AST: "];
"1000240" -> "1000238"  [label="AST: "];
"1000251" -> "1000238"  [label="CFG: "];
"1000238" -> "1001100"  [label="DDG: maxfraglen"];
"1000238" -> "1001100"  [label="DDG: ((mtu - fragheaderlen) & ~7) + fragheaderlen -\n\t\t     sizeof(struct frag_hdr)"];
"1000241" -> "1000238"  [label="DDG: mtu - fragheaderlen"];
"1000241" -> "1000238"  [label="DDG: ~7"];
"1000238" -> "1000510"  [label="DDG: maxfraglen"];
"1000238" -> "1000511"  [label="DDG: maxfraglen"];
"1000238" -> "1000535"  [label="DDG: maxfraglen"];
"1000238" -> "1000555"  [label="DDG: maxfraglen"];
"1000238" -> "1000591"  [label="DDG: maxfraglen"];
"1000238" -> "1000609"  [label="DDG: maxfraglen"];
"1000238" -> "1000816"  [label="DDG: maxfraglen"];
"1000241" -> "1000240"  [label="AST: "];
"1000241" -> "1000245"  [label="CFG: "];
"1000245" -> "1000241"  [label="AST: "];
"1000247" -> "1000241"  [label="CFG: "];
"1000241" -> "1001100"  [label="DDG: mtu - fragheaderlen"];
"1000241" -> "1001100"  [label="DDG: ~7"];
"1000241" -> "1000240"  [label="DDG: mtu - fragheaderlen"];
"1000241" -> "1000240"  [label="DDG: ~7"];
"1000535" -> "1000533"  [label="AST: "];
"1000535" -> "1000537"  [label="CFG: "];
"1000536" -> "1000535"  [label="AST: "];
"1000537" -> "1000535"  [label="AST: "];
"1000533" -> "1000535"  [label="CFG: "];
"1000535" -> "1001100"  [label="DDG: maxfraglen"];
"1000535" -> "1001100"  [label="DDG: skb->len"];
"1000535" -> "1000510"  [label="DDG: maxfraglen"];
"1000535" -> "1000510"  [label="DDG: skb->len"];
"1000535" -> "1000511"  [label="DDG: maxfraglen"];
"1000535" -> "1000533"  [label="DDG: maxfraglen"];
"1000535" -> "1000533"  [label="DDG: skb->len"];
"1000609" -> "1000535"  [label="DDG: maxfraglen"];
"1000838" -> "1000535"  [label="DDG: maxfraglen"];
"1000555" -> "1000535"  [label="DDG: maxfraglen"];
"1000510" -> "1000535"  [label="DDG: skb->len"];
"1000535" -> "1000555"  [label="DDG: skb->len"];
"1000535" -> "1000555"  [label="DDG: maxfraglen"];
"1000535" -> "1000591"  [label="DDG: maxfraglen"];
"1000535" -> "1000609"  [label="DDG: maxfraglen"];
"1000535" -> "1000816"  [label="DDG: maxfraglen"];
"1000535" -> "1000916"  [label="DDG: skb->len"];
"1000609" -> "1000607"  [label="AST: "];
"1000610" -> "1000609"  [label="AST: "];
"1000607" -> "1000609"  [label="CFG: "];
"1000609" -> "1001100"  [label="DDG: maxfraglen"];
"1000609" -> "1001100"  [label="DDG: fragheaderlen - rt->dst.trailer_len"];
"1000609" -> "1000510"  [label="DDG: maxfraglen"];
"1000609" -> "1000511"  [label="DDG: maxfraglen"];
"1000609" -> "1000555"  [label="DDG: maxfraglen"];
"1000609" -> "1000607"  [label="DDG: maxfraglen"];
"1000609" -> "1000607"  [label="DDG: fragheaderlen - rt->dst.trailer_len"];
"1000555" -> "1000609"  [label="DDG: maxfraglen"];
"1000609" -> "1000816"  [label="DDG: maxfraglen"];
"1000555" -> "1000553"  [label="AST: "];
"1000555" -> "1000559"  [label="CFG: "];
"1000556" -> "1000555"  [label="AST: "];
"1000559" -> "1000555"  [label="AST: "];
"1000553" -> "1000555"  [label="CFG: "];
"1000555" -> "1001100"  [label="DDG: skb->len"];
"1000555" -> "1000510"  [label="DDG: maxfraglen"];
"1000555" -> "1000510"  [label="DDG: skb->len"];
"1000555" -> "1000511"  [label="DDG: maxfraglen"];
"1000555" -> "1000553"  [label="DDG: skb->len"];
"1000555" -> "1000553"  [label="DDG: maxfraglen"];
"1000510" -> "1000555"  [label="DDG: skb->len"];
"1000838" -> "1000555"  [label="DDG: maxfraglen"];
"1000555" -> "1000591"  [label="DDG: maxfraglen"];
"1000555" -> "1000816"  [label="DDG: maxfraglen"];
"1000510" -> "1000508"  [label="AST: "];
"1000510" -> "1000526"  [label="CFG: "];
"1000511" -> "1000510"  [label="AST: "];
"1000526" -> "1000510"  [label="AST: "];
"1000508" -> "1000510"  [label="CFG: "];
"1000510" -> "1001100"  [label="DDG: cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen"];
"1000510" -> "1001100"  [label="DDG: skb->len"];
"1000510" -> "1000508"  [label="DDG: cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen"];
"1000510" -> "1000508"  [label="DDG: skb->len"];
"1000838" -> "1000510"  [label="DDG: maxfraglen"];
"1001051" -> "1000510"  [label="DDG: skb->len"];
"1000510" -> "1000916"  [label="DDG: skb->len"];
"1000838" -> "1000811"  [label="AST: "];
"1000838" -> "1000840"  [label="CFG: "];
"1000839" -> "1000838"  [label="AST: "];
"1000840" -> "1000838"  [label="AST: "];
"1000844" -> "1000838"  [label="CFG: "];
"1000838" -> "1001100"  [label="DDG: pskb_trim_unique(skb_prev, maxfraglen)"];
"1000838" -> "1001100"  [label="DDG: skb_prev"];
"1000838" -> "1001100"  [label="DDG: maxfraglen"];
"1000838" -> "1000511"  [label="DDG: maxfraglen"];
"1000838" -> "1000568"  [label="DDG: skb_prev"];
"1000816" -> "1000838"  [label="DDG: skb_prev"];
"1000816" -> "1000838"  [label="DDG: maxfraglen"];
"1000838" -> "1000887"  [label="DDG: skb_prev"];
"1000816" -> "1000812"  [label="AST: "];
"1000816" -> "1000823"  [label="CFG: "];
"1000817" -> "1000816"  [label="AST: "];
"1000818" -> "1000816"  [label="AST: "];
"1000819" -> "1000816"  [label="AST: "];
"1000822" -> "1000816"  [label="AST: "];
"1000823" -> "1000816"  [label="AST: "];
"1000812" -> "1000816"  [label="CFG: "];
"1000816" -> "1001100"  [label="DDG: data + transhdrlen"];
"1000816" -> "1000812"  [label="DDG: data + transhdrlen"];
"1000816" -> "1000812"  [label="DDG: skb_prev"];
"1000816" -> "1000812"  [label="DDG: maxfraglen"];
"1000816" -> "1000812"  [label="DDG: fraggap"];
"1000816" -> "1000812"  [label="DDG: 0"];
"1000579" -> "1000816"  [label="DDG: skb_prev"];
"1000797" -> "1000816"  [label="DDG: data"];
"1000679" -> "1000816"  [label="DDG: transhdrlen"];
"1000679" -> "1000816"  [label="DDG: fraggap"];
"1000123" -> "1000816"  [label="DDG: transhdrlen"];
"1000816" -> "1000835"  [label="DDG: fraggap"];
"1000816" -> "1000870"  [label="DDG: fraggap"];
"1000579" -> "1000544"  [label="AST: "];
"1000579" -> "1000581"  [label="CFG: "];
"1000580" -> "1000579"  [label="AST: "];
"1000581" -> "1000579"  [label="AST: "];
"1000583" -> "1000579"  [label="CFG: "];
"1000579" -> "1001100"  [label="DDG: skb_prev"];
"1000579" -> "1001100"  [label="DDG: skb"];
"1000579" -> "1000568"  [label="DDG: skb_prev"];
"1000566" -> "1000579"  [label="DDG: skb"];
"1000570" -> "1000579"  [label="DDG: skb"];
"1000579" -> "1000887"  [label="DDG: skb_prev"];
"1000566" -> "1000565"  [label="AST: "];
"1000566" -> "1000567"  [label="CFG: "];
"1000567" -> "1000566"  [label="AST: "];
"1000569" -> "1000566"  [label="CFG: "];
"1000565" -> "1000566"  [label="CFG: "];
"1000566" -> "1000565"  [label="DDG: skb"];
"1000500" -> "1000566"  [label="DDG: skb"];
"1000566" -> "1000570"  [label="DDG: skb"];
"1000500" -> "1000499"  [label="AST: "];
"1000500" -> "1000501"  [label="CFG: "];
"1000501" -> "1000500"  [label="AST: "];
"1000502" -> "1000500"  [label="CFG: "];
"1000505" -> "1000500"  [label="CFG: "];
"1000500" -> "1001100"  [label="DDG: !skb"];
"1000500" -> "1001100"  [label="DDG: skb"];
"1000185" -> "1000500"  [label="DDG: skb"];
"1000442" -> "1000500"  [label="DDG: skb"];
"1000500" -> "1000948"  [label="DDG: skb"];
"1000185" -> "1000184"  [label="AST: "];
"1000185" -> "1000186"  [label="CFG: "];
"1000186" -> "1000185"  [label="AST: "];
"1000189" -> "1000185"  [label="CFG: "];
"1000208" -> "1000185"  [label="CFG: "];
"1000185" -> "1001100"  [label="DDG: skb"];
"1000185" -> "1001100"  [label="DDG: !skb"];
"1000180" -> "1000185"  [label="DDG: skb"];
"1000185" -> "1000442"  [label="DDG: skb"];
"1000185" -> "1000444"  [label="DDG: skb"];
"1000180" -> "1000127"  [label="AST: "];
"1000181" -> "1000180"  [label="AST: "];
"1000186" -> "1000180"  [label="CFG: "];
"1000180" -> "1001100"  [label="DDG: skb_peek_tail(queue)"];
"1000442" -> "1000436"  [label="AST: "];
"1000442" -> "1000443"  [label="CFG: "];
"1000442" -> "1000444"  [label="CFG: "];
"1000443" -> "1000442"  [label="AST: "];
"1000444" -> "1000442"  [label="AST: "];
"1000436" -> "1000442"  [label="CFG: "];
"1000442" -> "1001100"  [label="DDG: skb"];
"1000442" -> "1001100"  [label="DDG: skb_is_gso(skb)"];
"1000442" -> "1000436"  [label="DDG: skb"];
"1000442" -> "1000436"  [label="DDG: skb_is_gso(skb)"];
"1000444" -> "1000442"  [label="DDG: skb"];
"1000444" -> "1000445"  [label="CFG: "];
"1000445" -> "1000444"  [label="AST: "];
"1000570" -> "1000564"  [label="AST: "];
"1000570" -> "1000578"  [label="CFG: "];
"1000571" -> "1000570"  [label="AST: "];
"1000573" -> "1000570"  [label="AST: "];
"1000575" -> "1000570"  [label="AST: "];
"1000576" -> "1000570"  [label="AST: "];
"1000577" -> "1000570"  [label="AST: "];
"1000578" -> "1000570"  [label="AST: "];
"1000580" -> "1000570"  [label="CFG: "];
"1000570" -> "1001100"  [label="DDG: &mtu"];
"1000570" -> "1001100"  [label="DDG: rt"];
"1000570" -> "1001100"  [label="DDG: orig_mtu"];
"1000570" -> "1001100"  [label="DDG: ip6_append_data_mtu(&mtu, &maxfraglen,\n\t\t\t\t\t\t    fragheaderlen, skb, rt,\n\t\t\t\t\t\t    orig_mtu)"];
"1000570" -> "1001100"  [label="DDG: &maxfraglen"];
"1000161" -> "1000570"  [label="DDG: rt"];
"1000212" -> "1000570"  [label="DDG: orig_mtu"];
"1000161" -> "1000127"  [label="AST: "];
"1000161" -> "1000163"  [label="CFG: "];
"1000162" -> "1000161"  [label="AST: "];
"1000163" -> "1000161"  [label="AST: "];
"1000170" -> "1000161"  [label="CFG: "];
"1000161" -> "1001100"  [label="DDG: (struct rt6_info *)cork->dst"];
"1000161" -> "1001100"  [label="DDG: rt"];
"1000163" -> "1000161"  [label="DDG: cork->dst"];
"1000163" -> "1000165"  [label="CFG: "];
"1000164" -> "1000163"  [label="AST: "];
"1000165" -> "1000163"  [label="AST: "];
"1000163" -> "1001100"  [label="DDG: cork->dst"];
"1000212" -> "1000127"  [label="AST: "];
"1000212" -> "1000214"  [label="CFG: "];
"1000213" -> "1000212"  [label="AST: "];
"1000214" -> "1000212"  [label="AST: "];
"1000216" -> "1000212"  [label="CFG: "];
"1000212" -> "1001100"  [label="DDG: orig_mtu"];
"1000797" -> "1000544"  [label="AST: "];
"1000797" -> "1000799"  [label="CFG: "];
"1000798" -> "1000797"  [label="AST: "];
"1000799" -> "1000797"  [label="AST: "];
"1000802" -> "1000797"  [label="CFG: "];
"1000797" -> "1001100"  [label="DDG: data"];
"1000789" -> "1000797"  [label="DDG: data"];
"1000797" -> "1000819"  [label="DDG: data"];
"1000797" -> "1000835"  [label="DDG: data"];
"1000797" -> "1000849"  [label="DDG: data"];
"1000789" -> "1000544"  [label="AST: "];
"1000790" -> "1000789"  [label="AST: "];
"1000795" -> "1000789"  [label="CFG: "];
"1000789" -> "1001100"  [label="DDG: skb_put(skb, fraglen)"];
"1000679" -> "1000677"  [label="AST: "];
"1000679" -> "1000681"  [label="CFG: "];
"1000680" -> "1000679"  [label="AST: "];
"1000681" -> "1000679"  [label="AST: "];
"1000677" -> "1000679"  [label="CFG: "];
"1000679" -> "1001100"  [label="DDG: fraggap"];
"1000679" -> "1001100"  [label="DDG: transhdrlen"];
"1000679" -> "1000677"  [label="DDG: transhdrlen"];
"1000679" -> "1000677"  [label="DDG: fraggap"];
"1000355" -> "1000679"  [label="DDG: transhdrlen"];
"1000873" -> "1000679"  [label="DDG: transhdrlen"];
"1000123" -> "1000679"  [label="DDG: transhdrlen"];
"1000561" -> "1000679"  [label="DDG: fraggap"];
"1000553" -> "1000679"  [label="DDG: fraggap"];
"1000679" -> "1000819"  [label="DDG: transhdrlen"];
"1000679" -> "1000849"  [label="DDG: transhdrlen"];
"1000679" -> "1000870"  [label="DDG: fraggap"];
"1000355" -> "1000354"  [label="AST: "];
"1000355" -> "1000356"  [label="CFG: "];
"1000355" -> "1000357"  [label="CFG: "];
"1000356" -> "1000355"  [label="AST: "];
"1000357" -> "1000355"  [label="AST: "];
"1000391" -> "1000355"  [label="CFG: "];
"1000397" -> "1000355"  [label="CFG: "];
"1000355" -> "1001100"  [label="DDG: transhdrlen"];
"1000355" -> "1001100"  [label="DDG: sk->sk_protocol == IPPROTO_UDP &&\n\t    headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000355" -> "1001100"  [label="DDG: transhdrlen && sk->sk_protocol == IPPROTO_UDP &&\n\t    headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000123" -> "1000355"  [label="DDG: transhdrlen"];
"1000357" -> "1000355"  [label="DDG: sk->sk_protocol == IPPROTO_UDP"];
"1000357" -> "1000355"  [label="DDG: headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000355" -> "1000481"  [label="DDG: transhdrlen"];
"1000123" -> "1000113"  [label="AST: "];
"1000123" -> "1001100"  [label="DDG: transhdrlen"];
"1000123" -> "1000481"  [label="DDG: transhdrlen"];
"1000123" -> "1000819"  [label="DDG: transhdrlen"];
"1000123" -> "1000849"  [label="DDG: transhdrlen"];
"1000123" -> "1000873"  [label="DDG: transhdrlen"];
"1000357" -> "1000358"  [label="CFG: "];
"1000357" -> "1000363"  [label="CFG: "];
"1000358" -> "1000357"  [label="AST: "];
"1000363" -> "1000357"  [label="AST: "];
"1000357" -> "1001100"  [label="DDG: sk->sk_protocol == IPPROTO_UDP"];
"1000357" -> "1001100"  [label="DDG: headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000358" -> "1000357"  [label="DDG: sk->sk_protocol"];
"1000358" -> "1000357"  [label="DDG: IPPROTO_UDP"];
"1000363" -> "1000357"  [label="DDG: headersize == sizeof(struct ipv6hdr)"];
"1000363" -> "1000357"  [label="DDG: length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000358" -> "1000362"  [label="CFG: "];
"1000359" -> "1000358"  [label="AST: "];
"1000362" -> "1000358"  [label="AST: "];
"1000365" -> "1000358"  [label="CFG: "];
"1000358" -> "1001100"  [label="DDG: IPPROTO_UDP"];
"1000358" -> "1001100"  [label="DDG: sk->sk_protocol"];
"1000295" -> "1000358"  [label="DDG: sk->sk_protocol"];
"1000295" -> "1000358"  [label="DDG: IPPROTO_UDP"];
"1000300" -> "1000358"  [label="DDG: sk->sk_protocol"];
"1000358" -> "1000447"  [label="DDG: sk->sk_protocol"];
"1000358" -> "1000447"  [label="DDG: IPPROTO_UDP"];
"1000295" -> "1000294"  [label="AST: "];
"1000295" -> "1000299"  [label="CFG: "];
"1000296" -> "1000295"  [label="AST: "];
"1000299" -> "1000295"  [label="AST: "];
"1000302" -> "1000295"  [label="CFG: "];
"1000294" -> "1000295"  [label="CFG: "];
"1000295" -> "1001100"  [label="DDG: sk->sk_protocol"];
"1000295" -> "1001100"  [label="DDG: IPPROTO_UDP"];
"1000295" -> "1000294"  [label="DDG: sk->sk_protocol"];
"1000295" -> "1000294"  [label="DDG: IPPROTO_UDP"];
"1000295" -> "1000300"  [label="DDG: sk->sk_protocol"];
"1000295" -> "1000447"  [label="DDG: sk->sk_protocol"];
"1000295" -> "1000447"  [label="DDG: IPPROTO_UDP"];
"1000300" -> "1000294"  [label="AST: "];
"1000300" -> "1000304"  [label="CFG: "];
"1000301" -> "1000300"  [label="AST: "];
"1000304" -> "1000300"  [label="AST: "];
"1000294" -> "1000300"  [label="CFG: "];
"1000300" -> "1001100"  [label="DDG: IPPROTO_RAW"];
"1000300" -> "1001100"  [label="DDG: sk->sk_protocol"];
"1000300" -> "1000294"  [label="DDG: sk->sk_protocol"];
"1000300" -> "1000294"  [label="DDG: IPPROTO_RAW"];
"1000300" -> "1000447"  [label="DDG: sk->sk_protocol"];
"1000363" -> "1000368"  [label="CFG: "];
"1000368" -> "1000363"  [label="AST: "];
"1000363" -> "1001100"  [label="DDG: headersize == sizeof(struct ipv6hdr)"];
"1000363" -> "1001100"  [label="DDG: length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000368" -> "1000363"  [label="DDG: length <= mtu - headersize"];
"1000368" -> "1000363"  [label="DDG: !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000368" -> "1000374"  [label="CFG: "];
"1000374" -> "1000368"  [label="AST: "];
"1000368" -> "1001100"  [label="DDG: length <= mtu - headersize"];
"1000368" -> "1001100"  [label="DDG: !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000374" -> "1000368"  [label="DDG: !(flags & MSG_MORE)"];
"1000374" -> "1000368"  [label="DDG: rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000374" -> "1000375"  [label="CFG: "];
"1000374" -> "1000379"  [label="CFG: "];
"1000375" -> "1000374"  [label="AST: "];
"1000379" -> "1000374"  [label="AST: "];
"1000374" -> "1001100"  [label="DDG: !(flags & MSG_MORE)"];
"1000374" -> "1001100"  [label="DDG: rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000375" -> "1000374"  [label="DDG: flags & MSG_MORE"];
"1000379" -> "1000374"  [label="DDG: rt->dst.dev->features"];
"1000379" -> "1000374"  [label="DDG: NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM"];
"1000375" -> "1000376"  [label="CFG: "];
"1000376" -> "1000375"  [label="AST: "];
"1000383" -> "1000375"  [label="CFG: "];
"1000375" -> "1001100"  [label="DDG: flags & MSG_MORE"];
"1000376" -> "1000375"  [label="DDG: flags"];
"1000376" -> "1000375"  [label="DDG: MSG_MORE"];
"1000376" -> "1000378"  [label="CFG: "];
"1000377" -> "1000376"  [label="AST: "];
"1000378" -> "1000376"  [label="AST: "];
"1000376" -> "1001100"  [label="DDG: flags"];
"1000376" -> "1001100"  [label="DDG: MSG_MORE"];
"1000124" -> "1000376"  [label="DDG: flags"];
"1000376" -> "1000481"  [label="DDG: flags"];
"1000376" -> "1000620"  [label="DDG: flags"];
"1000376" -> "1000620"  [label="DDG: MSG_MORE"];
"1000124" -> "1000113"  [label="AST: "];
"1000124" -> "1001100"  [label="DDG: flags"];
"1000124" -> "1000481"  [label="DDG: flags"];
"1000124" -> "1000620"  [label="DDG: flags"];
"1000124" -> "1000702"  [label="DDG: flags"];
"1000124" -> "1000884"  [label="DDG: flags"];
"1000379" -> "1000387"  [label="CFG: "];
"1000380" -> "1000379"  [label="AST: "];
"1000387" -> "1000379"  [label="AST: "];
"1000379" -> "1001100"  [label="DDG: rt->dst.dev->features"];
"1000379" -> "1001100"  [label="DDG: NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM"];
"1000387" -> "1000379"  [label="DDG: NETIF_F_IPV6_CSUM"];
"1000387" -> "1000379"  [label="DDG: NETIF_F_HW_CSUM"];
"1000379" -> "1000453"  [label="DDG: rt->dst.dev->features"];
"1000379" -> "1000624"  [label="DDG: rt->dst.dev->features"];
"1000379" -> "1000905"  [label="DDG: rt->dst.dev->features"];
"1000387" -> "1000389"  [label="CFG: "];
"1000388" -> "1000387"  [label="AST: "];
"1000389" -> "1000387"  [label="AST: "];
"1000387" -> "1001100"  [label="DDG: NETIF_F_HW_CSUM"];
"1000387" -> "1001100"  [label="DDG: NETIF_F_IPV6_CSUM"];
"1000873" -> "1000544"  [label="AST: "];
"1000873" -> "1000875"  [label="CFG: "];
"1000874" -> "1000873"  [label="AST: "];
"1000875" -> "1000873"  [label="AST: "];
"1000877" -> "1000873"  [label="CFG: "];
"1000873" -> "1001100"  [label="DDG: transhdrlen"];
"1000561" -> "1000560"  [label="AST: "];
"1000561" -> "1000563"  [label="CFG: "];
"1000562" -> "1000561"  [label="AST: "];
"1000563" -> "1000561"  [label="AST: "];
"1000567" -> "1000561"  [label="CFG: "];
"1000561" -> "1000582"  [label="DDG: fraggap"];
"1000561" -> "1000584"  [label="DDG: fraggap"];
"1000561" -> "1000646"  [label="DDG: fraggap"];
"1000561" -> "1000648"  [label="DDG: fraggap"];
"1000553" -> "1000551"  [label="AST: "];
"1000554" -> "1000553"  [label="AST: "];
"1000567" -> "1000553"  [label="CFG: "];
"1000553" -> "1001100"  [label="DDG: skb->len - maxfraglen"];
"1000553" -> "1000582"  [label="DDG: fraggap"];
"1000553" -> "1000584"  [label="DDG: fraggap"];
"1000553" -> "1000646"  [label="DDG: fraggap"];
"1000553" -> "1000648"  [label="DDG: fraggap"];
"1001051" -> "1000943"  [label="AST: "];
"1001051" -> "1001055"  [label="CFG: "];
"1001052" -> "1001051"  [label="AST: "];
"1001055" -> "1001051"  [label="AST: "];
"1001058" -> "1001051"  [label="CFG: "];
"1001051" -> "1001100"  [label="DDG: skb->len"];
"1001040" -> "1001051"  [label="DDG: copy"];
"1001040" -> "1000943"  [label="AST: "];
"1001040" -> "1001050"  [label="CFG: "];
"1001041" -> "1001040"  [label="AST: "];
"1001050" -> "1001040"  [label="AST: "];
"1001053" -> "1001040"  [label="CFG: "];
"1001040" -> "1001100"  [label="DDG: &skb_shinfo(skb)->frags[i - 1]"];
"1001040" -> "1001100"  [label="DDG: skb_frag_size_add(&skb_shinfo(skb)->frags[i - 1], copy)"];
"1001040" -> "1001056"  [label="DDG: copy"];
"1001040" -> "1001061"  [label="DDG: copy"];
"1001040" -> "1001066"  [label="DDG: copy"];
"1000642" -> "1000544"  [label="AST: "];
"1000642" -> "1000644"  [label="CFG: "];
"1000643" -> "1000642"  [label="AST: "];
"1000644" -> "1000642"  [label="AST: "];
"1000647" -> "1000642"  [label="CFG: "];
"1000642" -> "1001100"  [label="DDG: dst_exthdrlen"];
"1000196" -> "1000642"  [label="DDG: dst_exthdrlen"];
"1000142" -> "1000642"  [label="DDG: dst_exthdrlen"];
"1000879" -> "1000642"  [label="DDG: dst_exthdrlen"];
"1000637" -> "1000642"  [label="DDG: alloclen"];
"1000633" -> "1000642"  [label="DDG: alloclen"];
"1000196" -> "1000187"  [label="AST: "];
"1000197" -> "1000196"  [label="AST: "];
"1000208" -> "1000196"  [label="CFG: "];
"1000196" -> "1001100"  [label="DDG: dst_exthdrlen"];
"1000196" -> "1001100"  [label="DDG: rt->dst.header_len - rt->rt6i_nfheader_len"];
"1000196" -> "1000765"  [label="DDG: dst_exthdrlen"];
"1000196" -> "1000767"  [label="DDG: dst_exthdrlen"];
"1000142" -> "1000127"  [label="AST: "];
"1000142" -> "1000144"  [label="CFG: "];
"1000143" -> "1000142"  [label="AST: "];
"1000144" -> "1000142"  [label="AST: "];
"1000150" -> "1000142"  [label="CFG: "];
"1000142" -> "1001100"  [label="DDG: dst_exthdrlen"];
"1000142" -> "1000765"  [label="DDG: dst_exthdrlen"];
"1000142" -> "1000767"  [label="DDG: dst_exthdrlen"];
"1000879" -> "1000544"  [label="AST: "];
"1000879" -> "1000881"  [label="CFG: "];
"1000880" -> "1000879"  [label="AST: "];
"1000881" -> "1000879"  [label="AST: "];
"1000885" -> "1000879"  [label="CFG: "];
"1000879" -> "1001100"  [label="DDG: dst_exthdrlen"];
"1000879" -> "1000765"  [label="DDG: dst_exthdrlen"];
"1000879" -> "1000767"  [label="DDG: dst_exthdrlen"];
"1000637" -> "1000636"  [label="AST: "];
"1000637" -> "1000639"  [label="CFG: "];
"1000638" -> "1000637"  [label="AST: "];
"1000639" -> "1000637"  [label="AST: "];
"1000643" -> "1000637"  [label="CFG: "];
"1000588" -> "1000637"  [label="DDG: datalen"];
"1000607" -> "1000637"  [label="DDG: datalen"];
"1000588" -> "1000587"  [label="AST: "];
"1000589" -> "1000588"  [label="AST: "];
"1000608" -> "1000588"  [label="CFG: "];
"1000621" -> "1000588"  [label="CFG: "];
"1000588" -> "1001100"  [label="DDG: (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - fragheaderlen"];
"1000588" -> "1001100"  [label="DDG: datalen > (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - fragheaderlen"];
"1000582" -> "1000588"  [label="DDG: datalen"];
"1000588" -> "1000639"  [label="DDG: datalen"];
"1000588" -> "1000646"  [label="DDG: datalen"];
"1000582" -> "1000544"  [label="AST: "];
"1000582" -> "1000584"  [label="CFG: "];
"1000583" -> "1000582"  [label="AST: "];
"1000584" -> "1000582"  [label="AST: "];
"1000589" -> "1000582"  [label="CFG: "];
"1000530" -> "1000582"  [label="DDG: length"];
"1000530" -> "1000529"  [label="AST: "];
"1000530" -> "1000532"  [label="CFG: "];
"1000531" -> "1000530"  [label="AST: "];
"1000532" -> "1000530"  [label="AST: "];
"1000534" -> "1000530"  [label="CFG: "];
"1000542" -> "1000530"  [label="CFG: "];
"1000530" -> "1001100"  [label="DDG: copy < length"];
"1000508" -> "1000530"  [label="DDG: copy"];
"1000504" -> "1000530"  [label="DDG: length"];
"1000530" -> "1000541"  [label="DDG: copy"];
"1000530" -> "1000584"  [label="DDG: length"];
"1000530" -> "1000646"  [label="DDG: length"];
"1000530" -> "1000648"  [label="DDG: length"];
"1000530" -> "1000868"  [label="DDG: length"];
"1000530" -> "1000897"  [label="DDG: length"];
"1000530" -> "1001086"  [label="DDG: length"];
"1000508" -> "1000507"  [label="AST: "];
"1000509" -> "1000508"  [label="AST: "];
"1000531" -> "1000508"  [label="CFG: "];
"1000508" -> "1001100"  [label="DDG: (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - skb->len"];
"1000504" -> "1000503"  [label="AST: "];
"1000504" -> "1000506"  [label="CFG: "];
"1000505" -> "1000504"  [label="AST: "];
"1000506" -> "1000504"  [label="AST: "];
"1000509" -> "1000504"  [label="CFG: "];
"1001079" -> "1000504"  [label="CFG: "];
"1000504" -> "1001100"  [label="DDG: length"];
"1000504" -> "1001100"  [label="DDG: length > 0"];
"1001075" -> "1000504"  [label="DDG: length"];
"1000868" -> "1000504"  [label="DDG: length"];
"1001075" -> "1000507"  [label="AST: "];
"1001075" -> "1001077"  [label="CFG: "];
"1001076" -> "1001075"  [label="AST: "];
"1001077" -> "1001075"  [label="AST: "];
"1000505" -> "1001075"  [label="CFG: "];
"1001075" -> "1001100"  [label="DDG: copy"];
"1001066" -> "1001075"  [label="DDG: copy"];
"1000897" -> "1001075"  [label="DDG: length"];
"1001066" -> "1000943"  [label="AST: "];
"1001066" -> "1001068"  [label="CFG: "];
"1001067" -> "1001066"  [label="AST: "];
"1001068" -> "1001066"  [label="AST: "];
"1001073" -> "1001066"  [label="CFG: "];
"1001066" -> "1001100"  [label="DDG: atomic_add(copy, &sk->sk_wmem_alloc)"];
"1001066" -> "1001100"  [label="DDG: &sk->sk_wmem_alloc"];
"1001066" -> "1000714"  [label="DDG: &sk->sk_wmem_alloc"];
"1000714" -> "1001066"  [label="DDG: &sk->sk_wmem_alloc"];
"1001066" -> "1001072"  [label="DDG: copy"];
"1000714" -> "1000713"  [label="AST: "];
"1000714" -> "1000715"  [label="CFG: "];
"1000715" -> "1000714"  [label="AST: "];
"1000720" -> "1000714"  [label="CFG: "];
"1000714" -> "1001100"  [label="DDG: &sk->sk_wmem_alloc"];
"1000714" -> "1000713"  [label="DDG: &sk->sk_wmem_alloc"];
"1000897" -> "1000896"  [label="AST: "];
"1000897" -> "1000899"  [label="CFG: "];
"1000898" -> "1000897"  [label="AST: "];
"1000899" -> "1000897"  [label="AST: "];
"1000901" -> "1000897"  [label="CFG: "];
"1000909" -> "1000897"  [label="CFG: "];
"1000897" -> "1001100"  [label="DDG: copy > length"];
"1000897" -> "1001100"  [label="DDG: copy"];
"1000541" -> "1000897"  [label="DDG: copy"];
"1000897" -> "1000900"  [label="DDG: length"];
"1000897" -> "1001005"  [label="DDG: copy"];
"1000897" -> "1001086"  [label="DDG: length"];
"1000541" -> "1000540"  [label="AST: "];
"1000541" -> "1000543"  [label="CFG: "];
"1000542" -> "1000541"  [label="AST: "];
"1000543" -> "1000541"  [label="AST: "];
"1000550" -> "1000541"  [label="CFG: "];
"1000898" -> "1000541"  [label="CFG: "];
"1000541" -> "1001100"  [label="DDG: copy <= 0"];
"1000533" -> "1000541"  [label="DDG: copy"];
"1000533" -> "1000529"  [label="AST: "];
"1000534" -> "1000533"  [label="AST: "];
"1000542" -> "1000533"  [label="CFG: "];
"1000533" -> "1001100"  [label="DDG: maxfraglen - skb->len"];
"1000868" -> "1000544"  [label="AST: "];
"1000868" -> "1000870"  [label="CFG: "];
"1000869" -> "1000868"  [label="AST: "];
"1000870" -> "1000868"  [label="AST: "];
"1000874" -> "1000868"  [label="CFG: "];
"1000868" -> "1001100"  [label="DDG: datalen - fraggap"];
"1000870" -> "1000868"  [label="DDG: datalen"];
"1000870" -> "1000868"  [label="DDG: fraggap"];
"1000870" -> "1000872"  [label="CFG: "];
"1000871" -> "1000870"  [label="AST: "];
"1000872" -> "1000870"  [label="AST: "];
"1000870" -> "1001100"  [label="DDG: fraggap"];
"1000870" -> "1001100"  [label="DDG: datalen"];
"1000677" -> "1000870"  [label="DDG: datalen"];
"1000677" -> "1000675"  [label="AST: "];
"1000678" -> "1000677"  [label="AST: "];
"1000675" -> "1000677"  [label="CFG: "];
"1000677" -> "1001100"  [label="DDG: datalen"];
"1000677" -> "1001100"  [label="DDG: transhdrlen - fraggap"];
"1000677" -> "1000675"  [label="DDG: datalen"];
"1000677" -> "1000675"  [label="DDG: transhdrlen - fraggap"];
"1000646" -> "1000677"  [label="DDG: datalen"];
"1000652" -> "1000677"  [label="DDG: datalen"];
"1000646" -> "1000645"  [label="AST: "];
"1000646" -> "1000648"  [label="CFG: "];
"1000647" -> "1000646"  [label="AST: "];
"1000648" -> "1000646"  [label="AST: "];
"1000653" -> "1000646"  [label="CFG: "];
"1000660" -> "1000646"  [label="CFG: "];
"1000646" -> "1001100"  [label="DDG: datalen != length + fraggap"];
"1000646" -> "1001100"  [label="DDG: length + fraggap"];
"1000607" -> "1000646"  [label="DDG: datalen"];
"1000646" -> "1000652"  [label="DDG: datalen"];
"1000646" -> "1000666"  [label="DDG: datalen"];
"1000646" -> "1000668"  [label="DDG: datalen"];
"1000607" -> "1000587"  [label="AST: "];
"1000608" -> "1000607"  [label="AST: "];
"1000621" -> "1000607"  [label="CFG: "];
"1000607" -> "1001100"  [label="DDG: maxfraglen - fragheaderlen - rt->dst.trailer_len"];
"1000607" -> "1000639"  [label="DDG: datalen"];
"1000652" -> "1000651"  [label="AST: "];
"1000652" -> "1000654"  [label="CFG: "];
"1000653" -> "1000652"  [label="AST: "];
"1000654" -> "1000652"  [label="AST: "];
"1000660" -> "1000652"  [label="CFG: "];
"1000652" -> "1000666"  [label="DDG: datalen"];
"1000652" -> "1000668"  [label="DDG: datalen"];
"1000633" -> "1000618"  [label="AST: "];
"1000633" -> "1000635"  [label="CFG: "];
"1000634" -> "1000633"  [label="AST: "];
"1000635" -> "1000633"  [label="AST: "];
"1000643" -> "1000633"  [label="CFG: "];
"1000633" -> "1001100"  [label="DDG: mtu"];
"1000215" -> "1000127"  [label="AST: "];
"1000215" -> "1000217"  [label="CFG: "];
"1000216" -> "1000215"  [label="AST: "];
"1000217" -> "1000215"  [label="AST: "];
"1000224" -> "1000215"  [label="CFG: "];
"1000215" -> "1001100"  [label="DDG: hh_len"];
"1000215" -> "1001100"  [label="DDG: LL_RESERVED_SPACE(rt->dst.dev)"];
"1000217" -> "1000215"  [label="DDG: rt->dst.dev"];
"1000215" -> "1000481"  [label="DDG: hh_len"];
"1000215" -> "1000699"  [label="DDG: hh_len"];
"1000215" -> "1000728"  [label="DDG: hh_len"];
"1000215" -> "1000765"  [label="DDG: hh_len"];
"1000217" -> "1000218"  [label="CFG: "];
"1000218" -> "1000217"  [label="AST: "];
"1000217" -> "1001100"  [label="DDG: rt->dst.dev"];
"1000119" -> "1000113"  [label="AST: "];
"1000119" -> "1001100"  [label="DDG: pfrag"];
"1000702" -> "1000704"  [label="CFG: "];
"1000703" -> "1000702"  [label="AST: "];
"1000704" -> "1000702"  [label="AST: "];
"1000706" -> "1000702"  [label="CFG: "];
"1000702" -> "1001100"  [label="DDG: flags"];
"1000702" -> "1001100"  [label="DDG: MSG_DONTWAIT"];
"1000620" -> "1000702"  [label="DDG: flags"];
"1000702" -> "1000884"  [label="DDG: flags"];
"1000620" -> "1000619"  [label="AST: "];
"1000620" -> "1000622"  [label="CFG: "];
"1000621" -> "1000620"  [label="AST: "];
"1000622" -> "1000620"  [label="AST: "];
"1000628" -> "1000620"  [label="CFG: "];
"1000619" -> "1000620"  [label="CFG: "];
"1000620" -> "1001100"  [label="DDG: MSG_MORE"];
"1000620" -> "1001100"  [label="DDG: flags"];
"1000620" -> "1000619"  [label="DDG: flags"];
"1000620" -> "1000619"  [label="DDG: MSG_MORE"];
"1000884" -> "1000620"  [label="DDG: flags"];
"1000620" -> "1000884"  [label="DDG: flags"];
"1000884" -> "1000883"  [label="AST: "];
"1000884" -> "1000886"  [label="CFG: "];
"1000885" -> "1000884"  [label="AST: "];
"1000886" -> "1000884"  [label="AST: "];
"1000888" -> "1000884"  [label="CFG: "];
"1000883" -> "1000884"  [label="CFG: "];
"1000884" -> "1001100"  [label="DDG: flags"];
"1000884" -> "1001100"  [label="DDG: MSG_CONFIRM"];
"1000884" -> "1000883"  [label="DDG: flags"];
"1000884" -> "1000883"  [label="DDG: MSG_CONFIRM"];
"1000737" -> "1000736"  [label="AST: "];
"1000737" -> "1000738"  [label="CFG: "];
"1000738" -> "1000737"  [label="AST: "];
"1000736" -> "1000737"  [label="CFG: "];
"1000737" -> "1000736"  [label="DDG: skb"];
"1000709" -> "1000737"  [label="DDG: skb"];
"1000724" -> "1000737"  [label="DDG: skb"];
"1000709" -> "1000708"  [label="AST: "];
"1000709" -> "1000711"  [label="CFG: "];
"1000710" -> "1000709"  [label="AST: "];
"1000711" -> "1000709"  [label="AST: "];
"1000717" -> "1000709"  [label="CFG: "];
"1000709" -> "1001100"  [label="DDG: NULL"];
"1000724" -> "1000712"  [label="AST: "];
"1000725" -> "1000724"  [label="AST: "];
"1000738" -> "1000724"  [label="CFG: "];
"1000724" -> "1001100"  [label="DDG: sock_wmalloc(sk,\n\t\t\t\t\t\t\t   alloclen + hh_len, 1,\n\t\t\t\t\t\t\t   sk->sk_allocation)"];
"1000666" -> "1000544"  [label="AST: "];
"1000666" -> "1000668"  [label="CFG: "];
"1000667" -> "1000666"  [label="AST: "];
"1000668" -> "1000666"  [label="AST: "];
"1000672" -> "1000666"  [label="CFG: "];
"1000666" -> "1001100"  [label="DDG: datalen + fragheaderlen"];
"1000666" -> "1001100"  [label="DDG: fraglen"];
"1000188" -> "1000187"  [label="AST: "];
"1000188" -> "1000190"  [label="CFG: "];
"1000189" -> "1000188"  [label="AST: "];
"1000190" -> "1000188"  [label="AST: "];
"1000197" -> "1000188"  [label="CFG: "];
"1000188" -> "1001100"  [label="DDG: opt ? opt->opt_flen : 0"];
"1000188" -> "1001100"  [label="DDG: exthdrlen"];
"1000188" -> "1000481"  [label="DDG: exthdrlen"];
"1000138" -> "1000127"  [label="AST: "];
"1000138" -> "1000140"  [label="CFG: "];
"1000139" -> "1000138"  [label="AST: "];
"1000140" -> "1000138"  [label="AST: "];
"1000143" -> "1000138"  [label="CFG: "];
"1000138" -> "1001100"  [label="DDG: exthdrlen"];
"1000138" -> "1000481"  [label="DDG: exthdrlen"];
"1000876" -> "1000544"  [label="AST: "];
"1000876" -> "1000878"  [label="CFG: "];
"1000877" -> "1000876"  [label="AST: "];
"1000878" -> "1000876"  [label="AST: "];
"1000880" -> "1000876"  [label="CFG: "];
"1000876" -> "1001100"  [label="DDG: exthdrlen"];
"1000889" -> "1000882"  [label="AST: "];
"1000889" -> "1000891"  [label="CFG: "];
"1000890" -> "1000889"  [label="AST: "];
"1000891" -> "1000889"  [label="AST: "];
"1000893" -> "1000889"  [label="CFG: "];
"1000889" -> "1001100"  [label="DDG: skb_set_dst_pending_confirm(skb, 1)"];
"1000900" -> "1000896"  [label="AST: "];
"1000900" -> "1000902"  [label="CFG: "];
"1000901" -> "1000900"  [label="AST: "];
"1000902" -> "1000900"  [label="AST: "];
"1000909" -> "1000900"  [label="CFG: "];
"1000900" -> "1001100"  [label="DDG: copy"];
"1000900" -> "1001005"  [label="DDG: copy"];
"1000865" -> "1000544"  [label="AST: "];
"1000865" -> "1000867"  [label="CFG: "];
"1000866" -> "1000865"  [label="AST: "];
"1000867" -> "1000865"  [label="AST: "];
"1000869" -> "1000865"  [label="CFG: "];
"1000865" -> "1001100"  [label="DDG: offset"];
"1000865" -> "1001100"  [label="DDG: copy"];
"1000843" -> "1000865"  [label="DDG: copy"];
"1001072" -> "1000865"  [label="DDG: offset"];
"1000149" -> "1000865"  [label="DDG: offset"];
"1000843" -> "1000842"  [label="AST: "];
"1000843" -> "1000845"  [label="CFG: "];
"1000844" -> "1000843"  [label="AST: "];
"1000845" -> "1000843"  [label="AST: "];
"1000848" -> "1000843"  [label="CFG: "];
"1000842" -> "1000843"  [label="CFG: "];
"1000843" -> "1001100"  [label="DDG: copy"];
"1000843" -> "1000842"  [label="DDG: copy"];
"1000843" -> "1000842"  [label="DDG: 0"];
"1000683" -> "1000843"  [label="DDG: copy"];
"1000683" -> "1000682"  [label="AST: "];
"1000683" -> "1000685"  [label="CFG: "];
"1000684" -> "1000683"  [label="AST: "];
"1000685" -> "1000683"  [label="AST: "];
"1000688" -> "1000683"  [label="CFG: "];
"1000693" -> "1000683"  [label="CFG: "];
"1000683" -> "1001100"  [label="DDG: copy"];
"1000683" -> "1001100"  [label="DDG: copy < 0"];
"1000675" -> "1000683"  [label="DDG: copy"];
"1000675" -> "1000544"  [label="AST: "];
"1000676" -> "1000675"  [label="AST: "];
"1000684" -> "1000675"  [label="CFG: "];
"1000675" -> "1001100"  [label="DDG: datalen - transhdrlen - fraggap"];
"1001072" -> "1000507"  [label="AST: "];
"1001072" -> "1001074"  [label="CFG: "];
"1001073" -> "1001072"  [label="AST: "];
"1001074" -> "1001072"  [label="AST: "];
"1001076" -> "1001072"  [label="CFG: "];
"1001072" -> "1001100"  [label="DDG: offset"];
"1000149" -> "1000127"  [label="AST: "];
"1000149" -> "1000151"  [label="CFG: "];
"1000150" -> "1000149"  [label="AST: "];
"1000151" -> "1000149"  [label="AST: "];
"1000154" -> "1000149"  [label="CFG: "];
"1000149" -> "1001100"  [label="DDG: offset"];
"1000916" -> "1000914"  [label="AST: "];
"1000916" -> "1000918"  [label="CFG: "];
"1000917" -> "1000916"  [label="AST: "];
"1000918" -> "1000916"  [label="AST: "];
"1000924" -> "1000916"  [label="CFG: "];
"1000916" -> "1001100"  [label="DDG: skb->len"];
"1000835" -> "1000811"  [label="AST: "];
"1000835" -> "1000837"  [label="CFG: "];
"1000836" -> "1000835"  [label="AST: "];
"1000837" -> "1000835"  [label="AST: "];
"1000839" -> "1000835"  [label="CFG: "];
"1000835" -> "1001100"  [label="DDG: data"];
"1000835" -> "1001100"  [label="DDG: fraggap"];
"1000835" -> "1000849"  [label="DDG: data"];
"1001020" -> "1001019"  [label="AST: "];
"1001020" -> "1001021"  [label="CFG: "];
"1001021" -> "1001020"  [label="AST: "];
"1001025" -> "1001020"  [label="CFG: "];
"1001020" -> "1001100"  [label="DDG: pfrag->page"];
"1001020" -> "1000963"  [label="DDG: pfrag->page"];
"1001020" -> "1001019"  [label="DDG: pfrag->page"];
"1000963" -> "1001020"  [label="DDG: pfrag->page"];
"1000999" -> "1001020"  [label="DDG: pfrag->page"];
"1000963" -> "1000962"  [label="AST: "];
"1000963" -> "1000969"  [label="CFG: "];
"1000964" -> "1000963"  [label="AST: "];
"1000965" -> "1000963"  [label="AST: "];
"1000966" -> "1000963"  [label="AST: "];
"1000969" -> "1000963"  [label="AST: "];
"1000962" -> "1000963"  [label="CFG: "];
"1000963" -> "1001100"  [label="DDG: i"];
"1000963" -> "1001100"  [label="DDG: skb"];
"1000963" -> "1001100"  [label="DDG: pfrag->offset"];
"1000963" -> "1001100"  [label="DDG: pfrag->page"];
"1000963" -> "1000962"  [label="DDG: skb"];
"1000963" -> "1000962"  [label="DDG: i"];
"1000963" -> "1000962"  [label="DDG: pfrag->page"];
"1000963" -> "1000962"  [label="DDG: pfrag->offset"];
"1000948" -> "1000963"  [label="DDG: skb"];
"1000945" -> "1000963"  [label="DDG: i"];
"1000963" -> "1000978"  [label="DDG: i"];
"1000963" -> "1000982"  [label="DDG: skb"];
"1000963" -> "1000982"  [label="DDG: pfrag->page"];
"1000963" -> "1000982"  [label="DDG: pfrag->offset"];
"1000963" -> "1001008"  [label="DDG: pfrag->offset"];
"1000963" -> "1001047"  [label="DDG: i"];
"1000948" -> "1000947"  [label="AST: "];
"1000948" -> "1000949"  [label="CFG: "];
"1000949" -> "1000948"  [label="AST: "];
"1000950" -> "1000948"  [label="CFG: "];
"1000948" -> "1001100"  [label="DDG: skb"];
"1000945" -> "1000943"  [label="AST: "];
"1000945" -> "1000947"  [label="CFG: "];
"1000946" -> "1000945"  [label="AST: "];
"1000947" -> "1000945"  [label="AST: "];
"1000952" -> "1000945"  [label="CFG: "];
"1000945" -> "1001100"  [label="DDG: i"];
"1000945" -> "1001100"  [label="DDG: skb_shinfo(skb)->nr_frags"];
"1000992" -> "1000945"  [label="DDG: skb_shinfo(skb)->nr_frags"];
"1000992" -> "1000972"  [label="AST: "];
"1000992" -> "1000997"  [label="CFG: "];
"1000993" -> "1000992"  [label="AST: "];
"1000997" -> "1000992"  [label="AST: "];
"1001001" -> "1000992"  [label="CFG: "];
"1000992" -> "1001100"  [label="DDG: skb_shinfo(skb)->nr_frags"];
"1000997" -> "1000992"  [label="DDG: i"];
"1000997" -> "1000998"  [label="CFG: "];
"1000998" -> "1000997"  [label="AST: "];
"1000997" -> "1001100"  [label="DDG: i"];
"1000982" -> "1000997"  [label="DDG: i"];
"1000997" -> "1001047"  [label="DDG: i"];
"1000982" -> "1000972"  [label="AST: "];
"1000982" -> "1000991"  [label="CFG: "];
"1000983" -> "1000982"  [label="AST: "];
"1000984" -> "1000982"  [label="AST: "];
"1000985" -> "1000982"  [label="AST: "];
"1000988" -> "1000982"  [label="AST: "];
"1000991" -> "1000982"  [label="AST: "];
"1000995" -> "1000982"  [label="CFG: "];
"1000982" -> "1001100"  [label="DDG: __skb_fill_page_desc(skb, i, pfrag->page,\n\t\t\t\t\t\t     pfrag->offset, 0)"];
"1000978" -> "1000982"  [label="DDG: i"];
"1000982" -> "1000994"  [label="DDG: skb"];
"1000982" -> "1000999"  [label="DDG: pfrag->page"];
"1000982" -> "1001008"  [label="DDG: pfrag->offset"];
"1000978" -> "1000977"  [label="AST: "];
"1000978" -> "1000980"  [label="CFG: "];
"1000979" -> "1000978"  [label="AST: "];
"1000980" -> "1000978"  [label="AST: "];
"1000981" -> "1000978"  [label="CFG: "];
"1000983" -> "1000978"  [label="CFG: "];
"1000978" -> "1001100"  [label="DDG: i"];
"1000978" -> "1001100"  [label="DDG: MAX_SKB_FRAGS"];
"1000978" -> "1001100"  [label="DDG: i == MAX_SKB_FRAGS"];
"1001008" -> "1001005"  [label="AST: "];
"1001008" -> "1001012"  [label="CFG: "];
"1001009" -> "1001008"  [label="AST: "];
"1001012" -> "1001008"  [label="AST: "];
"1001005" -> "1001008"  [label="CFG: "];
"1001008" -> "1001100"  [label="DDG: pfrag->size"];
"1001008" -> "1001005"  [label="DDG: pfrag->size"];
"1001008" -> "1001005"  [label="DDG: pfrag->offset"];
"1001008" -> "1001019"  [label="DDG: pfrag->offset"];
"1000999" -> "1000972"  [label="AST: "];
"1000999" -> "1001000"  [label="CFG: "];
"1001000" -> "1000999"  [label="AST: "];
"1001004" -> "1000999"  [label="CFG: "];
"1000999" -> "1001100"  [label="DDG: get_page(pfrag->page)"];
"1001003" -> "1000943"  [label="AST: "];
"1001003" -> "1001005"  [label="CFG: "];
"1001004" -> "1001003"  [label="AST: "];
"1001005" -> "1001003"  [label="AST: "];
"1001018" -> "1001003"  [label="CFG: "];
"1001003" -> "1001100"  [label="DDG: min_t(int, copy, pfrag->size - pfrag->offset)"];
"1001005" -> "1001003"  [label="DDG: int"];
"1001005" -> "1001003"  [label="DDG: copy"];
"1001005" -> "1001003"  [label="DDG: pfrag->size - pfrag->offset"];
"1001006" -> "1001005"  [label="AST: "];
"1001007" -> "1001005"  [label="AST: "];
"1001005" -> "1001100"  [label="DDG: pfrag->size - pfrag->offset"];
"1001005" -> "1001100"  [label="DDG: int"];
"1000994" -> "1000993"  [label="AST: "];
"1000994" -> "1000995"  [label="CFG: "];
"1000995" -> "1000994"  [label="AST: "];
"1000996" -> "1000994"  [label="CFG: "];
"1000962" -> "1000961"  [label="AST: "];
"1000974" -> "1000962"  [label="CFG: "];
"1001004" -> "1000962"  [label="CFG: "];
"1000962" -> "1001100"  [label="DDG: !skb_can_coalesce(skb, i, pfrag->page,\n\t\t\t\t\t      pfrag->offset)"];
"1000962" -> "1001100"  [label="DDG: skb_can_coalesce(skb, i, pfrag->page,\n\t\t\t\t\t      pfrag->offset)"];
"1000846" -> "1000842"  [label="AST: "];
"1000846" -> "1000856"  [label="CFG: "];
"1000856" -> "1000846"  [label="AST: "];
"1000842" -> "1000846"  [label="CFG: "];
"1000846" -> "1001100"  [label="DDG: getfrag(from, data + transhdrlen, offset,\n\t\t\t\t    copy, fraggap, skb)"];
"1000846" -> "1000842"  [label="DDG: getfrag(from, data + transhdrlen, offset,\n\t\t\t\t    copy, fraggap, skb)"];
"1000846" -> "1000842"  [label="DDG: 0"];
"1000842" -> "1000841"  [label="AST: "];
"1000859" -> "1000842"  [label="CFG: "];
"1000866" -> "1000842"  [label="CFG: "];
"1000842" -> "1001100"  [label="DDG: copy > 0"];
"1000842" -> "1001100"  [label="DDG: getfrag(from, data + transhdrlen, offset,\n\t\t\t\t    copy, fraggap, skb) < 0"];
"1000842" -> "1001100"  [label="DDG: copy > 0 &&\n\t\t\t    getfrag(from, data + transhdrlen, offset,\n\t\t\t\t    copy, fraggap, skb) < 0"];
"1000862" -> "1000857"  [label="AST: "];
"1000862" -> "1000863"  [label="CFG: "];
"1000863" -> "1000862"  [label="AST: "];
"1000864" -> "1000862"  [label="CFG: "];
"1000862" -> "1001100"  [label="DDG: skb"];
"1000862" -> "1001100"  [label="DDG: kfree_skb(skb)"];
"1000565" -> "1000564"  [label="AST: "];
"1000565" -> "1000568"  [label="CFG: "];
"1000568" -> "1000565"  [label="AST: "];
"1000572" -> "1000565"  [label="CFG: "];
"1000580" -> "1000565"  [label="CFG: "];
"1000565" -> "1001100"  [label="DDG: !skb_prev"];
"1000565" -> "1001100"  [label="DDG: !skb"];
"1000565" -> "1001100"  [label="DDG: !skb || !skb_prev"];
"1000883" -> "1000565"  [label="DDG: !skb_prev"];
"1000568" -> "1000565"  [label="DDG: skb_prev"];
"1000565" -> "1000883"  [label="DDG: !skb_prev"];
"1000883" -> "1000882"  [label="AST: "];
"1000883" -> "1000887"  [label="CFG: "];
"1000887" -> "1000883"  [label="AST: "];
"1000890" -> "1000883"  [label="CFG: "];
"1000893" -> "1000883"  [label="CFG: "];
"1000883" -> "1001100"  [label="DDG: (flags & MSG_CONFIRM) && !skb_prev"];
"1000883" -> "1001100"  [label="DDG: flags & MSG_CONFIRM"];
"1000883" -> "1001100"  [label="DDG: !skb_prev"];
"1000887" -> "1000883"  [label="DDG: skb_prev"];
"1000568" -> "1000569"  [label="CFG: "];
"1000569" -> "1000568"  [label="AST: "];
"1000887" -> "1000568"  [label="DDG: skb_prev"];
"1000130" -> "1000568"  [label="DDG: skb_prev"];
"1000812" -> "1000811"  [label="AST: "];
"1000813" -> "1000812"  [label="AST: "];
"1000826" -> "1000812"  [label="CFG: "];
"1000812" -> "1001100"  [label="DDG: skb_copy_and_csum_bits(\n\t\t\t\t\tskb_prev, maxfraglen,\n\t\t\t\t\tdata + transhdrlen, fraggap, 0)"];
"1000812" -> "1000828"  [label="DDG: skb->csum"];
"1000828" -> "1000824"  [label="AST: "];
"1000828" -> "1000832"  [label="CFG: "];
"1000829" -> "1000828"  [label="AST: "];
"1000832" -> "1000828"  [label="AST: "];
"1000824" -> "1000828"  [label="CFG: "];
"1000828" -> "1001100"  [label="DDG: skb->csum"];
"1000828" -> "1000824"  [label="DDG: skb_prev->csum"];
"1000828" -> "1000824"  [label="DDG: skb->csum"];
"1000824" -> "1000828"  [label="DDG: skb_prev->csum"];
"1000824" -> "1000811"  [label="AST: "];
"1000825" -> "1000824"  [label="AST: "];
"1000836" -> "1000824"  [label="CFG: "];
"1000824" -> "1001100"  [label="DDG: csum_sub(skb_prev->csum,\n\t\t\t\t\t\t\t  skb->csum)"];
"1000824" -> "1001100"  [label="DDG: skb_prev->csum"];
"1000849" -> "1000851"  [label="CFG: "];
"1000850" -> "1000849"  [label="AST: "];
"1000851" -> "1000849"  [label="AST: "];
"1000852" -> "1000849"  [label="CFG: "];
"1000849" -> "1001100"  [label="DDG: transhdrlen"];
"1000849" -> "1001100"  [label="DDG: data"];
"1001086" -> "1000127"  [label="AST: "];
"1001086" -> "1001090"  [label="CFG: "];
"1001087" -> "1001086"  [label="AST: "];
"1001090" -> "1001086"  [label="AST: "];
"1001093" -> "1001086"  [label="CFG: "];
"1001086" -> "1001100"  [label="DDG: cork->length"];
"1001086" -> "1001100"  [label="DDG: length"];
"1000481" -> "1001086"  [label="DDG: length"];
"1000819" -> "1000821"  [label="CFG: "];
"1000820" -> "1000819"  [label="AST: "];
"1000821" -> "1000819"  [label="AST: "];
"1000822" -> "1000819"  [label="CFG: "];
"1000819" -> "1001100"  [label="DDG: transhdrlen"];
"1000736" -> "1000735"  [label="AST: "];
"1000740" -> "1000736"  [label="CFG: "];
"1000745" -> "1000736"  [label="CFG: "];
"1000736" -> "1001100"  [label="DDG: unlikely(!skb)"];
"1000956" -> "1000955"  [label="AST: "];
"1000960" -> "1000956"  [label="CFG: "];
"1000964" -> "1000956"  [label="CFG: "];
"1000956" -> "1001100"  [label="DDG: sk_page_frag_refill(sk, pfrag)"];
"1000956" -> "1001100"  [label="DDG: !sk_page_frag_refill(sk, pfrag)"];
"1001092" -> "1001091"  [label="AST: "];
"1001092" -> "1001093"  [label="CFG: "];
"1001093" -> "1001092"  [label="AST: "];
"1001095" -> "1001092"  [label="CFG: "];
"1001092" -> "1001100"  [label="DDG: sk"];
"1001092" -> "1001091"  [label="DDG: sk"];
"1000481" -> "1001092"  [label="DDG: sk"];
"1001091" -> "1000127"  [label="AST: "];
"1001091" -> "1001097"  [label="CFG: "];
"1001094" -> "1001091"  [label="AST: "];
"1001097" -> "1001091"  [label="AST: "];
"1001099" -> "1001091"  [label="CFG: "];
"1001091" -> "1001100"  [label="DDG: IPSTATS_MIB_OUTDISCARDS"];
"1001091" -> "1001100"  [label="DDG: IP6_INC_STATS(sock_net(sk), rt->rt6i_idev, IPSTATS_MIB_OUTDISCARDS)"];
"1001091" -> "1001100"  [label="DDG: rt->rt6i_idev"];
"1001091" -> "1001100"  [label="DDG: sock_net(sk)"];
"1000699" -> "1000701"  [label="CFG: "];
"1000700" -> "1000699"  [label="AST: "];
"1000701" -> "1000699"  [label="AST: "];
"1000703" -> "1000699"  [label="CFG: "];
"1000699" -> "1001100"  [label="DDG: alloclen"];
"1000699" -> "1001100"  [label="DDG: hh_len"];
"1000728" -> "1000730"  [label="CFG: "];
"1000729" -> "1000728"  [label="AST: "];
"1000730" -> "1000728"  [label="AST: "];
"1000731" -> "1000728"  [label="CFG: "];
"1000728" -> "1001100"  [label="DDG: hh_len"];
"1000728" -> "1001100"  [label="DDG: alloclen"];
"1000639" -> "1000641"  [label="CFG: "];
"1000640" -> "1000639"  [label="AST: "];
"1000641" -> "1000639"  [label="AST: "];
"1000668" -> "1000670"  [label="CFG: "];
"1000669" -> "1000668"  [label="AST: "];
"1000670" -> "1000668"  [label="AST: "];
"1000668" -> "1001100"  [label="DDG: fragheaderlen"];
"1000584" -> "1000586"  [label="CFG: "];
"1000585" -> "1000584"  [label="AST: "];
"1000586" -> "1000584"  [label="AST: "];
"1000648" -> "1000650"  [label="CFG: "];
"1000649" -> "1000648"  [label="AST: "];
"1000650" -> "1000648"  [label="AST: "];
"1000511" -> "1000524"  [label="CFG: "];
"1000511" -> "1000525"  [label="CFG: "];
"1000512" -> "1000511"  [label="AST: "];
"1000524" -> "1000511"  [label="AST: "];
"1000525" -> "1000511"  [label="AST: "];
"1000527" -> "1000511"  [label="CFG: "];
"1000511" -> "1001100"  [label="DDG: maxfraglen"];
"1000511" -> "1001100"  [label="DDG: mtu"];
"1000511" -> "1001100"  [label="DDG: cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG)"];
"1000800" -> "1000544"  [label="AST: "];
"1000800" -> "1000804"  [label="CFG: "];
"1000801" -> "1000800"  [label="AST: "];
"1000804" -> "1000800"  [label="AST: "];
"1000810" -> "1000800"  [label="CFG: "];
"1000800" -> "1001100"  [label="DDG: skb->network_header +\n\t\t\t\t\t\t fragheaderlen"];
"1000800" -> "1001100"  [label="DDG: skb->transport_header"];
"1000804" -> "1000808"  [label="CFG: "];
"1000805" -> "1000804"  [label="AST: "];
"1000808" -> "1000804"  [label="AST: "];
"1000804" -> "1001100"  [label="DDG: skb->network_header"];
"1000804" -> "1001100"  [label="DDG: fragheaderlen"];
"1000591" -> "1000604"  [label="CFG: "];
"1000591" -> "1000605"  [label="CFG: "];
"1000592" -> "1000591"  [label="AST: "];
"1000604" -> "1000591"  [label="AST: "];
"1000605" -> "1000591"  [label="AST: "];
"1000606" -> "1000591"  [label="CFG: "];
"1000591" -> "1001100"  [label="DDG: cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG)"];
"1000591" -> "1001100"  [label="DDG: mtu"];
"1000591" -> "1001100"  [label="DDG: maxfraglen"];
"1000887" -> "1000888"  [label="CFG: "];
"1000888" -> "1000887"  [label="AST: "];
"1000887" -> "1001100"  [label="DDG: skb_prev"];
"1000922" -> "1000921"  [label="AST: "];
"1000922" -> "1000932"  [label="CFG: "];
"1000932" -> "1000922"  [label="AST: "];
"1000935" -> "1000922"  [label="CFG: "];
"1001073" -> "1000922"  [label="CFG: "];
"1000922" -> "1001100"  [label="DDG: getfrag(from, skb_put(skb, copy),\n\t\t\t\t\t\toffset, copy, off, skb)"];
"1000922" -> "1001100"  [label="DDG: getfrag(from, skb_put(skb, copy),\n\t\t\t\t\t\toffset, copy, off, skb) < 0"];
"1000934" -> "1000933"  [label="AST: "];
"1000934" -> "1000936"  [label="CFG: "];
"1000935" -> "1000934"  [label="AST: "];
"1000936" -> "1000934"  [label="AST: "];
"1000938" -> "1000934"  [label="CFG: "];
"1000934" -> "1001100"  [label="DDG: skb"];
"1000934" -> "1001100"  [label="DDG: off"];
"1000934" -> "1001100"  [label="DDG: __skb_trim(skb, off)"];
"1001016" -> "1001015"  [label="AST: "];
"1001016" -> "1001033"  [label="CFG: "];
"1001033" -> "1001016"  [label="AST: "];
"1001034" -> "1001016"  [label="CFG: "];
"1001037" -> "1001016"  [label="CFG: "];
"1001016" -> "1001100"  [label="DDG: getfrag(from,\n\t\t\t\t    page_address(pfrag->page) + pfrag->offset,\n\t\t\t\t    offset, copy, skb->len, skb) < 0"];
"1001016" -> "1001100"  [label="DDG: getfrag(from,\n\t\t\t\t    page_address(pfrag->page) + pfrag->offset,\n\t\t\t\t    offset, copy, skb->len, skb)"];
"1001056" -> "1000943"  [label="AST: "];
"1001056" -> "1001060"  [label="CFG: "];
"1001057" -> "1001056"  [label="AST: "];
"1001060" -> "1001056"  [label="AST: "];
"1001063" -> "1001056"  [label="CFG: "];
"1001056" -> "1001100"  [label="DDG: skb->data_len"];
"1001061" -> "1000943"  [label="AST: "];
"1001061" -> "1001065"  [label="CFG: "];
"1001062" -> "1001061"  [label="AST: "];
"1001065" -> "1001061"  [label="AST: "];
"1001067" -> "1001061"  [label="CFG: "];
"1001061" -> "1001100"  [label="DDG: skb->truesize"];
"1000713" -> "1000712"  [label="AST: "];
"1000713" -> "1000719"  [label="CFG: "];
"1000719" -> "1000713"  [label="AST: "];
"1000725" -> "1000713"  [label="CFG: "];
"1000738" -> "1000713"  [label="CFG: "];
"1000713" -> "1001100"  [label="DDG: atomic_read(&sk->sk_wmem_alloc)"];
"1000713" -> "1001100"  [label="DDG: atomic_read(&sk->sk_wmem_alloc) <=\n\t\t\t\t    2 * sk->sk_sndbuf"];
"1000713" -> "1001100"  [label="DDG: 2 * sk->sk_sndbuf"];
"1000719" -> "1000713"  [label="DDG: 2"];
"1000719" -> "1000713"  [label="DDG: sk->sk_sndbuf"];
"1001047" -> "1001042"  [label="AST: "];
"1001047" -> "1001049"  [label="CFG: "];
"1001048" -> "1001047"  [label="AST: "];
"1001049" -> "1001047"  [label="AST: "];
"1001042" -> "1001047"  [label="CFG: "];
"1001047" -> "1001100"  [label="DDG: i"];
"1001019" -> "1001024"  [label="CFG: "];
"1001024" -> "1001019"  [label="AST: "];
"1001027" -> "1001019"  [label="CFG: "];
"1001019" -> "1001100"  [label="DDG: pfrag->offset"];
"1001019" -> "1001100"  [label="DDG: page_address(pfrag->page)"];
}
