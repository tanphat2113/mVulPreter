digraph "0_tor_56a7c5bc15e0447203a491c1ee37de9939ad1dcd@pointer" {
"1000999" [label="(Call,log_fn(LOG_PROTOCOL_WARN, domain,\n               \"resolve request on circ with purpose %d; dropping\",\n               circ->purpose))"];
"1000149" [label="(Call,log_debug(domain, \"Now seen %d relay cells here (command %d, stream %d).\",\n            num_seen, rh.command, rh.stream_id))"];
"1000126" [label="(Call,domain = layer_hint?LD_APP:LD_EXIT)"];
"1000118" [label="(MethodParameterIn,crypt_path_t *layer_hint)"];
"1000147" [label="(Call,num_seen++)"];
"1000121" [label="(Call,num_seen=0)"];
"1000993" [label="(Call,circ->purpose != CIRCUIT_PURPOSE_OR)"];
"1000363" [label="(Call,!layer_hint)"];
"1000388" [label="(Call,log_debug(domain,\"circ deliver_window now %d.\", layer_hint ?\n                layer_hint->deliver_window : circ->deliver_window))"];
"1001001" [label="(Identifier,domain)"];
"1001064" [label="(MethodReturn,RET)"];
"1001002" [label="(Literal,\"resolve request on circ with purpose %d; dropping\")"];
"1001003" [label="(Call,circ->purpose)"];
"1000126" [label="(Call,domain = layer_hint?LD_APP:LD_EXIT)"];
"1000237" [label="(Call,rh.command == RELAY_COMMAND_DATA)"];
"1000249" [label="(Call,connection_edge_process_relay_cell_not_open(\n               &rh, cell, circ, conn, layer_hint))"];
"1000354" [label="(Call,layer_hint && --layer_hint->deliver_window < 0)"];
"1000391" [label="(Call,layer_hint ?\n                layer_hint->deliver_window : circ->deliver_window)"];
"1000994" [label="(Call,circ->purpose)"];
"1000118" [label="(MethodParameterIn,crypt_path_t *layer_hint)"];
"1000928" [label="(Call,log_info(domain,\"sendme cell dropped, unknown stream (streamid %d).\",\n                 rh.stream_id))"];
"1000127" [label="(Identifier,domain)"];
"1001007" [label="(Literal,0)"];
"1001039" [label="(Call,rend_process_relay_cell(circ, layer_hint,\n                              rh.command, rh.length,\n                              cell->payload+RELAY_HEADER_SIZE))"];
"1000267" [label="(Call,layer_hint &&\n          circ->purpose != CIRCUIT_PURPOSE_S_REND_JOINED)"];
"1000149" [label="(Call,log_debug(domain, \"Now seen %d relay cells here (command %d, stream %d).\",\n            num_seen, rh.command, rh.stream_id))"];
"1000997" [label="(Identifier,CIRCUIT_PURPOSE_OR)"];
"1001000" [label="(Identifier,LOG_PROTOCOL_WARN)"];
"1001055" [label="(Call,log_fn(LOG_PROTOCOL_WARN, LD_PROTOCOL,\n         \"Received unknown relay command %d. Perhaps the other side is using \"\n         \"a newer version of Tor? Dropping.\",\n         rh.command))"];
"1000999" [label="(Call,log_fn(LOG_PROTOCOL_WARN, domain,\n               \"resolve request on circ with purpose %d; dropping\",\n               circ->purpose))"];
"1000288" [label="(Call,layer_hint != TO_ORIGIN_CIRCUIT(circ)->cpath->prev)"];
"1000993" [label="(Call,circ->purpose != CIRCUIT_PURPOSE_OR)"];
"1001025" [label="(Call,log_info(domain,\n               \"'resolved' received, no conn attached anymore. Ignoring.\"))"];
"1000119" [label="(Block,)"];
"1001018" [label="(Call,log_fn(LOG_PROTOCOL_WARN, domain,\n               \"'resolved' unsupported while open. Closing circ.\"))"];
"1000643" [label="(Call,!layer_hint)"];
"1000613" [label="(Call,log_fn(LOG_PROTOCOL_WARN, domain, \"EXTEND cell received, \"\n                   \"but not via RELAY_EARLY. Dropping.%s\", m))"];
"1000941" [label="(Call,log_debug(domain,\"stream-level sendme, packagewindow now %d.\",\n                conn->package_window))"];
"1000156" [label="(Call,rh.stream_id)"];
"1000151" [label="(Literal,\"Now seen %d relay cells here (command %d, stream %d).\")"];
"1000992" [label="(ControlStructure,if (circ->purpose != CIRCUIT_PURPOSE_OR))"];
"1000652" [label="(Call,log_debug(domain,\"Got an extended cell! Yay.\"))"];
"1000150" [label="(Identifier,domain)"];
"1000162" [label="(Identifier,rh)"];
"1000985" [label="(Call,log_fn(LOG_PROTOCOL_WARN, domain,\n               \"resolve request for known stream; dropping.\"))"];
"1000135" [label="(Identifier,optimistic_data)"];
"1000659" [label="(Call,extended_cell_parse(&extended_cell, rh.command,\n                        (const uint8_t*)cell->payload+RELAY_HEADER_SIZE,\n                        rh.length))"];
"1000147" [label="(Call,num_seen++)"];
"1000123" [label="(Literal,0)"];
"1000122" [label="(Identifier,num_seen)"];
"1000148" [label="(Identifier,num_seen)"];
"1000306" [label="(Call,log_fn(LOG_PROTOCOL_WARN, domain,\n                \"Begin cell for known stream. Dropping.\"))"];
"1000152" [label="(Identifier,num_seen)"];
"1000174" [label="(Call,rh.stream_id == 0)"];
"1000842" [label="(Call,log_info(domain,\n               \"'connected' received, no conn attached anymore. Ignoring.\"))"];
"1000399" [label="(Call,circuit_consider_sending_sendme(circ, layer_hint))"];
"1000558" [label="(Call,log_fn(LOG_PROTOCOL_WARN, domain,\n               \"'extend' cell received for non-zero stream. Dropping.\"))"];
"1000998" [label="(Block,)"];
"1000196" [label="(Call,(int)rh.command)"];
"1000153" [label="(Call,rh.command)"];
"1000314" [label="(Call,rh.command == RELAY_COMMAND_BEGIN_DIR)"];
"1000919" [label="(Call,circuit_resume_edge_reading(circ, layer_hint))"];
"1000475" [label="(Call,log_info(domain,\"end cell (%s) dropped, unknown stream.\",\n                 stream_end_reason_to_string(reason)))"];
"1001009" [label="(Identifier,cell)"];
"1000121" [label="(Call,num_seen=0)"];
"1000810" [label="(Call,!layer_hint)"];
"1000627" [label="(Call,log_fn(LOG_WARN, domain,\n                 \"EXTEND cell received, in a cell with type %d! Dropping.\",\n                 cell->command))"];
"1000128" [label="(Call,layer_hint?LD_APP:LD_EXIT)"];
"1000819" [label="(Call,circuit_truncated(TO_ORIGIN_CIRCUIT(circ), layer_hint,\n                        get_uint8(cell->payload + RELAY_HEADER_SIZE)))"];
"1000884" [label="(Call,circuit_resume_edge_reading(circ, layer_hint))"];
"1000999" -> "1000998"  [label="AST: "];
"1000999" -> "1001003"  [label="CFG: "];
"1001000" -> "1000999"  [label="AST: "];
"1001001" -> "1000999"  [label="AST: "];
"1001002" -> "1000999"  [label="AST: "];
"1001003" -> "1000999"  [label="AST: "];
"1001007" -> "1000999"  [label="CFG: "];
"1000999" -> "1001064"  [label="DDG: "];
"1000999" -> "1001064"  [label="DDG: "];
"1000999" -> "1001064"  [label="DDG: "];
"1000999" -> "1001064"  [label="DDG: "];
"1000149" -> "1000999"  [label="DDG: "];
"1000993" -> "1000999"  [label="DDG: "];
"1000149" -> "1000119"  [label="AST: "];
"1000149" -> "1000156"  [label="CFG: "];
"1000150" -> "1000149"  [label="AST: "];
"1000151" -> "1000149"  [label="AST: "];
"1000152" -> "1000149"  [label="AST: "];
"1000153" -> "1000149"  [label="AST: "];
"1000156" -> "1000149"  [label="AST: "];
"1000162" -> "1000149"  [label="CFG: "];
"1000149" -> "1001064"  [label="DDG: "];
"1000149" -> "1001064"  [label="DDG: "];
"1000149" -> "1001064"  [label="DDG: "];
"1000149" -> "1001064"  [label="DDG: "];
"1000149" -> "1001064"  [label="DDG: "];
"1000126" -> "1000149"  [label="DDG: "];
"1000147" -> "1000149"  [label="DDG: "];
"1000149" -> "1000174"  [label="DDG: "];
"1000149" -> "1000196"  [label="DDG: "];
"1000149" -> "1000237"  [label="DDG: "];
"1000149" -> "1000306"  [label="DDG: "];
"1000149" -> "1000314"  [label="DDG: "];
"1000149" -> "1000388"  [label="DDG: "];
"1000149" -> "1000475"  [label="DDG: "];
"1000149" -> "1000558"  [label="DDG: "];
"1000149" -> "1000613"  [label="DDG: "];
"1000149" -> "1000627"  [label="DDG: "];
"1000149" -> "1000652"  [label="DDG: "];
"1000149" -> "1000659"  [label="DDG: "];
"1000149" -> "1000842"  [label="DDG: "];
"1000149" -> "1000928"  [label="DDG: "];
"1000149" -> "1000941"  [label="DDG: "];
"1000149" -> "1000985"  [label="DDG: "];
"1000149" -> "1001018"  [label="DDG: "];
"1000149" -> "1001025"  [label="DDG: "];
"1000149" -> "1001039"  [label="DDG: "];
"1000149" -> "1001055"  [label="DDG: "];
"1000126" -> "1000119"  [label="AST: "];
"1000126" -> "1000128"  [label="CFG: "];
"1000127" -> "1000126"  [label="AST: "];
"1000128" -> "1000126"  [label="AST: "];
"1000135" -> "1000126"  [label="CFG: "];
"1000126" -> "1001064"  [label="DDG: "];
"1000118" -> "1000126"  [label="DDG: "];
"1000118" -> "1000114"  [label="AST: "];
"1000118" -> "1001064"  [label="DDG: "];
"1000118" -> "1000128"  [label="DDG: "];
"1000118" -> "1000249"  [label="DDG: "];
"1000118" -> "1000267"  [label="DDG: "];
"1000118" -> "1000288"  [label="DDG: "];
"1000118" -> "1000354"  [label="DDG: "];
"1000118" -> "1000363"  [label="DDG: "];
"1000118" -> "1000388"  [label="DDG: "];
"1000118" -> "1000391"  [label="DDG: "];
"1000118" -> "1000399"  [label="DDG: "];
"1000118" -> "1000643"  [label="DDG: "];
"1000118" -> "1000810"  [label="DDG: "];
"1000118" -> "1000819"  [label="DDG: "];
"1000118" -> "1000884"  [label="DDG: "];
"1000118" -> "1000919"  [label="DDG: "];
"1000118" -> "1001039"  [label="DDG: "];
"1000147" -> "1000119"  [label="AST: "];
"1000147" -> "1000148"  [label="CFG: "];
"1000148" -> "1000147"  [label="AST: "];
"1000150" -> "1000147"  [label="CFG: "];
"1000121" -> "1000147"  [label="DDG: "];
"1000121" -> "1000119"  [label="AST: "];
"1000121" -> "1000123"  [label="CFG: "];
"1000122" -> "1000121"  [label="AST: "];
"1000123" -> "1000121"  [label="AST: "];
"1000127" -> "1000121"  [label="CFG: "];
"1000993" -> "1000992"  [label="AST: "];
"1000993" -> "1000997"  [label="CFG: "];
"1000994" -> "1000993"  [label="AST: "];
"1000997" -> "1000993"  [label="AST: "];
"1001000" -> "1000993"  [label="CFG: "];
"1001009" -> "1000993"  [label="CFG: "];
"1000993" -> "1001064"  [label="DDG: "];
"1000993" -> "1001064"  [label="DDG: "];
"1000993" -> "1001064"  [label="DDG: "];
}
