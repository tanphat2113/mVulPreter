digraph "0_linux_45f6fad84cc305103b28d73482b344d7f5b76f39_11@pointer" {
"1001267" [label="(Call,dev_get_by_index(net, ifindex))"];
"1000127" [label="(Call,*net = sock_net(sk))"];
"1000129" [label="(Call,sock_net(sk))"];
"1000124" [label="(Call,inet6_sk(sk))"];
"1000115" [label="(MethodParameterIn,struct sock *sk)"];
"1001252" [label="(Call,ifindex == 0)"];
"1001243" [label="(Call,ifindex = (__force int)ntohl((__force __be32)val))"];
"1001245" [label="(Call,(__force int)ntohl((__force __be32)val))"];
"1001247" [label="(Call,ntohl((__force __be32)val))"];
"1001248" [label="(Call,(__force __be32)val)"];
"1000172" [label="(Call,val != 0)"];
"1000158" [label="(Call,get_user(val, (int __user *) optval))"];
"1000160" [label="(Call,(int __user *) optval)"];
"1000144" [label="(Call,!optval)"];
"1000118" [label="(MethodParameterIn,char __user *optval)"];
"1000167" [label="(Call,val = 0)"];
"1000146" [label="(Call,val = 0)"];
"1001265" [label="(Call,dev = dev_get_by_index(net, ifindex))"];
"1001275" [label="(Call,!dev)"];
"1001278" [label="(Call,dev_put(dev))"];
"1001289" [label="(Call,np->ucast_oif = ifindex)"];
"1000813" [label="(Call,optval = NULL)"];
"1000157" [label="(ControlStructure,if (get_user(val, (int __user *) optval)))"];
"1000298" [label="(Call,sock_prot_inuse_add(net, sk->sk_prot, -1))"];
"1001049" [label="(Call,sock_kmalloc(sk, sizeof(*opt) + optlen, GFP_KERNEL))"];
"1000148" [label="(Literal,0)"];
"1000179" [label="(Call,ip6_mroute_setsockopt(sk, optname, optval, optlen))"];
"1000818" [label="(Call,!optval)"];
"1001131" [label="(Call,ipv6_update_options(sk, opt))"];
"1001281" [label="(Identifier,retv)"];
"1000420" [label="(Call,sk_refcnt_debug_inc(sk))"];
"1000165" [label="(Identifier,EFAULT)"];
"1000951" [label="(Call,!optval)"];
"1000174" [label="(Literal,0)"];
"1001267" [label="(Call,dev_get_by_index(net, ifindex))"];
"1000659" [label="(Call,val < -1)"];
"1000862" [label="(Call,(struct ipv6_opt_hdr __user *)optval)"];
"1000124" [label="(Call,inet6_sk(sk))"];
"1001245" [label="(Call,(__force int)ntohl((__force __be32)val))"];
"1001801" [label="(Call,val < IPV6_MIN_MTU)"];
"1000147" [label="(Identifier,val)"];
"1001958" [label="(Call,val & (IPV6_PREFER_SRC_CGA|IPV6_PREFER_SRC_NONCGA))"];
"1001268" [label="(Identifier,net)"];
"1000173" [label="(Identifier,val)"];
"1000118" [label="(MethodParameterIn,char __user *optval)"];
"1001248" [label="(Call,(__force __be32)val)"];
"1001702" [label="(Call,copy_from_user(gsf, optval, optlen))"];
"1000129" [label="(Call,sock_net(sk))"];
"1001251" [label="(ControlStructure,if (ifindex == 0))"];
"1000162" [label="(Identifier,optval)"];
"1001937" [label="(Call,val & (IPV6_PREFER_SRC_HOME|IPV6_PREFER_SRC_COA))"];
"1002046" [label="(MethodReturn,static int)"];
"1001244" [label="(Identifier,ifindex)"];
"1000169" [label="(Literal,0)"];
"1001762" [label="(Call,ip6_ra_control(sk, val))"];
"1000160" [label="(Call,(int __user *) optval)"];
"1000167" [label="(Call,val = 0)"];
"1000125" [label="(Identifier,sk)"];
"1001269" [label="(Identifier,ifindex)"];
"1001258" [label="(Identifier,np)"];
"1000437" [label="(Call,inet_sk(sk))"];
"1000127" [label="(Call,*net = sock_net(sk))"];
"1001137" [label="(Call,sock_kfree_s(sk, opt, opt->tot_len))"];
"1002038" [label="(Call,release_sock(sk))"];
"1001368" [label="(Call,inet_sk(sk))"];
"1000281" [label="(Call,ipv6_sock_mc_close(sk))"];
"1000295" [label="(Call,inet_csk(sk))"];
"1001295" [label="(Identifier,retv)"];
"1000359" [label="(Call,sock_prot_inuse_add(net, sk->sk_prot, -1))"];
"1000170" [label="(Call,valbool = (val != 0))"];
"1001293" [label="(Identifier,ifindex)"];
"1001153" [label="(Call,val > 255)"];
"1000158" [label="(Call,get_user(val, (int __user *) optval))"];
"1001108" [label="(Call,ip6_datagram_send_ctl(net, sk, &msg, &fl6, opt, &junk,\n\t\t\t\t\t     &junk, &junk))"];
"1001343" [label="(Call,np->mcast_oif = val)"];
"1000153" [label="(Identifier,optlen)"];
"1002030" [label="(Call,release_sock(sk))"];
"1000171" [label="(Identifier,valbool)"];
"1001274" [label="(ControlStructure,if (!dev))"];
"1000122" [label="(Call,*np = inet6_sk(sk))"];
"1001994" [label="(Call,val < 0)"];
"1001271" [label="(Identifier,retv)"];
"1001390" [label="(Call,ipv6_sock_mc_join(sk, mreq.ipv6mr_ifindex, &mreq.ipv6mr_multiaddr))"];
"1000130" [label="(Identifier,sk)"];
"1000946" [label="(Call,optlen < sizeof(struct in6_pktinfo) || !optval)"];
"1001775" [label="(Call,val < IPV6_PMTUDISC_DONT)"];
"1001624" [label="(Call,ipv6_sock_mc_join(sk, greqs.gsr_interface,\n\t\t\t\t\t\t &psin6->sin6_addr))"];
"1000143" [label="(ControlStructure,if (!optval))"];
"1001799" [label="(Call,val && val < IPV6_MIN_MTU)"];
"1000146" [label="(Call,val = 0)"];
"1001247" [label="(Call,ntohl((__force __be32)val))"];
"1001905" [label="(Call,val & (IPV6_PREFER_SRC_PUBLIC|\n\t\t\t       IPV6_PREFER_SRC_TMP|\n\t\t\t       IPV6_PREFER_SRC_PUBTMP_DEFAULT))"];
"1001452" [label="(Call,ipv6_sock_ac_drop(sk, mreq.ipv6mr_ifindex, &mreq.ipv6mr_acaddr))"];
"1000283" [label="(Call,sk_refcnt_debug_dec(sk))"];
"1000229" [label="(Call,udp_sk(sk))"];
"1001278" [label="(Call,dev_put(dev))"];
"1001265" [label="(Call,dev = dev_get_by_index(net, ifindex))"];
"1001290" [label="(Call,np->ucast_oif)"];
"1001217" [label="(Call,val != valbool)"];
"1000120" [label="(Block,)"];
"1001254" [label="(Literal,0)"];
"1000115" [label="(MethodParameterIn,struct sock *sk)"];
"1001276" [label="(Identifier,dev)"];
"1001878" [label="(Call,xfrm_user_policy(sk, optname, optval, optlen))"];
"1000159" [label="(Identifier,val)"];
"1001275" [label="(Call,!dev)"];
"1001440" [label="(Call,ipv6_sock_ac_join(sk, mreq.ipv6mr_ifindex, &mreq.ipv6mr_acaddr))"];
"1001550" [label="(Call,copy_from_user(&greqs, optval, sizeof(greqs)))"];
"1000336" [label="(Call,tcp_sync_mss(sk, icsk->icsk_pmtu_cookie))"];
"1001377" [label="(Call,copy_from_user(&mreq, optval, sizeof(struct ipv6_mreq)))"];
"1001277" [label="(ControlStructure,break;)"];
"1000128" [label="(Identifier,net)"];
"1001231" [label="(Block,)"];
"1001525" [label="(Call,ipv6_sock_mc_drop(sk, greq.gr_interface,\n\t\t\t\t\t\t &psin6->sin6_addr))"];
"1001402" [label="(Call,ipv6_sock_mc_drop(sk, mreq.ipv6mr_ifindex, &mreq.ipv6mr_multiaddr))"];
"1000166" [label="(ControlStructure,else)"];
"1001657" [label="(Call,ip6_mc_source(add, omode, sk, &greqs))"];
"1001747" [label="(Call,ip6_mc_msfilter(sk, gsf))"];
"1001243" [label="(Call,ifindex = (__force int)ntohl((__force __be32)val))"];
"1000955" [label="(Call,copy_from_user(&pkt, optval, sizeof(struct in6_pktinfo)))"];
"1000279" [label="(Call,fl6_free_socklist(sk))"];
"1000172" [label="(Call,val != 0)"];
"1001266" [label="(Identifier,dev)"];
"1000145" [label="(Identifier,optval)"];
"1001827" [label="(Call,!val)"];
"1001513" [label="(Call,ipv6_sock_mc_join(sk, greq.gr_interface,\n\t\t\t\t\t\t &psin6->sin6_addr))"];
"1001085" [label="(Call,copy_from_user(opt+1, optval, optlen))"];
"1001427" [label="(Call,copy_from_user(&mreq, optval, sizeof(struct ipv6_mreq)))"];
"1001253" [label="(Identifier,ifindex)"];
"1000144" [label="(Call,!optval)"];
"1000399" [label="(Call,sock_kfree_s(sk, opt, opt->tot_len))"];
"1000187" [label="(Call,lock_sock(sk))"];
"1000923" [label="(Call,ipv6_update_options(sk, opt))"];
"1001250" [label="(Identifier,val)"];
"1000200" [label="(Call,val == PF_INET)"];
"1001478" [label="(Call,copy_from_user(&greq, optval, sizeof(struct group_req)))"];
"1000929" [label="(Call,sock_kfree_s(sk, opt, opt->tot_len))"];
"1001289" [label="(Call,np->ucast_oif = ifindex)"];
"1001321" [label="(Call,sk->sk_bound_dev_if != val)"];
"1001329" [label="(Call,dev_get_by_index(net, val))"];
"1000856" [label="(Call,ipv6_renew_options(sk, np->opt, optname,\n \t\t\t\t\t (struct ipv6_opt_hdr __user *)optval,\n \t\t\t\t\t optlen))"];
"1001252" [label="(Call,ifindex == 0)"];
"1001186" [label="(Call,val > 255)"];
"1000135" [label="(Identifier,retv)"];
"1000168" [label="(Identifier,val)"];
"1001857" [label="(Call,ipv6_flowlabel_opt(sk, optval, optlen))"];
"1000775" [label="(Call,inet_sk(sk))"];
"1001279" [label="(Identifier,dev)"];
"1000265" [label="(Call,ipv6_only_sock(sk))"];
"1001267" -> "1001265"  [label="AST: "];
"1001267" -> "1001269"  [label="CFG: "];
"1001268" -> "1001267"  [label="AST: "];
"1001269" -> "1001267"  [label="AST: "];
"1001265" -> "1001267"  [label="CFG: "];
"1001267" -> "1002046"  [label="DDG: net"];
"1001267" -> "1002046"  [label="DDG: ifindex"];
"1001267" -> "1001265"  [label="DDG: net"];
"1001267" -> "1001265"  [label="DDG: ifindex"];
"1000127" -> "1001267"  [label="DDG: net"];
"1001252" -> "1001267"  [label="DDG: ifindex"];
"1001267" -> "1001289"  [label="DDG: ifindex"];
"1000127" -> "1000120"  [label="AST: "];
"1000127" -> "1000129"  [label="CFG: "];
"1000128" -> "1000127"  [label="AST: "];
"1000129" -> "1000127"  [label="AST: "];
"1000135" -> "1000127"  [label="CFG: "];
"1000127" -> "1002046"  [label="DDG: sock_net(sk)"];
"1000127" -> "1002046"  [label="DDG: net"];
"1000129" -> "1000127"  [label="DDG: sk"];
"1000127" -> "1000298"  [label="DDG: net"];
"1000127" -> "1000359"  [label="DDG: net"];
"1000127" -> "1001108"  [label="DDG: net"];
"1000127" -> "1001329"  [label="DDG: net"];
"1000129" -> "1000130"  [label="CFG: "];
"1000130" -> "1000129"  [label="AST: "];
"1000129" -> "1002046"  [label="DDG: sk"];
"1000124" -> "1000129"  [label="DDG: sk"];
"1000115" -> "1000129"  [label="DDG: sk"];
"1000129" -> "1000179"  [label="DDG: sk"];
"1000129" -> "1000187"  [label="DDG: sk"];
"1000124" -> "1000122"  [label="AST: "];
"1000124" -> "1000125"  [label="CFG: "];
"1000125" -> "1000124"  [label="AST: "];
"1000122" -> "1000124"  [label="CFG: "];
"1000124" -> "1000122"  [label="DDG: sk"];
"1000115" -> "1000124"  [label="DDG: sk"];
"1000115" -> "1000114"  [label="AST: "];
"1000115" -> "1002046"  [label="DDG: sk"];
"1000115" -> "1000179"  [label="DDG: sk"];
"1000115" -> "1000187"  [label="DDG: sk"];
"1000115" -> "1000229"  [label="DDG: sk"];
"1000115" -> "1000265"  [label="DDG: sk"];
"1000115" -> "1000279"  [label="DDG: sk"];
"1000115" -> "1000281"  [label="DDG: sk"];
"1000115" -> "1000283"  [label="DDG: sk"];
"1000115" -> "1000295"  [label="DDG: sk"];
"1000115" -> "1000336"  [label="DDG: sk"];
"1000115" -> "1000399"  [label="DDG: sk"];
"1000115" -> "1000420"  [label="DDG: sk"];
"1000115" -> "1000437"  [label="DDG: sk"];
"1000115" -> "1000775"  [label="DDG: sk"];
"1000115" -> "1000856"  [label="DDG: sk"];
"1000115" -> "1000923"  [label="DDG: sk"];
"1000115" -> "1000929"  [label="DDG: sk"];
"1000115" -> "1001049"  [label="DDG: sk"];
"1000115" -> "1001108"  [label="DDG: sk"];
"1000115" -> "1001131"  [label="DDG: sk"];
"1000115" -> "1001137"  [label="DDG: sk"];
"1000115" -> "1001368"  [label="DDG: sk"];
"1000115" -> "1001390"  [label="DDG: sk"];
"1000115" -> "1001402"  [label="DDG: sk"];
"1000115" -> "1001440"  [label="DDG: sk"];
"1000115" -> "1001452"  [label="DDG: sk"];
"1000115" -> "1001513"  [label="DDG: sk"];
"1000115" -> "1001525"  [label="DDG: sk"];
"1000115" -> "1001624"  [label="DDG: sk"];
"1000115" -> "1001657"  [label="DDG: sk"];
"1000115" -> "1001747"  [label="DDG: sk"];
"1000115" -> "1001762"  [label="DDG: sk"];
"1000115" -> "1001857"  [label="DDG: sk"];
"1000115" -> "1001878"  [label="DDG: sk"];
"1000115" -> "1002030"  [label="DDG: sk"];
"1000115" -> "1002038"  [label="DDG: sk"];
"1001252" -> "1001251"  [label="AST: "];
"1001252" -> "1001254"  [label="CFG: "];
"1001253" -> "1001252"  [label="AST: "];
"1001254" -> "1001252"  [label="AST: "];
"1001258" -> "1001252"  [label="CFG: "];
"1001266" -> "1001252"  [label="CFG: "];
"1001252" -> "1002046"  [label="DDG: ifindex"];
"1001252" -> "1002046"  [label="DDG: ifindex == 0"];
"1001243" -> "1001252"  [label="DDG: ifindex"];
"1001243" -> "1001231"  [label="AST: "];
"1001243" -> "1001245"  [label="CFG: "];
"1001244" -> "1001243"  [label="AST: "];
"1001245" -> "1001243"  [label="AST: "];
"1001253" -> "1001243"  [label="CFG: "];
"1001243" -> "1002046"  [label="DDG: (__force int)ntohl((__force __be32)val)"];
"1001245" -> "1001243"  [label="DDG: ntohl((__force __be32)val)"];
"1001245" -> "1001247"  [label="CFG: "];
"1001246" -> "1001245"  [label="AST: "];
"1001247" -> "1001245"  [label="AST: "];
"1001245" -> "1002046"  [label="DDG: ntohl((__force __be32)val)"];
"1001247" -> "1001245"  [label="DDG: (__force __be32)val"];
"1001247" -> "1001248"  [label="CFG: "];
"1001248" -> "1001247"  [label="AST: "];
"1001247" -> "1002046"  [label="DDG: (__force __be32)val"];
"1001248" -> "1001247"  [label="DDG: val"];
"1001248" -> "1001250"  [label="CFG: "];
"1001249" -> "1001248"  [label="AST: "];
"1001250" -> "1001248"  [label="AST: "];
"1001248" -> "1002046"  [label="DDG: val"];
"1000172" -> "1001248"  [label="DDG: val"];
"1000172" -> "1000170"  [label="AST: "];
"1000172" -> "1000174"  [label="CFG: "];
"1000173" -> "1000172"  [label="AST: "];
"1000174" -> "1000172"  [label="AST: "];
"1000170" -> "1000172"  [label="CFG: "];
"1000172" -> "1002046"  [label="DDG: val"];
"1000172" -> "1000170"  [label="DDG: val"];
"1000172" -> "1000170"  [label="DDG: 0"];
"1000158" -> "1000172"  [label="DDG: val"];
"1000167" -> "1000172"  [label="DDG: val"];
"1000146" -> "1000172"  [label="DDG: val"];
"1000172" -> "1000200"  [label="DDG: val"];
"1000172" -> "1000659"  [label="DDG: val"];
"1000172" -> "1001153"  [label="DDG: val"];
"1000172" -> "1001186"  [label="DDG: val"];
"1000172" -> "1001217"  [label="DDG: val"];
"1000172" -> "1001321"  [label="DDG: val"];
"1000172" -> "1001329"  [label="DDG: val"];
"1000172" -> "1001343"  [label="DDG: val"];
"1000172" -> "1001762"  [label="DDG: val"];
"1000172" -> "1001775"  [label="DDG: val"];
"1000172" -> "1001799"  [label="DDG: val"];
"1000172" -> "1001801"  [label="DDG: val"];
"1000172" -> "1001827"  [label="DDG: val"];
"1000172" -> "1001905"  [label="DDG: val"];
"1000172" -> "1001937"  [label="DDG: val"];
"1000172" -> "1001958"  [label="DDG: val"];
"1000172" -> "1001994"  [label="DDG: val"];
"1000158" -> "1000157"  [label="AST: "];
"1000158" -> "1000160"  [label="CFG: "];
"1000159" -> "1000158"  [label="AST: "];
"1000160" -> "1000158"  [label="AST: "];
"1000165" -> "1000158"  [label="CFG: "];
"1000171" -> "1000158"  [label="CFG: "];
"1000158" -> "1002046"  [label="DDG: val"];
"1000158" -> "1002046"  [label="DDG: (int __user *) optval"];
"1000158" -> "1002046"  [label="DDG: get_user(val, (int __user *) optval)"];
"1000160" -> "1000158"  [label="DDG: optval"];
"1000160" -> "1000162"  [label="CFG: "];
"1000161" -> "1000160"  [label="AST: "];
"1000162" -> "1000160"  [label="AST: "];
"1000160" -> "1002046"  [label="DDG: optval"];
"1000144" -> "1000160"  [label="DDG: optval"];
"1000118" -> "1000160"  [label="DDG: optval"];
"1000160" -> "1000179"  [label="DDG: optval"];
"1000160" -> "1000818"  [label="DDG: optval"];
"1000160" -> "1000951"  [label="DDG: optval"];
"1000160" -> "1000955"  [label="DDG: optval"];
"1000160" -> "1001085"  [label="DDG: optval"];
"1000160" -> "1001377"  [label="DDG: optval"];
"1000160" -> "1001427"  [label="DDG: optval"];
"1000160" -> "1001478"  [label="DDG: optval"];
"1000160" -> "1001550"  [label="DDG: optval"];
"1000160" -> "1001702"  [label="DDG: optval"];
"1000160" -> "1001857"  [label="DDG: optval"];
"1000160" -> "1001878"  [label="DDG: optval"];
"1000144" -> "1000143"  [label="AST: "];
"1000144" -> "1000145"  [label="CFG: "];
"1000145" -> "1000144"  [label="AST: "];
"1000147" -> "1000144"  [label="CFG: "];
"1000153" -> "1000144"  [label="CFG: "];
"1000144" -> "1002046"  [label="DDG: !optval"];
"1000144" -> "1002046"  [label="DDG: optval"];
"1000118" -> "1000144"  [label="DDG: optval"];
"1000144" -> "1000179"  [label="DDG: optval"];
"1000144" -> "1000818"  [label="DDG: optval"];
"1000144" -> "1000946"  [label="DDG: !optval"];
"1000144" -> "1000951"  [label="DDG: optval"];
"1000144" -> "1000955"  [label="DDG: optval"];
"1000144" -> "1001085"  [label="DDG: optval"];
"1000144" -> "1001377"  [label="DDG: optval"];
"1000144" -> "1001427"  [label="DDG: optval"];
"1000144" -> "1001478"  [label="DDG: optval"];
"1000144" -> "1001550"  [label="DDG: optval"];
"1000144" -> "1001702"  [label="DDG: optval"];
"1000144" -> "1001857"  [label="DDG: optval"];
"1000144" -> "1001878"  [label="DDG: optval"];
"1000118" -> "1000114"  [label="AST: "];
"1000118" -> "1002046"  [label="DDG: optval"];
"1000118" -> "1000179"  [label="DDG: optval"];
"1000118" -> "1000813"  [label="DDG: optval"];
"1000118" -> "1000818"  [label="DDG: optval"];
"1000118" -> "1000862"  [label="DDG: optval"];
"1000118" -> "1000951"  [label="DDG: optval"];
"1000118" -> "1000955"  [label="DDG: optval"];
"1000118" -> "1001085"  [label="DDG: optval"];
"1000118" -> "1001377"  [label="DDG: optval"];
"1000118" -> "1001427"  [label="DDG: optval"];
"1000118" -> "1001478"  [label="DDG: optval"];
"1000118" -> "1001550"  [label="DDG: optval"];
"1000118" -> "1001702"  [label="DDG: optval"];
"1000118" -> "1001857"  [label="DDG: optval"];
"1000118" -> "1001878"  [label="DDG: optval"];
"1000167" -> "1000166"  [label="AST: "];
"1000167" -> "1000169"  [label="CFG: "];
"1000168" -> "1000167"  [label="AST: "];
"1000169" -> "1000167"  [label="AST: "];
"1000171" -> "1000167"  [label="CFG: "];
"1000146" -> "1000143"  [label="AST: "];
"1000146" -> "1000148"  [label="CFG: "];
"1000147" -> "1000146"  [label="AST: "];
"1000148" -> "1000146"  [label="AST: "];
"1000171" -> "1000146"  [label="CFG: "];
"1001265" -> "1001231"  [label="AST: "];
"1001266" -> "1001265"  [label="AST: "];
"1001271" -> "1001265"  [label="CFG: "];
"1001265" -> "1002046"  [label="DDG: dev_get_by_index(net, ifindex)"];
"1001265" -> "1001275"  [label="DDG: dev"];
"1001275" -> "1001274"  [label="AST: "];
"1001275" -> "1001276"  [label="CFG: "];
"1001276" -> "1001275"  [label="AST: "];
"1001277" -> "1001275"  [label="CFG: "];
"1001279" -> "1001275"  [label="CFG: "];
"1001275" -> "1002046"  [label="DDG: !dev"];
"1001275" -> "1002046"  [label="DDG: dev"];
"1001275" -> "1001278"  [label="DDG: dev"];
"1001278" -> "1001231"  [label="AST: "];
"1001278" -> "1001279"  [label="CFG: "];
"1001279" -> "1001278"  [label="AST: "];
"1001281" -> "1001278"  [label="CFG: "];
"1001278" -> "1002046"  [label="DDG: dev_put(dev)"];
"1001278" -> "1002046"  [label="DDG: dev"];
"1001289" -> "1001231"  [label="AST: "];
"1001289" -> "1001293"  [label="CFG: "];
"1001290" -> "1001289"  [label="AST: "];
"1001293" -> "1001289"  [label="AST: "];
"1001295" -> "1001289"  [label="CFG: "];
"1001289" -> "1002046"  [label="DDG: np->ucast_oif"];
"1001289" -> "1002046"  [label="DDG: ifindex"];
}
