digraph "0_tcpdump_88b2dac837e81cf56dce05e6e7b5989332c0092d@pointer" {
"1000441" [label="(Call,(const u_char *)lsap)"];
"1000454" [label="(Call,lsap = (const struct lsa6 *)((const u_char *)lsap +\n\t\t\t\t    EXTRACT_16BITS(&lsap->ls_hdr.ls_length)))"];
"1000456" [label="(Call,(const struct lsa6 *)((const u_char *)lsap +\n\t\t\t\t    EXTRACT_16BITS(&lsap->ls_hdr.ls_length)))"];
"1000459" [label="(Call,(const u_char *)lsap)"];
"1000449" [label="(Call,ospf6_print_lsa(ndo, lsap, dataend))"];
"1000103" [label="(MethodParameterIn,netdissect_options *ndo)"];
"1000441" [label="(Call,(const u_char *)lsap)"];
"1000433" [label="(Call,lsap = lsup->lsu_lsa)"];
"1000440" [label="(Call,(const u_char *)lsap < dataend)"];
"1000105" [label="(MethodParameterIn,register const u_char *dataend)"];
"1000462" [label="(Call,EXTRACT_16BITS(&lsap->ls_hdr.ls_length))"];
"1000439" [label="(Call,(const u_char *)lsap < dataend && i--)"];
"1000458" [label="(Call,(const u_char *)lsap +\n\t\t\t\t    EXTRACT_16BITS(&lsap->ls_hdr.ls_length))"];
"1000443" [label="(Identifier,lsap)"];
"1000440" [label="(Call,(const u_char *)lsap < dataend)"];
"1000453" [label="(ControlStructure,goto trunc;)"];
"1000446" [label="(Identifier,i)"];
"1000434" [label="(Identifier,lsap)"];
"1000509" [label="(MethodReturn,RET)"];
"1000218" [label="(Call,ipaddr_string(ndo, &hellop->hello_bdr))"];
"1000435" [label="(Call,lsup->lsu_lsa)"];
"1000438" [label="(ControlStructure,while ((const u_char *)lsap < dataend && i--))"];
"1000458" [label="(Call,(const u_char *)lsap +\n\t\t\t\t    EXTRACT_16BITS(&lsap->ls_hdr.ls_length))"];
"1000448" [label="(ControlStructure,if (ospf6_print_lsa(ndo, lsap, dataend)))"];
"1000441" [label="(Call,(const u_char *)lsap)"];
"1000450" [label="(Identifier,ndo)"];
"1000444" [label="(Identifier,dataend)"];
"1000105" [label="(MethodParameterIn,register const u_char *dataend)"];
"1000451" [label="(Identifier,lsap)"];
"1000449" [label="(Call,ospf6_print_lsa(ndo, lsap, dataend))"];
"1000241" [label="(Call,(const u_char *)ap < dataend)"];
"1000455" [label="(Identifier,lsap)"];
"1000469" [label="(ControlStructure,break;)"];
"1000466" [label="(Identifier,lsap)"];
"1000462" [label="(Call,EXTRACT_16BITS(&lsap->ls_hdr.ls_length))"];
"1000169" [label="(Call,ipaddr_string(ndo, &hellop->hello_ifid))"];
"1000461" [label="(Identifier,lsap)"];
"1000433" [label="(Call,lsap = lsup->lsu_lsa)"];
"1000495" [label="(Call,ospf6_print_lshdr(ndo, lshp++, dataend))"];
"1000452" [label="(Identifier,dataend)"];
"1000195" [label="(Call,ipaddr_string(ndo, &hellop->hello_dr))"];
"1000459" [label="(Call,(const u_char *)lsap)"];
"1000103" [label="(MethodParameterIn,netdissect_options *ndo)"];
"1000255" [label="(Call,ipaddr_string(ndo, ap))"];
"1000447" [label="(Block,)"];
"1000338" [label="(Call,(const u_char *)lshp < dataend)"];
"1000488" [label="(Call,(const u_char *)lshp < dataend)"];
"1000390" [label="(Call,ospf6_print_ls_type(ndo, EXTRACT_16BITS(&lsrp->ls_type),\n                                                    &lsrp->ls_stateid))"];
"1000456" [label="(Call,(const struct lsa6 *)((const u_char *)lsap +\n\t\t\t\t    EXTRACT_16BITS(&lsap->ls_hdr.ls_length)))"];
"1000411" [label="(Block,)"];
"1000370" [label="(Call,(const u_char *)lsrp < dataend)"];
"1000454" [label="(Call,lsap = (const struct lsa6 *)((const u_char *)lsap +\n\t\t\t\t    EXTRACT_16BITS(&lsap->ls_hdr.ls_length)))"];
"1000384" [label="(Call,ipaddr_string(ndo, &lsrp->ls_router))"];
"1000463" [label="(Call,&lsap->ls_hdr.ls_length)"];
"1000445" [label="(Call,i--)"];
"1000345" [label="(Call,ospf6_print_lshdr(ndo, lshp++, dataend))"];
"1000439" [label="(Call,(const u_char *)lsap < dataend && i--)"];
"1000441" -> "1000440"  [label="AST: "];
"1000441" -> "1000443"  [label="CFG: "];
"1000442" -> "1000441"  [label="AST: "];
"1000443" -> "1000441"  [label="AST: "];
"1000444" -> "1000441"  [label="CFG: "];
"1000441" -> "1000509"  [label="DDG: lsap"];
"1000441" -> "1000440"  [label="DDG: lsap"];
"1000454" -> "1000441"  [label="DDG: lsap"];
"1000433" -> "1000441"  [label="DDG: lsap"];
"1000441" -> "1000449"  [label="DDG: lsap"];
"1000454" -> "1000447"  [label="AST: "];
"1000454" -> "1000456"  [label="CFG: "];
"1000455" -> "1000454"  [label="AST: "];
"1000456" -> "1000454"  [label="AST: "];
"1000442" -> "1000454"  [label="CFG: "];
"1000454" -> "1000509"  [label="DDG: (const struct lsa6 *)((const u_char *)lsap +\n\t\t\t\t    EXTRACT_16BITS(&lsap->ls_hdr.ls_length))"];
"1000456" -> "1000454"  [label="DDG: (const u_char *)lsap +\n\t\t\t\t    EXTRACT_16BITS(&lsap->ls_hdr.ls_length)"];
"1000456" -> "1000458"  [label="CFG: "];
"1000457" -> "1000456"  [label="AST: "];
"1000458" -> "1000456"  [label="AST: "];
"1000456" -> "1000509"  [label="DDG: (const u_char *)lsap +\n\t\t\t\t    EXTRACT_16BITS(&lsap->ls_hdr.ls_length)"];
"1000459" -> "1000456"  [label="DDG: lsap"];
"1000462" -> "1000456"  [label="DDG: &lsap->ls_hdr.ls_length"];
"1000459" -> "1000458"  [label="AST: "];
"1000459" -> "1000461"  [label="CFG: "];
"1000460" -> "1000459"  [label="AST: "];
"1000461" -> "1000459"  [label="AST: "];
"1000466" -> "1000459"  [label="CFG: "];
"1000459" -> "1000458"  [label="DDG: lsap"];
"1000449" -> "1000459"  [label="DDG: lsap"];
"1000449" -> "1000448"  [label="AST: "];
"1000449" -> "1000452"  [label="CFG: "];
"1000450" -> "1000449"  [label="AST: "];
"1000451" -> "1000449"  [label="AST: "];
"1000452" -> "1000449"  [label="AST: "];
"1000453" -> "1000449"  [label="CFG: "];
"1000455" -> "1000449"  [label="CFG: "];
"1000449" -> "1000509"  [label="DDG: ndo"];
"1000449" -> "1000509"  [label="DDG: dataend"];
"1000449" -> "1000509"  [label="DDG: ospf6_print_lsa(ndo, lsap, dataend)"];
"1000449" -> "1000509"  [label="DDG: lsap"];
"1000449" -> "1000440"  [label="DDG: dataend"];
"1000103" -> "1000449"  [label="DDG: ndo"];
"1000440" -> "1000449"  [label="DDG: dataend"];
"1000105" -> "1000449"  [label="DDG: dataend"];
"1000103" -> "1000102"  [label="AST: "];
"1000103" -> "1000509"  [label="DDG: ndo"];
"1000103" -> "1000169"  [label="DDG: ndo"];
"1000103" -> "1000195"  [label="DDG: ndo"];
"1000103" -> "1000218"  [label="DDG: ndo"];
"1000103" -> "1000255"  [label="DDG: ndo"];
"1000103" -> "1000345"  [label="DDG: ndo"];
"1000103" -> "1000384"  [label="DDG: ndo"];
"1000103" -> "1000390"  [label="DDG: ndo"];
"1000103" -> "1000495"  [label="DDG: ndo"];
"1000433" -> "1000411"  [label="AST: "];
"1000433" -> "1000435"  [label="CFG: "];
"1000434" -> "1000433"  [label="AST: "];
"1000435" -> "1000433"  [label="AST: "];
"1000442" -> "1000433"  [label="CFG: "];
"1000433" -> "1000509"  [label="DDG: lsup->lsu_lsa"];
"1000440" -> "1000439"  [label="AST: "];
"1000440" -> "1000444"  [label="CFG: "];
"1000444" -> "1000440"  [label="AST: "];
"1000446" -> "1000440"  [label="CFG: "];
"1000439" -> "1000440"  [label="CFG: "];
"1000440" -> "1000509"  [label="DDG: (const u_char *)lsap"];
"1000440" -> "1000509"  [label="DDG: dataend"];
"1000440" -> "1000439"  [label="DDG: (const u_char *)lsap"];
"1000440" -> "1000439"  [label="DDG: dataend"];
"1000105" -> "1000440"  [label="DDG: dataend"];
"1000105" -> "1000102"  [label="AST: "];
"1000105" -> "1000509"  [label="DDG: dataend"];
"1000105" -> "1000241"  [label="DDG: dataend"];
"1000105" -> "1000338"  [label="DDG: dataend"];
"1000105" -> "1000345"  [label="DDG: dataend"];
"1000105" -> "1000370"  [label="DDG: dataend"];
"1000105" -> "1000488"  [label="DDG: dataend"];
"1000105" -> "1000495"  [label="DDG: dataend"];
"1000462" -> "1000458"  [label="AST: "];
"1000462" -> "1000463"  [label="CFG: "];
"1000463" -> "1000462"  [label="AST: "];
"1000458" -> "1000462"  [label="CFG: "];
"1000462" -> "1000509"  [label="DDG: &lsap->ls_hdr.ls_length"];
"1000462" -> "1000458"  [label="DDG: &lsap->ls_hdr.ls_length"];
"1000439" -> "1000438"  [label="AST: "];
"1000439" -> "1000445"  [label="CFG: "];
"1000445" -> "1000439"  [label="AST: "];
"1000450" -> "1000439"  [label="CFG: "];
"1000469" -> "1000439"  [label="CFG: "];
"1000439" -> "1000509"  [label="DDG: (const u_char *)lsap < dataend"];
"1000439" -> "1000509"  [label="DDG: (const u_char *)lsap < dataend && i--"];
"1000445" -> "1000439"  [label="DDG: i"];
"1000458" -> "1000509"  [label="DDG: EXTRACT_16BITS(&lsap->ls_hdr.ls_length)"];
}
