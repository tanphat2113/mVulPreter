digraph "0_Chrome_c0c8978849ac57e4ecd613ddc8ff7852a2054734_27@API" {
"1000156" [label="(Call,std::move(orientation_quaternion_fusion_algorithm_using_euler_angles))"];
"1000145" [label="(Call,orientation_quaternion_fusion_algorithm_using_euler_angles =\n          std::make_unique<\n              OrientationQuaternionFusionAlgorithmUsingEulerAngles>(\n              false /* absolute */))"];
"1000147" [label="(Call,std::make_unique<\n              OrientationQuaternionFusionAlgorithmUsingEulerAngles>(\n              false /* absolute */))"];
"1000149" [label="(Call,OrientationQuaternionFusionAlgorithmUsingEulerAngles>(\n              false /* absolute */))"];
"1000152" [label="(Call,PlatformSensorFusion::Create(\n          std::move(mapping), this,\n           std::move(orientation_quaternion_fusion_algorithm_using_euler_angles),\n           callback))"];
"1000157" [label="(Identifier,orientation_quaternion_fusion_algorithm_using_euler_angles)"];
"1000148" [label="(Identifier,std::make_unique)"];
"1000154" [label="(Identifier,mapping)"];
"1000145" [label="(Call,orientation_quaternion_fusion_algorithm_using_euler_angles =\n          std::make_unique<\n              OrientationQuaternionFusionAlgorithmUsingEulerAngles>(\n              false /* absolute */))"];
"1000146" [label="(Identifier,orientation_quaternion_fusion_algorithm_using_euler_angles)"];
"1000149" [label="(Call,OrientationQuaternionFusionAlgorithmUsingEulerAngles>(\n              false /* absolute */))"];
"1000151" [label="(Identifier,false)"];
"1000150" [label="(Identifier,OrientationQuaternionFusionAlgorithmUsingEulerAngles)"];
"1000159" [label="(ControlStructure,break;)"];
"1000143" [label="(Block,)"];
"1000152" [label="(Call,PlatformSensorFusion::Create(\n          std::move(mapping), this,\n           std::move(orientation_quaternion_fusion_algorithm_using_euler_angles),\n           callback))"];
"1000104" [label="(MethodParameterIn,const CreateSensorCallback& callback)"];
"1000153" [label="(Call,std::move(mapping))"];
"1000147" [label="(Call,std::make_unique<\n              OrientationQuaternionFusionAlgorithmUsingEulerAngles>(\n              false /* absolute */))"];
"1000156" [label="(Call,std::move(orientation_quaternion_fusion_algorithm_using_euler_angles))"];
"1000158" [label="(Identifier,callback)"];
"1000163" [label="(MethodReturn,void)"];
"1000155" [label="(Identifier,this)"];
"1000156" -> "1000152"  [label="AST: "];
"1000156" -> "1000157"  [label="CFG: "];
"1000157" -> "1000156"  [label="AST: "];
"1000158" -> "1000156"  [label="CFG: "];
"1000156" -> "1000163"  [label="DDG: orientation_quaternion_fusion_algorithm_using_euler_angles"];
"1000156" -> "1000152"  [label="DDG: orientation_quaternion_fusion_algorithm_using_euler_angles"];
"1000145" -> "1000156"  [label="DDG: orientation_quaternion_fusion_algorithm_using_euler_angles"];
"1000145" -> "1000143"  [label="AST: "];
"1000145" -> "1000147"  [label="CFG: "];
"1000146" -> "1000145"  [label="AST: "];
"1000147" -> "1000145"  [label="AST: "];
"1000154" -> "1000145"  [label="CFG: "];
"1000145" -> "1000163"  [label="DDG: std::make_unique<\n              OrientationQuaternionFusionAlgorithmUsingEulerAngles>(\n              false /* absolute */)"];
"1000147" -> "1000145"  [label="DDG: std::make_unique"];
"1000147" -> "1000145"  [label="DDG: OrientationQuaternionFusionAlgorithmUsingEulerAngles>(\n              false /* absolute */)"];
"1000147" -> "1000149"  [label="CFG: "];
"1000148" -> "1000147"  [label="AST: "];
"1000149" -> "1000147"  [label="AST: "];
"1000147" -> "1000163"  [label="DDG: OrientationQuaternionFusionAlgorithmUsingEulerAngles>(\n              false /* absolute */)"];
"1000147" -> "1000163"  [label="DDG: std::make_unique"];
"1000149" -> "1000147"  [label="DDG: OrientationQuaternionFusionAlgorithmUsingEulerAngles"];
"1000149" -> "1000147"  [label="DDG: false"];
"1000149" -> "1000151"  [label="CFG: "];
"1000150" -> "1000149"  [label="AST: "];
"1000151" -> "1000149"  [label="AST: "];
"1000149" -> "1000163"  [label="DDG: false"];
"1000149" -> "1000163"  [label="DDG: OrientationQuaternionFusionAlgorithmUsingEulerAngles"];
"1000152" -> "1000143"  [label="AST: "];
"1000152" -> "1000158"  [label="CFG: "];
"1000153" -> "1000152"  [label="AST: "];
"1000155" -> "1000152"  [label="AST: "];
"1000158" -> "1000152"  [label="AST: "];
"1000159" -> "1000152"  [label="CFG: "];
"1000152" -> "1000163"  [label="DDG: std::move(mapping)"];
"1000152" -> "1000163"  [label="DDG: PlatformSensorFusion::Create(\n          std::move(mapping), this,\n           std::move(orientation_quaternion_fusion_algorithm_using_euler_angles),\n           callback)"];
"1000152" -> "1000163"  [label="DDG: this"];
"1000152" -> "1000163"  [label="DDG: callback"];
"1000152" -> "1000163"  [label="DDG: std::move(orientation_quaternion_fusion_algorithm_using_euler_angles)"];
"1000153" -> "1000152"  [label="DDG: mapping"];
"1000104" -> "1000152"  [label="DDG: callback"];
}
