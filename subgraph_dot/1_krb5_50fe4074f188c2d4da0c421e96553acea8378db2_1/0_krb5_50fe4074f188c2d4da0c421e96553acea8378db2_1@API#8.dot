digraph "0_krb5_50fe4074f188c2d4da0c421e96553acea8378db2_1@API" {
"1000132" [label="(Call,retval = crypto_retrieve_cert_sans(context, plgctx->cryptoctx,\n                                       reqctx->cryptoctx, plgctx->idctx,\n                                        &princs,\n                                        plgctx->opts->allow_upn ? &upns : NULL,\n                                        NULL))"];
"1000134" [label="(Call,crypto_retrieve_cert_sans(context, plgctx->cryptoctx,\n                                       reqctx->cryptoctx, plgctx->idctx,\n                                        &princs,\n                                        plgctx->opts->allow_upn ? &upns : NULL,\n                                        NULL))"];
"1000105" [label="(MethodParameterIn,krb5_context context)"];
"1000158" [label="(Call,retval == ENOENT)"];
"1000408" [label="(Call,pkiDebug(\"%s: returning retval %d, valid_san %d\n\",\n             __FUNCTION__, retval, *valid_san))"];
"1000414" [label="(Return,return retval;)"];
"1000160" [label="(Identifier,ENOENT)"];
"1000408" [label="(Call,pkiDebug(\"%s: returning retval %d, valid_san %d\n\",\n             __FUNCTION__, retval, *valid_san))"];
"1000265" [label="(Call,retval = 0)"];
"1000134" [label="(Call,crypto_retrieve_cert_sans(context, plgctx->cryptoctx,\n                                       reqctx->cryptoctx, plgctx->idctx,\n                                        &princs,\n                                        plgctx->opts->allow_upn ? &upns : NULL,\n                                        NULL))"];
"1000280" [label="(Call,retval = KRB5KDC_ERR_CLIENT_NAME_MISMATCH)"];
"1000252" [label="(Call,cb->match_client(context, rock, princs[i]))"];
"1000277" [label="(Call,pkiDebug(\"%s: no upn sans (or we wouldn't accept them anyway)\n\",\n                 __FUNCTION__))"];
"1000135" [label="(Identifier,context)"];
"1000112" [label="(Block,)"];
"1000167" [label="(Identifier,retval)"];
"1000306" [label="(Call,pkiDebug(\"%s: Comparing client '%s' to upn san value '%s'\n\",\n                 __FUNCTION__, client_string, san_string))"];
"1000248" [label="(Call,krb5_free_unparsed_name(context, san_string))"];
"1000199" [label="(Call,pkiDebug(\"%s: call_san_checking_plugins() returned decision %d\n\",\n             __FUNCTION__, plugin_decision))"];
"1000236" [label="(Call,krb5_unparse_name(context, princs[i], &san_string))"];
"1000172" [label="(Call,retval = KRB5KDC_ERR_CLIENT_NAME_MISMATCH)"];
"1000261" [label="(Call,*valid_san = 1)"];
"1000299" [label="(Call,krb5_unparse_name(context, upns[i], &san_string))"];
"1000328" [label="(Call,retval = 0)"];
"1000162" [label="(Call,TRACE_PKINIT_SERVER_NO_SAN(context))"];
"1000411" [label="(Identifier,retval)"];
"1000315" [label="(Call,cb->match_client(context, rock, upns[i]))"];
"1000410" [label="(Identifier,__FUNCTION__)"];
"1000412" [label="(Call,*valid_san)"];
"1000344" [label="(Call,*valid_san = 0)"];
"1000311" [label="(Call,krb5_free_unparsed_name(context, san_string))"];
"1000163" [label="(Identifier,context)"];
"1000243" [label="(Call,pkiDebug(\"%s: Comparing client '%s' to pkinit san value '%s'\n\",\n                 __FUNCTION__, client_string, san_string))"];
"1000128" [label="(Call,*valid_san = 0)"];
"1000414" [label="(Return,return retval;)"];
"1000371" [label="(Call,krb5_free_principal(context, princs[i]))"];
"1000356" [label="(Call,princs != NULL)"];
"1000415" [label="(Identifier,retval)"];
"1000159" [label="(Identifier,retval)"];
"1000416" [label="(MethodReturn,RET)"];
"1000136" [label="(Call,plgctx->cryptoctx)"];
"1000147" [label="(Call,plgctx->opts->allow_upn ? &upns : NULL)"];
"1000158" [label="(Call,retval == ENOENT)"];
"1000409" [label="(Literal,\"%s: returning retval %d, valid_san %d\n\")"];
"1000332" [label="(Call,pkiDebug(\"%s: no upn san match found\n\", __FUNCTION__))"];
"1000157" [label="(ControlStructure,if (retval == ENOENT))"];
"1000145" [label="(Call,&princs)"];
"1000169" [label="(Call,pkiDebug(\"%s: error from retrieve_certificate_sans()\n\", __FUNCTION__))"];
"1000208" [label="(Call,retval = plugin_decision)"];
"1000178" [label="(Call,call_san_checking_plugins(context, plgctx, reqctx, princs,\n                                       upns, NULL, &plugin_decision, &ignore))"];
"1000139" [label="(Call,reqctx->cryptoctx)"];
"1000351" [label="(Call,retval = 0)"];
"1000324" [label="(Call,*valid_san = 1)"];
"1000132" [label="(Call,retval = crypto_retrieve_cert_sans(context, plgctx->cryptoctx,\n                                       reqctx->cryptoctx, plgctx->idctx,\n                                        &princs,\n                                        plgctx->opts->allow_upn ? &upns : NULL,\n                                        NULL))"];
"1000156" [label="(Identifier,NULL)"];
"1000212" [label="(Call,krb5_unparse_name(context, client, &client_string))"];
"1000133" [label="(Identifier,retval)"];
"1000142" [label="(Call,plgctx->idctx)"];
"1000105" [label="(MethodParameterIn,krb5_context context)"];
"1000322" [label="(Call,TRACE_PKINIT_SERVER_MATCHING_UPN_FOUND(context))"];
"1000259" [label="(Call,TRACE_PKINIT_SERVER_MATCHING_SAN_FOUND(context))"];
"1000394" [label="(Call,krb5_free_principal(context, upns[i]))"];
"1000405" [label="(Call,krb5_free_unparsed_name(context, client_string))"];
"1000132" -> "1000112"  [label="AST: "];
"1000132" -> "1000134"  [label="CFG: "];
"1000133" -> "1000132"  [label="AST: "];
"1000134" -> "1000132"  [label="AST: "];
"1000159" -> "1000132"  [label="CFG: "];
"1000132" -> "1000416"  [label="DDG: "];
"1000134" -> "1000132"  [label="DDG: "];
"1000134" -> "1000132"  [label="DDG: "];
"1000134" -> "1000132"  [label="DDG: "];
"1000134" -> "1000132"  [label="DDG: "];
"1000134" -> "1000132"  [label="DDG: "];
"1000134" -> "1000132"  [label="DDG: "];
"1000134" -> "1000132"  [label="DDG: "];
"1000132" -> "1000158"  [label="DDG: "];
"1000134" -> "1000156"  [label="CFG: "];
"1000135" -> "1000134"  [label="AST: "];
"1000136" -> "1000134"  [label="AST: "];
"1000139" -> "1000134"  [label="AST: "];
"1000142" -> "1000134"  [label="AST: "];
"1000145" -> "1000134"  [label="AST: "];
"1000147" -> "1000134"  [label="AST: "];
"1000156" -> "1000134"  [label="AST: "];
"1000134" -> "1000416"  [label="DDG: "];
"1000134" -> "1000416"  [label="DDG: "];
"1000134" -> "1000416"  [label="DDG: "];
"1000134" -> "1000416"  [label="DDG: "];
"1000134" -> "1000416"  [label="DDG: "];
"1000134" -> "1000416"  [label="DDG: "];
"1000105" -> "1000134"  [label="DDG: "];
"1000134" -> "1000162"  [label="DDG: "];
"1000134" -> "1000178"  [label="DDG: "];
"1000134" -> "1000178"  [label="DDG: "];
"1000134" -> "1000356"  [label="DDG: "];
"1000134" -> "1000371"  [label="DDG: "];
"1000134" -> "1000394"  [label="DDG: "];
"1000134" -> "1000405"  [label="DDG: "];
"1000105" -> "1000104"  [label="AST: "];
"1000105" -> "1000416"  [label="DDG: "];
"1000105" -> "1000162"  [label="DDG: "];
"1000105" -> "1000178"  [label="DDG: "];
"1000105" -> "1000212"  [label="DDG: "];
"1000105" -> "1000236"  [label="DDG: "];
"1000105" -> "1000248"  [label="DDG: "];
"1000105" -> "1000252"  [label="DDG: "];
"1000105" -> "1000259"  [label="DDG: "];
"1000105" -> "1000299"  [label="DDG: "];
"1000105" -> "1000311"  [label="DDG: "];
"1000105" -> "1000315"  [label="DDG: "];
"1000105" -> "1000322"  [label="DDG: "];
"1000105" -> "1000371"  [label="DDG: "];
"1000105" -> "1000394"  [label="DDG: "];
"1000105" -> "1000405"  [label="DDG: "];
"1000158" -> "1000157"  [label="AST: "];
"1000158" -> "1000160"  [label="CFG: "];
"1000159" -> "1000158"  [label="AST: "];
"1000160" -> "1000158"  [label="AST: "];
"1000163" -> "1000158"  [label="CFG: "];
"1000167" -> "1000158"  [label="CFG: "];
"1000158" -> "1000416"  [label="DDG: "];
"1000158" -> "1000416"  [label="DDG: "];
"1000158" -> "1000408"  [label="DDG: "];
"1000408" -> "1000112"  [label="AST: "];
"1000408" -> "1000412"  [label="CFG: "];
"1000409" -> "1000408"  [label="AST: "];
"1000410" -> "1000408"  [label="AST: "];
"1000411" -> "1000408"  [label="AST: "];
"1000412" -> "1000408"  [label="AST: "];
"1000415" -> "1000408"  [label="CFG: "];
"1000408" -> "1000416"  [label="DDG: "];
"1000408" -> "1000416"  [label="DDG: "];
"1000408" -> "1000416"  [label="DDG: "];
"1000408" -> "1000416"  [label="DDG: "];
"1000332" -> "1000408"  [label="DDG: "];
"1000199" -> "1000408"  [label="DDG: "];
"1000169" -> "1000408"  [label="DDG: "];
"1000243" -> "1000408"  [label="DDG: "];
"1000306" -> "1000408"  [label="DDG: "];
"1000277" -> "1000408"  [label="DDG: "];
"1000208" -> "1000408"  [label="DDG: "];
"1000351" -> "1000408"  [label="DDG: "];
"1000265" -> "1000408"  [label="DDG: "];
"1000328" -> "1000408"  [label="DDG: "];
"1000280" -> "1000408"  [label="DDG: "];
"1000172" -> "1000408"  [label="DDG: "];
"1000128" -> "1000408"  [label="DDG: "];
"1000261" -> "1000408"  [label="DDG: "];
"1000324" -> "1000408"  [label="DDG: "];
"1000344" -> "1000408"  [label="DDG: "];
"1000408" -> "1000414"  [label="DDG: "];
"1000414" -> "1000112"  [label="AST: "];
"1000414" -> "1000415"  [label="CFG: "];
"1000415" -> "1000414"  [label="AST: "];
"1000416" -> "1000414"  [label="CFG: "];
"1000414" -> "1000416"  [label="DDG: "];
"1000415" -> "1000414"  [label="DDG: "];
}
