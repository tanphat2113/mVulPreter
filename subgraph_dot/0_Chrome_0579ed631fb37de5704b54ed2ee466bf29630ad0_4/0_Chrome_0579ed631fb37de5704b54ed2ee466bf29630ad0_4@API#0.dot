digraph "0_Chrome_0579ed631fb37de5704b54ed2ee466bf29630ad0_4@API" {
"1000138" [label="(Call,freeifaddrs(interfaces))"];
"1000133" [label="(Call,internal::IfaddrsToNetworkInterfaceList(\n      policy, interfaces, ip_attributes_getter.get(), networks))"];
"1000102" [label="(MethodParameterIn,int policy)"];
"1000105" [label="(Call,networks == NULL)"];
"1000101" [label="(MethodParameterIn,NetworkInterfaceList* networks)"];
"1000137" [label="(Identifier,networks)"];
"1000105" [label="(Call,networks == NULL)"];
"1000102" [label="(MethodParameterIn,int policy)"];
"1000131" [label="(Call,result = internal::IfaddrsToNetworkInterfaceList(\n      policy, interfaces, ip_attributes_getter.get(), networks))"];
"1000138" [label="(Call,freeifaddrs(interfaces))"];
"1000101" [label="(MethodParameterIn,NetworkInterfaceList* networks)"];
"1000135" [label="(Identifier,interfaces)"];
"1000110" [label="(Call,base::ThreadRestrictions::AssertIOAllowed())"];
"1000106" [label="(Identifier,networks)"];
"1000141" [label="(Identifier,result)"];
"1000142" [label="(MethodReturn,bool)"];
"1000136" [label="(Call,ip_attributes_getter.get())"];
"1000107" [label="(Identifier,NULL)"];
"1000133" [label="(Call,internal::IfaddrsToNetworkInterfaceList(\n      policy, interfaces, ip_attributes_getter.get(), networks))"];
"1000104" [label="(ControlStructure,if (networks == NULL))"];
"1000139" [label="(Identifier,interfaces)"];
"1000109" [label="(Identifier,false)"];
"1000103" [label="(Block,)"];
"1000134" [label="(Identifier,policy)"];
"1000138" -> "1000103"  [label="AST: "];
"1000138" -> "1000139"  [label="CFG: "];
"1000139" -> "1000138"  [label="AST: "];
"1000141" -> "1000138"  [label="CFG: "];
"1000138" -> "1000142"  [label="DDG: interfaces"];
"1000138" -> "1000142"  [label="DDG: freeifaddrs(interfaces)"];
"1000133" -> "1000138"  [label="DDG: interfaces"];
"1000133" -> "1000131"  [label="AST: "];
"1000133" -> "1000137"  [label="CFG: "];
"1000134" -> "1000133"  [label="AST: "];
"1000135" -> "1000133"  [label="AST: "];
"1000136" -> "1000133"  [label="AST: "];
"1000137" -> "1000133"  [label="AST: "];
"1000131" -> "1000133"  [label="CFG: "];
"1000133" -> "1000142"  [label="DDG: ip_attributes_getter.get()"];
"1000133" -> "1000142"  [label="DDG: policy"];
"1000133" -> "1000142"  [label="DDG: networks"];
"1000133" -> "1000131"  [label="DDG: policy"];
"1000133" -> "1000131"  [label="DDG: interfaces"];
"1000133" -> "1000131"  [label="DDG: ip_attributes_getter.get()"];
"1000133" -> "1000131"  [label="DDG: networks"];
"1000102" -> "1000133"  [label="DDG: policy"];
"1000105" -> "1000133"  [label="DDG: networks"];
"1000101" -> "1000133"  [label="DDG: networks"];
"1000102" -> "1000100"  [label="AST: "];
"1000102" -> "1000142"  [label="DDG: policy"];
"1000105" -> "1000104"  [label="AST: "];
"1000105" -> "1000107"  [label="CFG: "];
"1000106" -> "1000105"  [label="AST: "];
"1000107" -> "1000105"  [label="AST: "];
"1000109" -> "1000105"  [label="CFG: "];
"1000110" -> "1000105"  [label="CFG: "];
"1000105" -> "1000142"  [label="DDG: NULL"];
"1000105" -> "1000142"  [label="DDG: networks == NULL"];
"1000105" -> "1000142"  [label="DDG: networks"];
"1000101" -> "1000105"  [label="DDG: networks"];
"1000101" -> "1000100"  [label="AST: "];
"1000101" -> "1000142"  [label="DDG: networks"];
}
