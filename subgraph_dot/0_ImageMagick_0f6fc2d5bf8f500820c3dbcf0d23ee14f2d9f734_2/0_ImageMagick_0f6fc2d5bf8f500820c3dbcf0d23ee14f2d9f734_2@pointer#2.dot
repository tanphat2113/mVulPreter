digraph "0_ImageMagick_0f6fc2d5bf8f500820c3dbcf0d23ee14f2d9f734_2@pointer" {
"1000129" [label="(Call,*p != '\0')"];
"1000195" [label="(Call,*p == ',')"];
"1000190" [label="(Call,(unsigned char) *p)"];
"1000143" [label="(Call,(unsigned char) *p)"];
"1000129" [label="(Call,*p != '\0')"];
"1000128" [label="(Call,*p != '\0' && i < MAX_SIZES)"];
"1000141" [label="(Call,(int) ((unsigned char) *p))"];
"1000140" [label="(Call,isspace((int) ((unsigned char) *p)))"];
"1000139" [label="(Call,isspace((int) ((unsigned char) *p)) != 0)"];
"1000188" [label="(Call,(int) ((unsigned char) *p))"];
"1000187" [label="(Call,isspace((int) ((unsigned char) *p)))"];
"1000186" [label="(Call,isspace((int) ((unsigned char) *p)) != 0)"];
"1000185" [label="(Call,(isspace((int) ((unsigned char) *p)) != 0) || (*p == ','))"];
"1000128" [label="(Call,*p != '\0' && i < MAX_SIZES)"];
"1000195" [label="(Call,*p == ',')"];
"1000138" [label="(ControlStructure,while ((isspace((int) ((unsigned char) *p)) != 0)))"];
"1000190" [label="(Call,(unsigned char) *p)"];
"1000185" [label="(Call,(isspace((int) ((unsigned char) *p)) != 0) || (*p == ','))"];
"1000149" [label="(Identifier,p)"];
"1000203" [label="(Identifier,i)"];
"1000196" [label="(Call,*p)"];
"1000139" [label="(Call,isspace((int) ((unsigned char) *p)) != 0)"];
"1000192" [label="(Call,*p)"];
"1000140" [label="(Call,isspace((int) ((unsigned char) *p)))"];
"1000145" [label="(Call,*p)"];
"1000187" [label="(Call,isspace((int) ((unsigned char) *p)))"];
"1000200" [label="(Identifier,p)"];
"1000262" [label="(MethodReturn,Image *)"];
"1000151" [label="(Identifier,size)"];
"1000186" [label="(Call,isspace((int) ((unsigned char) *p)) != 0)"];
"1000131" [label="(Identifier,p)"];
"1000143" [label="(Call,(unsigned char) *p)"];
"1000127" [label="(ControlStructure,while (*p != '\0' && i < MAX_SIZES))"];
"1000132" [label="(Literal,'\0')"];
"1000141" [label="(Call,(int) ((unsigned char) *p))"];
"1000198" [label="(Literal,',')"];
"1000194" [label="(Literal,0)"];
"1000133" [label="(Call,i < MAX_SIZES)"];
"1000184" [label="(ControlStructure,while ((isspace((int) ((unsigned char) *p)) != 0) || (*p == ',')))"];
"1000130" [label="(Call,*p)"];
"1000147" [label="(Literal,0)"];
"1000129" [label="(Call,*p != '\0')"];
"1000134" [label="(Identifier,i)"];
"1000188" [label="(Call,(int) ((unsigned char) *p))"];
"1000197" [label="(Identifier,p)"];
"1000129" -> "1000128"  [label="AST: "];
"1000129" -> "1000132"  [label="CFG: "];
"1000130" -> "1000129"  [label="AST: "];
"1000132" -> "1000129"  [label="AST: "];
"1000134" -> "1000129"  [label="CFG: "];
"1000128" -> "1000129"  [label="CFG: "];
"1000129" -> "1000262"  [label="DDG: *p"];
"1000129" -> "1000128"  [label="DDG: *p"];
"1000129" -> "1000128"  [label="DDG: '\0'"];
"1000195" -> "1000129"  [label="DDG: *p"];
"1000190" -> "1000129"  [label="DDG: *p"];
"1000129" -> "1000143"  [label="DDG: *p"];
"1000195" -> "1000185"  [label="AST: "];
"1000195" -> "1000198"  [label="CFG: "];
"1000196" -> "1000195"  [label="AST: "];
"1000198" -> "1000195"  [label="AST: "];
"1000185" -> "1000195"  [label="CFG: "];
"1000195" -> "1000190"  [label="DDG: *p"];
"1000195" -> "1000185"  [label="DDG: *p"];
"1000195" -> "1000185"  [label="DDG: ','"];
"1000190" -> "1000195"  [label="DDG: *p"];
"1000190" -> "1000188"  [label="AST: "];
"1000190" -> "1000192"  [label="CFG: "];
"1000191" -> "1000190"  [label="AST: "];
"1000192" -> "1000190"  [label="AST: "];
"1000188" -> "1000190"  [label="CFG: "];
"1000190" -> "1000188"  [label="DDG: *p"];
"1000143" -> "1000190"  [label="DDG: *p"];
"1000143" -> "1000141"  [label="AST: "];
"1000143" -> "1000145"  [label="CFG: "];
"1000144" -> "1000143"  [label="AST: "];
"1000145" -> "1000143"  [label="AST: "];
"1000141" -> "1000143"  [label="CFG: "];
"1000143" -> "1000262"  [label="DDG: *p"];
"1000143" -> "1000141"  [label="DDG: *p"];
"1000128" -> "1000127"  [label="AST: "];
"1000128" -> "1000133"  [label="CFG: "];
"1000133" -> "1000128"  [label="AST: "];
"1000142" -> "1000128"  [label="CFG: "];
"1000203" -> "1000128"  [label="CFG: "];
"1000128" -> "1000262"  [label="DDG: *p != '\0'"];
"1000128" -> "1000262"  [label="DDG: i < MAX_SIZES"];
"1000128" -> "1000262"  [label="DDG: *p != '\0' && i < MAX_SIZES"];
"1000133" -> "1000128"  [label="DDG: i"];
"1000133" -> "1000128"  [label="DDG: MAX_SIZES"];
"1000141" -> "1000140"  [label="AST: "];
"1000142" -> "1000141"  [label="AST: "];
"1000140" -> "1000141"  [label="CFG: "];
"1000141" -> "1000262"  [label="DDG: (unsigned char) *p"];
"1000141" -> "1000140"  [label="DDG: (unsigned char) *p"];
"1000140" -> "1000139"  [label="AST: "];
"1000147" -> "1000140"  [label="CFG: "];
"1000140" -> "1000262"  [label="DDG: (int) ((unsigned char) *p)"];
"1000140" -> "1000139"  [label="DDG: (int) ((unsigned char) *p)"];
"1000139" -> "1000138"  [label="AST: "];
"1000139" -> "1000147"  [label="CFG: "];
"1000147" -> "1000139"  [label="AST: "];
"1000149" -> "1000139"  [label="CFG: "];
"1000151" -> "1000139"  [label="CFG: "];
"1000139" -> "1000262"  [label="DDG: isspace((int) ((unsigned char) *p)) != 0"];
"1000139" -> "1000262"  [label="DDG: isspace((int) ((unsigned char) *p))"];
"1000188" -> "1000187"  [label="AST: "];
"1000189" -> "1000188"  [label="AST: "];
"1000187" -> "1000188"  [label="CFG: "];
"1000188" -> "1000262"  [label="DDG: (unsigned char) *p"];
"1000188" -> "1000187"  [label="DDG: (unsigned char) *p"];
"1000187" -> "1000186"  [label="AST: "];
"1000194" -> "1000187"  [label="CFG: "];
"1000187" -> "1000262"  [label="DDG: (int) ((unsigned char) *p)"];
"1000187" -> "1000186"  [label="DDG: (int) ((unsigned char) *p)"];
"1000186" -> "1000185"  [label="AST: "];
"1000186" -> "1000194"  [label="CFG: "];
"1000194" -> "1000186"  [label="AST: "];
"1000197" -> "1000186"  [label="CFG: "];
"1000185" -> "1000186"  [label="CFG: "];
"1000186" -> "1000262"  [label="DDG: isspace((int) ((unsigned char) *p))"];
"1000186" -> "1000185"  [label="DDG: isspace((int) ((unsigned char) *p))"];
"1000186" -> "1000185"  [label="DDG: 0"];
"1000185" -> "1000184"  [label="AST: "];
"1000131" -> "1000185"  [label="CFG: "];
"1000200" -> "1000185"  [label="CFG: "];
"1000185" -> "1000262"  [label="DDG: (isspace((int) ((unsigned char) *p)) != 0) || (*p == ',')"];
"1000185" -> "1000262"  [label="DDG: isspace((int) ((unsigned char) *p)) != 0"];
"1000185" -> "1000262"  [label="DDG: *p == ','"];
}
