digraph "0_linux_979d63d50c0c0f7bc537bf821e056cc9fe5abd38_0@integer" {
"1000276" [label="(Call,other_branch = push_stack(env, *insn_idx + insn->off + 1, *insn_idx,\n\t\t\t\t  false))"];
"1000278" [label="(Call,push_stack(env, *insn_idx + insn->off + 1, *insn_idx,\n\t\t\t\t  false))"];
"1000220" [label="(Call,check_reg_arg(env, insn->dst_reg, SRC_OP))"];
"1000188" [label="(Call,is_pointer_value(env, insn->src_reg))"];
"1000177" [label="(Call,check_reg_arg(env, insn->src_reg, SRC_OP))"];
"1000109" [label="(MethodParameterIn,struct bpf_verifier_env *env)"];
"1000292" [label="(Call,!other_branch)"];
"1000475" [label="(Call,mark_ptr_or_null_regs(other_branch, insn->dst_reg,\n\t\t\t\t      opcode == BPF_JEQ))"];
"1000487" [label="(Call,try_match_pkt_pointers(insn, dst_reg, &regs[insn->src_reg],\n\t\t\t\t\t   this_branch, other_branch))"];
"1000486" [label="(Call,!try_match_pkt_pointers(insn, dst_reg, &regs[insn->src_reg],\n\t\t\t\t\t   this_branch, other_branch))"];
"1000485" [label="(Call,!try_match_pkt_pointers(insn, dst_reg, &regs[insn->src_reg],\n\t\t\t\t\t   this_branch, other_branch) &&\n\t\t   is_pointer_value(env, insn->dst_reg))"];
"1000519" [label="(Call,print_verifier_state(env, this_branch->frame[this_branch->curframe]))"];
"1000498" [label="(Call,is_pointer_value(env, insn->dst_reg))"];
"1000195" [label="(Identifier,env)"];
"1000477" [label="(Call,insn->dst_reg)"];
"1000428" [label="(Call,reg_set_min_max(&other_branch_regs[insn->dst_reg],\n\t\t\t\t\tdst_reg, insn->imm, opcode))"];
"1000110" [label="(MethodParameterIn,struct bpf_insn *insn)"];
"1000342" [label="(Call,reg_set_min_max(&other_branch_regs[insn->dst_reg],\n\t\t\t\t\t\tdst_reg, regs[insn->src_reg].var_off.value,\n\t\t\t\t\t\topcode))"];
"1000476" [label="(Identifier,other_branch)"];
"1000277" [label="(Identifier,other_branch)"];
"1000230" [label="(Call,dst_reg = &regs[insn->dst_reg])"];
"1000187" [label="(ControlStructure,if (is_pointer_value(env, insn->src_reg)))"];
"1000486" [label="(Call,!try_match_pkt_pointers(insn, dst_reg, &regs[insn->src_reg],\n\t\t\t\t\t   this_branch, other_branch))"];
"1000179" [label="(Call,insn->src_reg)"];
"1000496" [label="(Identifier,this_branch)"];
"1000225" [label="(Identifier,SRC_OP)"];
"1000276" [label="(Call,other_branch = push_stack(env, *insn_idx + insn->off + 1, *insn_idx,\n\t\t\t\t  false))"];
"1000467" [label="(Call,mark_ptr_or_null_regs(this_branch, insn->dst_reg,\n\t\t\t\t      opcode == BPF_JNE))"];
"1000147" [label="(Call,verbose(env, \"invalid BPF_JMP opcode %x\n\", opcode))"];
"1000394" [label="(Call,reg_combine_min_max(&other_branch_regs[insn->src_reg],\n\t\t\t\t\t\t    &other_branch_regs[insn->dst_reg],\n\t\t\t\t\t\t    &regs[insn->src_reg],\n\t\t\t\t\t\t    &regs[insn->dst_reg], opcode))"];
"1000296" [label="(Identifier,EFAULT)"];
"1000290" [label="(Identifier,false)"];
"1000475" [label="(Call,mark_ptr_or_null_regs(other_branch, insn->dst_reg,\n\t\t\t\t      opcode == BPF_JEQ))"];
"1000516" [label="(Identifier,env)"];
"1000114" [label="(Call,*this_branch = env->cur_state)"];
"1000178" [label="(Identifier,env)"];
"1000292" [label="(Call,!other_branch)"];
"1000112" [label="(Block,)"];
"1000218" [label="(Call,err = check_reg_arg(env, insn->dst_reg, SRC_OP))"];
"1000177" [label="(Call,check_reg_arg(env, insn->src_reg, SRC_OP))"];
"1000291" [label="(ControlStructure,if (!other_branch))"];
"1000221" [label="(Identifier,env)"];
"1000279" [label="(Identifier,env)"];
"1000298" [label="(Identifier,other_branch_regs)"];
"1000489" [label="(Identifier,dst_reg)"];
"1000169" [label="(Call,verbose(env, \"BPF_JMP uses reserved fields\n\"))"];
"1000219" [label="(Identifier,err)"];
"1000194" [label="(Call,verbose(env, \"R%d pointer comparison prohibited\n\",\n\t\t\t\tinsn->src_reg))"];
"1000220" [label="(Call,check_reg_arg(env, insn->dst_reg, SRC_OP))"];
"1000175" [label="(Call,err = check_reg_arg(env, insn->src_reg, SRC_OP))"];
"1000280" [label="(Call,*insn_idx + insn->off + 1)"];
"1000212" [label="(Call,verbose(env, \"BPF_JMP uses reserved fields\n\"))"];
"1000466" [label="(Block,)"];
"1000490" [label="(Call,&regs[insn->src_reg])"];
"1000188" [label="(Call,is_pointer_value(env, insn->src_reg))"];
"1000485" [label="(Call,!try_match_pkt_pointers(insn, dst_reg, &regs[insn->src_reg],\n\t\t\t\t\t   this_branch, other_branch) &&\n\t\t   is_pointer_value(env, insn->dst_reg))"];
"1000504" [label="(Call,verbose(env, \"R%d pointer comparison prohibited\n\",\n\t\t\tinsn->dst_reg))"];
"1000249" [label="(Call,is_branch_taken(dst_reg, insn->imm, opcode))"];
"1000497" [label="(Identifier,other_branch)"];
"1000109" [label="(MethodParameterIn,struct bpf_verifier_env *env)"];
"1000499" [label="(Identifier,env)"];
"1000487" [label="(Call,try_match_pkt_pointers(insn, dst_reg, &regs[insn->src_reg],\n\t\t\t\t\t   this_branch, other_branch))"];
"1000182" [label="(Identifier,SRC_OP)"];
"1000480" [label="(Call,opcode == BPF_JEQ)"];
"1000366" [label="(Call,reg_set_min_max_inv(&other_branch_regs[insn->src_reg],\n\t\t\t\t\t\t    &regs[insn->src_reg],\n\t\t\t\t\t\t    dst_reg->var_off.value, opcode))"];
"1000530" [label="(MethodReturn,static int)"];
"1000488" [label="(Identifier,insn)"];
"1000484" [label="(ControlStructure,if (!try_match_pkt_pointers(insn, dst_reg, &regs[insn->src_reg],\n\t\t\t\t\t   this_branch, other_branch) &&\n\t\t   is_pointer_value(env, insn->dst_reg)))"];
"1000189" [label="(Identifier,env)"];
"1000505" [label="(Identifier,env)"];
"1000293" [label="(Identifier,other_branch)"];
"1000190" [label="(Call,insn->src_reg)"];
"1000222" [label="(Call,insn->dst_reg)"];
"1000278" [label="(Call,push_stack(env, *insn_idx + insn->off + 1, *insn_idx,\n\t\t\t\t  false))"];
"1000288" [label="(Call,*insn_idx)"];
"1000276" -> "1000112"  [label="AST: "];
"1000276" -> "1000278"  [label="CFG: "];
"1000277" -> "1000276"  [label="AST: "];
"1000278" -> "1000276"  [label="AST: "];
"1000293" -> "1000276"  [label="CFG: "];
"1000276" -> "1000530"  [label="DDG: push_stack(env, *insn_idx + insn->off + 1, *insn_idx,\n\t\t\t\t  false)"];
"1000278" -> "1000276"  [label="DDG: env"];
"1000278" -> "1000276"  [label="DDG: *insn_idx + insn->off + 1"];
"1000278" -> "1000276"  [label="DDG: *insn_idx"];
"1000278" -> "1000276"  [label="DDG: false"];
"1000276" -> "1000292"  [label="DDG: other_branch"];
"1000278" -> "1000290"  [label="CFG: "];
"1000279" -> "1000278"  [label="AST: "];
"1000280" -> "1000278"  [label="AST: "];
"1000288" -> "1000278"  [label="AST: "];
"1000290" -> "1000278"  [label="AST: "];
"1000278" -> "1000530"  [label="DDG: false"];
"1000278" -> "1000530"  [label="DDG: *insn_idx + insn->off + 1"];
"1000278" -> "1000530"  [label="DDG: *insn_idx"];
"1000278" -> "1000530"  [label="DDG: env"];
"1000220" -> "1000278"  [label="DDG: env"];
"1000109" -> "1000278"  [label="DDG: env"];
"1000278" -> "1000498"  [label="DDG: env"];
"1000278" -> "1000504"  [label="DDG: env"];
"1000278" -> "1000519"  [label="DDG: env"];
"1000220" -> "1000218"  [label="AST: "];
"1000220" -> "1000225"  [label="CFG: "];
"1000221" -> "1000220"  [label="AST: "];
"1000222" -> "1000220"  [label="AST: "];
"1000225" -> "1000220"  [label="AST: "];
"1000218" -> "1000220"  [label="CFG: "];
"1000220" -> "1000530"  [label="DDG: SRC_OP"];
"1000220" -> "1000530"  [label="DDG: env"];
"1000220" -> "1000530"  [label="DDG: insn->dst_reg"];
"1000220" -> "1000218"  [label="DDG: env"];
"1000220" -> "1000218"  [label="DDG: insn->dst_reg"];
"1000220" -> "1000218"  [label="DDG: SRC_OP"];
"1000188" -> "1000220"  [label="DDG: env"];
"1000109" -> "1000220"  [label="DDG: env"];
"1000177" -> "1000220"  [label="DDG: SRC_OP"];
"1000220" -> "1000467"  [label="DDG: insn->dst_reg"];
"1000220" -> "1000498"  [label="DDG: insn->dst_reg"];
"1000220" -> "1000504"  [label="DDG: insn->dst_reg"];
"1000188" -> "1000187"  [label="AST: "];
"1000188" -> "1000190"  [label="CFG: "];
"1000189" -> "1000188"  [label="AST: "];
"1000190" -> "1000188"  [label="AST: "];
"1000195" -> "1000188"  [label="CFG: "];
"1000219" -> "1000188"  [label="CFG: "];
"1000188" -> "1000530"  [label="DDG: is_pointer_value(env, insn->src_reg)"];
"1000188" -> "1000530"  [label="DDG: insn->src_reg"];
"1000177" -> "1000188"  [label="DDG: env"];
"1000177" -> "1000188"  [label="DDG: insn->src_reg"];
"1000109" -> "1000188"  [label="DDG: env"];
"1000188" -> "1000194"  [label="DDG: env"];
"1000188" -> "1000194"  [label="DDG: insn->src_reg"];
"1000177" -> "1000175"  [label="AST: "];
"1000177" -> "1000182"  [label="CFG: "];
"1000178" -> "1000177"  [label="AST: "];
"1000179" -> "1000177"  [label="AST: "];
"1000182" -> "1000177"  [label="AST: "];
"1000175" -> "1000177"  [label="CFG: "];
"1000177" -> "1000530"  [label="DDG: SRC_OP"];
"1000177" -> "1000530"  [label="DDG: env"];
"1000177" -> "1000530"  [label="DDG: insn->src_reg"];
"1000177" -> "1000175"  [label="DDG: env"];
"1000177" -> "1000175"  [label="DDG: insn->src_reg"];
"1000177" -> "1000175"  [label="DDG: SRC_OP"];
"1000109" -> "1000177"  [label="DDG: env"];
"1000109" -> "1000108"  [label="AST: "];
"1000109" -> "1000530"  [label="DDG: env"];
"1000109" -> "1000147"  [label="DDG: env"];
"1000109" -> "1000169"  [label="DDG: env"];
"1000109" -> "1000194"  [label="DDG: env"];
"1000109" -> "1000212"  [label="DDG: env"];
"1000109" -> "1000498"  [label="DDG: env"];
"1000109" -> "1000504"  [label="DDG: env"];
"1000109" -> "1000519"  [label="DDG: env"];
"1000292" -> "1000291"  [label="AST: "];
"1000292" -> "1000293"  [label="CFG: "];
"1000293" -> "1000292"  [label="AST: "];
"1000296" -> "1000292"  [label="CFG: "];
"1000298" -> "1000292"  [label="CFG: "];
"1000292" -> "1000530"  [label="DDG: !other_branch"];
"1000292" -> "1000530"  [label="DDG: other_branch"];
"1000292" -> "1000475"  [label="DDG: other_branch"];
"1000292" -> "1000487"  [label="DDG: other_branch"];
"1000475" -> "1000466"  [label="AST: "];
"1000475" -> "1000480"  [label="CFG: "];
"1000476" -> "1000475"  [label="AST: "];
"1000477" -> "1000475"  [label="AST: "];
"1000480" -> "1000475"  [label="AST: "];
"1000516" -> "1000475"  [label="CFG: "];
"1000475" -> "1000530"  [label="DDG: other_branch"];
"1000475" -> "1000530"  [label="DDG: insn->dst_reg"];
"1000475" -> "1000530"  [label="DDG: mark_ptr_or_null_regs(other_branch, insn->dst_reg,\n\t\t\t\t      opcode == BPF_JEQ)"];
"1000475" -> "1000530"  [label="DDG: opcode == BPF_JEQ"];
"1000467" -> "1000475"  [label="DDG: insn->dst_reg"];
"1000480" -> "1000475"  [label="DDG: opcode"];
"1000480" -> "1000475"  [label="DDG: BPF_JEQ"];
"1000487" -> "1000486"  [label="AST: "];
"1000487" -> "1000497"  [label="CFG: "];
"1000488" -> "1000487"  [label="AST: "];
"1000489" -> "1000487"  [label="AST: "];
"1000490" -> "1000487"  [label="AST: "];
"1000496" -> "1000487"  [label="AST: "];
"1000497" -> "1000487"  [label="AST: "];
"1000486" -> "1000487"  [label="CFG: "];
"1000487" -> "1000530"  [label="DDG: dst_reg"];
"1000487" -> "1000530"  [label="DDG: this_branch"];
"1000487" -> "1000530"  [label="DDG: insn"];
"1000487" -> "1000530"  [label="DDG: other_branch"];
"1000487" -> "1000530"  [label="DDG: &regs[insn->src_reg]"];
"1000487" -> "1000486"  [label="DDG: this_branch"];
"1000487" -> "1000486"  [label="DDG: dst_reg"];
"1000487" -> "1000486"  [label="DDG: insn"];
"1000487" -> "1000486"  [label="DDG: other_branch"];
"1000487" -> "1000486"  [label="DDG: &regs[insn->src_reg]"];
"1000110" -> "1000487"  [label="DDG: insn"];
"1000342" -> "1000487"  [label="DDG: dst_reg"];
"1000230" -> "1000487"  [label="DDG: dst_reg"];
"1000428" -> "1000487"  [label="DDG: dst_reg"];
"1000249" -> "1000487"  [label="DDG: dst_reg"];
"1000394" -> "1000487"  [label="DDG: &regs[insn->src_reg]"];
"1000366" -> "1000487"  [label="DDG: &regs[insn->src_reg]"];
"1000114" -> "1000487"  [label="DDG: this_branch"];
"1000486" -> "1000485"  [label="AST: "];
"1000499" -> "1000486"  [label="CFG: "];
"1000485" -> "1000486"  [label="CFG: "];
"1000486" -> "1000530"  [label="DDG: try_match_pkt_pointers(insn, dst_reg, &regs[insn->src_reg],\n\t\t\t\t\t   this_branch, other_branch)"];
"1000486" -> "1000485"  [label="DDG: try_match_pkt_pointers(insn, dst_reg, &regs[insn->src_reg],\n\t\t\t\t\t   this_branch, other_branch)"];
"1000485" -> "1000484"  [label="AST: "];
"1000485" -> "1000498"  [label="CFG: "];
"1000498" -> "1000485"  [label="AST: "];
"1000505" -> "1000485"  [label="CFG: "];
"1000516" -> "1000485"  [label="CFG: "];
"1000485" -> "1000530"  [label="DDG: !try_match_pkt_pointers(insn, dst_reg, &regs[insn->src_reg],\n\t\t\t\t\t   this_branch, other_branch)"];
"1000485" -> "1000530"  [label="DDG: is_pointer_value(env, insn->dst_reg)"];
"1000485" -> "1000530"  [label="DDG: !try_match_pkt_pointers(insn, dst_reg, &regs[insn->src_reg],\n\t\t\t\t\t   this_branch, other_branch) &&\n\t\t   is_pointer_value(env, insn->dst_reg)"];
"1000498" -> "1000485"  [label="DDG: env"];
"1000498" -> "1000485"  [label="DDG: insn->dst_reg"];
}
