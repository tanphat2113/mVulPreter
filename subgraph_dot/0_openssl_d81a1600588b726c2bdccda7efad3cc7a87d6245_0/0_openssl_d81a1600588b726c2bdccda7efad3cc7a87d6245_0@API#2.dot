digraph "0_openssl_d81a1600588b726c2bdccda7efad3cc7a87d6245_0@API" {
"1000535" [label="(Call,num_encrypted_key_bytes = 8)"];
"1000551" [label="(Call,s->s2->tmp.clear + num_encrypted_key_bytes != key_length)"];
"1000695" [label="(Call,(int)key_length)"];
"1000689" [label="(Call,s->session->master_key_length = (int)key_length)"];
"1000698" [label="(Call,memcpy(s->session->master_key, p, key_length))"];
"1000706" [label="(Call,OPENSSL_cleanse(p, key_length))"];
"1000552" [label="(Call,s->s2->tmp.clear + num_encrypted_key_bytes)"];
"1000573" [label="(Call,s->s2->tmp.enc < num_encrypted_key_bytes)"];
"1000596" [label="(Call,(int)num_encrypted_key_bytes)"];
"1000594" [label="(Call,RAND_pseudo_bytes(rand_premaster_secret,\n                          (int)num_encrypted_key_bytes))"];
"1000593" [label="(Call,RAND_pseudo_bytes(rand_premaster_secret,\n                          (int)num_encrypted_key_bytes) <= 0)"];
"1000673" [label="(Call,constant_time_select_8(decrypt_good, p[s->s2->tmp.clear + j],\n                                       rand_premaster_secret[j]))"];
"1000661" [label="(Call,p[s->s2->tmp.clear + j] =\n                constant_time_select_8(decrypt_good, p[s->s2->tmp.clear + j],\n                                       rand_premaster_secret[j]))"];
"1000648" [label="(Call,(int)num_encrypted_key_bytes)"];
"1000646" [label="(Call,constant_time_eq_int_8(i, (int)num_encrypted_key_bytes))"];
"1000644" [label="(Call,decrypt_good = constant_time_eq_int_8(i, (int)num_encrypted_key_bytes))"];
"1000655" [label="(Call,j < num_encrypted_key_bytes)"];
"1000658" [label="(Call,j++)"];
"1000664" [label="(Call,s->s2->tmp.clear + j)"];
"1000677" [label="(Call,s->s2->tmp.clear + j)"];
"1000604" [label="(Call,ssl_rsa_private_decrypt(s->cert, s->s2->tmp.enc,\n                                &(p[s->s2->tmp.clear]),\n                                &(p[s->s2->tmp.clear]),\n                                (s->s2->ssl2_rollback) ? RSA_SSLV23_PADDING :\n                                RSA_PKCS1_PADDING))"];
"1000602" [label="(Call,i = ssl_rsa_private_decrypt(s->cert, s->s2->tmp.enc,\n                                &(p[s->s2->tmp.clear]),\n                                &(p[s->s2->tmp.clear]),\n                                (s->s2->ssl2_rollback) ? RSA_SSLV23_PADDING :\n                                RSA_PKCS1_PADDING))"];
"1000584" [label="(Identifier,s)"];
"1000704" [label="(Identifier,p)"];
"1000660" [label="(Block,)"];
"1000705" [label="(Identifier,key_length)"];
"1000581" [label="(Identifier,num_encrypted_key_bytes)"];
"1000646" [label="(Call,constant_time_eq_int_8(i, (int)num_encrypted_key_bytes))"];
"1000608" [label="(Call,s->s2->tmp.enc)"];
"1000615" [label="(Call,&(p[s->s2->tmp.clear]))"];
"1000333" [label="(Call,(unsigned long)s->s2->tmp.clear)"];
"1000556" [label="(Identifier,s)"];
"1000678" [label="(Call,s->s2->tmp.clear)"];
"1000645" [label="(Identifier,decrypt_good)"];
"1000659" [label="(Identifier,j)"];
"1000677" [label="(Call,s->s2->tmp.clear + j)"];
"1000551" [label="(Call,s->s2->tmp.clear + num_encrypted_key_bytes != key_length)"];
"1000697" [label="(Identifier,key_length)"];
"1000674" [label="(Identifier,decrypt_good)"];
"1000656" [label="(Identifier,j)"];
"1000343" [label="(Call,(unsigned long)s->s2->tmp.enc)"];
"1000652" [label="(Call,j = 0)"];
"1000664" [label="(Call,s->s2->tmp.clear + j)"];
"1000657" [label="(Identifier,num_encrypted_key_bytes)"];
"1000643" [label="(Call,ERR_clear_error())"];
"1000635" [label="(Call,(s->s2->ssl2_rollback) ? RSA_SSLV23_PADDING :\n                                RSA_PKCS1_PADDING)"];
"1000601" [label="(Literal,0)"];
"1000604" [label="(Call,ssl_rsa_private_decrypt(s->cert, s->s2->tmp.enc,\n                                &(p[s->s2->tmp.clear]),\n                                &(p[s->s2->tmp.clear]),\n                                (s->s2->ssl2_rollback) ? RSA_SSLV23_PADDING :\n                                RSA_PKCS1_PADDING))"];
"1000663" [label="(Identifier,p)"];
"1000675" [label="(Call,p[s->s2->tmp.clear + j])"];
"1000690" [label="(Call,s->session->master_key_length)"];
"1000661" [label="(Call,p[s->s2->tmp.clear + j] =\n                constant_time_select_8(decrypt_good, p[s->s2->tmp.clear + j],\n                                       rand_premaster_secret[j]))"];
"1000658" [label="(Call,j++)"];
"1000699" [label="(Call,s->session->master_key)"];
"1000662" [label="(Call,p[s->s2->tmp.clear + j])"];
"1000689" [label="(Call,s->session->master_key_length = (int)key_length)"];
"1000536" [label="(Identifier,num_encrypted_key_bytes)"];
"1000547" [label="(Call,num_encrypted_key_bytes = key_length)"];
"1000109" [label="(Block,)"];
"1000673" [label="(Call,constant_time_select_8(decrypt_good, p[s->s2->tmp.clear + j],\n                                       rand_premaster_secret[j]))"];
"1000665" [label="(Call,s->s2->tmp.clear)"];
"1000686" [label="(Call,rand_premaster_secret[j])"];
"1000577" [label="(Identifier,s)"];
"1000572" [label="(ControlStructure,if (s->s2->tmp.enc < num_encrypted_key_bytes))"];
"1000594" [label="(Call,RAND_pseudo_bytes(rand_premaster_secret,\n                          (int)num_encrypted_key_bytes))"];
"1000698" [label="(Call,memcpy(s->session->master_key, p, key_length))"];
"1000552" [label="(Call,s->s2->tmp.clear + num_encrypted_key_bytes)"];
"1000598" [label="(Identifier,num_encrypted_key_bytes)"];
"1000707" [label="(Identifier,p)"];
"1000648" [label="(Call,(int)num_encrypted_key_bytes)"];
"1000599" [label="(Literal,0)"];
"1000701" [label="(Identifier,s)"];
"1000537" [label="(Literal,8)"];
"1000692" [label="(Identifier,s)"];
"1000419" [label="(Call,p += 10)"];
"1000550" [label="(ControlStructure,if (s->s2->tmp.clear + num_encrypted_key_bytes != key_length))"];
"1000605" [label="(Call,s->cert)"];
"1000710" [label="(Literal,1)"];
"1000595" [label="(Identifier,rand_premaster_secret)"];
"1000560" [label="(Identifier,num_encrypted_key_bytes)"];
"1000592" [label="(ControlStructure,if (RAND_pseudo_bytes(rand_premaster_secret,\n                          (int)num_encrypted_key_bytes) <= 0))"];
"1000535" [label="(Call,num_encrypted_key_bytes = 8)"];
"1000672" [label="(Identifier,j)"];
"1000650" [label="(Identifier,num_encrypted_key_bytes)"];
"1000561" [label="(Identifier,key_length)"];
"1000708" [label="(Identifier,key_length)"];
"1000644" [label="(Call,decrypt_good = constant_time_eq_int_8(i, (int)num_encrypted_key_bytes))"];
"1000651" [label="(ControlStructure,for (j = 0; j < num_encrypted_key_bytes; j++))"];
"1000553" [label="(Call,s->s2->tmp.clear)"];
"1000711" [label="(MethodReturn,static int)"];
"1000573" [label="(Call,s->s2->tmp.enc < num_encrypted_key_bytes)"];
"1000596" [label="(Call,(int)num_encrypted_key_bytes)"];
"1000603" [label="(Identifier,i)"];
"1000685" [label="(Identifier,j)"];
"1000531" [label="(Block,)"];
"1000695" [label="(Call,(int)key_length)"];
"1000706" [label="(Call,OPENSSL_cleanse(p, key_length))"];
"1000653" [label="(Identifier,j)"];
"1000602" [label="(Call,i = ssl_rsa_private_decrypt(s->cert, s->s2->tmp.enc,\n                                &(p[s->s2->tmp.clear]),\n                                &(p[s->s2->tmp.clear]),\n                                (s->s2->ssl2_rollback) ? RSA_SSLV23_PADDING :\n                                RSA_PKCS1_PADDING))"];
"1000593" [label="(Call,RAND_pseudo_bytes(rand_premaster_secret,\n                          (int)num_encrypted_key_bytes) <= 0)"];
"1000564" [label="(Identifier,s)"];
"1000574" [label="(Call,s->s2->tmp.enc)"];
"1000655" [label="(Call,j < num_encrypted_key_bytes)"];
"1000542" [label="(Call,num_encrypted_key_bytes = 5)"];
"1000647" [label="(Identifier,i)"];
"1000625" [label="(Call,&(p[s->s2->tmp.clear]))"];
"1000508" [label="(Call,key_length > SSL_MAX_MASTER_KEY_LENGTH)"];
"1000535" -> "1000531"  [label="AST: "];
"1000535" -> "1000537"  [label="CFG: "];
"1000536" -> "1000535"  [label="AST: "];
"1000537" -> "1000535"  [label="AST: "];
"1000556" -> "1000535"  [label="CFG: "];
"1000535" -> "1000551"  [label="DDG: num_encrypted_key_bytes"];
"1000535" -> "1000552"  [label="DDG: num_encrypted_key_bytes"];
"1000535" -> "1000573"  [label="DDG: num_encrypted_key_bytes"];
"1000551" -> "1000550"  [label="AST: "];
"1000551" -> "1000561"  [label="CFG: "];
"1000552" -> "1000551"  [label="AST: "];
"1000561" -> "1000551"  [label="AST: "];
"1000564" -> "1000551"  [label="CFG: "];
"1000577" -> "1000551"  [label="CFG: "];
"1000551" -> "1000711"  [label="DDG: s->s2->tmp.clear + num_encrypted_key_bytes != key_length"];
"1000551" -> "1000711"  [label="DDG: s->s2->tmp.clear + num_encrypted_key_bytes"];
"1000551" -> "1000711"  [label="DDG: key_length"];
"1000333" -> "1000551"  [label="DDG: s->s2->tmp.clear"];
"1000547" -> "1000551"  [label="DDG: num_encrypted_key_bytes"];
"1000542" -> "1000551"  [label="DDG: num_encrypted_key_bytes"];
"1000508" -> "1000551"  [label="DDG: key_length"];
"1000551" -> "1000695"  [label="DDG: key_length"];
"1000695" -> "1000689"  [label="AST: "];
"1000695" -> "1000697"  [label="CFG: "];
"1000696" -> "1000695"  [label="AST: "];
"1000697" -> "1000695"  [label="AST: "];
"1000689" -> "1000695"  [label="CFG: "];
"1000695" -> "1000689"  [label="DDG: key_length"];
"1000695" -> "1000698"  [label="DDG: key_length"];
"1000689" -> "1000109"  [label="AST: "];
"1000690" -> "1000689"  [label="AST: "];
"1000701" -> "1000689"  [label="CFG: "];
"1000689" -> "1000711"  [label="DDG: (int)key_length"];
"1000689" -> "1000711"  [label="DDG: s->session->master_key_length"];
"1000698" -> "1000109"  [label="AST: "];
"1000698" -> "1000705"  [label="CFG: "];
"1000699" -> "1000698"  [label="AST: "];
"1000704" -> "1000698"  [label="AST: "];
"1000705" -> "1000698"  [label="AST: "];
"1000707" -> "1000698"  [label="CFG: "];
"1000698" -> "1000711"  [label="DDG: s->session->master_key"];
"1000698" -> "1000711"  [label="DDG: memcpy(s->session->master_key, p, key_length)"];
"1000661" -> "1000698"  [label="DDG: p[s->s2->tmp.clear + j]"];
"1000419" -> "1000698"  [label="DDG: p"];
"1000698" -> "1000706"  [label="DDG: p"];
"1000698" -> "1000706"  [label="DDG: key_length"];
"1000706" -> "1000109"  [label="AST: "];
"1000706" -> "1000708"  [label="CFG: "];
"1000707" -> "1000706"  [label="AST: "];
"1000708" -> "1000706"  [label="AST: "];
"1000710" -> "1000706"  [label="CFG: "];
"1000706" -> "1000711"  [label="DDG: key_length"];
"1000706" -> "1000711"  [label="DDG: OPENSSL_cleanse(p, key_length)"];
"1000706" -> "1000711"  [label="DDG: p"];
"1000661" -> "1000706"  [label="DDG: p[s->s2->tmp.clear + j]"];
"1000552" -> "1000560"  [label="CFG: "];
"1000553" -> "1000552"  [label="AST: "];
"1000560" -> "1000552"  [label="AST: "];
"1000561" -> "1000552"  [label="CFG: "];
"1000552" -> "1000711"  [label="DDG: s->s2->tmp.clear"];
"1000552" -> "1000711"  [label="DDG: num_encrypted_key_bytes"];
"1000333" -> "1000552"  [label="DDG: s->s2->tmp.clear"];
"1000547" -> "1000552"  [label="DDG: num_encrypted_key_bytes"];
"1000542" -> "1000552"  [label="DDG: num_encrypted_key_bytes"];
"1000573" -> "1000572"  [label="AST: "];
"1000573" -> "1000581"  [label="CFG: "];
"1000574" -> "1000573"  [label="AST: "];
"1000581" -> "1000573"  [label="AST: "];
"1000584" -> "1000573"  [label="CFG: "];
"1000595" -> "1000573"  [label="CFG: "];
"1000573" -> "1000711"  [label="DDG: s->s2->tmp.enc"];
"1000573" -> "1000711"  [label="DDG: num_encrypted_key_bytes"];
"1000573" -> "1000711"  [label="DDG: s->s2->tmp.enc < num_encrypted_key_bytes"];
"1000343" -> "1000573"  [label="DDG: s->s2->tmp.enc"];
"1000547" -> "1000573"  [label="DDG: num_encrypted_key_bytes"];
"1000542" -> "1000573"  [label="DDG: num_encrypted_key_bytes"];
"1000573" -> "1000596"  [label="DDG: num_encrypted_key_bytes"];
"1000573" -> "1000604"  [label="DDG: s->s2->tmp.enc"];
"1000596" -> "1000594"  [label="AST: "];
"1000596" -> "1000598"  [label="CFG: "];
"1000597" -> "1000596"  [label="AST: "];
"1000598" -> "1000596"  [label="AST: "];
"1000594" -> "1000596"  [label="CFG: "];
"1000596" -> "1000711"  [label="DDG: num_encrypted_key_bytes"];
"1000596" -> "1000594"  [label="DDG: num_encrypted_key_bytes"];
"1000596" -> "1000648"  [label="DDG: num_encrypted_key_bytes"];
"1000594" -> "1000593"  [label="AST: "];
"1000595" -> "1000594"  [label="AST: "];
"1000599" -> "1000594"  [label="CFG: "];
"1000594" -> "1000711"  [label="DDG: rand_premaster_secret"];
"1000594" -> "1000711"  [label="DDG: (int)num_encrypted_key_bytes"];
"1000594" -> "1000593"  [label="DDG: rand_premaster_secret"];
"1000594" -> "1000593"  [label="DDG: (int)num_encrypted_key_bytes"];
"1000594" -> "1000673"  [label="DDG: rand_premaster_secret"];
"1000593" -> "1000592"  [label="AST: "];
"1000593" -> "1000599"  [label="CFG: "];
"1000599" -> "1000593"  [label="AST: "];
"1000601" -> "1000593"  [label="CFG: "];
"1000603" -> "1000593"  [label="CFG: "];
"1000593" -> "1000711"  [label="DDG: RAND_pseudo_bytes(rand_premaster_secret,\n                          (int)num_encrypted_key_bytes)"];
"1000593" -> "1000711"  [label="DDG: RAND_pseudo_bytes(rand_premaster_secret,\n                          (int)num_encrypted_key_bytes) <= 0"];
"1000673" -> "1000661"  [label="AST: "];
"1000673" -> "1000686"  [label="CFG: "];
"1000674" -> "1000673"  [label="AST: "];
"1000675" -> "1000673"  [label="AST: "];
"1000686" -> "1000673"  [label="AST: "];
"1000661" -> "1000673"  [label="CFG: "];
"1000673" -> "1000711"  [label="DDG: decrypt_good"];
"1000673" -> "1000711"  [label="DDG: rand_premaster_secret[j]"];
"1000673" -> "1000661"  [label="DDG: decrypt_good"];
"1000673" -> "1000661"  [label="DDG: p[s->s2->tmp.clear + j]"];
"1000673" -> "1000661"  [label="DDG: rand_premaster_secret[j]"];
"1000644" -> "1000673"  [label="DDG: decrypt_good"];
"1000661" -> "1000673"  [label="DDG: p[s->s2->tmp.clear + j]"];
"1000419" -> "1000673"  [label="DDG: p"];
"1000661" -> "1000660"  [label="AST: "];
"1000662" -> "1000661"  [label="AST: "];
"1000659" -> "1000661"  [label="CFG: "];
"1000661" -> "1000711"  [label="DDG: p[s->s2->tmp.clear + j]"];
"1000661" -> "1000711"  [label="DDG: constant_time_select_8(decrypt_good, p[s->s2->tmp.clear + j],\n                                       rand_premaster_secret[j])"];
"1000648" -> "1000646"  [label="AST: "];
"1000648" -> "1000650"  [label="CFG: "];
"1000649" -> "1000648"  [label="AST: "];
"1000650" -> "1000648"  [label="AST: "];
"1000646" -> "1000648"  [label="CFG: "];
"1000648" -> "1000646"  [label="DDG: num_encrypted_key_bytes"];
"1000648" -> "1000655"  [label="DDG: num_encrypted_key_bytes"];
"1000646" -> "1000644"  [label="AST: "];
"1000647" -> "1000646"  [label="AST: "];
"1000644" -> "1000646"  [label="CFG: "];
"1000646" -> "1000711"  [label="DDG: i"];
"1000646" -> "1000711"  [label="DDG: (int)num_encrypted_key_bytes"];
"1000646" -> "1000644"  [label="DDG: i"];
"1000646" -> "1000644"  [label="DDG: (int)num_encrypted_key_bytes"];
"1000602" -> "1000646"  [label="DDG: i"];
"1000644" -> "1000109"  [label="AST: "];
"1000645" -> "1000644"  [label="AST: "];
"1000653" -> "1000644"  [label="CFG: "];
"1000644" -> "1000711"  [label="DDG: constant_time_eq_int_8(i, (int)num_encrypted_key_bytes)"];
"1000644" -> "1000711"  [label="DDG: decrypt_good"];
"1000655" -> "1000651"  [label="AST: "];
"1000655" -> "1000657"  [label="CFG: "];
"1000656" -> "1000655"  [label="AST: "];
"1000657" -> "1000655"  [label="AST: "];
"1000663" -> "1000655"  [label="CFG: "];
"1000692" -> "1000655"  [label="CFG: "];
"1000655" -> "1000711"  [label="DDG: j"];
"1000655" -> "1000711"  [label="DDG: j < num_encrypted_key_bytes"];
"1000655" -> "1000711"  [label="DDG: num_encrypted_key_bytes"];
"1000652" -> "1000655"  [label="DDG: j"];
"1000658" -> "1000655"  [label="DDG: j"];
"1000655" -> "1000658"  [label="DDG: j"];
"1000655" -> "1000664"  [label="DDG: j"];
"1000655" -> "1000677"  [label="DDG: j"];
"1000658" -> "1000651"  [label="AST: "];
"1000658" -> "1000659"  [label="CFG: "];
"1000659" -> "1000658"  [label="AST: "];
"1000656" -> "1000658"  [label="CFG: "];
"1000664" -> "1000662"  [label="AST: "];
"1000664" -> "1000672"  [label="CFG: "];
"1000665" -> "1000664"  [label="AST: "];
"1000672" -> "1000664"  [label="AST: "];
"1000662" -> "1000664"  [label="CFG: "];
"1000333" -> "1000664"  [label="DDG: s->s2->tmp.clear"];
"1000677" -> "1000675"  [label="AST: "];
"1000677" -> "1000685"  [label="CFG: "];
"1000678" -> "1000677"  [label="AST: "];
"1000685" -> "1000677"  [label="AST: "];
"1000675" -> "1000677"  [label="CFG: "];
"1000677" -> "1000711"  [label="DDG: s->s2->tmp.clear"];
"1000604" -> "1000602"  [label="AST: "];
"1000604" -> "1000635"  [label="CFG: "];
"1000605" -> "1000604"  [label="AST: "];
"1000608" -> "1000604"  [label="AST: "];
"1000615" -> "1000604"  [label="AST: "];
"1000625" -> "1000604"  [label="AST: "];
"1000635" -> "1000604"  [label="AST: "];
"1000602" -> "1000604"  [label="CFG: "];
"1000604" -> "1000711"  [label="DDG: s->s2->tmp.enc"];
"1000604" -> "1000711"  [label="DDG: &(p[s->s2->tmp.clear])"];
"1000604" -> "1000711"  [label="DDG: (s->s2->ssl2_rollback) ? RSA_SSLV23_PADDING :\n                                RSA_PKCS1_PADDING"];
"1000604" -> "1000711"  [label="DDG: s->cert"];
"1000604" -> "1000602"  [label="DDG: s->s2->tmp.enc"];
"1000604" -> "1000602"  [label="DDG: &(p[s->s2->tmp.clear])"];
"1000604" -> "1000602"  [label="DDG: (s->s2->ssl2_rollback) ? RSA_SSLV23_PADDING :\n                                RSA_PKCS1_PADDING"];
"1000604" -> "1000602"  [label="DDG: s->cert"];
"1000602" -> "1000109"  [label="AST: "];
"1000603" -> "1000602"  [label="AST: "];
"1000643" -> "1000602"  [label="CFG: "];
"1000602" -> "1000711"  [label="DDG: ssl_rsa_private_decrypt(s->cert, s->s2->tmp.enc,\n                                &(p[s->s2->tmp.clear]),\n                                &(p[s->s2->tmp.clear]),\n                                (s->s2->ssl2_rollback) ? RSA_SSLV23_PADDING :\n                                RSA_PKCS1_PADDING)"];
}
