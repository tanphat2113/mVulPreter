digraph "0_linux_df453700e8d81b1bdafdf684365ee2b9431fb702_0@pointer" {
"1000135" [label="(Call,siphash(&combined, sizeof(combined), &net->ipv4.ip_id_key))"];
"1000113" [label="(Call,siphash_key_is_zero(&net->ipv4.ip_id_key))"];
"1000120" [label="(Call,get_random_bytes(&net->ipv4.ip_id_key,\n\t\t\t\t sizeof(net->ipv4.ip_id_key)))"];
"1000133" [label="(Call,hash = siphash(&combined, sizeof(combined), &net->ipv4.ip_id_key))"];
"1000148" [label="(Call,ip_idents_reserve(hash, 1))"];
"1000146" [label="(Call,id = ip_idents_reserve(hash, 1))"];
"1000153" [label="(Call,!id)"];
"1000152" [label="(Call,unlikely(!id))"];
"1000160" [label="(Return,return id;)"];
"1000149" [label="(Identifier,hash)"];
"1000111" [label="(ControlStructure,if (unlikely(siphash_key_is_zero(&net->ipv4.ip_id_key))))"];
"1000113" [label="(Call,siphash_key_is_zero(&net->ipv4.ip_id_key))"];
"1000161" [label="(Identifier,id)"];
"1000114" [label="(Call,&net->ipv4.ip_id_key)"];
"1000160" [label="(Return,return id;)"];
"1000106" [label="(Block,)"];
"1000162" [label="(MethodReturn,static u32)"];
"1000120" [label="(Call,get_random_bytes(&net->ipv4.ip_id_key,\n\t\t\t\t sizeof(net->ipv4.ip_id_key)))"];
"1000156" [label="(Identifier,id)"];
"1000134" [label="(Identifier,hash)"];
"1000140" [label="(Call,&net->ipv4.ip_id_key)"];
"1000155" [label="(Call,id = 1 << 31)"];
"1000153" [label="(Call,!id)"];
"1000147" [label="(Identifier,id)"];
"1000150" [label="(Literal,1)"];
"1000135" [label="(Call,siphash(&combined, sizeof(combined), &net->ipv4.ip_id_key))"];
"1000136" [label="(Call,&combined)"];
"1000133" [label="(Call,hash = siphash(&combined, sizeof(combined), &net->ipv4.ip_id_key))"];
"1000152" [label="(Call,unlikely(!id))"];
"1000138" [label="(Call,sizeof(combined))"];
"1000127" [label="(Call,sizeof(net->ipv4.ip_id_key))"];
"1000112" [label="(Call,unlikely(siphash_key_is_zero(&net->ipv4.ip_id_key)))"];
"1000121" [label="(Call,&net->ipv4.ip_id_key)"];
"1000146" [label="(Call,id = ip_idents_reserve(hash, 1))"];
"1000148" [label="(Call,ip_idents_reserve(hash, 1))"];
"1000154" [label="(Identifier,id)"];
"1000151" [label="(ControlStructure,if (unlikely(!id)))"];
"1000135" -> "1000133"  [label="AST: "];
"1000135" -> "1000140"  [label="CFG: "];
"1000136" -> "1000135"  [label="AST: "];
"1000138" -> "1000135"  [label="AST: "];
"1000140" -> "1000135"  [label="AST: "];
"1000133" -> "1000135"  [label="CFG: "];
"1000135" -> "1000162"  [label="DDG: &combined"];
"1000135" -> "1000162"  [label="DDG: &net->ipv4.ip_id_key"];
"1000135" -> "1000133"  [label="DDG: &combined"];
"1000135" -> "1000133"  [label="DDG: &net->ipv4.ip_id_key"];
"1000113" -> "1000135"  [label="DDG: &net->ipv4.ip_id_key"];
"1000120" -> "1000135"  [label="DDG: &net->ipv4.ip_id_key"];
"1000113" -> "1000112"  [label="AST: "];
"1000113" -> "1000114"  [label="CFG: "];
"1000114" -> "1000113"  [label="AST: "];
"1000112" -> "1000113"  [label="CFG: "];
"1000113" -> "1000112"  [label="DDG: &net->ipv4.ip_id_key"];
"1000113" -> "1000120"  [label="DDG: &net->ipv4.ip_id_key"];
"1000120" -> "1000111"  [label="AST: "];
"1000120" -> "1000127"  [label="CFG: "];
"1000121" -> "1000120"  [label="AST: "];
"1000127" -> "1000120"  [label="AST: "];
"1000134" -> "1000120"  [label="CFG: "];
"1000120" -> "1000162"  [label="DDG: get_random_bytes(&net->ipv4.ip_id_key,\n\t\t\t\t sizeof(net->ipv4.ip_id_key))"];
"1000133" -> "1000106"  [label="AST: "];
"1000134" -> "1000133"  [label="AST: "];
"1000147" -> "1000133"  [label="CFG: "];
"1000133" -> "1000162"  [label="DDG: siphash(&combined, sizeof(combined), &net->ipv4.ip_id_key)"];
"1000133" -> "1000148"  [label="DDG: hash"];
"1000148" -> "1000146"  [label="AST: "];
"1000148" -> "1000150"  [label="CFG: "];
"1000149" -> "1000148"  [label="AST: "];
"1000150" -> "1000148"  [label="AST: "];
"1000146" -> "1000148"  [label="CFG: "];
"1000148" -> "1000162"  [label="DDG: hash"];
"1000148" -> "1000146"  [label="DDG: hash"];
"1000148" -> "1000146"  [label="DDG: 1"];
"1000146" -> "1000106"  [label="AST: "];
"1000147" -> "1000146"  [label="AST: "];
"1000154" -> "1000146"  [label="CFG: "];
"1000146" -> "1000162"  [label="DDG: ip_idents_reserve(hash, 1)"];
"1000146" -> "1000153"  [label="DDG: id"];
"1000153" -> "1000152"  [label="AST: "];
"1000153" -> "1000154"  [label="CFG: "];
"1000154" -> "1000153"  [label="AST: "];
"1000152" -> "1000153"  [label="CFG: "];
"1000153" -> "1000162"  [label="DDG: id"];
"1000153" -> "1000152"  [label="DDG: id"];
"1000153" -> "1000160"  [label="DDG: id"];
"1000152" -> "1000151"  [label="AST: "];
"1000156" -> "1000152"  [label="CFG: "];
"1000161" -> "1000152"  [label="CFG: "];
"1000152" -> "1000162"  [label="DDG: unlikely(!id)"];
"1000152" -> "1000162"  [label="DDG: !id"];
"1000160" -> "1000106"  [label="AST: "];
"1000160" -> "1000161"  [label="CFG: "];
"1000161" -> "1000160"  [label="AST: "];
"1000162" -> "1000160"  [label="CFG: "];
"1000160" -> "1000162"  [label="DDG: <RET>"];
"1000161" -> "1000160"  [label="DDG: id"];
"1000155" -> "1000160"  [label="DDG: id"];
}
