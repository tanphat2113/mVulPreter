digraph "0_abrt_3c1b60cfa62d39e5fff5a53a5bc53dae189e740e@API" {
"1000722" [label="(Call,copyfd_eof(STDIN_FILENO, abrt_core_fd, COPYFD_SPARSE))"];
"1000709" [label="(Call,abrt_core_fd = xopen3(path, O_WRONLY | O_CREAT | O_EXCL, 0600))"];
"1000711" [label="(Call,xopen3(path, O_WRONLY | O_CREAT | O_EXCL, 0600))"];
"1000706" [label="(Call,unlink(path))"];
"1000703" [label="(Call,error_msg_and_die(\"Error saving '%s': truncated long file path\", path))"];
"1000713" [label="(Call,O_WRONLY | O_CREAT | O_EXCL)"];
"1000715" [label="(Call,O_CREAT | O_EXCL)"];
"1000720" [label="(Call,core_size = copyfd_eof(STDIN_FILENO, abrt_core_fd, COPYFD_SPARSE))"];
"1000728" [label="(Call,core_size < 0)"];
"1000727" [label="(Call,core_size < 0 || fsync(abrt_core_fd) != 0)"];
"1000748" [label="(Call,(long long)core_size)"];
"1000741" [label="(Call,log_notice(\"Saved core dump of pid %lu (%s) to %s (%llu bytes)\", (long)pid, executable, path, (long long)core_size))"];
"1000732" [label="(Call,fsync(abrt_core_fd))"];
"1000731" [label="(Call,fsync(abrt_core_fd) != 0)"];
"1000678" [label="(Block,)"];
"1000727" [label="(Call,core_size < 0 || fsync(abrt_core_fd) != 0)"];
"1000737" [label="(Identifier,path)"];
"1000736" [label="(Call,unlink(path))"];
"1000741" [label="(Call,log_notice(\"Saved core dump of pid %lu (%s) to %s (%llu bytes)\", (long)pid, executable, path, (long long)core_size))"];
"1000738" [label="(Call,error_msg_and_die(\"Error saving '%s'\", path))"];
"1000726" [label="(ControlStructure,if (core_size < 0 || fsync(abrt_core_fd) != 0))"];
"1000712" [label="(Identifier,path)"];
"1000716" [label="(Identifier,O_CREAT)"];
"1000729" [label="(Identifier,core_size)"];
"1000730" [label="(Literal,0)"];
"1000665" [label="(Call,strrchr(executable, '/'))"];
"1000746" [label="(Identifier,executable)"];
"1000734" [label="(Literal,0)"];
"1000750" [label="(Identifier,core_size)"];
"1000752" [label="(Identifier,err)"];
"1000707" [label="(Identifier,path)"];
"1000748" [label="(Call,(long long)core_size)"];
"1000718" [label="(Literal,0600)"];
"1000722" [label="(Call,copyfd_eof(STDIN_FILENO, abrt_core_fd, COPYFD_SPARSE))"];
"1000743" [label="(Call,(long)pid)"];
"1000703" [label="(Call,error_msg_and_die(\"Error saving '%s': truncated long file path\", path))"];
"1000723" [label="(Identifier,STDIN_FILENO)"];
"1000704" [label="(Literal,\"Error saving '%s': truncated long file path\")"];
"1000731" [label="(Call,fsync(abrt_core_fd) != 0)"];
"1000742" [label="(Literal,\"Saved core dump of pid %lu (%s) to %s (%llu bytes)\")"];
"1000747" [label="(Identifier,path)"];
"1001447" [label="(MethodReturn,int)"];
"1000714" [label="(Identifier,O_WRONLY)"];
"1000692" [label="(ControlStructure,if (snprintf(path, sizeof(path), \"%s/%s-coredump\", g_settings_dump_location, last_slash) >= sizeof(path)))"];
"1000733" [label="(Identifier,abrt_core_fd)"];
"1000721" [label="(Identifier,core_size)"];
"1000710" [label="(Identifier,abrt_core_fd)"];
"1000724" [label="(Identifier,abrt_core_fd)"];
"1000709" [label="(Call,abrt_core_fd = xopen3(path, O_WRONLY | O_CREAT | O_EXCL, 0600))"];
"1000705" [label="(Identifier,path)"];
"1000725" [label="(Identifier,COPYFD_SPARSE)"];
"1000717" [label="(Identifier,O_EXCL)"];
"1000711" [label="(Call,xopen3(path, O_WRONLY | O_CREAT | O_EXCL, 0600))"];
"1000713" [label="(Call,O_WRONLY | O_CREAT | O_EXCL)"];
"1000720" [label="(Call,core_size = copyfd_eof(STDIN_FILENO, abrt_core_fd, COPYFD_SPARSE))"];
"1000706" [label="(Call,unlink(path))"];
"1000732" [label="(Call,fsync(abrt_core_fd))"];
"1000715" [label="(Call,O_CREAT | O_EXCL)"];
"1000728" [label="(Call,core_size < 0)"];
"1000722" -> "1000720"  [label="AST: "];
"1000722" -> "1000725"  [label="CFG: "];
"1000723" -> "1000722"  [label="AST: "];
"1000724" -> "1000722"  [label="AST: "];
"1000725" -> "1000722"  [label="AST: "];
"1000720" -> "1000722"  [label="CFG: "];
"1000722" -> "1001447"  [label="DDG: "];
"1000722" -> "1001447"  [label="DDG: "];
"1000722" -> "1001447"  [label="DDG: "];
"1000722" -> "1000720"  [label="DDG: "];
"1000722" -> "1000720"  [label="DDG: "];
"1000722" -> "1000720"  [label="DDG: "];
"1000709" -> "1000722"  [label="DDG: "];
"1000722" -> "1000732"  [label="DDG: "];
"1000709" -> "1000678"  [label="AST: "];
"1000709" -> "1000711"  [label="CFG: "];
"1000710" -> "1000709"  [label="AST: "];
"1000711" -> "1000709"  [label="AST: "];
"1000721" -> "1000709"  [label="CFG: "];
"1000709" -> "1001447"  [label="DDG: "];
"1000711" -> "1000709"  [label="DDG: "];
"1000711" -> "1000709"  [label="DDG: "];
"1000711" -> "1000709"  [label="DDG: "];
"1000711" -> "1000718"  [label="CFG: "];
"1000712" -> "1000711"  [label="AST: "];
"1000713" -> "1000711"  [label="AST: "];
"1000718" -> "1000711"  [label="AST: "];
"1000711" -> "1001447"  [label="DDG: "];
"1000706" -> "1000711"  [label="DDG: "];
"1000713" -> "1000711"  [label="DDG: "];
"1000713" -> "1000711"  [label="DDG: "];
"1000711" -> "1000736"  [label="DDG: "];
"1000711" -> "1000741"  [label="DDG: "];
"1000706" -> "1000678"  [label="AST: "];
"1000706" -> "1000707"  [label="CFG: "];
"1000707" -> "1000706"  [label="AST: "];
"1000710" -> "1000706"  [label="CFG: "];
"1000706" -> "1001447"  [label="DDG: "];
"1000703" -> "1000706"  [label="DDG: "];
"1000703" -> "1000692"  [label="AST: "];
"1000703" -> "1000705"  [label="CFG: "];
"1000704" -> "1000703"  [label="AST: "];
"1000705" -> "1000703"  [label="AST: "];
"1000707" -> "1000703"  [label="CFG: "];
"1000703" -> "1001447"  [label="DDG: "];
"1000713" -> "1000715"  [label="CFG: "];
"1000714" -> "1000713"  [label="AST: "];
"1000715" -> "1000713"  [label="AST: "];
"1000718" -> "1000713"  [label="CFG: "];
"1000713" -> "1001447"  [label="DDG: "];
"1000713" -> "1001447"  [label="DDG: "];
"1000715" -> "1000713"  [label="DDG: "];
"1000715" -> "1000713"  [label="DDG: "];
"1000715" -> "1000717"  [label="CFG: "];
"1000716" -> "1000715"  [label="AST: "];
"1000717" -> "1000715"  [label="AST: "];
"1000715" -> "1001447"  [label="DDG: "];
"1000715" -> "1001447"  [label="DDG: "];
"1000720" -> "1000678"  [label="AST: "];
"1000721" -> "1000720"  [label="AST: "];
"1000729" -> "1000720"  [label="CFG: "];
"1000720" -> "1001447"  [label="DDG: "];
"1000720" -> "1000728"  [label="DDG: "];
"1000728" -> "1000727"  [label="AST: "];
"1000728" -> "1000730"  [label="CFG: "];
"1000729" -> "1000728"  [label="AST: "];
"1000730" -> "1000728"  [label="AST: "];
"1000733" -> "1000728"  [label="CFG: "];
"1000727" -> "1000728"  [label="CFG: "];
"1000728" -> "1000727"  [label="DDG: "];
"1000728" -> "1000727"  [label="DDG: "];
"1000728" -> "1000748"  [label="DDG: "];
"1000727" -> "1000726"  [label="AST: "];
"1000727" -> "1000731"  [label="CFG: "];
"1000731" -> "1000727"  [label="AST: "];
"1000737" -> "1000727"  [label="CFG: "];
"1000742" -> "1000727"  [label="CFG: "];
"1000727" -> "1001447"  [label="DDG: "];
"1000727" -> "1001447"  [label="DDG: "];
"1000727" -> "1001447"  [label="DDG: "];
"1000731" -> "1000727"  [label="DDG: "];
"1000731" -> "1000727"  [label="DDG: "];
"1000748" -> "1000741"  [label="AST: "];
"1000748" -> "1000750"  [label="CFG: "];
"1000749" -> "1000748"  [label="AST: "];
"1000750" -> "1000748"  [label="AST: "];
"1000741" -> "1000748"  [label="CFG: "];
"1000748" -> "1001447"  [label="DDG: "];
"1000748" -> "1000741"  [label="DDG: "];
"1000741" -> "1000678"  [label="AST: "];
"1000742" -> "1000741"  [label="AST: "];
"1000743" -> "1000741"  [label="AST: "];
"1000746" -> "1000741"  [label="AST: "];
"1000747" -> "1000741"  [label="AST: "];
"1000752" -> "1000741"  [label="CFG: "];
"1000741" -> "1001447"  [label="DDG: "];
"1000741" -> "1001447"  [label="DDG: "];
"1000741" -> "1001447"  [label="DDG: "];
"1000741" -> "1001447"  [label="DDG: "];
"1000741" -> "1001447"  [label="DDG: "];
"1000743" -> "1000741"  [label="DDG: "];
"1000665" -> "1000741"  [label="DDG: "];
"1000738" -> "1000741"  [label="DDG: "];
"1000732" -> "1000731"  [label="AST: "];
"1000732" -> "1000733"  [label="CFG: "];
"1000733" -> "1000732"  [label="AST: "];
"1000734" -> "1000732"  [label="CFG: "];
"1000732" -> "1001447"  [label="DDG: "];
"1000732" -> "1000731"  [label="DDG: "];
"1000731" -> "1000734"  [label="CFG: "];
"1000734" -> "1000731"  [label="AST: "];
"1000731" -> "1001447"  [label="DDG: "];
}
