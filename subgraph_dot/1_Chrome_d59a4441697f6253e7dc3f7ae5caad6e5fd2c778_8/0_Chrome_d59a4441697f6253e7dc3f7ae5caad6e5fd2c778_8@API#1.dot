digraph "0_Chrome_d59a4441697f6253e7dc3f7ae5caad6e5fd2c778_8@API" {
"1000112" [label="(Call,dstPixels = copySkImageData(input, info))"];
"1000114" [label="(Call,copySkImageData(input, info))"];
"1000101" [label="(MethodParameterIn,SkImage* input)"];
"1000104" [label="(Call,info = SkImageInfo::Make(input->width(), input->height(),\n                                       kN32_SkColorType, kPremul_SkAlphaType))"];
"1000106" [label="(Call,SkImageInfo::Make(input->width(), input->height(),\n                                       kN32_SkColorType, kPremul_SkAlphaType))"];
"1000118" [label="(Call,!dstPixels)"];
"1000125" [label="(Call,std::move(dstPixels))"];
"1000123" [label="(Call,newSkImageFromRaster(\n       info, std::move(dstPixels),\n      static_cast<size_t>(input->width()) * info.bytesPerPixel()))"];
"1000122" [label="(Return,return newSkImageFromRaster(\n       info, std::move(dstPixels),\n      static_cast<size_t>(input->width()) * info.bytesPerPixel());)"];
"1000114" [label="(Call,copySkImageData(input, info))"];
"1000123" [label="(Call,newSkImageFromRaster(\n       info, std::move(dstPixels),\n      static_cast<size_t>(input->width()) * info.bytesPerPixel()))"];
"1000113" [label="(Identifier,dstPixels)"];
"1000125" [label="(Call,std::move(dstPixels))"];
"1000117" [label="(ControlStructure,if (!dstPixels))"];
"1000104" [label="(Call,info = SkImageInfo::Make(input->width(), input->height(),\n                                       kN32_SkColorType, kPremul_SkAlphaType))"];
"1000107" [label="(Call,input->width())"];
"1000116" [label="(Identifier,info)"];
"1000132" [label="(MethodReturn,static sk_sp<SkImage>)"];
"1000101" [label="(MethodParameterIn,SkImage* input)"];
"1000127" [label="(Call,static_cast<size_t>(input->width()) * info.bytesPerPixel())"];
"1000115" [label="(Identifier,input)"];
"1000124" [label="(Identifier,info)"];
"1000112" [label="(Call,dstPixels = copySkImageData(input, info))"];
"1000110" [label="(Identifier,kPremul_SkAlphaType)"];
"1000118" [label="(Call,!dstPixels)"];
"1000108" [label="(Call,input->height())"];
"1000121" [label="(Identifier,nullptr)"];
"1000119" [label="(Identifier,dstPixels)"];
"1000122" [label="(Return,return newSkImageFromRaster(\n       info, std::move(dstPixels),\n      static_cast<size_t>(input->width()) * info.bytesPerPixel());)"];
"1000126" [label="(Identifier,dstPixels)"];
"1000105" [label="(Identifier,info)"];
"1000109" [label="(Identifier,kN32_SkColorType)"];
"1000106" [label="(Call,SkImageInfo::Make(input->width(), input->height(),\n                                       kN32_SkColorType, kPremul_SkAlphaType))"];
"1000102" [label="(Block,)"];
"1000112" -> "1000102"  [label="AST: "];
"1000112" -> "1000114"  [label="CFG: "];
"1000113" -> "1000112"  [label="AST: "];
"1000114" -> "1000112"  [label="AST: "];
"1000119" -> "1000112"  [label="CFG: "];
"1000112" -> "1000132"  [label="DDG: copySkImageData(input, info)"];
"1000114" -> "1000112"  [label="DDG: input"];
"1000114" -> "1000112"  [label="DDG: info"];
"1000112" -> "1000118"  [label="DDG: dstPixels"];
"1000114" -> "1000116"  [label="CFG: "];
"1000115" -> "1000114"  [label="AST: "];
"1000116" -> "1000114"  [label="AST: "];
"1000114" -> "1000132"  [label="DDG: input"];
"1000114" -> "1000132"  [label="DDG: info"];
"1000101" -> "1000114"  [label="DDG: input"];
"1000104" -> "1000114"  [label="DDG: info"];
"1000114" -> "1000123"  [label="DDG: info"];
"1000101" -> "1000100"  [label="AST: "];
"1000101" -> "1000132"  [label="DDG: input"];
"1000104" -> "1000102"  [label="AST: "];
"1000104" -> "1000106"  [label="CFG: "];
"1000105" -> "1000104"  [label="AST: "];
"1000106" -> "1000104"  [label="AST: "];
"1000113" -> "1000104"  [label="CFG: "];
"1000104" -> "1000132"  [label="DDG: SkImageInfo::Make(input->width(), input->height(),\n                                       kN32_SkColorType, kPremul_SkAlphaType)"];
"1000106" -> "1000104"  [label="DDG: input->width()"];
"1000106" -> "1000104"  [label="DDG: input->height()"];
"1000106" -> "1000104"  [label="DDG: kN32_SkColorType"];
"1000106" -> "1000104"  [label="DDG: kPremul_SkAlphaType"];
"1000106" -> "1000110"  [label="CFG: "];
"1000107" -> "1000106"  [label="AST: "];
"1000108" -> "1000106"  [label="AST: "];
"1000109" -> "1000106"  [label="AST: "];
"1000110" -> "1000106"  [label="AST: "];
"1000106" -> "1000132"  [label="DDG: input->height()"];
"1000106" -> "1000132"  [label="DDG: input->width()"];
"1000106" -> "1000132"  [label="DDG: kPremul_SkAlphaType"];
"1000106" -> "1000132"  [label="DDG: kN32_SkColorType"];
"1000118" -> "1000117"  [label="AST: "];
"1000118" -> "1000119"  [label="CFG: "];
"1000119" -> "1000118"  [label="AST: "];
"1000121" -> "1000118"  [label="CFG: "];
"1000124" -> "1000118"  [label="CFG: "];
"1000118" -> "1000132"  [label="DDG: !dstPixels"];
"1000118" -> "1000132"  [label="DDG: dstPixels"];
"1000118" -> "1000125"  [label="DDG: dstPixels"];
"1000125" -> "1000123"  [label="AST: "];
"1000125" -> "1000126"  [label="CFG: "];
"1000126" -> "1000125"  [label="AST: "];
"1000129" -> "1000125"  [label="CFG: "];
"1000125" -> "1000132"  [label="DDG: dstPixels"];
"1000125" -> "1000123"  [label="DDG: dstPixels"];
"1000123" -> "1000122"  [label="AST: "];
"1000123" -> "1000127"  [label="CFG: "];
"1000124" -> "1000123"  [label="AST: "];
"1000127" -> "1000123"  [label="AST: "];
"1000122" -> "1000123"  [label="CFG: "];
"1000123" -> "1000132"  [label="DDG: std::move(dstPixels)"];
"1000123" -> "1000132"  [label="DDG: newSkImageFromRaster(\n       info, std::move(dstPixels),\n      static_cast<size_t>(input->width()) * info.bytesPerPixel())"];
"1000123" -> "1000132"  [label="DDG: static_cast<size_t>(input->width()) * info.bytesPerPixel()"];
"1000123" -> "1000132"  [label="DDG: info"];
"1000123" -> "1000122"  [label="DDG: newSkImageFromRaster(\n       info, std::move(dstPixels),\n      static_cast<size_t>(input->width()) * info.bytesPerPixel())"];
"1000127" -> "1000123"  [label="DDG: static_cast<size_t>(input->width())"];
"1000127" -> "1000123"  [label="DDG: info.bytesPerPixel()"];
"1000122" -> "1000102"  [label="AST: "];
"1000132" -> "1000122"  [label="CFG: "];
"1000122" -> "1000132"  [label="DDG: <RET>"];
}
