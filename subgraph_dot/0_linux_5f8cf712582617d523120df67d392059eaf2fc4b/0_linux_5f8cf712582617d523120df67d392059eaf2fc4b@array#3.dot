digraph "0_linux_5f8cf712582617d523120df67d392059eaf2fc4b@array" {
"1000344" [label="(Call,pid[i] != -1)"];
"1000302" [label="(Call,pid[i] == USB_ID_PRODUCT(id))"];
"1000296" [label="(Call,pid[i] == -1)"];
"1000344" [label="(Call,pid[i] != -1)"];
"1000348" [label="(Call,-1)"];
"1000300" [label="(Call,-1)"];
"1000306" [label="(Call,USB_ID_PRODUCT(id))"];
"1000293" [label="(Call,USB_ID_VENDOR(id))"];
"1000191" [label="(Call,snd_usb_apply_boot_quirk(dev, intf, quirk, id))"];
"1000163" [label="(Call,get_alias_id(dev, &id))"];
"1000115" [label="(Call,*dev = interface_to_usbdev(intf))"];
"1000117" [label="(Call,interface_to_usbdev(intf))"];
"1000111" [label="(MethodParameterIn,struct usb_interface *intf)"];
"1000169" [label="(Call,get_alias_quirk(dev, id))"];
"1000147" [label="(Call,id = USB_ID(le16_to_cpu(dev->descriptor.idVendor),\n\t\t    le16_to_cpu(dev->descriptor.idProduct)))"];
"1000149" [label="(Call,USB_ID(le16_to_cpu(dev->descriptor.idVendor),\n\t\t    le16_to_cpu(dev->descriptor.idProduct)))"];
"1000150" [label="(Call,le16_to_cpu(dev->descriptor.idVendor))"];
"1000156" [label="(Call,le16_to_cpu(dev->descriptor.idProduct))"];
"1000173" [label="(Call,quirk && quirk->ifnum >= 0 && ifnum != quirk->ifnum)"];
"1000167" [label="(Call,quirk = get_alias_quirk(dev, id))"];
"1000120" [label="(Call,*quirk =\n\t\t(const struct snd_usb_audio_quirk *)usb_id->driver_info)"];
"1000122" [label="(Call,(const struct snd_usb_audio_quirk *)usb_id->driver_info)"];
"1000175" [label="(Call,quirk->ifnum >= 0 && ifnum != quirk->ifnum)"];
"1000176" [label="(Call,quirk->ifnum >= 0)"];
"1000181" [label="(Call,ifnum != quirk->ifnum)"];
"1000141" [label="(Call,ifnum = get_iface_desc(alts)->bInterfaceNumber)"];
"1000295" [label="(Call,pid[i] == -1 || pid[i] == USB_ID_PRODUCT(id))"];
"1000281" [label="(Call,(vid[i] == -1 || vid[i] == USB_ID_VENDOR(id)) &&\n\t\t\t    (pid[i] == -1 || pid[i] == USB_ID_PRODUCT(id)))"];
"1000276" [label="(Call,!usb_chip[i] &&\n\t\t\t    (vid[i] == -1 || vid[i] == USB_ID_VENDOR(id)) &&\n\t\t\t    (pid[i] == -1 || pid[i] == USB_ID_PRODUCT(id)))"];
"1000337" [label="(Call,vid[i] != -1 || pid[i] != -1)"];
"1000281" [label="(Call,(vid[i] == -1 || vid[i] == USB_ID_VENDOR(id)) &&\n\t\t\t    (pid[i] == -1 || pid[i] == USB_ID_PRODUCT(id)))"];
"1000175" [label="(Call,quirk->ifnum >= 0 && ifnum != quirk->ifnum)"];
"1000354" [label="(Identifier,dev)"];
"1000296" [label="(Call,pid[i] == -1)"];
"1000195" [label="(Identifier,id)"];
"1000180" [label="(Literal,0)"];
"1000142" [label="(Identifier,ifnum)"];
"1000282" [label="(Call,vid[i] == -1 || vid[i] == USB_ID_VENDOR(id))"];
"1000300" [label="(Call,-1)"];
"1000177" [label="(Call,quirk->ifnum)"];
"1000150" [label="(Call,le16_to_cpu(dev->descriptor.idVendor))"];
"1000192" [label="(Identifier,dev)"];
"1000111" [label="(MethodParameterIn,struct usb_interface *intf)"];
"1000169" [label="(Call,get_alias_quirk(dev, id))"];
"1000297" [label="(Call,pid[i])"];
"1000276" [label="(Call,!usb_chip[i] &&\n\t\t\t    (vid[i] == -1 || vid[i] == USB_ID_VENDOR(id)) &&\n\t\t\t    (pid[i] == -1 || pid[i] == USB_ID_PRODUCT(id)))"];
"1000193" [label="(Identifier,intf)"];
"1000189" [label="(Call,err = snd_usb_apply_boot_quirk(dev, intf, quirk, id))"];
"1000345" [label="(Call,pid[i])"];
"1000277" [label="(Call,!usb_chip[i])"];
"1000181" [label="(Call,ifnum != quirk->ifnum)"];
"1000302" [label="(Call,pid[i] == USB_ID_PRODUCT(id))"];
"1000121" [label="(Identifier,quirk)"];
"1000182" [label="(Identifier,ifnum)"];
"1000194" [label="(Identifier,quirk)"];
"1000344" [label="(Call,pid[i] != -1)"];
"1000141" [label="(Call,ifnum = get_iface_desc(alts)->bInterfaceNumber)"];
"1000162" [label="(ControlStructure,if (get_alias_id(dev, &id)))"];
"1000183" [label="(Call,quirk->ifnum)"];
"1000156" [label="(Call,le16_to_cpu(dev->descriptor.idProduct))"];
"1000408" [label="(Call,quirk->ifnum != QUIRK_NO_INTERFACE)"];
"1000163" [label="(Call,get_alias_id(dev, &id))"];
"1000118" [label="(Identifier,intf)"];
"1000176" [label="(Call,quirk->ifnum >= 0)"];
"1000147" [label="(Call,id = USB_ID(le16_to_cpu(dev->descriptor.idVendor),\n\t\t    le16_to_cpu(dev->descriptor.idProduct)))"];
"1000275" [label="(ControlStructure,if (!usb_chip[i] &&\n\t\t\t    (vid[i] == -1 || vid[i] == USB_ID_VENDOR(id)) &&\n\t\t\t    (pid[i] == -1 || pid[i] == USB_ID_PRODUCT(id))))"];
"1000475" [label="(Call,usb_set_intfdata(intf, chip))"];
"1000274" [label="(Identifier,i)"];
"1000134" [label="(Identifier,alts)"];
"1000303" [label="(Call,pid[i])"];
"1000116" [label="(Identifier,dev)"];
"1000295" [label="(Call,pid[i] == -1 || pid[i] == USB_ID_PRODUCT(id))"];
"1000191" [label="(Call,snd_usb_apply_boot_quirk(dev, intf, quirk, id))"];
"1000171" [label="(Identifier,id)"];
"1000188" [label="(Identifier,ENXIO)"];
"1000143" [label="(Call,get_iface_desc(alts)->bInterfaceNumber)"];
"1000416" [label="(Call,snd_usb_create_quirk(chip, intf, &usb_audio_driver, quirk))"];
"1000337" [label="(Call,vid[i] != -1 || pid[i] != -1)"];
"1000336" [label="(ControlStructure,if (vid[i] != -1 || pid[i] != -1))"];
"1000117" [label="(Call,interface_to_usbdev(intf))"];
"1000173" [label="(Call,quirk && quirk->ifnum >= 0 && ifnum != quirk->ifnum)"];
"1000170" [label="(Identifier,dev)"];
"1000223" [label="(Call,usb_chip[i]->dev == dev)"];
"1000113" [label="(Block,)"];
"1000151" [label="(Call,dev->descriptor.idVendor)"];
"1000164" [label="(Identifier,dev)"];
"1000311" [label="(Identifier,enable)"];
"1000349" [label="(Literal,1)"];
"1000357" [label="(Call,USB_ID_VENDOR(id))"];
"1000165" [label="(Call,&id)"];
"1000511" [label="(MethodReturn,static int)"];
"1000149" [label="(Call,USB_ID(le16_to_cpu(dev->descriptor.idVendor),\n\t\t    le16_to_cpu(dev->descriptor.idProduct)))"];
"1000122" [label="(Call,(const struct snd_usb_audio_quirk *)usb_id->driver_info)"];
"1000304" [label="(Identifier,pid)"];
"1000329" [label="(Call,chip->pm_intf = intf)"];
"1000167" [label="(Call,quirk = get_alias_quirk(dev, id))"];
"1000307" [label="(Identifier,id)"];
"1000148" [label="(Identifier,id)"];
"1000289" [label="(Call,vid[i] == USB_ID_VENDOR(id))"];
"1000338" [label="(Call,vid[i] != -1)"];
"1000190" [label="(Identifier,err)"];
"1000124" [label="(Call,usb_id->driver_info)"];
"1000157" [label="(Call,dev->descriptor.idProduct)"];
"1000294" [label="(Identifier,id)"];
"1000348" [label="(Call,-1)"];
"1000316" [label="(Call,snd_usb_audio_create(intf, dev, i, quirk,\n\t\t\t\t\t\t\t\t   id, &chip))"];
"1000168" [label="(Identifier,quirk)"];
"1000115" [label="(Call,*dev = interface_to_usbdev(intf))"];
"1000301" [label="(Literal,1)"];
"1000174" [label="(Identifier,quirk)"];
"1000406" [label="(Call,quirk && quirk->ifnum != QUIRK_NO_INTERFACE)"];
"1000306" [label="(Call,USB_ID_PRODUCT(id))"];
"1000120" [label="(Call,*quirk =\n\t\t(const struct snd_usb_audio_quirk *)usb_id->driver_info)"];
"1000159" [label="(Identifier,dev)"];
"1000434" [label="(Call,snd_usb_create_streams(chip, ifnum))"];
"1000172" [label="(ControlStructure,if (quirk && quirk->ifnum >= 0 && ifnum != quirk->ifnum))"];
"1000293" [label="(Call,USB_ID_VENDOR(id))"];
"1000344" -> "1000337"  [label="AST: "];
"1000344" -> "1000348"  [label="CFG: "];
"1000345" -> "1000344"  [label="AST: "];
"1000348" -> "1000344"  [label="AST: "];
"1000337" -> "1000344"  [label="CFG: "];
"1000344" -> "1000511"  [label="DDG: -1"];
"1000344" -> "1000511"  [label="DDG: pid[i]"];
"1000344" -> "1000296"  [label="DDG: pid[i]"];
"1000344" -> "1000337"  [label="DDG: pid[i]"];
"1000344" -> "1000337"  [label="DDG: -1"];
"1000302" -> "1000344"  [label="DDG: pid[i]"];
"1000296" -> "1000344"  [label="DDG: pid[i]"];
"1000348" -> "1000344"  [label="DDG: 1"];
"1000302" -> "1000295"  [label="AST: "];
"1000302" -> "1000306"  [label="CFG: "];
"1000303" -> "1000302"  [label="AST: "];
"1000306" -> "1000302"  [label="AST: "];
"1000295" -> "1000302"  [label="CFG: "];
"1000302" -> "1000511"  [label="DDG: pid[i]"];
"1000302" -> "1000511"  [label="DDG: USB_ID_PRODUCT(id)"];
"1000302" -> "1000296"  [label="DDG: pid[i]"];
"1000302" -> "1000295"  [label="DDG: pid[i]"];
"1000302" -> "1000295"  [label="DDG: USB_ID_PRODUCT(id)"];
"1000296" -> "1000302"  [label="DDG: pid[i]"];
"1000306" -> "1000302"  [label="DDG: id"];
"1000296" -> "1000295"  [label="AST: "];
"1000296" -> "1000300"  [label="CFG: "];
"1000297" -> "1000296"  [label="AST: "];
"1000300" -> "1000296"  [label="AST: "];
"1000304" -> "1000296"  [label="CFG: "];
"1000295" -> "1000296"  [label="CFG: "];
"1000296" -> "1000511"  [label="DDG: -1"];
"1000296" -> "1000511"  [label="DDG: pid[i]"];
"1000296" -> "1000295"  [label="DDG: pid[i]"];
"1000296" -> "1000295"  [label="DDG: -1"];
"1000300" -> "1000296"  [label="DDG: 1"];
"1000348" -> "1000349"  [label="CFG: "];
"1000349" -> "1000348"  [label="AST: "];
"1000300" -> "1000301"  [label="CFG: "];
"1000301" -> "1000300"  [label="AST: "];
"1000306" -> "1000307"  [label="CFG: "];
"1000307" -> "1000306"  [label="AST: "];
"1000306" -> "1000511"  [label="DDG: id"];
"1000306" -> "1000293"  [label="DDG: id"];
"1000293" -> "1000306"  [label="DDG: id"];
"1000191" -> "1000306"  [label="DDG: id"];
"1000306" -> "1000316"  [label="DDG: id"];
"1000306" -> "1000357"  [label="DDG: id"];
"1000293" -> "1000289"  [label="AST: "];
"1000293" -> "1000294"  [label="CFG: "];
"1000294" -> "1000293"  [label="AST: "];
"1000289" -> "1000293"  [label="CFG: "];
"1000293" -> "1000511"  [label="DDG: id"];
"1000293" -> "1000289"  [label="DDG: id"];
"1000191" -> "1000293"  [label="DDG: id"];
"1000293" -> "1000316"  [label="DDG: id"];
"1000293" -> "1000357"  [label="DDG: id"];
"1000191" -> "1000189"  [label="AST: "];
"1000191" -> "1000195"  [label="CFG: "];
"1000192" -> "1000191"  [label="AST: "];
"1000193" -> "1000191"  [label="AST: "];
"1000194" -> "1000191"  [label="AST: "];
"1000195" -> "1000191"  [label="AST: "];
"1000189" -> "1000191"  [label="CFG: "];
"1000191" -> "1000511"  [label="DDG: quirk"];
"1000191" -> "1000511"  [label="DDG: id"];
"1000191" -> "1000511"  [label="DDG: intf"];
"1000191" -> "1000511"  [label="DDG: dev"];
"1000191" -> "1000189"  [label="DDG: dev"];
"1000191" -> "1000189"  [label="DDG: intf"];
"1000191" -> "1000189"  [label="DDG: quirk"];
"1000191" -> "1000189"  [label="DDG: id"];
"1000163" -> "1000191"  [label="DDG: dev"];
"1000169" -> "1000191"  [label="DDG: dev"];
"1000169" -> "1000191"  [label="DDG: id"];
"1000117" -> "1000191"  [label="DDG: intf"];
"1000111" -> "1000191"  [label="DDG: intf"];
"1000173" -> "1000191"  [label="DDG: quirk"];
"1000147" -> "1000191"  [label="DDG: id"];
"1000191" -> "1000223"  [label="DDG: dev"];
"1000191" -> "1000316"  [label="DDG: intf"];
"1000191" -> "1000316"  [label="DDG: dev"];
"1000191" -> "1000316"  [label="DDG: quirk"];
"1000191" -> "1000316"  [label="DDG: id"];
"1000191" -> "1000357"  [label="DDG: id"];
"1000191" -> "1000406"  [label="DDG: quirk"];
"1000191" -> "1000416"  [label="DDG: intf"];
"1000191" -> "1000475"  [label="DDG: intf"];
"1000163" -> "1000162"  [label="AST: "];
"1000163" -> "1000165"  [label="CFG: "];
"1000164" -> "1000163"  [label="AST: "];
"1000165" -> "1000163"  [label="AST: "];
"1000168" -> "1000163"  [label="CFG: "];
"1000174" -> "1000163"  [label="CFG: "];
"1000163" -> "1000511"  [label="DDG: dev"];
"1000163" -> "1000511"  [label="DDG: get_alias_id(dev, &id)"];
"1000163" -> "1000511"  [label="DDG: &id"];
"1000115" -> "1000163"  [label="DDG: dev"];
"1000163" -> "1000169"  [label="DDG: dev"];
"1000115" -> "1000113"  [label="AST: "];
"1000115" -> "1000117"  [label="CFG: "];
"1000116" -> "1000115"  [label="AST: "];
"1000117" -> "1000115"  [label="AST: "];
"1000121" -> "1000115"  [label="CFG: "];
"1000115" -> "1000511"  [label="DDG: interface_to_usbdev(intf)"];
"1000117" -> "1000115"  [label="DDG: intf"];
"1000117" -> "1000118"  [label="CFG: "];
"1000118" -> "1000117"  [label="AST: "];
"1000117" -> "1000511"  [label="DDG: intf"];
"1000111" -> "1000117"  [label="DDG: intf"];
"1000111" -> "1000110"  [label="AST: "];
"1000111" -> "1000511"  [label="DDG: intf"];
"1000111" -> "1000316"  [label="DDG: intf"];
"1000111" -> "1000329"  [label="DDG: intf"];
"1000111" -> "1000416"  [label="DDG: intf"];
"1000111" -> "1000475"  [label="DDG: intf"];
"1000169" -> "1000167"  [label="AST: "];
"1000169" -> "1000171"  [label="CFG: "];
"1000170" -> "1000169"  [label="AST: "];
"1000171" -> "1000169"  [label="AST: "];
"1000167" -> "1000169"  [label="CFG: "];
"1000169" -> "1000511"  [label="DDG: id"];
"1000169" -> "1000511"  [label="DDG: dev"];
"1000169" -> "1000167"  [label="DDG: dev"];
"1000169" -> "1000167"  [label="DDG: id"];
"1000147" -> "1000169"  [label="DDG: id"];
"1000147" -> "1000113"  [label="AST: "];
"1000147" -> "1000149"  [label="CFG: "];
"1000148" -> "1000147"  [label="AST: "];
"1000149" -> "1000147"  [label="AST: "];
"1000164" -> "1000147"  [label="CFG: "];
"1000147" -> "1000511"  [label="DDG: id"];
"1000147" -> "1000511"  [label="DDG: USB_ID(le16_to_cpu(dev->descriptor.idVendor),\n\t\t    le16_to_cpu(dev->descriptor.idProduct))"];
"1000149" -> "1000147"  [label="DDG: le16_to_cpu(dev->descriptor.idVendor)"];
"1000149" -> "1000147"  [label="DDG: le16_to_cpu(dev->descriptor.idProduct)"];
"1000149" -> "1000156"  [label="CFG: "];
"1000150" -> "1000149"  [label="AST: "];
"1000156" -> "1000149"  [label="AST: "];
"1000149" -> "1000511"  [label="DDG: le16_to_cpu(dev->descriptor.idVendor)"];
"1000149" -> "1000511"  [label="DDG: le16_to_cpu(dev->descriptor.idProduct)"];
"1000150" -> "1000149"  [label="DDG: dev->descriptor.idVendor"];
"1000156" -> "1000149"  [label="DDG: dev->descriptor.idProduct"];
"1000150" -> "1000151"  [label="CFG: "];
"1000151" -> "1000150"  [label="AST: "];
"1000159" -> "1000150"  [label="CFG: "];
"1000150" -> "1000511"  [label="DDG: dev->descriptor.idVendor"];
"1000156" -> "1000157"  [label="CFG: "];
"1000157" -> "1000156"  [label="AST: "];
"1000156" -> "1000511"  [label="DDG: dev->descriptor.idProduct"];
"1000173" -> "1000172"  [label="AST: "];
"1000173" -> "1000174"  [label="CFG: "];
"1000173" -> "1000175"  [label="CFG: "];
"1000174" -> "1000173"  [label="AST: "];
"1000175" -> "1000173"  [label="AST: "];
"1000188" -> "1000173"  [label="CFG: "];
"1000190" -> "1000173"  [label="CFG: "];
"1000173" -> "1000511"  [label="DDG: quirk && quirk->ifnum >= 0 && ifnum != quirk->ifnum"];
"1000173" -> "1000511"  [label="DDG: quirk"];
"1000173" -> "1000511"  [label="DDG: quirk->ifnum >= 0 && ifnum != quirk->ifnum"];
"1000167" -> "1000173"  [label="DDG: quirk"];
"1000120" -> "1000173"  [label="DDG: quirk"];
"1000175" -> "1000173"  [label="DDG: quirk->ifnum >= 0"];
"1000175" -> "1000173"  [label="DDG: ifnum != quirk->ifnum"];
"1000167" -> "1000162"  [label="AST: "];
"1000168" -> "1000167"  [label="AST: "];
"1000174" -> "1000167"  [label="CFG: "];
"1000167" -> "1000511"  [label="DDG: get_alias_quirk(dev, id)"];
"1000120" -> "1000113"  [label="AST: "];
"1000120" -> "1000122"  [label="CFG: "];
"1000121" -> "1000120"  [label="AST: "];
"1000122" -> "1000120"  [label="AST: "];
"1000134" -> "1000120"  [label="CFG: "];
"1000120" -> "1000511"  [label="DDG: (const struct snd_usb_audio_quirk *)usb_id->driver_info"];
"1000122" -> "1000120"  [label="DDG: usb_id->driver_info"];
"1000122" -> "1000124"  [label="CFG: "];
"1000123" -> "1000122"  [label="AST: "];
"1000124" -> "1000122"  [label="AST: "];
"1000122" -> "1000511"  [label="DDG: usb_id->driver_info"];
"1000175" -> "1000176"  [label="CFG: "];
"1000175" -> "1000181"  [label="CFG: "];
"1000176" -> "1000175"  [label="AST: "];
"1000181" -> "1000175"  [label="AST: "];
"1000175" -> "1000511"  [label="DDG: ifnum != quirk->ifnum"];
"1000175" -> "1000511"  [label="DDG: quirk->ifnum >= 0"];
"1000176" -> "1000175"  [label="DDG: quirk->ifnum"];
"1000176" -> "1000175"  [label="DDG: 0"];
"1000181" -> "1000175"  [label="DDG: ifnum"];
"1000181" -> "1000175"  [label="DDG: quirk->ifnum"];
"1000176" -> "1000180"  [label="CFG: "];
"1000177" -> "1000176"  [label="AST: "];
"1000180" -> "1000176"  [label="AST: "];
"1000182" -> "1000176"  [label="CFG: "];
"1000176" -> "1000511"  [label="DDG: quirk->ifnum"];
"1000176" -> "1000181"  [label="DDG: quirk->ifnum"];
"1000176" -> "1000408"  [label="DDG: quirk->ifnum"];
"1000181" -> "1000183"  [label="CFG: "];
"1000182" -> "1000181"  [label="AST: "];
"1000183" -> "1000181"  [label="AST: "];
"1000181" -> "1000511"  [label="DDG: ifnum"];
"1000181" -> "1000511"  [label="DDG: quirk->ifnum"];
"1000141" -> "1000181"  [label="DDG: ifnum"];
"1000181" -> "1000408"  [label="DDG: quirk->ifnum"];
"1000181" -> "1000434"  [label="DDG: ifnum"];
"1000141" -> "1000113"  [label="AST: "];
"1000141" -> "1000143"  [label="CFG: "];
"1000142" -> "1000141"  [label="AST: "];
"1000143" -> "1000141"  [label="AST: "];
"1000148" -> "1000141"  [label="CFG: "];
"1000141" -> "1000511"  [label="DDG: ifnum"];
"1000141" -> "1000511"  [label="DDG: get_iface_desc(alts)->bInterfaceNumber"];
"1000141" -> "1000434"  [label="DDG: ifnum"];
"1000295" -> "1000281"  [label="AST: "];
"1000281" -> "1000295"  [label="CFG: "];
"1000295" -> "1000511"  [label="DDG: pid[i] == -1"];
"1000295" -> "1000511"  [label="DDG: pid[i] == USB_ID_PRODUCT(id)"];
"1000295" -> "1000281"  [label="DDG: pid[i] == -1"];
"1000295" -> "1000281"  [label="DDG: pid[i] == USB_ID_PRODUCT(id)"];
"1000281" -> "1000276"  [label="AST: "];
"1000281" -> "1000282"  [label="CFG: "];
"1000282" -> "1000281"  [label="AST: "];
"1000276" -> "1000281"  [label="CFG: "];
"1000281" -> "1000511"  [label="DDG: vid[i] == -1 || vid[i] == USB_ID_VENDOR(id)"];
"1000281" -> "1000511"  [label="DDG: pid[i] == -1 || pid[i] == USB_ID_PRODUCT(id)"];
"1000281" -> "1000276"  [label="DDG: vid[i] == -1 || vid[i] == USB_ID_VENDOR(id)"];
"1000281" -> "1000276"  [label="DDG: pid[i] == -1 || pid[i] == USB_ID_PRODUCT(id)"];
"1000282" -> "1000281"  [label="DDG: vid[i] == -1"];
"1000282" -> "1000281"  [label="DDG: vid[i] == USB_ID_VENDOR(id)"];
"1000276" -> "1000275"  [label="AST: "];
"1000276" -> "1000277"  [label="CFG: "];
"1000277" -> "1000276"  [label="AST: "];
"1000311" -> "1000276"  [label="CFG: "];
"1000274" -> "1000276"  [label="CFG: "];
"1000276" -> "1000511"  [label="DDG: !usb_chip[i] &&\n\t\t\t    (vid[i] == -1 || vid[i] == USB_ID_VENDOR(id)) &&\n\t\t\t    (pid[i] == -1 || pid[i] == USB_ID_PRODUCT(id))"];
"1000276" -> "1000511"  [label="DDG: (vid[i] == -1 || vid[i] == USB_ID_VENDOR(id)) &&\n\t\t\t    (pid[i] == -1 || pid[i] == USB_ID_PRODUCT(id))"];
"1000276" -> "1000511"  [label="DDG: !usb_chip[i]"];
"1000277" -> "1000276"  [label="DDG: usb_chip[i]"];
"1000337" -> "1000336"  [label="AST: "];
"1000337" -> "1000338"  [label="CFG: "];
"1000338" -> "1000337"  [label="AST: "];
"1000354" -> "1000337"  [label="CFG: "];
"1000274" -> "1000337"  [label="CFG: "];
"1000337" -> "1000511"  [label="DDG: pid[i] != -1"];
"1000337" -> "1000511"  [label="DDG: vid[i] != -1"];
"1000337" -> "1000511"  [label="DDG: vid[i] != -1 || pid[i] != -1"];
"1000338" -> "1000337"  [label="DDG: vid[i]"];
"1000338" -> "1000337"  [label="DDG: -1"];
}
