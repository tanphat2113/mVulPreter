digraph "0_postgres_31400a673325147e1205326008e32135a78b4d8a@integer" {
"1000218" [label="(Call,pairs = palloc(count * sizeof(Pairs)))"];
"1000220" [label="(Call,palloc(count * sizeof(Pairs)))"];
"1000221" [label="(Call,count * sizeof(Pairs))"];
"1000198" [label="(Call,count > MaxAllocSize / sizeof(Pairs))"];
"1000192" [label="(Call,count = in_count / 2)"];
"1000194" [label="(Call,in_count / 2)"];
"1000200" [label="(Call,MaxAllocSize / sizeof(Pairs))"];
"1000209" [label="(Call,errmsg(\"number of pairs (%d) exceeds the maximum allowed (%d)\",\n\t\t\t\t\t count, (int) (MaxAllocSize / sizeof(Pairs))))"];
"1000212" [label="(Call,(int) (MaxAllocSize / sizeof(Pairs)))"];
"1000214" [label="(Call,MaxAllocSize / sizeof(Pairs))"];
"1000382" [label="(Call,hstoreUniquePairs(pairs, count, &buflen))"];
"1000380" [label="(Call,count = hstoreUniquePairs(pairs, count, &buflen))"];
"1000389" [label="(Call,hstorePairs(pairs, count, buflen))"];
"1000387" [label="(Call,out = hstorePairs(pairs, count, buflen))"];
"1000393" [label="(Call,PG_RETURN_POINTER(out))"];
"1000205" [label="(Identifier,ERROR)"];
"1000220" [label="(Call,palloc(count * sizeof(Pairs)))"];
"1000201" [label="(Identifier,MaxAllocSize)"];
"1000195" [label="(Identifier,in_count)"];
"1000227" [label="(Identifier,i)"];
"1000193" [label="(Identifier,count)"];
"1000380" [label="(Call,count = hstoreUniquePairs(pairs, count, &buflen))"];
"1000387" [label="(Call,out = hstorePairs(pairs, count, buflen))"];
"1000229" [label="(Call,i < count)"];
"1000196" [label="(Literal,2)"];
"1000390" [label="(Identifier,pairs)"];
"1000216" [label="(Call,sizeof(Pairs))"];
"1000394" [label="(Identifier,out)"];
"1000395" [label="(MethodReturn,RET)"];
"1000211" [label="(Identifier,count)"];
"1000218" [label="(Call,pairs = palloc(count * sizeof(Pairs)))"];
"1000206" [label="(Block,)"];
"1000389" [label="(Call,hstorePairs(pairs, count, buflen))"];
"1000192" [label="(Call,count = in_count / 2)"];
"1000202" [label="(Call,sizeof(Pairs))"];
"1000209" [label="(Call,errmsg(\"number of pairs (%d) exceeds the maximum allowed (%d)\",\n\t\t\t\t\t count, (int) (MaxAllocSize / sizeof(Pairs))))"];
"1000200" [label="(Call,MaxAllocSize / sizeof(Pairs))"];
"1000219" [label="(Identifier,pairs)"];
"1000383" [label="(Identifier,pairs)"];
"1000388" [label="(Identifier,out)"];
"1000204" [label="(Call,ereport(ERROR,\n\t\t\t\t(errcode(ERRCODE_PROGRAM_LIMIT_EXCEEDED),\n\t\t\t  errmsg(\"number of pairs (%d) exceeds the maximum allowed (%d)\",\n\t\t\t\t\t count, (int) (MaxAllocSize / sizeof(Pairs))))))"];
"1000382" [label="(Call,hstoreUniquePairs(pairs, count, &buflen))"];
"1000222" [label="(Identifier,count)"];
"1000212" [label="(Call,(int) (MaxAllocSize / sizeof(Pairs)))"];
"1000221" [label="(Call,count * sizeof(Pairs))"];
"1000215" [label="(Identifier,MaxAllocSize)"];
"1000381" [label="(Identifier,count)"];
"1000199" [label="(Identifier,count)"];
"1000384" [label="(Identifier,count)"];
"1000392" [label="(Identifier,buflen)"];
"1000198" [label="(Call,count > MaxAllocSize / sizeof(Pairs))"];
"1000385" [label="(Call,&buflen)"];
"1000393" [label="(Call,PG_RETURN_POINTER(out))"];
"1000194" [label="(Call,in_count / 2)"];
"1000103" [label="(Block,)"];
"1000223" [label="(Call,sizeof(Pairs))"];
"1000210" [label="(Literal,\"number of pairs (%d) exceeds the maximum allowed (%d)\")"];
"1000391" [label="(Identifier,count)"];
"1000214" [label="(Call,MaxAllocSize / sizeof(Pairs))"];
"1000197" [label="(ControlStructure,if (count > MaxAllocSize / sizeof(Pairs)))"];
"1000218" -> "1000103"  [label="AST: "];
"1000218" -> "1000220"  [label="CFG: "];
"1000219" -> "1000218"  [label="AST: "];
"1000220" -> "1000218"  [label="AST: "];
"1000227" -> "1000218"  [label="CFG: "];
"1000218" -> "1000395"  [label="DDG: "];
"1000220" -> "1000218"  [label="DDG: "];
"1000218" -> "1000382"  [label="DDG: "];
"1000220" -> "1000221"  [label="CFG: "];
"1000221" -> "1000220"  [label="AST: "];
"1000220" -> "1000395"  [label="DDG: "];
"1000221" -> "1000220"  [label="DDG: "];
"1000221" -> "1000223"  [label="CFG: "];
"1000222" -> "1000221"  [label="AST: "];
"1000223" -> "1000221"  [label="AST: "];
"1000198" -> "1000221"  [label="DDG: "];
"1000209" -> "1000221"  [label="DDG: "];
"1000221" -> "1000229"  [label="DDG: "];
"1000198" -> "1000197"  [label="AST: "];
"1000198" -> "1000200"  [label="CFG: "];
"1000199" -> "1000198"  [label="AST: "];
"1000200" -> "1000198"  [label="AST: "];
"1000205" -> "1000198"  [label="CFG: "];
"1000219" -> "1000198"  [label="CFG: "];
"1000198" -> "1000395"  [label="DDG: "];
"1000198" -> "1000395"  [label="DDG: "];
"1000192" -> "1000198"  [label="DDG: "];
"1000200" -> "1000198"  [label="DDG: "];
"1000198" -> "1000209"  [label="DDG: "];
"1000192" -> "1000103"  [label="AST: "];
"1000192" -> "1000194"  [label="CFG: "];
"1000193" -> "1000192"  [label="AST: "];
"1000194" -> "1000192"  [label="AST: "];
"1000199" -> "1000192"  [label="CFG: "];
"1000192" -> "1000395"  [label="DDG: "];
"1000194" -> "1000192"  [label="DDG: "];
"1000194" -> "1000192"  [label="DDG: "];
"1000194" -> "1000196"  [label="CFG: "];
"1000195" -> "1000194"  [label="AST: "];
"1000196" -> "1000194"  [label="AST: "];
"1000194" -> "1000395"  [label="DDG: "];
"1000200" -> "1000202"  [label="CFG: "];
"1000201" -> "1000200"  [label="AST: "];
"1000202" -> "1000200"  [label="AST: "];
"1000200" -> "1000395"  [label="DDG: "];
"1000200" -> "1000214"  [label="DDG: "];
"1000209" -> "1000206"  [label="AST: "];
"1000209" -> "1000212"  [label="CFG: "];
"1000210" -> "1000209"  [label="AST: "];
"1000211" -> "1000209"  [label="AST: "];
"1000212" -> "1000209"  [label="AST: "];
"1000204" -> "1000209"  [label="CFG: "];
"1000209" -> "1000395"  [label="DDG: "];
"1000209" -> "1000395"  [label="DDG: "];
"1000212" -> "1000209"  [label="DDG: "];
"1000212" -> "1000214"  [label="CFG: "];
"1000213" -> "1000212"  [label="AST: "];
"1000214" -> "1000212"  [label="AST: "];
"1000212" -> "1000395"  [label="DDG: "];
"1000214" -> "1000212"  [label="DDG: "];
"1000214" -> "1000216"  [label="CFG: "];
"1000215" -> "1000214"  [label="AST: "];
"1000216" -> "1000214"  [label="AST: "];
"1000214" -> "1000395"  [label="DDG: "];
"1000382" -> "1000380"  [label="AST: "];
"1000382" -> "1000385"  [label="CFG: "];
"1000383" -> "1000382"  [label="AST: "];
"1000384" -> "1000382"  [label="AST: "];
"1000385" -> "1000382"  [label="AST: "];
"1000380" -> "1000382"  [label="CFG: "];
"1000382" -> "1000395"  [label="DDG: "];
"1000382" -> "1000380"  [label="DDG: "];
"1000382" -> "1000380"  [label="DDG: "];
"1000382" -> "1000380"  [label="DDG: "];
"1000229" -> "1000382"  [label="DDG: "];
"1000382" -> "1000389"  [label="DDG: "];
"1000380" -> "1000103"  [label="AST: "];
"1000381" -> "1000380"  [label="AST: "];
"1000388" -> "1000380"  [label="CFG: "];
"1000380" -> "1000395"  [label="DDG: "];
"1000380" -> "1000389"  [label="DDG: "];
"1000389" -> "1000387"  [label="AST: "];
"1000389" -> "1000392"  [label="CFG: "];
"1000390" -> "1000389"  [label="AST: "];
"1000391" -> "1000389"  [label="AST: "];
"1000392" -> "1000389"  [label="AST: "];
"1000387" -> "1000389"  [label="CFG: "];
"1000389" -> "1000395"  [label="DDG: "];
"1000389" -> "1000395"  [label="DDG: "];
"1000389" -> "1000395"  [label="DDG: "];
"1000389" -> "1000387"  [label="DDG: "];
"1000389" -> "1000387"  [label="DDG: "];
"1000389" -> "1000387"  [label="DDG: "];
"1000387" -> "1000103"  [label="AST: "];
"1000388" -> "1000387"  [label="AST: "];
"1000394" -> "1000387"  [label="CFG: "];
"1000387" -> "1000395"  [label="DDG: "];
"1000387" -> "1000393"  [label="DDG: "];
"1000393" -> "1000103"  [label="AST: "];
"1000393" -> "1000394"  [label="CFG: "];
"1000394" -> "1000393"  [label="AST: "];
"1000395" -> "1000393"  [label="CFG: "];
"1000393" -> "1000395"  [label="DDG: "];
"1000393" -> "1000395"  [label="DDG: "];
}
