digraph "0_Chrome_ffeada1f2de5281d59ea48c94c4001a568092cd3@API" {
"1000231" [label="(Call,fread(&signature.front(), sizeof(uint8), header.signature_size,\n      file.get()))"];
"1000225" [label="(Call,signature.resize(header.signature_size))"];
"1000187" [label="(Call,header.signature_size == 0)"];
"1000165" [label="(Call,header.signature_size > kMaxSignatureSize)"];
"1000229" [label="(Call,len = fread(&signature.front(), sizeof(uint8), header.signature_size,\n      file.get()))"];
"1000241" [label="(Call,len < header.signature_size)"];
"1000254" [label="(Call,verifier.VerifyInit(extension_misc::kSignatureAlgorithm,\n                           sizeof(extension_misc::kSignatureAlgorithm),\n                           &signature.front(),\n                           signature.size(),\n                           &key.front(),\n                           key.size()))"];
"1000253" [label="(Call,!verifier.VerifyInit(extension_misc::kSignatureAlgorithm,\n                           sizeof(extension_misc::kSignatureAlgorithm),\n                           &signature.front(),\n                           signature.size(),\n                           &key.front(),\n                           key.size()))"];
"1000294" [label="(Call,reinterpret_cast<char*>(&key.front()))"];
"1000293" [label="(Call,std::string(reinterpret_cast<char*>(&key.front()),\n      key.size()))"];
"1000292" [label="(Call,base::Base64Encode(std::string(reinterpret_cast<char*>(&key.front()),\n      key.size()), &public_key_))"];
"1000226" [label="(Call,header.signature_size)"];
"1000296" [label="(Call,&key.front())"];
"1000101" [label="(Block,)"];
"1000294" [label="(Call,reinterpret_cast<char*>(&key.front()))"];
"1000200" [label="(Identifier,header)"];
"1000242" [label="(Identifier,len)"];
"1000273" [label="(Identifier,len)"];
"1000186" [label="(ControlStructure,if (header.signature_size == 0))"];
"1000261" [label="(Call,&key.front())"];
"1000253" [label="(Call,!verifier.VerifyInit(extension_misc::kSignatureAlgorithm,\n                           sizeof(extension_misc::kSignatureAlgorithm),\n                           &signature.front(),\n                           signature.size(),\n                           &key.front(),\n                           key.size()))"];
"1000300" [label="(Identifier,public_key_)"];
"1000266" [label="(Literal,\"Signature verification initialization failed. \"\n                  \"This is most likely caused by a public key in \"\n                  \"the wrong format (should encode algorithm).\")"];
"1000258" [label="(Call,&signature.front())"];
"1000254" [label="(Call,verifier.VerifyInit(extension_misc::kSignatureAlgorithm,\n                           sizeof(extension_misc::kSignatureAlgorithm),\n                           &signature.front(),\n                           signature.size(),\n                           &key.front(),\n                           key.size()))"];
"1000239" [label="(Call,file.get())"];
"1000232" [label="(Call,&signature.front())"];
"1000169" [label="(Identifier,kMaxSignatureSize)"];
"1000240" [label="(ControlStructure,if (len < header.signature_size))"];
"1000165" [label="(Call,header.signature_size > kMaxSignatureSize)"];
"1000260" [label="(Call,signature.size())"];
"1000229" [label="(Call,len = fread(&signature.front(), sizeof(uint8), header.signature_size,\n      file.get()))"];
"1000252" [label="(ControlStructure,if (!verifier.VerifyInit(extension_misc::kSignatureAlgorithm,\n                           sizeof(extension_misc::kSignatureAlgorithm),\n                           &signature.front(),\n                           signature.size(),\n                           &key.front(),\n                           key.size())))"];
"1000230" [label="(Identifier,len)"];
"1000298" [label="(Call,key.size())"];
"1000187" [label="(Call,header.signature_size == 0)"];
"1000292" [label="(Call,base::Base64Encode(std::string(reinterpret_cast<char*>(&key.front()),\n      key.size()), &public_key_))"];
"1000303" [label="(MethodReturn,bool)"];
"1000225" [label="(Call,signature.resize(header.signature_size))"];
"1000263" [label="(Call,key.size())"];
"1000241" [label="(Call,len < header.signature_size)"];
"1000231" [label="(Call,fread(&signature.front(), sizeof(uint8), header.signature_size,\n      file.get()))"];
"1000248" [label="(Literal,\"Invalid signature\")"];
"1000204" [label="(Call,fread(&key.front(), sizeof(uint8), header.key_size, file.get()))"];
"1000236" [label="(Call,header.signature_size)"];
"1000234" [label="(Call,sizeof(uint8))"];
"1000191" [label="(Literal,0)"];
"1000255" [label="(Identifier,extension_misc::kSignatureAlgorithm)"];
"1000256" [label="(Call,sizeof(extension_misc::kSignatureAlgorithm))"];
"1000188" [label="(Call,header.signature_size)"];
"1000159" [label="(Call,header.key_size > kMaxPublicKeySize ||\n      header.signature_size > kMaxSignatureSize)"];
"1000166" [label="(Call,header.signature_size)"];
"1000243" [label="(Call,header.signature_size)"];
"1000302" [label="(Identifier,true)"];
"1000299" [label="(Call,&public_key_)"];
"1000194" [label="(Literal,\"Signature length is zero\")"];
"1000293" [label="(Call,std::string(reinterpret_cast<char*>(&key.front()),\n      key.size()))"];
"1000231" -> "1000229"  [label="AST: "];
"1000231" -> "1000239"  [label="CFG: "];
"1000232" -> "1000231"  [label="AST: "];
"1000234" -> "1000231"  [label="AST: "];
"1000236" -> "1000231"  [label="AST: "];
"1000239" -> "1000231"  [label="AST: "];
"1000229" -> "1000231"  [label="CFG: "];
"1000231" -> "1000303"  [label="DDG: file.get()"];
"1000231" -> "1000303"  [label="DDG: &signature.front()"];
"1000231" -> "1000229"  [label="DDG: &signature.front()"];
"1000231" -> "1000229"  [label="DDG: header.signature_size"];
"1000231" -> "1000229"  [label="DDG: file.get()"];
"1000225" -> "1000231"  [label="DDG: header.signature_size"];
"1000231" -> "1000241"  [label="DDG: header.signature_size"];
"1000231" -> "1000254"  [label="DDG: &signature.front()"];
"1000225" -> "1000101"  [label="AST: "];
"1000225" -> "1000226"  [label="CFG: "];
"1000226" -> "1000225"  [label="AST: "];
"1000230" -> "1000225"  [label="CFG: "];
"1000225" -> "1000303"  [label="DDG: signature.resize(header.signature_size)"];
"1000187" -> "1000225"  [label="DDG: header.signature_size"];
"1000187" -> "1000186"  [label="AST: "];
"1000187" -> "1000191"  [label="CFG: "];
"1000188" -> "1000187"  [label="AST: "];
"1000191" -> "1000187"  [label="AST: "];
"1000194" -> "1000187"  [label="CFG: "];
"1000200" -> "1000187"  [label="CFG: "];
"1000187" -> "1000303"  [label="DDG: header.signature_size"];
"1000187" -> "1000303"  [label="DDG: header.signature_size == 0"];
"1000165" -> "1000187"  [label="DDG: header.signature_size"];
"1000165" -> "1000159"  [label="AST: "];
"1000165" -> "1000169"  [label="CFG: "];
"1000166" -> "1000165"  [label="AST: "];
"1000169" -> "1000165"  [label="AST: "];
"1000159" -> "1000165"  [label="CFG: "];
"1000165" -> "1000303"  [label="DDG: kMaxSignatureSize"];
"1000165" -> "1000303"  [label="DDG: header.signature_size"];
"1000165" -> "1000159"  [label="DDG: header.signature_size"];
"1000165" -> "1000159"  [label="DDG: kMaxSignatureSize"];
"1000229" -> "1000101"  [label="AST: "];
"1000230" -> "1000229"  [label="AST: "];
"1000242" -> "1000229"  [label="CFG: "];
"1000229" -> "1000303"  [label="DDG: fread(&signature.front(), sizeof(uint8), header.signature_size,\n      file.get())"];
"1000229" -> "1000241"  [label="DDG: len"];
"1000241" -> "1000240"  [label="AST: "];
"1000241" -> "1000243"  [label="CFG: "];
"1000242" -> "1000241"  [label="AST: "];
"1000243" -> "1000241"  [label="AST: "];
"1000248" -> "1000241"  [label="CFG: "];
"1000255" -> "1000241"  [label="CFG: "];
"1000241" -> "1000303"  [label="DDG: len < header.signature_size"];
"1000241" -> "1000303"  [label="DDG: len"];
"1000241" -> "1000303"  [label="DDG: header.signature_size"];
"1000254" -> "1000253"  [label="AST: "];
"1000254" -> "1000263"  [label="CFG: "];
"1000255" -> "1000254"  [label="AST: "];
"1000256" -> "1000254"  [label="AST: "];
"1000258" -> "1000254"  [label="AST: "];
"1000260" -> "1000254"  [label="AST: "];
"1000261" -> "1000254"  [label="AST: "];
"1000263" -> "1000254"  [label="AST: "];
"1000253" -> "1000254"  [label="CFG: "];
"1000254" -> "1000303"  [label="DDG: signature.size()"];
"1000254" -> "1000303"  [label="DDG: extension_misc::kSignatureAlgorithm"];
"1000254" -> "1000303"  [label="DDG: key.size()"];
"1000254" -> "1000303"  [label="DDG: &signature.front()"];
"1000254" -> "1000303"  [label="DDG: &key.front()"];
"1000254" -> "1000253"  [label="DDG: &signature.front()"];
"1000254" -> "1000253"  [label="DDG: key.size()"];
"1000254" -> "1000253"  [label="DDG: signature.size()"];
"1000254" -> "1000253"  [label="DDG: &key.front()"];
"1000254" -> "1000253"  [label="DDG: extension_misc::kSignatureAlgorithm"];
"1000204" -> "1000254"  [label="DDG: &key.front()"];
"1000254" -> "1000294"  [label="DDG: &key.front()"];
"1000253" -> "1000252"  [label="AST: "];
"1000266" -> "1000253"  [label="CFG: "];
"1000273" -> "1000253"  [label="CFG: "];
"1000253" -> "1000303"  [label="DDG: !verifier.VerifyInit(extension_misc::kSignatureAlgorithm,\n                           sizeof(extension_misc::kSignatureAlgorithm),\n                           &signature.front(),\n                           signature.size(),\n                           &key.front(),\n                           key.size())"];
"1000253" -> "1000303"  [label="DDG: verifier.VerifyInit(extension_misc::kSignatureAlgorithm,\n                           sizeof(extension_misc::kSignatureAlgorithm),\n                           &signature.front(),\n                           signature.size(),\n                           &key.front(),\n                           key.size())"];
"1000294" -> "1000293"  [label="AST: "];
"1000294" -> "1000296"  [label="CFG: "];
"1000295" -> "1000294"  [label="AST: "];
"1000296" -> "1000294"  [label="AST: "];
"1000298" -> "1000294"  [label="CFG: "];
"1000294" -> "1000303"  [label="DDG: &key.front()"];
"1000294" -> "1000293"  [label="DDG: &key.front()"];
"1000293" -> "1000292"  [label="AST: "];
"1000293" -> "1000298"  [label="CFG: "];
"1000298" -> "1000293"  [label="AST: "];
"1000300" -> "1000293"  [label="CFG: "];
"1000293" -> "1000303"  [label="DDG: key.size()"];
"1000293" -> "1000303"  [label="DDG: reinterpret_cast<char*>(&key.front())"];
"1000293" -> "1000292"  [label="DDG: reinterpret_cast<char*>(&key.front())"];
"1000293" -> "1000292"  [label="DDG: key.size()"];
"1000292" -> "1000101"  [label="AST: "];
"1000292" -> "1000299"  [label="CFG: "];
"1000299" -> "1000292"  [label="AST: "];
"1000302" -> "1000292"  [label="CFG: "];
"1000292" -> "1000303"  [label="DDG: base::Base64Encode(std::string(reinterpret_cast<char*>(&key.front()),\n      key.size()), &public_key_)"];
"1000292" -> "1000303"  [label="DDG: std::string(reinterpret_cast<char*>(&key.front()),\n      key.size())"];
"1000292" -> "1000303"  [label="DDG: &public_key_"];
}
