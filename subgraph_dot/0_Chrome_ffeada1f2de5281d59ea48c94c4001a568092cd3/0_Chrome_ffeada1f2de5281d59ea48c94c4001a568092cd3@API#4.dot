digraph "0_Chrome_ffeada1f2de5281d59ea48c94c4001a568092cd3@API" {
"1000204" [label="(Call,fread(&key.front(), sizeof(uint8), header.key_size, file.get()))"];
"1000198" [label="(Call,key.resize(header.key_size))"];
"1000176" [label="(Call,header.key_size == 0)"];
"1000160" [label="(Call,header.key_size > kMaxPublicKeySize)"];
"1000202" [label="(Call,len = fread(&key.front(), sizeof(uint8), header.key_size, file.get()))"];
"1000214" [label="(Call,len < header.key_size)"];
"1000254" [label="(Call,verifier.VerifyInit(extension_misc::kSignatureAlgorithm,\n                           sizeof(extension_misc::kSignatureAlgorithm),\n                           &signature.front(),\n                           signature.size(),\n                           &key.front(),\n                           key.size()))"];
"1000253" [label="(Call,!verifier.VerifyInit(extension_misc::kSignatureAlgorithm,\n                           sizeof(extension_misc::kSignatureAlgorithm),\n                           &signature.front(),\n                           signature.size(),\n                           &key.front(),\n                           key.size()))"];
"1000294" [label="(Call,reinterpret_cast<char*>(&key.front()))"];
"1000293" [label="(Call,std::string(reinterpret_cast<char*>(&key.front()),\n      key.size()))"];
"1000292" [label="(Call,base::Base64Encode(std::string(reinterpret_cast<char*>(&key.front()),\n      key.size()), &public_key_))"];
"1000175" [label="(ControlStructure,if (header.key_size == 0))"];
"1000296" [label="(Call,&key.front())"];
"1000101" [label="(Block,)"];
"1000180" [label="(Literal,0)"];
"1000294" [label="(Call,reinterpret_cast<char*>(&key.front()))"];
"1000183" [label="(Literal,\"Key length is zero\")"];
"1000273" [label="(Identifier,len)"];
"1000227" [label="(Identifier,header)"];
"1000261" [label="(Call,&key.front())"];
"1000203" [label="(Identifier,len)"];
"1000161" [label="(Call,header.key_size)"];
"1000253" [label="(Call,!verifier.VerifyInit(extension_misc::kSignatureAlgorithm,\n                           sizeof(extension_misc::kSignatureAlgorithm),\n                           &signature.front(),\n                           signature.size(),\n                           &key.front(),\n                           key.size()))"];
"1000300" [label="(Identifier,public_key_)"];
"1000176" [label="(Call,header.key_size == 0)"];
"1000266" [label="(Literal,\"Signature verification initialization failed. \"\n                  \"This is most likely caused by a public key in \"\n                  \"the wrong format (should encode algorithm).\")"];
"1000177" [label="(Call,header.key_size)"];
"1000258" [label="(Call,&signature.front())"];
"1000216" [label="(Call,header.key_size)"];
"1000254" [label="(Call,verifier.VerifyInit(extension_misc::kSignatureAlgorithm,\n                           sizeof(extension_misc::kSignatureAlgorithm),\n                           &signature.front(),\n                           signature.size(),\n                           &key.front(),\n                           key.size()))"];
"1000164" [label="(Identifier,kMaxPublicKeySize)"];
"1000160" [label="(Call,header.key_size > kMaxPublicKeySize)"];
"1000209" [label="(Call,header.key_size)"];
"1000198" [label="(Call,key.resize(header.key_size))"];
"1000260" [label="(Call,signature.size())"];
"1000252" [label="(ControlStructure,if (!verifier.VerifyInit(extension_misc::kSignatureAlgorithm,\n                           sizeof(extension_misc::kSignatureAlgorithm),\n                           &signature.front(),\n                           signature.size(),\n                           &key.front(),\n                           key.size())))"];
"1000202" [label="(Call,len = fread(&key.front(), sizeof(uint8), header.key_size, file.get()))"];
"1000221" [label="(Literal,\"Invalid public key\")"];
"1000298" [label="(Call,key.size())"];
"1000189" [label="(Identifier,header)"];
"1000207" [label="(Call,sizeof(uint8))"];
"1000292" [label="(Call,base::Base64Encode(std::string(reinterpret_cast<char*>(&key.front()),\n      key.size()), &public_key_))"];
"1000199" [label="(Call,header.key_size)"];
"1000303" [label="(MethodReturn,bool)"];
"1000263" [label="(Call,key.size())"];
"1000231" [label="(Call,fread(&signature.front(), sizeof(uint8), header.signature_size,\n      file.get()))"];
"1000212" [label="(Call,file.get())"];
"1000214" [label="(Call,len < header.key_size)"];
"1000167" [label="(Identifier,header)"];
"1000204" [label="(Call,fread(&key.front(), sizeof(uint8), header.key_size, file.get()))"];
"1000255" [label="(Identifier,extension_misc::kSignatureAlgorithm)"];
"1000256" [label="(Call,sizeof(extension_misc::kSignatureAlgorithm))"];
"1000159" [label="(Call,header.key_size > kMaxPublicKeySize ||\n      header.signature_size > kMaxSignatureSize)"];
"1000302" [label="(Identifier,true)"];
"1000299" [label="(Call,&public_key_)"];
"1000213" [label="(ControlStructure,if (len < header.key_size))"];
"1000205" [label="(Call,&key.front())"];
"1000293" [label="(Call,std::string(reinterpret_cast<char*>(&key.front()),\n      key.size()))"];
"1000215" [label="(Identifier,len)"];
"1000204" -> "1000202"  [label="AST: "];
"1000204" -> "1000212"  [label="CFG: "];
"1000205" -> "1000204"  [label="AST: "];
"1000207" -> "1000204"  [label="AST: "];
"1000209" -> "1000204"  [label="AST: "];
"1000212" -> "1000204"  [label="AST: "];
"1000202" -> "1000204"  [label="CFG: "];
"1000204" -> "1000303"  [label="DDG: file.get()"];
"1000204" -> "1000303"  [label="DDG: &key.front()"];
"1000204" -> "1000202"  [label="DDG: &key.front()"];
"1000204" -> "1000202"  [label="DDG: header.key_size"];
"1000204" -> "1000202"  [label="DDG: file.get()"];
"1000198" -> "1000204"  [label="DDG: header.key_size"];
"1000204" -> "1000214"  [label="DDG: header.key_size"];
"1000204" -> "1000254"  [label="DDG: &key.front()"];
"1000198" -> "1000101"  [label="AST: "];
"1000198" -> "1000199"  [label="CFG: "];
"1000199" -> "1000198"  [label="AST: "];
"1000203" -> "1000198"  [label="CFG: "];
"1000198" -> "1000303"  [label="DDG: key.resize(header.key_size)"];
"1000176" -> "1000198"  [label="DDG: header.key_size"];
"1000176" -> "1000175"  [label="AST: "];
"1000176" -> "1000180"  [label="CFG: "];
"1000177" -> "1000176"  [label="AST: "];
"1000180" -> "1000176"  [label="AST: "];
"1000183" -> "1000176"  [label="CFG: "];
"1000189" -> "1000176"  [label="CFG: "];
"1000176" -> "1000303"  [label="DDG: header.key_size == 0"];
"1000176" -> "1000303"  [label="DDG: header.key_size"];
"1000160" -> "1000176"  [label="DDG: header.key_size"];
"1000160" -> "1000159"  [label="AST: "];
"1000160" -> "1000164"  [label="CFG: "];
"1000161" -> "1000160"  [label="AST: "];
"1000164" -> "1000160"  [label="AST: "];
"1000167" -> "1000160"  [label="CFG: "];
"1000159" -> "1000160"  [label="CFG: "];
"1000160" -> "1000303"  [label="DDG: kMaxPublicKeySize"];
"1000160" -> "1000303"  [label="DDG: header.key_size"];
"1000160" -> "1000159"  [label="DDG: header.key_size"];
"1000160" -> "1000159"  [label="DDG: kMaxPublicKeySize"];
"1000202" -> "1000101"  [label="AST: "];
"1000203" -> "1000202"  [label="AST: "];
"1000215" -> "1000202"  [label="CFG: "];
"1000202" -> "1000303"  [label="DDG: fread(&key.front(), sizeof(uint8), header.key_size, file.get())"];
"1000202" -> "1000214"  [label="DDG: len"];
"1000214" -> "1000213"  [label="AST: "];
"1000214" -> "1000216"  [label="CFG: "];
"1000215" -> "1000214"  [label="AST: "];
"1000216" -> "1000214"  [label="AST: "];
"1000221" -> "1000214"  [label="CFG: "];
"1000227" -> "1000214"  [label="CFG: "];
"1000214" -> "1000303"  [label="DDG: header.key_size"];
"1000214" -> "1000303"  [label="DDG: len < header.key_size"];
"1000214" -> "1000303"  [label="DDG: len"];
"1000254" -> "1000253"  [label="AST: "];
"1000254" -> "1000263"  [label="CFG: "];
"1000255" -> "1000254"  [label="AST: "];
"1000256" -> "1000254"  [label="AST: "];
"1000258" -> "1000254"  [label="AST: "];
"1000260" -> "1000254"  [label="AST: "];
"1000261" -> "1000254"  [label="AST: "];
"1000263" -> "1000254"  [label="AST: "];
"1000253" -> "1000254"  [label="CFG: "];
"1000254" -> "1000303"  [label="DDG: signature.size()"];
"1000254" -> "1000303"  [label="DDG: extension_misc::kSignatureAlgorithm"];
"1000254" -> "1000303"  [label="DDG: key.size()"];
"1000254" -> "1000303"  [label="DDG: &signature.front()"];
"1000254" -> "1000303"  [label="DDG: &key.front()"];
"1000254" -> "1000253"  [label="DDG: &signature.front()"];
"1000254" -> "1000253"  [label="DDG: key.size()"];
"1000254" -> "1000253"  [label="DDG: signature.size()"];
"1000254" -> "1000253"  [label="DDG: &key.front()"];
"1000254" -> "1000253"  [label="DDG: extension_misc::kSignatureAlgorithm"];
"1000231" -> "1000254"  [label="DDG: &signature.front()"];
"1000254" -> "1000294"  [label="DDG: &key.front()"];
"1000253" -> "1000252"  [label="AST: "];
"1000266" -> "1000253"  [label="CFG: "];
"1000273" -> "1000253"  [label="CFG: "];
"1000253" -> "1000303"  [label="DDG: !verifier.VerifyInit(extension_misc::kSignatureAlgorithm,\n                           sizeof(extension_misc::kSignatureAlgorithm),\n                           &signature.front(),\n                           signature.size(),\n                           &key.front(),\n                           key.size())"];
"1000253" -> "1000303"  [label="DDG: verifier.VerifyInit(extension_misc::kSignatureAlgorithm,\n                           sizeof(extension_misc::kSignatureAlgorithm),\n                           &signature.front(),\n                           signature.size(),\n                           &key.front(),\n                           key.size())"];
"1000294" -> "1000293"  [label="AST: "];
"1000294" -> "1000296"  [label="CFG: "];
"1000295" -> "1000294"  [label="AST: "];
"1000296" -> "1000294"  [label="AST: "];
"1000298" -> "1000294"  [label="CFG: "];
"1000294" -> "1000303"  [label="DDG: &key.front()"];
"1000294" -> "1000293"  [label="DDG: &key.front()"];
"1000293" -> "1000292"  [label="AST: "];
"1000293" -> "1000298"  [label="CFG: "];
"1000298" -> "1000293"  [label="AST: "];
"1000300" -> "1000293"  [label="CFG: "];
"1000293" -> "1000303"  [label="DDG: key.size()"];
"1000293" -> "1000303"  [label="DDG: reinterpret_cast<char*>(&key.front())"];
"1000293" -> "1000292"  [label="DDG: reinterpret_cast<char*>(&key.front())"];
"1000293" -> "1000292"  [label="DDG: key.size()"];
"1000292" -> "1000101"  [label="AST: "];
"1000292" -> "1000299"  [label="CFG: "];
"1000299" -> "1000292"  [label="AST: "];
"1000302" -> "1000292"  [label="CFG: "];
"1000292" -> "1000303"  [label="DDG: base::Base64Encode(std::string(reinterpret_cast<char*>(&key.front()),\n      key.size()), &public_key_)"];
"1000292" -> "1000303"  [label="DDG: std::string(reinterpret_cast<char*>(&key.front()),\n      key.size())"];
"1000292" -> "1000303"  [label="DDG: &public_key_"];
}
