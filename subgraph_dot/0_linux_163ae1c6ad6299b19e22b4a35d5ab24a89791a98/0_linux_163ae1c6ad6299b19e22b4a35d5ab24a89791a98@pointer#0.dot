digraph "0_linux_163ae1c6ad6299b19e22b4a35d5ab24a89791a98@pointer" {
"1000122" [label="(Call,inode_has_encryption_context(inode))"];
"1000106" [label="(Call,inode_owner_or_capable(inode))"];
"1000101" [label="(MethodParameterIn,struct inode *inode)"];
"1000121" [label="(Call,!inode_has_encryption_context(inode))"];
"1000139" [label="(Call,inode->i_sb->s_cop->empty_dir(inode))"];
"1000138" [label="(Call,!inode->i_sb->s_cop->empty_dir(inode))"];
"1000145" [label="(Call,create_encryption_context_from_policy(inode, policy))"];
"1000144" [label="(Return,return create_encryption_context_from_policy(inode, policy);)"];
"1000149" [label="(Call,is_encryption_context_consistent_with_policy(inode, policy))"];
"1000121" [label="(Call,!inode_has_encryption_context(inode))"];
"1000138" [label="(Call,!inode->i_sb->s_cop->empty_dir(inode))"];
"1000153" [label="(Literal,0)"];
"1000157" [label="(MethodReturn,int)"];
"1000151" [label="(Identifier,policy)"];
"1000124" [label="(Block,)"];
"1000147" [label="(Identifier,policy)"];
"1000107" [label="(Identifier,inode)"];
"1000148" [label="(ControlStructure,if (is_encryption_context_consistent_with_policy(inode, policy)))"];
"1000145" [label="(Call,create_encryption_context_from_policy(inode, policy))"];
"1000106" [label="(Call,inode_owner_or_capable(inode))"];
"1000130" [label="(Identifier,inode)"];
"1000105" [label="(Call,!inode_owner_or_capable(inode))"];
"1000146" [label="(Identifier,inode)"];
"1000140" [label="(Identifier,inode)"];
"1000122" [label="(Call,inode_has_encryption_context(inode))"];
"1000101" [label="(MethodParameterIn,struct inode *inode)"];
"1000137" [label="(ControlStructure,if (!inode->i_sb->s_cop->empty_dir(inode)))"];
"1000150" [label="(Identifier,inode)"];
"1000156" [label="(Identifier,EINVAL)"];
"1000102" [label="(MethodParameterIn,const struct fscrypt_policy *policy)"];
"1000144" [label="(Return,return create_encryption_context_from_policy(inode, policy);)"];
"1000149" [label="(Call,is_encryption_context_consistent_with_policy(inode, policy))"];
"1000120" [label="(ControlStructure,if (!inode_has_encryption_context(inode)))"];
"1000139" [label="(Call,inode->i_sb->s_cop->empty_dir(inode))"];
"1000123" [label="(Identifier,inode)"];
"1000143" [label="(Identifier,ENOTEMPTY)"];
"1000122" -> "1000121"  [label="AST: "];
"1000122" -> "1000123"  [label="CFG: "];
"1000123" -> "1000122"  [label="AST: "];
"1000121" -> "1000122"  [label="CFG: "];
"1000122" -> "1000157"  [label="DDG: inode"];
"1000122" -> "1000121"  [label="DDG: inode"];
"1000106" -> "1000122"  [label="DDG: inode"];
"1000101" -> "1000122"  [label="DDG: inode"];
"1000122" -> "1000139"  [label="DDG: inode"];
"1000122" -> "1000149"  [label="DDG: inode"];
"1000106" -> "1000105"  [label="AST: "];
"1000106" -> "1000107"  [label="CFG: "];
"1000107" -> "1000106"  [label="AST: "];
"1000105" -> "1000106"  [label="CFG: "];
"1000106" -> "1000157"  [label="DDG: inode"];
"1000106" -> "1000105"  [label="DDG: inode"];
"1000101" -> "1000106"  [label="DDG: inode"];
"1000101" -> "1000100"  [label="AST: "];
"1000101" -> "1000157"  [label="DDG: inode"];
"1000101" -> "1000139"  [label="DDG: inode"];
"1000101" -> "1000145"  [label="DDG: inode"];
"1000101" -> "1000149"  [label="DDG: inode"];
"1000121" -> "1000120"  [label="AST: "];
"1000130" -> "1000121"  [label="CFG: "];
"1000150" -> "1000121"  [label="CFG: "];
"1000121" -> "1000157"  [label="DDG: !inode_has_encryption_context(inode)"];
"1000121" -> "1000157"  [label="DDG: inode_has_encryption_context(inode)"];
"1000139" -> "1000138"  [label="AST: "];
"1000139" -> "1000140"  [label="CFG: "];
"1000140" -> "1000139"  [label="AST: "];
"1000138" -> "1000139"  [label="CFG: "];
"1000139" -> "1000157"  [label="DDG: inode"];
"1000139" -> "1000138"  [label="DDG: inode"];
"1000139" -> "1000145"  [label="DDG: inode"];
"1000138" -> "1000137"  [label="AST: "];
"1000143" -> "1000138"  [label="CFG: "];
"1000146" -> "1000138"  [label="CFG: "];
"1000138" -> "1000157"  [label="DDG: inode->i_sb->s_cop->empty_dir(inode)"];
"1000138" -> "1000157"  [label="DDG: !inode->i_sb->s_cop->empty_dir(inode)"];
"1000145" -> "1000144"  [label="AST: "];
"1000145" -> "1000147"  [label="CFG: "];
"1000146" -> "1000145"  [label="AST: "];
"1000147" -> "1000145"  [label="AST: "];
"1000144" -> "1000145"  [label="CFG: "];
"1000145" -> "1000157"  [label="DDG: inode"];
"1000145" -> "1000157"  [label="DDG: policy"];
"1000145" -> "1000157"  [label="DDG: create_encryption_context_from_policy(inode, policy)"];
"1000145" -> "1000144"  [label="DDG: create_encryption_context_from_policy(inode, policy)"];
"1000102" -> "1000145"  [label="DDG: policy"];
"1000144" -> "1000124"  [label="AST: "];
"1000157" -> "1000144"  [label="CFG: "];
"1000144" -> "1000157"  [label="DDG: <RET>"];
"1000149" -> "1000148"  [label="AST: "];
"1000149" -> "1000151"  [label="CFG: "];
"1000150" -> "1000149"  [label="AST: "];
"1000151" -> "1000149"  [label="AST: "];
"1000153" -> "1000149"  [label="CFG: "];
"1000156" -> "1000149"  [label="CFG: "];
"1000149" -> "1000157"  [label="DDG: is_encryption_context_consistent_with_policy(inode, policy)"];
"1000149" -> "1000157"  [label="DDG: inode"];
"1000149" -> "1000157"  [label="DDG: policy"];
"1000102" -> "1000149"  [label="DDG: policy"];
}
