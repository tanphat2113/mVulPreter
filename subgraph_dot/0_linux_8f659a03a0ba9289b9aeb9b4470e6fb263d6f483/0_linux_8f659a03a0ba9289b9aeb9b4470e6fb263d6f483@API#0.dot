digraph "0_linux_8f659a03a0ba9289b9aeb9b4470e6fb263d6f483@API" {
"1000542" [label="(Call,err = raw_send_hdrinc(sk, &fl4, msg, len,\n \t\t\t\t      &rt, msg->msg_flags, &ipc.sockc))"];
"1000544" [label="(Call,raw_send_hdrinc(sk, &fl4, msg, len,\n \t\t\t\t      &rt, msg->msg_flags, &ipc.sockc))"];
"1000499" [label="(Call,ip_route_output_flow(net, &fl4, sk))"];
"1000118" [label="(Call,*net = sock_net(sk))"];
"1000120" [label="(Call,sock_net(sk))"];
"1000115" [label="(Call,inet_sk(sk))"];
"1000108" [label="(MethodParameterIn,struct sock *sk)"];
"1000494" [label="(Call,flowi4_to_flowi(&fl4))"];
"1000437" [label="(Call,flowi4_init_output(&fl4, ipc.oif, sk->sk_mark, tos,\n \t\t\t   RT_SCOPE_UNIVERSE,\n\t\t\t   hdrincl ? IPPROTO_RAW : sk->sk_protocol,\n \t\t\t   inet_sk_flowi_flags(sk) |\n\t\t\t    (hdrincl ? FLOWI_FLAG_KNOWN_NH : 0),\n \t\t\t   daddr, saddr, 0, 0, sk->sk_uid))"];
"1000426" [label="(Call,!ipc.oif)"];
"1000266" [label="(Call,ipc.oif = sk->sk_bound_dev_if)"];
"1000430" [label="(Call,ipc.oif = inet->uc_index)"];
"1000409" [label="(Call,ipc.oif = inet->mc_index)"];
"1000405" [label="(Call,!ipc.oif)"];
"1000397" [label="(Call,tos |= RTO_ONLINK)"];
"1000385" [label="(Call,tos = get_rtconn_flags(&ipc, sk))"];
"1000387" [label="(Call,get_rtconn_flags(&ipc, sk))"];
"1000280" [label="(Call,ip_cmsg_send(sk, msg, &ipc, false))"];
"1000109" [label="(MethodParameterIn,struct msghdr *msg)"];
"1000454" [label="(Call,inet_sk_flowi_flags(sk) |\n\t\t\t    (hdrincl ? FLOWI_FLAG_KNOWN_NH : 0))"];
"1000455" [label="(Call,inet_sk_flowi_flags(sk))"];
"1000401" [label="(Call,ipv4_is_multicast(daddr))"];
"1000376" [label="(Call,daddr = ipc.opt->opt.faddr)"];
"1000224" [label="(Call,daddr = inet->inet_daddr)"];
"1000204" [label="(Call,daddr = usin->sin_addr.s_addr)"];
"1000302" [label="(Call,saddr = ipc.addr)"];
"1000238" [label="(Call,ipc.addr = inet->inet_saddr)"];
"1000419" [label="(Call,saddr = inet->mc_addr)"];
"1000417" [label="(Call,!saddr)"];
"1000484" [label="(Call,raw_probe_proto_opt(&rfv, &fl4))"];
"1000492" [label="(Call,security_sk_classify_flow(sk, flowi4_to_flowi(&fl4)))"];
"1000528" [label="(Call,sock_flag(sk, SOCK_BROADCAST))"];
"1000673" [label="(Call,!(msg->msg_flags & MSG_PROBE) || len)"];
"1000674" [label="(Call,!(msg->msg_flags & MSG_PROBE))"];
"1000675" [label="(Call,msg->msg_flags & MSG_PROBE)"];
"1000658" [label="(Call,msg->msg_flags & MSG_PROBE)"];
"1000533" [label="(Call,msg->msg_flags & MSG_CONFIRM)"];
"1000392" [label="(Call,msg->msg_flags & MSG_DONTROUTE)"];
"1000158" [label="(Call,msg->msg_flags & MSG_OOB)"];
"1000144" [label="(Call,len > 0xFFFF)"];
"1000110" [label="(MethodParameterIn,size_t len)"];
"1000649" [label="(Call,err < 0)"];
"1000652" [label="(Return,return err;)"];
"1000561" [label="(Call,sock_tx_timestamp(sk, ipc.sockc.tsflags, &ipc.tx_flags))"];
"1000108" [label="(MethodParameterIn,struct sock *sk)"];
"1000494" [label="(Call,flowi4_to_flowi(&fl4))"];
"1000482" [label="(Call,err = raw_probe_proto_opt(&rfv, &fl4))"];
"1000109" [label="(MethodParameterIn,struct msghdr *msg)"];
"1000391" [label="(ControlStructure,if (msg->msg_flags & MSG_DONTROUTE))"];
"1000681" [label="(ControlStructure,goto back_from_confirm;)"];
"1000401" [label="(Call,ipv4_is_multicast(daddr))"];
"1000672" [label="(ControlStructure,if (!(msg->msg_flags & MSG_PROBE) || len))"];
"1000464" [label="(Literal,0)"];
"1000533" [label="(Call,msg->msg_flags & MSG_CONFIRM)"];
"1000120" [label="(Call,sock_net(sk))"];
"1000402" [label="(Identifier,daddr)"];
"1000371" [label="(Block,)"];
"1000680" [label="(Identifier,len)"];
"1000686" [label="(MethodReturn,static int)"];
"1000500" [label="(Identifier,net)"];
"1000528" [label="(Call,sock_flag(sk, SOCK_BROADCAST))"];
"1000304" [label="(Call,ipc.addr)"];
"1000376" [label="(Call,daddr = ipc.opt->opt.faddr)"];
"1000555" [label="(Call,&ipc.sockc)"];
"1000487" [label="(Call,&fl4)"];
"1000495" [label="(Call,&fl4)"];
"1000675" [label="(Call,msg->msg_flags & MSG_PROBE)"];
"1000485" [label="(Call,&rfv)"];
"1000492" [label="(Call,security_sk_classify_flow(sk, flowi4_to_flowi(&fl4)))"];
"1000470" [label="(Identifier,hdrincl)"];
"1000377" [label="(Identifier,daddr)"];
"1000532" [label="(ControlStructure,if (msg->msg_flags & MSG_CONFIRM))"];
"1000158" [label="(Call,msg->msg_flags & MSG_OOB)"];
"1000586" [label="(Call,err = ip_append_data(sk, &fl4, raw_getfrag,\n\t\t\t\t     &rfv, len, 0,\n\t\t\t\t     &ipc, &rt, msg->msg_flags))"];
"1000139" [label="(Call,err = -EMSGSIZE)"];
"1000162" [label="(Identifier,MSG_OOB)"];
"1000658" [label="(Call,msg->msg_flags & MSG_PROBE)"];
"1000309" [label="(Identifier,ipc)"];
"1000153" [label="(Call,err = -EOPNOTSUPP)"];
"1000285" [label="(Identifier,false)"];
"1000116" [label="(Identifier,sk)"];
"1000226" [label="(Call,inet->inet_daddr)"];
"1000542" [label="(Call,err = raw_send_hdrinc(sk, &fl4, msg, len,\n \t\t\t\t      &rt, msg->msg_flags, &ipc.sockc))"];
"1000307" [label="(Call,ipc.addr = daddr)"];
"1000206" [label="(Call,usin->sin_addr.s_addr)"];
"1000418" [label="(Identifier,saddr)"];
"1000625" [label="(Call,err == -ENOBUFS)"];
"1000437" [label="(Call,flowi4_init_output(&fl4, ipc.oif, sk->sk_mark, tos,\n \t\t\t   RT_SCOPE_UNIVERSE,\n\t\t\t   hdrincl ? IPPROTO_RAW : sk->sk_protocol,\n \t\t\t   inet_sk_flowi_flags(sk) |\n\t\t\t    (hdrincl ? FLOWI_FLAG_KNOWN_NH : 0),\n \t\t\t   daddr, saddr, 0, 0, sk->sk_uid))"];
"1000683" [label="(Identifier,err)"];
"1000530" [label="(Identifier,SOCK_BROADCAST)"];
"1000650" [label="(Identifier,err)"];
"1000125" [label="(Identifier,rt)"];
"1000666" [label="(Identifier,rt)"];
"1000455" [label="(Call,inet_sk_flowi_flags(sk))"];
"1000454" [label="(Call,inet_sk_flowi_flags(sk) |\n\t\t\t    (hdrincl ? FLOWI_FLAG_KNOWN_NH : 0))"];
"1000204" [label="(Call,daddr = usin->sin_addr.s_addr)"];
"1000302" [label="(Call,saddr = ipc.addr)"];
"1000405" [label="(Call,!ipc.oif)"];
"1000461" [label="(Identifier,daddr)"];
"1000421" [label="(Call,inet->mc_addr)"];
"1000232" [label="(Identifier,ipc)"];
"1000498" [label="(Identifier,rt)"];
"1000356" [label="(Call,err = -EINVAL)"];
"1000144" [label="(Call,len > 0xFFFF)"];
"1000266" [label="(Call,ipc.oif = sk->sk_bound_dev_if)"];
"1000275" [label="(Identifier,msg)"];
"1000212" [label="(Block,)"];
"1000205" [label="(Identifier,daddr)"];
"1000413" [label="(Call,inet->mc_index)"];
"1000118" [label="(Call,*net = sock_net(sk))"];
"1000677" [label="(Identifier,msg)"];
"1000432" [label="(Identifier,ipc)"];
"1000428" [label="(Identifier,ipc)"];
"1000147" [label="(ControlStructure,goto out;)"];
"1000434" [label="(Call,inet->uc_index)"];
"1000159" [label="(Call,msg->msg_flags)"];
"1000636" [label="(Call,release_sock(sk))"];
"1000550" [label="(Call,&rt)"];
"1000546" [label="(Call,&fl4)"];
"1000493" [label="(Identifier,sk)"];
"1000238" [label="(Call,ipc.addr = inet->inet_saddr)"];
"1000224" [label="(Call,daddr = inet->inet_daddr)"];
"1000499" [label="(Call,ip_route_output_flow(net, &fl4, sk))"];
"1000633" [label="(Call,err = 0)"];
"1000280" [label="(Call,ip_cmsg_send(sk, msg, &ipc, false))"];
"1000674" [label="(Call,!(msg->msg_flags & MSG_PROBE))"];
"1000682" [label="(Call,err = 0)"];
"1000393" [label="(Call,msg->msg_flags)"];
"1000169" [label="(Call,err = -EINVAL)"];
"1000143" [label="(ControlStructure,if (len > 0xFFFF))"];
"1000430" [label="(Call,ipc.oif = inet->uc_index)"];
"1000386" [label="(Identifier,tos)"];
"1000373" [label="(Call,!daddr)"];
"1000448" [label="(Call,hdrincl ? IPPROTO_RAW : sk->sk_protocol)"];
"1000438" [label="(Call,&fl4)"];
"1000446" [label="(Identifier,tos)"];
"1000659" [label="(Call,msg->msg_flags)"];
"1000417" [label="(Call,!saddr)"];
"1000497" [label="(Call,rt = ip_route_output_flow(net, &fl4, sk))"];
"1000385" [label="(Call,tos = get_rtconn_flags(&ipc, sk))"];
"1000529" [label="(Identifier,sk)"];
"1000463" [label="(Literal,0)"];
"1000439" [label="(Identifier,fl4)"];
"1000443" [label="(Call,sk->sk_mark)"];
"1000392" [label="(Call,msg->msg_flags & MSG_DONTROUTE)"];
"1000110" [label="(MethodParameterIn,size_t len)"];
"1000115" [label="(Call,inet_sk(sk))"];
"1000425" [label="(ControlStructure,if (!ipc.oif))"];
"1000537" [label="(Identifier,MSG_CONFIRM)"];
"1000166" [label="(Identifier,msg)"];
"1000270" [label="(Call,sk->sk_bound_dev_if)"];
"1000426" [label="(Call,!ipc.oif)"];
"1000588" [label="(Call,ip_append_data(sk, &fl4, raw_getfrag,\n\t\t\t\t     &rfv, len, 0,\n\t\t\t\t     &ipc, &rt, msg->msg_flags))"];
"1000113" [label="(Call,*inet = inet_sk(sk))"];
"1000396" [label="(Identifier,MSG_DONTROUTE)"];
"1000431" [label="(Call,ipc.oif)"];
"1000407" [label="(Identifier,ipc)"];
"1000387" [label="(Call,get_rtconn_flags(&ipc, sk))"];
"1000516" [label="(Call,err = -EACCES)"];
"1000411" [label="(Identifier,ipc)"];
"1000548" [label="(Identifier,msg)"];
"1000419" [label="(Call,saddr = inet->mc_addr)"];
"1000457" [label="(Call,hdrincl ? FLOWI_FLAG_KNOWN_NH : 0)"];
"1000406" [label="(Call,ipc.oif)"];
"1000400" [label="(ControlStructure,if (ipv4_is_multicast(daddr)))"];
"1000239" [label="(Call,ipc.addr)"];
"1000195" [label="(Call,err = -EAFNOSUPPORT)"];
"1000673" [label="(Call,!(msg->msg_flags & MSG_PROBE) || len)"];
"1000501" [label="(Call,&fl4)"];
"1000584" [label="(Call,lock_sock(sk))"];
"1000462" [label="(Identifier,saddr)"];
"1000397" [label="(Call,tos |= RTO_ONLINK)"];
"1000549" [label="(Identifier,len)"];
"1000146" [label="(Literal,0xFFFF)"];
"1000399" [label="(Identifier,RTO_ONLINK)"];
"1000619" [label="(Call,ip_push_pending_frames(sk, &fl4))"];
"1000420" [label="(Identifier,saddr)"];
"1000503" [label="(Identifier,sk)"];
"1000456" [label="(Identifier,sk)"];
"1000648" [label="(ControlStructure,if (err < 0))"];
"1000111" [label="(Block,)"];
"1000283" [label="(Call,&ipc)"];
"1000247" [label="(Identifier,ipc)"];
"1000638" [label="(JumpTarget,done:)"];
"1000394" [label="(Identifier,msg)"];
"1000539" [label="(JumpTarget,back_from_confirm:)"];
"1000652" [label="(Return,return err;)"];
"1000410" [label="(Call,ipc.oif)"];
"1000267" [label="(Call,ipc.oif)"];
"1000145" [label="(Identifier,len)"];
"1000655" [label="(Identifier,len)"];
"1000465" [label="(Call,sk->sk_uid)"];
"1000163" [label="(ControlStructure,goto out;)"];
"1000654" [label="(Return,return len;)"];
"1000303" [label="(Identifier,saddr)"];
"1000278" [label="(Call,err = ip_cmsg_send(sk, msg, &ipc, false))"];
"1000242" [label="(Call,inet->inet_saddr)"];
"1000157" [label="(ControlStructure,if (msg->msg_flags & MSG_OOB))"];
"1000545" [label="(Identifier,sk)"];
"1000447" [label="(Identifier,RT_SCOPE_UNIVERSE)"];
"1000225" [label="(Identifier,daddr)"];
"1000649" [label="(Call,err < 0)"];
"1000119" [label="(Identifier,net)"];
"1000657" [label="(ControlStructure,if (msg->msg_flags & MSG_PROBE))"];
"1000213" [label="(Call,err = -EDESTADDRREQ)"];
"1000440" [label="(Call,ipc.oif)"];
"1000534" [label="(Call,msg->msg_flags)"];
"1000651" [label="(Literal,0)"];
"1000527" [label="(Call,!sock_flag(sk, SOCK_BROADCAST))"];
"1000662" [label="(Identifier,MSG_PROBE)"];
"1000427" [label="(Call,ipc.oif)"];
"1000398" [label="(Identifier,tos)"];
"1000552" [label="(Call,msg->msg_flags)"];
"1000388" [label="(Call,&ipc)"];
"1000168" [label="(Block,)"];
"1000281" [label="(Identifier,sk)"];
"1000390" [label="(Identifier,sk)"];
"1000679" [label="(Identifier,MSG_PROBE)"];
"1000540" [label="(ControlStructure,if (hdrincl))"];
"1000282" [label="(Identifier,msg)"];
"1000149" [label="(Identifier,hdrincl)"];
"1000287" [label="(Call,unlikely(err))"];
"1000544" [label="(Call,raw_send_hdrinc(sk, &fl4, msg, len,\n \t\t\t\t      &rt, msg->msg_flags, &ipc.sockc))"];
"1000606" [label="(Call,ip_flush_pending_frames(sk))"];
"1000676" [label="(Call,msg->msg_flags)"];
"1000378" [label="(Call,ipc.opt->opt.faddr)"];
"1000472" [label="(Call,rfv.msg = msg)"];
"1000458" [label="(Identifier,hdrincl)"];
"1000538" [label="(ControlStructure,goto do_confirm;)"];
"1000543" [label="(Identifier,err)"];
"1000404" [label="(ControlStructure,if (!ipc.oif))"];
"1000508" [label="(Call,err = PTR_ERR(rt))"];
"1000484" [label="(Call,raw_probe_proto_opt(&rfv, &fl4))"];
"1000416" [label="(ControlStructure,if (!saddr))"];
"1000653" [label="(Identifier,err)"];
"1000409" [label="(Call,ipc.oif = inet->mc_index)"];
"1000121" [label="(Identifier,sk)"];
"1000542" -> "1000540"  [label="AST: "];
"1000542" -> "1000544"  [label="CFG: "];
"1000543" -> "1000542"  [label="AST: "];
"1000544" -> "1000542"  [label="AST: "];
"1000638" -> "1000542"  [label="CFG: "];
"1000542" -> "1000686"  [label="DDG: raw_send_hdrinc(sk, &fl4, msg, len,\n \t\t\t\t      &rt, msg->msg_flags, &ipc.sockc)"];
"1000544" -> "1000542"  [label="DDG: msg->msg_flags"];
"1000544" -> "1000542"  [label="DDG: &fl4"];
"1000544" -> "1000542"  [label="DDG: &ipc.sockc"];
"1000544" -> "1000542"  [label="DDG: msg"];
"1000544" -> "1000542"  [label="DDG: len"];
"1000544" -> "1000542"  [label="DDG: sk"];
"1000544" -> "1000542"  [label="DDG: &rt"];
"1000542" -> "1000649"  [label="DDG: err"];
"1000544" -> "1000555"  [label="CFG: "];
"1000545" -> "1000544"  [label="AST: "];
"1000546" -> "1000544"  [label="AST: "];
"1000548" -> "1000544"  [label="AST: "];
"1000549" -> "1000544"  [label="AST: "];
"1000550" -> "1000544"  [label="AST: "];
"1000552" -> "1000544"  [label="AST: "];
"1000555" -> "1000544"  [label="AST: "];
"1000544" -> "1000686"  [label="DDG: &rt"];
"1000544" -> "1000686"  [label="DDG: msg"];
"1000544" -> "1000686"  [label="DDG: &fl4"];
"1000544" -> "1000686"  [label="DDG: &ipc.sockc"];
"1000544" -> "1000686"  [label="DDG: sk"];
"1000544" -> "1000686"  [label="DDG: len"];
"1000544" -> "1000686"  [label="DDG: msg->msg_flags"];
"1000499" -> "1000544"  [label="DDG: sk"];
"1000499" -> "1000544"  [label="DDG: &fl4"];
"1000528" -> "1000544"  [label="DDG: sk"];
"1000108" -> "1000544"  [label="DDG: sk"];
"1000280" -> "1000544"  [label="DDG: msg"];
"1000109" -> "1000544"  [label="DDG: msg"];
"1000673" -> "1000544"  [label="DDG: len"];
"1000144" -> "1000544"  [label="DDG: len"];
"1000110" -> "1000544"  [label="DDG: len"];
"1000675" -> "1000544"  [label="DDG: msg->msg_flags"];
"1000533" -> "1000544"  [label="DDG: msg->msg_flags"];
"1000544" -> "1000654"  [label="DDG: len"];
"1000499" -> "1000497"  [label="AST: "];
"1000499" -> "1000503"  [label="CFG: "];
"1000500" -> "1000499"  [label="AST: "];
"1000501" -> "1000499"  [label="AST: "];
"1000503" -> "1000499"  [label="AST: "];
"1000497" -> "1000499"  [label="CFG: "];
"1000499" -> "1000686"  [label="DDG: sk"];
"1000499" -> "1000686"  [label="DDG: net"];
"1000499" -> "1000686"  [label="DDG: &fl4"];
"1000499" -> "1000497"  [label="DDG: net"];
"1000499" -> "1000497"  [label="DDG: &fl4"];
"1000499" -> "1000497"  [label="DDG: sk"];
"1000118" -> "1000499"  [label="DDG: net"];
"1000494" -> "1000499"  [label="DDG: &fl4"];
"1000492" -> "1000499"  [label="DDG: sk"];
"1000108" -> "1000499"  [label="DDG: sk"];
"1000499" -> "1000528"  [label="DDG: sk"];
"1000499" -> "1000561"  [label="DDG: sk"];
"1000499" -> "1000588"  [label="DDG: &fl4"];
"1000118" -> "1000111"  [label="AST: "];
"1000118" -> "1000120"  [label="CFG: "];
"1000119" -> "1000118"  [label="AST: "];
"1000120" -> "1000118"  [label="AST: "];
"1000125" -> "1000118"  [label="CFG: "];
"1000118" -> "1000686"  [label="DDG: sock_net(sk)"];
"1000118" -> "1000686"  [label="DDG: net"];
"1000120" -> "1000118"  [label="DDG: sk"];
"1000120" -> "1000121"  [label="CFG: "];
"1000121" -> "1000120"  [label="AST: "];
"1000120" -> "1000686"  [label="DDG: sk"];
"1000115" -> "1000120"  [label="DDG: sk"];
"1000108" -> "1000120"  [label="DDG: sk"];
"1000120" -> "1000280"  [label="DDG: sk"];
"1000120" -> "1000387"  [label="DDG: sk"];
"1000115" -> "1000113"  [label="AST: "];
"1000115" -> "1000116"  [label="CFG: "];
"1000116" -> "1000115"  [label="AST: "];
"1000113" -> "1000115"  [label="CFG: "];
"1000115" -> "1000113"  [label="DDG: sk"];
"1000108" -> "1000115"  [label="DDG: sk"];
"1000108" -> "1000107"  [label="AST: "];
"1000108" -> "1000686"  [label="DDG: sk"];
"1000108" -> "1000280"  [label="DDG: sk"];
"1000108" -> "1000387"  [label="DDG: sk"];
"1000108" -> "1000455"  [label="DDG: sk"];
"1000108" -> "1000492"  [label="DDG: sk"];
"1000108" -> "1000528"  [label="DDG: sk"];
"1000108" -> "1000561"  [label="DDG: sk"];
"1000108" -> "1000584"  [label="DDG: sk"];
"1000108" -> "1000588"  [label="DDG: sk"];
"1000108" -> "1000606"  [label="DDG: sk"];
"1000108" -> "1000619"  [label="DDG: sk"];
"1000108" -> "1000636"  [label="DDG: sk"];
"1000494" -> "1000492"  [label="AST: "];
"1000494" -> "1000495"  [label="CFG: "];
"1000495" -> "1000494"  [label="AST: "];
"1000492" -> "1000494"  [label="CFG: "];
"1000494" -> "1000492"  [label="DDG: &fl4"];
"1000437" -> "1000494"  [label="DDG: &fl4"];
"1000484" -> "1000494"  [label="DDG: &fl4"];
"1000437" -> "1000111"  [label="AST: "];
"1000437" -> "1000465"  [label="CFG: "];
"1000438" -> "1000437"  [label="AST: "];
"1000440" -> "1000437"  [label="AST: "];
"1000443" -> "1000437"  [label="AST: "];
"1000446" -> "1000437"  [label="AST: "];
"1000447" -> "1000437"  [label="AST: "];
"1000448" -> "1000437"  [label="AST: "];
"1000454" -> "1000437"  [label="AST: "];
"1000461" -> "1000437"  [label="AST: "];
"1000462" -> "1000437"  [label="AST: "];
"1000463" -> "1000437"  [label="AST: "];
"1000464" -> "1000437"  [label="AST: "];
"1000465" -> "1000437"  [label="AST: "];
"1000470" -> "1000437"  [label="CFG: "];
"1000437" -> "1000686"  [label="DDG: daddr"];
"1000437" -> "1000686"  [label="DDG: flowi4_init_output(&fl4, ipc.oif, sk->sk_mark, tos,\n \t\t\t   RT_SCOPE_UNIVERSE,\n\t\t\t   hdrincl ? IPPROTO_RAW : sk->sk_protocol,\n \t\t\t   inet_sk_flowi_flags(sk) |\n\t\t\t    (hdrincl ? FLOWI_FLAG_KNOWN_NH : 0),\n \t\t\t   daddr, saddr, 0, 0, sk->sk_uid)"];
"1000437" -> "1000686"  [label="DDG: sk->sk_mark"];
"1000437" -> "1000686"  [label="DDG: sk->sk_uid"];
"1000437" -> "1000686"  [label="DDG: ipc.oif"];
"1000437" -> "1000686"  [label="DDG: tos"];
"1000437" -> "1000686"  [label="DDG: RT_SCOPE_UNIVERSE"];
"1000437" -> "1000686"  [label="DDG: saddr"];
"1000437" -> "1000686"  [label="DDG: hdrincl ? IPPROTO_RAW : sk->sk_protocol"];
"1000437" -> "1000686"  [label="DDG: inet_sk_flowi_flags(sk) |\n\t\t\t    (hdrincl ? FLOWI_FLAG_KNOWN_NH : 0)"];
"1000426" -> "1000437"  [label="DDG: ipc.oif"];
"1000430" -> "1000437"  [label="DDG: ipc.oif"];
"1000409" -> "1000437"  [label="DDG: ipc.oif"];
"1000405" -> "1000437"  [label="DDG: ipc.oif"];
"1000397" -> "1000437"  [label="DDG: tos"];
"1000385" -> "1000437"  [label="DDG: tos"];
"1000454" -> "1000437"  [label="DDG: inet_sk_flowi_flags(sk)"];
"1000454" -> "1000437"  [label="DDG: hdrincl ? FLOWI_FLAG_KNOWN_NH : 0"];
"1000401" -> "1000437"  [label="DDG: daddr"];
"1000302" -> "1000437"  [label="DDG: saddr"];
"1000419" -> "1000437"  [label="DDG: saddr"];
"1000417" -> "1000437"  [label="DDG: saddr"];
"1000437" -> "1000484"  [label="DDG: &fl4"];
"1000426" -> "1000425"  [label="AST: "];
"1000426" -> "1000427"  [label="CFG: "];
"1000427" -> "1000426"  [label="AST: "];
"1000432" -> "1000426"  [label="CFG: "];
"1000439" -> "1000426"  [label="CFG: "];
"1000426" -> "1000686"  [label="DDG: !ipc.oif"];
"1000266" -> "1000426"  [label="DDG: ipc.oif"];
"1000266" -> "1000111"  [label="AST: "];
"1000266" -> "1000270"  [label="CFG: "];
"1000267" -> "1000266"  [label="AST: "];
"1000270" -> "1000266"  [label="AST: "];
"1000275" -> "1000266"  [label="CFG: "];
"1000266" -> "1000686"  [label="DDG: ipc.oif"];
"1000266" -> "1000686"  [label="DDG: sk->sk_bound_dev_if"];
"1000266" -> "1000405"  [label="DDG: ipc.oif"];
"1000430" -> "1000425"  [label="AST: "];
"1000430" -> "1000434"  [label="CFG: "];
"1000431" -> "1000430"  [label="AST: "];
"1000434" -> "1000430"  [label="AST: "];
"1000439" -> "1000430"  [label="CFG: "];
"1000430" -> "1000686"  [label="DDG: inet->uc_index"];
"1000409" -> "1000404"  [label="AST: "];
"1000409" -> "1000413"  [label="CFG: "];
"1000410" -> "1000409"  [label="AST: "];
"1000413" -> "1000409"  [label="AST: "];
"1000418" -> "1000409"  [label="CFG: "];
"1000409" -> "1000686"  [label="DDG: inet->mc_index"];
"1000405" -> "1000404"  [label="AST: "];
"1000405" -> "1000406"  [label="CFG: "];
"1000406" -> "1000405"  [label="AST: "];
"1000411" -> "1000405"  [label="CFG: "];
"1000418" -> "1000405"  [label="CFG: "];
"1000405" -> "1000686"  [label="DDG: !ipc.oif"];
"1000397" -> "1000391"  [label="AST: "];
"1000397" -> "1000399"  [label="CFG: "];
"1000398" -> "1000397"  [label="AST: "];
"1000399" -> "1000397"  [label="AST: "];
"1000402" -> "1000397"  [label="CFG: "];
"1000397" -> "1000686"  [label="DDG: tos |= RTO_ONLINK"];
"1000397" -> "1000686"  [label="DDG: RTO_ONLINK"];
"1000385" -> "1000397"  [label="DDG: tos"];
"1000385" -> "1000111"  [label="AST: "];
"1000385" -> "1000387"  [label="CFG: "];
"1000386" -> "1000385"  [label="AST: "];
"1000387" -> "1000385"  [label="AST: "];
"1000394" -> "1000385"  [label="CFG: "];
"1000385" -> "1000686"  [label="DDG: get_rtconn_flags(&ipc, sk)"];
"1000387" -> "1000385"  [label="DDG: &ipc"];
"1000387" -> "1000385"  [label="DDG: sk"];
"1000387" -> "1000390"  [label="CFG: "];
"1000388" -> "1000387"  [label="AST: "];
"1000390" -> "1000387"  [label="AST: "];
"1000387" -> "1000686"  [label="DDG: &ipc"];
"1000280" -> "1000387"  [label="DDG: &ipc"];
"1000280" -> "1000387"  [label="DDG: sk"];
"1000387" -> "1000455"  [label="DDG: sk"];
"1000387" -> "1000588"  [label="DDG: &ipc"];
"1000280" -> "1000278"  [label="AST: "];
"1000280" -> "1000285"  [label="CFG: "];
"1000281" -> "1000280"  [label="AST: "];
"1000282" -> "1000280"  [label="AST: "];
"1000283" -> "1000280"  [label="AST: "];
"1000285" -> "1000280"  [label="AST: "];
"1000278" -> "1000280"  [label="CFG: "];
"1000280" -> "1000686"  [label="DDG: false"];
"1000280" -> "1000686"  [label="DDG: msg"];
"1000280" -> "1000686"  [label="DDG: sk"];
"1000280" -> "1000686"  [label="DDG: &ipc"];
"1000280" -> "1000278"  [label="DDG: sk"];
"1000280" -> "1000278"  [label="DDG: msg"];
"1000280" -> "1000278"  [label="DDG: &ipc"];
"1000280" -> "1000278"  [label="DDG: false"];
"1000109" -> "1000280"  [label="DDG: msg"];
"1000280" -> "1000472"  [label="DDG: msg"];
"1000109" -> "1000107"  [label="AST: "];
"1000109" -> "1000686"  [label="DDG: msg"];
"1000109" -> "1000472"  [label="DDG: msg"];
"1000454" -> "1000457"  [label="CFG: "];
"1000455" -> "1000454"  [label="AST: "];
"1000457" -> "1000454"  [label="AST: "];
"1000461" -> "1000454"  [label="CFG: "];
"1000454" -> "1000686"  [label="DDG: inet_sk_flowi_flags(sk)"];
"1000454" -> "1000686"  [label="DDG: hdrincl ? FLOWI_FLAG_KNOWN_NH : 0"];
"1000455" -> "1000454"  [label="DDG: sk"];
"1000455" -> "1000456"  [label="CFG: "];
"1000456" -> "1000455"  [label="AST: "];
"1000458" -> "1000455"  [label="CFG: "];
"1000455" -> "1000686"  [label="DDG: sk"];
"1000455" -> "1000492"  [label="DDG: sk"];
"1000401" -> "1000400"  [label="AST: "];
"1000401" -> "1000402"  [label="CFG: "];
"1000402" -> "1000401"  [label="AST: "];
"1000407" -> "1000401"  [label="CFG: "];
"1000428" -> "1000401"  [label="CFG: "];
"1000401" -> "1000686"  [label="DDG: ipv4_is_multicast(daddr)"];
"1000376" -> "1000401"  [label="DDG: daddr"];
"1000224" -> "1000401"  [label="DDG: daddr"];
"1000204" -> "1000401"  [label="DDG: daddr"];
"1000376" -> "1000371"  [label="AST: "];
"1000376" -> "1000378"  [label="CFG: "];
"1000377" -> "1000376"  [label="AST: "];
"1000378" -> "1000376"  [label="AST: "];
"1000386" -> "1000376"  [label="CFG: "];
"1000376" -> "1000686"  [label="DDG: ipc.opt->opt.faddr"];
"1000224" -> "1000212"  [label="AST: "];
"1000224" -> "1000226"  [label="CFG: "];
"1000225" -> "1000224"  [label="AST: "];
"1000226" -> "1000224"  [label="AST: "];
"1000232" -> "1000224"  [label="CFG: "];
"1000224" -> "1000686"  [label="DDG: daddr"];
"1000224" -> "1000686"  [label="DDG: inet->inet_daddr"];
"1000224" -> "1000307"  [label="DDG: daddr"];
"1000224" -> "1000373"  [label="DDG: daddr"];
"1000204" -> "1000168"  [label="AST: "];
"1000204" -> "1000206"  [label="CFG: "];
"1000205" -> "1000204"  [label="AST: "];
"1000206" -> "1000204"  [label="AST: "];
"1000232" -> "1000204"  [label="CFG: "];
"1000204" -> "1000686"  [label="DDG: usin->sin_addr.s_addr"];
"1000204" -> "1000686"  [label="DDG: daddr"];
"1000204" -> "1000307"  [label="DDG: daddr"];
"1000204" -> "1000373"  [label="DDG: daddr"];
"1000302" -> "1000111"  [label="AST: "];
"1000302" -> "1000304"  [label="CFG: "];
"1000303" -> "1000302"  [label="AST: "];
"1000304" -> "1000302"  [label="AST: "];
"1000309" -> "1000302"  [label="CFG: "];
"1000302" -> "1000686"  [label="DDG: saddr"];
"1000238" -> "1000302"  [label="DDG: ipc.addr"];
"1000302" -> "1000417"  [label="DDG: saddr"];
"1000238" -> "1000111"  [label="AST: "];
"1000238" -> "1000242"  [label="CFG: "];
"1000239" -> "1000238"  [label="AST: "];
"1000242" -> "1000238"  [label="AST: "];
"1000247" -> "1000238"  [label="CFG: "];
"1000238" -> "1000686"  [label="DDG: ipc.addr"];
"1000238" -> "1000686"  [label="DDG: inet->inet_saddr"];
"1000419" -> "1000416"  [label="AST: "];
"1000419" -> "1000421"  [label="CFG: "];
"1000420" -> "1000419"  [label="AST: "];
"1000421" -> "1000419"  [label="AST: "];
"1000439" -> "1000419"  [label="CFG: "];
"1000419" -> "1000686"  [label="DDG: inet->mc_addr"];
"1000417" -> "1000416"  [label="AST: "];
"1000417" -> "1000418"  [label="CFG: "];
"1000418" -> "1000417"  [label="AST: "];
"1000420" -> "1000417"  [label="CFG: "];
"1000439" -> "1000417"  [label="CFG: "];
"1000417" -> "1000686"  [label="DDG: !saddr"];
"1000484" -> "1000482"  [label="AST: "];
"1000484" -> "1000487"  [label="CFG: "];
"1000485" -> "1000484"  [label="AST: "];
"1000487" -> "1000484"  [label="AST: "];
"1000482" -> "1000484"  [label="CFG: "];
"1000484" -> "1000686"  [label="DDG: &fl4"];
"1000484" -> "1000686"  [label="DDG: &rfv"];
"1000484" -> "1000482"  [label="DDG: &rfv"];
"1000484" -> "1000482"  [label="DDG: &fl4"];
"1000484" -> "1000588"  [label="DDG: &rfv"];
"1000492" -> "1000111"  [label="AST: "];
"1000493" -> "1000492"  [label="AST: "];
"1000498" -> "1000492"  [label="CFG: "];
"1000492" -> "1000686"  [label="DDG: flowi4_to_flowi(&fl4)"];
"1000492" -> "1000686"  [label="DDG: security_sk_classify_flow(sk, flowi4_to_flowi(&fl4))"];
"1000528" -> "1000527"  [label="AST: "];
"1000528" -> "1000530"  [label="CFG: "];
"1000529" -> "1000528"  [label="AST: "];
"1000530" -> "1000528"  [label="AST: "];
"1000527" -> "1000528"  [label="CFG: "];
"1000528" -> "1000686"  [label="DDG: SOCK_BROADCAST"];
"1000528" -> "1000686"  [label="DDG: sk"];
"1000528" -> "1000527"  [label="DDG: sk"];
"1000528" -> "1000527"  [label="DDG: SOCK_BROADCAST"];
"1000528" -> "1000561"  [label="DDG: sk"];
"1000673" -> "1000672"  [label="AST: "];
"1000673" -> "1000674"  [label="CFG: "];
"1000673" -> "1000680"  [label="CFG: "];
"1000674" -> "1000673"  [label="AST: "];
"1000680" -> "1000673"  [label="AST: "];
"1000681" -> "1000673"  [label="CFG: "];
"1000683" -> "1000673"  [label="CFG: "];
"1000673" -> "1000686"  [label="DDG: len"];
"1000673" -> "1000686"  [label="DDG: !(msg->msg_flags & MSG_PROBE)"];
"1000673" -> "1000686"  [label="DDG: !(msg->msg_flags & MSG_PROBE) || len"];
"1000673" -> "1000588"  [label="DDG: len"];
"1000673" -> "1000654"  [label="DDG: len"];
"1000674" -> "1000673"  [label="DDG: msg->msg_flags & MSG_PROBE"];
"1000144" -> "1000673"  [label="DDG: len"];
"1000110" -> "1000673"  [label="DDG: len"];
"1000674" -> "1000675"  [label="CFG: "];
"1000675" -> "1000674"  [label="AST: "];
"1000680" -> "1000674"  [label="CFG: "];
"1000674" -> "1000686"  [label="DDG: msg->msg_flags & MSG_PROBE"];
"1000675" -> "1000674"  [label="DDG: msg->msg_flags"];
"1000675" -> "1000674"  [label="DDG: MSG_PROBE"];
"1000675" -> "1000679"  [label="CFG: "];
"1000676" -> "1000675"  [label="AST: "];
"1000679" -> "1000675"  [label="AST: "];
"1000675" -> "1000686"  [label="DDG: msg->msg_flags"];
"1000675" -> "1000686"  [label="DDG: MSG_PROBE"];
"1000675" -> "1000588"  [label="DDG: msg->msg_flags"];
"1000658" -> "1000675"  [label="DDG: msg->msg_flags"];
"1000658" -> "1000675"  [label="DDG: MSG_PROBE"];
"1000658" -> "1000657"  [label="AST: "];
"1000658" -> "1000662"  [label="CFG: "];
"1000659" -> "1000658"  [label="AST: "];
"1000662" -> "1000658"  [label="AST: "];
"1000666" -> "1000658"  [label="CFG: "];
"1000677" -> "1000658"  [label="CFG: "];
"1000533" -> "1000658"  [label="DDG: msg->msg_flags"];
"1000533" -> "1000532"  [label="AST: "];
"1000533" -> "1000537"  [label="CFG: "];
"1000534" -> "1000533"  [label="AST: "];
"1000537" -> "1000533"  [label="AST: "];
"1000538" -> "1000533"  [label="CFG: "];
"1000539" -> "1000533"  [label="CFG: "];
"1000533" -> "1000686"  [label="DDG: msg->msg_flags & MSG_CONFIRM"];
"1000533" -> "1000686"  [label="DDG: MSG_CONFIRM"];
"1000392" -> "1000533"  [label="DDG: msg->msg_flags"];
"1000533" -> "1000588"  [label="DDG: msg->msg_flags"];
"1000392" -> "1000391"  [label="AST: "];
"1000392" -> "1000396"  [label="CFG: "];
"1000393" -> "1000392"  [label="AST: "];
"1000396" -> "1000392"  [label="AST: "];
"1000398" -> "1000392"  [label="CFG: "];
"1000402" -> "1000392"  [label="CFG: "];
"1000392" -> "1000686"  [label="DDG: MSG_DONTROUTE"];
"1000392" -> "1000686"  [label="DDG: msg->msg_flags & MSG_DONTROUTE"];
"1000392" -> "1000686"  [label="DDG: msg->msg_flags"];
"1000158" -> "1000392"  [label="DDG: msg->msg_flags"];
"1000158" -> "1000157"  [label="AST: "];
"1000158" -> "1000162"  [label="CFG: "];
"1000159" -> "1000158"  [label="AST: "];
"1000162" -> "1000158"  [label="AST: "];
"1000163" -> "1000158"  [label="CFG: "];
"1000166" -> "1000158"  [label="CFG: "];
"1000158" -> "1000686"  [label="DDG: msg->msg_flags"];
"1000158" -> "1000686"  [label="DDG: msg->msg_flags & MSG_OOB"];
"1000158" -> "1000686"  [label="DDG: MSG_OOB"];
"1000144" -> "1000143"  [label="AST: "];
"1000144" -> "1000146"  [label="CFG: "];
"1000145" -> "1000144"  [label="AST: "];
"1000146" -> "1000144"  [label="AST: "];
"1000147" -> "1000144"  [label="CFG: "];
"1000149" -> "1000144"  [label="CFG: "];
"1000144" -> "1000686"  [label="DDG: len > 0xFFFF"];
"1000144" -> "1000686"  [label="DDG: len"];
"1000110" -> "1000144"  [label="DDG: len"];
"1000144" -> "1000588"  [label="DDG: len"];
"1000144" -> "1000654"  [label="DDG: len"];
"1000110" -> "1000107"  [label="AST: "];
"1000110" -> "1000686"  [label="DDG: len"];
"1000110" -> "1000588"  [label="DDG: len"];
"1000110" -> "1000654"  [label="DDG: len"];
"1000649" -> "1000648"  [label="AST: "];
"1000649" -> "1000651"  [label="CFG: "];
"1000650" -> "1000649"  [label="AST: "];
"1000651" -> "1000649"  [label="AST: "];
"1000653" -> "1000649"  [label="CFG: "];
"1000655" -> "1000649"  [label="CFG: "];
"1000649" -> "1000686"  [label="DDG: err < 0"];
"1000649" -> "1000686"  [label="DDG: err"];
"1000508" -> "1000649"  [label="DDG: err"];
"1000625" -> "1000649"  [label="DDG: err"];
"1000139" -> "1000649"  [label="DDG: err"];
"1000586" -> "1000649"  [label="DDG: err"];
"1000153" -> "1000649"  [label="DDG: err"];
"1000287" -> "1000649"  [label="DDG: err"];
"1000169" -> "1000649"  [label="DDG: err"];
"1000516" -> "1000649"  [label="DDG: err"];
"1000682" -> "1000649"  [label="DDG: err"];
"1000356" -> "1000649"  [label="DDG: err"];
"1000482" -> "1000649"  [label="DDG: err"];
"1000213" -> "1000649"  [label="DDG: err"];
"1000195" -> "1000649"  [label="DDG: err"];
"1000633" -> "1000649"  [label="DDG: err"];
"1000649" -> "1000652"  [label="DDG: err"];
"1000652" -> "1000648"  [label="AST: "];
"1000652" -> "1000653"  [label="CFG: "];
"1000653" -> "1000652"  [label="AST: "];
"1000686" -> "1000652"  [label="CFG: "];
"1000652" -> "1000686"  [label="DDG: <RET>"];
"1000653" -> "1000652"  [label="DDG: err"];
}
