digraph "0_linux_f63a8daa5812afef4f06c962351687e1ff9ccb2b_5@pointer" {
"1000106" [label="(Call,event->attr.inherit || !is_sampling_event(event))"];
"1000112" [label="(Call,!is_sampling_event(event))"];
"1000113" [label="(Call,is_sampling_event(event))"];
"1000102" [label="(MethodParameterIn,struct perf_event *event)"];
"1000105" [label="(ControlStructure,if (event->attr.inherit || !is_sampling_event(event)))"];
"1000112" [label="(Call,!is_sampling_event(event))"];
"1000114" [label="(Identifier,event)"];
"1000117" [label="(Identifier,EINVAL)"];
"1000124" [label="(Call,_perf_event_enable(event))"];
"1000107" [label="(Call,event->attr.inherit)"];
"1000106" [label="(Call,event->attr.inherit || !is_sampling_event(event))"];
"1000119" [label="(Identifier,refresh)"];
"1000102" [label="(MethodParameterIn,struct perf_event *event)"];
"1000113" [label="(Call,is_sampling_event(event))"];
"1000128" [label="(MethodReturn,static int)"];
"1000106" -> "1000105"  [label="AST: "];
"1000106" -> "1000107"  [label="CFG: "];
"1000106" -> "1000112"  [label="CFG: "];
"1000107" -> "1000106"  [label="AST: "];
"1000112" -> "1000106"  [label="AST: "];
"1000117" -> "1000106"  [label="CFG: "];
"1000119" -> "1000106"  [label="CFG: "];
"1000106" -> "1000128"  [label="DDG: event->attr.inherit"];
"1000106" -> "1000128"  [label="DDG: event->attr.inherit || !is_sampling_event(event)"];
"1000106" -> "1000128"  [label="DDG: !is_sampling_event(event)"];
"1000112" -> "1000106"  [label="DDG: is_sampling_event(event)"];
"1000112" -> "1000113"  [label="CFG: "];
"1000113" -> "1000112"  [label="AST: "];
"1000112" -> "1000128"  [label="DDG: is_sampling_event(event)"];
"1000113" -> "1000112"  [label="DDG: event"];
"1000113" -> "1000114"  [label="CFG: "];
"1000114" -> "1000113"  [label="AST: "];
"1000113" -> "1000128"  [label="DDG: event"];
"1000102" -> "1000113"  [label="DDG: event"];
"1000113" -> "1000124"  [label="DDG: event"];
"1000102" -> "1000101"  [label="AST: "];
"1000102" -> "1000128"  [label="DDG: event"];
"1000102" -> "1000124"  [label="DDG: event"];
}
