digraph "0_krb5_cf1a0c411b2668c57c41e9c4efd15ba17b6b322c@pointer" {
"1000353" [label="(Call,ptr += ap_req.length)"];
"1000306" [label="(Call,ap_req.length = (ap_req.length<<8) | (*ptr++ & 0xff))"];
"1000310" [label="(Call,(ap_req.length<<8) | (*ptr++ & 0xff))"];
"1000311" [label="(Call,ap_req.length<<8)"];
"1000297" [label="(Call,ap_req.length = (*ptr++ & 0xff))"];
"1000301" [label="(Call,*ptr++ & 0xff)"];
"1000270" [label="(Call,*ptr++ & 0xff)"];
"1000259" [label="(Call,*ptr++ & 0xff)"];
"1000233" [label="(Call,*ptr++ & 0xff)"];
"1000222" [label="(Call,*ptr++ & 0xff)"];
"1000316" [label="(Call,*ptr++ & 0xff)"];
"1000318" [label="(Call,ptr++)"];
"1000303" [label="(Call,ptr++)"];
"1000272" [label="(Call,ptr++)"];
"1000261" [label="(Call,ptr++)"];
"1000235" [label="(Call,ptr++)"];
"1000224" [label="(Call,ptr++)"];
"1000215" [label="(Call,ptr = req->data)"];
"1000466" [label="(Call,(req->data + req->length) - ptr)"];
"1000462" [label="(Call,cipher.length = (req->data + req->length) - ptr)"];
"1001006" [label="(Call,cipher.length == 0)"];
"1001129" [label="(Call,alloc_data(rep, 6 + ap_rep.length + cipher.length))"];
"1001127" [label="(Call,ret = alloc_data(rep, 6 + ap_rep.length + cipher.length))"];
"1001258" [label="(Return,return ret;)"];
"1001131" [label="(Call,6 + ap_rep.length + cipher.length)"];
"1001133" [label="(Call,ap_rep.length + cipher.length)"];
"1001216" [label="(Call,memcpy(ptr, cipher.data, cipher.length))"];
"1001242" [label="(Call,free(cipher.data))"];
"1000475" [label="(Call,cipher.data = ptr)"];
"1001259" [label="(Identifier,ret)"];
"1001258" [label="(Return,return ret;)"];
"1000481" [label="(Identifier,ret)"];
"1000129" [label="(MethodParameterIn,krb5_data *rep)"];
"1000336" [label="(Call,ret = KRB5KRB_AP_ERR_MODIFIED)"];
"1000466" [label="(Call,(req->data + req->length) - ptr)"];
"1000216" [label="(Identifier,ptr)"];
"1000298" [label="(Call,ap_req.length)"];
"1000224" [label="(Call,ptr++)"];
"1000263" [label="(Literal,0xff)"];
"1000324" [label="(Identifier,ptr)"];
"1000270" [label="(Call,*ptr++ & 0xff)"];
"1000315" [label="(Literal,8)"];
"1000302" [label="(Call,*ptr++)"];
"1000284" [label="(Call,ret = KRB5KDC_ERR_BAD_PVNO)"];
"1001129" [label="(Call,alloc_data(rep, 6 + ap_rep.length + cipher.length))"];
"1000272" [label="(Call,ptr++)"];
"1000225" [label="(Identifier,ptr)"];
"1000257" [label="(Call,vno = (*ptr++ & 0xff))"];
"1000306" [label="(Call,ap_req.length = (ap_req.length<<8) | (*ptr++ & 0xff))"];
"1001010" [label="(Literal,0)"];
"1000322" [label="(Call,ptr + ap_req.length >= req->data + req->length)"];
"1001006" [label="(Call,cipher.length == 0)"];
"1000297" [label="(Call,ap_req.length = (*ptr++ & 0xff))"];
"1001247" [label="(Identifier,context)"];
"1000311" [label="(Call,ap_req.length<<8)"];
"1001137" [label="(Call,cipher.length)"];
"1000317" [label="(Call,*ptr++)"];
"1001191" [label="(Call,ptr++)"];
"1000235" [label="(Call,ptr++)"];
"1000477" [label="(Identifier,cipher)"];
"1001216" [label="(Call,memcpy(ptr, cipher.data, cipher.length))"];
"1000467" [label="(Call,req->data + req->length)"];
"1000312" [label="(Call,ap_req.length)"];
"1000226" [label="(Literal,0xff)"];
"1000301" [label="(Call,*ptr++ & 0xff)"];
"1001131" [label="(Call,6 + ap_rep.length + cipher.length)"];
"1000354" [label="(Identifier,ptr)"];
"1001221" [label="(Call,cipher.length)"];
"1001243" [label="(Call,cipher.data)"];
"1000318" [label="(Call,ptr++)"];
"1000259" [label="(Call,*ptr++ & 0xff)"];
"1000476" [label="(Call,cipher.data)"];
"1000305" [label="(Literal,0xff)"];
"1001130" [label="(Identifier,rep)"];
"1000353" [label="(Call,ptr += ap_req.length)"];
"1001218" [label="(Call,cipher.data)"];
"1000217" [label="(Call,req->data)"];
"1000274" [label="(Literal,0xff)"];
"1000130" [label="(Block,)"];
"1001082" [label="(Call,ret = krb5_build_principal(context, &krberror.server,\n                                   strlen(realm), realm,\n                                   \"kadmin\", \"changepw\", NULL))"];
"1000271" [label="(Call,*ptr++)"];
"1001224" [label="(JumpTarget,bailout:)"];
"1000310" [label="(Call,(ap_req.length<<8) | (*ptr++ & 0xff))"];
"1000463" [label="(Call,cipher.length)"];
"1000953" [label="(Call,cipher = empty_data())"];
"1000323" [label="(Call,ptr + ap_req.length)"];
"1001211" [label="(Call,ptr += ap_rep.length)"];
"1000320" [label="(Literal,0xff)"];
"1000307" [label="(Call,ap_req.length)"];
"1001141" [label="(Identifier,ret)"];
"1001111" [label="(Call,ret = krb5_mk_error(context, &krberror, &cipher))"];
"1001242" [label="(Call,free(cipher.data))"];
"1000266" [label="(Call,(vno<<8) | (*ptr++ & 0xff))"];
"1001133" [label="(Call,ap_rep.length + cipher.length)"];
"1000273" [label="(Identifier,ptr)"];
"1001127" [label="(Call,ret = alloc_data(rep, 6 + ap_rep.length + cipher.length))"];
"1000303" [label="(Call,ptr++)"];
"1000237" [label="(Literal,0xff)"];
"1000260" [label="(Call,*ptr++)"];
"1000141" [label="(Call,cipher = empty_data())"];
"1000215" [label="(Call,ptr = req->data)"];
"1001014" [label="(Identifier,ap_rep)"];
"1000308" [label="(Identifier,ap_req)"];
"1000222" [label="(Call,*ptr++ & 0xff)"];
"1000355" [label="(Call,ap_req.length)"];
"1000475" [label="(Call,cipher.data = ptr)"];
"1000474" [label="(Identifier,ptr)"];
"1001260" [label="(MethodReturn,RET)"];
"1000319" [label="(Identifier,ptr)"];
"1000348" [label="(Call,ap_req.data = ptr)"];
"1000239" [label="(Call,plen != req->length)"];
"1000137" [label="(Call,ap_rep = empty_data())"];
"1001134" [label="(Call,ap_rep.length)"];
"1000221" [label="(Identifier,plen)"];
"1000316" [label="(Call,*ptr++ & 0xff)"];
"1001021" [label="(Call,ap_rep = empty_data())"];
"1001039" [label="(Call,ret = krb5_timeofday(context, &krberror.stime))"];
"1000359" [label="(Identifier,ret)"];
"1001217" [label="(Identifier,ptr)"];
"1000245" [label="(Call,ret = KRB5KRB_AP_ERR_MODIFIED)"];
"1001007" [label="(Call,cipher.length)"];
"1001132" [label="(Literal,6)"];
"1000479" [label="(Identifier,ptr)"];
"1000462" [label="(Call,cipher.length = (req->data + req->length) - ptr)"];
"1000203" [label="(Call,ret = KRB5KRB_AP_ERR_MODIFIED)"];
"1001005" [label="(ControlStructure,if (cipher.length == 0))"];
"1000262" [label="(Identifier,ptr)"];
"1000220" [label="(Call,plen = (*ptr++ & 0xff))"];
"1000236" [label="(Identifier,ptr)"];
"1000233" [label="(Call,*ptr++ & 0xff)"];
"1001128" [label="(Identifier,ret)"];
"1000304" [label="(Identifier,ptr)"];
"1000223" [label="(Call,*ptr++)"];
"1000261" [label="(Call,ptr++)"];
"1000234" [label="(Call,*ptr++)"];
"1000229" [label="(Call,(plen<<8) | (*ptr++ & 0xff))"];
"1000353" -> "1000130"  [label="AST: "];
"1000353" -> "1000355"  [label="CFG: "];
"1000354" -> "1000353"  [label="AST: "];
"1000355" -> "1000353"  [label="AST: "];
"1000359" -> "1000353"  [label="CFG: "];
"1000353" -> "1001260"  [label="DDG: ap_req.length"];
"1000306" -> "1000353"  [label="DDG: ap_req.length"];
"1000318" -> "1000353"  [label="DDG: ptr"];
"1000353" -> "1000466"  [label="DDG: ptr"];
"1000306" -> "1000130"  [label="AST: "];
"1000306" -> "1000310"  [label="CFG: "];
"1000307" -> "1000306"  [label="AST: "];
"1000310" -> "1000306"  [label="AST: "];
"1000324" -> "1000306"  [label="CFG: "];
"1000306" -> "1001260"  [label="DDG: (ap_req.length<<8) | (*ptr++ & 0xff)"];
"1000310" -> "1000306"  [label="DDG: ap_req.length<<8"];
"1000310" -> "1000306"  [label="DDG: *ptr++ & 0xff"];
"1000306" -> "1000322"  [label="DDG: ap_req.length"];
"1000306" -> "1000323"  [label="DDG: ap_req.length"];
"1000310" -> "1000316"  [label="CFG: "];
"1000311" -> "1000310"  [label="AST: "];
"1000316" -> "1000310"  [label="AST: "];
"1000310" -> "1001260"  [label="DDG: *ptr++ & 0xff"];
"1000310" -> "1001260"  [label="DDG: ap_req.length<<8"];
"1000311" -> "1000310"  [label="DDG: ap_req.length"];
"1000311" -> "1000310"  [label="DDG: 8"];
"1000316" -> "1000310"  [label="DDG: *ptr++"];
"1000316" -> "1000310"  [label="DDG: 0xff"];
"1000311" -> "1000315"  [label="CFG: "];
"1000312" -> "1000311"  [label="AST: "];
"1000315" -> "1000311"  [label="AST: "];
"1000319" -> "1000311"  [label="CFG: "];
"1000297" -> "1000311"  [label="DDG: ap_req.length"];
"1000297" -> "1000130"  [label="AST: "];
"1000297" -> "1000301"  [label="CFG: "];
"1000298" -> "1000297"  [label="AST: "];
"1000301" -> "1000297"  [label="AST: "];
"1000308" -> "1000297"  [label="CFG: "];
"1000301" -> "1000297"  [label="DDG: *ptr++"];
"1000301" -> "1000297"  [label="DDG: 0xff"];
"1000301" -> "1000305"  [label="CFG: "];
"1000302" -> "1000301"  [label="AST: "];
"1000305" -> "1000301"  [label="AST: "];
"1000270" -> "1000301"  [label="DDG: *ptr++"];
"1000301" -> "1000316"  [label="DDG: *ptr++"];
"1000270" -> "1000266"  [label="AST: "];
"1000270" -> "1000274"  [label="CFG: "];
"1000271" -> "1000270"  [label="AST: "];
"1000274" -> "1000270"  [label="AST: "];
"1000266" -> "1000270"  [label="CFG: "];
"1000270" -> "1001260"  [label="DDG: *ptr++"];
"1000270" -> "1000266"  [label="DDG: *ptr++"];
"1000270" -> "1000266"  [label="DDG: 0xff"];
"1000259" -> "1000270"  [label="DDG: *ptr++"];
"1000259" -> "1000257"  [label="AST: "];
"1000259" -> "1000263"  [label="CFG: "];
"1000260" -> "1000259"  [label="AST: "];
"1000263" -> "1000259"  [label="AST: "];
"1000257" -> "1000259"  [label="CFG: "];
"1000259" -> "1000257"  [label="DDG: *ptr++"];
"1000259" -> "1000257"  [label="DDG: 0xff"];
"1000233" -> "1000259"  [label="DDG: *ptr++"];
"1000233" -> "1000229"  [label="AST: "];
"1000233" -> "1000237"  [label="CFG: "];
"1000234" -> "1000233"  [label="AST: "];
"1000237" -> "1000233"  [label="AST: "];
"1000229" -> "1000233"  [label="CFG: "];
"1000233" -> "1001260"  [label="DDG: *ptr++"];
"1000233" -> "1000229"  [label="DDG: *ptr++"];
"1000233" -> "1000229"  [label="DDG: 0xff"];
"1000222" -> "1000233"  [label="DDG: *ptr++"];
"1000222" -> "1000220"  [label="AST: "];
"1000222" -> "1000226"  [label="CFG: "];
"1000223" -> "1000222"  [label="AST: "];
"1000226" -> "1000222"  [label="AST: "];
"1000220" -> "1000222"  [label="CFG: "];
"1000222" -> "1000220"  [label="DDG: *ptr++"];
"1000222" -> "1000220"  [label="DDG: 0xff"];
"1000316" -> "1000320"  [label="CFG: "];
"1000317" -> "1000316"  [label="AST: "];
"1000320" -> "1000316"  [label="AST: "];
"1000316" -> "1001260"  [label="DDG: *ptr++"];
"1000318" -> "1000317"  [label="AST: "];
"1000318" -> "1000319"  [label="CFG: "];
"1000319" -> "1000318"  [label="AST: "];
"1000317" -> "1000318"  [label="CFG: "];
"1000303" -> "1000318"  [label="DDG: ptr"];
"1000318" -> "1000322"  [label="DDG: ptr"];
"1000318" -> "1000323"  [label="DDG: ptr"];
"1000318" -> "1000348"  [label="DDG: ptr"];
"1000303" -> "1000302"  [label="AST: "];
"1000303" -> "1000304"  [label="CFG: "];
"1000304" -> "1000303"  [label="AST: "];
"1000302" -> "1000303"  [label="CFG: "];
"1000272" -> "1000303"  [label="DDG: ptr"];
"1000272" -> "1000271"  [label="AST: "];
"1000272" -> "1000273"  [label="CFG: "];
"1000273" -> "1000272"  [label="AST: "];
"1000271" -> "1000272"  [label="CFG: "];
"1000272" -> "1001260"  [label="DDG: ptr"];
"1000261" -> "1000272"  [label="DDG: ptr"];
"1000261" -> "1000260"  [label="AST: "];
"1000261" -> "1000262"  [label="CFG: "];
"1000262" -> "1000261"  [label="AST: "];
"1000260" -> "1000261"  [label="CFG: "];
"1000235" -> "1000261"  [label="DDG: ptr"];
"1000235" -> "1000234"  [label="AST: "];
"1000235" -> "1000236"  [label="CFG: "];
"1000236" -> "1000235"  [label="AST: "];
"1000234" -> "1000235"  [label="CFG: "];
"1000235" -> "1001260"  [label="DDG: ptr"];
"1000224" -> "1000235"  [label="DDG: ptr"];
"1000224" -> "1000223"  [label="AST: "];
"1000224" -> "1000225"  [label="CFG: "];
"1000225" -> "1000224"  [label="AST: "];
"1000223" -> "1000224"  [label="CFG: "];
"1000215" -> "1000224"  [label="DDG: ptr"];
"1000215" -> "1000130"  [label="AST: "];
"1000215" -> "1000217"  [label="CFG: "];
"1000216" -> "1000215"  [label="AST: "];
"1000217" -> "1000215"  [label="AST: "];
"1000221" -> "1000215"  [label="CFG: "];
"1000215" -> "1001260"  [label="DDG: req->data"];
"1000466" -> "1000462"  [label="AST: "];
"1000466" -> "1000474"  [label="CFG: "];
"1000467" -> "1000466"  [label="AST: "];
"1000474" -> "1000466"  [label="AST: "];
"1000462" -> "1000466"  [label="CFG: "];
"1000466" -> "1001260"  [label="DDG: req->data + req->length"];
"1000466" -> "1000462"  [label="DDG: req->data + req->length"];
"1000466" -> "1000462"  [label="DDG: ptr"];
"1000239" -> "1000466"  [label="DDG: req->length"];
"1000466" -> "1000475"  [label="DDG: ptr"];
"1000462" -> "1000130"  [label="AST: "];
"1000463" -> "1000462"  [label="AST: "];
"1000477" -> "1000462"  [label="CFG: "];
"1000462" -> "1001260"  [label="DDG: (req->data + req->length) - ptr"];
"1000462" -> "1001006"  [label="DDG: cipher.length"];
"1001006" -> "1001005"  [label="AST: "];
"1001006" -> "1001010"  [label="CFG: "];
"1001007" -> "1001006"  [label="AST: "];
"1001010" -> "1001006"  [label="AST: "];
"1001014" -> "1001006"  [label="CFG: "];
"1001128" -> "1001006"  [label="CFG: "];
"1001006" -> "1001260"  [label="DDG: cipher.length"];
"1001006" -> "1001260"  [label="DDG: cipher.length == 0"];
"1000953" -> "1001006"  [label="DDG: cipher"];
"1001006" -> "1001129"  [label="DDG: cipher.length"];
"1001006" -> "1001131"  [label="DDG: cipher.length"];
"1001006" -> "1001133"  [label="DDG: cipher.length"];
"1001006" -> "1001216"  [label="DDG: cipher.length"];
"1001129" -> "1001127"  [label="AST: "];
"1001129" -> "1001131"  [label="CFG: "];
"1001130" -> "1001129"  [label="AST: "];
"1001131" -> "1001129"  [label="AST: "];
"1001127" -> "1001129"  [label="CFG: "];
"1001129" -> "1001260"  [label="DDG: rep"];
"1001129" -> "1001260"  [label="DDG: 6 + ap_rep.length + cipher.length"];
"1001129" -> "1001127"  [label="DDG: rep"];
"1001129" -> "1001127"  [label="DDG: 6 + ap_rep.length + cipher.length"];
"1000129" -> "1001129"  [label="DDG: rep"];
"1000137" -> "1001129"  [label="DDG: ap_rep"];
"1001021" -> "1001129"  [label="DDG: ap_rep"];
"1000953" -> "1001129"  [label="DDG: cipher"];
"1001127" -> "1000130"  [label="AST: "];
"1001128" -> "1001127"  [label="AST: "];
"1001141" -> "1001127"  [label="CFG: "];
"1001127" -> "1001260"  [label="DDG: alloc_data(rep, 6 + ap_rep.length + cipher.length)"];
"1001127" -> "1001260"  [label="DDG: ret"];
"1001127" -> "1001258"  [label="DDG: ret"];
"1001258" -> "1000130"  [label="AST: "];
"1001258" -> "1001259"  [label="CFG: "];
"1001259" -> "1001258"  [label="AST: "];
"1001260" -> "1001258"  [label="CFG: "];
"1001258" -> "1001260"  [label="DDG: <RET>"];
"1001259" -> "1001258"  [label="DDG: ret"];
"1000245" -> "1001258"  [label="DDG: ret"];
"1000336" -> "1001258"  [label="DDG: ret"];
"1001082" -> "1001258"  [label="DDG: ret"];
"1000284" -> "1001258"  [label="DDG: ret"];
"1001039" -> "1001258"  [label="DDG: ret"];
"1001111" -> "1001258"  [label="DDG: ret"];
"1000203" -> "1001258"  [label="DDG: ret"];
"1001131" -> "1001133"  [label="CFG: "];
"1001132" -> "1001131"  [label="AST: "];
"1001133" -> "1001131"  [label="AST: "];
"1001131" -> "1001260"  [label="DDG: ap_rep.length + cipher.length"];
"1000137" -> "1001131"  [label="DDG: ap_rep"];
"1001021" -> "1001131"  [label="DDG: ap_rep"];
"1000953" -> "1001131"  [label="DDG: cipher"];
"1001133" -> "1001137"  [label="CFG: "];
"1001134" -> "1001133"  [label="AST: "];
"1001137" -> "1001133"  [label="AST: "];
"1001133" -> "1001260"  [label="DDG: ap_rep.length"];
"1001133" -> "1001260"  [label="DDG: cipher.length"];
"1000137" -> "1001133"  [label="DDG: ap_rep"];
"1001021" -> "1001133"  [label="DDG: ap_rep"];
"1000953" -> "1001133"  [label="DDG: cipher"];
"1001216" -> "1000130"  [label="AST: "];
"1001216" -> "1001221"  [label="CFG: "];
"1001217" -> "1001216"  [label="AST: "];
"1001218" -> "1001216"  [label="AST: "];
"1001221" -> "1001216"  [label="AST: "];
"1001224" -> "1001216"  [label="CFG: "];
"1001216" -> "1001260"  [label="DDG: cipher.length"];
"1001216" -> "1001260"  [label="DDG: memcpy(ptr, cipher.data, cipher.length)"];
"1001216" -> "1001260"  [label="DDG: ptr"];
"1001191" -> "1001216"  [label="DDG: ptr"];
"1001211" -> "1001216"  [label="DDG: ptr"];
"1000475" -> "1001216"  [label="DDG: cipher.data"];
"1000953" -> "1001216"  [label="DDG: cipher"];
"1001216" -> "1001242"  [label="DDG: cipher.data"];
"1001242" -> "1000130"  [label="AST: "];
"1001242" -> "1001243"  [label="CFG: "];
"1001243" -> "1001242"  [label="AST: "];
"1001247" -> "1001242"  [label="CFG: "];
"1001242" -> "1001260"  [label="DDG: cipher.data"];
"1000141" -> "1001242"  [label="DDG: cipher"];
"1000475" -> "1001242"  [label="DDG: cipher.data"];
"1000953" -> "1001242"  [label="DDG: cipher"];
"1000475" -> "1000130"  [label="AST: "];
"1000475" -> "1000479"  [label="CFG: "];
"1000476" -> "1000475"  [label="AST: "];
"1000479" -> "1000475"  [label="AST: "];
"1000481" -> "1000475"  [label="CFG: "];
}
