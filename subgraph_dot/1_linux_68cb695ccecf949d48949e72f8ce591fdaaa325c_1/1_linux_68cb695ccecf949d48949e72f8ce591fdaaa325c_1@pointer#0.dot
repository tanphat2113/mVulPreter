digraph "1_linux_68cb695ccecf949d48949e72f8ce591fdaaa325c_1@pointer" {
"1000139" [label="(Call,ring->tx_pending < EFX_MIN_RING_SIZE)"];
"1000124" [label="(Call,ring->tx_pending > EFX_MAX_DMAQ_SIZE)"];
"1000119" [label="(Call,ring->rx_pending > EFX_MAX_DMAQ_SIZE)"];
"1000134" [label="(Call,ring->rx_pending < EFX_MIN_RING_SIZE)"];
"1000133" [label="(Call,ring->rx_pending < EFX_MIN_RING_SIZE ||\n\t    ring->tx_pending < EFX_MIN_RING_SIZE)"];
"1000145" [label="(Call,netif_err(efx, drv, efx->net_dev,\n\t\t\t  \"TX and RX queues cannot be smaller than %ld\n\",\n\t\t\t  EFX_MIN_RING_SIZE))"];
"1000157" [label="(Call,efx_realloc_channels(efx, ring->rx_pending, ring->tx_pending))"];
"1000156" [label="(Return,return efx_realloc_channels(efx, ring->rx_pending, ring->tx_pending);)"];
"1000125" [label="(Call,ring->tx_pending)"];
"1000138" [label="(Identifier,EFX_MIN_RING_SIZE)"];
"1000145" [label="(Call,netif_err(efx, drv, efx->net_dev,\n\t\t\t  \"TX and RX queues cannot be smaller than %ld\n\",\n\t\t\t  EFX_MIN_RING_SIZE))"];
"1000151" [label="(Literal,\"TX and RX queues cannot be smaller than %ld\n\")"];
"1000157" [label="(Call,efx_realloc_channels(efx, ring->rx_pending, ring->tx_pending))"];
"1000120" [label="(Call,ring->rx_pending)"];
"1000144" [label="(Block,)"];
"1000119" [label="(Call,ring->rx_pending > EFX_MAX_DMAQ_SIZE)"];
"1000124" [label="(Call,ring->tx_pending > EFX_MAX_DMAQ_SIZE)"];
"1000133" [label="(Call,ring->rx_pending < EFX_MIN_RING_SIZE ||\n\t    ring->tx_pending < EFX_MIN_RING_SIZE)"];
"1000118" [label="(Call,ring->rx_pending > EFX_MAX_DMAQ_SIZE ||\n \t    ring->tx_pending > EFX_MAX_DMAQ_SIZE)"];
"1000141" [label="(Identifier,ring)"];
"1000135" [label="(Call,ring->rx_pending)"];
"1000123" [label="(Identifier,EFX_MAX_DMAQ_SIZE)"];
"1000147" [label="(Identifier,drv)"];
"1000156" [label="(Return,return efx_realloc_channels(efx, ring->rx_pending, ring->tx_pending);)"];
"1000152" [label="(Identifier,EFX_MIN_RING_SIZE)"];
"1000159" [label="(Call,ring->rx_pending)"];
"1000128" [label="(Identifier,EFX_MAX_DMAQ_SIZE)"];
"1000165" [label="(MethodReturn,static int)"];
"1000158" [label="(Identifier,efx)"];
"1000134" [label="(Call,ring->rx_pending < EFX_MIN_RING_SIZE)"];
"1000148" [label="(Call,efx->net_dev)"];
"1000139" [label="(Call,ring->tx_pending < EFX_MIN_RING_SIZE)"];
"1000155" [label="(Identifier,EINVAL)"];
"1000103" [label="(Block,)"];
"1000143" [label="(Identifier,EFX_MIN_RING_SIZE)"];
"1000162" [label="(Call,ring->tx_pending)"];
"1000126" [label="(Identifier,ring)"];
"1000146" [label="(Identifier,efx)"];
"1000132" [label="(ControlStructure,if (ring->rx_pending < EFX_MIN_RING_SIZE ||\n\t    ring->tx_pending < EFX_MIN_RING_SIZE))"];
"1000105" [label="(Call,*efx = netdev_priv(net_dev))"];
"1000140" [label="(Call,ring->tx_pending)"];
"1000139" -> "1000133"  [label="AST: "];
"1000139" -> "1000143"  [label="CFG: "];
"1000140" -> "1000139"  [label="AST: "];
"1000143" -> "1000139"  [label="AST: "];
"1000133" -> "1000139"  [label="CFG: "];
"1000139" -> "1000165"  [label="DDG: "];
"1000139" -> "1000165"  [label="DDG: "];
"1000139" -> "1000133"  [label="DDG: "];
"1000139" -> "1000133"  [label="DDG: "];
"1000124" -> "1000139"  [label="DDG: "];
"1000134" -> "1000139"  [label="DDG: "];
"1000139" -> "1000145"  [label="DDG: "];
"1000139" -> "1000157"  [label="DDG: "];
"1000124" -> "1000118"  [label="AST: "];
"1000124" -> "1000128"  [label="CFG: "];
"1000125" -> "1000124"  [label="AST: "];
"1000128" -> "1000124"  [label="AST: "];
"1000118" -> "1000124"  [label="CFG: "];
"1000124" -> "1000165"  [label="DDG: "];
"1000124" -> "1000165"  [label="DDG: "];
"1000124" -> "1000118"  [label="DDG: "];
"1000124" -> "1000118"  [label="DDG: "];
"1000119" -> "1000124"  [label="DDG: "];
"1000124" -> "1000157"  [label="DDG: "];
"1000119" -> "1000118"  [label="AST: "];
"1000119" -> "1000123"  [label="CFG: "];
"1000120" -> "1000119"  [label="AST: "];
"1000123" -> "1000119"  [label="AST: "];
"1000126" -> "1000119"  [label="CFG: "];
"1000118" -> "1000119"  [label="CFG: "];
"1000119" -> "1000165"  [label="DDG: "];
"1000119" -> "1000165"  [label="DDG: "];
"1000119" -> "1000118"  [label="DDG: "];
"1000119" -> "1000118"  [label="DDG: "];
"1000119" -> "1000134"  [label="DDG: "];
"1000134" -> "1000133"  [label="AST: "];
"1000134" -> "1000138"  [label="CFG: "];
"1000135" -> "1000134"  [label="AST: "];
"1000138" -> "1000134"  [label="AST: "];
"1000141" -> "1000134"  [label="CFG: "];
"1000133" -> "1000134"  [label="CFG: "];
"1000134" -> "1000165"  [label="DDG: "];
"1000134" -> "1000165"  [label="DDG: "];
"1000134" -> "1000133"  [label="DDG: "];
"1000134" -> "1000133"  [label="DDG: "];
"1000134" -> "1000145"  [label="DDG: "];
"1000134" -> "1000157"  [label="DDG: "];
"1000133" -> "1000132"  [label="AST: "];
"1000146" -> "1000133"  [label="CFG: "];
"1000158" -> "1000133"  [label="CFG: "];
"1000133" -> "1000165"  [label="DDG: "];
"1000133" -> "1000165"  [label="DDG: "];
"1000133" -> "1000165"  [label="DDG: "];
"1000145" -> "1000144"  [label="AST: "];
"1000145" -> "1000152"  [label="CFG: "];
"1000146" -> "1000145"  [label="AST: "];
"1000147" -> "1000145"  [label="AST: "];
"1000148" -> "1000145"  [label="AST: "];
"1000151" -> "1000145"  [label="AST: "];
"1000152" -> "1000145"  [label="AST: "];
"1000155" -> "1000145"  [label="CFG: "];
"1000145" -> "1000165"  [label="DDG: "];
"1000145" -> "1000165"  [label="DDG: "];
"1000145" -> "1000165"  [label="DDG: "];
"1000145" -> "1000165"  [label="DDG: "];
"1000145" -> "1000165"  [label="DDG: "];
"1000105" -> "1000145"  [label="DDG: "];
"1000157" -> "1000156"  [label="AST: "];
"1000157" -> "1000162"  [label="CFG: "];
"1000158" -> "1000157"  [label="AST: "];
"1000159" -> "1000157"  [label="AST: "];
"1000162" -> "1000157"  [label="AST: "];
"1000156" -> "1000157"  [label="CFG: "];
"1000157" -> "1000165"  [label="DDG: "];
"1000157" -> "1000165"  [label="DDG: "];
"1000157" -> "1000165"  [label="DDG: "];
"1000157" -> "1000165"  [label="DDG: "];
"1000157" -> "1000156"  [label="DDG: "];
"1000105" -> "1000157"  [label="DDG: "];
"1000156" -> "1000103"  [label="AST: "];
"1000165" -> "1000156"  [label="CFG: "];
"1000156" -> "1000165"  [label="DDG: "];
}
