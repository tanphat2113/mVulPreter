digraph "0_curl_curl-7_50_2~32@pointer" {
"1000282" [label="(Call,nickname = \"[unknown]\")"];
"1000287" [label="(Call,strncmp(nickname, pem_slotname, sizeof(pem_slotname) - 1U))"];
"1000286" [label="(Call,!strncmp(nickname, pem_slotname, sizeof(pem_slotname) - 1U))"];
"1000295" [label="(Call,failf(data, \"NSS: refusing previously loaded certificate from file: %s\",\n          nickname))"];
"1000307" [label="(Call,failf(data, \"NSS: private key not found for certificate: %s\", nickname))"];
"1000313" [label="(Call,infof(data, \"NSS: using client certificate: %s\n\", nickname))"];
"1000317" [label="(Call,display_cert_info(data, *pRetCert))"];
"1000283" [label="(Identifier,nickname)"];
"1000294" [label="(Block,)"];
"1000288" [label="(Identifier,nickname)"];
"1000289" [label="(Identifier,pem_slotname)"];
"1000279" [label="(Call,NULL == nickname)"];
"1000285" [label="(ControlStructure,if(!strncmp(nickname, pem_slotname, sizeof(pem_slotname) - 1U)))"];
"1000313" [label="(Call,infof(data, \"NSS: using client certificate: %s\n\", nickname))"];
"1000309" [label="(Literal,\"NSS: private key not found for certificate: %s\")"];
"1000295" [label="(Call,failf(data, \"NSS: refusing previously loaded certificate from file: %s\",\n          nickname))"];
"1000286" [label="(Call,!strncmp(nickname, pem_slotname, sizeof(pem_slotname) - 1U))"];
"1000296" [label="(Identifier,data)"];
"1000314" [label="(Identifier,data)"];
"1000253" [label="(Call,NULL == *pRetCert)"];
"1000315" [label="(Literal,\"NSS: using client certificate: %s\n\")"];
"1000117" [label="(Call,*data = connssl->data)"];
"1000318" [label="(Identifier,data)"];
"1000290" [label="(Call,sizeof(pem_slotname) - 1U)"];
"1000323" [label="(MethodReturn,static SECStatus)"];
"1000284" [label="(Literal,\"[unknown]\")"];
"1000306" [label="(Block,)"];
"1000282" [label="(Call,nickname = \"[unknown]\")"];
"1000319" [label="(Call,*pRetCert)"];
"1000298" [label="(Identifier,nickname)"];
"1000297" [label="(Literal,\"NSS: refusing previously loaded certificate from file: %s\")"];
"1000312" [label="(Identifier,SECFailure)"];
"1000300" [label="(Identifier,SECFailure)"];
"1000287" [label="(Call,strncmp(nickname, pem_slotname, sizeof(pem_slotname) - 1U))"];
"1000303" [label="(Identifier,NULL)"];
"1000109" [label="(Block,)"];
"1000317" [label="(Call,display_cert_info(data, *pRetCert))"];
"1000308" [label="(Identifier,data)"];
"1000278" [label="(ControlStructure,if(NULL == nickname))"];
"1000307" [label="(Call,failf(data, \"NSS: private key not found for certificate: %s\", nickname))"];
"1000322" [label="(Identifier,SECSuccess)"];
"1000316" [label="(Identifier,nickname)"];
"1000310" [label="(Identifier,nickname)"];
"1000282" -> "1000278"  [label="AST: "];
"1000282" -> "1000284"  [label="CFG: "];
"1000283" -> "1000282"  [label="AST: "];
"1000284" -> "1000282"  [label="AST: "];
"1000288" -> "1000282"  [label="CFG: "];
"1000282" -> "1000287"  [label="DDG: "];
"1000287" -> "1000286"  [label="AST: "];
"1000287" -> "1000290"  [label="CFG: "];
"1000288" -> "1000287"  [label="AST: "];
"1000289" -> "1000287"  [label="AST: "];
"1000290" -> "1000287"  [label="AST: "];
"1000286" -> "1000287"  [label="CFG: "];
"1000287" -> "1000323"  [label="DDG: "];
"1000287" -> "1000323"  [label="DDG: "];
"1000287" -> "1000286"  [label="DDG: "];
"1000287" -> "1000286"  [label="DDG: "];
"1000287" -> "1000286"  [label="DDG: "];
"1000279" -> "1000287"  [label="DDG: "];
"1000290" -> "1000287"  [label="DDG: "];
"1000287" -> "1000295"  [label="DDG: "];
"1000287" -> "1000307"  [label="DDG: "];
"1000287" -> "1000313"  [label="DDG: "];
"1000286" -> "1000285"  [label="AST: "];
"1000296" -> "1000286"  [label="CFG: "];
"1000303" -> "1000286"  [label="CFG: "];
"1000286" -> "1000323"  [label="DDG: "];
"1000286" -> "1000323"  [label="DDG: "];
"1000295" -> "1000294"  [label="AST: "];
"1000295" -> "1000298"  [label="CFG: "];
"1000296" -> "1000295"  [label="AST: "];
"1000297" -> "1000295"  [label="AST: "];
"1000298" -> "1000295"  [label="AST: "];
"1000300" -> "1000295"  [label="CFG: "];
"1000295" -> "1000323"  [label="DDG: "];
"1000295" -> "1000323"  [label="DDG: "];
"1000295" -> "1000323"  [label="DDG: "];
"1000117" -> "1000295"  [label="DDG: "];
"1000307" -> "1000306"  [label="AST: "];
"1000307" -> "1000310"  [label="CFG: "];
"1000308" -> "1000307"  [label="AST: "];
"1000309" -> "1000307"  [label="AST: "];
"1000310" -> "1000307"  [label="AST: "];
"1000312" -> "1000307"  [label="CFG: "];
"1000307" -> "1000323"  [label="DDG: "];
"1000307" -> "1000323"  [label="DDG: "];
"1000307" -> "1000323"  [label="DDG: "];
"1000117" -> "1000307"  [label="DDG: "];
"1000313" -> "1000109"  [label="AST: "];
"1000313" -> "1000316"  [label="CFG: "];
"1000314" -> "1000313"  [label="AST: "];
"1000315" -> "1000313"  [label="AST: "];
"1000316" -> "1000313"  [label="AST: "];
"1000318" -> "1000313"  [label="CFG: "];
"1000313" -> "1000323"  [label="DDG: "];
"1000313" -> "1000323"  [label="DDG: "];
"1000117" -> "1000313"  [label="DDG: "];
"1000313" -> "1000317"  [label="DDG: "];
"1000317" -> "1000109"  [label="AST: "];
"1000317" -> "1000319"  [label="CFG: "];
"1000318" -> "1000317"  [label="AST: "];
"1000319" -> "1000317"  [label="AST: "];
"1000322" -> "1000317"  [label="CFG: "];
"1000317" -> "1000323"  [label="DDG: "];
"1000317" -> "1000323"  [label="DDG: "];
"1000317" -> "1000323"  [label="DDG: "];
"1000253" -> "1000317"  [label="DDG: "];
}
