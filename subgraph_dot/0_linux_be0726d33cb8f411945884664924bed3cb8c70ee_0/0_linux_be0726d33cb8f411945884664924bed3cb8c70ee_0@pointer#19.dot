digraph "0_linux_be0726d33cb8f411945884664924bed3cb8c70ee_0@pointer" {
"1000693" [label="(Call,sbi->s_frags_per_block = sb->s_blocksize / sbi->s_frag_size)"];
"1000697" [label="(Call,sb->s_blocksize / sbi->s_frag_size)"];
"1000523" [label="(Call,sb->s_blocksize != blocksize)"];
"1000496" [label="(Call,blocksize != PAGE_SIZE)"];
"1000478" [label="(Call,blocksize = BLOCK_SIZE << le32_to_cpu(sbi->s_es->s_log_block_size))"];
"1000480" [label="(Call,BLOCK_SIZE << le32_to_cpu(sbi->s_es->s_log_block_size))"];
"1000221" [label="(Call,sb_block*BLOCK_SIZE)"];
"1000214" [label="(Call,sb_block*BLOCK_SIZE)"];
"1000120" [label="(Call,sb_block = get_sb_block(&data))"];
"1000122" [label="(Call,get_sb_block(&data))"];
"1000207" [label="(Call,blocksize != BLOCK_SIZE)"];
"1000198" [label="(Call,!blocksize)"];
"1000192" [label="(Call,blocksize = sb_min_blocksize(sb, BLOCK_SIZE))"];
"1000194" [label="(Call,sb_min_blocksize(sb, BLOCK_SIZE))"];
"1000110" [label="(MethodParameterIn,struct super_block *sb)"];
"1000482" [label="(Call,le32_to_cpu(sbi->s_es->s_log_block_size))"];
"1000687" [label="(Call,sbi->s_frag_size == 0)"];
"1000676" [label="(Call,sbi->s_frag_size = EXT2_MIN_FRAG_SIZE <<\n\t\t\t\t   le32_to_cpu(es->s_log_frag_size))"];
"1000680" [label="(Call,EXT2_MIN_FRAG_SIZE <<\n\t\t\t\t   le32_to_cpu(es->s_log_frag_size))"];
"1000682" [label="(Call,le32_to_cpu(es->s_log_frag_size))"];
"1001281" [label="(Call,ext2_msg(sb, KERN_WARNING,\n\t\t\t\"warning: mounting ext3 filesystem as ext2\"))"];
"1000730" [label="(Call,EXT2_INODE_SIZE(sb))"];
"1000943" [label="(Call,EXT2_DESC_PER_BLOCK(sb))"];
"1000195" [label="(Identifier,sb)"];
"1000227" [label="(Call,logic_sb_block = sb_block)"];
"1000668" [label="(Call,ext2_msg(sb, KERN_ERR,\n\t\t\t\t\"error: unsupported inode size: %d\",\n\t\t\t\tsbi->s_inode_size))"];
"1000217" [label="(Identifier,blocksize)"];
"1000110" [label="(MethodParameterIn,struct super_block *sb)"];
"1000701" [label="(Call,sbi->s_frag_size)"];
"1001051" [label="(Call,ext2_check_descriptors (sb))"];
"1000497" [label="(Identifier,blocksize)"];
"1001177" [label="(Call,ext2_msg(sb, KERN_ERR, \"Failed to create an mb_cache\"))"];
"1000687" [label="(Call,sbi->s_frag_size == 0)"];
"1000595" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: magic mismatch\"))"];
"1000602" [label="(Identifier,sb)"];
"1000478" [label="(Call,blocksize = BLOCK_SIZE << le32_to_cpu(sbi->s_es->s_log_block_size))"];
"1001127" [label="(Call,ext2_count_free_blocks(sb))"];
"1000207" [label="(Call,blocksize != BLOCK_SIZE)"];
"1000498" [label="(Identifier,PAGE_SIZE)"];
"1000908" [label="(Call,EXT2_BLOCKS_PER_GROUP(sb))"];
"1000482" [label="(Call,le32_to_cpu(sbi->s_es->s_log_block_size))"];
"1000481" [label="(Identifier,BLOCK_SIZE)"];
"1001044" [label="(Call,ext2_msg(sb, KERN_ERR,\n\t\t\t\t\"error: unable to read group descriptors\"))"];
"1001220" [label="(Call,ext2_iget(sb, EXT2_ROOT_INO))"];
"1000467" [label="(Call,EXT2_HAS_RO_COMPAT_FEATURE(sb, ~EXT2_FEATURE_RO_COMPAT_SUPP))"];
"1000860" [label="(Call,ext2_msg(sb, KERN_ERR,\n\t\t\t\"error: #blocks per group too big: %lu\",\n\t\t\tsbi->s_blocks_per_group))"];
"1000676" [label="(Call,sbi->s_frag_size = EXT2_MIN_FRAG_SIZE <<\n\t\t\t\t   le32_to_cpu(es->s_log_frag_size))"];
"1000991" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: not enough memory\"))"];
"1000501" [label="(Identifier,sb)"];
"1000193" [label="(Identifier,blocksize)"];
"1000523" [label="(Call,sb->s_blocksize != blocksize)"];
"1000182" [label="(Call,sbi->s_sb_block = sb_block)"];
"1000689" [label="(Identifier,sbi)"];
"1000496" [label="(Call,blocksize != PAGE_SIZE)"];
"1000682" [label="(Call,le32_to_cpu(es->s_log_frag_size))"];
"1000681" [label="(Identifier,EXT2_MIN_FRAG_SIZE)"];
"1000527" [label="(Identifier,blocksize)"];
"1000962" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: not enough memory\"))"];
"1000491" [label="(Identifier,sbi)"];
"1000940" [label="(Call,EXT2_DESC_PER_BLOCK(sb))"];
"1000113" [label="(Block,)"];
"1000120" [label="(Call,sb_block = get_sb_block(&data))"];
"1000432" [label="(Call,EXT2_HAS_RO_COMPAT_FEATURE(sb, ~0U))"];
"1000691" [label="(Literal,0)"];
"1001251" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: corrupt root inode, run e2fsck\"))"];
"1001141" [label="(Call,ext2_count_free_inodes(sb))"];
"1001286" [label="(Call,ext2_setup_super (sb, es, sb->s_flags & MS_RDONLY))"];
"1000517" [label="(Call,ext2_msg(sb, KERN_ERR,\n\t\t\t\t\t\"error: device does not support dax\"))"];
"1000838" [label="(Call,ext2_msg(sb, KERN_ERR,\n\t\t\t\"error: fragsize %lu != blocksize %lu\"\n\t\t\t\"(not supported yet)\",\n\t\t\tsbi->s_frag_size, sb->s_blocksize))"];
"1000444" [label="(Call,EXT2_HAS_INCOMPAT_FEATURE(sb, ~EXT2_FEATURE_INCOMPAT_SUPP))"];
"1000680" [label="(Call,EXT2_MIN_FRAG_SIZE <<\n\t\t\t\t   le32_to_cpu(es->s_log_frag_size))"];
"1000697" [label="(Call,sb->s_blocksize / sbi->s_frag_size)"];
"1001299" [label="(Call,ext2_write_super(sb))"];
"1001018" [label="(Call,sb_bread(sb, block))"];
"1000566" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: couldn't read\"\n\t\t\t\t\"superblock on 2nd try\"))"];
"1000238" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: unable to read superblock\"))"];
"1000222" [label="(Identifier,sb_block)"];
"1000221" [label="(Call,sb_block*BLOCK_SIZE)"];
"1000199" [label="(Identifier,blocksize)"];
"1001382" [label="(MethodReturn,static int)"];
"1000121" [label="(Identifier,sb_block)"];
"1000194" [label="(Call,sb_min_blocksize(sb, BLOCK_SIZE))"];
"1000692" [label="(ControlStructure,goto cantfind_ext2;)"];
"1000695" [label="(Identifier,sbi)"];
"1000662" [label="(Call,sbi->s_inode_size > blocksize)"];
"1001268" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: get root inode failed\"))"];
"1000694" [label="(Call,sbi->s_frags_per_block)"];
"1000706" [label="(Identifier,sbi)"];
"1000688" [label="(Call,sbi->s_frag_size)"];
"1000677" [label="(Call,sbi->s_frag_size)"];
"1000197" [label="(ControlStructure,if (!blocksize))"];
"1000824" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: unsupported blocksize\"))"];
"1000693" [label="(Call,sbi->s_frags_per_block = sb->s_blocksize / sbi->s_frag_size)"];
"1000479" [label="(Identifier,blocksize)"];
"1000128" [label="(Identifier,offset)"];
"1000898" [label="(Call,ext2_msg(sb, KERN_ERR,\n\t\t\t\"error: #inodes per group too big: %lu\",\n\t\t\tsbi->s_inodes_per_group))"];
"1000234" [label="(Call,sb_bread(sb, logic_sb_block))"];
"1000738" [label="(Call,sb->s_blocksize / EXT2_INODE_SIZE(sb))"];
"1000533" [label="(Call,sb_set_blocksize(sb, blocksize))"];
"1001008" [label="(Call,descriptor_loc(sb, logic_sb_block, i))"];
"1000122" [label="(Call,get_sb_block(&data))"];
"1001054" [label="(Call,ext2_msg(sb, KERN_ERR, \"group descriptors corrupted\"))"];
"1000206" [label="(ControlStructure,if (blocksize != BLOCK_SIZE))"];
"1000830" [label="(Call,sb->s_blocksize != sbi->s_frag_size)"];
"1000389" [label="(Call,parse_options((char *) data, sb))"];
"1000192" [label="(Call,blocksize = sb_min_blocksize(sb, BLOCK_SIZE))"];
"1000803" [label="(Call,EXT2_DESC_PER_BLOCK(sb))"];
"1000408" [label="(Call,EXT2_SB(sb))"];
"1000209" [label="(Identifier,BLOCK_SIZE)"];
"1000471" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: couldn't mount RDWR because of \"\n\t\t       \"unsupported optional features (%x)\",\n\t\t       le32_to_cpu(features)))"];
"1000546" [label="(Call,sb_block*BLOCK_SIZE)"];
"1001161" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: insufficient memory\"))"];
"1000530" [label="(Identifier,bh)"];
"1000215" [label="(Identifier,sb_block)"];
"1000198" [label="(Call,!blocksize)"];
"1000495" [label="(ControlStructure,if (blocksize != PAGE_SIZE))"];
"1000214" [label="(Call,sb_block*BLOCK_SIZE)"];
"1000683" [label="(Call,es->s_log_frag_size)"];
"1000220" [label="(Call,(sb_block*BLOCK_SIZE) % blocksize)"];
"1000201" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: unable to set blocksize\"))"];
"1000228" [label="(Identifier,logic_sb_block)"];
"1000438" [label="(Call,ext2_msg(sb, KERN_WARNING,\n\t\t\t\"warning: feature flags set on rev 0 fs, \"\n\t\t\t\"running e2fsck is recommended\"))"];
"1000698" [label="(Call,sb->s_blocksize)"];
"1000524" [label="(Call,sb->s_blocksize)"];
"1000450" [label="(Call,ext2_msg(sb, KERN_ERR,\t\"error: couldn't mount because of \"\n\t\t       \"unsupported optional features (%x)\",\n\t\t\tle32_to_cpu(features)))"];
"1001278" [label="(Call,EXT2_HAS_COMPAT_FEATURE(sb, EXT3_FEATURE_COMPAT_HAS_JOURNAL))"];
"1000208" [label="(Identifier,blocksize)"];
"1000559" [label="(Call,sb_bread(sb, logic_sb_block))"];
"1000196" [label="(Identifier,BLOCK_SIZE)"];
"1000216" [label="(Identifier,BLOCK_SIZE)"];
"1001155" [label="(Call,ext2_count_dirs(sb))"];
"1000686" [label="(ControlStructure,if (sbi->s_frag_size == 0))"];
"1000224" [label="(Identifier,blocksize)"];
"1000483" [label="(Call,sbi->s_es->s_log_block_size)"];
"1001307" [label="(Call,ext2_msg(sb, KERN_ERR,\n\t\t\t\"error: can't find an ext2 filesystem on dev %s.\",\n \t\t\tsb->s_id))"];
"1000522" [label="(ControlStructure,if (sb->s_blocksize != blocksize))"];
"1000879" [label="(Call,ext2_msg(sb, KERN_ERR,\n\t\t\t\"error: #fragments per group too big: %lu\",\n\t\t\tsbi->s_frags_per_group))"];
"1000202" [label="(Identifier,sb)"];
"1000537" [label="(Call,ext2_msg(sb, KERN_ERR,\n\t\t\t\t\"error: bad blocksize %d\", blocksize))"];
"1000213" [label="(Call,(sb_block*BLOCK_SIZE) / blocksize)"];
"1000435" [label="(Call,EXT2_HAS_INCOMPAT_FEATURE(sb, ~0U))"];
"1001114" [label="(Call,ext2_rsv_window_add(sb, &sbi->s_rsv_window_head))"];
"1000428" [label="(Call,EXT2_HAS_COMPAT_FEATURE(sb, ~0U))"];
"1000212" [label="(Identifier,logic_sb_block)"];
"1000500" [label="(Call,ext2_msg(sb, KERN_ERR,\n\t\t\t\t\t\"error: unsupported blocksize for dax\"))"];
"1000480" [label="(Call,BLOCK_SIZE << le32_to_cpu(sbi->s_es->s_log_block_size))"];
"1000929" [label="(Call,EXT2_BLOCKS_PER_GROUP(sb))"];
"1000123" [label="(Call,&data)"];
"1000742" [label="(Call,EXT2_INODE_SIZE(sb))"];
"1000223" [label="(Identifier,BLOCK_SIZE)"];
"1000511" [label="(Identifier,sb)"];
"1000796" [label="(Call,EXT2_ADDR_PER_BLOCK(sb))"];
"1000693" -> "1000113"  [label="AST: "];
"1000693" -> "1000697"  [label="CFG: "];
"1000694" -> "1000693"  [label="AST: "];
"1000697" -> "1000693"  [label="AST: "];
"1000706" -> "1000693"  [label="CFG: "];
"1000693" -> "1001382"  [label="DDG: sb->s_blocksize / sbi->s_frag_size"];
"1000693" -> "1001382"  [label="DDG: sbi->s_frags_per_block"];
"1000697" -> "1000693"  [label="DDG: sb->s_blocksize"];
"1000697" -> "1000693"  [label="DDG: sbi->s_frag_size"];
"1000697" -> "1000701"  [label="CFG: "];
"1000698" -> "1000697"  [label="AST: "];
"1000701" -> "1000697"  [label="AST: "];
"1000697" -> "1001382"  [label="DDG: sbi->s_frag_size"];
"1000697" -> "1001382"  [label="DDG: sb->s_blocksize"];
"1000523" -> "1000697"  [label="DDG: sb->s_blocksize"];
"1000687" -> "1000697"  [label="DDG: sbi->s_frag_size"];
"1000697" -> "1000738"  [label="DDG: sb->s_blocksize"];
"1000697" -> "1000830"  [label="DDG: sbi->s_frag_size"];
"1000523" -> "1000522"  [label="AST: "];
"1000523" -> "1000527"  [label="CFG: "];
"1000524" -> "1000523"  [label="AST: "];
"1000527" -> "1000523"  [label="AST: "];
"1000530" -> "1000523"  [label="CFG: "];
"1000602" -> "1000523"  [label="CFG: "];
"1000523" -> "1001382"  [label="DDG: sb->s_blocksize"];
"1000523" -> "1001382"  [label="DDG: blocksize"];
"1000523" -> "1001382"  [label="DDG: sb->s_blocksize != blocksize"];
"1000496" -> "1000523"  [label="DDG: blocksize"];
"1000478" -> "1000523"  [label="DDG: blocksize"];
"1000523" -> "1000533"  [label="DDG: blocksize"];
"1000523" -> "1000662"  [label="DDG: blocksize"];
"1000496" -> "1000495"  [label="AST: "];
"1000496" -> "1000498"  [label="CFG: "];
"1000497" -> "1000496"  [label="AST: "];
"1000498" -> "1000496"  [label="AST: "];
"1000501" -> "1000496"  [label="CFG: "];
"1000511" -> "1000496"  [label="CFG: "];
"1000496" -> "1001382"  [label="DDG: PAGE_SIZE"];
"1000496" -> "1001382"  [label="DDG: blocksize != PAGE_SIZE"];
"1000496" -> "1001382"  [label="DDG: blocksize"];
"1000478" -> "1000496"  [label="DDG: blocksize"];
"1000478" -> "1000113"  [label="AST: "];
"1000478" -> "1000480"  [label="CFG: "];
"1000479" -> "1000478"  [label="AST: "];
"1000480" -> "1000478"  [label="AST: "];
"1000491" -> "1000478"  [label="CFG: "];
"1000478" -> "1001382"  [label="DDG: BLOCK_SIZE << le32_to_cpu(sbi->s_es->s_log_block_size)"];
"1000480" -> "1000478"  [label="DDG: BLOCK_SIZE"];
"1000480" -> "1000478"  [label="DDG: le32_to_cpu(sbi->s_es->s_log_block_size)"];
"1000480" -> "1000482"  [label="CFG: "];
"1000481" -> "1000480"  [label="AST: "];
"1000482" -> "1000480"  [label="AST: "];
"1000480" -> "1001382"  [label="DDG: BLOCK_SIZE"];
"1000480" -> "1001382"  [label="DDG: le32_to_cpu(sbi->s_es->s_log_block_size)"];
"1000221" -> "1000480"  [label="DDG: BLOCK_SIZE"];
"1000207" -> "1000480"  [label="DDG: BLOCK_SIZE"];
"1000482" -> "1000480"  [label="DDG: sbi->s_es->s_log_block_size"];
"1000480" -> "1000546"  [label="DDG: BLOCK_SIZE"];
"1000221" -> "1000220"  [label="AST: "];
"1000221" -> "1000223"  [label="CFG: "];
"1000222" -> "1000221"  [label="AST: "];
"1000223" -> "1000221"  [label="AST: "];
"1000224" -> "1000221"  [label="CFG: "];
"1000221" -> "1001382"  [label="DDG: BLOCK_SIZE"];
"1000221" -> "1001382"  [label="DDG: sb_block"];
"1000221" -> "1000220"  [label="DDG: sb_block"];
"1000221" -> "1000220"  [label="DDG: BLOCK_SIZE"];
"1000214" -> "1000221"  [label="DDG: sb_block"];
"1000214" -> "1000221"  [label="DDG: BLOCK_SIZE"];
"1000221" -> "1000546"  [label="DDG: sb_block"];
"1000214" -> "1000213"  [label="AST: "];
"1000214" -> "1000216"  [label="CFG: "];
"1000215" -> "1000214"  [label="AST: "];
"1000216" -> "1000214"  [label="AST: "];
"1000217" -> "1000214"  [label="CFG: "];
"1000214" -> "1000213"  [label="DDG: sb_block"];
"1000214" -> "1000213"  [label="DDG: BLOCK_SIZE"];
"1000120" -> "1000214"  [label="DDG: sb_block"];
"1000207" -> "1000214"  [label="DDG: BLOCK_SIZE"];
"1000120" -> "1000113"  [label="AST: "];
"1000120" -> "1000122"  [label="CFG: "];
"1000121" -> "1000120"  [label="AST: "];
"1000122" -> "1000120"  [label="AST: "];
"1000128" -> "1000120"  [label="CFG: "];
"1000120" -> "1001382"  [label="DDG: sb_block"];
"1000120" -> "1001382"  [label="DDG: get_sb_block(&data)"];
"1000122" -> "1000120"  [label="DDG: &data"];
"1000120" -> "1000182"  [label="DDG: sb_block"];
"1000120" -> "1000227"  [label="DDG: sb_block"];
"1000120" -> "1000546"  [label="DDG: sb_block"];
"1000122" -> "1000123"  [label="CFG: "];
"1000123" -> "1000122"  [label="AST: "];
"1000122" -> "1001382"  [label="DDG: &data"];
"1000207" -> "1000206"  [label="AST: "];
"1000207" -> "1000209"  [label="CFG: "];
"1000208" -> "1000207"  [label="AST: "];
"1000209" -> "1000207"  [label="AST: "];
"1000212" -> "1000207"  [label="CFG: "];
"1000228" -> "1000207"  [label="CFG: "];
"1000207" -> "1001382"  [label="DDG: BLOCK_SIZE"];
"1000207" -> "1001382"  [label="DDG: blocksize"];
"1000207" -> "1001382"  [label="DDG: blocksize != BLOCK_SIZE"];
"1000198" -> "1000207"  [label="DDG: blocksize"];
"1000194" -> "1000207"  [label="DDG: BLOCK_SIZE"];
"1000207" -> "1000213"  [label="DDG: blocksize"];
"1000198" -> "1000197"  [label="AST: "];
"1000198" -> "1000199"  [label="CFG: "];
"1000199" -> "1000198"  [label="AST: "];
"1000202" -> "1000198"  [label="CFG: "];
"1000208" -> "1000198"  [label="CFG: "];
"1000198" -> "1001382"  [label="DDG: blocksize"];
"1000198" -> "1001382"  [label="DDG: !blocksize"];
"1000192" -> "1000198"  [label="DDG: blocksize"];
"1000192" -> "1000113"  [label="AST: "];
"1000192" -> "1000194"  [label="CFG: "];
"1000193" -> "1000192"  [label="AST: "];
"1000194" -> "1000192"  [label="AST: "];
"1000199" -> "1000192"  [label="CFG: "];
"1000192" -> "1001382"  [label="DDG: sb_min_blocksize(sb, BLOCK_SIZE)"];
"1000194" -> "1000192"  [label="DDG: sb"];
"1000194" -> "1000192"  [label="DDG: BLOCK_SIZE"];
"1000194" -> "1000196"  [label="CFG: "];
"1000195" -> "1000194"  [label="AST: "];
"1000196" -> "1000194"  [label="AST: "];
"1000194" -> "1001382"  [label="DDG: BLOCK_SIZE"];
"1000110" -> "1000194"  [label="DDG: sb"];
"1000194" -> "1000201"  [label="DDG: sb"];
"1000194" -> "1000234"  [label="DDG: sb"];
"1000110" -> "1000109"  [label="AST: "];
"1000110" -> "1001382"  [label="DDG: sb"];
"1000110" -> "1000201"  [label="DDG: sb"];
"1000110" -> "1000234"  [label="DDG: sb"];
"1000110" -> "1000238"  [label="DDG: sb"];
"1000110" -> "1000389"  [label="DDG: sb"];
"1000110" -> "1000408"  [label="DDG: sb"];
"1000110" -> "1000428"  [label="DDG: sb"];
"1000110" -> "1000432"  [label="DDG: sb"];
"1000110" -> "1000435"  [label="DDG: sb"];
"1000110" -> "1000438"  [label="DDG: sb"];
"1000110" -> "1000444"  [label="DDG: sb"];
"1000110" -> "1000450"  [label="DDG: sb"];
"1000110" -> "1000467"  [label="DDG: sb"];
"1000110" -> "1000471"  [label="DDG: sb"];
"1000110" -> "1000500"  [label="DDG: sb"];
"1000110" -> "1000517"  [label="DDG: sb"];
"1000110" -> "1000533"  [label="DDG: sb"];
"1000110" -> "1000537"  [label="DDG: sb"];
"1000110" -> "1000559"  [label="DDG: sb"];
"1000110" -> "1000566"  [label="DDG: sb"];
"1000110" -> "1000595"  [label="DDG: sb"];
"1000110" -> "1000668"  [label="DDG: sb"];
"1000110" -> "1000730"  [label="DDG: sb"];
"1000110" -> "1000742"  [label="DDG: sb"];
"1000110" -> "1000796"  [label="DDG: sb"];
"1000110" -> "1000803"  [label="DDG: sb"];
"1000110" -> "1000824"  [label="DDG: sb"];
"1000110" -> "1000838"  [label="DDG: sb"];
"1000110" -> "1000860"  [label="DDG: sb"];
"1000110" -> "1000879"  [label="DDG: sb"];
"1000110" -> "1000898"  [label="DDG: sb"];
"1000110" -> "1000908"  [label="DDG: sb"];
"1000110" -> "1000929"  [label="DDG: sb"];
"1000110" -> "1000940"  [label="DDG: sb"];
"1000110" -> "1000943"  [label="DDG: sb"];
"1000110" -> "1000962"  [label="DDG: sb"];
"1000110" -> "1000991"  [label="DDG: sb"];
"1000110" -> "1001008"  [label="DDG: sb"];
"1000110" -> "1001018"  [label="DDG: sb"];
"1000110" -> "1001044"  [label="DDG: sb"];
"1000110" -> "1001051"  [label="DDG: sb"];
"1000110" -> "1001054"  [label="DDG: sb"];
"1000110" -> "1001114"  [label="DDG: sb"];
"1000110" -> "1001127"  [label="DDG: sb"];
"1000110" -> "1001141"  [label="DDG: sb"];
"1000110" -> "1001155"  [label="DDG: sb"];
"1000110" -> "1001161"  [label="DDG: sb"];
"1000110" -> "1001177"  [label="DDG: sb"];
"1000110" -> "1001220"  [label="DDG: sb"];
"1000110" -> "1001251"  [label="DDG: sb"];
"1000110" -> "1001268"  [label="DDG: sb"];
"1000110" -> "1001278"  [label="DDG: sb"];
"1000110" -> "1001281"  [label="DDG: sb"];
"1000110" -> "1001286"  [label="DDG: sb"];
"1000110" -> "1001299"  [label="DDG: sb"];
"1000110" -> "1001307"  [label="DDG: sb"];
"1000482" -> "1000483"  [label="CFG: "];
"1000483" -> "1000482"  [label="AST: "];
"1000482" -> "1001382"  [label="DDG: sbi->s_es->s_log_block_size"];
"1000687" -> "1000686"  [label="AST: "];
"1000687" -> "1000691"  [label="CFG: "];
"1000688" -> "1000687"  [label="AST: "];
"1000691" -> "1000687"  [label="AST: "];
"1000692" -> "1000687"  [label="CFG: "];
"1000695" -> "1000687"  [label="CFG: "];
"1000687" -> "1001382"  [label="DDG: sbi->s_frag_size == 0"];
"1000687" -> "1001382"  [label="DDG: sbi->s_frag_size"];
"1000676" -> "1000687"  [label="DDG: sbi->s_frag_size"];
"1000676" -> "1000113"  [label="AST: "];
"1000676" -> "1000680"  [label="CFG: "];
"1000677" -> "1000676"  [label="AST: "];
"1000680" -> "1000676"  [label="AST: "];
"1000689" -> "1000676"  [label="CFG: "];
"1000676" -> "1001382"  [label="DDG: EXT2_MIN_FRAG_SIZE <<\n\t\t\t\t   le32_to_cpu(es->s_log_frag_size)"];
"1000680" -> "1000676"  [label="DDG: EXT2_MIN_FRAG_SIZE"];
"1000680" -> "1000676"  [label="DDG: le32_to_cpu(es->s_log_frag_size)"];
"1000680" -> "1000682"  [label="CFG: "];
"1000681" -> "1000680"  [label="AST: "];
"1000682" -> "1000680"  [label="AST: "];
"1000680" -> "1001382"  [label="DDG: EXT2_MIN_FRAG_SIZE"];
"1000680" -> "1001382"  [label="DDG: le32_to_cpu(es->s_log_frag_size)"];
"1000682" -> "1000680"  [label="DDG: es->s_log_frag_size"];
"1000682" -> "1000683"  [label="CFG: "];
"1000683" -> "1000682"  [label="AST: "];
"1000682" -> "1001382"  [label="DDG: es->s_log_frag_size"];
}
