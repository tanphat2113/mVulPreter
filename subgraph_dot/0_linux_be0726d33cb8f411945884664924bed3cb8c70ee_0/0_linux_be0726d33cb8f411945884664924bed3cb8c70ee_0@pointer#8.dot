digraph "0_linux_be0726d33cb8f411945884664924bed3cb8c70ee_0@pointer" {
"1000201" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: unable to set blocksize\"))"];
"1000194" [label="(Call,sb_min_blocksize(sb, BLOCK_SIZE))"];
"1000110" [label="(MethodParameterIn,struct super_block *sb)"];
"1000205" [label="(ControlStructure,goto failed_sbi;)"];
"1000201" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: unable to set blocksize\"))"];
"1001281" [label="(Call,ext2_msg(sb, KERN_WARNING,\n\t\t\t\"warning: mounting ext3 filesystem as ext2\"))"];
"1000898" [label="(Call,ext2_msg(sb, KERN_ERR,\n\t\t\t\"error: #inodes per group too big: %lu\",\n\t\t\tsbi->s_inodes_per_group))"];
"1000730" [label="(Call,EXT2_INODE_SIZE(sb))"];
"1000943" [label="(Call,EXT2_DESC_PER_BLOCK(sb))"];
"1000195" [label="(Identifier,sb)"];
"1000438" [label="(Call,ext2_msg(sb, KERN_WARNING,\n\t\t\t\"warning: feature flags set on rev 0 fs, \"\n\t\t\t\"running e2fsck is recommended\"))"];
"1000467" [label="(Call,EXT2_HAS_RO_COMPAT_FEATURE(sb, ~EXT2_FEATURE_RO_COMPAT_SUPP))"];
"1000668" [label="(Call,ext2_msg(sb, KERN_ERR,\n\t\t\t\t\"error: unsupported inode size: %d\",\n\t\t\t\tsbi->s_inode_size))"];
"1000234" [label="(Call,sb_bread(sb, logic_sb_block))"];
"1000860" [label="(Call,ext2_msg(sb, KERN_ERR,\n\t\t\t\"error: #blocks per group too big: %lu\",\n\t\t\tsbi->s_blocks_per_group))"];
"1000991" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: not enough memory\"))"];
"1000450" [label="(Call,ext2_msg(sb, KERN_ERR,\t\"error: couldn't mount because of \"\n\t\t       \"unsupported optional features (%x)\",\n\t\t\tle32_to_cpu(features)))"];
"1000110" [label="(MethodParameterIn,struct super_block *sb)"];
"1000533" [label="(Call,sb_set_blocksize(sb, blocksize))"];
"1001051" [label="(Call,ext2_check_descriptors (sb))"];
"1001278" [label="(Call,EXT2_HAS_COMPAT_FEATURE(sb, EXT3_FEATURE_COMPAT_HAS_JOURNAL))"];
"1000559" [label="(Call,sb_bread(sb, logic_sb_block))"];
"1000196" [label="(Identifier,BLOCK_SIZE)"];
"1000203" [label="(Identifier,KERN_ERR)"];
"1001008" [label="(Call,descriptor_loc(sb, logic_sb_block, i))"];
"1001155" [label="(Call,ext2_count_dirs(sb))"];
"1000962" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: not enough memory\"))"];
"1000940" [label="(Call,EXT2_DESC_PER_BLOCK(sb))"];
"1000432" [label="(Call,EXT2_HAS_RO_COMPAT_FEATURE(sb, ~0U))"];
"1001251" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: corrupt root inode, run e2fsck\"))"];
"1001054" [label="(Call,ext2_msg(sb, KERN_ERR, \"group descriptors corrupted\"))"];
"1001141" [label="(Call,ext2_count_free_inodes(sb))"];
"1001307" [label="(Call,ext2_msg(sb, KERN_ERR,\n\t\t\t\"error: can't find an ext2 filesystem on dev %s.\",\n \t\t\tsb->s_id))"];
"1000389" [label="(Call,parse_options((char *) data, sb))"];
"1000192" [label="(Call,blocksize = sb_min_blocksize(sb, BLOCK_SIZE))"];
"1000803" [label="(Call,EXT2_DESC_PER_BLOCK(sb))"];
"1000879" [label="(Call,ext2_msg(sb, KERN_ERR,\n\t\t\t\"error: #fragments per group too big: %lu\",\n\t\t\tsbi->s_frags_per_group))"];
"1000202" [label="(Identifier,sb)"];
"1001286" [label="(Call,ext2_setup_super (sb, es, sb->s_flags & MS_RDONLY))"];
"1000408" [label="(Call,EXT2_SB(sb))"];
"1000471" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: couldn't mount RDWR because of \"\n\t\t       \"unsupported optional features (%x)\",\n\t\t       le32_to_cpu(features)))"];
"1000517" [label="(Call,ext2_msg(sb, KERN_ERR,\n\t\t\t\t\t\"error: device does not support dax\"))"];
"1000200" [label="(Block,)"];
"1000537" [label="(Call,ext2_msg(sb, KERN_ERR,\n\t\t\t\t\"error: bad blocksize %d\", blocksize))"];
"1000838" [label="(Call,ext2_msg(sb, KERN_ERR,\n\t\t\t\"error: fragsize %lu != blocksize %lu\"\n\t\t\t\"(not supported yet)\",\n\t\t\tsbi->s_frag_size, sb->s_blocksize))"];
"1000444" [label="(Call,EXT2_HAS_INCOMPAT_FEATURE(sb, ~EXT2_FEATURE_INCOMPAT_SUPP))"];
"1001177" [label="(Call,ext2_msg(sb, KERN_ERR, \"Failed to create an mb_cache\"))"];
"1000595" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: magic mismatch\"))"];
"1001299" [label="(Call,ext2_write_super(sb))"];
"1000435" [label="(Call,EXT2_HAS_INCOMPAT_FEATURE(sb, ~0U))"];
"1001018" [label="(Call,sb_bread(sb, block))"];
"1000566" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: couldn't read\"\n\t\t\t\t\"superblock on 2nd try\"))"];
"1000204" [label="(Literal,\"error: unable to set blocksize\")"];
"1001114" [label="(Call,ext2_rsv_window_add(sb, &sbi->s_rsv_window_head))"];
"1001161" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: insufficient memory\"))"];
"1000428" [label="(Call,EXT2_HAS_COMPAT_FEATURE(sb, ~0U))"];
"1000238" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: unable to read superblock\"))"];
"1001127" [label="(Call,ext2_count_free_blocks(sb))"];
"1000207" [label="(Call,blocksize != BLOCK_SIZE)"];
"1001382" [label="(MethodReturn,static int)"];
"1000908" [label="(Call,EXT2_BLOCKS_PER_GROUP(sb))"];
"1000194" [label="(Call,sb_min_blocksize(sb, BLOCK_SIZE))"];
"1000500" [label="(Call,ext2_msg(sb, KERN_ERR,\n\t\t\t\t\t\"error: unsupported blocksize for dax\"))"];
"1000929" [label="(Call,EXT2_BLOCKS_PER_GROUP(sb))"];
"1000742" [label="(Call,EXT2_INODE_SIZE(sb))"];
"1001044" [label="(Call,ext2_msg(sb, KERN_ERR,\n\t\t\t\t\"error: unable to read group descriptors\"))"];
"1001268" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: get root inode failed\"))"];
"1000796" [label="(Call,EXT2_ADDR_PER_BLOCK(sb))"];
"1001220" [label="(Call,ext2_iget(sb, EXT2_ROOT_INO))"];
"1000824" [label="(Call,ext2_msg(sb, KERN_ERR, \"error: unsupported blocksize\"))"];
"1000201" -> "1000200"  [label="AST: "];
"1000201" -> "1000204"  [label="CFG: "];
"1000202" -> "1000201"  [label="AST: "];
"1000203" -> "1000201"  [label="AST: "];
"1000204" -> "1000201"  [label="AST: "];
"1000205" -> "1000201"  [label="CFG: "];
"1000201" -> "1001382"  [label="DDG: "];
"1000201" -> "1001382"  [label="DDG: "];
"1000201" -> "1001382"  [label="DDG: "];
"1000194" -> "1000201"  [label="DDG: "];
"1000110" -> "1000201"  [label="DDG: "];
"1000194" -> "1000192"  [label="AST: "];
"1000194" -> "1000196"  [label="CFG: "];
"1000195" -> "1000194"  [label="AST: "];
"1000196" -> "1000194"  [label="AST: "];
"1000192" -> "1000194"  [label="CFG: "];
"1000194" -> "1001382"  [label="DDG: "];
"1000194" -> "1000192"  [label="DDG: "];
"1000194" -> "1000192"  [label="DDG: "];
"1000110" -> "1000194"  [label="DDG: "];
"1000194" -> "1000207"  [label="DDG: "];
"1000194" -> "1000234"  [label="DDG: "];
"1000110" -> "1000109"  [label="AST: "];
"1000110" -> "1001382"  [label="DDG: "];
"1000110" -> "1000234"  [label="DDG: "];
"1000110" -> "1000238"  [label="DDG: "];
"1000110" -> "1000389"  [label="DDG: "];
"1000110" -> "1000408"  [label="DDG: "];
"1000110" -> "1000428"  [label="DDG: "];
"1000110" -> "1000432"  [label="DDG: "];
"1000110" -> "1000435"  [label="DDG: "];
"1000110" -> "1000438"  [label="DDG: "];
"1000110" -> "1000444"  [label="DDG: "];
"1000110" -> "1000450"  [label="DDG: "];
"1000110" -> "1000467"  [label="DDG: "];
"1000110" -> "1000471"  [label="DDG: "];
"1000110" -> "1000500"  [label="DDG: "];
"1000110" -> "1000517"  [label="DDG: "];
"1000110" -> "1000533"  [label="DDG: "];
"1000110" -> "1000537"  [label="DDG: "];
"1000110" -> "1000559"  [label="DDG: "];
"1000110" -> "1000566"  [label="DDG: "];
"1000110" -> "1000595"  [label="DDG: "];
"1000110" -> "1000668"  [label="DDG: "];
"1000110" -> "1000730"  [label="DDG: "];
"1000110" -> "1000742"  [label="DDG: "];
"1000110" -> "1000796"  [label="DDG: "];
"1000110" -> "1000803"  [label="DDG: "];
"1000110" -> "1000824"  [label="DDG: "];
"1000110" -> "1000838"  [label="DDG: "];
"1000110" -> "1000860"  [label="DDG: "];
"1000110" -> "1000879"  [label="DDG: "];
"1000110" -> "1000898"  [label="DDG: "];
"1000110" -> "1000908"  [label="DDG: "];
"1000110" -> "1000929"  [label="DDG: "];
"1000110" -> "1000940"  [label="DDG: "];
"1000110" -> "1000943"  [label="DDG: "];
"1000110" -> "1000962"  [label="DDG: "];
"1000110" -> "1000991"  [label="DDG: "];
"1000110" -> "1001008"  [label="DDG: "];
"1000110" -> "1001018"  [label="DDG: "];
"1000110" -> "1001044"  [label="DDG: "];
"1000110" -> "1001051"  [label="DDG: "];
"1000110" -> "1001054"  [label="DDG: "];
"1000110" -> "1001114"  [label="DDG: "];
"1000110" -> "1001127"  [label="DDG: "];
"1000110" -> "1001141"  [label="DDG: "];
"1000110" -> "1001155"  [label="DDG: "];
"1000110" -> "1001161"  [label="DDG: "];
"1000110" -> "1001177"  [label="DDG: "];
"1000110" -> "1001220"  [label="DDG: "];
"1000110" -> "1001251"  [label="DDG: "];
"1000110" -> "1001268"  [label="DDG: "];
"1000110" -> "1001278"  [label="DDG: "];
"1000110" -> "1001281"  [label="DDG: "];
"1000110" -> "1001286"  [label="DDG: "];
"1000110" -> "1001299"  [label="DDG: "];
"1000110" -> "1001307"  [label="DDG: "];
}
