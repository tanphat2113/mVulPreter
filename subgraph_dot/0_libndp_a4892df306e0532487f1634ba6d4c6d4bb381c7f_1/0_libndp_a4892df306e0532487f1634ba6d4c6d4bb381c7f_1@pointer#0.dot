digraph "0_libndp_a4892df306e0532487f1634ba6d4c6d4bb381c7f_1@pointer" {
"1000122" [label="(Call,myrecvfrom6(ndp->sock, msg->buf, &len, 0,\n\t\t\t  &msg->addrto, &msg->ifindex, &msg->hoplimit))"];
"1000120" [label="(Call,err = myrecvfrom6(ndp->sock, msg->buf, &len, 0,\n\t\t\t  &msg->addrto, &msg->ifindex, &msg->hoplimit))"];
"1000259" [label="(Return,return err;)"];
"1000154" [label="(Call,str_in6_addr(&msg->addrto))"];
"1000151" [label="(Call,dbg(ndp, \"rcvd from: %s, ifindex: %u, hoplimit: %d\",\n\t\t str_in6_addr(&msg->addrto), msg->ifindex, msg->hoplimit))"];
"1000166" [label="(Call,msg->hoplimit != 255)"];
"1000172" [label="(Call,warn(ndp, \"ignoring packet with bad hop limit (%d)\", msg->hoplimit))"];
"1000191" [label="(Call,warn(ndp, \"rcvd icmp6 packet too short (%luB)\", len))"];
"1000227" [label="(Call,warn(ndp, \"rcvd invalid ND message\"))"];
"1000234" [label="(Call,dbg(ndp, \"rcvd %s, len: %zuB\",\n\t\t ndp_msg_type_info(msg_type)->strabbr, len))"];
"1000253" [label="(Call,ndp_call_handlers(ndp, msg))"];
"1000251" [label="(Call,err = ndp_call_handlers(ndp, msg))"];
"1000257" [label="(Call,ndp_msg_destroy(msg))"];
"1000129" [label="(Call,&len)"];
"1000178" [label="(Call,err = 0)"];
"1000219" [label="(Call,ndp_msg_payload_len_set(msg, len))"];
"1000171" [label="(Block,)"];
"1000195" [label="(Call,err = 0)"];
"1000251" [label="(Call,err = ndp_call_handlers(ndp, msg))"];
"1000131" [label="(Literal,0)"];
"1000136" [label="(Call,&msg->ifindex)"];
"1000261" [label="(MethodReturn,static int)"];
"1000191" [label="(Call,warn(ndp, \"rcvd icmp6 packet too short (%luB)\", len))"];
"1000160" [label="(Identifier,msg)"];
"1000230" [label="(Call,err = 0)"];
"1000152" [label="(Identifier,ndp)"];
"1000227" [label="(Call,warn(ndp, \"rcvd invalid ND message\"))"];
"1000258" [label="(Identifier,msg)"];
"1000170" [label="(Literal,255)"];
"1000166" [label="(Call,msg->hoplimit != 255)"];
"1000228" [label="(Identifier,ndp)"];
"1000224" [label="(Call,ndp_msg_check_valid(msg))"];
"1000126" [label="(Call,msg->buf)"];
"1000196" [label="(Identifier,err)"];
"1000212" [label="(Call,err = 0)"];
"1000123" [label="(Call,ndp->sock)"];
"1000153" [label="(Literal,\"rcvd from: %s, ifindex: %u, hoplimit: %d\")"];
"1000260" [label="(Identifier,err)"];
"1000165" [label="(ControlStructure,if (msg->hoplimit != 255))"];
"1000174" [label="(Literal,\"ignoring packet with bad hop limit (%d)\")"];
"1000192" [label="(Identifier,ndp)"];
"1000231" [label="(Identifier,err)"];
"1000226" [label="(Block,)"];
"1000121" [label="(Identifier,err)"];
"1000247" [label="(Call,err = 0)"];
"1000184" [label="(Identifier,len)"];
"1000194" [label="(Identifier,len)"];
"1000255" [label="(Identifier,msg)"];
"1000254" [label="(Identifier,ndp)"];
"1000183" [label="(Call,len < sizeof(*msg->icmp6_hdr))"];
"1000234" [label="(Call,dbg(ndp, \"rcvd %s, len: %zuB\",\n\t\t ndp_msg_type_info(msg_type)->strabbr, len))"];
"1000173" [label="(Identifier,ndp)"];
"1000167" [label="(Call,msg->hoplimit)"];
"1000179" [label="(Identifier,err)"];
"1000155" [label="(Call,&msg->addrto)"];
"1000159" [label="(Call,msg->ifindex)"];
"1000237" [label="(Call,ndp_msg_type_info(msg_type)->strabbr)"];
"1000245" [label="(Identifier,msg)"];
"1000162" [label="(Call,msg->hoplimit)"];
"1000120" [label="(Call,err = myrecvfrom6(ndp->sock, msg->buf, &len, 0,\n\t\t\t  &msg->addrto, &msg->ifindex, &msg->hoplimit))"];
"1000244" [label="(Call,ndp_msg_check_opts(msg))"];
"1000190" [label="(Block,)"];
"1000140" [label="(Call,&msg->hoplimit)"];
"1000168" [label="(Identifier,msg)"];
"1000253" [label="(Call,ndp_call_handlers(ndp, msg))"];
"1000101" [label="(MethodParameterIn,struct ndp *ndp)"];
"1000257" [label="(Call,ndp_msg_destroy(msg))"];
"1000154" [label="(Call,str_in6_addr(&msg->addrto))"];
"1000102" [label="(Block,)"];
"1000175" [label="(Call,msg->hoplimit)"];
"1000235" [label="(Identifier,ndp)"];
"1000122" [label="(Call,myrecvfrom6(ndp->sock, msg->buf, &len, 0,\n\t\t\t  &msg->addrto, &msg->ifindex, &msg->hoplimit))"];
"1000236" [label="(Literal,\"rcvd %s, len: %zuB\")"];
"1000241" [label="(Identifier,len)"];
"1000256" [label="(JumpTarget,free_msg:)"];
"1000259" [label="(Return,return err;)"];
"1000193" [label="(Literal,\"rcvd icmp6 packet too short (%luB)\")"];
"1000229" [label="(Literal,\"rcvd invalid ND message\")"];
"1000151" [label="(Call,dbg(ndp, \"rcvd from: %s, ifindex: %u, hoplimit: %d\",\n\t\t str_in6_addr(&msg->addrto), msg->ifindex, msg->hoplimit))"];
"1000252" [label="(Identifier,err)"];
"1000118" [label="(Call,ndp_msg_payload_maxlen(msg))"];
"1000172" [label="(Call,warn(ndp, \"ignoring packet with bad hop limit (%d)\", msg->hoplimit))"];
"1000132" [label="(Call,&msg->addrto)"];
"1000145" [label="(Identifier,err)"];
"1000122" -> "1000120"  [label="AST: "];
"1000122" -> "1000140"  [label="CFG: "];
"1000123" -> "1000122"  [label="AST: "];
"1000126" -> "1000122"  [label="AST: "];
"1000129" -> "1000122"  [label="AST: "];
"1000131" -> "1000122"  [label="AST: "];
"1000132" -> "1000122"  [label="AST: "];
"1000136" -> "1000122"  [label="AST: "];
"1000140" -> "1000122"  [label="AST: "];
"1000120" -> "1000122"  [label="CFG: "];
"1000122" -> "1000261"  [label="DDG: "];
"1000122" -> "1000261"  [label="DDG: "];
"1000122" -> "1000261"  [label="DDG: "];
"1000122" -> "1000261"  [label="DDG: "];
"1000122" -> "1000261"  [label="DDG: "];
"1000122" -> "1000261"  [label="DDG: "];
"1000122" -> "1000120"  [label="DDG: "];
"1000122" -> "1000120"  [label="DDG: "];
"1000122" -> "1000120"  [label="DDG: "];
"1000122" -> "1000120"  [label="DDG: "];
"1000122" -> "1000120"  [label="DDG: "];
"1000122" -> "1000120"  [label="DDG: "];
"1000122" -> "1000120"  [label="DDG: "];
"1000122" -> "1000154"  [label="DDG: "];
"1000122" -> "1000151"  [label="DDG: "];
"1000122" -> "1000151"  [label="DDG: "];
"1000122" -> "1000166"  [label="DDG: "];
"1000122" -> "1000172"  [label="DDG: "];
"1000120" -> "1000102"  [label="AST: "];
"1000121" -> "1000120"  [label="AST: "];
"1000145" -> "1000120"  [label="CFG: "];
"1000120" -> "1000261"  [label="DDG: "];
"1000120" -> "1000261"  [label="DDG: "];
"1000120" -> "1000259"  [label="DDG: "];
"1000259" -> "1000102"  [label="AST: "];
"1000259" -> "1000260"  [label="CFG: "];
"1000260" -> "1000259"  [label="AST: "];
"1000261" -> "1000259"  [label="CFG: "];
"1000259" -> "1000261"  [label="DDG: "];
"1000260" -> "1000259"  [label="DDG: "];
"1000247" -> "1000259"  [label="DDG: "];
"1000178" -> "1000259"  [label="DDG: "];
"1000251" -> "1000259"  [label="DDG: "];
"1000230" -> "1000259"  [label="DDG: "];
"1000212" -> "1000259"  [label="DDG: "];
"1000195" -> "1000259"  [label="DDG: "];
"1000154" -> "1000151"  [label="AST: "];
"1000154" -> "1000155"  [label="CFG: "];
"1000155" -> "1000154"  [label="AST: "];
"1000160" -> "1000154"  [label="CFG: "];
"1000154" -> "1000261"  [label="DDG: "];
"1000154" -> "1000151"  [label="DDG: "];
"1000151" -> "1000102"  [label="AST: "];
"1000151" -> "1000162"  [label="CFG: "];
"1000152" -> "1000151"  [label="AST: "];
"1000153" -> "1000151"  [label="AST: "];
"1000159" -> "1000151"  [label="AST: "];
"1000162" -> "1000151"  [label="AST: "];
"1000168" -> "1000151"  [label="CFG: "];
"1000151" -> "1000261"  [label="DDG: "];
"1000151" -> "1000261"  [label="DDG: "];
"1000151" -> "1000261"  [label="DDG: "];
"1000151" -> "1000261"  [label="DDG: "];
"1000101" -> "1000151"  [label="DDG: "];
"1000151" -> "1000166"  [label="DDG: "];
"1000151" -> "1000172"  [label="DDG: "];
"1000151" -> "1000191"  [label="DDG: "];
"1000151" -> "1000227"  [label="DDG: "];
"1000151" -> "1000234"  [label="DDG: "];
"1000166" -> "1000165"  [label="AST: "];
"1000166" -> "1000170"  [label="CFG: "];
"1000167" -> "1000166"  [label="AST: "];
"1000170" -> "1000166"  [label="AST: "];
"1000173" -> "1000166"  [label="CFG: "];
"1000184" -> "1000166"  [label="CFG: "];
"1000166" -> "1000261"  [label="DDG: "];
"1000166" -> "1000261"  [label="DDG: "];
"1000166" -> "1000172"  [label="DDG: "];
"1000172" -> "1000171"  [label="AST: "];
"1000172" -> "1000175"  [label="CFG: "];
"1000173" -> "1000172"  [label="AST: "];
"1000174" -> "1000172"  [label="AST: "];
"1000175" -> "1000172"  [label="AST: "];
"1000179" -> "1000172"  [label="CFG: "];
"1000172" -> "1000261"  [label="DDG: "];
"1000172" -> "1000261"  [label="DDG: "];
"1000172" -> "1000261"  [label="DDG: "];
"1000101" -> "1000172"  [label="DDG: "];
"1000191" -> "1000190"  [label="AST: "];
"1000191" -> "1000194"  [label="CFG: "];
"1000192" -> "1000191"  [label="AST: "];
"1000193" -> "1000191"  [label="AST: "];
"1000194" -> "1000191"  [label="AST: "];
"1000196" -> "1000191"  [label="CFG: "];
"1000191" -> "1000261"  [label="DDG: "];
"1000191" -> "1000261"  [label="DDG: "];
"1000191" -> "1000261"  [label="DDG: "];
"1000101" -> "1000191"  [label="DDG: "];
"1000183" -> "1000191"  [label="DDG: "];
"1000227" -> "1000226"  [label="AST: "];
"1000227" -> "1000229"  [label="CFG: "];
"1000228" -> "1000227"  [label="AST: "];
"1000229" -> "1000227"  [label="AST: "];
"1000231" -> "1000227"  [label="CFG: "];
"1000227" -> "1000261"  [label="DDG: "];
"1000227" -> "1000261"  [label="DDG: "];
"1000101" -> "1000227"  [label="DDG: "];
"1000234" -> "1000102"  [label="AST: "];
"1000234" -> "1000241"  [label="CFG: "];
"1000235" -> "1000234"  [label="AST: "];
"1000236" -> "1000234"  [label="AST: "];
"1000237" -> "1000234"  [label="AST: "];
"1000241" -> "1000234"  [label="AST: "];
"1000245" -> "1000234"  [label="CFG: "];
"1000234" -> "1000261"  [label="DDG: "];
"1000234" -> "1000261"  [label="DDG: "];
"1000234" -> "1000261"  [label="DDG: "];
"1000234" -> "1000261"  [label="DDG: "];
"1000101" -> "1000234"  [label="DDG: "];
"1000219" -> "1000234"  [label="DDG: "];
"1000234" -> "1000253"  [label="DDG: "];
"1000253" -> "1000251"  [label="AST: "];
"1000253" -> "1000255"  [label="CFG: "];
"1000254" -> "1000253"  [label="AST: "];
"1000255" -> "1000253"  [label="AST: "];
"1000251" -> "1000253"  [label="CFG: "];
"1000253" -> "1000261"  [label="DDG: "];
"1000253" -> "1000251"  [label="DDG: "];
"1000253" -> "1000251"  [label="DDG: "];
"1000101" -> "1000253"  [label="DDG: "];
"1000244" -> "1000253"  [label="DDG: "];
"1000253" -> "1000257"  [label="DDG: "];
"1000251" -> "1000102"  [label="AST: "];
"1000252" -> "1000251"  [label="AST: "];
"1000256" -> "1000251"  [label="CFG: "];
"1000251" -> "1000261"  [label="DDG: "];
"1000251" -> "1000261"  [label="DDG: "];
"1000257" -> "1000102"  [label="AST: "];
"1000257" -> "1000258"  [label="CFG: "];
"1000258" -> "1000257"  [label="AST: "];
"1000260" -> "1000257"  [label="CFG: "];
"1000257" -> "1000261"  [label="DDG: "];
"1000257" -> "1000261"  [label="DDG: "];
"1000224" -> "1000257"  [label="DDG: "];
"1000244" -> "1000257"  [label="DDG: "];
"1000118" -> "1000257"  [label="DDG: "];
}
