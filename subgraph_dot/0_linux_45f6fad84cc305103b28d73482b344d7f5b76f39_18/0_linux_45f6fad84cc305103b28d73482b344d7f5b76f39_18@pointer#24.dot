digraph "0_linux_45f6fad84cc305103b28d73482b344d7f5b76f39_18@pointer" {
"1000385" [label="(Call,dst = NULL)"];
"1000922" [label="(Call,(struct rt6_info *)dst)"];
"1000910" [label="(Call,ip6_append_data(sk, getfrag, msg, ulen,\n\t\tsizeof(struct udphdr), hlimit, tclass, opt, &fl6,\n\t\t(struct rt6_info *)dst,\n\t\tcorkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags, dontfrag))"];
"1000908" [label="(Call,err = ip6_append_data(sk, getfrag, msg, ulen,\n\t\tsizeof(struct udphdr), hlimit, tclass, opt, &fl6,\n\t\t(struct rt6_info *)dst,\n\t\tcorkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags, dontfrag))"];
"1000962" [label="(Call,err > 0)"];
"1000971" [label="(Call,net_xmit_errno(err))"];
"1000965" [label="(Call,err = np->recverr ? net_xmit_errno(err) : 0)"];
"1001000" [label="(Call,!err)"];
"1001006" [label="(Call,err == -ENOBUFS)"];
"1001005" [label="(Call,err == -ENOBUFS || test_bit(SOCK_NOSPACE, &sk->sk_socket->flags))"];
"1001024" [label="(Return,return err;)"];
"1000967" [label="(Call,np->recverr ? net_xmit_errno(err) : 0)"];
"1000938" [label="(Call,udp_v6_flush_pending_frames(sk))"];
"1000974" [label="(Call,release_sock(sk))"];
"1001020" [label="(Call,sock_net(sk))"];
"1001019" [label="(Call,UDP6_INC_STATS_USER(sock_net(sk),\n\t\t\t\tUDP_MIB_SNDBUFERRORS, is_udplite))"];
"1000946" [label="(Call,udp_v6_push_pending_frames(sk))"];
"1000944" [label="(Call,err = udp_v6_push_pending_frames(sk))"];
"1000987" [label="(Call,dst_release(dst))"];
"1000993" [label="(Call,dst_release(dst))"];
"1000919" [label="(Identifier,opt)"];
"1000385" [label="(Call,dst = NULL)"];
"1001006" [label="(Call,err == -ENOBUFS)"];
"1000990" [label="(Identifier,dst)"];
"1000965" [label="(Call,err = np->recverr ? net_xmit_errno(err) : 0)"];
"1000386" [label="(Identifier,dst)"];
"1000944" [label="(Call,err = udp_v6_push_pending_frames(sk))"];
"1000817" [label="(Call,tclass = np->tclass)"];
"1001025" [label="(Identifier,err)"];
"1000920" [label="(Call,&fl6)"];
"1000909" [label="(Identifier,err)"];
"1000732" [label="(Call,fl6_update_dst(&fl6, opt, &final))"];
"1000814" [label="(Call,tclass < 0)"];
"1001019" [label="(Call,UDP6_INC_STATS_USER(sock_net(sk),\n\t\t\t\tUDP_MIB_SNDBUFERRORS, is_udplite))"];
"1000976" [label="(JumpTarget,release_dst:)"];
"1000946" [label="(Call,udp_v6_push_pending_frames(sk))"];
"1000154" [label="(Call,ulen = len)"];
"1000179" [label="(Call,msg->msg_flags&MSG_MORE)"];
"1000924" [label="(Identifier,dst)"];
"1001024" [label="(Return,return err;)"];
"1000922" [label="(Call,(struct rt6_info *)dst)"];
"1000791" [label="(Call,IS_ERR(dst))"];
"1000971" [label="(Call,net_xmit_errno(err))"];
"1000911" [label="(Identifier,sk)"];
"1000371" [label="(Block,)"];
"1000962" [label="(Call,err > 0)"];
"1001021" [label="(Identifier,sk)"];
"1000947" [label="(Identifier,sk)"];
"1001020" [label="(Call,sock_net(sk))"];
"1000967" [label="(Call,np->recverr ? net_xmit_errno(err) : 0)"];
"1000837" [label="(Call,ip6_make_skb(sk, getfrag, msg, ulen,\n\t\t\t\t   sizeof(struct udphdr), hlimit, tclass, opt,\n\t\t\t\t   &fl6, (struct rt6_info *)dst,\n\t\t\t\t   msg->msg_flags, dontfrag))"];
"1000883" [label="(Call,err = -EINVAL)"];
"1001022" [label="(Identifier,UDP_MIB_SNDBUFERRORS)"];
"1001011" [label="(Identifier,SOCK_NOSPACE)"];
"1000918" [label="(Identifier,tclass)"];
"1001008" [label="(Call,-ENOBUFS)"];
"1000966" [label="(Identifier,err)"];
"1000917" [label="(Identifier,hlimit)"];
"1000964" [label="(Literal,0)"];
"1000925" [label="(Call,corkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags)"];
"1001018" [label="(Block,)"];
"1000994" [label="(Identifier,dst)"];
"1000910" [label="(Call,ip6_append_data(sk, getfrag, msg, ulen,\n\t\tsizeof(struct udphdr), hlimit, tclass, opt, &fl6,\n\t\t(struct rt6_info *)dst,\n\t\tcorkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags, dontfrag))"];
"1000941" [label="(ControlStructure,if (!corkreq))"];
"1000926" [label="(Identifier,corkreq)"];
"1000785" [label="(Call,ip6_sk_dst_lookup_flow(sk, &fl6, final_p))"];
"1000914" [label="(Identifier,ulen)"];
"1000794" [label="(Call,err = PTR_ERR(dst))"];
"1000849" [label="(Call,(struct rt6_info *)dst)"];
"1000987" [label="(Call,dst_release(dst))"];
"1000387" [label="(Identifier,NULL)"];
"1000973" [label="(Literal,0)"];
"1000961" [label="(ControlStructure,if (err > 0))"];
"1000938" [label="(Call,udp_v6_flush_pending_frames(sk))"];
"1000936" [label="(ControlStructure,if (err))"];
"1001003" [label="(Identifier,len)"];
"1001007" [label="(Identifier,err)"];
"1000111" [label="(MethodParameterIn,struct msghdr *msg)"];
"1001004" [label="(ControlStructure,if (err == -ENOBUFS || test_bit(SOCK_NOSPACE, &sk->sk_socket->flags)))"];
"1000856" [label="(Call,err = PTR_ERR(skb))"];
"1000110" [label="(MethodParameterIn,struct sock *sk)"];
"1000963" [label="(Identifier,err)"];
"1000945" [label="(Identifier,err)"];
"1000915" [label="(Call,sizeof(struct udphdr))"];
"1000939" [label="(Identifier,sk)"];
"1000975" [label="(Identifier,sk)"];
"1000996" [label="(Identifier,flowlabel)"];
"1000988" [label="(Identifier,dst)"];
"1000937" [label="(Identifier,err)"];
"1000999" [label="(ControlStructure,if (!err))"];
"1000864" [label="(Call,err = udp_v6_send_skb(skb, &fl6))"];
"1000993" [label="(Call,dst_release(dst))"];
"1000134" [label="(Call,*opt = NULL)"];
"1000908" [label="(Call,err = ip6_append_data(sk, getfrag, msg, ulen,\n\t\tsizeof(struct udphdr), hlimit, tclass, opt, &fl6,\n\t\t(struct rt6_info *)dst,\n\t\tcorkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags, dontfrag))"];
"1000974" [label="(Call,release_sock(sk))"];
"1001027" [label="(Call,dst_confirm(dst))"];
"1000158" [label="(Call,hlimit = -1)"];
"1000912" [label="(Identifier,getfrag)"];
"1000364" [label="(Call,lock_sock(sk))"];
"1000989" [label="(Call,dst = NULL)"];
"1000972" [label="(Identifier,err)"];
"1000388" [label="(ControlStructure,goto do_append_data;)"];
"1000913" [label="(Identifier,msg)"];
"1000798" [label="(Call,dst = NULL)"];
"1000803" [label="(Call,hlimit < 0)"];
"1000968" [label="(Call,np->recverr)"];
"1001032" [label="(Call,msg->msg_flags&MSG_PROBE)"];
"1000871" [label="(Call,lock_sock(sk))"];
"1000113" [label="(Block,)"];
"1000353" [label="(Call,getfrag  =  is_udplite ?  udplite_getfrag : ip_generic_getfrag)"];
"1000898" [label="(Call,dontfrag = np->dontfrag)"];
"1001005" [label="(Call,err == -ENOBUFS || test_bit(SOCK_NOSPACE, &sk->sk_socket->flags))"];
"1000589" [label="(Call,ip6_datagram_send_ctl(sock_net(sk), sk, msg, &fl6, opt,\n\t\t\t\t\t    &hlimit, &tclass, &dontfrag))"];
"1001001" [label="(Identifier,err)"];
"1000879" [label="(Call,release_sock(sk))"];
"1000391" [label="(Call,ulen += sizeof(struct udphdr))"];
"1000935" [label="(Identifier,dontfrag)"];
"1001023" [label="(Identifier,is_udplite)"];
"1001039" [label="(Call,err = 0)"];
"1000895" [label="(Call,dontfrag < 0)"];
"1000927" [label="(Call,msg->msg_flags|MSG_MORE)"];
"1000986" [label="(Block,)"];
"1000163" [label="(Call,tclass = -1)"];
"1001043" [label="(MethodReturn,int)"];
"1001000" [label="(Call,!err)"];
"1000808" [label="(Call,ip6_sk_dst_hoplimit(np, &fl6, dst))"];
"1000806" [label="(Call,hlimit = ip6_sk_dst_hoplimit(np, &fl6, dst))"];
"1000823" [label="(Call,msg->msg_flags&MSG_CONFIRM)"];
"1001010" [label="(Call,test_bit(SOCK_NOSPACE, &sk->sk_socket->flags))"];
"1000385" -> "1000371"  [label="AST: "];
"1000385" -> "1000387"  [label="CFG: "];
"1000386" -> "1000385"  [label="AST: "];
"1000387" -> "1000385"  [label="AST: "];
"1000388" -> "1000385"  [label="CFG: "];
"1000385" -> "1001043"  [label="DDG: NULL"];
"1000385" -> "1000922"  [label="DDG: dst"];
"1000922" -> "1000910"  [label="AST: "];
"1000922" -> "1000924"  [label="CFG: "];
"1000923" -> "1000922"  [label="AST: "];
"1000924" -> "1000922"  [label="AST: "];
"1000926" -> "1000922"  [label="CFG: "];
"1000922" -> "1000910"  [label="DDG: dst"];
"1000791" -> "1000922"  [label="DDG: dst"];
"1001027" -> "1000922"  [label="DDG: dst"];
"1000808" -> "1000922"  [label="DDG: dst"];
"1000922" -> "1000987"  [label="DDG: dst"];
"1000922" -> "1000993"  [label="DDG: dst"];
"1000910" -> "1000908"  [label="AST: "];
"1000910" -> "1000935"  [label="CFG: "];
"1000911" -> "1000910"  [label="AST: "];
"1000912" -> "1000910"  [label="AST: "];
"1000913" -> "1000910"  [label="AST: "];
"1000914" -> "1000910"  [label="AST: "];
"1000915" -> "1000910"  [label="AST: "];
"1000917" -> "1000910"  [label="AST: "];
"1000918" -> "1000910"  [label="AST: "];
"1000919" -> "1000910"  [label="AST: "];
"1000920" -> "1000910"  [label="AST: "];
"1000925" -> "1000910"  [label="AST: "];
"1000935" -> "1000910"  [label="AST: "];
"1000908" -> "1000910"  [label="CFG: "];
"1000910" -> "1001043"  [label="DDG: &fl6"];
"1000910" -> "1001043"  [label="DDG: dontfrag"];
"1000910" -> "1001043"  [label="DDG: tclass"];
"1000910" -> "1001043"  [label="DDG: opt"];
"1000910" -> "1001043"  [label="DDG: corkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags"];
"1000910" -> "1001043"  [label="DDG: getfrag"];
"1000910" -> "1001043"  [label="DDG: ulen"];
"1000910" -> "1001043"  [label="DDG: hlimit"];
"1000910" -> "1001043"  [label="DDG: (struct rt6_info *)dst"];
"1000910" -> "1001043"  [label="DDG: msg"];
"1000910" -> "1000908"  [label="DDG: tclass"];
"1000910" -> "1000908"  [label="DDG: getfrag"];
"1000910" -> "1000908"  [label="DDG: msg"];
"1000910" -> "1000908"  [label="DDG: hlimit"];
"1000910" -> "1000908"  [label="DDG: &fl6"];
"1000910" -> "1000908"  [label="DDG: sk"];
"1000910" -> "1000908"  [label="DDG: ulen"];
"1000910" -> "1000908"  [label="DDG: dontfrag"];
"1000910" -> "1000908"  [label="DDG: (struct rt6_info *)dst"];
"1000910" -> "1000908"  [label="DDG: opt"];
"1000910" -> "1000908"  [label="DDG: corkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags"];
"1000364" -> "1000910"  [label="DDG: sk"];
"1000871" -> "1000910"  [label="DDG: sk"];
"1000110" -> "1000910"  [label="DDG: sk"];
"1000353" -> "1000910"  [label="DDG: getfrag"];
"1000589" -> "1000910"  [label="DDG: msg"];
"1000111" -> "1000910"  [label="DDG: msg"];
"1000391" -> "1000910"  [label="DDG: ulen"];
"1000154" -> "1000910"  [label="DDG: ulen"];
"1000158" -> "1000910"  [label="DDG: hlimit"];
"1000806" -> "1000910"  [label="DDG: hlimit"];
"1000803" -> "1000910"  [label="DDG: hlimit"];
"1000163" -> "1000910"  [label="DDG: tclass"];
"1000817" -> "1000910"  [label="DDG: tclass"];
"1000814" -> "1000910"  [label="DDG: tclass"];
"1000732" -> "1000910"  [label="DDG: opt"];
"1000134" -> "1000910"  [label="DDG: opt"];
"1000808" -> "1000910"  [label="DDG: &fl6"];
"1000785" -> "1000910"  [label="DDG: &fl6"];
"1000927" -> "1000910"  [label="DDG: msg->msg_flags"];
"1000927" -> "1000910"  [label="DDG: MSG_MORE"];
"1000823" -> "1000910"  [label="DDG: msg->msg_flags"];
"1000179" -> "1000910"  [label="DDG: msg->msg_flags"];
"1001032" -> "1000910"  [label="DDG: msg->msg_flags"];
"1000898" -> "1000910"  [label="DDG: dontfrag"];
"1000895" -> "1000910"  [label="DDG: dontfrag"];
"1000910" -> "1000938"  [label="DDG: sk"];
"1000910" -> "1000946"  [label="DDG: sk"];
"1000910" -> "1000974"  [label="DDG: sk"];
"1000908" -> "1000113"  [label="AST: "];
"1000909" -> "1000908"  [label="AST: "];
"1000937" -> "1000908"  [label="CFG: "];
"1000908" -> "1001043"  [label="DDG: ip6_append_data(sk, getfrag, msg, ulen,\n\t\tsizeof(struct udphdr), hlimit, tclass, opt, &fl6,\n\t\t(struct rt6_info *)dst,\n\t\tcorkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags, dontfrag)"];
"1000908" -> "1000962"  [label="DDG: err"];
"1000962" -> "1000961"  [label="AST: "];
"1000962" -> "1000964"  [label="CFG: "];
"1000963" -> "1000962"  [label="AST: "];
"1000964" -> "1000962"  [label="AST: "];
"1000966" -> "1000962"  [label="CFG: "];
"1000975" -> "1000962"  [label="CFG: "];
"1000962" -> "1001043"  [label="DDG: err > 0"];
"1000944" -> "1000962"  [label="DDG: err"];
"1000962" -> "1000971"  [label="DDG: err"];
"1000962" -> "1001000"  [label="DDG: err"];
"1000971" -> "1000967"  [label="AST: "];
"1000971" -> "1000972"  [label="CFG: "];
"1000972" -> "1000971"  [label="AST: "];
"1000967" -> "1000971"  [label="CFG: "];
"1000971" -> "1000965"  [label="DDG: err"];
"1000971" -> "1000967"  [label="DDG: err"];
"1000965" -> "1000961"  [label="AST: "];
"1000965" -> "1000967"  [label="CFG: "];
"1000966" -> "1000965"  [label="AST: "];
"1000967" -> "1000965"  [label="AST: "];
"1000975" -> "1000965"  [label="CFG: "];
"1000965" -> "1001043"  [label="DDG: np->recverr ? net_xmit_errno(err) : 0"];
"1000965" -> "1001000"  [label="DDG: err"];
"1001000" -> "1000999"  [label="AST: "];
"1001000" -> "1001001"  [label="CFG: "];
"1001001" -> "1001000"  [label="AST: "];
"1001003" -> "1001000"  [label="CFG: "];
"1001007" -> "1001000"  [label="CFG: "];
"1001000" -> "1001043"  [label="DDG: err"];
"1001000" -> "1001043"  [label="DDG: !err"];
"1000856" -> "1001000"  [label="DDG: err"];
"1000883" -> "1001000"  [label="DDG: err"];
"1000794" -> "1001000"  [label="DDG: err"];
"1001039" -> "1001000"  [label="DDG: err"];
"1000864" -> "1001000"  [label="DDG: err"];
"1001000" -> "1001006"  [label="DDG: err"];
"1001006" -> "1001005"  [label="AST: "];
"1001006" -> "1001008"  [label="CFG: "];
"1001007" -> "1001006"  [label="AST: "];
"1001008" -> "1001006"  [label="AST: "];
"1001011" -> "1001006"  [label="CFG: "];
"1001005" -> "1001006"  [label="CFG: "];
"1001006" -> "1001043"  [label="DDG: -ENOBUFS"];
"1001006" -> "1001043"  [label="DDG: err"];
"1001006" -> "1001005"  [label="DDG: err"];
"1001006" -> "1001005"  [label="DDG: -ENOBUFS"];
"1001008" -> "1001006"  [label="DDG: ENOBUFS"];
"1001006" -> "1001024"  [label="DDG: err"];
"1001005" -> "1001004"  [label="AST: "];
"1001005" -> "1001010"  [label="CFG: "];
"1001010" -> "1001005"  [label="AST: "];
"1001021" -> "1001005"  [label="CFG: "];
"1001025" -> "1001005"  [label="CFG: "];
"1001005" -> "1001043"  [label="DDG: err == -ENOBUFS || test_bit(SOCK_NOSPACE, &sk->sk_socket->flags)"];
"1001005" -> "1001043"  [label="DDG: err == -ENOBUFS"];
"1001005" -> "1001043"  [label="DDG: test_bit(SOCK_NOSPACE, &sk->sk_socket->flags)"];
"1001010" -> "1001005"  [label="DDG: SOCK_NOSPACE"];
"1001010" -> "1001005"  [label="DDG: &sk->sk_socket->flags"];
"1001024" -> "1000113"  [label="AST: "];
"1001024" -> "1001025"  [label="CFG: "];
"1001025" -> "1001024"  [label="AST: "];
"1001043" -> "1001024"  [label="CFG: "];
"1001024" -> "1001043"  [label="DDG: <RET>"];
"1001025" -> "1001024"  [label="DDG: err"];
"1000967" -> "1000973"  [label="CFG: "];
"1000968" -> "1000967"  [label="AST: "];
"1000973" -> "1000967"  [label="AST: "];
"1000967" -> "1001043"  [label="DDG: net_xmit_errno(err)"];
"1000967" -> "1001043"  [label="DDG: np->recverr"];
"1000938" -> "1000936"  [label="AST: "];
"1000938" -> "1000939"  [label="CFG: "];
"1000939" -> "1000938"  [label="AST: "];
"1000963" -> "1000938"  [label="CFG: "];
"1000938" -> "1001043"  [label="DDG: udp_v6_flush_pending_frames(sk)"];
"1000110" -> "1000938"  [label="DDG: sk"];
"1000938" -> "1000974"  [label="DDG: sk"];
"1000974" -> "1000113"  [label="AST: "];
"1000974" -> "1000975"  [label="CFG: "];
"1000975" -> "1000974"  [label="AST: "];
"1000976" -> "1000974"  [label="CFG: "];
"1000974" -> "1001043"  [label="DDG: release_sock(sk)"];
"1000974" -> "1001043"  [label="DDG: sk"];
"1000946" -> "1000974"  [label="DDG: sk"];
"1000110" -> "1000974"  [label="DDG: sk"];
"1000974" -> "1001020"  [label="DDG: sk"];
"1001020" -> "1001019"  [label="AST: "];
"1001020" -> "1001021"  [label="CFG: "];
"1001021" -> "1001020"  [label="AST: "];
"1001022" -> "1001020"  [label="CFG: "];
"1001020" -> "1001043"  [label="DDG: sk"];
"1001020" -> "1001019"  [label="DDG: sk"];
"1000837" -> "1001020"  [label="DDG: sk"];
"1000785" -> "1001020"  [label="DDG: sk"];
"1000879" -> "1001020"  [label="DDG: sk"];
"1000110" -> "1001020"  [label="DDG: sk"];
"1001019" -> "1001018"  [label="AST: "];
"1001019" -> "1001023"  [label="CFG: "];
"1001022" -> "1001019"  [label="AST: "];
"1001023" -> "1001019"  [label="AST: "];
"1001025" -> "1001019"  [label="CFG: "];
"1001019" -> "1001043"  [label="DDG: UDP6_INC_STATS_USER(sock_net(sk),\n\t\t\t\tUDP_MIB_SNDBUFERRORS, is_udplite)"];
"1001019" -> "1001043"  [label="DDG: sock_net(sk)"];
"1001019" -> "1001043"  [label="DDG: is_udplite"];
"1001019" -> "1001043"  [label="DDG: UDP_MIB_SNDBUFERRORS"];
"1000946" -> "1000944"  [label="AST: "];
"1000946" -> "1000947"  [label="CFG: "];
"1000947" -> "1000946"  [label="AST: "];
"1000944" -> "1000946"  [label="CFG: "];
"1000946" -> "1000944"  [label="DDG: sk"];
"1000110" -> "1000946"  [label="DDG: sk"];
"1000944" -> "1000941"  [label="AST: "];
"1000945" -> "1000944"  [label="AST: "];
"1000963" -> "1000944"  [label="CFG: "];
"1000944" -> "1001043"  [label="DDG: udp_v6_push_pending_frames(sk)"];
"1000987" -> "1000986"  [label="AST: "];
"1000987" -> "1000988"  [label="CFG: "];
"1000988" -> "1000987"  [label="AST: "];
"1000990" -> "1000987"  [label="CFG: "];
"1000849" -> "1000987"  [label="DDG: dst"];
"1000993" -> "1000113"  [label="AST: "];
"1000993" -> "1000994"  [label="CFG: "];
"1000994" -> "1000993"  [label="AST: "];
"1000996" -> "1000993"  [label="CFG: "];
"1000993" -> "1001043"  [label="DDG: dst_release(dst)"];
"1000993" -> "1001043"  [label="DDG: dst"];
"1000849" -> "1000993"  [label="DDG: dst"];
"1000791" -> "1000993"  [label="DDG: dst"];
"1001027" -> "1000993"  [label="DDG: dst"];
"1000798" -> "1000993"  [label="DDG: dst"];
"1000989" -> "1000993"  [label="DDG: dst"];
"1000808" -> "1000993"  [label="DDG: dst"];
}
