digraph "0_savannah_8fcf61523644df42e1905c81bed26838e0b04f91@API" {
"1001226" [label="(Call,fputs (group_separator, stdout))"];
"1001218" [label="(Call,p != lastout && group_separator)"];
"1001219" [label="(Call,p != lastout)"];
"1001205" [label="(Call,p[-1] != eol)"];
"1001203" [label="(Call,--p)"];
"1001199" [label="(Call,p > bp)"];
"1001183" [label="(Call,bp = lastout ? lastout : bufbeg)"];
"1001123" [label="(Call,memchr (lastout, eolbyte, lim - lastout))"];
"1001126" [label="(Call,lim - lastout)"];
"1001116" [label="(Call,lastout < lim)"];
"1001153" [label="(Call,prline (lastout, nl + 1, SEP_CHAR_REJECTED))"];
"1001137" [label="(Call,execute (lastout, nl + 1 - lastout,\n                        &match_size, NULL))"];
"1001141" [label="(Call,1 - lastout)"];
"1001121" [label="(Call,*nl = memchr (lastout, eolbyte, lim - lastout))"];
"1001108" [label="(Call,lastout = bufbeg)"];
"1001106" [label="(Call,!lastout)"];
"1001097" [label="(Call,lastout = lim)"];
"1001054" [label="(Call,print_line_middle (beg, lim, line_color, match_color))"];
"1000988" [label="(Call,print_line_head (beg, lim, sep))"];
"1001027" [label="(Call,line_color = match_color = NULL)"];
"1001029" [label="(Call,match_color = NULL)"];
"1001004" [label="(Call,line_color = (((sep == SEP_CHAR_SELECTED)\n                     ^ (out_invert && (color_option < 0)))\n                    ? selected_line_color  : context_line_color))"];
"1001018" [label="(Call,match_color = (sep == SEP_CHAR_SELECTED\n                     ? selected_match_color : context_match_color))"];
"1001067" [label="(Call,print_line_tail (beg, lim, line_color))"];
"1001052" [label="(Call,beg = print_line_middle (beg, lim, line_color, match_color))"];
"1001075" [label="(Call,lim > beg)"];
"1001065" [label="(Call,beg = print_line_tail (beg, lim, line_color))"];
"1001081" [label="(Call,lim - beg)"];
"1001169" [label="(Call,eol = eolbyte)"];
"1001086" [label="(Call,ferror (stdout))"];
"1001078" [label="(Call,fwrite (beg, 1, lim - beg, stdout))"];
"1001102" [label="(Call,fflush (stdout))"];
"1001231" [label="(Call,fputc ('\n', stdout))"];
"1001216" [label="(Call,used && p != lastout && group_separator)"];
"1001045" [label="(ControlStructure,if (matching && (only_matching || *match_color)))"];
"1001415" [label="(MethodReturn,RET)"];
"1001232" [label="(Literal,'\n')"];
"1001005" [label="(Identifier,line_color)"];
"1001078" [label="(Call,fwrite (beg, 1, lim - beg, stdout))"];
"1001122" [label="(Identifier,nl)"];
"1001105" [label="(ControlStructure,if (!lastout))"];
"1001197" [label="(Identifier,i)"];
"1001098" [label="(Identifier,lastout)"];
"1000985" [label="(ControlStructure,if (!only_matching))"];
"1001198" [label="(ControlStructure,if (p > bp))"];
"1001074" [label="(Identifier,only_matching)"];
"1001210" [label="(Identifier,eol)"];
"1001303" [label="(Call,buflim - p)"];
"1001070" [label="(Identifier,line_color)"];
"1001059" [label="(ControlStructure,if (!only_matching && *line_color))"];
"1001144" [label="(Call,&match_size)"];
"1001356" [label="(Call,memchr (line_buf, eolbyte, (buf + size) - line_buf))"];
"1001052" [label="(Call,beg = print_line_middle (beg, lim, line_color, match_color))"];
"1001205" [label="(Call,p[-1] != eol)"];
"1001365" [label="(Call,line_end == NULL)"];
"1001226" [label="(Call,fputs (group_separator, stdout))"];
"1001153" [label="(Call,prline (lastout, nl + 1, SEP_CHAR_REJECTED))"];
"1000988" [label="(Call,print_line_head (beg, lim, sep))"];
"1001199" [label="(Call,p > bp)"];
"1001169" [label="(Call,eol = eolbyte)"];
"1001185" [label="(Call,lastout ? lastout : bufbeg)"];
"1001146" [label="(Identifier,NULL)"];
"1001065" [label="(Call,beg = print_line_tail (beg, lim, line_color))"];
"1001277" [label="(Call,memchr (p, eol, lim - p))"];
"1001086" [label="(Call,ferror (stdout))"];
"1001280" [label="(Call,lim - p)"];
"1001004" [label="(Call,line_color = (((sep == SEP_CHAR_SELECTED)\n                     ^ (out_invert && (color_option < 0)))\n                    ? selected_line_color  : context_line_color))"];
"1001053" [label="(Identifier,beg)"];
"1000981" [label="(Block,)"];
"1001055" [label="(Identifier,beg)"];
"1001181" [label="(Call,prpending (beg))"];
"1001227" [label="(Identifier,group_separator)"];
"1001121" [label="(Call,*nl = memchr (lastout, eolbyte, lim - lastout))"];
"1001068" [label="(Identifier,beg)"];
"1001112" [label="(Call,pending > 0 && lastout < lim)"];
"1001141" [label="(Call,1 - lastout)"];
"1000993" [label="(Identifier,matching)"];
"1001099" [label="(Identifier,lim)"];
"1001035" [label="(Identifier,only_matching)"];
"1001018" [label="(Call,match_color = (sep == SEP_CHAR_SELECTED\n                     ? selected_match_color : context_match_color))"];
"1001222" [label="(Identifier,group_separator)"];
"1001003" [label="(Block,)"];
"1001066" [label="(Identifier,beg)"];
"1001079" [label="(Identifier,beg)"];
"1000990" [label="(Identifier,lim)"];
"1001236" [label="(Identifier,p)"];
"1001184" [label="(Identifier,bp)"];
"1001031" [label="(Identifier,NULL)"];
"1001233" [label="(Identifier,stdout)"];
"1001250" [label="(Call,prline (p, nl, SEP_CHAR_REJECTED))"];
"1001171" [label="(Identifier,eolbyte)"];
"1001109" [label="(Identifier,lastout)"];
"1001069" [label="(Identifier,lim)"];
"1001142" [label="(Literal,1)"];
"1001056" [label="(Identifier,lim)"];
"1001220" [label="(Identifier,p)"];
"1001102" [label="(Call,fflush (stdout))"];
"1001219" [label="(Call,p != lastout)"];
"1001029" [label="(Call,match_color = NULL)"];
"1001090" [label="(Identifier,write_error_seen)"];
"1001125" [label="(Identifier,eolbyte)"];
"1001138" [label="(Identifier,lastout)"];
"1001132" [label="(ControlStructure,if (outleft\n          || ((execute (lastout, nl + 1 - lastout,\n                        &match_size, NULL) == (size_t) -1)\n              == !out_invert)))"];
"1001071" [label="(ControlStructure,if (!only_matching && lim > beg))"];
"1001107" [label="(Identifier,lastout)"];
"1001097" [label="(Call,lastout = lim)"];
"1001235" [label="(Call,p < beg)"];
"1001155" [label="(Call,nl + 1)"];
"1000989" [label="(Identifier,beg)"];
"1001116" [label="(Call,lastout < lim)"];
"1000995" [label="(Call,sep == SEP_CHAR_SELECTED)"];
"1001230" [label="(Identifier,sep_color)"];
"1001223" [label="(Block,)"];
"1001077" [label="(Identifier,beg)"];
"1001106" [label="(Call,!lastout)"];
"1001108" [label="(Call,lastout = bufbeg)"];
"1001206" [label="(Call,p[-1])"];
"1001085" [label="(ControlStructure,if (ferror (stdout)))"];
"1001191" [label="(Identifier,i)"];
"1001242" [label="(Call,memchr (p, eol, beg - p))"];
"1000991" [label="(Identifier,sep)"];
"1001030" [label="(Identifier,match_color)"];
"1001201" [label="(Identifier,bp)"];
"1001054" [label="(Call,print_line_middle (beg, lim, line_color, match_color))"];
"1001177" [label="(Identifier,out_quiet)"];
"1001117" [label="(Identifier,lastout)"];
"1001204" [label="(Identifier,p)"];
"1001200" [label="(Identifier,p)"];
"1001128" [label="(Identifier,lastout)"];
"1001154" [label="(Identifier,lastout)"];
"1001100" [label="(ControlStructure,if (line_buffered))"];
"1001082" [label="(Identifier,lim)"];
"1001139" [label="(Call,nl + 1 - lastout)"];
"1001006" [label="(Call,((sep == SEP_CHAR_SELECTED)\n                     ^ (out_invert && (color_option < 0)))\n                    ? selected_line_color  : context_line_color)"];
"1001081" [label="(Call,lim - beg)"];
"1001067" [label="(Call,print_line_tail (beg, lim, line_color))"];
"1001231" [label="(Call,fputc ('\n', stdout))"];
"1001118" [label="(Identifier,lim)"];
"1001062" [label="(Identifier,only_matching)"];
"1001137" [label="(Call,execute (lastout, nl + 1 - lastout,\n                        &match_size, NULL))"];
"1001126" [label="(Call,lim - lastout)"];
"1001228" [label="(Identifier,stdout)"];
"1001027" [label="(Call,line_color = match_color = NULL)"];
"1001020" [label="(Call,sep == SEP_CHAR_SELECTED\n                     ? selected_match_color : context_match_color)"];
"1001123" [label="(Call,memchr (lastout, eolbyte, lim - lastout))"];
"1001221" [label="(Identifier,lastout)"];
"1001110" [label="(Identifier,bufbeg)"];
"1001103" [label="(Identifier,stdout)"];
"1001127" [label="(Identifier,lim)"];
"1001026" [label="(ControlStructure,else)"];
"1001131" [label="(Identifier,pending)"];
"1001203" [label="(Call,--p)"];
"1001028" [label="(Identifier,line_color)"];
"1001183" [label="(Call,bp = lastout ? lastout : bufbeg)"];
"1001084" [label="(Identifier,stdout)"];
"1001057" [label="(Identifier,line_color)"];
"1001164" [label="(Block,)"];
"1001207" [label="(Identifier,p)"];
"1001101" [label="(Identifier,line_buffered)"];
"1001058" [label="(Identifier,match_color)"];
"1001083" [label="(Identifier,beg)"];
"1001072" [label="(Call,!only_matching && lim > beg)"];
"1001245" [label="(Call,beg - p)"];
"1001218" [label="(Call,p != lastout && group_separator)"];
"1001265" [label="(Call,p < lim)"];
"1001080" [label="(Literal,1)"];
"1001310" [label="(Call,prline (beg, lim, SEP_CHAR_SELECTED))"];
"1001170" [label="(Identifier,eol)"];
"1001124" [label="(Identifier,lastout)"];
"1001114" [label="(Identifier,pending)"];
"1001019" [label="(Identifier,match_color)"];
"1001087" [label="(Identifier,stdout)"];
"1001136" [label="(Call,execute (lastout, nl + 1 - lastout,\n                        &match_size, NULL) == (size_t) -1)"];
"1001202" [label="(ControlStructure,do)"];
"1001143" [label="(Identifier,lastout)"];
"1001158" [label="(Identifier,SEP_CHAR_REJECTED)"];
"1001119" [label="(Block,)"];
"1001288" [label="(Call,prline (p, nl, SEP_CHAR_SELECTED))"];
"1001075" [label="(Call,lim > beg)"];
"1001076" [label="(Identifier,lim)"];
"1001226" -> "1001223"  [label="AST: "];
"1001226" -> "1001228"  [label="CFG: "];
"1001227" -> "1001226"  [label="AST: "];
"1001228" -> "1001226"  [label="AST: "];
"1001230" -> "1001226"  [label="CFG: "];
"1001226" -> "1001415"  [label="DDG: group_separator"];
"1001226" -> "1001415"  [label="DDG: fputs (group_separator, stdout)"];
"1001218" -> "1001226"  [label="DDG: group_separator"];
"1001086" -> "1001226"  [label="DDG: stdout"];
"1001102" -> "1001226"  [label="DDG: stdout"];
"1001226" -> "1001231"  [label="DDG: stdout"];
"1001218" -> "1001216"  [label="AST: "];
"1001218" -> "1001219"  [label="CFG: "];
"1001218" -> "1001222"  [label="CFG: "];
"1001219" -> "1001218"  [label="AST: "];
"1001222" -> "1001218"  [label="AST: "];
"1001216" -> "1001218"  [label="CFG: "];
"1001218" -> "1001415"  [label="DDG: p != lastout"];
"1001218" -> "1001415"  [label="DDG: group_separator"];
"1001218" -> "1001216"  [label="DDG: p != lastout"];
"1001218" -> "1001216"  [label="DDG: group_separator"];
"1001219" -> "1001218"  [label="DDG: p"];
"1001219" -> "1001218"  [label="DDG: lastout"];
"1001219" -> "1001221"  [label="CFG: "];
"1001220" -> "1001219"  [label="AST: "];
"1001221" -> "1001219"  [label="AST: "];
"1001222" -> "1001219"  [label="CFG: "];
"1001219" -> "1001415"  [label="DDG: lastout"];
"1001205" -> "1001219"  [label="DDG: p[-1]"];
"1001199" -> "1001219"  [label="DDG: p"];
"1001203" -> "1001219"  [label="DDG: p"];
"1001123" -> "1001219"  [label="DDG: lastout"];
"1001153" -> "1001219"  [label="DDG: lastout"];
"1001108" -> "1001219"  [label="DDG: lastout"];
"1001137" -> "1001219"  [label="DDG: lastout"];
"1001106" -> "1001219"  [label="DDG: lastout"];
"1001116" -> "1001219"  [label="DDG: lastout"];
"1001219" -> "1001235"  [label="DDG: p"];
"1001205" -> "1001202"  [label="AST: "];
"1001205" -> "1001210"  [label="CFG: "];
"1001206" -> "1001205"  [label="AST: "];
"1001210" -> "1001205"  [label="AST: "];
"1001204" -> "1001205"  [label="CFG: "];
"1001197" -> "1001205"  [label="CFG: "];
"1001205" -> "1001415"  [label="DDG: p[-1] != eol"];
"1001205" -> "1001415"  [label="DDG: p[-1]"];
"1001205" -> "1001415"  [label="DDG: eol"];
"1001205" -> "1001199"  [label="DDG: p[-1]"];
"1001205" -> "1001203"  [label="DDG: p[-1]"];
"1001203" -> "1001205"  [label="DDG: p"];
"1001169" -> "1001205"  [label="DDG: eol"];
"1001205" -> "1001235"  [label="DDG: p[-1]"];
"1001205" -> "1001242"  [label="DDG: p[-1]"];
"1001205" -> "1001242"  [label="DDG: eol"];
"1001205" -> "1001245"  [label="DDG: p[-1]"];
"1001205" -> "1001250"  [label="DDG: p[-1]"];
"1001205" -> "1001265"  [label="DDG: p[-1]"];
"1001205" -> "1001277"  [label="DDG: p[-1]"];
"1001205" -> "1001277"  [label="DDG: eol"];
"1001205" -> "1001280"  [label="DDG: p[-1]"];
"1001205" -> "1001288"  [label="DDG: p[-1]"];
"1001205" -> "1001303"  [label="DDG: p[-1]"];
"1001203" -> "1001202"  [label="AST: "];
"1001203" -> "1001204"  [label="CFG: "];
"1001204" -> "1001203"  [label="AST: "];
"1001207" -> "1001203"  [label="CFG: "];
"1001203" -> "1001199"  [label="DDG: p"];
"1001199" -> "1001203"  [label="DDG: p"];
"1001203" -> "1001235"  [label="DDG: p"];
"1001199" -> "1001198"  [label="AST: "];
"1001199" -> "1001201"  [label="CFG: "];
"1001200" -> "1001199"  [label="AST: "];
"1001201" -> "1001199"  [label="AST: "];
"1001204" -> "1001199"  [label="CFG: "];
"1001197" -> "1001199"  [label="CFG: "];
"1001199" -> "1001415"  [label="DDG: p > bp"];
"1001199" -> "1001415"  [label="DDG: bp"];
"1001183" -> "1001199"  [label="DDG: bp"];
"1001199" -> "1001235"  [label="DDG: p"];
"1001183" -> "1001164"  [label="AST: "];
"1001183" -> "1001185"  [label="CFG: "];
"1001184" -> "1001183"  [label="AST: "];
"1001185" -> "1001183"  [label="AST: "];
"1001191" -> "1001183"  [label="CFG: "];
"1001183" -> "1001415"  [label="DDG: lastout ? lastout : bufbeg"];
"1001183" -> "1001415"  [label="DDG: bp"];
"1001123" -> "1001183"  [label="DDG: lastout"];
"1001153" -> "1001183"  [label="DDG: lastout"];
"1001108" -> "1001183"  [label="DDG: lastout"];
"1001137" -> "1001183"  [label="DDG: lastout"];
"1001106" -> "1001183"  [label="DDG: lastout"];
"1001116" -> "1001183"  [label="DDG: lastout"];
"1001123" -> "1001121"  [label="AST: "];
"1001123" -> "1001126"  [label="CFG: "];
"1001124" -> "1001123"  [label="AST: "];
"1001125" -> "1001123"  [label="AST: "];
"1001126" -> "1001123"  [label="AST: "];
"1001121" -> "1001123"  [label="CFG: "];
"1001123" -> "1001415"  [label="DDG: lim - lastout"];
"1001123" -> "1001116"  [label="DDG: lastout"];
"1001123" -> "1001121"  [label="DDG: lastout"];
"1001123" -> "1001121"  [label="DDG: eolbyte"];
"1001123" -> "1001121"  [label="DDG: lim - lastout"];
"1001126" -> "1001123"  [label="DDG: lastout"];
"1001126" -> "1001123"  [label="DDG: lim"];
"1001123" -> "1001126"  [label="DDG: lastout"];
"1001123" -> "1001141"  [label="DDG: lastout"];
"1001123" -> "1001153"  [label="DDG: lastout"];
"1001123" -> "1001169"  [label="DDG: eolbyte"];
"1001123" -> "1001185"  [label="DDG: lastout"];
"1001123" -> "1001356"  [label="DDG: eolbyte"];
"1001126" -> "1001128"  [label="CFG: "];
"1001127" -> "1001126"  [label="AST: "];
"1001128" -> "1001126"  [label="AST: "];
"1001126" -> "1001415"  [label="DDG: lim"];
"1001126" -> "1001116"  [label="DDG: lim"];
"1001116" -> "1001126"  [label="DDG: lim"];
"1001116" -> "1001126"  [label="DDG: lastout"];
"1001054" -> "1001126"  [label="DDG: lim"];
"1000988" -> "1001126"  [label="DDG: lim"];
"1001067" -> "1001126"  [label="DDG: lim"];
"1001075" -> "1001126"  [label="DDG: lim"];
"1001081" -> "1001126"  [label="DDG: lim"];
"1001153" -> "1001126"  [label="DDG: lastout"];
"1001108" -> "1001126"  [label="DDG: lastout"];
"1001137" -> "1001126"  [label="DDG: lastout"];
"1001106" -> "1001126"  [label="DDG: lastout"];
"1001126" -> "1001265"  [label="DDG: lim"];
"1001126" -> "1001310"  [label="DDG: lim"];
"1001116" -> "1001112"  [label="AST: "];
"1001116" -> "1001118"  [label="CFG: "];
"1001117" -> "1001116"  [label="AST: "];
"1001118" -> "1001116"  [label="AST: "];
"1001112" -> "1001116"  [label="CFG: "];
"1001116" -> "1001415"  [label="DDG: lim"];
"1001116" -> "1001112"  [label="DDG: lastout"];
"1001116" -> "1001112"  [label="DDG: lim"];
"1001153" -> "1001116"  [label="DDG: lastout"];
"1001108" -> "1001116"  [label="DDG: lastout"];
"1001137" -> "1001116"  [label="DDG: lastout"];
"1001106" -> "1001116"  [label="DDG: lastout"];
"1001054" -> "1001116"  [label="DDG: lim"];
"1000988" -> "1001116"  [label="DDG: lim"];
"1001067" -> "1001116"  [label="DDG: lim"];
"1001075" -> "1001116"  [label="DDG: lim"];
"1001081" -> "1001116"  [label="DDG: lim"];
"1001116" -> "1001185"  [label="DDG: lastout"];
"1001116" -> "1001265"  [label="DDG: lim"];
"1001116" -> "1001310"  [label="DDG: lim"];
"1001153" -> "1001132"  [label="AST: "];
"1001153" -> "1001158"  [label="CFG: "];
"1001154" -> "1001153"  [label="AST: "];
"1001155" -> "1001153"  [label="AST: "];
"1001158" -> "1001153"  [label="AST: "];
"1001114" -> "1001153"  [label="CFG: "];
"1001153" -> "1001415"  [label="DDG: nl + 1"];
"1001153" -> "1001415"  [label="DDG: prline (lastout, nl + 1, SEP_CHAR_REJECTED)"];
"1001153" -> "1001415"  [label="DDG: SEP_CHAR_REJECTED"];
"1001137" -> "1001153"  [label="DDG: lastout"];
"1001121" -> "1001153"  [label="DDG: nl"];
"1001153" -> "1001185"  [label="DDG: lastout"];
"1001153" -> "1001250"  [label="DDG: SEP_CHAR_REJECTED"];
"1001137" -> "1001136"  [label="AST: "];
"1001137" -> "1001146"  [label="CFG: "];
"1001138" -> "1001137"  [label="AST: "];
"1001139" -> "1001137"  [label="AST: "];
"1001144" -> "1001137"  [label="AST: "];
"1001146" -> "1001137"  [label="AST: "];
"1001148" -> "1001137"  [label="CFG: "];
"1001137" -> "1001415"  [label="DDG: NULL"];
"1001137" -> "1001415"  [label="DDG: nl + 1 - lastout"];
"1001137" -> "1001415"  [label="DDG: &match_size"];
"1001137" -> "1001136"  [label="DDG: lastout"];
"1001137" -> "1001136"  [label="DDG: nl + 1 - lastout"];
"1001137" -> "1001136"  [label="DDG: &match_size"];
"1001137" -> "1001136"  [label="DDG: NULL"];
"1001141" -> "1001137"  [label="DDG: lastout"];
"1001141" -> "1001137"  [label="DDG: 1"];
"1001121" -> "1001137"  [label="DDG: nl"];
"1001137" -> "1001185"  [label="DDG: lastout"];
"1001137" -> "1001365"  [label="DDG: NULL"];
"1001141" -> "1001139"  [label="AST: "];
"1001141" -> "1001143"  [label="CFG: "];
"1001142" -> "1001141"  [label="AST: "];
"1001143" -> "1001141"  [label="AST: "];
"1001139" -> "1001141"  [label="CFG: "];
"1001141" -> "1001139"  [label="DDG: 1"];
"1001141" -> "1001139"  [label="DDG: lastout"];
"1001121" -> "1001119"  [label="AST: "];
"1001122" -> "1001121"  [label="AST: "];
"1001131" -> "1001121"  [label="CFG: "];
"1001121" -> "1001415"  [label="DDG: memchr (lastout, eolbyte, lim - lastout)"];
"1001121" -> "1001415"  [label="DDG: nl"];
"1001121" -> "1001139"  [label="DDG: nl"];
"1001121" -> "1001155"  [label="DDG: nl"];
"1001108" -> "1001105"  [label="AST: "];
"1001108" -> "1001110"  [label="CFG: "];
"1001109" -> "1001108"  [label="AST: "];
"1001110" -> "1001108"  [label="AST: "];
"1001114" -> "1001108"  [label="CFG: "];
"1001108" -> "1001185"  [label="DDG: lastout"];
"1001106" -> "1001105"  [label="AST: "];
"1001106" -> "1001107"  [label="CFG: "];
"1001107" -> "1001106"  [label="AST: "];
"1001109" -> "1001106"  [label="CFG: "];
"1001114" -> "1001106"  [label="CFG: "];
"1001106" -> "1001415"  [label="DDG: !lastout"];
"1001097" -> "1001106"  [label="DDG: lastout"];
"1001106" -> "1001185"  [label="DDG: lastout"];
"1001097" -> "1000981"  [label="AST: "];
"1001097" -> "1001099"  [label="CFG: "];
"1001098" -> "1001097"  [label="AST: "];
"1001099" -> "1001097"  [label="AST: "];
"1001101" -> "1001097"  [label="CFG: "];
"1001097" -> "1001415"  [label="DDG: lim"];
"1001054" -> "1001097"  [label="DDG: lim"];
"1000988" -> "1001097"  [label="DDG: lim"];
"1001067" -> "1001097"  [label="DDG: lim"];
"1001075" -> "1001097"  [label="DDG: lim"];
"1001081" -> "1001097"  [label="DDG: lim"];
"1001054" -> "1001052"  [label="AST: "];
"1001054" -> "1001058"  [label="CFG: "];
"1001055" -> "1001054"  [label="AST: "];
"1001056" -> "1001054"  [label="AST: "];
"1001057" -> "1001054"  [label="AST: "];
"1001058" -> "1001054"  [label="AST: "];
"1001052" -> "1001054"  [label="CFG: "];
"1001054" -> "1001415"  [label="DDG: line_color"];
"1001054" -> "1001415"  [label="DDG: match_color"];
"1001054" -> "1001052"  [label="DDG: beg"];
"1001054" -> "1001052"  [label="DDG: lim"];
"1001054" -> "1001052"  [label="DDG: line_color"];
"1001054" -> "1001052"  [label="DDG: match_color"];
"1000988" -> "1001054"  [label="DDG: beg"];
"1000988" -> "1001054"  [label="DDG: lim"];
"1001027" -> "1001054"  [label="DDG: line_color"];
"1001004" -> "1001054"  [label="DDG: line_color"];
"1001018" -> "1001054"  [label="DDG: match_color"];
"1001029" -> "1001054"  [label="DDG: match_color"];
"1001054" -> "1001067"  [label="DDG: lim"];
"1001054" -> "1001067"  [label="DDG: line_color"];
"1001054" -> "1001075"  [label="DDG: lim"];
"1001054" -> "1001081"  [label="DDG: lim"];
"1001054" -> "1001265"  [label="DDG: lim"];
"1001054" -> "1001310"  [label="DDG: lim"];
"1000988" -> "1000985"  [label="AST: "];
"1000988" -> "1000991"  [label="CFG: "];
"1000989" -> "1000988"  [label="AST: "];
"1000990" -> "1000988"  [label="AST: "];
"1000991" -> "1000988"  [label="AST: "];
"1000993" -> "1000988"  [label="CFG: "];
"1000988" -> "1001415"  [label="DDG: print_line_head (beg, lim, sep)"];
"1000988" -> "1000995"  [label="DDG: sep"];
"1000988" -> "1001067"  [label="DDG: beg"];
"1000988" -> "1001067"  [label="DDG: lim"];
"1000988" -> "1001075"  [label="DDG: lim"];
"1000988" -> "1001075"  [label="DDG: beg"];
"1000988" -> "1001081"  [label="DDG: lim"];
"1000988" -> "1001081"  [label="DDG: beg"];
"1000988" -> "1001181"  [label="DDG: beg"];
"1000988" -> "1001235"  [label="DDG: beg"];
"1000988" -> "1001265"  [label="DDG: lim"];
"1000988" -> "1001310"  [label="DDG: lim"];
"1001027" -> "1001026"  [label="AST: "];
"1001027" -> "1001029"  [label="CFG: "];
"1001028" -> "1001027"  [label="AST: "];
"1001029" -> "1001027"  [label="AST: "];
"1001035" -> "1001027"  [label="CFG: "];
"1001027" -> "1001415"  [label="DDG: line_color"];
"1001029" -> "1001027"  [label="DDG: match_color"];
"1001027" -> "1001067"  [label="DDG: line_color"];
"1001029" -> "1001031"  [label="CFG: "];
"1001030" -> "1001029"  [label="AST: "];
"1001031" -> "1001029"  [label="AST: "];
"1001029" -> "1001415"  [label="DDG: match_color"];
"1001029" -> "1001415"  [label="DDG: NULL"];
"1001004" -> "1001003"  [label="AST: "];
"1001004" -> "1001006"  [label="CFG: "];
"1001005" -> "1001004"  [label="AST: "];
"1001006" -> "1001004"  [label="AST: "];
"1001019" -> "1001004"  [label="CFG: "];
"1001004" -> "1001415"  [label="DDG: line_color"];
"1001004" -> "1001415"  [label="DDG: ((sep == SEP_CHAR_SELECTED)\n                     ^ (out_invert && (color_option < 0)))\n                    ? selected_line_color  : context_line_color"];
"1001004" -> "1001067"  [label="DDG: line_color"];
"1001018" -> "1001003"  [label="AST: "];
"1001018" -> "1001020"  [label="CFG: "];
"1001019" -> "1001018"  [label="AST: "];
"1001020" -> "1001018"  [label="AST: "];
"1001035" -> "1001018"  [label="CFG: "];
"1001018" -> "1001415"  [label="DDG: match_color"];
"1001018" -> "1001415"  [label="DDG: sep == SEP_CHAR_SELECTED\n                     ? selected_match_color : context_match_color"];
"1001067" -> "1001065"  [label="AST: "];
"1001067" -> "1001070"  [label="CFG: "];
"1001068" -> "1001067"  [label="AST: "];
"1001069" -> "1001067"  [label="AST: "];
"1001070" -> "1001067"  [label="AST: "];
"1001065" -> "1001067"  [label="CFG: "];
"1001067" -> "1001415"  [label="DDG: line_color"];
"1001067" -> "1001065"  [label="DDG: beg"];
"1001067" -> "1001065"  [label="DDG: lim"];
"1001067" -> "1001065"  [label="DDG: line_color"];
"1001052" -> "1001067"  [label="DDG: beg"];
"1001067" -> "1001075"  [label="DDG: lim"];
"1001067" -> "1001081"  [label="DDG: lim"];
"1001067" -> "1001265"  [label="DDG: lim"];
"1001067" -> "1001310"  [label="DDG: lim"];
"1001052" -> "1001045"  [label="AST: "];
"1001053" -> "1001052"  [label="AST: "];
"1001062" -> "1001052"  [label="CFG: "];
"1001052" -> "1001415"  [label="DDG: print_line_middle (beg, lim, line_color, match_color)"];
"1001052" -> "1001075"  [label="DDG: beg"];
"1001052" -> "1001081"  [label="DDG: beg"];
"1001052" -> "1001181"  [label="DDG: beg"];
"1001052" -> "1001235"  [label="DDG: beg"];
"1001075" -> "1001072"  [label="AST: "];
"1001075" -> "1001077"  [label="CFG: "];
"1001076" -> "1001075"  [label="AST: "];
"1001077" -> "1001075"  [label="AST: "];
"1001072" -> "1001075"  [label="CFG: "];
"1001075" -> "1001072"  [label="DDG: lim"];
"1001075" -> "1001072"  [label="DDG: beg"];
"1001065" -> "1001075"  [label="DDG: beg"];
"1001075" -> "1001081"  [label="DDG: lim"];
"1001075" -> "1001081"  [label="DDG: beg"];
"1001075" -> "1001181"  [label="DDG: beg"];
"1001075" -> "1001235"  [label="DDG: beg"];
"1001075" -> "1001265"  [label="DDG: lim"];
"1001075" -> "1001310"  [label="DDG: lim"];
"1001065" -> "1001059"  [label="AST: "];
"1001066" -> "1001065"  [label="AST: "];
"1001074" -> "1001065"  [label="CFG: "];
"1001065" -> "1001415"  [label="DDG: print_line_tail (beg, lim, line_color)"];
"1001065" -> "1001081"  [label="DDG: beg"];
"1001065" -> "1001181"  [label="DDG: beg"];
"1001065" -> "1001235"  [label="DDG: beg"];
"1001081" -> "1001078"  [label="AST: "];
"1001081" -> "1001083"  [label="CFG: "];
"1001082" -> "1001081"  [label="AST: "];
"1001083" -> "1001081"  [label="AST: "];
"1001084" -> "1001081"  [label="CFG: "];
"1001081" -> "1001078"  [label="DDG: beg"];
"1001081" -> "1001078"  [label="DDG: lim"];
"1001081" -> "1001265"  [label="DDG: lim"];
"1001081" -> "1001310"  [label="DDG: lim"];
"1001169" -> "1001164"  [label="AST: "];
"1001169" -> "1001171"  [label="CFG: "];
"1001170" -> "1001169"  [label="AST: "];
"1001171" -> "1001169"  [label="AST: "];
"1001177" -> "1001169"  [label="CFG: "];
"1001169" -> "1001415"  [label="DDG: eol"];
"1001169" -> "1001415"  [label="DDG: eolbyte"];
"1001169" -> "1001242"  [label="DDG: eol"];
"1001169" -> "1001277"  [label="DDG: eol"];
"1001086" -> "1001085"  [label="AST: "];
"1001086" -> "1001087"  [label="CFG: "];
"1001087" -> "1001086"  [label="AST: "];
"1001090" -> "1001086"  [label="CFG: "];
"1001098" -> "1001086"  [label="CFG: "];
"1001086" -> "1001415"  [label="DDG: stdout"];
"1001086" -> "1001415"  [label="DDG: ferror (stdout)"];
"1001078" -> "1001086"  [label="DDG: stdout"];
"1001086" -> "1001102"  [label="DDG: stdout"];
"1001078" -> "1001071"  [label="AST: "];
"1001078" -> "1001084"  [label="CFG: "];
"1001079" -> "1001078"  [label="AST: "];
"1001080" -> "1001078"  [label="AST: "];
"1001084" -> "1001078"  [label="AST: "];
"1001087" -> "1001078"  [label="CFG: "];
"1001078" -> "1001415"  [label="DDG: fwrite (beg, 1, lim - beg, stdout)"];
"1001078" -> "1001415"  [label="DDG: lim - beg"];
"1001078" -> "1001181"  [label="DDG: beg"];
"1001078" -> "1001235"  [label="DDG: beg"];
"1001102" -> "1001100"  [label="AST: "];
"1001102" -> "1001103"  [label="CFG: "];
"1001103" -> "1001102"  [label="AST: "];
"1001107" -> "1001102"  [label="CFG: "];
"1001102" -> "1001415"  [label="DDG: stdout"];
"1001102" -> "1001415"  [label="DDG: fflush (stdout)"];
"1001231" -> "1001223"  [label="AST: "];
"1001231" -> "1001233"  [label="CFG: "];
"1001232" -> "1001231"  [label="AST: "];
"1001233" -> "1001231"  [label="AST: "];
"1001236" -> "1001231"  [label="CFG: "];
"1001231" -> "1001415"  [label="DDG: stdout"];
"1001231" -> "1001415"  [label="DDG: fputc ('\n', stdout)"];
}
