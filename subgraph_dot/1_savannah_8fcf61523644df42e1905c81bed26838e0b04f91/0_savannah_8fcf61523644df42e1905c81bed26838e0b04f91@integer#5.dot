digraph "0_savannah_8fcf61523644df42e1905c81bed26838e0b04f91@integer" {
"1000955" [label="(Call,tail_size  =  lim - eol_size - beg)"];
"1000957" [label="(Call,lim - eol_size - beg)"];
"1000933" [label="(Call,lim[-1] == eolbyte)"];
"1000930" [label="(Call,lim > beg)"];
"1000947" [label="(Call,lim[-(1 + eol_size)] == '\r')"];
"1000943" [label="(Call,lim - eol_size)"];
"1000927" [label="(Call,eol_size   = (lim > beg && lim[-1] == eolbyte))"];
"1000929" [label="(Call,lim > beg && lim[-1] == eolbyte)"];
"1000959" [label="(Call,eol_size - beg)"];
"1000939" [label="(Call,eol_size  += (lim - eol_size > beg && lim[-(1 + eol_size)] == '\r'))"];
"1000941" [label="(Call,lim - eol_size > beg && lim[-(1 + eol_size)] == '\r')"];
"1000942" [label="(Call,lim - eol_size > beg)"];
"1000963" [label="(Call,tail_size > 0)"];
"1000969" [label="(Call,fwrite (beg, 1, tail_size, stdout))"];
"1000974" [label="(Call,beg += tail_size)"];
"1000979" [label="(Return,return beg;)"];
"1000928" [label="(Identifier,eol_size)"];
"1000943" [label="(Call,lim - eol_size)"];
"1001415" [label="(MethodReturn,RET)"];
"1000957" [label="(Call,lim - eol_size - beg)"];
"1000966" [label="(Block,)"];
"1000974" [label="(Call,beg += tail_size)"];
"1000959" [label="(Call,eol_size - beg)"];
"1000970" [label="(Identifier,beg)"];
"1000931" [label="(Identifier,lim)"];
"1000971" [label="(Literal,1)"];
"1000929" [label="(Call,lim > beg && lim[-1] == eolbyte)"];
"1000976" [label="(Identifier,tail_size)"];
"1000954" [label="(Literal,'\r')"];
"1000950" [label="(Call,-(1 + eol_size))"];
"1000939" [label="(Call,eol_size  += (lim - eol_size > beg && lim[-(1 + eol_size)] == '\r'))"];
"1000941" [label="(Call,lim - eol_size > beg && lim[-(1 + eol_size)] == '\r')"];
"1000973" [label="(Identifier,stdout)"];
"1000972" [label="(Identifier,tail_size)"];
"1000946" [label="(Identifier,beg)"];
"1000965" [label="(Literal,0)"];
"1000940" [label="(Identifier,eol_size)"];
"1000955" [label="(Call,tail_size  =  lim - eol_size - beg)"];
"1000980" [label="(Identifier,beg)"];
"1000978" [label="(Identifier,line_color)"];
"1000958" [label="(Identifier,lim)"];
"1000975" [label="(Identifier,beg)"];
"1000934" [label="(Call,lim[-1])"];
"1000949" [label="(Identifier,lim)"];
"1000968" [label="(Identifier,line_color)"];
"1000945" [label="(Identifier,eol_size)"];
"1000951" [label="(Call,1 + eol_size)"];
"1000962" [label="(ControlStructure,if (tail_size > 0))"];
"1000944" [label="(Identifier,lim)"];
"1000969" [label="(Call,fwrite (beg, 1, tail_size, stdout))"];
"1000956" [label="(Identifier,tail_size)"];
"1000933" [label="(Call,lim[-1] == eolbyte)"];
"1000930" [label="(Call,lim > beg)"];
"1000938" [label="(Identifier,eolbyte)"];
"1000979" [label="(Return,return beg;)"];
"1000947" [label="(Call,lim[-(1 + eol_size)] == '\r')"];
"1000963" [label="(Call,tail_size > 0)"];
"1000960" [label="(Identifier,eol_size)"];
"1000961" [label="(Identifier,beg)"];
"1000964" [label="(Identifier,tail_size)"];
"1000924" [label="(Block,)"];
"1000948" [label="(Call,lim[-(1 + eol_size)])"];
"1000932" [label="(Identifier,beg)"];
"1000942" [label="(Call,lim - eol_size > beg)"];
"1000927" [label="(Call,eol_size   = (lim > beg && lim[-1] == eolbyte))"];
"1000935" [label="(Identifier,lim)"];
"1000955" -> "1000924"  [label="AST: "];
"1000955" -> "1000957"  [label="CFG: "];
"1000956" -> "1000955"  [label="AST: "];
"1000957" -> "1000955"  [label="AST: "];
"1000964" -> "1000955"  [label="CFG: "];
"1000955" -> "1001415"  [label="DDG: lim - eol_size - beg"];
"1000957" -> "1000955"  [label="DDG: lim"];
"1000957" -> "1000955"  [label="DDG: eol_size - beg"];
"1000955" -> "1000963"  [label="DDG: tail_size"];
"1000957" -> "1000959"  [label="CFG: "];
"1000958" -> "1000957"  [label="AST: "];
"1000959" -> "1000957"  [label="AST: "];
"1000957" -> "1001415"  [label="DDG: lim"];
"1000957" -> "1001415"  [label="DDG: eol_size - beg"];
"1000933" -> "1000957"  [label="DDG: lim[-1]"];
"1000947" -> "1000957"  [label="DDG: lim[-(1 + eol_size)]"];
"1000943" -> "1000957"  [label="DDG: lim"];
"1000959" -> "1000957"  [label="DDG: eol_size"];
"1000959" -> "1000957"  [label="DDG: beg"];
"1000933" -> "1000929"  [label="AST: "];
"1000933" -> "1000938"  [label="CFG: "];
"1000934" -> "1000933"  [label="AST: "];
"1000938" -> "1000933"  [label="AST: "];
"1000929" -> "1000933"  [label="CFG: "];
"1000933" -> "1001415"  [label="DDG: lim[-1]"];
"1000933" -> "1001415"  [label="DDG: eolbyte"];
"1000933" -> "1000929"  [label="DDG: lim[-1]"];
"1000933" -> "1000929"  [label="DDG: eolbyte"];
"1000930" -> "1000933"  [label="DDG: lim"];
"1000933" -> "1000943"  [label="DDG: lim[-1]"];
"1000930" -> "1000929"  [label="AST: "];
"1000930" -> "1000932"  [label="CFG: "];
"1000931" -> "1000930"  [label="AST: "];
"1000932" -> "1000930"  [label="AST: "];
"1000935" -> "1000930"  [label="CFG: "];
"1000929" -> "1000930"  [label="CFG: "];
"1000930" -> "1000929"  [label="DDG: lim"];
"1000930" -> "1000929"  [label="DDG: beg"];
"1000930" -> "1000943"  [label="DDG: lim"];
"1000930" -> "1000942"  [label="DDG: beg"];
"1000947" -> "1000941"  [label="AST: "];
"1000947" -> "1000954"  [label="CFG: "];
"1000948" -> "1000947"  [label="AST: "];
"1000954" -> "1000947"  [label="AST: "];
"1000941" -> "1000947"  [label="CFG: "];
"1000947" -> "1001415"  [label="DDG: lim[-(1 + eol_size)]"];
"1000947" -> "1000941"  [label="DDG: lim[-(1 + eol_size)]"];
"1000947" -> "1000941"  [label="DDG: '\r'"];
"1000943" -> "1000947"  [label="DDG: lim"];
"1000943" -> "1000942"  [label="AST: "];
"1000943" -> "1000945"  [label="CFG: "];
"1000944" -> "1000943"  [label="AST: "];
"1000945" -> "1000943"  [label="AST: "];
"1000946" -> "1000943"  [label="CFG: "];
"1000943" -> "1000939"  [label="DDG: eol_size"];
"1000943" -> "1000942"  [label="DDG: lim"];
"1000943" -> "1000942"  [label="DDG: eol_size"];
"1000927" -> "1000943"  [label="DDG: eol_size"];
"1000943" -> "1000950"  [label="DDG: eol_size"];
"1000943" -> "1000951"  [label="DDG: eol_size"];
"1000927" -> "1000924"  [label="AST: "];
"1000927" -> "1000929"  [label="CFG: "];
"1000928" -> "1000927"  [label="AST: "];
"1000929" -> "1000927"  [label="AST: "];
"1000940" -> "1000927"  [label="CFG: "];
"1000927" -> "1001415"  [label="DDG: lim > beg && lim[-1] == eolbyte"];
"1000929" -> "1000927"  [label="DDG: lim > beg"];
"1000929" -> "1000927"  [label="DDG: lim[-1] == eolbyte"];
"1000929" -> "1001415"  [label="DDG: lim[-1] == eolbyte"];
"1000929" -> "1001415"  [label="DDG: lim > beg"];
"1000959" -> "1000961"  [label="CFG: "];
"1000960" -> "1000959"  [label="AST: "];
"1000961" -> "1000959"  [label="AST: "];
"1000959" -> "1001415"  [label="DDG: beg"];
"1000959" -> "1001415"  [label="DDG: eol_size"];
"1000939" -> "1000959"  [label="DDG: eol_size"];
"1000942" -> "1000959"  [label="DDG: beg"];
"1000959" -> "1000969"  [label="DDG: beg"];
"1000959" -> "1000979"  [label="DDG: beg"];
"1000939" -> "1000924"  [label="AST: "];
"1000939" -> "1000941"  [label="CFG: "];
"1000940" -> "1000939"  [label="AST: "];
"1000941" -> "1000939"  [label="AST: "];
"1000956" -> "1000939"  [label="CFG: "];
"1000939" -> "1001415"  [label="DDG: lim - eol_size > beg && lim[-(1 + eol_size)] == '\r'"];
"1000941" -> "1000939"  [label="DDG: lim - eol_size > beg"];
"1000941" -> "1000939"  [label="DDG: lim[-(1 + eol_size)] == '\r'"];
"1000941" -> "1000942"  [label="CFG: "];
"1000942" -> "1000941"  [label="AST: "];
"1000941" -> "1001415"  [label="DDG: lim - eol_size > beg"];
"1000941" -> "1001415"  [label="DDG: lim[-(1 + eol_size)] == '\r'"];
"1000942" -> "1000941"  [label="DDG: lim - eol_size"];
"1000942" -> "1000941"  [label="DDG: beg"];
"1000942" -> "1000946"  [label="CFG: "];
"1000946" -> "1000942"  [label="AST: "];
"1000949" -> "1000942"  [label="CFG: "];
"1000942" -> "1001415"  [label="DDG: lim - eol_size"];
"1000963" -> "1000962"  [label="AST: "];
"1000963" -> "1000965"  [label="CFG: "];
"1000964" -> "1000963"  [label="AST: "];
"1000965" -> "1000963"  [label="AST: "];
"1000968" -> "1000963"  [label="CFG: "];
"1000980" -> "1000963"  [label="CFG: "];
"1000963" -> "1001415"  [label="DDG: tail_size"];
"1000963" -> "1001415"  [label="DDG: tail_size > 0"];
"1000963" -> "1000969"  [label="DDG: tail_size"];
"1000969" -> "1000966"  [label="AST: "];
"1000969" -> "1000973"  [label="CFG: "];
"1000970" -> "1000969"  [label="AST: "];
"1000971" -> "1000969"  [label="AST: "];
"1000972" -> "1000969"  [label="AST: "];
"1000973" -> "1000969"  [label="AST: "];
"1000975" -> "1000969"  [label="CFG: "];
"1000969" -> "1001415"  [label="DDG: fwrite (beg, 1, tail_size, stdout)"];
"1000969" -> "1001415"  [label="DDG: stdout"];
"1000969" -> "1000974"  [label="DDG: tail_size"];
"1000969" -> "1000974"  [label="DDG: beg"];
"1000974" -> "1000966"  [label="AST: "];
"1000974" -> "1000976"  [label="CFG: "];
"1000975" -> "1000974"  [label="AST: "];
"1000976" -> "1000974"  [label="AST: "];
"1000978" -> "1000974"  [label="CFG: "];
"1000974" -> "1001415"  [label="DDG: beg"];
"1000974" -> "1001415"  [label="DDG: tail_size"];
"1000974" -> "1000979"  [label="DDG: beg"];
"1000979" -> "1000924"  [label="AST: "];
"1000979" -> "1000980"  [label="CFG: "];
"1000980" -> "1000979"  [label="AST: "];
"1001415" -> "1000979"  [label="CFG: "];
"1000979" -> "1001415"  [label="DDG: <RET>"];
"1000980" -> "1000979"  [label="DDG: beg"];
}
