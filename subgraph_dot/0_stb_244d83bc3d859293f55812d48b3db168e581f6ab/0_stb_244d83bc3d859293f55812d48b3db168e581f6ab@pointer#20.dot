digraph "0_stb_244d83bc3d859293f55812d48b3db168e581f6ab@pointer" {
"1000200" [label="(Call,***part_classdata = (uint8 ***) temp_block_array(f,f->channels, part_read * sizeof(**part_classdata)))"];
"1000202" [label="(Call,(uint8 ***) temp_block_array(f,f->channels, part_read * sizeof(**part_classdata)))"];
"1000204" [label="(Call,temp_block_array(f,f->channels, part_read * sizeof(**part_classdata)))"];
"1000197" [label="(Call,temp_alloc_save(f))"];
"1000101" [label="(MethodParameterIn,vorb *f)"];
"1000209" [label="(Call,part_read * sizeof(**part_classdata))"];
"1000187" [label="(Call,part_read = n_read / r->part_size)"];
"1000189" [label="(Call,n_read / r->part_size)"];
"1000181" [label="(Call,n_read = limit_r_end - limit_r_begin)"];
"1000183" [label="(Call,limit_r_end - limit_r_begin)"];
"1000168" [label="(Call,limit_r_end   = (r->end   < actual_size ? r->end   : actual_size))"];
"1000171" [label="(Call,r->end   < actual_size)"];
"1000158" [label="(Call,r->begin < actual_size)"];
"1000144" [label="(Call,actual_size = rtype == 2 ? n*2 : n)"];
"1000150" [label="(Call,n*2)"];
"1000104" [label="(MethodParameterIn,int n)"];
"1000155" [label="(Call,limit_r_begin = (r->begin < actual_size ? r->begin : actual_size))"];
"1000961" [label="(Call,temp_free(f,part_classdata))"];
"1000964" [label="(Call,temp_alloc_restore(f,temp_alloc_point))"];
"1000948" [label="(Call,residue_decode(f, book, target, offset, n, rtype))"];
"1000177" [label="(Identifier,r)"];
"1000215" [label="(Call,CHECK(f))"];
"1000236" [label="(Call,sizeof(float) * n)"];
"1000472" [label="(Call,pcount*r->part_size)"];
"1000216" [label="(Identifier,f)"];
"1000171" [label="(Call,r->end   < actual_size)"];
"1000172" [label="(Call,r->end)"];
"1000800" [label="(Call,pcount < part_read)"];
"1000304" [label="(Call,pcount*r->part_size)"];
"1000293" [label="(Call,pcount < part_read)"];
"1000628" [label="(Call,pcount*r->part_size)"];
"1000145" [label="(Identifier,actual_size)"];
"1000962" [label="(Identifier,f)"];
"1000624" [label="(Call,r->begin + pcount*r->part_size)"];
"1000184" [label="(Identifier,limit_r_end)"];
"1000104" [label="(MethodParameterIn,int n)"];
"1000461" [label="(Call,pcount < part_read)"];
"1000156" [label="(Identifier,limit_r_begin)"];
"1000927" [label="(Call,pcount * r->part_size)"];
"1000183" [label="(Call,limit_r_end - limit_r_begin)"];
"1000959" [label="(Call,CHECK(f))"];
"1000151" [label="(Identifier,n)"];
"1000836" [label="(Call,DECODE(temp,f,c))"];
"1000166" [label="(Identifier,actual_size)"];
"1000187" [label="(Call,part_read = n_read / r->part_size)"];
"1000421" [label="(Call,codebook_decode_deinterleave_repeat(f, book, residue_buffers, ch, &c_inter, &p_inter, n, r->part_size))"];
"1000158" [label="(Call,r->begin < actual_size)"];
"1000466" [label="(Call,z = r->begin + pcount*r->part_size)"];
"1000182" [label="(Identifier,n_read)"];
"1000205" [label="(Identifier,f)"];
"1000206" [label="(Call,f->channels)"];
"1000211" [label="(Call,sizeof(**part_classdata))"];
"1000175" [label="(Identifier,actual_size)"];
"1000196" [label="(Identifier,temp_alloc_point)"];
"1000152" [label="(Literal,2)"];
"1000202" [label="(Call,(uint8 ***) temp_block_array(f,f->channels, part_read * sizeof(**part_classdata)))"];
"1000779" [label="(Call,CHECK(f))"];
"1000185" [label="(Identifier,limit_r_begin)"];
"1000168" [label="(Call,limit_r_end   = (r->end   < actual_size ? r->end   : actual_size))"];
"1000585" [label="(Call,codebook_decode_deinterleave_repeat(f, book, residue_buffers, ch, &c_inter, &p_inter, n, r->part_size))"];
"1000921" [label="(Call,offset = r->begin + pcount * r->part_size)"];
"1000188" [label="(Identifier,part_read)"];
"1000966" [label="(Identifier,temp_alloc_point)"];
"1000159" [label="(Call,r->begin)"];
"1000189" [label="(Call,n_read / r->part_size)"];
"1000162" [label="(Identifier,actual_size)"];
"1000501" [label="(Call,DECODE(q,f,c))"];
"1000146" [label="(Call,rtype == 2 ? n*2 : n)"];
"1000150" [label="(Call,n*2)"];
"1000190" [label="(Identifier,n_read)"];
"1000191" [label="(Call,r->part_size)"];
"1000169" [label="(Identifier,limit_r_end)"];
"1000210" [label="(Identifier,part_read)"];
"1000337" [label="(Call,DECODE(q,f,c))"];
"1000157" [label="(Call,r->begin < actual_size ? r->begin : actual_size)"];
"1000961" [label="(Call,temp_free(f,part_classdata))"];
"1000195" [label="(Call,temp_alloc_point = temp_alloc_save(f))"];
"1000107" [label="(Block,)"];
"1000181" [label="(Call,n_read = limit_r_end - limit_r_begin)"];
"1000622" [label="(Call,z = r->begin + pcount*r->part_size)"];
"1000661" [label="(Call,DECODE(q,f,c))"];
"1000155" [label="(Call,limit_r_begin = (r->begin < actual_size ? r->begin : actual_size))"];
"1000209" [label="(Call,part_read * sizeof(**part_classdata))"];
"1000204" [label="(Call,temp_block_array(f,f->channels, part_read * sizeof(**part_classdata)))"];
"1000923" [label="(Call,r->begin + pcount * r->part_size)"];
"1000965" [label="(Identifier,f)"];
"1000933" [label="(Call,n = r->part_size)"];
"1000468" [label="(Call,r->begin + pcount*r->part_size)"];
"1000298" [label="(Call,z = r->begin + pcount*r->part_size)"];
"1000617" [label="(Call,pcount < part_read)"];
"1000144" [label="(Call,actual_size = rtype == 2 ? n*2 : n)"];
"1000179" [label="(Identifier,actual_size)"];
"1000201" [label="(Identifier,part_classdata)"];
"1000300" [label="(Call,r->begin + pcount*r->part_size)"];
"1000164" [label="(Identifier,r)"];
"1000964" [label="(Call,temp_alloc_restore(f,temp_alloc_point))"];
"1000170" [label="(Call,r->end   < actual_size ? r->end   : actual_size)"];
"1000101" [label="(MethodParameterIn,vorb *f)"];
"1000967" [label="(MethodReturn,static void)"];
"1000745" [label="(Call,codebook_decode_deinterleave_repeat(f, book, residue_buffers, ch, &c_inter, &p_inter, n, r->part_size))"];
"1000197" [label="(Call,temp_alloc_save(f))"];
"1000200" [label="(Call,***part_classdata = (uint8 ***) temp_block_array(f,f->channels, part_read * sizeof(**part_classdata)))"];
"1000198" [label="(Identifier,f)"];
"1000963" [label="(Identifier,part_classdata)"];
"1000200" -> "1000107"  [label="AST: "];
"1000200" -> "1000202"  [label="CFG: "];
"1000201" -> "1000200"  [label="AST: "];
"1000202" -> "1000200"  [label="AST: "];
"1000216" -> "1000200"  [label="CFG: "];
"1000200" -> "1000967"  [label="DDG: (uint8 ***) temp_block_array(f,f->channels, part_read * sizeof(**part_classdata))"];
"1000202" -> "1000200"  [label="DDG: temp_block_array(f,f->channels, part_read * sizeof(**part_classdata))"];
"1000200" -> "1000961"  [label="DDG: part_classdata"];
"1000202" -> "1000204"  [label="CFG: "];
"1000203" -> "1000202"  [label="AST: "];
"1000204" -> "1000202"  [label="AST: "];
"1000202" -> "1000967"  [label="DDG: temp_block_array(f,f->channels, part_read * sizeof(**part_classdata))"];
"1000204" -> "1000202"  [label="DDG: f"];
"1000204" -> "1000202"  [label="DDG: f->channels"];
"1000204" -> "1000202"  [label="DDG: part_read * sizeof(**part_classdata)"];
"1000204" -> "1000209"  [label="CFG: "];
"1000205" -> "1000204"  [label="AST: "];
"1000206" -> "1000204"  [label="AST: "];
"1000209" -> "1000204"  [label="AST: "];
"1000204" -> "1000967"  [label="DDG: part_read * sizeof(**part_classdata)"];
"1000204" -> "1000967"  [label="DDG: f->channels"];
"1000197" -> "1000204"  [label="DDG: f"];
"1000101" -> "1000204"  [label="DDG: f"];
"1000209" -> "1000204"  [label="DDG: part_read"];
"1000204" -> "1000215"  [label="DDG: f"];
"1000197" -> "1000195"  [label="AST: "];
"1000197" -> "1000198"  [label="CFG: "];
"1000198" -> "1000197"  [label="AST: "];
"1000195" -> "1000197"  [label="CFG: "];
"1000197" -> "1000195"  [label="DDG: f"];
"1000101" -> "1000197"  [label="DDG: f"];
"1000101" -> "1000100"  [label="AST: "];
"1000101" -> "1000967"  [label="DDG: f"];
"1000101" -> "1000215"  [label="DDG: f"];
"1000101" -> "1000337"  [label="DDG: f"];
"1000101" -> "1000421"  [label="DDG: f"];
"1000101" -> "1000501"  [label="DDG: f"];
"1000101" -> "1000585"  [label="DDG: f"];
"1000101" -> "1000661"  [label="DDG: f"];
"1000101" -> "1000745"  [label="DDG: f"];
"1000101" -> "1000779"  [label="DDG: f"];
"1000101" -> "1000836"  [label="DDG: f"];
"1000101" -> "1000948"  [label="DDG: f"];
"1000101" -> "1000959"  [label="DDG: f"];
"1000101" -> "1000961"  [label="DDG: f"];
"1000101" -> "1000964"  [label="DDG: f"];
"1000209" -> "1000211"  [label="CFG: "];
"1000210" -> "1000209"  [label="AST: "];
"1000211" -> "1000209"  [label="AST: "];
"1000209" -> "1000967"  [label="DDG: part_read"];
"1000187" -> "1000209"  [label="DDG: part_read"];
"1000209" -> "1000293"  [label="DDG: part_read"];
"1000209" -> "1000461"  [label="DDG: part_read"];
"1000209" -> "1000617"  [label="DDG: part_read"];
"1000209" -> "1000800"  [label="DDG: part_read"];
"1000187" -> "1000107"  [label="AST: "];
"1000187" -> "1000189"  [label="CFG: "];
"1000188" -> "1000187"  [label="AST: "];
"1000189" -> "1000187"  [label="AST: "];
"1000196" -> "1000187"  [label="CFG: "];
"1000187" -> "1000967"  [label="DDG: n_read / r->part_size"];
"1000189" -> "1000187"  [label="DDG: n_read"];
"1000189" -> "1000187"  [label="DDG: r->part_size"];
"1000189" -> "1000191"  [label="CFG: "];
"1000190" -> "1000189"  [label="AST: "];
"1000191" -> "1000189"  [label="AST: "];
"1000189" -> "1000967"  [label="DDG: n_read"];
"1000189" -> "1000967"  [label="DDG: r->part_size"];
"1000181" -> "1000189"  [label="DDG: n_read"];
"1000189" -> "1000304"  [label="DDG: r->part_size"];
"1000189" -> "1000472"  [label="DDG: r->part_size"];
"1000189" -> "1000628"  [label="DDG: r->part_size"];
"1000189" -> "1000927"  [label="DDG: r->part_size"];
"1000181" -> "1000107"  [label="AST: "];
"1000181" -> "1000183"  [label="CFG: "];
"1000182" -> "1000181"  [label="AST: "];
"1000183" -> "1000181"  [label="AST: "];
"1000188" -> "1000181"  [label="CFG: "];
"1000181" -> "1000967"  [label="DDG: limit_r_end - limit_r_begin"];
"1000183" -> "1000181"  [label="DDG: limit_r_end"];
"1000183" -> "1000181"  [label="DDG: limit_r_begin"];
"1000183" -> "1000185"  [label="CFG: "];
"1000184" -> "1000183"  [label="AST: "];
"1000185" -> "1000183"  [label="AST: "];
"1000183" -> "1000967"  [label="DDG: limit_r_begin"];
"1000183" -> "1000967"  [label="DDG: limit_r_end"];
"1000168" -> "1000183"  [label="DDG: limit_r_end"];
"1000155" -> "1000183"  [label="DDG: limit_r_begin"];
"1000168" -> "1000107"  [label="AST: "];
"1000168" -> "1000170"  [label="CFG: "];
"1000169" -> "1000168"  [label="AST: "];
"1000170" -> "1000168"  [label="AST: "];
"1000182" -> "1000168"  [label="CFG: "];
"1000168" -> "1000967"  [label="DDG: r->end   < actual_size ? r->end   : actual_size"];
"1000171" -> "1000168"  [label="DDG: r->end"];
"1000171" -> "1000168"  [label="DDG: actual_size"];
"1000171" -> "1000170"  [label="AST: "];
"1000171" -> "1000175"  [label="CFG: "];
"1000172" -> "1000171"  [label="AST: "];
"1000175" -> "1000171"  [label="AST: "];
"1000177" -> "1000171"  [label="CFG: "];
"1000179" -> "1000171"  [label="CFG: "];
"1000158" -> "1000171"  [label="DDG: actual_size"];
"1000171" -> "1000170"  [label="DDG: r->end"];
"1000171" -> "1000170"  [label="DDG: actual_size"];
"1000158" -> "1000157"  [label="AST: "];
"1000158" -> "1000162"  [label="CFG: "];
"1000159" -> "1000158"  [label="AST: "];
"1000162" -> "1000158"  [label="AST: "];
"1000164" -> "1000158"  [label="CFG: "];
"1000166" -> "1000158"  [label="CFG: "];
"1000158" -> "1000155"  [label="DDG: r->begin"];
"1000158" -> "1000155"  [label="DDG: actual_size"];
"1000144" -> "1000158"  [label="DDG: actual_size"];
"1000158" -> "1000157"  [label="DDG: r->begin"];
"1000158" -> "1000157"  [label="DDG: actual_size"];
"1000158" -> "1000298"  [label="DDG: r->begin"];
"1000158" -> "1000300"  [label="DDG: r->begin"];
"1000158" -> "1000466"  [label="DDG: r->begin"];
"1000158" -> "1000468"  [label="DDG: r->begin"];
"1000158" -> "1000622"  [label="DDG: r->begin"];
"1000158" -> "1000624"  [label="DDG: r->begin"];
"1000158" -> "1000921"  [label="DDG: r->begin"];
"1000158" -> "1000923"  [label="DDG: r->begin"];
"1000144" -> "1000107"  [label="AST: "];
"1000144" -> "1000146"  [label="CFG: "];
"1000145" -> "1000144"  [label="AST: "];
"1000146" -> "1000144"  [label="AST: "];
"1000156" -> "1000144"  [label="CFG: "];
"1000144" -> "1000967"  [label="DDG: rtype == 2 ? n*2 : n"];
"1000150" -> "1000144"  [label="DDG: n"];
"1000150" -> "1000144"  [label="DDG: 2"];
"1000104" -> "1000144"  [label="DDG: n"];
"1000150" -> "1000146"  [label="AST: "];
"1000150" -> "1000152"  [label="CFG: "];
"1000151" -> "1000150"  [label="AST: "];
"1000152" -> "1000150"  [label="AST: "];
"1000146" -> "1000150"  [label="CFG: "];
"1000150" -> "1000146"  [label="DDG: n"];
"1000150" -> "1000146"  [label="DDG: 2"];
"1000104" -> "1000150"  [label="DDG: n"];
"1000150" -> "1000236"  [label="DDG: n"];
"1000150" -> "1000421"  [label="DDG: n"];
"1000150" -> "1000585"  [label="DDG: n"];
"1000150" -> "1000745"  [label="DDG: n"];
"1000104" -> "1000100"  [label="AST: "];
"1000104" -> "1000967"  [label="DDG: n"];
"1000104" -> "1000146"  [label="DDG: n"];
"1000104" -> "1000236"  [label="DDG: n"];
"1000104" -> "1000421"  [label="DDG: n"];
"1000104" -> "1000585"  [label="DDG: n"];
"1000104" -> "1000745"  [label="DDG: n"];
"1000104" -> "1000933"  [label="DDG: n"];
"1000104" -> "1000948"  [label="DDG: n"];
"1000155" -> "1000107"  [label="AST: "];
"1000155" -> "1000157"  [label="CFG: "];
"1000156" -> "1000155"  [label="AST: "];
"1000157" -> "1000155"  [label="AST: "];
"1000169" -> "1000155"  [label="CFG: "];
"1000155" -> "1000967"  [label="DDG: r->begin < actual_size ? r->begin : actual_size"];
"1000961" -> "1000107"  [label="AST: "];
"1000961" -> "1000963"  [label="CFG: "];
"1000962" -> "1000961"  [label="AST: "];
"1000963" -> "1000961"  [label="AST: "];
"1000965" -> "1000961"  [label="CFG: "];
"1000961" -> "1000967"  [label="DDG: temp_free(f,part_classdata)"];
"1000961" -> "1000967"  [label="DDG: part_classdata"];
"1000959" -> "1000961"  [label="DDG: f"];
"1000961" -> "1000964"  [label="DDG: f"];
"1000964" -> "1000107"  [label="AST: "];
"1000964" -> "1000966"  [label="CFG: "];
"1000965" -> "1000964"  [label="AST: "];
"1000966" -> "1000964"  [label="AST: "];
"1000967" -> "1000964"  [label="CFG: "];
"1000964" -> "1000967"  [label="DDG: f"];
"1000964" -> "1000967"  [label="DDG: temp_alloc_restore(f,temp_alloc_point)"];
"1000964" -> "1000967"  [label="DDG: temp_alloc_point"];
"1000195" -> "1000964"  [label="DDG: temp_alloc_point"];
}
