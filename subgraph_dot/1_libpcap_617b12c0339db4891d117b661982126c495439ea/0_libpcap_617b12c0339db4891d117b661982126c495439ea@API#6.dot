digraph "0_libpcap_617b12c0339db4891d117b661982126c495439ea@API" {
"1000121" [label="(Call,sendbufidx = 0)"];
"1000605" [label="(Call,sock_send(pars->sockctrl, sendbuf, sendbufidx, errbuf, PCAP_ERRBUF_SIZE))"];
"1000604" [label="(Call,sock_send(pars->sockctrl, sendbuf, sendbufidx, errbuf, PCAP_ERRBUF_SIZE) == -1)"];
"1000616" [label="(Call,rpcapd_log(LOGPRIO_ERROR, \"Send to client failed: %s\", errbuf))"];
"1000126" [label="(Identifier,alldevs)"];
"1000258" [label="(Call,sock_bufferize(NULL, sizeof(struct rpcap_header), NULL,\n\t    &sendbufidx, RPCAP_NETBUF_SIZE, SOCKBUF_CHECKONLY, errmsgbuf,\n\t    PCAP_ERRBUF_SIZE))"];
"1000122" [label="(Identifier,sendbufidx)"];
"1000617" [label="(Identifier,LOGPRIO_ERROR)"];
"1000273" [label="(Call,(struct rpcap_header *) sendbuf)"];
"1000577" [label="(Call,sock_bufferize(NULL, sizeof(struct rpcap_sockaddr), NULL,\n\t\t\t\t    &sendbufidx, RPCAP_NETBUF_SIZE, SOCKBUF_CHECKONLY, errmsgbuf, PCAP_ERRBUF_SIZE))"];
"1000610" [label="(Identifier,sendbufidx)"];
"1000137" [label="(Call,rpcapd_discard(pars->sockctrl, plen))"];
"1000603" [label="(ControlStructure,if (sock_send(pars->sockctrl, sendbuf, sendbufidx, errbuf, PCAP_ERRBUF_SIZE) == -1))"];
"1000618" [label="(Literal,\"Send to client failed: %s\")"];
"1000622" [label="(Literal,1)"];
"1000652" [label="(MethodReturn,RET)"];
"1000604" [label="(Call,sock_send(pars->sockctrl, sendbuf, sendbufidx, errbuf, PCAP_ERRBUF_SIZE) == -1)"];
"1000605" [label="(Call,sock_send(pars->sockctrl, sendbuf, sendbufidx, errbuf, PCAP_ERRBUF_SIZE))"];
"1000305" [label="(Call,sock_bufferize(NULL, sizeof(struct rpcap_findalldevs_if), NULL,\n\t\t    &sendbufidx, RPCAP_NETBUF_SIZE, SOCKBUF_CHECKONLY, errmsgbuf, PCAP_ERRBUF_SIZE))"];
"1000616" [label="(Call,rpcapd_log(LOGPRIO_ERROR, \"Send to client failed: %s\", errbuf))"];
"1000609" [label="(Identifier,sendbuf)"];
"1000611" [label="(Identifier,errbuf)"];
"1000123" [label="(Literal,0)"];
"1000613" [label="(Call,-1)"];
"1000116" [label="(Block,)"];
"1000619" [label="(Identifier,errbuf)"];
"1000434" [label="(Call,sock_bufferize(d->description, ldescr, sendbuf, &sendbufidx,\n\t\t    RPCAP_NETBUF_SIZE, SOCKBUF_BUFFERIZE, errmsgbuf,\n\t\t    PCAP_ERRBUF_SIZE))"];
"1000614" [label="(Literal,1)"];
"1000606" [label="(Call,pars->sockctrl)"];
"1000615" [label="(Block,)"];
"1000121" [label="(Call,sendbufidx = 0)"];
"1000624" [label="(Literal,0)"];
"1000612" [label="(Identifier,PCAP_ERRBUF_SIZE)"];
"1000121" -> "1000116"  [label="AST: "];
"1000121" -> "1000123"  [label="CFG: "];
"1000122" -> "1000121"  [label="AST: "];
"1000123" -> "1000121"  [label="AST: "];
"1000126" -> "1000121"  [label="CFG: "];
"1000121" -> "1000652"  [label="DDG: "];
"1000121" -> "1000605"  [label="DDG: "];
"1000605" -> "1000604"  [label="AST: "];
"1000605" -> "1000612"  [label="CFG: "];
"1000606" -> "1000605"  [label="AST: "];
"1000609" -> "1000605"  [label="AST: "];
"1000610" -> "1000605"  [label="AST: "];
"1000611" -> "1000605"  [label="AST: "];
"1000612" -> "1000605"  [label="AST: "];
"1000614" -> "1000605"  [label="CFG: "];
"1000605" -> "1000652"  [label="DDG: "];
"1000605" -> "1000652"  [label="DDG: "];
"1000605" -> "1000652"  [label="DDG: "];
"1000605" -> "1000652"  [label="DDG: "];
"1000605" -> "1000652"  [label="DDG: "];
"1000605" -> "1000604"  [label="DDG: "];
"1000605" -> "1000604"  [label="DDG: "];
"1000605" -> "1000604"  [label="DDG: "];
"1000605" -> "1000604"  [label="DDG: "];
"1000605" -> "1000604"  [label="DDG: "];
"1000137" -> "1000605"  [label="DDG: "];
"1000273" -> "1000605"  [label="DDG: "];
"1000434" -> "1000605"  [label="DDG: "];
"1000434" -> "1000605"  [label="DDG: "];
"1000305" -> "1000605"  [label="DDG: "];
"1000258" -> "1000605"  [label="DDG: "];
"1000577" -> "1000605"  [label="DDG: "];
"1000605" -> "1000616"  [label="DDG: "];
"1000604" -> "1000603"  [label="AST: "];
"1000604" -> "1000613"  [label="CFG: "];
"1000613" -> "1000604"  [label="AST: "];
"1000617" -> "1000604"  [label="CFG: "];
"1000624" -> "1000604"  [label="CFG: "];
"1000604" -> "1000652"  [label="DDG: "];
"1000604" -> "1000652"  [label="DDG: "];
"1000604" -> "1000652"  [label="DDG: "];
"1000613" -> "1000604"  [label="DDG: "];
"1000616" -> "1000615"  [label="AST: "];
"1000616" -> "1000619"  [label="CFG: "];
"1000617" -> "1000616"  [label="AST: "];
"1000618" -> "1000616"  [label="AST: "];
"1000619" -> "1000616"  [label="AST: "];
"1000622" -> "1000616"  [label="CFG: "];
"1000616" -> "1000652"  [label="DDG: "];
"1000616" -> "1000652"  [label="DDG: "];
"1000616" -> "1000652"  [label="DDG: "];
}
