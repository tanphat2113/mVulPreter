digraph "0_lxc_16af238036a5464ae8f2420ed3af214f0de875f9@API" {
"1000350" [label="(Call,close(ofd))"];
"1000334" [label="(Call,usernic_error(\"Failed to setns() to original network namespace \"\n\t\t\t      \"of PID %d: %s.\n\",\n\t\t\t      ofd, strerror(errno)))"];
"1000326" [label="(Call,setns(ofd, CLONE_NEWNET))"];
"1000145" [label="(Call,ofd < 0)"];
"1000139" [label="(Call,ofd = lxc_preserve_ns(getpid(), \"net\"))"];
"1000141" [label="(Call,lxc_preserve_ns(getpid(), \"net\"))"];
"1000189" [label="(Call,setns(fd, CLONE_NEWNET))"];
"1000160" [label="(Call,fd < 0)"];
"1000154" [label="(Call,fd = lxc_preserve_ns(pid, \"net\"))"];
"1000156" [label="(Call,lxc_preserve_ns(pid, \"net\"))"];
"1000107" [label="(MethodParameterIn,int pid)"];
"1000337" [label="(Call,strerror(errno))"];
"1000285" [label="(Call,strerror(errno))"];
"1000318" [label="(Call,strerror(errno))"];
"1000248" [label="(Call,strerror(errno))"];
"1000223" [label="(Call,strerror(errno))"];
"1000285" [label="(Call,strerror(errno))"];
"1000110" [label="(Block,)"];
"1000159" [label="(ControlStructure,if (fd < 0))"];
"1000246" [label="(Call,usernic_error(\"Failed to get netdev index: %s.\n\", strerror(errno)))"];
"1000158" [label="(Literal,\"net\")"];
"1000162" [label="(Literal,0)"];
"1000142" [label="(Call,getpid())"];
"1000220" [label="(Call,usernic_error(\"Failed to drop privilege by setting effective \"\n\t\t\t      \"user id and real user id to %d, and saved user \"\n\t\t\t      \"ID to 0: %s.\n\",\n\t\t\t      ruid, strerror(errno)))"];
"1000340" [label="(Identifier,fret)"];
"1000333" [label="(Block,)"];
"1000336" [label="(Identifier,ofd)"];
"1000169" [label="(Identifier,ret)"];
"1000223" [label="(Call,strerror(errno))"];
"1000107" [label="(MethodParameterIn,int pid)"];
"1000283" [label="(Call,usernic_error(\"Failed to get new netdev name: %s.\n\", strerror(errno)))"];
"1000147" [label="(Literal,0)"];
"1000224" [label="(Identifier,errno)"];
"1000351" [label="(Identifier,ofd)"];
"1000189" [label="(Call,setns(fd, CLONE_NEWNET))"];
"1000327" [label="(Identifier,ofd)"];
"1000324" [label="(Call,ret = setns(ofd, CLONE_NEWNET))"];
"1000326" [label="(Call,setns(ofd, CLONE_NEWNET))"];
"1000187" [label="(Call,ret = setns(fd, CLONE_NEWNET))"];
"1000350" [label="(Call,close(ofd))"];
"1000160" [label="(Call,fd < 0)"];
"1000338" [label="(Identifier,errno)"];
"1000191" [label="(Identifier,CLONE_NEWNET)"];
"1000328" [label="(Identifier,CLONE_NEWNET)"];
"1000164" [label="(Call,usernic_error(\"Failed opening network namespace path for '%d'.\", pid))"];
"1000154" [label="(Call,fd = lxc_preserve_ns(pid, \"net\"))"];
"1000345" [label="(Call,fd >= 0)"];
"1000354" [label="(MethodReturn,static int)"];
"1000161" [label="(Identifier,fd)"];
"1000141" [label="(Call,lxc_preserve_ns(getpid(), \"net\"))"];
"1000155" [label="(Identifier,fd)"];
"1000190" [label="(Identifier,fd)"];
"1000203" [label="(Call,usernic_error(\"Failed to setns() to the network namespace of \"\n\t\t\t      \"the container with PID %d: %s.\n\",\n\t\t\t      pid, strerror(errno)))"];
"1000318" [label="(Call,strerror(errno))"];
"1000248" [label="(Call,strerror(errno))"];
"1000157" [label="(Identifier,pid)"];
"1000139" [label="(Call,ofd = lxc_preserve_ns(getpid(), \"net\"))"];
"1000140" [label="(Identifier,ofd)"];
"1000145" [label="(Call,ofd < 0)"];
"1000165" [label="(Literal,\"Failed opening network namespace path for '%d'.\")"];
"1000156" [label="(Call,lxc_preserve_ns(pid, \"net\"))"];
"1000319" [label="(Identifier,errno)"];
"1000334" [label="(Call,usernic_error(\"Failed to setns() to original network namespace \"\n\t\t\t      \"of PID %d: %s.\n\",\n\t\t\t      ofd, strerror(errno)))"];
"1000192" [label="(Call,close(fd))"];
"1000313" [label="(Call,usernic_error(\"Failed to restore privilege by setting effective \"\n\t\t\t      \"user id to %d, real user id to %d, and saved user \"\n\t\t\t      \"ID to %d: %s.\n\",\n\t\t\t      ruid, euid, suid, strerror(errno)))"];
"1000249" [label="(Identifier,errno)"];
"1000143" [label="(Literal,\"net\")"];
"1000144" [label="(ControlStructure,if (ofd < 0))"];
"1000335" [label="(Literal,\"Failed to setns() to original network namespace \"\n\t\t\t      \"of PID %d: %s.\n\")"];
"1000150" [label="(Literal,\"Failed opening network namespace path for '%d'.\")"];
"1000353" [label="(Identifier,fret)"];
"1000146" [label="(Identifier,ofd)"];
"1000337" [label="(Call,strerror(errno))"];
"1000286" [label="(Identifier,errno)"];
"1000350" -> "1000110"  [label="AST: "];
"1000350" -> "1000351"  [label="CFG: "];
"1000351" -> "1000350"  [label="AST: "];
"1000353" -> "1000350"  [label="CFG: "];
"1000350" -> "1000354"  [label="DDG: "];
"1000350" -> "1000354"  [label="DDG: "];
"1000334" -> "1000350"  [label="DDG: "];
"1000326" -> "1000350"  [label="DDG: "];
"1000145" -> "1000350"  [label="DDG: "];
"1000334" -> "1000333"  [label="AST: "];
"1000334" -> "1000337"  [label="CFG: "];
"1000335" -> "1000334"  [label="AST: "];
"1000336" -> "1000334"  [label="AST: "];
"1000337" -> "1000334"  [label="AST: "];
"1000340" -> "1000334"  [label="CFG: "];
"1000334" -> "1000354"  [label="DDG: "];
"1000334" -> "1000354"  [label="DDG: "];
"1000326" -> "1000334"  [label="DDG: "];
"1000337" -> "1000334"  [label="DDG: "];
"1000326" -> "1000324"  [label="AST: "];
"1000326" -> "1000328"  [label="CFG: "];
"1000327" -> "1000326"  [label="AST: "];
"1000328" -> "1000326"  [label="AST: "];
"1000324" -> "1000326"  [label="CFG: "];
"1000326" -> "1000354"  [label="DDG: "];
"1000326" -> "1000324"  [label="DDG: "];
"1000326" -> "1000324"  [label="DDG: "];
"1000145" -> "1000326"  [label="DDG: "];
"1000189" -> "1000326"  [label="DDG: "];
"1000145" -> "1000144"  [label="AST: "];
"1000145" -> "1000147"  [label="CFG: "];
"1000146" -> "1000145"  [label="AST: "];
"1000147" -> "1000145"  [label="AST: "];
"1000150" -> "1000145"  [label="CFG: "];
"1000155" -> "1000145"  [label="CFG: "];
"1000145" -> "1000354"  [label="DDG: "];
"1000145" -> "1000354"  [label="DDG: "];
"1000139" -> "1000145"  [label="DDG: "];
"1000139" -> "1000110"  [label="AST: "];
"1000139" -> "1000141"  [label="CFG: "];
"1000140" -> "1000139"  [label="AST: "];
"1000141" -> "1000139"  [label="AST: "];
"1000146" -> "1000139"  [label="CFG: "];
"1000139" -> "1000354"  [label="DDG: "];
"1000141" -> "1000139"  [label="DDG: "];
"1000141" -> "1000139"  [label="DDG: "];
"1000141" -> "1000143"  [label="CFG: "];
"1000142" -> "1000141"  [label="AST: "];
"1000143" -> "1000141"  [label="AST: "];
"1000141" -> "1000354"  [label="DDG: "];
"1000189" -> "1000187"  [label="AST: "];
"1000189" -> "1000191"  [label="CFG: "];
"1000190" -> "1000189"  [label="AST: "];
"1000191" -> "1000189"  [label="AST: "];
"1000187" -> "1000189"  [label="CFG: "];
"1000189" -> "1000354"  [label="DDG: "];
"1000189" -> "1000187"  [label="DDG: "];
"1000189" -> "1000187"  [label="DDG: "];
"1000160" -> "1000189"  [label="DDG: "];
"1000189" -> "1000192"  [label="DDG: "];
"1000160" -> "1000159"  [label="AST: "];
"1000160" -> "1000162"  [label="CFG: "];
"1000161" -> "1000160"  [label="AST: "];
"1000162" -> "1000160"  [label="AST: "];
"1000165" -> "1000160"  [label="CFG: "];
"1000169" -> "1000160"  [label="CFG: "];
"1000160" -> "1000354"  [label="DDG: "];
"1000154" -> "1000160"  [label="DDG: "];
"1000160" -> "1000345"  [label="DDG: "];
"1000154" -> "1000110"  [label="AST: "];
"1000154" -> "1000156"  [label="CFG: "];
"1000155" -> "1000154"  [label="AST: "];
"1000156" -> "1000154"  [label="AST: "];
"1000161" -> "1000154"  [label="CFG: "];
"1000154" -> "1000354"  [label="DDG: "];
"1000156" -> "1000154"  [label="DDG: "];
"1000156" -> "1000154"  [label="DDG: "];
"1000156" -> "1000158"  [label="CFG: "];
"1000157" -> "1000156"  [label="AST: "];
"1000158" -> "1000156"  [label="AST: "];
"1000156" -> "1000354"  [label="DDG: "];
"1000107" -> "1000156"  [label="DDG: "];
"1000156" -> "1000164"  [label="DDG: "];
"1000156" -> "1000203"  [label="DDG: "];
"1000107" -> "1000106"  [label="AST: "];
"1000107" -> "1000354"  [label="DDG: "];
"1000107" -> "1000164"  [label="DDG: "];
"1000107" -> "1000203"  [label="DDG: "];
"1000337" -> "1000338"  [label="CFG: "];
"1000338" -> "1000337"  [label="AST: "];
"1000337" -> "1000354"  [label="DDG: "];
"1000285" -> "1000337"  [label="DDG: "];
"1000318" -> "1000337"  [label="DDG: "];
"1000248" -> "1000337"  [label="DDG: "];
"1000223" -> "1000337"  [label="DDG: "];
"1000285" -> "1000283"  [label="AST: "];
"1000285" -> "1000286"  [label="CFG: "];
"1000286" -> "1000285"  [label="AST: "];
"1000283" -> "1000285"  [label="CFG: "];
"1000285" -> "1000354"  [label="DDG: "];
"1000285" -> "1000283"  [label="DDG: "];
"1000285" -> "1000318"  [label="DDG: "];
"1000318" -> "1000313"  [label="AST: "];
"1000318" -> "1000319"  [label="CFG: "];
"1000319" -> "1000318"  [label="AST: "];
"1000313" -> "1000318"  [label="CFG: "];
"1000318" -> "1000354"  [label="DDG: "];
"1000318" -> "1000313"  [label="DDG: "];
"1000248" -> "1000318"  [label="DDG: "];
"1000223" -> "1000318"  [label="DDG: "];
"1000248" -> "1000246"  [label="AST: "];
"1000248" -> "1000249"  [label="CFG: "];
"1000249" -> "1000248"  [label="AST: "];
"1000246" -> "1000248"  [label="CFG: "];
"1000248" -> "1000354"  [label="DDG: "];
"1000248" -> "1000246"  [label="DDG: "];
"1000223" -> "1000220"  [label="AST: "];
"1000223" -> "1000224"  [label="CFG: "];
"1000224" -> "1000223"  [label="AST: "];
"1000220" -> "1000223"  [label="CFG: "];
"1000223" -> "1000354"  [label="DDG: "];
"1000223" -> "1000220"  [label="DDG: "];
}
