digraph "0_linux_197c949e7798fbf28cfadc69d9ca0c2abbf93191@API" {
"1000146" [label="(Call,skb = __skb_recv_datagram(sk, flags | (noblock ? MSG_DONTWAIT : 0),\n\t\t\t\t  &peeked, &off, &err))"];
"1000148" [label="(Call,__skb_recv_datagram(sk, flags | (noblock ? MSG_DONTWAIT : 0),\n\t\t\t\t  &peeked, &off, &err))"];
"1000364" [label="(Call,unlock_sock_fast(sk, slow))"];
"1000360" [label="(Call,sock_net(sk))"];
"1000355" [label="(Call,sock_net(sk))"];
"1000349" [label="(Call,skb_kill_datagram(sk, skb, flags))"];
"1000345" [label="(Call,lock_sock_fast(sk))"];
"1000104" [label="(MethodParameterIn,struct sock *sk)"];
"1000207" [label="(Call,udp_lib_checksum_complete(skb))"];
"1000163" [label="(Call,!skb)"];
"1000146" [label="(Call,skb = __skb_recv_datagram(sk, flags | (noblock ? MSG_DONTWAIT : 0),\n\t\t\t\t  &peeked, &off, &err))"];
"1000200" [label="(Call,UDP_SKB_CB(skb))"];
"1000230" [label="(Call,skb_copy_and_csum_datagram_msg(skb, sizeof(struct udphdr),\n\t\t\t\t\t\t     msg))"];
"1000216" [label="(Call,skb_csum_unnecessary(skb))"];
"1000105" [label="(MethodParameterIn,struct msghdr *msg)"];
"1000150" [label="(Call,flags | (noblock ? MSG_DONTWAIT : 0))"];
"1000136" [label="(Call,flags & MSG_ERRQUEUE)"];
"1000108" [label="(MethodParameterIn,int flags)"];
"1000107" [label="(MethodParameterIn,int noblock)"];
"1000343" [label="(Call,slow = lock_sock_fast(sk))"];
"1000128" [label="(Call,IS_UDPLITE(sk))"];
"1000114" [label="(Call,inet_sk(sk))"];
"1000206" [label="(Call,!udp_lib_checksum_complete(skb))"];
"1000204" [label="(Call,checksum_valid = !udp_lib_checksum_complete(skb))"];
"1000210" [label="(Call,!checksum_valid)"];
"1000214" [label="(Call,checksum_valid || skb_csum_unnecessary(skb))"];
"1000220" [label="(Call,skb_copy_datagram_msg(skb, sizeof(struct udphdr),\n \t\t\t\t\t    msg, copied))"];
"1000218" [label="(Call,err = skb_copy_datagram_msg(skb, sizeof(struct udphdr),\n \t\t\t\t\t    msg, copied))"];
"1000242" [label="(Call,unlikely(err))"];
"1000340" [label="(Return,return err;)"];
"1000245" [label="(Call,trace_kfree_skb(skb, udp_recvmsg))"];
"1000336" [label="(Call,skb_free_datagram_locked(sk, skb))"];
"1000271" [label="(Call,sock_recv_ts_and_drops(msg, sk, skb))"];
"1000288" [label="(Call,udp_hdr(skb))"];
"1000298" [label="(Call,ip_hdr(skb))"];
"1000320" [label="(Call,ip_cmsg_recv_offset(msg, skb, sizeof(struct udphdr)))"];
"1000325" [label="(Call,err = copied)"];
"1000228" [label="(Call,err = skb_copy_and_csum_datagram_msg(skb, sizeof(struct udphdr),\n\t\t\t\t\t\t     msg))"];
"1000236" [label="(Call,err == -EINVAL)"];
"1000258" [label="(Call,sock_net(sk))"];
"1000257" [label="(Call,UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\t   UDP_MIB_INERRORS, is_udplite))"];
"1000267" [label="(Call,sock_net(sk))"];
"1000266" [label="(Call,UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\tUDP_MIB_INDATAGRAMS, is_udplite))"];
"1000329" [label="(Call,flags & MSG_TRUNC)"];
"1000348" [label="(Call,!skb_kill_datagram(sk, skb, flags))"];
"1000354" [label="(Call,UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_CSUMERRORS, is_udplite))"];
"1000359" [label="(Call,UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite))"];
"1000246" [label="(Identifier,skb)"];
"1000244" [label="(Block,)"];
"1000354" [label="(Call,UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_CSUMERRORS, is_udplite))"];
"1000228" [label="(Call,err = skb_copy_and_csum_datagram_msg(skb, sizeof(struct udphdr),\n\t\t\t\t\t\t     msg))"];
"1000272" [label="(Identifier,msg)"];
"1000363" [label="(Identifier,is_udplite)"];
"1000105" [label="(MethodParameterIn,struct msghdr *msg)"];
"1000140" [label="(Call,ip_recv_error(sk, msg, len, addr_len))"];
"1000330" [label="(Identifier,flags)"];
"1000235" [label="(ControlStructure,if (err == -EINVAL))"];
"1000251" [label="(Block,)"];
"1000267" [label="(Call,sock_net(sk))"];
"1000300" [label="(FieldIdentifier,saddr)"];
"1000266" [label="(Call,UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\tUDP_MIB_INDATAGRAMS, is_udplite))"];
"1000258" [label="(Call,sock_net(sk))"];
"1000150" [label="(Call,flags | (noblock ? MSG_DONTWAIT : 0))"];
"1000216" [label="(Call,skb_csum_unnecessary(skb))"];
"1000257" [label="(Call,UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\t   UDP_MIB_INERRORS, is_udplite))"];
"1000351" [label="(Identifier,skb)"];
"1000331" [label="(Identifier,MSG_TRUNC)"];
"1000112" [label="(Call,*inet = inet_sk(sk))"];
"1000297" [label="(Call,ip_hdr(skb)->saddr)"];
"1000145" [label="(JumpTarget,try_again:)"];
"1000340" [label="(Return,return err;)"];
"1000276" [label="(Identifier,sin)"];
"1000104" [label="(MethodParameterIn,struct sock *sk)"];
"1000364" [label="(Call,unlock_sock_fast(sk, slow))"];
"1000189" [label="(Call,msg->msg_flags |= MSG_TRUNC)"];
"1000345" [label="(Call,lock_sock_fast(sk))"];
"1000241" [label="(ControlStructure,if (unlikely(err)))"];
"1000212" [label="(ControlStructure,goto csum_copy_err;)"];
"1000236" [label="(Call,err == -EINVAL)"];
"1000328" [label="(ControlStructure,if (flags & MSG_TRUNC))"];
"1000217" [label="(Identifier,skb)"];
"1000114" [label="(Call,inet_sk(sk))"];
"1000335" [label="(JumpTarget,out_free:)"];
"1000213" [label="(ControlStructure,if (checksum_valid || skb_csum_unnecessary(skb)))"];
"1000210" [label="(Call,!checksum_valid)"];
"1000350" [label="(Identifier,sk)"];
"1000320" [label="(Call,ip_cmsg_recv_offset(msg, skb, sizeof(struct udphdr)))"];
"1000344" [label="(Identifier,slow)"];
"1000259" [label="(Identifier,sk)"];
"1000141" [label="(Identifier,sk)"];
"1000162" [label="(ControlStructure,if (!skb))"];
"1000156" [label="(Call,&peeked)"];
"1000108" [label="(MethodParameterIn,int flags)"];
"1000242" [label="(Call,unlikely(err))"];
"1000163" [label="(Call,!skb)"];
"1000265" [label="(Identifier,peeked)"];
"1000261" [label="(Identifier,is_udplite)"];
"1000203" [label="(Block,)"];
"1000325" [label="(Call,err = copied)"];
"1000346" [label="(Identifier,sk)"];
"1000135" [label="(ControlStructure,if (flags & MSG_ERRQUEUE))"];
"1000129" [label="(Identifier,sk)"];
"1000219" [label="(Identifier,err)"];
"1000147" [label="(Identifier,skb)"];
"1000232" [label="(Call,sizeof(struct udphdr))"];
"1000209" [label="(ControlStructure,if (!checksum_valid))"];
"1000240" [label="(ControlStructure,goto csum_copy_err;)"];
"1000222" [label="(Call,sizeof(struct udphdr))"];
"1000260" [label="(Identifier,UDP_MIB_INERRORS)"];
"1000229" [label="(Identifier,err)"];
"1000274" [label="(Identifier,skb)"];
"1000366" [label="(Identifier,slow)"];
"1000298" [label="(Call,ip_hdr(skb))"];
"1000220" [label="(Call,skb_copy_datagram_msg(skb, sizeof(struct udphdr),\n \t\t\t\t\t    msg, copied))"];
"1000128" [label="(Call,IS_UDPLITE(sk))"];
"1000152" [label="(Call,noblock ? MSG_DONTWAIT : 0)"];
"1000207" [label="(Call,udp_lib_checksum_complete(skb))"];
"1000126" [label="(Call,is_udplite = IS_UDPLITE(sk))"];
"1000238" [label="(Call,-EINVAL)"];
"1000199" [label="(Call,UDP_SKB_CB(skb)->partial_cov)"];
"1000341" [label="(Identifier,err)"];
"1000263" [label="(ControlStructure,if (!peeked))"];
"1000158" [label="(Call,&off)"];
"1000214" [label="(Call,checksum_valid || skb_csum_unnecessary(skb))"];
"1000137" [label="(Identifier,flags)"];
"1000204" [label="(Call,checksum_valid = !udp_lib_checksum_complete(skb))"];
"1000234" [label="(Identifier,msg)"];
"1000269" [label="(Identifier,UDP_MIB_INDATAGRAMS)"];
"1000352" [label="(Identifier,flags)"];
"1000250" [label="(Identifier,peeked)"];
"1000262" [label="(ControlStructure,goto out_free;)"];
"1000365" [label="(Identifier,sk)"];
"1000337" [label="(Identifier,sk)"];
"1000336" [label="(Call,skb_free_datagram_locked(sk, skb))"];
"1000327" [label="(Identifier,copied)"];
"1000138" [label="(Identifier,MSG_ERRQUEUE)"];
"1000237" [label="(Identifier,err)"];
"1000268" [label="(Identifier,sk)"];
"1000323" [label="(Call,sizeof(struct udphdr))"];
"1000110" [label="(Block,)"];
"1000353" [label="(Block,)"];
"1000374" [label="(MethodReturn,int)"];
"1000270" [label="(Identifier,is_udplite)"];
"1000151" [label="(Identifier,flags)"];
"1000206" [label="(Call,!udp_lib_checksum_complete(skb))"];
"1000164" [label="(Identifier,skb)"];
"1000347" [label="(ControlStructure,if (!skb_kill_datagram(sk, skb, flags)))"];
"1000349" [label="(Call,skb_kill_datagram(sk, skb, flags))"];
"1000356" [label="(Identifier,sk)"];
"1000357" [label="(Identifier,UDP_MIB_CSUMERRORS)"];
"1000165" [label="(ControlStructure,goto out;)"];
"1000107" [label="(MethodParameterIn,int noblock)"];
"1000202" [label="(FieldIdentifier,partial_cov)"];
"1000211" [label="(Identifier,checksum_valid)"];
"1000287" [label="(Call,udp_hdr(skb)->source)"];
"1000149" [label="(Identifier,sk)"];
"1000339" [label="(JumpTarget,out:)"];
"1000367" [label="(Call,cond_resched())"];
"1000326" [label="(Identifier,err)"];
"1000196" [label="(Call,copied < ulen)"];
"1000225" [label="(Identifier,copied)"];
"1000333" [label="(Identifier,err)"];
"1000231" [label="(Identifier,skb)"];
"1000329" [label="(Call,flags & MSG_TRUNC)"];
"1000167" [label="(Identifier,ulen)"];
"1000360" [label="(Call,sock_net(sk))"];
"1000148" [label="(Call,__skb_recv_datagram(sk, flags | (noblock ? MSG_DONTWAIT : 0),\n\t\t\t\t  &peeked, &off, &err))"];
"1000289" [label="(Identifier,skb)"];
"1000146" [label="(Call,skb = __skb_recv_datagram(sk, flags | (noblock ? MSG_DONTWAIT : 0),\n\t\t\t\t  &peeked, &off, &err))"];
"1000243" [label="(Identifier,err)"];
"1000338" [label="(Identifier,skb)"];
"1000299" [label="(Identifier,skb)"];
"1000361" [label="(Identifier,sk)"];
"1000157" [label="(Identifier,peeked)"];
"1000321" [label="(Identifier,msg)"];
"1000200" [label="(Call,UDP_SKB_CB(skb))"];
"1000348" [label="(Call,!skb_kill_datagram(sk, skb, flags))"];
"1000316" [label="(ControlStructure,if (inet->cmsg_flags))"];
"1000115" [label="(Identifier,sk)"];
"1000273" [label="(Identifier,sk)"];
"1000227" [label="(Block,)"];
"1000136" [label="(Call,flags & MSG_ERRQUEUE)"];
"1000359" [label="(Call,UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite))"];
"1000332" [label="(Call,err = ulen)"];
"1000160" [label="(Call,&err)"];
"1000355" [label="(Call,sock_net(sk))"];
"1000131" [label="(Call,checksum_valid = false)"];
"1000290" [label="(FieldIdentifier,source)"];
"1000230" [label="(Call,skb_copy_and_csum_datagram_msg(skb, sizeof(struct udphdr),\n\t\t\t\t\t\t     msg))"];
"1000221" [label="(Identifier,skb)"];
"1000271" [label="(Call,sock_recv_ts_and_drops(msg, sk, skb))"];
"1000201" [label="(Identifier,skb)"];
"1000247" [label="(Identifier,udp_recvmsg)"];
"1000224" [label="(Identifier,msg)"];
"1000288" [label="(Call,udp_hdr(skb))"];
"1000322" [label="(Identifier,skb)"];
"1000245" [label="(Call,trace_kfree_skb(skb, udp_recvmsg))"];
"1000343" [label="(Call,slow = lock_sock_fast(sk))"];
"1000208" [label="(Identifier,skb)"];
"1000218" [label="(Call,err = skb_copy_datagram_msg(skb, sizeof(struct udphdr),\n \t\t\t\t\t    msg, copied))"];
"1000205" [label="(Identifier,checksum_valid)"];
"1000362" [label="(Identifier,UDP_MIB_INERRORS)"];
"1000358" [label="(Identifier,is_udplite)"];
"1000215" [label="(Identifier,checksum_valid)"];
"1000146" -> "1000110"  [label="AST: "];
"1000146" -> "1000148"  [label="CFG: "];
"1000147" -> "1000146"  [label="AST: "];
"1000148" -> "1000146"  [label="AST: "];
"1000164" -> "1000146"  [label="CFG: "];
"1000146" -> "1000374"  [label="DDG: __skb_recv_datagram(sk, flags | (noblock ? MSG_DONTWAIT : 0),\n\t\t\t\t  &peeked, &off, &err)"];
"1000148" -> "1000146"  [label="DDG: sk"];
"1000148" -> "1000146"  [label="DDG: &off"];
"1000148" -> "1000146"  [label="DDG: &err"];
"1000148" -> "1000146"  [label="DDG: &peeked"];
"1000148" -> "1000146"  [label="DDG: flags | (noblock ? MSG_DONTWAIT : 0)"];
"1000146" -> "1000163"  [label="DDG: skb"];
"1000148" -> "1000160"  [label="CFG: "];
"1000149" -> "1000148"  [label="AST: "];
"1000150" -> "1000148"  [label="AST: "];
"1000156" -> "1000148"  [label="AST: "];
"1000158" -> "1000148"  [label="AST: "];
"1000160" -> "1000148"  [label="AST: "];
"1000148" -> "1000374"  [label="DDG: &err"];
"1000148" -> "1000374"  [label="DDG: &off"];
"1000148" -> "1000374"  [label="DDG: sk"];
"1000148" -> "1000374"  [label="DDG: flags | (noblock ? MSG_DONTWAIT : 0)"];
"1000148" -> "1000374"  [label="DDG: &peeked"];
"1000364" -> "1000148"  [label="DDG: sk"];
"1000128" -> "1000148"  [label="DDG: sk"];
"1000104" -> "1000148"  [label="DDG: sk"];
"1000150" -> "1000148"  [label="DDG: flags"];
"1000150" -> "1000148"  [label="DDG: noblock ? MSG_DONTWAIT : 0"];
"1000148" -> "1000258"  [label="DDG: sk"];
"1000148" -> "1000267"  [label="DDG: sk"];
"1000148" -> "1000271"  [label="DDG: sk"];
"1000148" -> "1000336"  [label="DDG: sk"];
"1000148" -> "1000345"  [label="DDG: sk"];
"1000364" -> "1000110"  [label="AST: "];
"1000364" -> "1000366"  [label="CFG: "];
"1000365" -> "1000364"  [label="AST: "];
"1000366" -> "1000364"  [label="AST: "];
"1000367" -> "1000364"  [label="CFG: "];
"1000364" -> "1000374"  [label="DDG: unlock_sock_fast(sk, slow)"];
"1000364" -> "1000374"  [label="DDG: slow"];
"1000360" -> "1000364"  [label="DDG: sk"];
"1000349" -> "1000364"  [label="DDG: sk"];
"1000104" -> "1000364"  [label="DDG: sk"];
"1000343" -> "1000364"  [label="DDG: slow"];
"1000360" -> "1000359"  [label="AST: "];
"1000360" -> "1000361"  [label="CFG: "];
"1000361" -> "1000360"  [label="AST: "];
"1000362" -> "1000360"  [label="CFG: "];
"1000360" -> "1000359"  [label="DDG: sk"];
"1000355" -> "1000360"  [label="DDG: sk"];
"1000104" -> "1000360"  [label="DDG: sk"];
"1000355" -> "1000354"  [label="AST: "];
"1000355" -> "1000356"  [label="CFG: "];
"1000356" -> "1000355"  [label="AST: "];
"1000357" -> "1000355"  [label="CFG: "];
"1000355" -> "1000354"  [label="DDG: sk"];
"1000349" -> "1000355"  [label="DDG: sk"];
"1000104" -> "1000355"  [label="DDG: sk"];
"1000349" -> "1000348"  [label="AST: "];
"1000349" -> "1000352"  [label="CFG: "];
"1000350" -> "1000349"  [label="AST: "];
"1000351" -> "1000349"  [label="AST: "];
"1000352" -> "1000349"  [label="AST: "];
"1000348" -> "1000349"  [label="CFG: "];
"1000349" -> "1000150"  [label="DDG: flags"];
"1000349" -> "1000348"  [label="DDG: sk"];
"1000349" -> "1000348"  [label="DDG: skb"];
"1000349" -> "1000348"  [label="DDG: flags"];
"1000345" -> "1000349"  [label="DDG: sk"];
"1000104" -> "1000349"  [label="DDG: sk"];
"1000207" -> "1000349"  [label="DDG: skb"];
"1000230" -> "1000349"  [label="DDG: skb"];
"1000150" -> "1000349"  [label="DDG: flags"];
"1000108" -> "1000349"  [label="DDG: flags"];
"1000345" -> "1000343"  [label="AST: "];
"1000345" -> "1000346"  [label="CFG: "];
"1000346" -> "1000345"  [label="AST: "];
"1000343" -> "1000345"  [label="CFG: "];
"1000345" -> "1000343"  [label="DDG: sk"];
"1000104" -> "1000345"  [label="DDG: sk"];
"1000104" -> "1000103"  [label="AST: "];
"1000104" -> "1000374"  [label="DDG: sk"];
"1000104" -> "1000114"  [label="DDG: sk"];
"1000104" -> "1000128"  [label="DDG: sk"];
"1000104" -> "1000140"  [label="DDG: sk"];
"1000104" -> "1000258"  [label="DDG: sk"];
"1000104" -> "1000267"  [label="DDG: sk"];
"1000104" -> "1000271"  [label="DDG: sk"];
"1000104" -> "1000336"  [label="DDG: sk"];
"1000207" -> "1000206"  [label="AST: "];
"1000207" -> "1000208"  [label="CFG: "];
"1000208" -> "1000207"  [label="AST: "];
"1000206" -> "1000207"  [label="CFG: "];
"1000207" -> "1000206"  [label="DDG: skb"];
"1000163" -> "1000207"  [label="DDG: skb"];
"1000200" -> "1000207"  [label="DDG: skb"];
"1000207" -> "1000216"  [label="DDG: skb"];
"1000207" -> "1000220"  [label="DDG: skb"];
"1000207" -> "1000230"  [label="DDG: skb"];
"1000163" -> "1000162"  [label="AST: "];
"1000163" -> "1000164"  [label="CFG: "];
"1000164" -> "1000163"  [label="AST: "];
"1000165" -> "1000163"  [label="CFG: "];
"1000167" -> "1000163"  [label="CFG: "];
"1000163" -> "1000374"  [label="DDG: skb"];
"1000163" -> "1000374"  [label="DDG: !skb"];
"1000163" -> "1000200"  [label="DDG: skb"];
"1000163" -> "1000216"  [label="DDG: skb"];
"1000163" -> "1000220"  [label="DDG: skb"];
"1000163" -> "1000230"  [label="DDG: skb"];
"1000200" -> "1000199"  [label="AST: "];
"1000200" -> "1000201"  [label="CFG: "];
"1000201" -> "1000200"  [label="AST: "];
"1000202" -> "1000200"  [label="CFG: "];
"1000200" -> "1000216"  [label="DDG: skb"];
"1000200" -> "1000220"  [label="DDG: skb"];
"1000200" -> "1000230"  [label="DDG: skb"];
"1000230" -> "1000228"  [label="AST: "];
"1000230" -> "1000234"  [label="CFG: "];
"1000231" -> "1000230"  [label="AST: "];
"1000232" -> "1000230"  [label="AST: "];
"1000234" -> "1000230"  [label="AST: "];
"1000228" -> "1000230"  [label="CFG: "];
"1000230" -> "1000374"  [label="DDG: msg"];
"1000230" -> "1000220"  [label="DDG: msg"];
"1000230" -> "1000228"  [label="DDG: skb"];
"1000230" -> "1000228"  [label="DDG: msg"];
"1000216" -> "1000230"  [label="DDG: skb"];
"1000105" -> "1000230"  [label="DDG: msg"];
"1000230" -> "1000245"  [label="DDG: skb"];
"1000230" -> "1000271"  [label="DDG: msg"];
"1000230" -> "1000271"  [label="DDG: skb"];
"1000216" -> "1000214"  [label="AST: "];
"1000216" -> "1000217"  [label="CFG: "];
"1000217" -> "1000216"  [label="AST: "];
"1000214" -> "1000216"  [label="CFG: "];
"1000216" -> "1000214"  [label="DDG: skb"];
"1000216" -> "1000220"  [label="DDG: skb"];
"1000105" -> "1000103"  [label="AST: "];
"1000105" -> "1000374"  [label="DDG: msg"];
"1000105" -> "1000140"  [label="DDG: msg"];
"1000105" -> "1000220"  [label="DDG: msg"];
"1000105" -> "1000271"  [label="DDG: msg"];
"1000105" -> "1000320"  [label="DDG: msg"];
"1000150" -> "1000152"  [label="CFG: "];
"1000151" -> "1000150"  [label="AST: "];
"1000152" -> "1000150"  [label="AST: "];
"1000157" -> "1000150"  [label="CFG: "];
"1000150" -> "1000374"  [label="DDG: flags"];
"1000150" -> "1000374"  [label="DDG: noblock ? MSG_DONTWAIT : 0"];
"1000136" -> "1000150"  [label="DDG: flags"];
"1000108" -> "1000150"  [label="DDG: flags"];
"1000107" -> "1000150"  [label="DDG: noblock"];
"1000150" -> "1000329"  [label="DDG: flags"];
"1000136" -> "1000135"  [label="AST: "];
"1000136" -> "1000138"  [label="CFG: "];
"1000137" -> "1000136"  [label="AST: "];
"1000138" -> "1000136"  [label="AST: "];
"1000141" -> "1000136"  [label="CFG: "];
"1000145" -> "1000136"  [label="CFG: "];
"1000136" -> "1000374"  [label="DDG: flags & MSG_ERRQUEUE"];
"1000136" -> "1000374"  [label="DDG: MSG_ERRQUEUE"];
"1000136" -> "1000374"  [label="DDG: flags"];
"1000108" -> "1000136"  [label="DDG: flags"];
"1000108" -> "1000103"  [label="AST: "];
"1000108" -> "1000374"  [label="DDG: flags"];
"1000108" -> "1000329"  [label="DDG: flags"];
"1000107" -> "1000103"  [label="AST: "];
"1000107" -> "1000374"  [label="DDG: noblock"];
"1000107" -> "1000152"  [label="DDG: noblock"];
"1000343" -> "1000110"  [label="AST: "];
"1000344" -> "1000343"  [label="AST: "];
"1000350" -> "1000343"  [label="CFG: "];
"1000343" -> "1000374"  [label="DDG: lock_sock_fast(sk)"];
"1000128" -> "1000126"  [label="AST: "];
"1000128" -> "1000129"  [label="CFG: "];
"1000129" -> "1000128"  [label="AST: "];
"1000126" -> "1000128"  [label="CFG: "];
"1000128" -> "1000126"  [label="DDG: sk"];
"1000114" -> "1000128"  [label="DDG: sk"];
"1000128" -> "1000140"  [label="DDG: sk"];
"1000114" -> "1000112"  [label="AST: "];
"1000114" -> "1000115"  [label="CFG: "];
"1000115" -> "1000114"  [label="AST: "];
"1000112" -> "1000114"  [label="CFG: "];
"1000114" -> "1000112"  [label="DDG: sk"];
"1000206" -> "1000204"  [label="AST: "];
"1000204" -> "1000206"  [label="CFG: "];
"1000206" -> "1000374"  [label="DDG: udp_lib_checksum_complete(skb)"];
"1000206" -> "1000204"  [label="DDG: udp_lib_checksum_complete(skb)"];
"1000204" -> "1000203"  [label="AST: "];
"1000205" -> "1000204"  [label="AST: "];
"1000211" -> "1000204"  [label="CFG: "];
"1000204" -> "1000374"  [label="DDG: !udp_lib_checksum_complete(skb)"];
"1000204" -> "1000210"  [label="DDG: checksum_valid"];
"1000210" -> "1000209"  [label="AST: "];
"1000210" -> "1000211"  [label="CFG: "];
"1000211" -> "1000210"  [label="AST: "];
"1000212" -> "1000210"  [label="CFG: "];
"1000215" -> "1000210"  [label="CFG: "];
"1000210" -> "1000374"  [label="DDG: !checksum_valid"];
"1000210" -> "1000374"  [label="DDG: checksum_valid"];
"1000210" -> "1000214"  [label="DDG: checksum_valid"];
"1000214" -> "1000213"  [label="AST: "];
"1000214" -> "1000215"  [label="CFG: "];
"1000215" -> "1000214"  [label="AST: "];
"1000219" -> "1000214"  [label="CFG: "];
"1000229" -> "1000214"  [label="CFG: "];
"1000214" -> "1000374"  [label="DDG: skb_csum_unnecessary(skb)"];
"1000214" -> "1000374"  [label="DDG: checksum_valid || skb_csum_unnecessary(skb)"];
"1000214" -> "1000374"  [label="DDG: checksum_valid"];
"1000131" -> "1000214"  [label="DDG: checksum_valid"];
"1000220" -> "1000218"  [label="AST: "];
"1000220" -> "1000225"  [label="CFG: "];
"1000221" -> "1000220"  [label="AST: "];
"1000222" -> "1000220"  [label="AST: "];
"1000224" -> "1000220"  [label="AST: "];
"1000225" -> "1000220"  [label="AST: "];
"1000218" -> "1000220"  [label="CFG: "];
"1000220" -> "1000374"  [label="DDG: copied"];
"1000220" -> "1000374"  [label="DDG: msg"];
"1000220" -> "1000218"  [label="DDG: skb"];
"1000220" -> "1000218"  [label="DDG: msg"];
"1000220" -> "1000218"  [label="DDG: copied"];
"1000196" -> "1000220"  [label="DDG: copied"];
"1000220" -> "1000245"  [label="DDG: skb"];
"1000220" -> "1000271"  [label="DDG: msg"];
"1000220" -> "1000271"  [label="DDG: skb"];
"1000220" -> "1000325"  [label="DDG: copied"];
"1000218" -> "1000213"  [label="AST: "];
"1000219" -> "1000218"  [label="AST: "];
"1000243" -> "1000218"  [label="CFG: "];
"1000218" -> "1000374"  [label="DDG: skb_copy_datagram_msg(skb, sizeof(struct udphdr),\n \t\t\t\t\t    msg, copied)"];
"1000218" -> "1000242"  [label="DDG: err"];
"1000242" -> "1000241"  [label="AST: "];
"1000242" -> "1000243"  [label="CFG: "];
"1000243" -> "1000242"  [label="AST: "];
"1000246" -> "1000242"  [label="CFG: "];
"1000265" -> "1000242"  [label="CFG: "];
"1000242" -> "1000374"  [label="DDG: unlikely(err)"];
"1000242" -> "1000374"  [label="DDG: err"];
"1000236" -> "1000242"  [label="DDG: err"];
"1000242" -> "1000340"  [label="DDG: err"];
"1000340" -> "1000110"  [label="AST: "];
"1000340" -> "1000341"  [label="CFG: "];
"1000341" -> "1000340"  [label="AST: "];
"1000374" -> "1000340"  [label="CFG: "];
"1000340" -> "1000374"  [label="DDG: <RET>"];
"1000341" -> "1000340"  [label="DDG: err"];
"1000325" -> "1000340"  [label="DDG: err"];
"1000332" -> "1000340"  [label="DDG: err"];
"1000236" -> "1000340"  [label="DDG: err"];
"1000245" -> "1000244"  [label="AST: "];
"1000245" -> "1000247"  [label="CFG: "];
"1000246" -> "1000245"  [label="AST: "];
"1000247" -> "1000245"  [label="AST: "];
"1000250" -> "1000245"  [label="CFG: "];
"1000245" -> "1000374"  [label="DDG: trace_kfree_skb(skb, udp_recvmsg)"];
"1000245" -> "1000374"  [label="DDG: udp_recvmsg"];
"1000245" -> "1000336"  [label="DDG: skb"];
"1000336" -> "1000110"  [label="AST: "];
"1000336" -> "1000338"  [label="CFG: "];
"1000337" -> "1000336"  [label="AST: "];
"1000338" -> "1000336"  [label="AST: "];
"1000339" -> "1000336"  [label="CFG: "];
"1000336" -> "1000374"  [label="DDG: skb_free_datagram_locked(sk, skb)"];
"1000336" -> "1000374"  [label="DDG: skb"];
"1000336" -> "1000374"  [label="DDG: sk"];
"1000258" -> "1000336"  [label="DDG: sk"];
"1000271" -> "1000336"  [label="DDG: sk"];
"1000271" -> "1000336"  [label="DDG: skb"];
"1000298" -> "1000336"  [label="DDG: skb"];
"1000320" -> "1000336"  [label="DDG: skb"];
"1000271" -> "1000110"  [label="AST: "];
"1000271" -> "1000274"  [label="CFG: "];
"1000272" -> "1000271"  [label="AST: "];
"1000273" -> "1000271"  [label="AST: "];
"1000274" -> "1000271"  [label="AST: "];
"1000276" -> "1000271"  [label="CFG: "];
"1000271" -> "1000374"  [label="DDG: msg"];
"1000271" -> "1000374"  [label="DDG: sock_recv_ts_and_drops(msg, sk, skb)"];
"1000267" -> "1000271"  [label="DDG: sk"];
"1000271" -> "1000288"  [label="DDG: skb"];
"1000271" -> "1000320"  [label="DDG: msg"];
"1000271" -> "1000320"  [label="DDG: skb"];
"1000288" -> "1000287"  [label="AST: "];
"1000288" -> "1000289"  [label="CFG: "];
"1000289" -> "1000288"  [label="AST: "];
"1000290" -> "1000288"  [label="CFG: "];
"1000288" -> "1000298"  [label="DDG: skb"];
"1000298" -> "1000297"  [label="AST: "];
"1000298" -> "1000299"  [label="CFG: "];
"1000299" -> "1000298"  [label="AST: "];
"1000300" -> "1000298"  [label="CFG: "];
"1000298" -> "1000320"  [label="DDG: skb"];
"1000320" -> "1000316"  [label="AST: "];
"1000320" -> "1000323"  [label="CFG: "];
"1000321" -> "1000320"  [label="AST: "];
"1000322" -> "1000320"  [label="AST: "];
"1000323" -> "1000320"  [label="AST: "];
"1000326" -> "1000320"  [label="CFG: "];
"1000320" -> "1000374"  [label="DDG: msg"];
"1000320" -> "1000374"  [label="DDG: ip_cmsg_recv_offset(msg, skb, sizeof(struct udphdr))"];
"1000325" -> "1000110"  [label="AST: "];
"1000325" -> "1000327"  [label="CFG: "];
"1000326" -> "1000325"  [label="AST: "];
"1000327" -> "1000325"  [label="AST: "];
"1000330" -> "1000325"  [label="CFG: "];
"1000325" -> "1000374"  [label="DDG: err"];
"1000325" -> "1000374"  [label="DDG: copied"];
"1000196" -> "1000325"  [label="DDG: copied"];
"1000228" -> "1000227"  [label="AST: "];
"1000229" -> "1000228"  [label="AST: "];
"1000237" -> "1000228"  [label="CFG: "];
"1000228" -> "1000374"  [label="DDG: skb_copy_and_csum_datagram_msg(skb, sizeof(struct udphdr),\n\t\t\t\t\t\t     msg)"];
"1000228" -> "1000236"  [label="DDG: err"];
"1000236" -> "1000235"  [label="AST: "];
"1000236" -> "1000238"  [label="CFG: "];
"1000237" -> "1000236"  [label="AST: "];
"1000238" -> "1000236"  [label="AST: "];
"1000240" -> "1000236"  [label="CFG: "];
"1000243" -> "1000236"  [label="CFG: "];
"1000236" -> "1000374"  [label="DDG: err"];
"1000236" -> "1000374"  [label="DDG: err == -EINVAL"];
"1000236" -> "1000374"  [label="DDG: -EINVAL"];
"1000238" -> "1000236"  [label="DDG: EINVAL"];
"1000258" -> "1000257"  [label="AST: "];
"1000258" -> "1000259"  [label="CFG: "];
"1000259" -> "1000258"  [label="AST: "];
"1000260" -> "1000258"  [label="CFG: "];
"1000258" -> "1000257"  [label="DDG: sk"];
"1000257" -> "1000251"  [label="AST: "];
"1000257" -> "1000261"  [label="CFG: "];
"1000260" -> "1000257"  [label="AST: "];
"1000261" -> "1000257"  [label="AST: "];
"1000262" -> "1000257"  [label="CFG: "];
"1000257" -> "1000374"  [label="DDG: UDP_MIB_INERRORS"];
"1000257" -> "1000374"  [label="DDG: sock_net(sk)"];
"1000257" -> "1000374"  [label="DDG: UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\t\t   UDP_MIB_INERRORS, is_udplite)"];
"1000257" -> "1000374"  [label="DDG: is_udplite"];
"1000359" -> "1000257"  [label="DDG: UDP_MIB_INERRORS"];
"1000359" -> "1000257"  [label="DDG: is_udplite"];
"1000126" -> "1000257"  [label="DDG: is_udplite"];
"1000267" -> "1000266"  [label="AST: "];
"1000267" -> "1000268"  [label="CFG: "];
"1000268" -> "1000267"  [label="AST: "];
"1000269" -> "1000267"  [label="CFG: "];
"1000267" -> "1000266"  [label="DDG: sk"];
"1000266" -> "1000263"  [label="AST: "];
"1000266" -> "1000270"  [label="CFG: "];
"1000269" -> "1000266"  [label="AST: "];
"1000270" -> "1000266"  [label="AST: "];
"1000272" -> "1000266"  [label="CFG: "];
"1000266" -> "1000374"  [label="DDG: UDP_MIB_INDATAGRAMS"];
"1000266" -> "1000374"  [label="DDG: sock_net(sk)"];
"1000266" -> "1000374"  [label="DDG: UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\tUDP_MIB_INDATAGRAMS, is_udplite)"];
"1000266" -> "1000374"  [label="DDG: is_udplite"];
"1000126" -> "1000266"  [label="DDG: is_udplite"];
"1000359" -> "1000266"  [label="DDG: is_udplite"];
"1000329" -> "1000328"  [label="AST: "];
"1000329" -> "1000331"  [label="CFG: "];
"1000330" -> "1000329"  [label="AST: "];
"1000331" -> "1000329"  [label="AST: "];
"1000333" -> "1000329"  [label="CFG: "];
"1000335" -> "1000329"  [label="CFG: "];
"1000329" -> "1000374"  [label="DDG: MSG_TRUNC"];
"1000329" -> "1000374"  [label="DDG: flags & MSG_TRUNC"];
"1000329" -> "1000374"  [label="DDG: flags"];
"1000189" -> "1000329"  [label="DDG: MSG_TRUNC"];
"1000348" -> "1000347"  [label="AST: "];
"1000356" -> "1000348"  [label="CFG: "];
"1000365" -> "1000348"  [label="CFG: "];
"1000348" -> "1000374"  [label="DDG: skb_kill_datagram(sk, skb, flags)"];
"1000348" -> "1000374"  [label="DDG: !skb_kill_datagram(sk, skb, flags)"];
"1000354" -> "1000353"  [label="AST: "];
"1000354" -> "1000358"  [label="CFG: "];
"1000357" -> "1000354"  [label="AST: "];
"1000358" -> "1000354"  [label="AST: "];
"1000361" -> "1000354"  [label="CFG: "];
"1000354" -> "1000374"  [label="DDG: UDP_MIB_CSUMERRORS"];
"1000354" -> "1000374"  [label="DDG: UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_CSUMERRORS, is_udplite)"];
"1000126" -> "1000354"  [label="DDG: is_udplite"];
"1000359" -> "1000354"  [label="DDG: is_udplite"];
"1000354" -> "1000359"  [label="DDG: is_udplite"];
"1000359" -> "1000353"  [label="AST: "];
"1000359" -> "1000363"  [label="CFG: "];
"1000362" -> "1000359"  [label="AST: "];
"1000363" -> "1000359"  [label="AST: "];
"1000365" -> "1000359"  [label="CFG: "];
"1000359" -> "1000374"  [label="DDG: sock_net(sk)"];
"1000359" -> "1000374"  [label="DDG: UDP_MIB_INERRORS"];
"1000359" -> "1000374"  [label="DDG: is_udplite"];
"1000359" -> "1000374"  [label="DDG: UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite)"];
}
