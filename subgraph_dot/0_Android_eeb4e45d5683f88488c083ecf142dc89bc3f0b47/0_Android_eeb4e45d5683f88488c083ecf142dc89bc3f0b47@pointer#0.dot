digraph "0_Android_eeb4e45d5683f88488c083ecf142dc89bc3f0b47@pointer" {
"1000414" [label="(Call,work[i]&0x80000000UL)"];
"1000616" [label="(Call,work[i]=top)"];
"1000429" [label="(Call,top-=4)"];
"1000372" [label="(Call,top=s->used_entries*3-2)"];
"1000374" [label="(Call,s->used_entries*3-2)"];
"1000375" [label="(Call,s->used_entries*3)"];
"1000262" [label="(Call,s->used_entries*(s->dec_leafw+1))"];
"1000222" [label="(Call,s->used_entries > INT_MAX/(s->dec_leafw+1))"];
"1000167" [label="(Call,s->used_entries > INT_MAX/2)"];
"1000171" [label="(Call,INT_MAX/2)"];
"1000175" [label="(Call,s->used_entries*2)"];
"1000226" [label="(Call,INT_MAX/(s->dec_leafw+1))"];
"1000181" [label="(Call,INT_MAX/((long) sizeof(*work)))"];
"1000240" [label="(Call,s->used_entries * (s->dec_leafw+1))"];
"1000587" [label="(Call,top-=2)"];
"1000488" [label="(Call,top-=3)"];
"1000541" [label="(Call,top-=3)"];
"1000210" [label="(Call,_make_words(lengthlist,s->entries,work,quantvals,s,opb,maptype))"];
"1000114" [label="(Call,!lengthlist)"];
"1000106" [label="(MethodParameterIn,char *lengthlist)"];
"1000195" [label="(Call,s->entries*2)"];
"1000205" [label="(Call,!work)"];
"1000191" [label="(Call,work=calloc((s->entries*2+1),sizeof(*work)))"];
"1000193" [label="(Call,calloc((s->entries*2+1),sizeof(*work)))"];
"1000107" [label="(MethodParameterIn,long quantvals)"];
"1000105" [label="(MethodParameterIn,codebook *s)"];
"1000108" [label="(MethodParameterIn,oggpack_buffer *opb)"];
"1000109" [label="(MethodParameterIn,int maptype)"];
"1000438" [label="(Call,work[i]>>8)"];
"1000437" [label="(Call,work[i]>>8 & 0x7f)"];
"1000436" [label="(Call,(work[i]>>8 & 0x7f)|0x80)"];
"1000432" [label="(Call,out[top]=(work[i]>>8 & 0x7f)|0x80)"];
"1000468" [label="(Call,work[i] & 0xff)"];
"1000462" [label="(Call,out[top+2]=work[i] & 0xff)"];
"1000497" [label="(Call,work[i]>>8)"];
"1000496" [label="(Call,work[i]>>8 & 0x7f)"];
"1000495" [label="(Call,(work[i]>>8 & 0x7f)|0x80)"];
"1000491" [label="(Call,out[top]=(work[i]>>8 & 0x7f)|0x80)"];
"1000525" [label="(Call,work[i] & 0xff)"];
"1000519" [label="(Call,out[top+2]=work[i] & 0xff)"];
"1000550" [label="(Call,work[i]*2)"];
"1000596" [label="(Call,work[i]*2)"];
"1000182" [label="(Identifier,INT_MAX)"];
"1000714" [label="(Call,work[i+1] & 0xffff)"];
"1000220" [label="(ControlStructure,goto error_out;)"];
"1000462" [label="(Call,out[top+2]=work[i] & 0xff)"];
"1000522" [label="(Call,top+2)"];
"1000212" [label="(Call,s->entries)"];
"1000618" [label="(Identifier,work)"];
"1000373" [label="(Identifier,top)"];
"1000487" [label="(Block,)"];
"1000380" [label="(Literal,2)"];
"1000301" [label="(Call,s->used_entries*2)"];
"1000498" [label="(Call,work[i])"];
"1000117" [label="(Literal,1)"];
"1000210" [label="(Call,_make_words(lengthlist,s->entries,work,quantvals,s,opb,maptype))"];
"1000219" [label="(Identifier,maptype)"];
"1000688" [label="(Call,work[i+1]>>16)"];
"1000468" [label="(Call,work[i] & 0xff)"];
"1000271" [label="(Literal,2)"];
"1000479" [label="(Call,work[i+1] & 0xff)"];
"1000609" [label="(Call,work[i+1]*2)"];
"1000747" [label="(Call,work[i+1]*2)"];
"1000861" [label="(Call,free(work))"];
"1000548" [label="(Call,work[work[i]*2])"];
"1000664" [label="(Call,top-=4)"];
"1000211" [label="(Identifier,lengthlist)"];
"1000217" [label="(Identifier,s)"];
"1000410" [label="(Identifier,i)"];
"1000240" [label="(Call,s->used_entries * (s->dec_leafw+1))"];
"1000732" [label="(Call,work[i]>>16)"];
"1000635" [label="(Call,s->used_entries*2)"];
"1000541" [label="(Call,top-=3)"];
"1000592" [label="(Identifier,out)"];
"1000228" [label="(Call,s->dec_leafw+1)"];
"1000587" [label="(Call,top-=2)"];
"1000233" [label="(ControlStructure,goto error_out;)"];
"1000822" [label="(Call,top-=2)"];
"1000241" [label="(Call,s->used_entries)"];
"1000195" [label="(Call,s->entries*2)"];
"1000578" [label="(Call,work[i+1] & 0xff)"];
"1000115" [label="(Identifier,lengthlist)"];
"1000179" [label="(Literal,2)"];
"1000533" [label="(Call,work[i+1]&0x80000000UL)"];
"1000176" [label="(Call,s->used_entries)"];
"1000463" [label="(Call,out[top+2])"];
"1000114" [label="(Call,!lengthlist)"];
"1000447" [label="(Identifier,out)"];
"1000209" [label="(ControlStructure,if(_make_words(lengthlist,s->entries,work,quantvals,s,opb,maptype)))"];
"1000431" [label="(Literal,4)"];
"1000379" [label="(Literal,3)"];
"1000227" [label="(Identifier,INT_MAX)"];
"1000512" [label="(Call,work[i+1]*2)"];
"1000503" [label="(Literal,0x80)"];
"1000321" [label="(Call,work[i] & 0x80000000UL)"];
"1000319" [label="(Call,((work[i] & 0x80000000UL) >> 24) | work[i])"];
"1000597" [label="(Call,work[i])"];
"1000649" [label="(Call,work[i]&0x80000000UL)"];
"1000617" [label="(Call,work[i])"];
"1000495" [label="(Call,(work[i]>>8 & 0x7f)|0x80)"];
"1000177" [label="(Identifier,s)"];
"1000167" [label="(Call,s->used_entries > INT_MAX/2)"];
"1000215" [label="(Identifier,work)"];
"1000496" [label="(Call,work[i]>>8 & 0x7f)"];
"1000205" [label="(Call,!work)"];
"1000206" [label="(Identifier,work)"];
"1000760" [label="(Call,work[i] & 0xffff)"];
"1000109" [label="(MethodParameterIn,int maptype)"];
"1000171" [label="(Call,INT_MAX/2)"];
"1000414" [label="(Call,work[i]&0x80000000UL)"];
"1000443" [label="(Literal,0x7f)"];
"1000453" [label="(Call,work[i+1]>>8)"];
"1000520" [label="(Call,out[top+2])"];
"1000596" [label="(Call,work[i]*2)"];
"1000432" [label="(Call,out[top]=(work[i]>>8 & 0x7f)|0x80)"];
"1000546" [label="(Identifier,out)"];
"1000216" [label="(Identifier,quantvals)"];
"1000542" [label="(Identifier,top)"];
"1000575" [label="(Call,top+2)"];
"1000492" [label="(Call,out[top])"];
"1000200" [label="(Literal,1)"];
"1000488" [label="(Call,top-=3)"];
"1000375" [label="(Call,s->used_entries*3)"];
"1000489" [label="(Identifier,top)"];
"1000544" [label="(Call,out[top]=work[work[i]*2])"];
"1000588" [label="(Identifier,top)"];
"1000168" [label="(Call,s->used_entries)"];
"1000433" [label="(Call,out[top])"];
"1000836" [label="(Call,out[top+1]=work[work[i+1]*2])"];
"1000423" [label="(Identifier,work)"];
"1000428" [label="(Block,)"];
"1000149" [label="(Call,_make_words(lengthlist,s->entries,\n                   s->dec_table,quantvals,s,opb,maptype))"];
"1000400" [label="(Call,s->used_entries*2)"];
"1000244" [label="(Call,s->dec_leafw+1)"];
"1000263" [label="(Call,s->used_entries)"];
"1000226" [label="(Call,INT_MAX/(s->dec_leafw+1))"];
"1000438" [label="(Call,work[i]>>8)"];
"1000192" [label="(Identifier,work)"];
"1000558" [label="(Call,top+1)"];
"1000703" [label="(Call,work[i] & 0xffff)"];
"1000785" [label="(Call,work[i]*2)"];
"1000436" [label="(Call,(work[i]>>8 & 0x7f)|0x80)"];
"1000444" [label="(Literal,0x80)"];
"1000497" [label="(Call,work[i]>>8)"];
"1000175" [label="(Call,s->used_entries*2)"];
"1000370" [label="(Block,)"];
"1000250" [label="(Identifier,INT_MAX)"];
"1000779" [label="(Call,out[top]=work[work[i]*2])"];
"1000224" [label="(Identifier,s)"];
"1000437" [label="(Call,work[i]>>8 & 0x7f)"];
"1000586" [label="(Block,)"];
"1000490" [label="(Literal,3)"];
"1000491" [label="(Call,out[top]=(work[i]>>8 & 0x7f)|0x80)"];
"1000475" [label="(Identifier,out)"];
"1000813" [label="(Call,work[i+1] & 0xffff)"];
"1000540" [label="(Block,)"];
"1000372" [label="(Call,top=s->used_entries*3-2)"];
"1000448" [label="(Call,top+1)"];
"1000222" [label="(Call,s->used_entries > INT_MAX/(s->dec_leafw+1))"];
"1000249" [label="(Call,INT_MAX/s->dec_nodeb)"];
"1000600" [label="(Literal,2)"];
"1000604" [label="(Call,top+1)"];
"1000204" [label="(ControlStructure,if (!work))"];
"1000856" [label="(Call,free(work))"];
"1000110" [label="(Block,)"];
"1000529" [label="(Literal,0xff)"];
"1000535" [label="(Identifier,work)"];
"1000359" [label="(Call,work[i] & 0x80000000UL)"];
"1000465" [label="(Call,top+2)"];
"1000108" [label="(MethodParameterIn,oggpack_buffer *opb)"];
"1000656" [label="(Call,work[i+1]&0x80000000UL)"];
"1000376" [label="(Call,s->used_entries)"];
"1000183" [label="(Call,(long) sizeof(*work))"];
"1000776" [label="(Call,top-=3)"];
"1000107" [label="(MethodParameterIn,long quantvals)"];
"1000554" [label="(Literal,2)"];
"1000421" [label="(Call,work[i+1]&0x80000000UL)"];
"1000106" [label="(MethodParameterIn,char *lengthlist)"];
"1000476" [label="(Call,top+3)"];
"1000563" [label="(Call,work[i+1]>>8)"];
"1000507" [label="(Call,top+1)"];
"1000525" [label="(Call,work[i] & 0xff)"];
"1000174" [label="(Call,s->used_entries*2 > INT_MAX/((long) sizeof(*work)) - 1)"];
"1000768" [label="(Call,work[i+1]&0x80000000UL)"];
"1000105" [label="(MethodParameterIn,codebook *s)"];
"1000601" [label="(Call,out[top+1]=work[work[i+1]*2])"];
"1000543" [label="(Literal,3)"];
"1000825" [label="(Call,out[top]=work[work[i]*2])"];
"1000208" [label="(Literal,1)"];
"1000262" [label="(Call,s->used_entries*(s->dec_leafw+1))"];
"1000865" [label="(MethodReturn,static int)"];
"1000121" [label="(Identifier,s)"];
"1000384" [label="(Identifier,s)"];
"1000519" [label="(Call,out[top+2]=work[i] & 0xff)"];
"1000439" [label="(Call,work[i])"];
"1000166" [label="(Call,s->used_entries > INT_MAX/2 ||\n      s->used_entries*2 > INT_MAX/((long) sizeof(*work)) - 1)"];
"1000188" [label="(Literal,1)"];
"1000413" [label="(ControlStructure,if(work[i]&0x80000000UL))"];
"1000196" [label="(Call,s->entries)"];
"1000374" [label="(Call,s->used_entries*3-2)"];
"1000526" [label="(Call,work[i])"];
"1000221" [label="(ControlStructure,if (s->used_entries > INT_MAX/(s->dec_leafw+1)))"];
"1000739" [label="(Call,out[top+1]=work[work[i+1]*2])"];
"1000798" [label="(Call,work[i+1]>>16)"];
"1000191" [label="(Call,work=calloc((s->entries*2+1),sizeof(*work)))"];
"1000223" [label="(Call,s->used_entries)"];
"1000194" [label="(Call,s->entries*2+1)"];
"1000180" [label="(Call,INT_MAX/((long) sizeof(*work)) - 1)"];
"1000502" [label="(Literal,0x7f)"];
"1000504" [label="(Call,out[top+1]=work[work[i+1]*2])"];
"1000113" [label="(ControlStructure,if (!lengthlist))"];
"1000418" [label="(Literal,0x80000000UL)"];
"1000616" [label="(Call,work[i]=top)"];
"1000589" [label="(Literal,2)"];
"1000501" [label="(Literal,8)"];
"1000237" [label="(Identifier,s)"];
"1000266" [label="(Call,s->dec_leafw+1)"];
"1000472" [label="(Literal,0xff)"];
"1000506" [label="(Identifier,out)"];
"1000429" [label="(Call,top-=4)"];
"1000723" [label="(Call,top-=3)"];
"1000831" [label="(Call,work[i]*2)"];
"1000493" [label="(Identifier,out)"];
"1000551" [label="(Call,work[i])"];
"1000620" [label="(Identifier,top)"];
"1000434" [label="(Identifier,out)"];
"1000201" [label="(Call,sizeof(*work))"];
"1000430" [label="(Identifier,top)"];
"1000550" [label="(Call,work[i]*2)"];
"1000412" [label="(Block,)"];
"1000261" [label="(Call,s->used_entries*(s->dec_leafw+1)-2)"];
"1000357" [label="(Call,((work[i] & 0x80000000UL) >> 16) | work[i])"];
"1000173" [label="(Literal,2)"];
"1000218" [label="(Identifier,opb)"];
"1000673" [label="(Call,work[i]>>16)"];
"1000339" [label="(Call,s->used_entries*2)"];
"1000469" [label="(Call,work[i])"];
"1000415" [label="(Call,work[i])"];
"1000172" [label="(Identifier,INT_MAX)"];
"1000844" [label="(Call,work[i+1]*2)"];
"1000199" [label="(Literal,2)"];
"1000193" [label="(Call,calloc((s->entries*2+1),sizeof(*work)))"];
"1000442" [label="(Literal,8)"];
"1000239" [label="(Call,s->used_entries * (s->dec_leafw+1) > INT_MAX/s->dec_nodeb)"];
"1000590" [label="(Call,out[top]=work[work[i]*2])"];
"1000181" [label="(Call,INT_MAX/((long) sizeof(*work)))"];
"1000594" [label="(Call,work[work[i]*2])"];
"1000414" -> "1000413"  [label="AST: "];
"1000414" -> "1000418"  [label="CFG: "];
"1000415" -> "1000414"  [label="AST: "];
"1000418" -> "1000414"  [label="AST: "];
"1000423" -> "1000414"  [label="CFG: "];
"1000535" -> "1000414"  [label="CFG: "];
"1000414" -> "1000865"  [label="DDG: work[i]&0x80000000UL"];
"1000616" -> "1000414"  [label="DDG: work[i]"];
"1000210" -> "1000414"  [label="DDG: work"];
"1000414" -> "1000438"  [label="DDG: work[i]"];
"1000414" -> "1000497"  [label="DDG: work[i]"];
"1000414" -> "1000550"  [label="DDG: work[i]"];
"1000414" -> "1000596"  [label="DDG: work[i]"];
"1000616" -> "1000412"  [label="AST: "];
"1000616" -> "1000620"  [label="CFG: "];
"1000617" -> "1000616"  [label="AST: "];
"1000620" -> "1000616"  [label="AST: "];
"1000410" -> "1000616"  [label="CFG: "];
"1000616" -> "1000865"  [label="DDG: work[i]"];
"1000616" -> "1000865"  [label="DDG: top"];
"1000429" -> "1000616"  [label="DDG: top"];
"1000587" -> "1000616"  [label="DDG: top"];
"1000488" -> "1000616"  [label="DDG: top"];
"1000541" -> "1000616"  [label="DDG: top"];
"1000616" -> "1000856"  [label="DDG: work[i]"];
"1000429" -> "1000428"  [label="AST: "];
"1000429" -> "1000431"  [label="CFG: "];
"1000430" -> "1000429"  [label="AST: "];
"1000431" -> "1000429"  [label="AST: "];
"1000434" -> "1000429"  [label="CFG: "];
"1000372" -> "1000429"  [label="DDG: top"];
"1000587" -> "1000429"  [label="DDG: top"];
"1000488" -> "1000429"  [label="DDG: top"];
"1000541" -> "1000429"  [label="DDG: top"];
"1000429" -> "1000448"  [label="DDG: top"];
"1000429" -> "1000465"  [label="DDG: top"];
"1000429" -> "1000476"  [label="DDG: top"];
"1000429" -> "1000488"  [label="DDG: top"];
"1000429" -> "1000541"  [label="DDG: top"];
"1000429" -> "1000587"  [label="DDG: top"];
"1000372" -> "1000370"  [label="AST: "];
"1000372" -> "1000374"  [label="CFG: "];
"1000373" -> "1000372"  [label="AST: "];
"1000374" -> "1000372"  [label="AST: "];
"1000384" -> "1000372"  [label="CFG: "];
"1000372" -> "1000865"  [label="DDG: top"];
"1000372" -> "1000865"  [label="DDG: s->used_entries*3-2"];
"1000374" -> "1000372"  [label="DDG: s->used_entries*3"];
"1000374" -> "1000372"  [label="DDG: 2"];
"1000372" -> "1000488"  [label="DDG: top"];
"1000372" -> "1000541"  [label="DDG: top"];
"1000372" -> "1000587"  [label="DDG: top"];
"1000372" -> "1000664"  [label="DDG: top"];
"1000372" -> "1000723"  [label="DDG: top"];
"1000372" -> "1000776"  [label="DDG: top"];
"1000372" -> "1000822"  [label="DDG: top"];
"1000374" -> "1000380"  [label="CFG: "];
"1000375" -> "1000374"  [label="AST: "];
"1000380" -> "1000374"  [label="AST: "];
"1000374" -> "1000865"  [label="DDG: s->used_entries*3"];
"1000375" -> "1000374"  [label="DDG: s->used_entries"];
"1000375" -> "1000374"  [label="DDG: 3"];
"1000375" -> "1000379"  [label="CFG: "];
"1000376" -> "1000375"  [label="AST: "];
"1000379" -> "1000375"  [label="AST: "];
"1000380" -> "1000375"  [label="CFG: "];
"1000262" -> "1000375"  [label="DDG: s->used_entries"];
"1000375" -> "1000400"  [label="DDG: s->used_entries"];
"1000375" -> "1000635"  [label="DDG: s->used_entries"];
"1000262" -> "1000261"  [label="AST: "];
"1000262" -> "1000266"  [label="CFG: "];
"1000263" -> "1000262"  [label="AST: "];
"1000266" -> "1000262"  [label="AST: "];
"1000271" -> "1000262"  [label="CFG: "];
"1000262" -> "1000865"  [label="DDG: s->used_entries"];
"1000262" -> "1000865"  [label="DDG: s->dec_leafw+1"];
"1000262" -> "1000261"  [label="DDG: s->used_entries"];
"1000262" -> "1000261"  [label="DDG: s->dec_leafw+1"];
"1000222" -> "1000262"  [label="DDG: s->used_entries"];
"1000240" -> "1000262"  [label="DDG: s->used_entries"];
"1000262" -> "1000301"  [label="DDG: s->used_entries"];
"1000262" -> "1000339"  [label="DDG: s->used_entries"];
"1000222" -> "1000221"  [label="AST: "];
"1000222" -> "1000226"  [label="CFG: "];
"1000223" -> "1000222"  [label="AST: "];
"1000226" -> "1000222"  [label="AST: "];
"1000233" -> "1000222"  [label="CFG: "];
"1000237" -> "1000222"  [label="CFG: "];
"1000222" -> "1000865"  [label="DDG: s->used_entries"];
"1000222" -> "1000865"  [label="DDG: INT_MAX/(s->dec_leafw+1)"];
"1000222" -> "1000865"  [label="DDG: s->used_entries > INT_MAX/(s->dec_leafw+1)"];
"1000167" -> "1000222"  [label="DDG: s->used_entries"];
"1000175" -> "1000222"  [label="DDG: s->used_entries"];
"1000226" -> "1000222"  [label="DDG: INT_MAX"];
"1000226" -> "1000222"  [label="DDG: s->dec_leafw+1"];
"1000222" -> "1000240"  [label="DDG: s->used_entries"];
"1000167" -> "1000166"  [label="AST: "];
"1000167" -> "1000171"  [label="CFG: "];
"1000168" -> "1000167"  [label="AST: "];
"1000171" -> "1000167"  [label="AST: "];
"1000177" -> "1000167"  [label="CFG: "];
"1000166" -> "1000167"  [label="CFG: "];
"1000167" -> "1000865"  [label="DDG: s->used_entries"];
"1000167" -> "1000865"  [label="DDG: INT_MAX/2"];
"1000167" -> "1000166"  [label="DDG: s->used_entries"];
"1000167" -> "1000166"  [label="DDG: INT_MAX/2"];
"1000171" -> "1000167"  [label="DDG: INT_MAX"];
"1000171" -> "1000167"  [label="DDG: 2"];
"1000167" -> "1000175"  [label="DDG: s->used_entries"];
"1000171" -> "1000173"  [label="CFG: "];
"1000172" -> "1000171"  [label="AST: "];
"1000173" -> "1000171"  [label="AST: "];
"1000171" -> "1000865"  [label="DDG: INT_MAX"];
"1000171" -> "1000181"  [label="DDG: INT_MAX"];
"1000171" -> "1000226"  [label="DDG: INT_MAX"];
"1000175" -> "1000174"  [label="AST: "];
"1000175" -> "1000179"  [label="CFG: "];
"1000176" -> "1000175"  [label="AST: "];
"1000179" -> "1000175"  [label="AST: "];
"1000182" -> "1000175"  [label="CFG: "];
"1000175" -> "1000865"  [label="DDG: s->used_entries"];
"1000175" -> "1000174"  [label="DDG: s->used_entries"];
"1000175" -> "1000174"  [label="DDG: 2"];
"1000226" -> "1000228"  [label="CFG: "];
"1000227" -> "1000226"  [label="AST: "];
"1000228" -> "1000226"  [label="AST: "];
"1000226" -> "1000865"  [label="DDG: INT_MAX"];
"1000226" -> "1000865"  [label="DDG: s->dec_leafw+1"];
"1000181" -> "1000226"  [label="DDG: INT_MAX"];
"1000226" -> "1000249"  [label="DDG: INT_MAX"];
"1000181" -> "1000180"  [label="AST: "];
"1000181" -> "1000183"  [label="CFG: "];
"1000182" -> "1000181"  [label="AST: "];
"1000183" -> "1000181"  [label="AST: "];
"1000188" -> "1000181"  [label="CFG: "];
"1000181" -> "1000865"  [label="DDG: INT_MAX"];
"1000181" -> "1000865"  [label="DDG: (long) sizeof(*work)"];
"1000181" -> "1000180"  [label="DDG: INT_MAX"];
"1000181" -> "1000180"  [label="DDG: (long) sizeof(*work)"];
"1000240" -> "1000239"  [label="AST: "];
"1000240" -> "1000244"  [label="CFG: "];
"1000241" -> "1000240"  [label="AST: "];
"1000244" -> "1000240"  [label="AST: "];
"1000250" -> "1000240"  [label="CFG: "];
"1000240" -> "1000865"  [label="DDG: s->dec_leafw+1"];
"1000240" -> "1000865"  [label="DDG: s->used_entries"];
"1000240" -> "1000239"  [label="DDG: s->used_entries"];
"1000240" -> "1000239"  [label="DDG: s->dec_leafw+1"];
"1000587" -> "1000586"  [label="AST: "];
"1000587" -> "1000589"  [label="CFG: "];
"1000588" -> "1000587"  [label="AST: "];
"1000589" -> "1000587"  [label="AST: "];
"1000592" -> "1000587"  [label="CFG: "];
"1000587" -> "1000488"  [label="DDG: top"];
"1000587" -> "1000541"  [label="DDG: top"];
"1000488" -> "1000587"  [label="DDG: top"];
"1000541" -> "1000587"  [label="DDG: top"];
"1000587" -> "1000604"  [label="DDG: top"];
"1000488" -> "1000487"  [label="AST: "];
"1000488" -> "1000490"  [label="CFG: "];
"1000489" -> "1000488"  [label="AST: "];
"1000490" -> "1000488"  [label="AST: "];
"1000493" -> "1000488"  [label="CFG: "];
"1000541" -> "1000488"  [label="DDG: top"];
"1000488" -> "1000507"  [label="DDG: top"];
"1000488" -> "1000522"  [label="DDG: top"];
"1000488" -> "1000541"  [label="DDG: top"];
"1000541" -> "1000540"  [label="AST: "];
"1000541" -> "1000543"  [label="CFG: "];
"1000542" -> "1000541"  [label="AST: "];
"1000543" -> "1000541"  [label="AST: "];
"1000546" -> "1000541"  [label="CFG: "];
"1000541" -> "1000558"  [label="DDG: top"];
"1000541" -> "1000575"  [label="DDG: top"];
"1000210" -> "1000209"  [label="AST: "];
"1000210" -> "1000219"  [label="CFG: "];
"1000211" -> "1000210"  [label="AST: "];
"1000212" -> "1000210"  [label="AST: "];
"1000215" -> "1000210"  [label="AST: "];
"1000216" -> "1000210"  [label="AST: "];
"1000217" -> "1000210"  [label="AST: "];
"1000218" -> "1000210"  [label="AST: "];
"1000219" -> "1000210"  [label="AST: "];
"1000220" -> "1000210"  [label="CFG: "];
"1000224" -> "1000210"  [label="CFG: "];
"1000210" -> "1000865"  [label="DDG: _make_words(lengthlist,s->entries,work,quantvals,s,opb,maptype)"];
"1000210" -> "1000865"  [label="DDG: quantvals"];
"1000210" -> "1000865"  [label="DDG: maptype"];
"1000210" -> "1000865"  [label="DDG: s"];
"1000210" -> "1000865"  [label="DDG: opb"];
"1000210" -> "1000865"  [label="DDG: s->entries"];
"1000210" -> "1000865"  [label="DDG: lengthlist"];
"1000114" -> "1000210"  [label="DDG: lengthlist"];
"1000106" -> "1000210"  [label="DDG: lengthlist"];
"1000195" -> "1000210"  [label="DDG: s->entries"];
"1000205" -> "1000210"  [label="DDG: work"];
"1000107" -> "1000210"  [label="DDG: quantvals"];
"1000105" -> "1000210"  [label="DDG: s"];
"1000108" -> "1000210"  [label="DDG: opb"];
"1000109" -> "1000210"  [label="DDG: maptype"];
"1000210" -> "1000321"  [label="DDG: work"];
"1000210" -> "1000319"  [label="DDG: work"];
"1000210" -> "1000359"  [label="DDG: work"];
"1000210" -> "1000357"  [label="DDG: work"];
"1000210" -> "1000421"  [label="DDG: work"];
"1000210" -> "1000438"  [label="DDG: work"];
"1000210" -> "1000453"  [label="DDG: work"];
"1000210" -> "1000468"  [label="DDG: work"];
"1000210" -> "1000479"  [label="DDG: work"];
"1000210" -> "1000497"  [label="DDG: work"];
"1000210" -> "1000504"  [label="DDG: work"];
"1000210" -> "1000512"  [label="DDG: work"];
"1000210" -> "1000525"  [label="DDG: work"];
"1000210" -> "1000533"  [label="DDG: work"];
"1000210" -> "1000544"  [label="DDG: work"];
"1000210" -> "1000550"  [label="DDG: work"];
"1000210" -> "1000563"  [label="DDG: work"];
"1000210" -> "1000578"  [label="DDG: work"];
"1000210" -> "1000590"  [label="DDG: work"];
"1000210" -> "1000596"  [label="DDG: work"];
"1000210" -> "1000601"  [label="DDG: work"];
"1000210" -> "1000609"  [label="DDG: work"];
"1000210" -> "1000649"  [label="DDG: work"];
"1000210" -> "1000656"  [label="DDG: work"];
"1000210" -> "1000673"  [label="DDG: work"];
"1000210" -> "1000688"  [label="DDG: work"];
"1000210" -> "1000703"  [label="DDG: work"];
"1000210" -> "1000714"  [label="DDG: work"];
"1000210" -> "1000732"  [label="DDG: work"];
"1000210" -> "1000739"  [label="DDG: work"];
"1000210" -> "1000747"  [label="DDG: work"];
"1000210" -> "1000760"  [label="DDG: work"];
"1000210" -> "1000768"  [label="DDG: work"];
"1000210" -> "1000779"  [label="DDG: work"];
"1000210" -> "1000785"  [label="DDG: work"];
"1000210" -> "1000798"  [label="DDG: work"];
"1000210" -> "1000813"  [label="DDG: work"];
"1000210" -> "1000825"  [label="DDG: work"];
"1000210" -> "1000831"  [label="DDG: work"];
"1000210" -> "1000836"  [label="DDG: work"];
"1000210" -> "1000844"  [label="DDG: work"];
"1000210" -> "1000856"  [label="DDG: work"];
"1000210" -> "1000861"  [label="DDG: work"];
"1000114" -> "1000113"  [label="AST: "];
"1000114" -> "1000115"  [label="CFG: "];
"1000115" -> "1000114"  [label="AST: "];
"1000117" -> "1000114"  [label="CFG: "];
"1000121" -> "1000114"  [label="CFG: "];
"1000114" -> "1000865"  [label="DDG: !lengthlist"];
"1000114" -> "1000865"  [label="DDG: lengthlist"];
"1000106" -> "1000114"  [label="DDG: lengthlist"];
"1000114" -> "1000149"  [label="DDG: lengthlist"];
"1000106" -> "1000104"  [label="AST: "];
"1000106" -> "1000865"  [label="DDG: lengthlist"];
"1000106" -> "1000149"  [label="DDG: lengthlist"];
"1000195" -> "1000194"  [label="AST: "];
"1000195" -> "1000199"  [label="CFG: "];
"1000196" -> "1000195"  [label="AST: "];
"1000199" -> "1000195"  [label="AST: "];
"1000200" -> "1000195"  [label="CFG: "];
"1000195" -> "1000865"  [label="DDG: s->entries"];
"1000195" -> "1000193"  [label="DDG: s->entries"];
"1000195" -> "1000193"  [label="DDG: 2"];
"1000195" -> "1000194"  [label="DDG: s->entries"];
"1000195" -> "1000194"  [label="DDG: 2"];
"1000205" -> "1000204"  [label="AST: "];
"1000205" -> "1000206"  [label="CFG: "];
"1000206" -> "1000205"  [label="AST: "];
"1000208" -> "1000205"  [label="CFG: "];
"1000211" -> "1000205"  [label="CFG: "];
"1000205" -> "1000865"  [label="DDG: work"];
"1000205" -> "1000865"  [label="DDG: !work"];
"1000191" -> "1000205"  [label="DDG: work"];
"1000191" -> "1000110"  [label="AST: "];
"1000191" -> "1000193"  [label="CFG: "];
"1000192" -> "1000191"  [label="AST: "];
"1000193" -> "1000191"  [label="AST: "];
"1000206" -> "1000191"  [label="CFG: "];
"1000191" -> "1000865"  [label="DDG: calloc((s->entries*2+1),sizeof(*work))"];
"1000193" -> "1000191"  [label="DDG: s->entries*2+1"];
"1000193" -> "1000201"  [label="CFG: "];
"1000194" -> "1000193"  [label="AST: "];
"1000201" -> "1000193"  [label="AST: "];
"1000193" -> "1000865"  [label="DDG: s->entries*2+1"];
"1000107" -> "1000104"  [label="AST: "];
"1000107" -> "1000865"  [label="DDG: quantvals"];
"1000107" -> "1000149"  [label="DDG: quantvals"];
"1000105" -> "1000104"  [label="AST: "];
"1000105" -> "1000865"  [label="DDG: s"];
"1000105" -> "1000149"  [label="DDG: s"];
"1000108" -> "1000104"  [label="AST: "];
"1000108" -> "1000865"  [label="DDG: opb"];
"1000108" -> "1000149"  [label="DDG: opb"];
"1000109" -> "1000104"  [label="AST: "];
"1000109" -> "1000865"  [label="DDG: maptype"];
"1000109" -> "1000149"  [label="DDG: maptype"];
"1000438" -> "1000437"  [label="AST: "];
"1000438" -> "1000442"  [label="CFG: "];
"1000439" -> "1000438"  [label="AST: "];
"1000442" -> "1000438"  [label="AST: "];
"1000443" -> "1000438"  [label="CFG: "];
"1000438" -> "1000437"  [label="DDG: work[i]"];
"1000438" -> "1000437"  [label="DDG: 8"];
"1000438" -> "1000468"  [label="DDG: work[i]"];
"1000437" -> "1000436"  [label="AST: "];
"1000437" -> "1000443"  [label="CFG: "];
"1000443" -> "1000437"  [label="AST: "];
"1000444" -> "1000437"  [label="CFG: "];
"1000437" -> "1000865"  [label="DDG: work[i]>>8"];
"1000437" -> "1000436"  [label="DDG: work[i]>>8"];
"1000437" -> "1000436"  [label="DDG: 0x7f"];
"1000436" -> "1000432"  [label="AST: "];
"1000436" -> "1000444"  [label="CFG: "];
"1000444" -> "1000436"  [label="AST: "];
"1000432" -> "1000436"  [label="CFG: "];
"1000436" -> "1000865"  [label="DDG: work[i]>>8 & 0x7f"];
"1000436" -> "1000432"  [label="DDG: work[i]>>8 & 0x7f"];
"1000436" -> "1000432"  [label="DDG: 0x80"];
"1000432" -> "1000428"  [label="AST: "];
"1000433" -> "1000432"  [label="AST: "];
"1000447" -> "1000432"  [label="CFG: "];
"1000432" -> "1000865"  [label="DDG: (work[i]>>8 & 0x7f)|0x80"];
"1000432" -> "1000865"  [label="DDG: out[top]"];
"1000468" -> "1000462"  [label="AST: "];
"1000468" -> "1000472"  [label="CFG: "];
"1000469" -> "1000468"  [label="AST: "];
"1000472" -> "1000468"  [label="AST: "];
"1000462" -> "1000468"  [label="CFG: "];
"1000468" -> "1000462"  [label="DDG: work[i]"];
"1000468" -> "1000462"  [label="DDG: 0xff"];
"1000462" -> "1000428"  [label="AST: "];
"1000463" -> "1000462"  [label="AST: "];
"1000475" -> "1000462"  [label="CFG: "];
"1000462" -> "1000865"  [label="DDG: work[i] & 0xff"];
"1000462" -> "1000865"  [label="DDG: out[top+2]"];
"1000497" -> "1000496"  [label="AST: "];
"1000497" -> "1000501"  [label="CFG: "];
"1000498" -> "1000497"  [label="AST: "];
"1000501" -> "1000497"  [label="AST: "];
"1000502" -> "1000497"  [label="CFG: "];
"1000497" -> "1000496"  [label="DDG: work[i]"];
"1000497" -> "1000496"  [label="DDG: 8"];
"1000497" -> "1000525"  [label="DDG: work[i]"];
"1000496" -> "1000495"  [label="AST: "];
"1000496" -> "1000502"  [label="CFG: "];
"1000502" -> "1000496"  [label="AST: "];
"1000503" -> "1000496"  [label="CFG: "];
"1000496" -> "1000865"  [label="DDG: work[i]>>8"];
"1000496" -> "1000495"  [label="DDG: work[i]>>8"];
"1000496" -> "1000495"  [label="DDG: 0x7f"];
"1000495" -> "1000491"  [label="AST: "];
"1000495" -> "1000503"  [label="CFG: "];
"1000503" -> "1000495"  [label="AST: "];
"1000491" -> "1000495"  [label="CFG: "];
"1000495" -> "1000865"  [label="DDG: work[i]>>8 & 0x7f"];
"1000495" -> "1000491"  [label="DDG: work[i]>>8 & 0x7f"];
"1000495" -> "1000491"  [label="DDG: 0x80"];
"1000491" -> "1000487"  [label="AST: "];
"1000492" -> "1000491"  [label="AST: "];
"1000506" -> "1000491"  [label="CFG: "];
"1000491" -> "1000865"  [label="DDG: (work[i]>>8 & 0x7f)|0x80"];
"1000491" -> "1000865"  [label="DDG: out[top]"];
"1000525" -> "1000519"  [label="AST: "];
"1000525" -> "1000529"  [label="CFG: "];
"1000526" -> "1000525"  [label="AST: "];
"1000529" -> "1000525"  [label="AST: "];
"1000519" -> "1000525"  [label="CFG: "];
"1000525" -> "1000519"  [label="DDG: work[i]"];
"1000525" -> "1000519"  [label="DDG: 0xff"];
"1000519" -> "1000487"  [label="AST: "];
"1000520" -> "1000519"  [label="AST: "];
"1000618" -> "1000519"  [label="CFG: "];
"1000519" -> "1000865"  [label="DDG: work[i] & 0xff"];
"1000519" -> "1000865"  [label="DDG: out[top+2]"];
"1000550" -> "1000548"  [label="AST: "];
"1000550" -> "1000554"  [label="CFG: "];
"1000551" -> "1000550"  [label="AST: "];
"1000554" -> "1000550"  [label="AST: "];
"1000548" -> "1000550"  [label="CFG: "];
"1000596" -> "1000594"  [label="AST: "];
"1000596" -> "1000600"  [label="CFG: "];
"1000597" -> "1000596"  [label="AST: "];
"1000600" -> "1000596"  [label="AST: "];
"1000594" -> "1000596"  [label="CFG: "];
}
