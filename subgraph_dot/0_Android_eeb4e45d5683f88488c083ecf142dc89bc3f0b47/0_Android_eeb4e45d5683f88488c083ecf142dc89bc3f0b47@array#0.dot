digraph "0_Android_eeb4e45d5683f88488c083ecf142dc89bc3f0b47@array" {
"1000844" [label="(Call,work[i+1]*2)"];
"1000768" [label="(Call,work[i+1]&0x80000000UL)"];
"1000747" [label="(Call,work[i+1]*2)"];
"1000656" [label="(Call,work[i+1]&0x80000000UL)"];
"1000714" [label="(Call,work[i+1] & 0xffff)"];
"1000688" [label="(Call,work[i+1]>>16)"];
"1000210" [label="(Call,_make_words(lengthlist,s->entries,work,quantvals,s,opb,maptype))"];
"1000114" [label="(Call,!lengthlist)"];
"1000106" [label="(MethodParameterIn,char *lengthlist)"];
"1000195" [label="(Call,s->entries*2)"];
"1000205" [label="(Call,!work)"];
"1000191" [label="(Call,work=calloc((s->entries*2+1),sizeof(*work)))"];
"1000193" [label="(Call,calloc((s->entries*2+1),sizeof(*work)))"];
"1000107" [label="(MethodParameterIn,long quantvals)"];
"1000105" [label="(MethodParameterIn,codebook *s)"];
"1000108" [label="(MethodParameterIn,oggpack_buffer *opb)"];
"1000109" [label="(MethodParameterIn,int maptype)"];
"1000813" [label="(Call,work[i+1] & 0xffff)"];
"1000798" [label="(Call,work[i+1]>>16)"];
"1000844" [label="(Call,work[i+1]*2)"];
"1000687" [label="(Call,work[i+1]>>16 & 0x7fff)"];
"1000686" [label="(Call,(work[i+1]>>16 & 0x7fff)|0x8000)"];
"1000680" [label="(Call,out[top+1]=(work[i+1]>>16 & 0x7fff)|0x8000)"];
"1000708" [label="(Call,out[top+3]=work[i+1] & 0xffff)"];
"1000797" [label="(Call,work[i+1]>>16 & 0x7fff)"];
"1000796" [label="(Call,(work[i+1]>>16 & 0x7fff)|0x8000)"];
"1000790" [label="(Call,out[top+1]=(work[i+1]>>16 & 0x7fff)|0x8000)"];
"1000807" [label="(Call,out[top+2]=work[i+1] & 0xffff)"];
"1000856" [label="(Call,free(work))"];
"1000714" [label="(Call,work[i+1] & 0xffff)"];
"1000796" [label="(Call,(work[i+1]>>16 & 0x7fff)|0x8000)"];
"1000220" [label="(ControlStructure,goto error_out;)"];
"1000681" [label="(Call,out[top+1])"];
"1000212" [label="(Call,s->entries)"];
"1000117" [label="(Literal,1)"];
"1000696" [label="(Literal,0x8000)"];
"1000210" [label="(Call,_make_words(lengthlist,s->entries,work,quantvals,s,opb,maptype))"];
"1000695" [label="(Literal,0x7fff)"];
"1000688" [label="(Call,work[i+1]>>16)"];
"1000219" [label="(Identifier,maptype)"];
"1000468" [label="(Call,work[i] & 0xff)"];
"1000479" [label="(Call,work[i+1] & 0xff)"];
"1000609" [label="(Call,work[i+1]*2)"];
"1000747" [label="(Call,work[i+1]*2)"];
"1000861" [label="(Call,free(work))"];
"1000211" [label="(Identifier,lengthlist)"];
"1000217" [label="(Identifier,s)"];
"1000724" [label="(Identifier,top)"];
"1000732" [label="(Call,work[i]>>16)"];
"1000753" [label="(Literal,2)"];
"1000814" [label="(Call,work[i+1])"];
"1000850" [label="(Literal,2)"];
"1000195" [label="(Call,s->entries*2)"];
"1000578" [label="(Call,work[i+1] & 0xff)"];
"1000115" [label="(Identifier,lengthlist)"];
"1000533" [label="(Call,work[i+1]&0x80000000UL)"];
"1000114" [label="(Call,!lengthlist)"];
"1000209" [label="(ControlStructure,if(_make_words(lengthlist,s->entries,work,quantvals,s,opb,maptype)))"];
"1000709" [label="(Call,out[top+3])"];
"1000512" [label="(Call,work[i+1]*2)"];
"1000791" [label="(Call,out[top+1])"];
"1000321" [label="(Call,work[i] & 0x80000000UL)"];
"1000319" [label="(Call,((work[i] & 0x80000000UL) >> 24) | work[i])"];
"1000819" [label="(Literal,0xffff)"];
"1000649" [label="(Call,work[i]&0x80000000UL)"];
"1000799" [label="(Call,work[i+1])"];
"1000215" [label="(Identifier,work)"];
"1000205" [label="(Call,!work)"];
"1000206" [label="(Identifier,work)"];
"1000760" [label="(Call,work[i] & 0xffff)"];
"1000769" [label="(Call,work[i+1])"];
"1000109" [label="(MethodParameterIn,int maptype)"];
"1000414" [label="(Call,work[i]&0x80000000UL)"];
"1000453" [label="(Call,work[i+1]>>8)"];
"1000596" [label="(Call,work[i]*2)"];
"1000216" [label="(Identifier,quantvals)"];
"1000200" [label="(Literal,1)"];
"1000853" [label="(Identifier,work)"];
"1000544" [label="(Call,out[top]=work[work[i]*2])"];
"1000805" [label="(Literal,0x7fff)"];
"1000836" [label="(Call,out[top+1]=work[work[i+1]*2])"];
"1000149" [label="(Call,_make_words(lengthlist,s->entries,\n                   s->dec_table,quantvals,s,opb,maptype))"];
"1000438" [label="(Call,work[i]>>8)"];
"1000192" [label="(Identifier,work)"];
"1000807" [label="(Call,out[top+2]=work[i+1] & 0xffff)"];
"1000748" [label="(Call,work[i+1])"];
"1000703" [label="(Call,work[i] & 0xffff)"];
"1000797" [label="(Call,work[i+1]>>16 & 0x7fff)"];
"1000785" [label="(Call,work[i]*2)"];
"1000845" [label="(Call,work[i+1])"];
"1000497" [label="(Call,work[i]>>8)"];
"1000779" [label="(Call,out[top]=work[work[i]*2])"];
"1000859" [label="(Literal,0)"];
"1000224" [label="(Identifier,s)"];
"1000813" [label="(Call,work[i+1] & 0xffff)"];
"1000804" [label="(Literal,16)"];
"1000767" [label="(ControlStructure,if(work[i+1]&0x80000000UL))"];
"1000204" [label="(ControlStructure,if (!work))"];
"1000856" [label="(Call,free(work))"];
"1000110" [label="(Block,)"];
"1000359" [label="(Call,work[i] & 0x80000000UL)"];
"1000108" [label="(MethodParameterIn,oggpack_buffer *opb)"];
"1000777" [label="(Identifier,top)"];
"1000656" [label="(Call,work[i+1]&0x80000000UL)"];
"1000107" [label="(MethodParameterIn,long quantvals)"];
"1000421" [label="(Call,work[i+1]&0x80000000UL)"];
"1000699" [label="(Identifier,out)"];
"1000106" [label="(MethodParameterIn,char *lengthlist)"];
"1000655" [label="(ControlStructure,if(work[i+1]&0x80000000UL))"];
"1000809" [label="(Identifier,out)"];
"1000563" [label="(Call,work[i+1]>>8)"];
"1000665" [label="(Identifier,top)"];
"1000525" [label="(Call,work[i] & 0xff)"];
"1000689" [label="(Call,work[i+1])"];
"1000715" [label="(Call,work[i+1])"];
"1000768" [label="(Call,work[i+1]&0x80000000UL)"];
"1000745" [label="(Call,work[work[i+1]*2])"];
"1000657" [label="(Call,work[i+1])"];
"1000105" [label="(MethodParameterIn,codebook *s)"];
"1000601" [label="(Call,out[top+1]=work[work[i+1]*2])"];
"1000774" [label="(Literal,0x80000000UL)"];
"1000662" [label="(Literal,0x80000000UL)"];
"1000708" [label="(Call,out[top+3]=work[i+1] & 0xffff)"];
"1000825" [label="(Call,out[top]=work[work[i]*2])"];
"1000208" [label="(Literal,1)"];
"1000686" [label="(Call,(work[i+1]>>16 & 0x7fff)|0x8000)"];
"1000865" [label="(MethodReturn,static int)"];
"1000121" [label="(Identifier,s)"];
"1000680" [label="(Call,out[top+1]=(work[i+1]>>16 & 0x7fff)|0x8000)"];
"1000842" [label="(Call,work[work[i+1]*2])"];
"1000196" [label="(Call,s->entries)"];
"1000739" [label="(Call,out[top+1]=work[work[i+1]*2])"];
"1000798" [label="(Call,work[i+1]>>16)"];
"1000857" [label="(Identifier,work)"];
"1000191" [label="(Call,work=calloc((s->entries*2+1),sizeof(*work)))"];
"1000194" [label="(Call,s->entries*2+1)"];
"1000775" [label="(Block,)"];
"1000694" [label="(Literal,16)"];
"1000851" [label="(Call,work[i]=top)"];
"1000504" [label="(Call,out[top+1]=work[work[i+1]*2])"];
"1000113" [label="(ControlStructure,if (!lengthlist))"];
"1000616" [label="(Call,work[i]=top)"];
"1000663" [label="(Block,)"];
"1000790" [label="(Call,out[top+1]=(work[i+1]>>16 & 0x7fff)|0x8000)"];
"1000831" [label="(Call,work[i]*2)"];
"1000808" [label="(Call,out[top+2])"];
"1000806" [label="(Literal,0x8000)"];
"1000823" [label="(Identifier,top)"];
"1000201" [label="(Call,sizeof(*work))"];
"1000550" [label="(Call,work[i]*2)"];
"1000357" [label="(Call,((work[i] & 0x80000000UL) >> 16) | work[i])"];
"1000218" [label="(Identifier,opb)"];
"1000673" [label="(Call,work[i]>>16)"];
"1000844" [label="(Call,work[i+1]*2)"];
"1000199" [label="(Literal,2)"];
"1000193" [label="(Call,calloc((s->entries*2+1),sizeof(*work)))"];
"1000590" [label="(Call,out[top]=work[work[i]*2])"];
"1000687" [label="(Call,work[i+1]>>16 & 0x7fff)"];
"1000720" [label="(Literal,0xffff)"];
"1000844" -> "1000842"  [label="AST: "];
"1000844" -> "1000850"  [label="CFG: "];
"1000845" -> "1000844"  [label="AST: "];
"1000850" -> "1000844"  [label="AST: "];
"1000842" -> "1000844"  [label="CFG: "];
"1000844" -> "1000865"  [label="DDG: work[i+1]"];
"1000844" -> "1000656"  [label="DDG: work[i+1]"];
"1000844" -> "1000768"  [label="DDG: work[i+1]"];
"1000768" -> "1000844"  [label="DDG: work[i+1]"];
"1000210" -> "1000844"  [label="DDG: work"];
"1000844" -> "1000856"  [label="DDG: work[i+1]"];
"1000768" -> "1000767"  [label="AST: "];
"1000768" -> "1000774"  [label="CFG: "];
"1000769" -> "1000768"  [label="AST: "];
"1000774" -> "1000768"  [label="AST: "];
"1000777" -> "1000768"  [label="CFG: "];
"1000823" -> "1000768"  [label="CFG: "];
"1000768" -> "1000865"  [label="DDG: work[i+1]&0x80000000UL"];
"1000747" -> "1000768"  [label="DDG: work[i+1]"];
"1000714" -> "1000768"  [label="DDG: work[i+1]"];
"1000813" -> "1000768"  [label="DDG: work[i+1]"];
"1000210" -> "1000768"  [label="DDG: work"];
"1000768" -> "1000798"  [label="DDG: work[i+1]"];
"1000747" -> "1000745"  [label="AST: "];
"1000747" -> "1000753"  [label="CFG: "];
"1000748" -> "1000747"  [label="AST: "];
"1000753" -> "1000747"  [label="AST: "];
"1000745" -> "1000747"  [label="CFG: "];
"1000747" -> "1000865"  [label="DDG: work[i+1]"];
"1000747" -> "1000656"  [label="DDG: work[i+1]"];
"1000656" -> "1000747"  [label="DDG: work[i+1]"];
"1000210" -> "1000747"  [label="DDG: work"];
"1000747" -> "1000856"  [label="DDG: work[i+1]"];
"1000656" -> "1000655"  [label="AST: "];
"1000656" -> "1000662"  [label="CFG: "];
"1000657" -> "1000656"  [label="AST: "];
"1000662" -> "1000656"  [label="AST: "];
"1000665" -> "1000656"  [label="CFG: "];
"1000724" -> "1000656"  [label="CFG: "];
"1000656" -> "1000865"  [label="DDG: work[i+1]&0x80000000UL"];
"1000714" -> "1000656"  [label="DDG: work[i+1]"];
"1000813" -> "1000656"  [label="DDG: work[i+1]"];
"1000210" -> "1000656"  [label="DDG: work"];
"1000656" -> "1000688"  [label="DDG: work[i+1]"];
"1000714" -> "1000708"  [label="AST: "];
"1000714" -> "1000720"  [label="CFG: "];
"1000715" -> "1000714"  [label="AST: "];
"1000720" -> "1000714"  [label="AST: "];
"1000708" -> "1000714"  [label="CFG: "];
"1000714" -> "1000865"  [label="DDG: work[i+1]"];
"1000714" -> "1000708"  [label="DDG: work[i+1]"];
"1000714" -> "1000708"  [label="DDG: 0xffff"];
"1000688" -> "1000714"  [label="DDG: work[i+1]"];
"1000210" -> "1000714"  [label="DDG: work"];
"1000714" -> "1000856"  [label="DDG: work[i+1]"];
"1000688" -> "1000687"  [label="AST: "];
"1000688" -> "1000694"  [label="CFG: "];
"1000689" -> "1000688"  [label="AST: "];
"1000694" -> "1000688"  [label="AST: "];
"1000695" -> "1000688"  [label="CFG: "];
"1000688" -> "1000687"  [label="DDG: work[i+1]"];
"1000688" -> "1000687"  [label="DDG: 16"];
"1000210" -> "1000688"  [label="DDG: work"];
"1000210" -> "1000209"  [label="AST: "];
"1000210" -> "1000219"  [label="CFG: "];
"1000211" -> "1000210"  [label="AST: "];
"1000212" -> "1000210"  [label="AST: "];
"1000215" -> "1000210"  [label="AST: "];
"1000216" -> "1000210"  [label="AST: "];
"1000217" -> "1000210"  [label="AST: "];
"1000218" -> "1000210"  [label="AST: "];
"1000219" -> "1000210"  [label="AST: "];
"1000220" -> "1000210"  [label="CFG: "];
"1000224" -> "1000210"  [label="CFG: "];
"1000210" -> "1000865"  [label="DDG: _make_words(lengthlist,s->entries,work,quantvals,s,opb,maptype)"];
"1000210" -> "1000865"  [label="DDG: quantvals"];
"1000210" -> "1000865"  [label="DDG: maptype"];
"1000210" -> "1000865"  [label="DDG: s"];
"1000210" -> "1000865"  [label="DDG: opb"];
"1000210" -> "1000865"  [label="DDG: s->entries"];
"1000210" -> "1000865"  [label="DDG: lengthlist"];
"1000114" -> "1000210"  [label="DDG: lengthlist"];
"1000106" -> "1000210"  [label="DDG: lengthlist"];
"1000195" -> "1000210"  [label="DDG: s->entries"];
"1000205" -> "1000210"  [label="DDG: work"];
"1000107" -> "1000210"  [label="DDG: quantvals"];
"1000105" -> "1000210"  [label="DDG: s"];
"1000108" -> "1000210"  [label="DDG: opb"];
"1000109" -> "1000210"  [label="DDG: maptype"];
"1000210" -> "1000321"  [label="DDG: work"];
"1000210" -> "1000319"  [label="DDG: work"];
"1000210" -> "1000359"  [label="DDG: work"];
"1000210" -> "1000357"  [label="DDG: work"];
"1000210" -> "1000414"  [label="DDG: work"];
"1000210" -> "1000421"  [label="DDG: work"];
"1000210" -> "1000438"  [label="DDG: work"];
"1000210" -> "1000453"  [label="DDG: work"];
"1000210" -> "1000468"  [label="DDG: work"];
"1000210" -> "1000479"  [label="DDG: work"];
"1000210" -> "1000497"  [label="DDG: work"];
"1000210" -> "1000504"  [label="DDG: work"];
"1000210" -> "1000512"  [label="DDG: work"];
"1000210" -> "1000525"  [label="DDG: work"];
"1000210" -> "1000533"  [label="DDG: work"];
"1000210" -> "1000544"  [label="DDG: work"];
"1000210" -> "1000550"  [label="DDG: work"];
"1000210" -> "1000563"  [label="DDG: work"];
"1000210" -> "1000578"  [label="DDG: work"];
"1000210" -> "1000590"  [label="DDG: work"];
"1000210" -> "1000596"  [label="DDG: work"];
"1000210" -> "1000601"  [label="DDG: work"];
"1000210" -> "1000609"  [label="DDG: work"];
"1000210" -> "1000649"  [label="DDG: work"];
"1000210" -> "1000673"  [label="DDG: work"];
"1000210" -> "1000703"  [label="DDG: work"];
"1000210" -> "1000732"  [label="DDG: work"];
"1000210" -> "1000739"  [label="DDG: work"];
"1000210" -> "1000760"  [label="DDG: work"];
"1000210" -> "1000779"  [label="DDG: work"];
"1000210" -> "1000785"  [label="DDG: work"];
"1000210" -> "1000798"  [label="DDG: work"];
"1000210" -> "1000813"  [label="DDG: work"];
"1000210" -> "1000825"  [label="DDG: work"];
"1000210" -> "1000831"  [label="DDG: work"];
"1000210" -> "1000836"  [label="DDG: work"];
"1000210" -> "1000856"  [label="DDG: work"];
"1000210" -> "1000861"  [label="DDG: work"];
"1000114" -> "1000113"  [label="AST: "];
"1000114" -> "1000115"  [label="CFG: "];
"1000115" -> "1000114"  [label="AST: "];
"1000117" -> "1000114"  [label="CFG: "];
"1000121" -> "1000114"  [label="CFG: "];
"1000114" -> "1000865"  [label="DDG: !lengthlist"];
"1000114" -> "1000865"  [label="DDG: lengthlist"];
"1000106" -> "1000114"  [label="DDG: lengthlist"];
"1000114" -> "1000149"  [label="DDG: lengthlist"];
"1000106" -> "1000104"  [label="AST: "];
"1000106" -> "1000865"  [label="DDG: lengthlist"];
"1000106" -> "1000149"  [label="DDG: lengthlist"];
"1000195" -> "1000194"  [label="AST: "];
"1000195" -> "1000199"  [label="CFG: "];
"1000196" -> "1000195"  [label="AST: "];
"1000199" -> "1000195"  [label="AST: "];
"1000200" -> "1000195"  [label="CFG: "];
"1000195" -> "1000865"  [label="DDG: s->entries"];
"1000195" -> "1000193"  [label="DDG: s->entries"];
"1000195" -> "1000193"  [label="DDG: 2"];
"1000195" -> "1000194"  [label="DDG: s->entries"];
"1000195" -> "1000194"  [label="DDG: 2"];
"1000205" -> "1000204"  [label="AST: "];
"1000205" -> "1000206"  [label="CFG: "];
"1000206" -> "1000205"  [label="AST: "];
"1000208" -> "1000205"  [label="CFG: "];
"1000211" -> "1000205"  [label="CFG: "];
"1000205" -> "1000865"  [label="DDG: work"];
"1000205" -> "1000865"  [label="DDG: !work"];
"1000191" -> "1000205"  [label="DDG: work"];
"1000191" -> "1000110"  [label="AST: "];
"1000191" -> "1000193"  [label="CFG: "];
"1000192" -> "1000191"  [label="AST: "];
"1000193" -> "1000191"  [label="AST: "];
"1000206" -> "1000191"  [label="CFG: "];
"1000191" -> "1000865"  [label="DDG: calloc((s->entries*2+1),sizeof(*work))"];
"1000193" -> "1000191"  [label="DDG: s->entries*2+1"];
"1000193" -> "1000201"  [label="CFG: "];
"1000194" -> "1000193"  [label="AST: "];
"1000201" -> "1000193"  [label="AST: "];
"1000193" -> "1000865"  [label="DDG: s->entries*2+1"];
"1000107" -> "1000104"  [label="AST: "];
"1000107" -> "1000865"  [label="DDG: quantvals"];
"1000107" -> "1000149"  [label="DDG: quantvals"];
"1000105" -> "1000104"  [label="AST: "];
"1000105" -> "1000865"  [label="DDG: s"];
"1000105" -> "1000149"  [label="DDG: s"];
"1000108" -> "1000104"  [label="AST: "];
"1000108" -> "1000865"  [label="DDG: opb"];
"1000108" -> "1000149"  [label="DDG: opb"];
"1000109" -> "1000104"  [label="AST: "];
"1000109" -> "1000865"  [label="DDG: maptype"];
"1000109" -> "1000149"  [label="DDG: maptype"];
"1000813" -> "1000807"  [label="AST: "];
"1000813" -> "1000819"  [label="CFG: "];
"1000814" -> "1000813"  [label="AST: "];
"1000819" -> "1000813"  [label="AST: "];
"1000807" -> "1000813"  [label="CFG: "];
"1000813" -> "1000865"  [label="DDG: work[i+1]"];
"1000813" -> "1000807"  [label="DDG: work[i+1]"];
"1000813" -> "1000807"  [label="DDG: 0xffff"];
"1000798" -> "1000813"  [label="DDG: work[i+1]"];
"1000813" -> "1000856"  [label="DDG: work[i+1]"];
"1000798" -> "1000797"  [label="AST: "];
"1000798" -> "1000804"  [label="CFG: "];
"1000799" -> "1000798"  [label="AST: "];
"1000804" -> "1000798"  [label="AST: "];
"1000805" -> "1000798"  [label="CFG: "];
"1000798" -> "1000797"  [label="DDG: work[i+1]"];
"1000798" -> "1000797"  [label="DDG: 16"];
"1000687" -> "1000686"  [label="AST: "];
"1000687" -> "1000695"  [label="CFG: "];
"1000695" -> "1000687"  [label="AST: "];
"1000696" -> "1000687"  [label="CFG: "];
"1000687" -> "1000865"  [label="DDG: work[i+1]>>16"];
"1000687" -> "1000686"  [label="DDG: work[i+1]>>16"];
"1000687" -> "1000686"  [label="DDG: 0x7fff"];
"1000686" -> "1000680"  [label="AST: "];
"1000686" -> "1000696"  [label="CFG: "];
"1000696" -> "1000686"  [label="AST: "];
"1000680" -> "1000686"  [label="CFG: "];
"1000686" -> "1000865"  [label="DDG: work[i+1]>>16 & 0x7fff"];
"1000686" -> "1000680"  [label="DDG: work[i+1]>>16 & 0x7fff"];
"1000686" -> "1000680"  [label="DDG: 0x8000"];
"1000680" -> "1000663"  [label="AST: "];
"1000681" -> "1000680"  [label="AST: "];
"1000699" -> "1000680"  [label="CFG: "];
"1000680" -> "1000865"  [label="DDG: out[top+1]"];
"1000680" -> "1000865"  [label="DDG: (work[i+1]>>16 & 0x7fff)|0x8000"];
"1000708" -> "1000663"  [label="AST: "];
"1000709" -> "1000708"  [label="AST: "];
"1000853" -> "1000708"  [label="CFG: "];
"1000708" -> "1000865"  [label="DDG: work[i+1] & 0xffff"];
"1000708" -> "1000865"  [label="DDG: out[top+3]"];
"1000797" -> "1000796"  [label="AST: "];
"1000797" -> "1000805"  [label="CFG: "];
"1000805" -> "1000797"  [label="AST: "];
"1000806" -> "1000797"  [label="CFG: "];
"1000797" -> "1000865"  [label="DDG: work[i+1]>>16"];
"1000797" -> "1000796"  [label="DDG: work[i+1]>>16"];
"1000797" -> "1000796"  [label="DDG: 0x7fff"];
"1000796" -> "1000790"  [label="AST: "];
"1000796" -> "1000806"  [label="CFG: "];
"1000806" -> "1000796"  [label="AST: "];
"1000790" -> "1000796"  [label="CFG: "];
"1000796" -> "1000865"  [label="DDG: work[i+1]>>16 & 0x7fff"];
"1000796" -> "1000790"  [label="DDG: work[i+1]>>16 & 0x7fff"];
"1000796" -> "1000790"  [label="DDG: 0x8000"];
"1000790" -> "1000775"  [label="AST: "];
"1000791" -> "1000790"  [label="AST: "];
"1000809" -> "1000790"  [label="CFG: "];
"1000790" -> "1000865"  [label="DDG: out[top+1]"];
"1000790" -> "1000865"  [label="DDG: (work[i+1]>>16 & 0x7fff)|0x8000"];
"1000807" -> "1000775"  [label="AST: "];
"1000808" -> "1000807"  [label="AST: "];
"1000853" -> "1000807"  [label="CFG: "];
"1000807" -> "1000865"  [label="DDG: out[top+2]"];
"1000807" -> "1000865"  [label="DDG: work[i+1] & 0xffff"];
"1000856" -> "1000110"  [label="AST: "];
"1000856" -> "1000857"  [label="CFG: "];
"1000857" -> "1000856"  [label="AST: "];
"1000859" -> "1000856"  [label="CFG: "];
"1000856" -> "1000865"  [label="DDG: work"];
"1000512" -> "1000856"  [label="DDG: work[i+1]"];
"1000616" -> "1000856"  [label="DDG: work[i]"];
"1000851" -> "1000856"  [label="DDG: work[i]"];
"1000609" -> "1000856"  [label="DDG: work[i+1]"];
"1000479" -> "1000856"  [label="DDG: work[i+1]"];
"1000578" -> "1000856"  [label="DDG: work[i+1]"];
"1000357" -> "1000856"  [label="DDG: work[i]"];
"1000319" -> "1000856"  [label="DDG: work[i]"];
}
