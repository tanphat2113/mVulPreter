digraph "0_Android_eeb4e45d5683f88488c083ecf142dc89bc3f0b47@pointer" {
"1000473" [label="(Call,out[top+3]=work[i+1] & 0xff)"];
"1000479" [label="(Call,work[i+1] & 0xff)"];
"1000210" [label="(Call,_make_words(lengthlist,s->entries,work,quantvals,s,opb,maptype))"];
"1000114" [label="(Call,!lengthlist)"];
"1000106" [label="(MethodParameterIn,char *lengthlist)"];
"1000195" [label="(Call,s->entries*2)"];
"1000205" [label="(Call,!work)"];
"1000191" [label="(Call,work=calloc((s->entries*2+1),sizeof(*work)))"];
"1000193" [label="(Call,calloc((s->entries*2+1),sizeof(*work)))"];
"1000107" [label="(MethodParameterIn,long quantvals)"];
"1000105" [label="(MethodParameterIn,codebook *s)"];
"1000108" [label="(MethodParameterIn,oggpack_buffer *opb)"];
"1000109" [label="(MethodParameterIn,int maptype)"];
"1000453" [label="(Call,work[i+1]>>8)"];
"1000421" [label="(Call,work[i+1]&0x80000000UL)"];
"1000578" [label="(Call,work[i+1] & 0xff)"];
"1000563" [label="(Call,work[i+1]>>8)"];
"1000533" [label="(Call,work[i+1]&0x80000000UL)"];
"1000512" [label="(Call,work[i+1]*2)"];
"1000609" [label="(Call,work[i+1]*2)"];
"1000572" [label="(Call,out[top+2]=work[i+1] & 0xff)"];
"1000564" [label="(Call,work[i+1])"];
"1000714" [label="(Call,work[i+1] & 0xffff)"];
"1000220" [label="(ControlStructure,goto error_out;)"];
"1000422" [label="(Call,work[i+1])"];
"1000610" [label="(Call,work[i+1])"];
"1000212" [label="(Call,s->entries)"];
"1000618" [label="(Identifier,work)"];
"1000117" [label="(Literal,1)"];
"1000210" [label="(Call,_make_words(lengthlist,s->entries,work,quantvals,s,opb,maptype))"];
"1000219" [label="(Identifier,maptype)"];
"1000688" [label="(Call,work[i+1]>>16)"];
"1000468" [label="(Call,work[i] & 0xff)"];
"1000479" [label="(Call,work[i+1] & 0xff)"];
"1000609" [label="(Call,work[i+1]*2)"];
"1000747" [label="(Call,work[i+1]*2)"];
"1000861" [label="(Call,free(work))"];
"1000460" [label="(Literal,0x7f)"];
"1000211" [label="(Identifier,lengthlist)"];
"1000217" [label="(Identifier,s)"];
"1000732" [label="(Call,work[i]>>16)"];
"1000454" [label="(Call,work[i+1])"];
"1000195" [label="(Call,s->entries*2)"];
"1000578" [label="(Call,work[i+1] & 0xff)"];
"1000115" [label="(Identifier,lengthlist)"];
"1000533" [label="(Call,work[i+1]&0x80000000UL)"];
"1000510" [label="(Call,work[work[i+1]*2])"];
"1000114" [label="(Call,!lengthlist)"];
"1000209" [label="(ControlStructure,if(_make_words(lengthlist,s->entries,work,quantvals,s,opb,maptype)))"];
"1000512" [label="(Call,work[i+1]*2)"];
"1000321" [label="(Call,work[i] & 0x80000000UL)"];
"1000319" [label="(Call,((work[i] & 0x80000000UL) >> 24) | work[i])"];
"1000649" [label="(Call,work[i]&0x80000000UL)"];
"1000473" [label="(Call,out[top+3]=work[i+1] & 0xff)"];
"1000513" [label="(Call,work[i+1])"];
"1000215" [label="(Identifier,work)"];
"1000205" [label="(Call,!work)"];
"1000206" [label="(Identifier,work)"];
"1000760" [label="(Call,work[i] & 0xffff)"];
"1000109" [label="(MethodParameterIn,int maptype)"];
"1000414" [label="(Call,work[i]&0x80000000UL)"];
"1000453" [label="(Call,work[i+1]>>8)"];
"1000596" [label="(Call,work[i]*2)"];
"1000216" [label="(Identifier,quantvals)"];
"1000542" [label="(Identifier,top)"];
"1000200" [label="(Literal,1)"];
"1000452" [label="(Call,work[i+1]>>8 & 0x7f)"];
"1000489" [label="(Identifier,top)"];
"1000544" [label="(Call,out[top]=work[work[i]*2])"];
"1000588" [label="(Identifier,top)"];
"1000836" [label="(Call,out[top+1]=work[work[i+1]*2])"];
"1000428" [label="(Block,)"];
"1000149" [label="(Call,_make_words(lengthlist,s->entries,\n                   s->dec_table,quantvals,s,opb,maptype))"];
"1000438" [label="(Call,work[i]>>8)"];
"1000192" [label="(Identifier,work)"];
"1000607" [label="(Call,work[work[i+1]*2])"];
"1000703" [label="(Call,work[i] & 0xffff)"];
"1000785" [label="(Call,work[i]*2)"];
"1000497" [label="(Call,work[i]>>8)"];
"1000779" [label="(Call,out[top]=work[work[i]*2])"];
"1000224" [label="(Identifier,s)"];
"1000427" [label="(Literal,0x80000000UL)"];
"1000813" [label="(Call,work[i+1] & 0xffff)"];
"1000204" [label="(ControlStructure,if (!work))"];
"1000485" [label="(Literal,0xff)"];
"1000856" [label="(Call,free(work))"];
"1000110" [label="(Block,)"];
"1000474" [label="(Call,out[top+3])"];
"1000480" [label="(Call,work[i+1])"];
"1000359" [label="(Call,work[i] & 0x80000000UL)"];
"1000108" [label="(MethodParameterIn,oggpack_buffer *opb)"];
"1000656" [label="(Call,work[i+1]&0x80000000UL)"];
"1000107" [label="(MethodParameterIn,long quantvals)"];
"1000539" [label="(Literal,0x80000000UL)"];
"1000421" [label="(Call,work[i+1]&0x80000000UL)"];
"1000532" [label="(ControlStructure,if(work[i+1]&0x80000000UL))"];
"1000106" [label="(MethodParameterIn,char *lengthlist)"];
"1000563" [label="(Call,work[i+1]>>8)"];
"1000525" [label="(Call,work[i] & 0xff)"];
"1000420" [label="(ControlStructure,if(work[i+1]&0x80000000UL))"];
"1000768" [label="(Call,work[i+1]&0x80000000UL)"];
"1000105" [label="(MethodParameterIn,codebook *s)"];
"1000601" [label="(Call,out[top+1]=work[work[i+1]*2])"];
"1000825" [label="(Call,out[top]=work[work[i]*2])"];
"1000208" [label="(Literal,1)"];
"1000865" [label="(MethodReturn,static int)"];
"1000121" [label="(Identifier,s)"];
"1000579" [label="(Call,work[i+1])"];
"1000569" [label="(Literal,8)"];
"1000562" [label="(Call,work[i+1]>>8 & 0x7f)"];
"1000196" [label="(Call,s->entries)"];
"1000739" [label="(Call,out[top+1]=work[work[i+1]*2])"];
"1000798" [label="(Call,work[i+1]>>16)"];
"1000570" [label="(Literal,0x7f)"];
"1000191" [label="(Call,work=calloc((s->entries*2+1),sizeof(*work)))"];
"1000584" [label="(Literal,0xff)"];
"1000194" [label="(Call,s->entries*2+1)"];
"1000518" [label="(Literal,2)"];
"1000504" [label="(Call,out[top+1]=work[work[i+1]*2])"];
"1000113" [label="(ControlStructure,if (!lengthlist))"];
"1000831" [label="(Call,work[i]*2)"];
"1000201" [label="(Call,sizeof(*work))"];
"1000430" [label="(Identifier,top)"];
"1000550" [label="(Call,work[i]*2)"];
"1000357" [label="(Call,((work[i] & 0x80000000UL) >> 16) | work[i])"];
"1000218" [label="(Identifier,opb)"];
"1000673" [label="(Call,work[i]>>16)"];
"1000459" [label="(Literal,8)"];
"1000844" [label="(Call,work[i+1]*2)"];
"1000199" [label="(Literal,2)"];
"1000193" [label="(Call,calloc((s->entries*2+1),sizeof(*work)))"];
"1000534" [label="(Call,work[i+1])"];
"1000615" [label="(Literal,2)"];
"1000590" [label="(Call,out[top]=work[work[i]*2])"];
"1000473" -> "1000428"  [label="AST: "];
"1000473" -> "1000479"  [label="CFG: "];
"1000474" -> "1000473"  [label="AST: "];
"1000479" -> "1000473"  [label="AST: "];
"1000618" -> "1000473"  [label="CFG: "];
"1000473" -> "1000865"  [label="DDG: out[top+3]"];
"1000473" -> "1000865"  [label="DDG: work[i+1] & 0xff"];
"1000479" -> "1000473"  [label="DDG: work[i+1]"];
"1000479" -> "1000473"  [label="DDG: 0xff"];
"1000479" -> "1000485"  [label="CFG: "];
"1000480" -> "1000479"  [label="AST: "];
"1000485" -> "1000479"  [label="AST: "];
"1000479" -> "1000865"  [label="DDG: work[i+1]"];
"1000479" -> "1000421"  [label="DDG: work[i+1]"];
"1000210" -> "1000479"  [label="DDG: work"];
"1000453" -> "1000479"  [label="DDG: work[i+1]"];
"1000479" -> "1000533"  [label="DDG: work[i+1]"];
"1000479" -> "1000856"  [label="DDG: work[i+1]"];
"1000210" -> "1000209"  [label="AST: "];
"1000210" -> "1000219"  [label="CFG: "];
"1000211" -> "1000210"  [label="AST: "];
"1000212" -> "1000210"  [label="AST: "];
"1000215" -> "1000210"  [label="AST: "];
"1000216" -> "1000210"  [label="AST: "];
"1000217" -> "1000210"  [label="AST: "];
"1000218" -> "1000210"  [label="AST: "];
"1000219" -> "1000210"  [label="AST: "];
"1000220" -> "1000210"  [label="CFG: "];
"1000224" -> "1000210"  [label="CFG: "];
"1000210" -> "1000865"  [label="DDG: _make_words(lengthlist,s->entries,work,quantvals,s,opb,maptype)"];
"1000210" -> "1000865"  [label="DDG: quantvals"];
"1000210" -> "1000865"  [label="DDG: maptype"];
"1000210" -> "1000865"  [label="DDG: s"];
"1000210" -> "1000865"  [label="DDG: opb"];
"1000210" -> "1000865"  [label="DDG: s->entries"];
"1000210" -> "1000865"  [label="DDG: lengthlist"];
"1000114" -> "1000210"  [label="DDG: lengthlist"];
"1000106" -> "1000210"  [label="DDG: lengthlist"];
"1000195" -> "1000210"  [label="DDG: s->entries"];
"1000205" -> "1000210"  [label="DDG: work"];
"1000107" -> "1000210"  [label="DDG: quantvals"];
"1000105" -> "1000210"  [label="DDG: s"];
"1000108" -> "1000210"  [label="DDG: opb"];
"1000109" -> "1000210"  [label="DDG: maptype"];
"1000210" -> "1000321"  [label="DDG: work"];
"1000210" -> "1000319"  [label="DDG: work"];
"1000210" -> "1000359"  [label="DDG: work"];
"1000210" -> "1000357"  [label="DDG: work"];
"1000210" -> "1000414"  [label="DDG: work"];
"1000210" -> "1000421"  [label="DDG: work"];
"1000210" -> "1000438"  [label="DDG: work"];
"1000210" -> "1000453"  [label="DDG: work"];
"1000210" -> "1000468"  [label="DDG: work"];
"1000210" -> "1000497"  [label="DDG: work"];
"1000210" -> "1000504"  [label="DDG: work"];
"1000210" -> "1000512"  [label="DDG: work"];
"1000210" -> "1000525"  [label="DDG: work"];
"1000210" -> "1000533"  [label="DDG: work"];
"1000210" -> "1000544"  [label="DDG: work"];
"1000210" -> "1000550"  [label="DDG: work"];
"1000210" -> "1000563"  [label="DDG: work"];
"1000210" -> "1000578"  [label="DDG: work"];
"1000210" -> "1000590"  [label="DDG: work"];
"1000210" -> "1000596"  [label="DDG: work"];
"1000210" -> "1000601"  [label="DDG: work"];
"1000210" -> "1000609"  [label="DDG: work"];
"1000210" -> "1000649"  [label="DDG: work"];
"1000210" -> "1000656"  [label="DDG: work"];
"1000210" -> "1000673"  [label="DDG: work"];
"1000210" -> "1000688"  [label="DDG: work"];
"1000210" -> "1000703"  [label="DDG: work"];
"1000210" -> "1000714"  [label="DDG: work"];
"1000210" -> "1000732"  [label="DDG: work"];
"1000210" -> "1000739"  [label="DDG: work"];
"1000210" -> "1000747"  [label="DDG: work"];
"1000210" -> "1000760"  [label="DDG: work"];
"1000210" -> "1000768"  [label="DDG: work"];
"1000210" -> "1000779"  [label="DDG: work"];
"1000210" -> "1000785"  [label="DDG: work"];
"1000210" -> "1000798"  [label="DDG: work"];
"1000210" -> "1000813"  [label="DDG: work"];
"1000210" -> "1000825"  [label="DDG: work"];
"1000210" -> "1000831"  [label="DDG: work"];
"1000210" -> "1000836"  [label="DDG: work"];
"1000210" -> "1000844"  [label="DDG: work"];
"1000210" -> "1000856"  [label="DDG: work"];
"1000210" -> "1000861"  [label="DDG: work"];
"1000114" -> "1000113"  [label="AST: "];
"1000114" -> "1000115"  [label="CFG: "];
"1000115" -> "1000114"  [label="AST: "];
"1000117" -> "1000114"  [label="CFG: "];
"1000121" -> "1000114"  [label="CFG: "];
"1000114" -> "1000865"  [label="DDG: !lengthlist"];
"1000114" -> "1000865"  [label="DDG: lengthlist"];
"1000106" -> "1000114"  [label="DDG: lengthlist"];
"1000114" -> "1000149"  [label="DDG: lengthlist"];
"1000106" -> "1000104"  [label="AST: "];
"1000106" -> "1000865"  [label="DDG: lengthlist"];
"1000106" -> "1000149"  [label="DDG: lengthlist"];
"1000195" -> "1000194"  [label="AST: "];
"1000195" -> "1000199"  [label="CFG: "];
"1000196" -> "1000195"  [label="AST: "];
"1000199" -> "1000195"  [label="AST: "];
"1000200" -> "1000195"  [label="CFG: "];
"1000195" -> "1000865"  [label="DDG: s->entries"];
"1000195" -> "1000193"  [label="DDG: s->entries"];
"1000195" -> "1000193"  [label="DDG: 2"];
"1000195" -> "1000194"  [label="DDG: s->entries"];
"1000195" -> "1000194"  [label="DDG: 2"];
"1000205" -> "1000204"  [label="AST: "];
"1000205" -> "1000206"  [label="CFG: "];
"1000206" -> "1000205"  [label="AST: "];
"1000208" -> "1000205"  [label="CFG: "];
"1000211" -> "1000205"  [label="CFG: "];
"1000205" -> "1000865"  [label="DDG: work"];
"1000205" -> "1000865"  [label="DDG: !work"];
"1000191" -> "1000205"  [label="DDG: work"];
"1000191" -> "1000110"  [label="AST: "];
"1000191" -> "1000193"  [label="CFG: "];
"1000192" -> "1000191"  [label="AST: "];
"1000193" -> "1000191"  [label="AST: "];
"1000206" -> "1000191"  [label="CFG: "];
"1000191" -> "1000865"  [label="DDG: calloc((s->entries*2+1),sizeof(*work))"];
"1000193" -> "1000191"  [label="DDG: s->entries*2+1"];
"1000193" -> "1000201"  [label="CFG: "];
"1000194" -> "1000193"  [label="AST: "];
"1000201" -> "1000193"  [label="AST: "];
"1000193" -> "1000865"  [label="DDG: s->entries*2+1"];
"1000107" -> "1000104"  [label="AST: "];
"1000107" -> "1000865"  [label="DDG: quantvals"];
"1000107" -> "1000149"  [label="DDG: quantvals"];
"1000105" -> "1000104"  [label="AST: "];
"1000105" -> "1000865"  [label="DDG: s"];
"1000105" -> "1000149"  [label="DDG: s"];
"1000108" -> "1000104"  [label="AST: "];
"1000108" -> "1000865"  [label="DDG: opb"];
"1000108" -> "1000149"  [label="DDG: opb"];
"1000109" -> "1000104"  [label="AST: "];
"1000109" -> "1000865"  [label="DDG: maptype"];
"1000109" -> "1000149"  [label="DDG: maptype"];
"1000453" -> "1000452"  [label="AST: "];
"1000453" -> "1000459"  [label="CFG: "];
"1000454" -> "1000453"  [label="AST: "];
"1000459" -> "1000453"  [label="AST: "];
"1000460" -> "1000453"  [label="CFG: "];
"1000453" -> "1000452"  [label="DDG: work[i+1]"];
"1000453" -> "1000452"  [label="DDG: 8"];
"1000421" -> "1000453"  [label="DDG: work[i+1]"];
"1000421" -> "1000420"  [label="AST: "];
"1000421" -> "1000427"  [label="CFG: "];
"1000422" -> "1000421"  [label="AST: "];
"1000427" -> "1000421"  [label="AST: "];
"1000430" -> "1000421"  [label="CFG: "];
"1000489" -> "1000421"  [label="CFG: "];
"1000421" -> "1000865"  [label="DDG: work[i+1]&0x80000000UL"];
"1000578" -> "1000421"  [label="DDG: work[i+1]"];
"1000512" -> "1000421"  [label="DDG: work[i+1]"];
"1000609" -> "1000421"  [label="DDG: work[i+1]"];
"1000421" -> "1000512"  [label="DDG: work[i+1]"];
"1000578" -> "1000572"  [label="AST: "];
"1000578" -> "1000584"  [label="CFG: "];
"1000579" -> "1000578"  [label="AST: "];
"1000584" -> "1000578"  [label="AST: "];
"1000572" -> "1000578"  [label="CFG: "];
"1000578" -> "1000865"  [label="DDG: work[i+1]"];
"1000578" -> "1000533"  [label="DDG: work[i+1]"];
"1000578" -> "1000572"  [label="DDG: work[i+1]"];
"1000578" -> "1000572"  [label="DDG: 0xff"];
"1000563" -> "1000578"  [label="DDG: work[i+1]"];
"1000578" -> "1000856"  [label="DDG: work[i+1]"];
"1000563" -> "1000562"  [label="AST: "];
"1000563" -> "1000569"  [label="CFG: "];
"1000564" -> "1000563"  [label="AST: "];
"1000569" -> "1000563"  [label="AST: "];
"1000570" -> "1000563"  [label="CFG: "];
"1000563" -> "1000562"  [label="DDG: work[i+1]"];
"1000563" -> "1000562"  [label="DDG: 8"];
"1000533" -> "1000563"  [label="DDG: work[i+1]"];
"1000533" -> "1000532"  [label="AST: "];
"1000533" -> "1000539"  [label="CFG: "];
"1000534" -> "1000533"  [label="AST: "];
"1000539" -> "1000533"  [label="AST: "];
"1000542" -> "1000533"  [label="CFG: "];
"1000588" -> "1000533"  [label="CFG: "];
"1000533" -> "1000865"  [label="DDG: work[i+1]&0x80000000UL"];
"1000512" -> "1000533"  [label="DDG: work[i+1]"];
"1000609" -> "1000533"  [label="DDG: work[i+1]"];
"1000533" -> "1000609"  [label="DDG: work[i+1]"];
"1000512" -> "1000510"  [label="AST: "];
"1000512" -> "1000518"  [label="CFG: "];
"1000513" -> "1000512"  [label="AST: "];
"1000518" -> "1000512"  [label="AST: "];
"1000510" -> "1000512"  [label="CFG: "];
"1000512" -> "1000865"  [label="DDG: work[i+1]"];
"1000512" -> "1000856"  [label="DDG: work[i+1]"];
"1000609" -> "1000607"  [label="AST: "];
"1000609" -> "1000615"  [label="CFG: "];
"1000610" -> "1000609"  [label="AST: "];
"1000615" -> "1000609"  [label="AST: "];
"1000607" -> "1000609"  [label="CFG: "];
"1000609" -> "1000865"  [label="DDG: work[i+1]"];
"1000609" -> "1000856"  [label="DDG: work[i+1]"];
}
