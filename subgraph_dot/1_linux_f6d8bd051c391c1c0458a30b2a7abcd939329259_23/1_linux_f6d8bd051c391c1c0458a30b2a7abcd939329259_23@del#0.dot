digraph "1_linux_f6d8bd051c391c1c0458a30b2a7abcd939329259_23@del" {
"1000168" [label="(Call,daddr = replyopts.opt.faddr)"];
"1000177" [label="(Call,flowi4_init_output(&fl4, arg->bound_dev_if, 0,\n\t\t\t\t   RT_TOS(ip_hdr(skb)->tos),\n\t\t\t\t   RT_SCOPE_UNIVERSE, sk->sk_protocol,\n\t\t\t\t   ip_reply_arg_flowi_flags(arg),\n\t\t\t\t   daddr, rt->rt_spec_dst,\n\t\t\t\t   tcp_hdr(skb)->source, tcp_hdr(skb)->dest))"];
"1000209" [label="(Call,flowi4_to_flowi(&fl4))"];
"1000207" [label="(Call,security_skb_classify_flow(skb, flowi4_to_flowi(&fl4)))"];
"1000230" [label="(Call,ip_hdr(skb))"];
"1000245" [label="(Call,ip_hdr(skb))"];
"1000214" [label="(Call,ip_route_output_key(sock_net(sk), &fl4))"];
"1000212" [label="(Call,rt = ip_route_output_key(sock_net(sk), &fl4))"];
"1000220" [label="(Call,IS_ERR(rt))"];
"1000314" [label="(Call,ip_rt_put(rt))"];
"1000248" [label="(Call,sk->sk_bound_dev_if = arg->bound_dev_if)"];
"1000203" [label="(Call,tcp_hdr(skb)->dest)"];
"1000199" [label="(Call,tcp_hdr(skb)->source)"];
"1000220" [label="(Call,IS_ERR(rt))"];
"1000314" [label="(Call,ip_rt_put(rt))"];
"1000248" [label="(Call,sk->sk_bound_dev_if = arg->bound_dev_if)"];
"1000204" [label="(Call,tcp_hdr(skb))"];
"1000231" [label="(Identifier,skb)"];
"1000214" [label="(Call,ip_route_output_key(sock_net(sk), &fl4))"];
"1000244" [label="(Call,ip_hdr(skb)->protocol)"];
"1000256" [label="(Identifier,sk)"];
"1000247" [label="(FieldIdentifier,protocol)"];
"1000209" [label="(Call,flowi4_to_flowi(&fl4))"];
"1000217" [label="(Call,&fl4)"];
"1000315" [label="(Identifier,rt)"];
"1000224" [label="(Identifier,sk)"];
"1000213" [label="(Identifier,rt)"];
"1000210" [label="(Call,&fl4)"];
"1000232" [label="(FieldIdentifier,tos)"];
"1000178" [label="(Call,&fl4)"];
"1000190" [label="(Call,sk->sk_protocol)"];
"1000184" [label="(Call,RT_TOS(ip_hdr(skb)->tos))"];
"1000222" [label="(Return,return;)"];
"1000208" [label="(Identifier,skb)"];
"1000189" [label="(Identifier,RT_SCOPE_UNIVERSE)"];
"1000196" [label="(Call,rt->rt_spec_dst)"];
"1000193" [label="(Call,ip_reply_arg_flowi_flags(arg))"];
"1000207" [label="(Call,security_skb_classify_flow(skb, flowi4_to_flowi(&fl4)))"];
"1000183" [label="(Literal,0)"];
"1000169" [label="(Identifier,daddr)"];
"1000246" [label="(Identifier,skb)"];
"1000252" [label="(Call,arg->bound_dev_if)"];
"1000170" [label="(Call,replyopts.opt.faddr)"];
"1000249" [label="(Call,sk->sk_bound_dev_if)"];
"1000195" [label="(Identifier,daddr)"];
"1000179" [label="(Identifier,fl4)"];
"1000229" [label="(Call,ip_hdr(skb)->tos)"];
"1000245" [label="(Call,ip_hdr(skb))"];
"1000177" [label="(Call,flowi4_init_output(&fl4, arg->bound_dev_if, 0,\n\t\t\t\t   RT_TOS(ip_hdr(skb)->tos),\n\t\t\t\t   RT_SCOPE_UNIVERSE, sk->sk_protocol,\n\t\t\t\t   ip_reply_arg_flowi_flags(arg),\n\t\t\t\t   daddr, rt->rt_spec_dst,\n\t\t\t\t   tcp_hdr(skb)->source, tcp_hdr(skb)->dest))"];
"1000103" [label="(MethodParameterIn,struct sk_buff *skb)"];
"1000316" [label="(MethodReturn,void)"];
"1000106" [label="(Block,)"];
"1000219" [label="(ControlStructure,if (IS_ERR(rt)))"];
"1000128" [label="(Call,daddr = ipc.addr = rt->rt_src)"];
"1000215" [label="(Call,sock_net(sk))"];
"1000175" [label="(Block,)"];
"1000221" [label="(Identifier,rt)"];
"1000162" [label="(ControlStructure,if (ipc.opt->srr))"];
"1000168" [label="(Call,daddr = replyopts.opt.faddr)"];
"1000180" [label="(Call,arg->bound_dev_if)"];
"1000212" [label="(Call,rt = ip_route_output_key(sock_net(sk), &fl4))"];
"1000230" [label="(Call,ip_hdr(skb))"];
"1000168" -> "1000162"  [label="AST: "];
"1000168" -> "1000170"  [label="CFG: "];
"1000169" -> "1000168"  [label="AST: "];
"1000170" -> "1000168"  [label="AST: "];
"1000179" -> "1000168"  [label="CFG: "];
"1000168" -> "1000316"  [label="DDG: replyopts.opt.faddr"];
"1000168" -> "1000177"  [label="DDG: daddr"];
"1000177" -> "1000175"  [label="AST: "];
"1000177" -> "1000203"  [label="CFG: "];
"1000178" -> "1000177"  [label="AST: "];
"1000180" -> "1000177"  [label="AST: "];
"1000183" -> "1000177"  [label="AST: "];
"1000184" -> "1000177"  [label="AST: "];
"1000189" -> "1000177"  [label="AST: "];
"1000190" -> "1000177"  [label="AST: "];
"1000193" -> "1000177"  [label="AST: "];
"1000195" -> "1000177"  [label="AST: "];
"1000196" -> "1000177"  [label="AST: "];
"1000199" -> "1000177"  [label="AST: "];
"1000203" -> "1000177"  [label="AST: "];
"1000208" -> "1000177"  [label="CFG: "];
"1000177" -> "1000316"  [label="DDG: sk->sk_protocol"];
"1000177" -> "1000316"  [label="DDG: RT_SCOPE_UNIVERSE"];
"1000177" -> "1000316"  [label="DDG: daddr"];
"1000177" -> "1000316"  [label="DDG: RT_TOS(ip_hdr(skb)->tos)"];
"1000177" -> "1000316"  [label="DDG: tcp_hdr(skb)->dest"];
"1000177" -> "1000316"  [label="DDG: arg->bound_dev_if"];
"1000177" -> "1000316"  [label="DDG: tcp_hdr(skb)->source"];
"1000177" -> "1000316"  [label="DDG: ip_reply_arg_flowi_flags(arg)"];
"1000177" -> "1000316"  [label="DDG: flowi4_init_output(&fl4, arg->bound_dev_if, 0,\n\t\t\t\t   RT_TOS(ip_hdr(skb)->tos),\n\t\t\t\t   RT_SCOPE_UNIVERSE, sk->sk_protocol,\n\t\t\t\t   ip_reply_arg_flowi_flags(arg),\n\t\t\t\t   daddr, rt->rt_spec_dst,\n\t\t\t\t   tcp_hdr(skb)->source, tcp_hdr(skb)->dest)"];
"1000177" -> "1000316"  [label="DDG: rt->rt_spec_dst"];
"1000184" -> "1000177"  [label="DDG: ip_hdr(skb)->tos"];
"1000193" -> "1000177"  [label="DDG: arg"];
"1000128" -> "1000177"  [label="DDG: daddr"];
"1000177" -> "1000209"  [label="DDG: &fl4"];
"1000177" -> "1000248"  [label="DDG: arg->bound_dev_if"];
"1000209" -> "1000207"  [label="AST: "];
"1000209" -> "1000210"  [label="CFG: "];
"1000210" -> "1000209"  [label="AST: "];
"1000207" -> "1000209"  [label="CFG: "];
"1000209" -> "1000207"  [label="DDG: &fl4"];
"1000209" -> "1000214"  [label="DDG: &fl4"];
"1000207" -> "1000175"  [label="AST: "];
"1000208" -> "1000207"  [label="AST: "];
"1000213" -> "1000207"  [label="CFG: "];
"1000207" -> "1000316"  [label="DDG: security_skb_classify_flow(skb, flowi4_to_flowi(&fl4))"];
"1000207" -> "1000316"  [label="DDG: flowi4_to_flowi(&fl4)"];
"1000207" -> "1000316"  [label="DDG: skb"];
"1000204" -> "1000207"  [label="DDG: skb"];
"1000103" -> "1000207"  [label="DDG: skb"];
"1000207" -> "1000230"  [label="DDG: skb"];
"1000230" -> "1000229"  [label="AST: "];
"1000230" -> "1000231"  [label="CFG: "];
"1000231" -> "1000230"  [label="AST: "];
"1000232" -> "1000230"  [label="CFG: "];
"1000103" -> "1000230"  [label="DDG: skb"];
"1000230" -> "1000245"  [label="DDG: skb"];
"1000245" -> "1000244"  [label="AST: "];
"1000245" -> "1000246"  [label="CFG: "];
"1000246" -> "1000245"  [label="AST: "];
"1000247" -> "1000245"  [label="CFG: "];
"1000103" -> "1000245"  [label="DDG: skb"];
"1000214" -> "1000212"  [label="AST: "];
"1000214" -> "1000217"  [label="CFG: "];
"1000215" -> "1000214"  [label="AST: "];
"1000217" -> "1000214"  [label="AST: "];
"1000212" -> "1000214"  [label="CFG: "];
"1000214" -> "1000316"  [label="DDG: &fl4"];
"1000214" -> "1000316"  [label="DDG: sock_net(sk)"];
"1000214" -> "1000212"  [label="DDG: sock_net(sk)"];
"1000214" -> "1000212"  [label="DDG: &fl4"];
"1000215" -> "1000214"  [label="DDG: sk"];
"1000212" -> "1000175"  [label="AST: "];
"1000213" -> "1000212"  [label="AST: "];
"1000221" -> "1000212"  [label="CFG: "];
"1000212" -> "1000316"  [label="DDG: ip_route_output_key(sock_net(sk), &fl4)"];
"1000212" -> "1000220"  [label="DDG: rt"];
"1000220" -> "1000219"  [label="AST: "];
"1000220" -> "1000221"  [label="CFG: "];
"1000221" -> "1000220"  [label="AST: "];
"1000222" -> "1000220"  [label="CFG: "];
"1000224" -> "1000220"  [label="CFG: "];
"1000220" -> "1000316"  [label="DDG: rt"];
"1000220" -> "1000316"  [label="DDG: IS_ERR(rt)"];
"1000220" -> "1000314"  [label="DDG: rt"];
"1000314" -> "1000106"  [label="AST: "];
"1000314" -> "1000315"  [label="CFG: "];
"1000315" -> "1000314"  [label="AST: "];
"1000316" -> "1000314"  [label="CFG: "];
"1000314" -> "1000316"  [label="DDG: rt"];
"1000314" -> "1000316"  [label="DDG: ip_rt_put(rt)"];
"1000248" -> "1000106"  [label="AST: "];
"1000248" -> "1000252"  [label="CFG: "];
"1000249" -> "1000248"  [label="AST: "];
"1000252" -> "1000248"  [label="AST: "];
"1000256" -> "1000248"  [label="CFG: "];
"1000248" -> "1000316"  [label="DDG: arg->bound_dev_if"];
"1000248" -> "1000316"  [label="DDG: sk->sk_bound_dev_if"];
}
