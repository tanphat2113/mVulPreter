digraph "0_exim_5b7a7c051c9ab9ee7c924a611f90ef2be03e0ad0@API" {
"1000540" [label="(Call,*dmarc_domain = (uschar *)calloc(DMARC_MAXHOSTNAMELEN, sizeof(uschar)))"];
"1000542" [label="(Call,(uschar *)calloc(DMARC_MAXHOSTNAMELEN, sizeof(uschar)))"];
"1000544" [label="(Call,calloc(DMARC_MAXHOSTNAMELEN, sizeof(uschar)))"];
"1000550" [label="(Call,opendmarc_policy_fetch_utilized_domain(dmarc_pctx, dmarc_domain,\n        \t                                          DMARC_MAXHOSTNAMELEN-1))"];
"1000548" [label="(Call,libdm_status = opendmarc_policy_fetch_utilized_domain(dmarc_pctx, dmarc_domain,\n        \t                                          DMARC_MAXHOSTNAMELEN-1))"];
"1000563" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000573" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000567" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to read domainname used for DMARC lookup: %s\",\n                                       opendmarc_policy_status_to_str(libdm_status)))"];
"1000650" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000660" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000654" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to read DMARC alignment: %s\",\n                                       opendmarc_policy_status_to_str(libdm_status)))"];
"1000558" [label="(Call,string_copy(dmarc_domain))"];
"1000556" [label="(Call,dmarc_used_domain = string_copy(dmarc_domain))"];
"1000667" [label="(Call,log_write(0, LOG_MAIN, \"DMARC results: spf_domain=%s dmarc_domain=%s \"\n                             \"spf_align=%s dkim_align=%s enforcement='%s'\",\n                             spf_sender_domain, dmarc_used_domain,\n                             (sa==DMARC_POLICY_SPF_ALIGNMENT_PASS) ?\"yes\":\"no\",\n                             (da==DMARC_POLICY_DKIM_ALIGNMENT_PASS)?\"yes\":\"no\",\n                             dmarc_status_text))"];
"1000560" [label="(Call,free(dmarc_domain))"];
"1000577" [label="(Call,opendmarc_get_policy_to_enforce(dmarc_pctx))"];
"1000575" [label="(Call,libdm_status = opendmarc_get_policy_to_enforce(dmarc_pctx))"];
"1000579" [label="(Call,dmarc_policy = libdm_status)"];
"1000643" [label="(Call,opendmarc_policy_fetch_alignment(dmarc_pctx, &da, &sa))"];
"1000641" [label="(Call,libdm_status = opendmarc_policy_fetch_alignment(dmarc_pctx, &da, &sa))"];
"1000691" [label="(Call,opendmarc_policy_fetch_ruf(dmarc_pctx, NULL, 0, 1))"];
"1000689" [label="(Call,ruf = opendmarc_policy_fetch_ruf(dmarc_pctx, NULL, 0, 1))"];
"1000696" [label="(Call,dmarc_send_forensic_report(ruf))"];
"1000670" [label="(Literal,\"DMARC results: spf_domain=%s dmarc_domain=%s \"\n                             \"spf_align=%s dkim_align=%s enforcement='%s'\")"];
"1000695" [label="(Literal,1)"];
"1000651" [label="(Identifier,libdm_status)"];
"1000690" [label="(Identifier,ruf)"];
"1000546" [label="(Call,sizeof(uschar))"];
"1000642" [label="(Identifier,libdm_status)"];
"1000557" [label="(Identifier,dmarc_used_domain)"];
"1000242" [label="(Call,spf_sender_domain == NULL)"];
"1000541" [label="(Identifier,dmarc_domain)"];
"1000643" [label="(Call,opendmarc_policy_fetch_alignment(dmarc_pctx, &da, &sa))"];
"1000659" [label="(Literal,\"failure to read DMARC alignment: %s\")"];
"1000214" [label="(Call,opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000647" [label="(Call,&sa)"];
"1000579" [label="(Call,dmarc_policy = libdm_status)"];
"1000575" [label="(Call,libdm_status = opendmarc_get_policy_to_enforce(dmarc_pctx))"];
"1000692" [label="(Identifier,dmarc_pctx)"];
"1000650" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000119" [label="(Block,)"];
"1000581" [label="(Identifier,libdm_status)"];
"1000694" [label="(Literal,0)"];
"1000671" [label="(Identifier,spf_sender_domain)"];
"1000654" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to read DMARC alignment: %s\",\n                                       opendmarc_policy_status_to_str(libdm_status)))"];
"1000577" [label="(Call,opendmarc_get_policy_to_enforce(dmarc_pctx))"];
"1000661" [label="(Identifier,libdm_status)"];
"1000565" [label="(Identifier,DMARC_PARSE_OKAY)"];
"1000349" [label="(Call,debug_printf(\"DMARC using SPF sender domain = %s\n\", spf_sender_domain))"];
"1000697" [label="(Identifier,ruf)"];
"1000673" [label="(Call,(sa==DMARC_POLICY_SPF_ALIGNMENT_PASS) ?\"yes\":\"no\")"];
"1000644" [label="(Identifier,dmarc_pctx)"];
"1000563" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000564" [label="(Identifier,libdm_status)"];
"1000664" [label="(Identifier,has_dmarc_record)"];
"1000698" [label="(MethodReturn,int)"];
"1000689" [label="(Call,ruf = opendmarc_policy_fetch_ruf(dmarc_pctx, NULL, 0, 1))"];
"1000653" [label="(Block,)"];
"1000256" [label="(Call,debug_printf(\"DMARC using synthesized SPF sender domain = %s\n\", spf_sender_domain))"];
"1000672" [label="(Identifier,dmarc_used_domain)"];
"1000544" [label="(Call,calloc(DMARC_MAXHOSTNAMELEN, sizeof(uschar)))"];
"1000385" [label="(Call,sig != NULL)"];
"1000552" [label="(Identifier,dmarc_domain)"];
"1000693" [label="(Identifier,NULL)"];
"1000429" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000641" [label="(Call,libdm_status = opendmarc_policy_fetch_alignment(dmarc_pctx, &da, &sa))"];
"1000249" [label="(Call,log_write(0, LOG_MAIN, \"DMARC using synthesized SPF sender domain = %s\n\",\n                               spf_sender_domain))"];
"1000691" [label="(Call,opendmarc_policy_fetch_ruf(dmarc_pctx, NULL, 0, 1))"];
"1000218" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000652" [label="(Identifier,DMARC_PARSE_OKAY)"];
"1000572" [label="(Literal,\"failure to read domainname used for DMARC lookup: %s\")"];
"1000685" [label="(Identifier,dmarc_status_text)"];
"1000667" [label="(Call,log_write(0, LOG_MAIN, \"DMARC results: spf_domain=%s dmarc_domain=%s \"\n                             \"spf_align=%s dkim_align=%s enforcement='%s'\",\n                             spf_sender_domain, dmarc_used_domain,\n                             (sa==DMARC_POLICY_SPF_ALIGNMENT_PASS) ?\"yes\":\"no\",\n                             (da==DMARC_POLICY_DKIM_ALIGNMENT_PASS)?\"yes\":\"no\",\n                             dmarc_status_text))"];
"1000569" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000549" [label="(Identifier,libdm_status)"];
"1000567" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to read domainname used for DMARC lookup: %s\",\n                                       opendmarc_policy_status_to_str(libdm_status)))"];
"1000362" [label="(Call,opendmarc_policy_store_spf(dmarc_pctx, spf_sender_domain,\n                                                dmarc_spf_result, origin, spf_human_readable))"];
"1000560" [label="(Call,free(dmarc_domain))"];
"1000550" [label="(Call,opendmarc_policy_fetch_utilized_domain(dmarc_pctx, dmarc_domain,\n        \t                                          DMARC_MAXHOSTNAMELEN-1))"];
"1000369" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000645" [label="(Call,&da)"];
"1000540" [label="(Call,*dmarc_domain = (uschar *)calloc(DMARC_MAXHOSTNAMELEN, sizeof(uschar)))"];
"1000666" [label="(Block,)"];
"1000655" [label="(Literal,0)"];
"1000224" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000576" [label="(Identifier,libdm_status)"];
"1000574" [label="(Identifier,libdm_status)"];
"1000374" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000561" [label="(Identifier,dmarc_domain)"];
"1000553" [label="(Call,DMARC_MAXHOSTNAMELEN-1)"];
"1000578" [label="(Identifier,dmarc_pctx)"];
"1000580" [label="(Identifier,dmarc_policy)"];
"1000668" [label="(Literal,0)"];
"1000679" [label="(Call,(da==DMARC_POLICY_DKIM_ALIGNMENT_PASS)?\"yes\":\"no\")"];
"1000551" [label="(Identifier,dmarc_pctx)"];
"1000548" [label="(Call,libdm_status = opendmarc_policy_fetch_utilized_domain(dmarc_pctx, dmarc_domain,\n        \t                                          DMARC_MAXHOSTNAMELEN-1))"];
"1000545" [label="(Identifier,DMARC_MAXHOSTNAMELEN)"];
"1000656" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000687" [label="(Identifier,history_file_status)"];
"1000542" [label="(Call,(uschar *)calloc(DMARC_MAXHOSTNAMELEN, sizeof(uschar)))"];
"1000649" [label="(ControlStructure,if (libdm_status != DMARC_PARSE_OKAY))"];
"1000556" [label="(Call,dmarc_used_domain = string_copy(dmarc_domain))"];
"1000558" [label="(Call,string_copy(dmarc_domain))"];
"1000583" [label="(Identifier,libdm_status)"];
"1000434" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000562" [label="(ControlStructure,if (libdm_status != DMARC_PARSE_OKAY))"];
"1000568" [label="(Literal,0)"];
"1000573" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000669" [label="(Identifier,LOG_MAIN)"];
"1000566" [label="(Block,)"];
"1000696" [label="(Call,dmarc_send_forensic_report(ruf))"];
"1000559" [label="(Identifier,dmarc_domain)"];
"1000660" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000540" -> "1000119"  [label="AST: "];
"1000540" -> "1000542"  [label="CFG: "];
"1000541" -> "1000540"  [label="AST: "];
"1000542" -> "1000540"  [label="AST: "];
"1000549" -> "1000540"  [label="CFG: "];
"1000540" -> "1000698"  [label="DDG: "];
"1000542" -> "1000540"  [label="DDG: "];
"1000540" -> "1000550"  [label="DDG: "];
"1000542" -> "1000544"  [label="CFG: "];
"1000543" -> "1000542"  [label="AST: "];
"1000544" -> "1000542"  [label="AST: "];
"1000542" -> "1000698"  [label="DDG: "];
"1000544" -> "1000542"  [label="DDG: "];
"1000544" -> "1000546"  [label="CFG: "];
"1000545" -> "1000544"  [label="AST: "];
"1000546" -> "1000544"  [label="AST: "];
"1000544" -> "1000553"  [label="DDG: "];
"1000550" -> "1000548"  [label="AST: "];
"1000550" -> "1000553"  [label="CFG: "];
"1000551" -> "1000550"  [label="AST: "];
"1000552" -> "1000550"  [label="AST: "];
"1000553" -> "1000550"  [label="AST: "];
"1000548" -> "1000550"  [label="CFG: "];
"1000550" -> "1000698"  [label="DDG: "];
"1000550" -> "1000548"  [label="DDG: "];
"1000550" -> "1000548"  [label="DDG: "];
"1000550" -> "1000548"  [label="DDG: "];
"1000214" -> "1000550"  [label="DDG: "];
"1000362" -> "1000550"  [label="DDG: "];
"1000553" -> "1000550"  [label="DDG: "];
"1000553" -> "1000550"  [label="DDG: "];
"1000550" -> "1000558"  [label="DDG: "];
"1000550" -> "1000577"  [label="DDG: "];
"1000548" -> "1000119"  [label="AST: "];
"1000549" -> "1000548"  [label="AST: "];
"1000557" -> "1000548"  [label="CFG: "];
"1000548" -> "1000698"  [label="DDG: "];
"1000548" -> "1000563"  [label="DDG: "];
"1000563" -> "1000562"  [label="AST: "];
"1000563" -> "1000565"  [label="CFG: "];
"1000564" -> "1000563"  [label="AST: "];
"1000565" -> "1000563"  [label="AST: "];
"1000568" -> "1000563"  [label="CFG: "];
"1000576" -> "1000563"  [label="CFG: "];
"1000429" -> "1000563"  [label="DDG: "];
"1000218" -> "1000563"  [label="DDG: "];
"1000369" -> "1000563"  [label="DDG: "];
"1000563" -> "1000573"  [label="DDG: "];
"1000563" -> "1000650"  [label="DDG: "];
"1000573" -> "1000567"  [label="AST: "];
"1000573" -> "1000574"  [label="CFG: "];
"1000574" -> "1000573"  [label="AST: "];
"1000567" -> "1000573"  [label="CFG: "];
"1000573" -> "1000567"  [label="DDG: "];
"1000567" -> "1000566"  [label="AST: "];
"1000568" -> "1000567"  [label="AST: "];
"1000569" -> "1000567"  [label="AST: "];
"1000572" -> "1000567"  [label="AST: "];
"1000576" -> "1000567"  [label="CFG: "];
"1000567" -> "1000698"  [label="DDG: "];
"1000567" -> "1000698"  [label="DDG: "];
"1000567" -> "1000698"  [label="DDG: "];
"1000569" -> "1000567"  [label="DDG: "];
"1000569" -> "1000567"  [label="DDG: "];
"1000650" -> "1000649"  [label="AST: "];
"1000650" -> "1000652"  [label="CFG: "];
"1000651" -> "1000650"  [label="AST: "];
"1000652" -> "1000650"  [label="AST: "];
"1000655" -> "1000650"  [label="CFG: "];
"1000664" -> "1000650"  [label="CFG: "];
"1000650" -> "1000698"  [label="DDG: "];
"1000650" -> "1000698"  [label="DDG: "];
"1000650" -> "1000698"  [label="DDG: "];
"1000641" -> "1000650"  [label="DDG: "];
"1000650" -> "1000660"  [label="DDG: "];
"1000660" -> "1000654"  [label="AST: "];
"1000660" -> "1000661"  [label="CFG: "];
"1000661" -> "1000660"  [label="AST: "];
"1000654" -> "1000660"  [label="CFG: "];
"1000660" -> "1000698"  [label="DDG: "];
"1000660" -> "1000654"  [label="DDG: "];
"1000654" -> "1000653"  [label="AST: "];
"1000655" -> "1000654"  [label="AST: "];
"1000656" -> "1000654"  [label="AST: "];
"1000659" -> "1000654"  [label="AST: "];
"1000664" -> "1000654"  [label="CFG: "];
"1000654" -> "1000698"  [label="DDG: "];
"1000654" -> "1000698"  [label="DDG: "];
"1000654" -> "1000698"  [label="DDG: "];
"1000656" -> "1000654"  [label="DDG: "];
"1000656" -> "1000654"  [label="DDG: "];
"1000558" -> "1000556"  [label="AST: "];
"1000558" -> "1000559"  [label="CFG: "];
"1000559" -> "1000558"  [label="AST: "];
"1000556" -> "1000558"  [label="CFG: "];
"1000558" -> "1000556"  [label="DDG: "];
"1000558" -> "1000560"  [label="DDG: "];
"1000556" -> "1000119"  [label="AST: "];
"1000557" -> "1000556"  [label="AST: "];
"1000561" -> "1000556"  [label="CFG: "];
"1000556" -> "1000698"  [label="DDG: "];
"1000556" -> "1000698"  [label="DDG: "];
"1000556" -> "1000667"  [label="DDG: "];
"1000667" -> "1000666"  [label="AST: "];
"1000667" -> "1000685"  [label="CFG: "];
"1000668" -> "1000667"  [label="AST: "];
"1000669" -> "1000667"  [label="AST: "];
"1000670" -> "1000667"  [label="AST: "];
"1000671" -> "1000667"  [label="AST: "];
"1000672" -> "1000667"  [label="AST: "];
"1000673" -> "1000667"  [label="AST: "];
"1000679" -> "1000667"  [label="AST: "];
"1000685" -> "1000667"  [label="AST: "];
"1000687" -> "1000667"  [label="CFG: "];
"1000667" -> "1000698"  [label="DDG: "];
"1000667" -> "1000698"  [label="DDG: "];
"1000667" -> "1000698"  [label="DDG: "];
"1000667" -> "1000698"  [label="DDG: "];
"1000667" -> "1000698"  [label="DDG: "];
"1000667" -> "1000698"  [label="DDG: "];
"1000667" -> "1000698"  [label="DDG: "];
"1000224" -> "1000667"  [label="DDG: "];
"1000656" -> "1000667"  [label="DDG: "];
"1000249" -> "1000667"  [label="DDG: "];
"1000374" -> "1000667"  [label="DDG: "];
"1000434" -> "1000667"  [label="DDG: "];
"1000569" -> "1000667"  [label="DDG: "];
"1000349" -> "1000667"  [label="DDG: "];
"1000362" -> "1000667"  [label="DDG: "];
"1000256" -> "1000667"  [label="DDG: "];
"1000242" -> "1000667"  [label="DDG: "];
"1000560" -> "1000119"  [label="AST: "];
"1000560" -> "1000561"  [label="CFG: "];
"1000561" -> "1000560"  [label="AST: "];
"1000564" -> "1000560"  [label="CFG: "];
"1000560" -> "1000698"  [label="DDG: "];
"1000577" -> "1000575"  [label="AST: "];
"1000577" -> "1000578"  [label="CFG: "];
"1000578" -> "1000577"  [label="AST: "];
"1000575" -> "1000577"  [label="CFG: "];
"1000577" -> "1000575"  [label="DDG: "];
"1000577" -> "1000643"  [label="DDG: "];
"1000575" -> "1000119"  [label="AST: "];
"1000576" -> "1000575"  [label="AST: "];
"1000580" -> "1000575"  [label="CFG: "];
"1000575" -> "1000698"  [label="DDG: "];
"1000575" -> "1000579"  [label="DDG: "];
"1000579" -> "1000119"  [label="AST: "];
"1000579" -> "1000581"  [label="CFG: "];
"1000580" -> "1000579"  [label="AST: "];
"1000581" -> "1000579"  [label="AST: "];
"1000583" -> "1000579"  [label="CFG: "];
"1000579" -> "1000698"  [label="DDG: "];
"1000643" -> "1000641"  [label="AST: "];
"1000643" -> "1000647"  [label="CFG: "];
"1000644" -> "1000643"  [label="AST: "];
"1000645" -> "1000643"  [label="AST: "];
"1000647" -> "1000643"  [label="AST: "];
"1000641" -> "1000643"  [label="CFG: "];
"1000643" -> "1000698"  [label="DDG: "];
"1000643" -> "1000698"  [label="DDG: "];
"1000643" -> "1000698"  [label="DDG: "];
"1000643" -> "1000641"  [label="DDG: "];
"1000643" -> "1000641"  [label="DDG: "];
"1000643" -> "1000641"  [label="DDG: "];
"1000643" -> "1000691"  [label="DDG: "];
"1000641" -> "1000119"  [label="AST: "];
"1000642" -> "1000641"  [label="AST: "];
"1000651" -> "1000641"  [label="CFG: "];
"1000641" -> "1000698"  [label="DDG: "];
"1000691" -> "1000689"  [label="AST: "];
"1000691" -> "1000695"  [label="CFG: "];
"1000692" -> "1000691"  [label="AST: "];
"1000693" -> "1000691"  [label="AST: "];
"1000694" -> "1000691"  [label="AST: "];
"1000695" -> "1000691"  [label="AST: "];
"1000689" -> "1000691"  [label="CFG: "];
"1000691" -> "1000698"  [label="DDG: "];
"1000691" -> "1000698"  [label="DDG: "];
"1000691" -> "1000689"  [label="DDG: "];
"1000691" -> "1000689"  [label="DDG: "];
"1000691" -> "1000689"  [label="DDG: "];
"1000691" -> "1000689"  [label="DDG: "];
"1000385" -> "1000691"  [label="DDG: "];
"1000689" -> "1000666"  [label="AST: "];
"1000690" -> "1000689"  [label="AST: "];
"1000697" -> "1000689"  [label="CFG: "];
"1000689" -> "1000698"  [label="DDG: "];
"1000689" -> "1000696"  [label="DDG: "];
"1000696" -> "1000666"  [label="AST: "];
"1000696" -> "1000697"  [label="CFG: "];
"1000697" -> "1000696"  [label="AST: "];
"1000698" -> "1000696"  [label="CFG: "];
"1000696" -> "1000698"  [label="DDG: "];
"1000696" -> "1000698"  [label="DDG: "];
}
