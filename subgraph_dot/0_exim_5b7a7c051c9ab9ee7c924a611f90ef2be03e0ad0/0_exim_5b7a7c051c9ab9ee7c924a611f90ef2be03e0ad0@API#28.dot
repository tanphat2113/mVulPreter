digraph "0_exim_5b7a7c051c9ab9ee7c924a611f90ef2be03e0ad0@API" {
"1000209" [label="(Call,libdm_status = dmarc_abort ?\n    DMARC_PARSE_OKAY :\n    opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000214" [label="(Call,opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000184" [label="(Call,header_from_sender = parse_extract_address(from_header->text, &errormsg,\n                              &dummy, &dummy, &domain, FALSE))"];
"1000186" [label="(Call,parse_extract_address(from_header->text, &errormsg,\n                              &dummy, &dummy, &domain, FALSE))"];
"1000170" [label="(Call,parse_find_address_end(from_header->text, FALSE))"];
"1000199" [label="(Call,header_from_sender += domain)"];
"1000218" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000228" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000222" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC,\n                \"failure to store header From: in DMARC: %s, header was '%s'\",\n                opendmarc_policy_status_to_str(libdm_status), from_header->text))"];
"1000529" [label="(Call,debug_printf(\"DMARC skipping (%d), unsure what to do with %s\",\n                        libdm_status, from_header->text))"];
"1000527" [label="(Call,(D_receive)\n          debug_printf(\"DMARC skipping (%d), unsure what to do with %s\",\n                        libdm_status, from_header->text))"];
"1000429" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000441" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000432" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to store dkim (%s) for DMARC: %s\",\n        \t\t     sig->domain, opendmarc_policy_status_to_str(libdm_status)))"];
"1000483" [label="(Call,string_sprintf(\"%sdkim %s %d\n\", dkim_history_buffer,\n                                                             sig->domain, dkim_ares_result))"];
"1000423" [label="(Call,debug_printf(\"DMARC adding DKIM sender domain = %s\n\", sig->domain))"];
"1000421" [label="(Call,(D_receive)\n        debug_printf(\"DMARC adding DKIM sender domain = %s\n\", sig->domain))"];
"1000481" [label="(Call,dkim_history_buffer = string_sprintf(\"%sdkim %s %d\n\", dkim_history_buffer,\n                                                             sig->domain, dkim_ares_result))"];
"1000563" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000573" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000567" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to read domainname used for DMARC lookup: %s\",\n                                       opendmarc_policy_status_to_str(libdm_status)))"];
"1000650" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000660" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000654" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to read DMARC alignment: %s\",\n                                       opendmarc_policy_status_to_str(libdm_status)))"];
"1000369" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000378" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000372" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to store spf for DMARC: %s\",\n                             opendmarc_policy_status_to_str(libdm_status)))"];
"1000430" [label="(Identifier,libdm_status)"];
"1000431" [label="(Identifier,DMARC_PARSE_OKAY)"];
"1000651" [label="(Identifier,libdm_status)"];
"1000437" [label="(Literal,\"failure to store dkim (%s) for DMARC: %s\")"];
"1000433" [label="(Literal,0)"];
"1000428" [label="(ControlStructure,if (libdm_status != DMARC_PARSE_OKAY))"];
"1000377" [label="(Literal,\"failure to store spf for DMARC: %s\")"];
"1000497" [label="(Block,)"];
"1000222" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC,\n                \"failure to store header From: in DMARC: %s, header was '%s'\",\n                opendmarc_policy_status_to_str(libdm_status), from_header->text))"];
"1000425" [label="(Call,sig->domain)"];
"1000372" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to store spf for DMARC: %s\",\n                             opendmarc_policy_status_to_str(libdm_status)))"];
"1000216" [label="(Identifier,header_from_sender)"];
"1000200" [label="(Identifier,header_from_sender)"];
"1000174" [label="(Identifier,FALSE)"];
"1000512" [label="(Call,debug_printf(\"DMARC record found for %s\n\", header_from_sender))"];
"1000187" [label="(Call,from_header->text)"];
"1000659" [label="(Literal,\"failure to read DMARC alignment: %s\")"];
"1000482" [label="(Identifier,dkim_history_buffer)"];
"1000214" [label="(Call,opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000220" [label="(Identifier,DMARC_PARSE_OKAY)"];
"1000223" [label="(Literal,0)"];
"1000356" [label="(Call,dmarc_abort == FALSE)"];
"1000238" [label="(Identifier,spf_response)"];
"1000421" [label="(Call,(D_receive)\n        debug_printf(\"DMARC adding DKIM sender domain = %s\n\", sig->domain))"];
"1000378" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000530" [label="(Literal,\"DMARC skipping (%d), unsure what to do with %s\")"];
"1000650" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000186" [label="(Call,parse_extract_address(from_header->text, &errormsg,\n                              &dummy, &dummy, &domain, FALSE))"];
"1000159" [label="(Block,)"];
"1000483" [label="(Call,string_sprintf(\"%sdkim %s %d\n\", dkim_history_buffer,\n                                                             sig->domain, dkim_ares_result))"];
"1000215" [label="(Identifier,dmarc_pctx)"];
"1000481" [label="(Call,dkim_history_buffer = string_sprintf(\"%sdkim %s %d\n\", dkim_history_buffer,\n                                                             sig->domain, dkim_ares_result))"];
"1000484" [label="(Literal,\"%sdkim %s %d\n\")"];
"1000654" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to read DMARC alignment: %s\",\n                                       opendmarc_policy_status_to_str(libdm_status)))"];
"1000231" [label="(Identifier,from_header)"];
"1000661" [label="(Identifier,libdm_status)"];
"1000565" [label="(Identifier,DMARC_PARSE_OKAY)"];
"1000194" [label="(Call,&dummy)"];
"1000519" [label="(Call,debug_printf(\"DMARC record parse error for %s\n\", header_from_sender))"];
"1000563" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000388" [label="(Block,)"];
"1000564" [label="(Identifier,libdm_status)"];
"1000664" [label="(Identifier,has_dmarc_record)"];
"1000698" [label="(MethodReturn,int)"];
"1000442" [label="(Identifier,libdm_status)"];
"1000360" [label="(Call,libdm_status = opendmarc_policy_store_spf(dmarc_pctx, spf_sender_domain,\n                                                dmarc_spf_result, origin, spf_human_readable))"];
"1000217" [label="(ControlStructure,if (libdm_status != DMARC_PARSE_OKAY))"];
"1000370" [label="(Identifier,libdm_status)"];
"1000653" [label="(Block,)"];
"1000486" [label="(Call,sig->domain)"];
"1000190" [label="(Call,&errormsg)"];
"1000381" [label="(Identifier,sig)"];
"1000443" [label="(Call,dkim_ares_result = ( vs == PDKIM_VERIFY_PASS )    ? ARES_RESULT_PASS :\n        \t              ( vs == PDKIM_VERIFY_FAIL )    ? ARES_RESULT_FAIL :\n        \t              ( vs == PDKIM_VERIFY_NONE )    ? ARES_RESULT_NONE :\n        \t              ( vs == PDKIM_VERIFY_INVALID ) ?\n                           ( ves == PDKIM_VERIFY_INVALID_PUBKEY_UNAVAILABLE ? ARES_RESULT_PERMERROR :\n                             ves == PDKIM_VERIFY_INVALID_BUFFER_SIZE        ? ARES_RESULT_PERMERROR :\n                             ves == PDKIM_VERIFY_INVALID_PUBKEY_PARSING     ? ARES_RESULT_PERMERROR :\n                             ARES_RESULT_UNKNOWN ) :\n                          ARES_RESULT_UNKNOWN)"];
"1000424" [label="(Literal,\"DMARC adding DKIM sender domain = %s\n\")"];
"1000201" [label="(Identifier,domain)"];
"1000184" [label="(Call,header_from_sender = parse_extract_address(from_header->text, &errormsg,\n                              &dummy, &dummy, &domain, FALSE))"];
"1000368" [label="(ControlStructure,if (libdm_status != DMARC_PARSE_OKAY))"];
"1000429" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000641" [label="(Call,libdm_status = opendmarc_policy_fetch_alignment(dmarc_pctx, &da, &sa))"];
"1000230" [label="(Call,from_header->text)"];
"1000218" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000652" [label="(Identifier,DMARC_PARSE_OKAY)"];
"1000192" [label="(Call,&dummy)"];
"1000221" [label="(Block,)"];
"1000572" [label="(Literal,\"failure to read domainname used for DMARC lookup: %s\")"];
"1000229" [label="(Identifier,libdm_status)"];
"1000432" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to store dkim (%s) for DMARC: %s\",\n        \t\t     sig->domain, opendmarc_policy_status_to_str(libdm_status)))"];
"1000527" [label="(Call,(D_receive)\n          debug_printf(\"DMARC skipping (%d), unsure what to do with %s\",\n                        libdm_status, from_header->text))"];
"1000210" [label="(Identifier,libdm_status)"];
"1000569" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000219" [label="(Identifier,libdm_status)"];
"1000567" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to read domainname used for DMARC lookup: %s\",\n                                       opendmarc_policy_status_to_str(libdm_status)))"];
"1000362" [label="(Call,opendmarc_policy_store_spf(dmarc_pctx, spf_sender_domain,\n                                                dmarc_spf_result, origin, spf_human_readable))"];
"1000550" [label="(Call,opendmarc_policy_fetch_utilized_domain(dmarc_pctx, dmarc_domain,\n        \t                                          DMARC_MAXHOSTNAMELEN-1))"];
"1000369" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000444" [label="(Identifier,dkim_ares_result)"];
"1000379" [label="(Identifier,libdm_status)"];
"1000655" [label="(Literal,0)"];
"1000371" [label="(Identifier,DMARC_PARSE_OKAY)"];
"1000489" [label="(Identifier,dkim_ares_result)"];
"1000373" [label="(Literal,0)"];
"1000502" [label="(Call,debug_printf(\"DMARC no record found for %s\n\", header_from_sender))"];
"1000224" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000531" [label="(Identifier,libdm_status)"];
"1000576" [label="(Identifier,libdm_status)"];
"1000532" [label="(Call,from_header->text)"];
"1000574" [label="(Identifier,libdm_status)"];
"1000374" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000204" [label="(Identifier,p)"];
"1000183" [label="(ControlStructure,if ((header_from_sender = parse_extract_address(from_header->text, &errormsg,\n                              &dummy, &dummy, &domain, FALSE))))"];
"1000198" [label="(Identifier,FALSE)"];
"1000491" [label="(Identifier,sig)"];
"1000234" [label="(Identifier,dmarc_abort)"];
"1000185" [label="(Identifier,header_from_sender)"];
"1000423" [label="(Call,debug_printf(\"DMARC adding DKIM sender domain = %s\n\", sig->domain))"];
"1000170" [label="(Call,parse_find_address_end(from_header->text, FALSE))"];
"1000168" [label="(Call,p = parse_find_address_end(from_header->text, FALSE))"];
"1000548" [label="(Call,libdm_status = opendmarc_policy_fetch_utilized_domain(dmarc_pctx, dmarc_domain,\n        \t                                          DMARC_MAXHOSTNAMELEN-1))"];
"1000196" [label="(Call,&domain)"];
"1000656" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000199" [label="(Call,header_from_sender += domain)"];
"1000649" [label="(ControlStructure,if (libdm_status != DMARC_PARSE_OKAY))"];
"1000438" [label="(Call,sig->domain)"];
"1000228" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000434" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000211" [label="(Call,dmarc_abort ?\n    DMARC_PARSE_OKAY :\n    opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000227" [label="(Literal,\"failure to store header From: in DMARC: %s, header was '%s'\")"];
"1000171" [label="(Call,from_header->text)"];
"1000562" [label="(ControlStructure,if (libdm_status != DMARC_PARSE_OKAY))"];
"1000529" [label="(Call,debug_printf(\"DMARC skipping (%d), unsure what to do with %s\",\n                        libdm_status, from_header->text))"];
"1000568" [label="(Literal,0)"];
"1000573" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000209" [label="(Call,libdm_status = dmarc_abort ?\n    DMARC_PARSE_OKAY :\n    opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000441" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000536" [label="(Identifier,has_dmarc_record)"];
"1000566" [label="(Block,)"];
"1000485" [label="(Identifier,dkim_history_buffer)"];
"1000660" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000209" -> "1000159"  [label="AST: "];
"1000209" -> "1000211"  [label="CFG: "];
"1000210" -> "1000209"  [label="AST: "];
"1000211" -> "1000209"  [label="AST: "];
"1000219" -> "1000209"  [label="CFG: "];
"1000209" -> "1000698"  [label="DDG: "];
"1000214" -> "1000209"  [label="DDG: "];
"1000214" -> "1000209"  [label="DDG: "];
"1000209" -> "1000218"  [label="DDG: "];
"1000214" -> "1000211"  [label="AST: "];
"1000214" -> "1000216"  [label="CFG: "];
"1000215" -> "1000214"  [label="AST: "];
"1000216" -> "1000214"  [label="AST: "];
"1000211" -> "1000214"  [label="CFG: "];
"1000214" -> "1000698"  [label="DDG: "];
"1000214" -> "1000211"  [label="DDG: "];
"1000214" -> "1000211"  [label="DDG: "];
"1000184" -> "1000214"  [label="DDG: "];
"1000199" -> "1000214"  [label="DDG: "];
"1000214" -> "1000362"  [label="DDG: "];
"1000214" -> "1000502"  [label="DDG: "];
"1000214" -> "1000512"  [label="DDG: "];
"1000214" -> "1000519"  [label="DDG: "];
"1000214" -> "1000550"  [label="DDG: "];
"1000184" -> "1000183"  [label="AST: "];
"1000184" -> "1000186"  [label="CFG: "];
"1000185" -> "1000184"  [label="AST: "];
"1000186" -> "1000184"  [label="AST: "];
"1000200" -> "1000184"  [label="CFG: "];
"1000204" -> "1000184"  [label="CFG: "];
"1000184" -> "1000698"  [label="DDG: "];
"1000184" -> "1000698"  [label="DDG: "];
"1000186" -> "1000184"  [label="DDG: "];
"1000186" -> "1000184"  [label="DDG: "];
"1000186" -> "1000184"  [label="DDG: "];
"1000186" -> "1000184"  [label="DDG: "];
"1000186" -> "1000184"  [label="DDG: "];
"1000184" -> "1000199"  [label="DDG: "];
"1000184" -> "1000502"  [label="DDG: "];
"1000184" -> "1000512"  [label="DDG: "];
"1000184" -> "1000519"  [label="DDG: "];
"1000186" -> "1000198"  [label="CFG: "];
"1000187" -> "1000186"  [label="AST: "];
"1000190" -> "1000186"  [label="AST: "];
"1000192" -> "1000186"  [label="AST: "];
"1000194" -> "1000186"  [label="AST: "];
"1000196" -> "1000186"  [label="AST: "];
"1000198" -> "1000186"  [label="AST: "];
"1000186" -> "1000698"  [label="DDG: "];
"1000186" -> "1000698"  [label="DDG: "];
"1000186" -> "1000698"  [label="DDG: "];
"1000186" -> "1000698"  [label="DDG: "];
"1000170" -> "1000186"  [label="DDG: "];
"1000170" -> "1000186"  [label="DDG: "];
"1000186" -> "1000222"  [label="DDG: "];
"1000186" -> "1000356"  [label="DDG: "];
"1000186" -> "1000529"  [label="DDG: "];
"1000170" -> "1000168"  [label="AST: "];
"1000170" -> "1000174"  [label="CFG: "];
"1000171" -> "1000170"  [label="AST: "];
"1000174" -> "1000170"  [label="AST: "];
"1000168" -> "1000170"  [label="CFG: "];
"1000170" -> "1000168"  [label="DDG: "];
"1000170" -> "1000168"  [label="DDG: "];
"1000199" -> "1000183"  [label="AST: "];
"1000199" -> "1000201"  [label="CFG: "];
"1000200" -> "1000199"  [label="AST: "];
"1000201" -> "1000199"  [label="AST: "];
"1000204" -> "1000199"  [label="CFG: "];
"1000199" -> "1000698"  [label="DDG: "];
"1000199" -> "1000698"  [label="DDG: "];
"1000199" -> "1000502"  [label="DDG: "];
"1000199" -> "1000512"  [label="DDG: "];
"1000199" -> "1000519"  [label="DDG: "];
"1000218" -> "1000217"  [label="AST: "];
"1000218" -> "1000220"  [label="CFG: "];
"1000219" -> "1000218"  [label="AST: "];
"1000220" -> "1000218"  [label="AST: "];
"1000223" -> "1000218"  [label="CFG: "];
"1000238" -> "1000218"  [label="CFG: "];
"1000218" -> "1000228"  [label="DDG: "];
"1000218" -> "1000369"  [label="DDG: "];
"1000218" -> "1000429"  [label="DDG: "];
"1000218" -> "1000429"  [label="DDG: "];
"1000218" -> "1000529"  [label="DDG: "];
"1000218" -> "1000563"  [label="DDG: "];
"1000228" -> "1000222"  [label="AST: "];
"1000228" -> "1000229"  [label="CFG: "];
"1000229" -> "1000228"  [label="AST: "];
"1000231" -> "1000228"  [label="CFG: "];
"1000228" -> "1000222"  [label="DDG: "];
"1000228" -> "1000429"  [label="DDG: "];
"1000228" -> "1000529"  [label="DDG: "];
"1000222" -> "1000221"  [label="AST: "];
"1000222" -> "1000230"  [label="CFG: "];
"1000223" -> "1000222"  [label="AST: "];
"1000224" -> "1000222"  [label="AST: "];
"1000227" -> "1000222"  [label="AST: "];
"1000230" -> "1000222"  [label="AST: "];
"1000234" -> "1000222"  [label="CFG: "];
"1000222" -> "1000698"  [label="DDG: "];
"1000222" -> "1000698"  [label="DDG: "];
"1000222" -> "1000698"  [label="DDG: "];
"1000222" -> "1000698"  [label="DDG: "];
"1000224" -> "1000222"  [label="DDG: "];
"1000224" -> "1000222"  [label="DDG: "];
"1000222" -> "1000529"  [label="DDG: "];
"1000529" -> "1000527"  [label="AST: "];
"1000529" -> "1000532"  [label="CFG: "];
"1000530" -> "1000529"  [label="AST: "];
"1000531" -> "1000529"  [label="AST: "];
"1000532" -> "1000529"  [label="AST: "];
"1000527" -> "1000529"  [label="CFG: "];
"1000529" -> "1000698"  [label="DDG: "];
"1000529" -> "1000527"  [label="DDG: "];
"1000529" -> "1000527"  [label="DDG: "];
"1000529" -> "1000527"  [label="DDG: "];
"1000441" -> "1000529"  [label="DDG: "];
"1000369" -> "1000529"  [label="DDG: "];
"1000378" -> "1000529"  [label="DDG: "];
"1000429" -> "1000529"  [label="DDG: "];
"1000527" -> "1000497"  [label="AST: "];
"1000528" -> "1000527"  [label="AST: "];
"1000536" -> "1000527"  [label="CFG: "];
"1000527" -> "1000698"  [label="DDG: "];
"1000527" -> "1000698"  [label="DDG: "];
"1000429" -> "1000428"  [label="AST: "];
"1000429" -> "1000431"  [label="CFG: "];
"1000430" -> "1000429"  [label="AST: "];
"1000431" -> "1000429"  [label="AST: "];
"1000433" -> "1000429"  [label="CFG: "];
"1000444" -> "1000429"  [label="CFG: "];
"1000441" -> "1000429"  [label="DDG: "];
"1000369" -> "1000429"  [label="DDG: "];
"1000369" -> "1000429"  [label="DDG: "];
"1000378" -> "1000429"  [label="DDG: "];
"1000429" -> "1000441"  [label="DDG: "];
"1000429" -> "1000563"  [label="DDG: "];
"1000441" -> "1000432"  [label="AST: "];
"1000441" -> "1000442"  [label="CFG: "];
"1000442" -> "1000441"  [label="AST: "];
"1000432" -> "1000441"  [label="CFG: "];
"1000441" -> "1000432"  [label="DDG: "];
"1000432" -> "1000428"  [label="AST: "];
"1000433" -> "1000432"  [label="AST: "];
"1000434" -> "1000432"  [label="AST: "];
"1000437" -> "1000432"  [label="AST: "];
"1000438" -> "1000432"  [label="AST: "];
"1000444" -> "1000432"  [label="CFG: "];
"1000432" -> "1000698"  [label="DDG: "];
"1000432" -> "1000698"  [label="DDG: "];
"1000432" -> "1000698"  [label="DDG: "];
"1000434" -> "1000432"  [label="DDG: "];
"1000434" -> "1000432"  [label="DDG: "];
"1000423" -> "1000432"  [label="DDG: "];
"1000432" -> "1000483"  [label="DDG: "];
"1000483" -> "1000481"  [label="AST: "];
"1000483" -> "1000489"  [label="CFG: "];
"1000484" -> "1000483"  [label="AST: "];
"1000485" -> "1000483"  [label="AST: "];
"1000486" -> "1000483"  [label="AST: "];
"1000489" -> "1000483"  [label="AST: "];
"1000481" -> "1000483"  [label="CFG: "];
"1000483" -> "1000698"  [label="DDG: "];
"1000483" -> "1000698"  [label="DDG: "];
"1000483" -> "1000423"  [label="DDG: "];
"1000483" -> "1000481"  [label="DDG: "];
"1000483" -> "1000481"  [label="DDG: "];
"1000483" -> "1000481"  [label="DDG: "];
"1000483" -> "1000481"  [label="DDG: "];
"1000481" -> "1000483"  [label="DDG: "];
"1000423" -> "1000483"  [label="DDG: "];
"1000443" -> "1000483"  [label="DDG: "];
"1000423" -> "1000421"  [label="AST: "];
"1000423" -> "1000425"  [label="CFG: "];
"1000424" -> "1000423"  [label="AST: "];
"1000425" -> "1000423"  [label="AST: "];
"1000421" -> "1000423"  [label="CFG: "];
"1000423" -> "1000421"  [label="DDG: "];
"1000423" -> "1000421"  [label="DDG: "];
"1000421" -> "1000388"  [label="AST: "];
"1000422" -> "1000421"  [label="AST: "];
"1000430" -> "1000421"  [label="CFG: "];
"1000421" -> "1000698"  [label="DDG: "];
"1000421" -> "1000698"  [label="DDG: "];
"1000481" -> "1000388"  [label="AST: "];
"1000482" -> "1000481"  [label="AST: "];
"1000491" -> "1000481"  [label="CFG: "];
"1000481" -> "1000698"  [label="DDG: "];
"1000481" -> "1000698"  [label="DDG: "];
"1000563" -> "1000562"  [label="AST: "];
"1000563" -> "1000565"  [label="CFG: "];
"1000564" -> "1000563"  [label="AST: "];
"1000565" -> "1000563"  [label="AST: "];
"1000568" -> "1000563"  [label="CFG: "];
"1000576" -> "1000563"  [label="CFG: "];
"1000548" -> "1000563"  [label="DDG: "];
"1000369" -> "1000563"  [label="DDG: "];
"1000563" -> "1000573"  [label="DDG: "];
"1000563" -> "1000650"  [label="DDG: "];
"1000573" -> "1000567"  [label="AST: "];
"1000573" -> "1000574"  [label="CFG: "];
"1000574" -> "1000573"  [label="AST: "];
"1000567" -> "1000573"  [label="CFG: "];
"1000573" -> "1000567"  [label="DDG: "];
"1000567" -> "1000566"  [label="AST: "];
"1000568" -> "1000567"  [label="AST: "];
"1000569" -> "1000567"  [label="AST: "];
"1000572" -> "1000567"  [label="AST: "];
"1000576" -> "1000567"  [label="CFG: "];
"1000567" -> "1000698"  [label="DDG: "];
"1000567" -> "1000698"  [label="DDG: "];
"1000567" -> "1000698"  [label="DDG: "];
"1000569" -> "1000567"  [label="DDG: "];
"1000569" -> "1000567"  [label="DDG: "];
"1000650" -> "1000649"  [label="AST: "];
"1000650" -> "1000652"  [label="CFG: "];
"1000651" -> "1000650"  [label="AST: "];
"1000652" -> "1000650"  [label="AST: "];
"1000655" -> "1000650"  [label="CFG: "];
"1000664" -> "1000650"  [label="CFG: "];
"1000650" -> "1000698"  [label="DDG: "];
"1000650" -> "1000698"  [label="DDG: "];
"1000650" -> "1000698"  [label="DDG: "];
"1000641" -> "1000650"  [label="DDG: "];
"1000650" -> "1000660"  [label="DDG: "];
"1000660" -> "1000654"  [label="AST: "];
"1000660" -> "1000661"  [label="CFG: "];
"1000661" -> "1000660"  [label="AST: "];
"1000654" -> "1000660"  [label="CFG: "];
"1000660" -> "1000698"  [label="DDG: "];
"1000660" -> "1000654"  [label="DDG: "];
"1000654" -> "1000653"  [label="AST: "];
"1000655" -> "1000654"  [label="AST: "];
"1000656" -> "1000654"  [label="AST: "];
"1000659" -> "1000654"  [label="AST: "];
"1000664" -> "1000654"  [label="CFG: "];
"1000654" -> "1000698"  [label="DDG: "];
"1000654" -> "1000698"  [label="DDG: "];
"1000654" -> "1000698"  [label="DDG: "];
"1000656" -> "1000654"  [label="DDG: "];
"1000656" -> "1000654"  [label="DDG: "];
"1000369" -> "1000368"  [label="AST: "];
"1000369" -> "1000371"  [label="CFG: "];
"1000370" -> "1000369"  [label="AST: "];
"1000371" -> "1000369"  [label="AST: "];
"1000373" -> "1000369"  [label="CFG: "];
"1000381" -> "1000369"  [label="CFG: "];
"1000360" -> "1000369"  [label="DDG: "];
"1000369" -> "1000378"  [label="DDG: "];
"1000378" -> "1000372"  [label="AST: "];
"1000378" -> "1000379"  [label="CFG: "];
"1000379" -> "1000378"  [label="AST: "];
"1000372" -> "1000378"  [label="CFG: "];
"1000378" -> "1000372"  [label="DDG: "];
"1000372" -> "1000368"  [label="AST: "];
"1000373" -> "1000372"  [label="AST: "];
"1000374" -> "1000372"  [label="AST: "];
"1000377" -> "1000372"  [label="AST: "];
"1000381" -> "1000372"  [label="CFG: "];
"1000372" -> "1000698"  [label="DDG: "];
"1000372" -> "1000698"  [label="DDG: "];
"1000372" -> "1000698"  [label="DDG: "];
"1000374" -> "1000372"  [label="DDG: "];
"1000374" -> "1000372"  [label="DDG: "];
}
