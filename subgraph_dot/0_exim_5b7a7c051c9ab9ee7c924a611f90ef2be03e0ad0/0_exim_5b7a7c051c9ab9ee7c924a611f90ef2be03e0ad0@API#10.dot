digraph "0_exim_5b7a7c051c9ab9ee7c924a611f90ef2be03e0ad0@API" {
"1000222" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC,\n                \"failure to store header From: in DMARC: %s, header was '%s'\",\n                opendmarc_policy_status_to_str(libdm_status), from_header->text))"];
"1000224" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000228" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000218" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000209" [label="(Call,libdm_status = dmarc_abort ?\n    DMARC_PARSE_OKAY :\n    opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000214" [label="(Call,opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000184" [label="(Call,header_from_sender = parse_extract_address(from_header->text, &errormsg,\n                              &dummy, &dummy, &domain, FALSE))"];
"1000186" [label="(Call,parse_extract_address(from_header->text, &errormsg,\n                              &dummy, &dummy, &domain, FALSE))"];
"1000170" [label="(Call,parse_find_address_end(from_header->text, FALSE))"];
"1000199" [label="(Call,header_from_sender += domain)"];
"1000529" [label="(Call,debug_printf(\"DMARC skipping (%d), unsure what to do with %s\",\n                        libdm_status, from_header->text))"];
"1000527" [label="(Call,(D_receive)\n          debug_printf(\"DMARC skipping (%d), unsure what to do with %s\",\n                        libdm_status, from_header->text))"];
"1000234" [label="(Identifier,dmarc_abort)"];
"1000249" [label="(Call,log_write(0, LOG_MAIN, \"DMARC using synthesized SPF sender domain = %s\n\",\n                               spf_sender_domain))"];
"1000159" [label="(Block,)"];
"1000215" [label="(Identifier,dmarc_pctx)"];
"1000185" [label="(Identifier,header_from_sender)"];
"1000230" [label="(Call,from_header->text)"];
"1000231" [label="(Identifier,from_header)"];
"1000218" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000221" [label="(Block,)"];
"1000192" [label="(Call,&dummy)"];
"1000194" [label="(Call,&dummy)"];
"1000170" [label="(Call,parse_find_address_end(from_header->text, FALSE))"];
"1000168" [label="(Call,p = parse_find_address_end(from_header->text, FALSE))"];
"1000519" [label="(Call,debug_printf(\"DMARC record parse error for %s\n\", header_from_sender))"];
"1000667" [label="(Call,log_write(0, LOG_MAIN, \"DMARC results: spf_domain=%s dmarc_domain=%s \"\n                             \"spf_align=%s dkim_align=%s enforcement='%s'\",\n                             spf_sender_domain, dmarc_used_domain,\n                             (sa==DMARC_POLICY_SPF_ALIGNMENT_PASS) ?\"yes\":\"no\",\n                             (da==DMARC_POLICY_DKIM_ALIGNMENT_PASS)?\"yes\":\"no\",\n                             dmarc_status_text))"];
"1000229" [label="(Identifier,libdm_status)"];
"1000563" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000497" [label="(Block,)"];
"1000530" [label="(Literal,\"DMARC skipping (%d), unsure what to do with %s\")"];
"1000222" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC,\n                \"failure to store header From: in DMARC: %s, header was '%s'\",\n                opendmarc_policy_status_to_str(libdm_status), from_header->text))"];
"1000196" [label="(Call,&domain)"];
"1000527" [label="(Call,(D_receive)\n          debug_printf(\"DMARC skipping (%d), unsure what to do with %s\",\n                        libdm_status, from_header->text))"];
"1000210" [label="(Identifier,libdm_status)"];
"1000656" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000698" [label="(MethodReturn,int)"];
"1000569" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000219" [label="(Identifier,libdm_status)"];
"1000216" [label="(Identifier,header_from_sender)"];
"1000199" [label="(Call,header_from_sender += domain)"];
"1000200" [label="(Identifier,header_from_sender)"];
"1000362" [label="(Call,opendmarc_policy_store_spf(dmarc_pctx, spf_sender_domain,\n                                                dmarc_spf_result, origin, spf_human_readable))"];
"1000174" [label="(Identifier,FALSE)"];
"1000369" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000512" [label="(Call,debug_printf(\"DMARC record found for %s\n\", header_from_sender))"];
"1000550" [label="(Call,opendmarc_policy_fetch_utilized_domain(dmarc_pctx, dmarc_domain,\n        \t                                          DMARC_MAXHOSTNAMELEN-1))"];
"1000217" [label="(ControlStructure,if (libdm_status != DMARC_PARSE_OKAY))"];
"1000228" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000187" [label="(Call,from_header->text)"];
"1000190" [label="(Call,&errormsg)"];
"1000434" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000227" [label="(Literal,\"failure to store header From: in DMARC: %s, header was '%s'\")"];
"1000226" [label="(Identifier,LOG_PANIC)"];
"1000225" [label="(Identifier,LOG_MAIN)"];
"1000211" [label="(Call,dmarc_abort ?\n    DMARC_PARSE_OKAY :\n    opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000171" [label="(Call,from_header->text)"];
"1000502" [label="(Call,debug_printf(\"DMARC no record found for %s\n\", header_from_sender))"];
"1000529" [label="(Call,debug_printf(\"DMARC skipping (%d), unsure what to do with %s\",\n                        libdm_status, from_header->text))"];
"1000224" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000531" [label="(Identifier,libdm_status)"];
"1000532" [label="(Call,from_header->text)"];
"1000220" [label="(Identifier,DMARC_PARSE_OKAY)"];
"1000209" [label="(Call,libdm_status = dmarc_abort ?\n    DMARC_PARSE_OKAY :\n    opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000223" [label="(Literal,0)"];
"1000214" [label="(Call,opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000356" [label="(Call,dmarc_abort == FALSE)"];
"1000374" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000238" [label="(Identifier,spf_response)"];
"1000441" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000536" [label="(Identifier,has_dmarc_record)"];
"1000201" [label="(Identifier,domain)"];
"1000378" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000204" [label="(Identifier,p)"];
"1000184" [label="(Call,header_from_sender = parse_extract_address(from_header->text, &errormsg,\n                              &dummy, &dummy, &domain, FALSE))"];
"1000183" [label="(ControlStructure,if ((header_from_sender = parse_extract_address(from_header->text, &errormsg,\n                              &dummy, &dummy, &domain, FALSE))))"];
"1000198" [label="(Identifier,FALSE)"];
"1000186" [label="(Call,parse_extract_address(from_header->text, &errormsg,\n                              &dummy, &dummy, &domain, FALSE))"];
"1000429" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000222" -> "1000221"  [label="AST: "];
"1000222" -> "1000230"  [label="CFG: "];
"1000223" -> "1000222"  [label="AST: "];
"1000224" -> "1000222"  [label="AST: "];
"1000227" -> "1000222"  [label="AST: "];
"1000228" -> "1000222"  [label="AST: "];
"1000230" -> "1000222"  [label="AST: "];
"1000234" -> "1000222"  [label="CFG: "];
"1000222" -> "1000698"  [label="DDG: "];
"1000222" -> "1000698"  [label="DDG: "];
"1000222" -> "1000698"  [label="DDG: "];
"1000222" -> "1000698"  [label="DDG: "];
"1000224" -> "1000222"  [label="DDG: "];
"1000224" -> "1000222"  [label="DDG: "];
"1000228" -> "1000222"  [label="DDG: "];
"1000186" -> "1000222"  [label="DDG: "];
"1000222" -> "1000529"  [label="DDG: "];
"1000224" -> "1000226"  [label="CFG: "];
"1000225" -> "1000224"  [label="AST: "];
"1000226" -> "1000224"  [label="AST: "];
"1000227" -> "1000224"  [label="CFG: "];
"1000224" -> "1000698"  [label="DDG: "];
"1000224" -> "1000698"  [label="DDG: "];
"1000224" -> "1000249"  [label="DDG: "];
"1000224" -> "1000374"  [label="DDG: "];
"1000224" -> "1000374"  [label="DDG: "];
"1000224" -> "1000434"  [label="DDG: "];
"1000224" -> "1000434"  [label="DDG: "];
"1000224" -> "1000569"  [label="DDG: "];
"1000224" -> "1000569"  [label="DDG: "];
"1000224" -> "1000656"  [label="DDG: "];
"1000224" -> "1000656"  [label="DDG: "];
"1000224" -> "1000667"  [label="DDG: "];
"1000228" -> "1000229"  [label="CFG: "];
"1000229" -> "1000228"  [label="AST: "];
"1000231" -> "1000228"  [label="CFG: "];
"1000218" -> "1000228"  [label="DDG: "];
"1000228" -> "1000429"  [label="DDG: "];
"1000228" -> "1000529"  [label="DDG: "];
"1000218" -> "1000217"  [label="AST: "];
"1000218" -> "1000220"  [label="CFG: "];
"1000219" -> "1000218"  [label="AST: "];
"1000220" -> "1000218"  [label="AST: "];
"1000223" -> "1000218"  [label="CFG: "];
"1000238" -> "1000218"  [label="CFG: "];
"1000209" -> "1000218"  [label="DDG: "];
"1000218" -> "1000369"  [label="DDG: "];
"1000218" -> "1000429"  [label="DDG: "];
"1000218" -> "1000429"  [label="DDG: "];
"1000218" -> "1000529"  [label="DDG: "];
"1000218" -> "1000563"  [label="DDG: "];
"1000209" -> "1000159"  [label="AST: "];
"1000209" -> "1000211"  [label="CFG: "];
"1000210" -> "1000209"  [label="AST: "];
"1000211" -> "1000209"  [label="AST: "];
"1000219" -> "1000209"  [label="CFG: "];
"1000209" -> "1000698"  [label="DDG: "];
"1000214" -> "1000209"  [label="DDG: "];
"1000214" -> "1000209"  [label="DDG: "];
"1000214" -> "1000211"  [label="AST: "];
"1000214" -> "1000216"  [label="CFG: "];
"1000215" -> "1000214"  [label="AST: "];
"1000216" -> "1000214"  [label="AST: "];
"1000211" -> "1000214"  [label="CFG: "];
"1000214" -> "1000698"  [label="DDG: "];
"1000214" -> "1000211"  [label="DDG: "];
"1000214" -> "1000211"  [label="DDG: "];
"1000184" -> "1000214"  [label="DDG: "];
"1000199" -> "1000214"  [label="DDG: "];
"1000214" -> "1000362"  [label="DDG: "];
"1000214" -> "1000502"  [label="DDG: "];
"1000214" -> "1000512"  [label="DDG: "];
"1000214" -> "1000519"  [label="DDG: "];
"1000214" -> "1000550"  [label="DDG: "];
"1000184" -> "1000183"  [label="AST: "];
"1000184" -> "1000186"  [label="CFG: "];
"1000185" -> "1000184"  [label="AST: "];
"1000186" -> "1000184"  [label="AST: "];
"1000200" -> "1000184"  [label="CFG: "];
"1000204" -> "1000184"  [label="CFG: "];
"1000184" -> "1000698"  [label="DDG: "];
"1000184" -> "1000698"  [label="DDG: "];
"1000186" -> "1000184"  [label="DDG: "];
"1000186" -> "1000184"  [label="DDG: "];
"1000186" -> "1000184"  [label="DDG: "];
"1000186" -> "1000184"  [label="DDG: "];
"1000186" -> "1000184"  [label="DDG: "];
"1000184" -> "1000199"  [label="DDG: "];
"1000184" -> "1000502"  [label="DDG: "];
"1000184" -> "1000512"  [label="DDG: "];
"1000184" -> "1000519"  [label="DDG: "];
"1000186" -> "1000198"  [label="CFG: "];
"1000187" -> "1000186"  [label="AST: "];
"1000190" -> "1000186"  [label="AST: "];
"1000192" -> "1000186"  [label="AST: "];
"1000194" -> "1000186"  [label="AST: "];
"1000196" -> "1000186"  [label="AST: "];
"1000198" -> "1000186"  [label="AST: "];
"1000186" -> "1000698"  [label="DDG: "];
"1000186" -> "1000698"  [label="DDG: "];
"1000186" -> "1000698"  [label="DDG: "];
"1000186" -> "1000698"  [label="DDG: "];
"1000170" -> "1000186"  [label="DDG: "];
"1000170" -> "1000186"  [label="DDG: "];
"1000186" -> "1000356"  [label="DDG: "];
"1000186" -> "1000529"  [label="DDG: "];
"1000170" -> "1000168"  [label="AST: "];
"1000170" -> "1000174"  [label="CFG: "];
"1000171" -> "1000170"  [label="AST: "];
"1000174" -> "1000170"  [label="AST: "];
"1000168" -> "1000170"  [label="CFG: "];
"1000170" -> "1000168"  [label="DDG: "];
"1000170" -> "1000168"  [label="DDG: "];
"1000199" -> "1000183"  [label="AST: "];
"1000199" -> "1000201"  [label="CFG: "];
"1000200" -> "1000199"  [label="AST: "];
"1000201" -> "1000199"  [label="AST: "];
"1000204" -> "1000199"  [label="CFG: "];
"1000199" -> "1000698"  [label="DDG: "];
"1000199" -> "1000698"  [label="DDG: "];
"1000199" -> "1000502"  [label="DDG: "];
"1000199" -> "1000512"  [label="DDG: "];
"1000199" -> "1000519"  [label="DDG: "];
"1000529" -> "1000527"  [label="AST: "];
"1000529" -> "1000532"  [label="CFG: "];
"1000530" -> "1000529"  [label="AST: "];
"1000531" -> "1000529"  [label="AST: "];
"1000532" -> "1000529"  [label="AST: "];
"1000527" -> "1000529"  [label="CFG: "];
"1000529" -> "1000698"  [label="DDG: "];
"1000529" -> "1000527"  [label="DDG: "];
"1000529" -> "1000527"  [label="DDG: "];
"1000529" -> "1000527"  [label="DDG: "];
"1000441" -> "1000529"  [label="DDG: "];
"1000369" -> "1000529"  [label="DDG: "];
"1000378" -> "1000529"  [label="DDG: "];
"1000429" -> "1000529"  [label="DDG: "];
"1000527" -> "1000497"  [label="AST: "];
"1000528" -> "1000527"  [label="AST: "];
"1000536" -> "1000527"  [label="CFG: "];
"1000527" -> "1000698"  [label="DDG: "];
"1000527" -> "1000698"  [label="DDG: "];
}
