digraph "1_savannah_dd89710f0f643eb0f99a3830e0712d26c7642acd@array" {
"1000633" [label="(Call,T1_Add_Table( name_table, notdef_index,\n                            swap_table->elements[0],\n                            swap_table->lengths [0] ))"];
"1000165" [label="(Call,name_table   = &loader->glyph_names)"];
"1000262" [label="(Call,psaux->ps_table_funcs->init(\n                name_table, num_glyphs + 1 + TABLE_EXTEND, memory ))"];
"1000232" [label="(Call,num_glyphs == 0)"];
"1000221" [label="(Call,num_glyphs < 0)"];
"1000214" [label="(Call,num_glyphs = (FT_Int)T1_ToInt( parser ))"];
"1000216" [label="(Call,(FT_Int)T1_ToInt( parser ))"];
"1000218" [label="(Call,T1_ToInt( parser ))"];
"1000151" [label="(Call,parser       = &loader->parser)"];
"1000249" [label="(Call,psaux->ps_table_funcs->init(\n                code_table, num_glyphs + 1 + TABLE_EXTEND, memory ))"];
"1000158" [label="(Call,code_table   = &loader->charstrings)"];
"1000179" [label="(Call,memory       = parser->root.memory)"];
"1000412" [label="(Call,T1_Add_Table( name_table, n, cur, len + 1 ))"];
"1000539" [label="(Call,n++)"];
"1000531" [label="(Call,T1_Add_Table( code_table, n, base, size ))"];
"1000513" [label="(Call,T1_Add_Table( code_table, n,\n                                temp + face->type1.private_dict.lenIV, size ))"];
"1000466" [label="(Call,n < num_glyphs + TABLE_EXTEND)"];
"1000498" [label="(Call,psaux->t1_decrypt( temp, size, 4330 ))"];
"1000494" [label="(Call,FT_MEM_COPY( temp, base, size ))"];
"1000490" [label="(Call,FT_ALLOC( temp, size ))"];
"1000526" [label="(Call,FT_FREE( temp ))"];
"1000474" [label="(Call,size <= face->type1.private_dict.lenIV)"];
"1000457" [label="(Call,face->type1.private_dict.lenIV >= 0)"];
"1000502" [label="(Call,size -= face->type1.private_dict.lenIV)"];
"1000282" [label="(Call,n = 0)"];
"1000388" [label="(Call,parser->root.cursor - cur)"];
"1000350" [label="(Call,cur[2] == 'd')"];
"1000328" [label="(Call,cur[2] == 'f')"];
"1000310" [label="(Call,IS_PS_DELIM( cur[3] ))"];
"1000299" [label="(Call,cur >= limit)"];
"1000291" [label="(Call,cur = parser->root.cursor)"];
"1000323" [label="(Call,cur[1] == 'e')"];
"1000345" [label="(Call,cur[1] == 'n')"];
"1000339" [label="(Call,cur[0] == 'e')"];
"1000317" [label="(Call,cur[0] == 'd')"];
"1000433" [label="(Call,*cur == '.')"];
"1000366" [label="(Call,*cur == '/')"];
"1000305" [label="(Call,cur + 3 < limit)"];
"1000373" [label="(Call,cur + 1 >= limit)"];
"1000197" [label="(Call,*       limit        = parser->root.limit)"];
"1000384" [label="(Call,cur++)"];
"1000386" [label="(Call,len = parser->root.cursor - cur)"];
"1000449" [label="(Call,notdef_index = n)"];
"1000207" [label="(Call,notdef_index = 0)"];
"1000631" [label="(Call,error = T1_Add_Table( name_table, notdef_index,\n                            swap_table->elements[0],\n                            swap_table->lengths [0] ))"];
"1000816" [label="(Call,parser->root.error = error)"];
"1000651" [label="(Call,T1_Add_Table( code_table, notdef_index,\n                            swap_table->elements[1],\n                            swap_table->lengths [1] ))"];
"1000649" [label="(Call,error = T1_Add_Table( code_table, notdef_index,\n                            swap_table->elements[1],\n                            swap_table->lengths [1] ))"];
"1000687" [label="(Call,T1_Add_Table( code_table, 0,\n                            swap_table->elements[3],\n                            swap_table->lengths [3] ))"];
"1000685" [label="(Call,error = T1_Add_Table( code_table, 0,\n                            swap_table->elements[3],\n                            swap_table->lengths [3] ))"];
"1000669" [label="(Call,T1_Add_Table( name_table, 0,\n                            swap_table->elements[2],\n                            swap_table->lengths [2] ))"];
"1000667" [label="(Call,error = T1_Add_Table( name_table, 0,\n                            swap_table->elements[2],\n                            swap_table->lengths [2] ))"];
"1000251" [label="(Call,num_glyphs + 1 + TABLE_EXTEND)"];
"1000412" [label="(Call,T1_Add_Table( name_table, n, cur, len + 1 ))"];
"1000765" [label="(Call,T1_Add_Table( code_table, 0, notdef_glyph, 5 ))"];
"1000685" [label="(Call,error = T1_Add_Table( code_table, 0,\n                            swap_table->elements[3],\n                            swap_table->lengths [3] ))"];
"1000632" [label="(Identifier,error)"];
"1000537" [label="(Identifier,error)"];
"1000484" [label="(Call,error = FT_THROW( Invalid_File_Format ))"];
"1000181" [label="(Call,parser->root.memory)"];
"1000641" [label="(Call,swap_table->lengths [0])"];
"1000468" [label="(Call,num_glyphs + TABLE_EXTEND)"];
"1000415" [label="(Identifier,cur)"];
"1000686" [label="(Identifier,error)"];
"1000260" [label="(Call,error = psaux->ps_table_funcs->init(\n                name_table, num_glyphs + 1 + TABLE_EXTEND, memory ))"];
"1000249" [label="(Call,psaux->ps_table_funcs->init(\n                code_table, num_glyphs + 1 + TABLE_EXTEND, memory ))"];
"1000189" [label="(Identifier,psaux)"];
"1000492" [label="(Identifier,size)"];
"1000298" [label="(ControlStructure,if ( cur >= limit ))"];
"1000290" [label="(Identifier,parser)"];
"1000541" [label="(Call,loader->num_glyphs = n)"];
"1000220" [label="(ControlStructure,if ( num_glyphs < 0 ))"];
"1000151" [label="(Call,parser       = &loader->parser)"];
"1000340" [label="(Call,cur[0])"];
"1000212" [label="(Identifier,notdef_found)"];
"1000413" [label="(Identifier,name_table)"];
"1000763" [label="(Call,error = T1_Add_Table( code_table, 0, notdef_glyph, 5 ))"];
"1000269" [label="(Identifier,memory)"];
"1000474" [label="(Call,size <= face->type1.private_dict.lenIV)"];
"1000695" [label="(Call,swap_table->lengths [3])"];
"1000512" [label="(Identifier,error)"];
"1000263" [label="(Identifier,name_table)"];
"1000307" [label="(Identifier,cur)"];
"1000316" [label="(Call,cur[0] == 'd' &&\n             cur[1] == 'e' &&\n             cur[2] == 'f')"];
"1000539" [label="(Call,n++)"];
"1000677" [label="(Call,swap_table->lengths [2])"];
"1000250" [label="(Identifier,code_table)"];
"1000534" [label="(Identifier,base)"];
"1000380" [label="(Identifier,error)"];
"1000350" [label="(Call,cur[2] == 'd')"];
"1000755" [label="(Call,T1_Add_Table( name_table, 0, notdef_name, 8 ))"];
"1000300" [label="(Identifier,cur)"];
"1000735" [label="(Call,error = T1_Add_Table( swap_table, 1,\n                            code_table->elements[0],\n                            code_table->lengths [0] ))"];
"1000221" [label="(Call,num_glyphs < 0)"];
"1000775" [label="(Call,T1_Add_Table( name_table, n,\n                            swap_table->elements[0],\n                            swap_table->lengths [0] ))"];
"1000817" [label="(Call,parser->root.error)"];
"1000209" [label="(Literal,0)"];
"1000410" [label="(Call,error = T1_Add_Table( name_table, n, cur, len + 1 ))"];
"1000370" [label="(Block,)"];
"1000226" [label="(Identifier,error)"];
"1000208" [label="(Identifier,notdef_index)"];
"1000791" [label="(Call,error = T1_Add_Table( code_table, n,\n                            swap_table->elements[1],\n                            swap_table->lengths [1] ))"];
"1000652" [label="(Identifier,code_table)"];
"1000198" [label="(Identifier,limit)"];
"1000773" [label="(Call,error = T1_Add_Table( name_table, n,\n                            swap_table->elements[0],\n                            swap_table->lengths [0] ))"];
"1000498" [label="(Call,psaux->t1_decrypt( temp, size, 4330 ))"];
"1000688" [label="(Identifier,code_table)"];
"1000282" [label="(Call,n = 0)"];
"1000670" [label="(Identifier,name_table)"];
"1000516" [label="(Call,temp + face->type1.private_dict.lenIV)"];
"1000344" [label="(Call,cur[1] == 'n' &&\n             cur[2] == 'd')"];
"1000330" [label="(Identifier,cur)"];
"1000291" [label="(Call,cur = parser->root.cursor)"];
"1000816" [label="(Call,parser->root.error = error)"];
"1000665" [label="(Identifier,error)"];
"1000384" [label="(Call,cur++)"];
"1000525" [label="(Identifier,size)"];
"1000231" [label="(Call,num_glyphs == 0 || parser->root.error)"];
"1000223" [label="(Literal,0)"];
"1000515" [label="(Identifier,n)"];
"1000491" [label="(Identifier,temp)"];
"1000215" [label="(Identifier,num_glyphs)"];
"1000338" [label="(Call,cur[0] == 'e' &&\n             cur[1] == 'n' &&\n             cur[2] == 'd')"];
"1000659" [label="(Call,swap_table->lengths [1])"];
"1000533" [label="(Identifier,n)"];
"1000635" [label="(Identifier,notdef_index)"];
"1000489" [label="(ControlStructure,if ( FT_ALLOC( temp, size ) ))"];
"1000322" [label="(Call,cur[1] == 'e' &&\n             cur[2] == 'f')"];
"1000323" [label="(Call,cur[1] == 'e')"];
"1000325" [label="(Identifier,cur)"];
"1000690" [label="(Call,swap_table->elements[3])"];
"1000433" [label="(Call,*cur == '.')"];
"1000634" [label="(Identifier,name_table)"];
"1000511" [label="(Call,error = T1_Add_Table( code_table, n,\n                                temp + face->type1.private_dict.lenIV, size ))"];
"1000153" [label="(Call,&loader->parser)"];
"1000365" [label="(ControlStructure,if ( *cur == '/' ))"];
"1000501" [label="(Literal,4330)"];
"1000689" [label="(Literal,0)"];
"1000149" [label="(Block,)"];
"1000286" [label="(Block,)"];
"1000823" [label="(MethodReturn,RET)"];
"1000633" [label="(Call,T1_Add_Table( name_table, notdef_index,\n                            swap_table->elements[0],\n                            swap_table->lengths [0] ))"];
"1000414" [label="(Identifier,n)"];
"1000386" [label="(Call,len = parser->root.cursor - cur)"];
"1000465" [label="(Literal,0)"];
"1000669" [label="(Call,T1_Add_Table( name_table, 0,\n                            swap_table->elements[2],\n                            swap_table->lengths [2] ))"];
"1000160" [label="(Call,&loader->charstrings)"];
"1000822" [label="(Identifier,error)"];
"1000222" [label="(Identifier,num_glyphs)"];
"1000687" [label="(Call,T1_Add_Table( code_table, 0,\n                            swap_table->elements[3],\n                            swap_table->lengths [3] ))"];
"1000559" [label="(Call,error = T1_Add_Table( swap_table, 0,\n                            name_table->elements[0],\n                            name_table->lengths [0] ))"];
"1000247" [label="(Call,error = psaux->ps_table_funcs->init(\n                code_table, num_glyphs + 1 + TABLE_EXTEND, memory ))"];
"1000158" [label="(Call,code_table   = &loader->charstrings)"];
"1000293" [label="(Call,parser->root.cursor)"];
"1000166" [label="(Identifier,name_table)"];
"1000502" [label="(Call,size -= face->type1.private_dict.lenIV)"];
"1000494" [label="(Call,FT_MEM_COPY( temp, base, size ))"];
"1000476" [label="(Call,face->type1.private_dict.lenIV)"];
"1000379" [label="(Call,error = FT_THROW( Invalid_File_Format ))"];
"1000219" [label="(Identifier,parser)"];
"1000310" [label="(Call,IS_PS_DELIM( cur[3] ))"];
"1000683" [label="(Identifier,error)"];
"1000264" [label="(Call,num_glyphs + 1 + TABLE_EXTEND)"];
"1000416" [label="(Call,len + 1)"];
"1000503" [label="(Identifier,size)"];
"1000497" [label="(Identifier,size)"];
"1000388" [label="(Call,parser->root.cursor - cur)"];
"1000375" [label="(Identifier,cur)"];
"1000493" [label="(ControlStructure,goto Fail;)"];
"1000531" [label="(Call,T1_Add_Table( code_table, n, base, size ))"];
"1000387" [label="(Identifier,len)"];
"1000317" [label="(Call,cur[0] == 'd')"];
"1000306" [label="(Call,cur + 3)"];
"1000432" [label="(Call,*cur == '.'                                              &&\n             ft_strcmp( \".notdef\",\n                        (const char*)(name_table->elements[n]) ) == 0)"];
"1000367" [label="(Call,*cur)"];
"1000636" [label="(Call,swap_table->elements[0])"];
"1000466" [label="(Call,n < num_glyphs + TABLE_EXTEND)"];
"1000159" [label="(Identifier,code_table)"];
"1000167" [label="(Call,&loader->glyph_names)"];
"1000540" [label="(Identifier,n)"];
"1000496" [label="(Identifier,base)"];
"1000321" [label="(Literal,'d')"];
"1000667" [label="(Call,error = T1_Add_Table( name_table, 0,\n                            swap_table->elements[2],\n                            swap_table->lengths [2] ))"];
"1000237" [label="(Identifier,parser)"];
"1000649" [label="(Call,error = T1_Add_Table( code_table, notdef_index,\n                            swap_table->elements[1],\n                            swap_table->lengths [1] ))"];
"1000473" [label="(ControlStructure,if ( size <= face->type1.private_dict.lenIV ))"];
"1000475" [label="(Identifier,size)"];
"1000451" [label="(Identifier,n)"];
"1000647" [label="(Identifier,error)"];
"1000753" [label="(Call,error = T1_Add_Table( name_table, 0, notdef_name, 8 ))"];
"1000389" [label="(Call,parser->root.cursor)"];
"1000671" [label="(Literal,0)"];
"1000631" [label="(Call,error = T1_Add_Table( name_table, notdef_index,\n                            swap_table->elements[0],\n                            swap_table->lengths [0] ))"];
"1000485" [label="(Identifier,error)"];
"1000283" [label="(Identifier,n)"];
"1000668" [label="(Identifier,error)"];
"1000152" [label="(Identifier,parser)"];
"1000514" [label="(Identifier,code_table)"];
"1000535" [label="(Identifier,size)"];
"1000352" [label="(Identifier,cur)"];
"1000328" [label="(Call,cur[2] == 'f')"];
"1000256" [label="(Identifier,memory)"];
"1000654" [label="(Call,swap_table->elements[1])"];
"1000651" [label="(Call,T1_Add_Table( code_table, notdef_index,\n                            swap_table->elements[1],\n                            swap_table->lengths [1] ))"];
"1000436" [label="(Literal,'.')"];
"1000289" [label="(Call,T1_Skip_Spaces( parser ))"];
"1000351" [label="(Call,cur[2])"];
"1000456" [label="(Call,face->type1.private_dict.lenIV >= 0 &&\n             n < num_glyphs + TABLE_EXTEND)"];
"1000490" [label="(Call,FT_ALLOC( temp, size ))"];
"1000513" [label="(Call,T1_Add_Table( code_table, n,\n                                temp + face->type1.private_dict.lenIV, size ))"];
"1000500" [label="(Identifier,size)"];
"1000449" [label="(Call,notdef_index = n)"];
"1000458" [label="(Call,face->type1.private_dict.lenIV)"];
"1000199" [label="(Call,parser->root.limit)"];
"1000448" [label="(Block,)"];
"1000717" [label="(Call,error = T1_Add_Table( swap_table, 0,\n                            name_table->elements[0],\n                            name_table->lengths [0] ))"];
"1000234" [label="(Literal,0)"];
"1000701" [label="(Identifier,error)"];
"1000292" [label="(Identifier,cur)"];
"1000207" [label="(Call,notdef_index = 0)"];
"1000345" [label="(Call,cur[1] == 'n')"];
"1000495" [label="(Identifier,temp)"];
"1000232" [label="(Call,num_glyphs == 0)"];
"1000343" [label="(Literal,'e')"];
"1000529" [label="(Call,error = T1_Add_Table( code_table, n, base, size ))"];
"1000284" [label="(Literal,0)"];
"1000324" [label="(Call,cur[1])"];
"1000262" [label="(Call,psaux->ps_table_funcs->init(\n                name_table, num_glyphs + 1 + TABLE_EXTEND, memory ))"];
"1000453" [label="(Identifier,notdef_found)"];
"1000457" [label="(Call,face->type1.private_dict.lenIV >= 0)"];
"1000218" [label="(Call,T1_ToInt( parser ))"];
"1000339" [label="(Call,cur[0] == 'e')"];
"1000467" [label="(Identifier,n)"];
"1000527" [label="(Identifier,temp)"];
"1000354" [label="(Literal,'d')"];
"1000233" [label="(Identifier,num_glyphs)"];
"1000558" [label="(Block,)"];
"1000499" [label="(Identifier,temp)"];
"1000439" [label="(Literal,\".notdef\")"];
"1000273" [label="(Call,error = psaux->ps_table_funcs->init( swap_table, 4, memory ))"];
"1000216" [label="(Call,(FT_Int)T1_ToInt( parser ))"];
"1000311" [label="(Call,cur[3])"];
"1000312" [label="(Identifier,cur)"];
"1000369" [label="(Literal,'/')"];
"1000179" [label="(Call,memory       = parser->root.memory)"];
"1000532" [label="(Identifier,code_table)"];
"1000504" [label="(Call,face->type1.private_dict.lenIV)"];
"1000394" [label="(Identifier,cur)"];
"1000366" [label="(Call,*cur == '/')"];
"1000302" [label="(ControlStructure,break;)"];
"1000305" [label="(Call,cur + 3 < limit)"];
"1000318" [label="(Call,cur[0])"];
"1000450" [label="(Identifier,notdef_index)"];
"1000650" [label="(Identifier,error)"];
"1000304" [label="(Call,cur + 3 < limit && IS_PS_DELIM( cur[3] ))"];
"1000471" [label="(Block,)"];
"1000595" [label="(Call,error = T1_Add_Table( swap_table, 2,\n                            name_table->elements[notdef_index],\n                            name_table->lengths [notdef_index] ))"];
"1000434" [label="(Call,*cur)"];
"1000275" [label="(Call,psaux->ps_table_funcs->init( swap_table, 4, memory ))"];
"1000526" [label="(Call,FT_FREE( temp ))"];
"1000672" [label="(Call,swap_table->elements[2])"];
"1000346" [label="(Call,cur[1])"];
"1000347" [label="(Identifier,cur)"];
"1000197" [label="(Call,*       limit        = parser->root.limit)"];
"1000372" [label="(ControlStructure,if ( cur + 1 >= limit ))"];
"1000299" [label="(Call,cur >= limit)"];
"1000173" [label="(Identifier,swap_table)"];
"1000329" [label="(Call,cur[2])"];
"1000165" [label="(Call,name_table   = &loader->glyph_names)"];
"1000398" [label="(Identifier,parser)"];
"1000225" [label="(Call,error = FT_THROW( Invalid_File_Format ))"];
"1000309" [label="(Identifier,limit)"];
"1000301" [label="(Identifier,limit)"];
"1000214" [label="(Call,num_glyphs = (FT_Int)T1_ToInt( parser ))"];
"1000385" [label="(Identifier,cur)"];
"1000613" [label="(Call,error = T1_Add_Table( swap_table, 3,\n                            code_table->elements[notdef_index],\n                            code_table->lengths [notdef_index] ))"];
"1000349" [label="(Literal,'n')"];
"1000377" [label="(Identifier,limit)"];
"1000374" [label="(Call,cur + 1)"];
"1000180" [label="(Identifier,memory)"];
"1000653" [label="(Identifier,notdef_index)"];
"1000373" [label="(Call,cur + 1 >= limit)"];
"1000332" [label="(Literal,'f')"];
"1000577" [label="(Call,error = T1_Add_Table( swap_table, 1,\n                            code_table->elements[0],\n                            code_table->lengths [0] ))"];
"1000327" [label="(Literal,'e')"];
"1000633" -> "1000631"  [label="AST: "];
"1000633" -> "1000641"  [label="CFG: "];
"1000634" -> "1000633"  [label="AST: "];
"1000635" -> "1000633"  [label="AST: "];
"1000636" -> "1000633"  [label="AST: "];
"1000641" -> "1000633"  [label="AST: "];
"1000631" -> "1000633"  [label="CFG: "];
"1000633" -> "1000823"  [label="DDG: swap_table->lengths [0]"];
"1000633" -> "1000823"  [label="DDG: notdef_index"];
"1000633" -> "1000823"  [label="DDG: swap_table->elements[0]"];
"1000633" -> "1000823"  [label="DDG: name_table"];
"1000633" -> "1000631"  [label="DDG: name_table"];
"1000633" -> "1000631"  [label="DDG: notdef_index"];
"1000633" -> "1000631"  [label="DDG: swap_table->elements[0]"];
"1000633" -> "1000631"  [label="DDG: swap_table->lengths [0]"];
"1000165" -> "1000633"  [label="DDG: name_table"];
"1000262" -> "1000633"  [label="DDG: name_table"];
"1000412" -> "1000633"  [label="DDG: name_table"];
"1000449" -> "1000633"  [label="DDG: notdef_index"];
"1000207" -> "1000633"  [label="DDG: notdef_index"];
"1000633" -> "1000651"  [label="DDG: notdef_index"];
"1000633" -> "1000669"  [label="DDG: name_table"];
"1000165" -> "1000149"  [label="AST: "];
"1000165" -> "1000167"  [label="CFG: "];
"1000166" -> "1000165"  [label="AST: "];
"1000167" -> "1000165"  [label="AST: "];
"1000173" -> "1000165"  [label="CFG: "];
"1000165" -> "1000823"  [label="DDG: name_table"];
"1000165" -> "1000823"  [label="DDG: &loader->glyph_names"];
"1000165" -> "1000262"  [label="DDG: name_table"];
"1000165" -> "1000412"  [label="DDG: name_table"];
"1000165" -> "1000755"  [label="DDG: name_table"];
"1000262" -> "1000260"  [label="AST: "];
"1000262" -> "1000269"  [label="CFG: "];
"1000263" -> "1000262"  [label="AST: "];
"1000264" -> "1000262"  [label="AST: "];
"1000269" -> "1000262"  [label="AST: "];
"1000260" -> "1000262"  [label="CFG: "];
"1000262" -> "1000823"  [label="DDG: memory"];
"1000262" -> "1000823"  [label="DDG: name_table"];
"1000262" -> "1000823"  [label="DDG: num_glyphs + 1 + TABLE_EXTEND"];
"1000262" -> "1000260"  [label="DDG: name_table"];
"1000262" -> "1000260"  [label="DDG: num_glyphs + 1 + TABLE_EXTEND"];
"1000262" -> "1000260"  [label="DDG: memory"];
"1000232" -> "1000262"  [label="DDG: num_glyphs"];
"1000249" -> "1000262"  [label="DDG: memory"];
"1000262" -> "1000275"  [label="DDG: memory"];
"1000262" -> "1000412"  [label="DDG: name_table"];
"1000262" -> "1000755"  [label="DDG: name_table"];
"1000232" -> "1000231"  [label="AST: "];
"1000232" -> "1000234"  [label="CFG: "];
"1000233" -> "1000232"  [label="AST: "];
"1000234" -> "1000232"  [label="AST: "];
"1000237" -> "1000232"  [label="CFG: "];
"1000231" -> "1000232"  [label="CFG: "];
"1000232" -> "1000823"  [label="DDG: num_glyphs"];
"1000232" -> "1000231"  [label="DDG: num_glyphs"];
"1000232" -> "1000231"  [label="DDG: 0"];
"1000221" -> "1000232"  [label="DDG: num_glyphs"];
"1000232" -> "1000249"  [label="DDG: num_glyphs"];
"1000232" -> "1000251"  [label="DDG: num_glyphs"];
"1000232" -> "1000264"  [label="DDG: num_glyphs"];
"1000232" -> "1000466"  [label="DDG: num_glyphs"];
"1000232" -> "1000468"  [label="DDG: num_glyphs"];
"1000221" -> "1000220"  [label="AST: "];
"1000221" -> "1000223"  [label="CFG: "];
"1000222" -> "1000221"  [label="AST: "];
"1000223" -> "1000221"  [label="AST: "];
"1000226" -> "1000221"  [label="CFG: "];
"1000233" -> "1000221"  [label="CFG: "];
"1000221" -> "1000823"  [label="DDG: num_glyphs < 0"];
"1000221" -> "1000823"  [label="DDG: num_glyphs"];
"1000214" -> "1000221"  [label="DDG: num_glyphs"];
"1000214" -> "1000149"  [label="AST: "];
"1000214" -> "1000216"  [label="CFG: "];
"1000215" -> "1000214"  [label="AST: "];
"1000216" -> "1000214"  [label="AST: "];
"1000222" -> "1000214"  [label="CFG: "];
"1000214" -> "1000823"  [label="DDG: (FT_Int)T1_ToInt( parser )"];
"1000216" -> "1000214"  [label="DDG: T1_ToInt( parser )"];
"1000216" -> "1000218"  [label="CFG: "];
"1000217" -> "1000216"  [label="AST: "];
"1000218" -> "1000216"  [label="AST: "];
"1000216" -> "1000823"  [label="DDG: T1_ToInt( parser )"];
"1000218" -> "1000216"  [label="DDG: parser"];
"1000218" -> "1000219"  [label="CFG: "];
"1000219" -> "1000218"  [label="AST: "];
"1000218" -> "1000823"  [label="DDG: parser"];
"1000151" -> "1000218"  [label="DDG: parser"];
"1000218" -> "1000289"  [label="DDG: parser"];
"1000151" -> "1000149"  [label="AST: "];
"1000151" -> "1000153"  [label="CFG: "];
"1000152" -> "1000151"  [label="AST: "];
"1000153" -> "1000151"  [label="AST: "];
"1000159" -> "1000151"  [label="CFG: "];
"1000151" -> "1000823"  [label="DDG: &loader->parser"];
"1000249" -> "1000247"  [label="AST: "];
"1000249" -> "1000256"  [label="CFG: "];
"1000250" -> "1000249"  [label="AST: "];
"1000251" -> "1000249"  [label="AST: "];
"1000256" -> "1000249"  [label="AST: "];
"1000247" -> "1000249"  [label="CFG: "];
"1000249" -> "1000823"  [label="DDG: memory"];
"1000249" -> "1000823"  [label="DDG: num_glyphs + 1 + TABLE_EXTEND"];
"1000249" -> "1000823"  [label="DDG: code_table"];
"1000249" -> "1000247"  [label="DDG: code_table"];
"1000249" -> "1000247"  [label="DDG: num_glyphs + 1 + TABLE_EXTEND"];
"1000249" -> "1000247"  [label="DDG: memory"];
"1000158" -> "1000249"  [label="DDG: code_table"];
"1000179" -> "1000249"  [label="DDG: memory"];
"1000249" -> "1000513"  [label="DDG: code_table"];
"1000249" -> "1000531"  [label="DDG: code_table"];
"1000249" -> "1000651"  [label="DDG: code_table"];
"1000249" -> "1000765"  [label="DDG: code_table"];
"1000158" -> "1000149"  [label="AST: "];
"1000158" -> "1000160"  [label="CFG: "];
"1000159" -> "1000158"  [label="AST: "];
"1000160" -> "1000158"  [label="AST: "];
"1000166" -> "1000158"  [label="CFG: "];
"1000158" -> "1000823"  [label="DDG: code_table"];
"1000158" -> "1000823"  [label="DDG: &loader->charstrings"];
"1000158" -> "1000513"  [label="DDG: code_table"];
"1000158" -> "1000531"  [label="DDG: code_table"];
"1000158" -> "1000651"  [label="DDG: code_table"];
"1000158" -> "1000765"  [label="DDG: code_table"];
"1000179" -> "1000149"  [label="AST: "];
"1000179" -> "1000181"  [label="CFG: "];
"1000180" -> "1000179"  [label="AST: "];
"1000181" -> "1000179"  [label="AST: "];
"1000189" -> "1000179"  [label="CFG: "];
"1000179" -> "1000823"  [label="DDG: parser->root.memory"];
"1000179" -> "1000823"  [label="DDG: memory"];
"1000412" -> "1000410"  [label="AST: "];
"1000412" -> "1000416"  [label="CFG: "];
"1000413" -> "1000412"  [label="AST: "];
"1000414" -> "1000412"  [label="AST: "];
"1000415" -> "1000412"  [label="AST: "];
"1000416" -> "1000412"  [label="AST: "];
"1000410" -> "1000412"  [label="CFG: "];
"1000412" -> "1000823"  [label="DDG: n"];
"1000412" -> "1000823"  [label="DDG: name_table"];
"1000412" -> "1000823"  [label="DDG: len + 1"];
"1000412" -> "1000823"  [label="DDG: cur"];
"1000412" -> "1000410"  [label="DDG: name_table"];
"1000412" -> "1000410"  [label="DDG: n"];
"1000412" -> "1000410"  [label="DDG: cur"];
"1000412" -> "1000410"  [label="DDG: len + 1"];
"1000539" -> "1000412"  [label="DDG: n"];
"1000282" -> "1000412"  [label="DDG: n"];
"1000388" -> "1000412"  [label="DDG: cur"];
"1000350" -> "1000412"  [label="DDG: cur[2]"];
"1000310" -> "1000412"  [label="DDG: cur[3]"];
"1000328" -> "1000412"  [label="DDG: cur[2]"];
"1000323" -> "1000412"  [label="DDG: cur[1]"];
"1000339" -> "1000412"  [label="DDG: cur[0]"];
"1000345" -> "1000412"  [label="DDG: cur[1]"];
"1000386" -> "1000412"  [label="DDG: len"];
"1000412" -> "1000449"  [label="DDG: n"];
"1000412" -> "1000466"  [label="DDG: n"];
"1000412" -> "1000513"  [label="DDG: n"];
"1000412" -> "1000531"  [label="DDG: n"];
"1000412" -> "1000755"  [label="DDG: name_table"];
"1000539" -> "1000370"  [label="AST: "];
"1000539" -> "1000540"  [label="CFG: "];
"1000540" -> "1000539"  [label="AST: "];
"1000290" -> "1000539"  [label="CFG: "];
"1000539" -> "1000823"  [label="DDG: n"];
"1000531" -> "1000539"  [label="DDG: n"];
"1000513" -> "1000539"  [label="DDG: n"];
"1000539" -> "1000541"  [label="DDG: n"];
"1000539" -> "1000775"  [label="DDG: n"];
"1000531" -> "1000529"  [label="AST: "];
"1000531" -> "1000535"  [label="CFG: "];
"1000532" -> "1000531"  [label="AST: "];
"1000533" -> "1000531"  [label="AST: "];
"1000534" -> "1000531"  [label="AST: "];
"1000535" -> "1000531"  [label="AST: "];
"1000529" -> "1000531"  [label="CFG: "];
"1000531" -> "1000823"  [label="DDG: n"];
"1000531" -> "1000823"  [label="DDG: base"];
"1000531" -> "1000823"  [label="DDG: size"];
"1000531" -> "1000823"  [label="DDG: code_table"];
"1000531" -> "1000474"  [label="DDG: size"];
"1000531" -> "1000494"  [label="DDG: base"];
"1000531" -> "1000513"  [label="DDG: code_table"];
"1000531" -> "1000529"  [label="DDG: code_table"];
"1000531" -> "1000529"  [label="DDG: n"];
"1000531" -> "1000529"  [label="DDG: base"];
"1000531" -> "1000529"  [label="DDG: size"];
"1000513" -> "1000531"  [label="DDG: code_table"];
"1000513" -> "1000531"  [label="DDG: size"];
"1000466" -> "1000531"  [label="DDG: n"];
"1000494" -> "1000531"  [label="DDG: base"];
"1000531" -> "1000651"  [label="DDG: code_table"];
"1000531" -> "1000765"  [label="DDG: code_table"];
"1000513" -> "1000511"  [label="AST: "];
"1000513" -> "1000525"  [label="CFG: "];
"1000514" -> "1000513"  [label="AST: "];
"1000515" -> "1000513"  [label="AST: "];
"1000516" -> "1000513"  [label="AST: "];
"1000525" -> "1000513"  [label="AST: "];
"1000511" -> "1000513"  [label="CFG: "];
"1000513" -> "1000823"  [label="DDG: size"];
"1000513" -> "1000823"  [label="DDG: code_table"];
"1000513" -> "1000823"  [label="DDG: n"];
"1000513" -> "1000823"  [label="DDG: temp + face->type1.private_dict.lenIV"];
"1000513" -> "1000474"  [label="DDG: size"];
"1000513" -> "1000511"  [label="DDG: code_table"];
"1000513" -> "1000511"  [label="DDG: n"];
"1000513" -> "1000511"  [label="DDG: temp + face->type1.private_dict.lenIV"];
"1000513" -> "1000511"  [label="DDG: size"];
"1000466" -> "1000513"  [label="DDG: n"];
"1000498" -> "1000513"  [label="DDG: temp"];
"1000474" -> "1000513"  [label="DDG: face->type1.private_dict.lenIV"];
"1000502" -> "1000513"  [label="DDG: size"];
"1000513" -> "1000651"  [label="DDG: code_table"];
"1000513" -> "1000765"  [label="DDG: code_table"];
"1000466" -> "1000456"  [label="AST: "];
"1000466" -> "1000468"  [label="CFG: "];
"1000467" -> "1000466"  [label="AST: "];
"1000468" -> "1000466"  [label="AST: "];
"1000456" -> "1000466"  [label="CFG: "];
"1000466" -> "1000823"  [label="DDG: num_glyphs + TABLE_EXTEND"];
"1000466" -> "1000823"  [label="DDG: n"];
"1000466" -> "1000456"  [label="DDG: n"];
"1000466" -> "1000456"  [label="DDG: num_glyphs + TABLE_EXTEND"];
"1000498" -> "1000471"  [label="AST: "];
"1000498" -> "1000501"  [label="CFG: "];
"1000499" -> "1000498"  [label="AST: "];
"1000500" -> "1000498"  [label="AST: "];
"1000501" -> "1000498"  [label="AST: "];
"1000503" -> "1000498"  [label="CFG: "];
"1000498" -> "1000823"  [label="DDG: psaux->t1_decrypt( temp, size, 4330 )"];
"1000494" -> "1000498"  [label="DDG: temp"];
"1000494" -> "1000498"  [label="DDG: size"];
"1000498" -> "1000502"  [label="DDG: size"];
"1000498" -> "1000516"  [label="DDG: temp"];
"1000498" -> "1000526"  [label="DDG: temp"];
"1000494" -> "1000471"  [label="AST: "];
"1000494" -> "1000497"  [label="CFG: "];
"1000495" -> "1000494"  [label="AST: "];
"1000496" -> "1000494"  [label="AST: "];
"1000497" -> "1000494"  [label="AST: "];
"1000499" -> "1000494"  [label="CFG: "];
"1000494" -> "1000823"  [label="DDG: FT_MEM_COPY( temp, base, size )"];
"1000494" -> "1000823"  [label="DDG: base"];
"1000490" -> "1000494"  [label="DDG: temp"];
"1000490" -> "1000494"  [label="DDG: size"];
"1000490" -> "1000489"  [label="AST: "];
"1000490" -> "1000492"  [label="CFG: "];
"1000491" -> "1000490"  [label="AST: "];
"1000492" -> "1000490"  [label="AST: "];
"1000493" -> "1000490"  [label="CFG: "];
"1000495" -> "1000490"  [label="CFG: "];
"1000490" -> "1000823"  [label="DDG: temp"];
"1000490" -> "1000823"  [label="DDG: FT_ALLOC( temp, size )"];
"1000490" -> "1000823"  [label="DDG: size"];
"1000526" -> "1000490"  [label="DDG: temp"];
"1000474" -> "1000490"  [label="DDG: size"];
"1000526" -> "1000471"  [label="AST: "];
"1000526" -> "1000527"  [label="CFG: "];
"1000527" -> "1000526"  [label="AST: "];
"1000537" -> "1000526"  [label="CFG: "];
"1000526" -> "1000823"  [label="DDG: FT_FREE( temp )"];
"1000526" -> "1000823"  [label="DDG: temp"];
"1000474" -> "1000473"  [label="AST: "];
"1000474" -> "1000476"  [label="CFG: "];
"1000475" -> "1000474"  [label="AST: "];
"1000476" -> "1000474"  [label="AST: "];
"1000485" -> "1000474"  [label="CFG: "];
"1000491" -> "1000474"  [label="CFG: "];
"1000474" -> "1000823"  [label="DDG: face->type1.private_dict.lenIV"];
"1000474" -> "1000823"  [label="DDG: size <= face->type1.private_dict.lenIV"];
"1000474" -> "1000823"  [label="DDG: size"];
"1000474" -> "1000457"  [label="DDG: face->type1.private_dict.lenIV"];
"1000457" -> "1000474"  [label="DDG: face->type1.private_dict.lenIV"];
"1000474" -> "1000502"  [label="DDG: face->type1.private_dict.lenIV"];
"1000474" -> "1000516"  [label="DDG: face->type1.private_dict.lenIV"];
"1000457" -> "1000456"  [label="AST: "];
"1000457" -> "1000465"  [label="CFG: "];
"1000458" -> "1000457"  [label="AST: "];
"1000465" -> "1000457"  [label="AST: "];
"1000467" -> "1000457"  [label="CFG: "];
"1000456" -> "1000457"  [label="CFG: "];
"1000457" -> "1000823"  [label="DDG: face->type1.private_dict.lenIV"];
"1000457" -> "1000456"  [label="DDG: face->type1.private_dict.lenIV"];
"1000457" -> "1000456"  [label="DDG: 0"];
"1000502" -> "1000471"  [label="AST: "];
"1000502" -> "1000504"  [label="CFG: "];
"1000503" -> "1000502"  [label="AST: "];
"1000504" -> "1000502"  [label="AST: "];
"1000512" -> "1000502"  [label="CFG: "];
"1000282" -> "1000149"  [label="AST: "];
"1000282" -> "1000284"  [label="CFG: "];
"1000283" -> "1000282"  [label="AST: "];
"1000284" -> "1000282"  [label="AST: "];
"1000290" -> "1000282"  [label="CFG: "];
"1000282" -> "1000823"  [label="DDG: n"];
"1000282" -> "1000541"  [label="DDG: n"];
"1000282" -> "1000775"  [label="DDG: n"];
"1000388" -> "1000386"  [label="AST: "];
"1000388" -> "1000394"  [label="CFG: "];
"1000389" -> "1000388"  [label="AST: "];
"1000394" -> "1000388"  [label="AST: "];
"1000386" -> "1000388"  [label="CFG: "];
"1000388" -> "1000823"  [label="DDG: cur"];
"1000388" -> "1000823"  [label="DDG: parser->root.cursor"];
"1000388" -> "1000291"  [label="DDG: parser->root.cursor"];
"1000388" -> "1000386"  [label="DDG: parser->root.cursor"];
"1000388" -> "1000386"  [label="DDG: cur"];
"1000350" -> "1000388"  [label="DDG: cur[2]"];
"1000310" -> "1000388"  [label="DDG: cur[3]"];
"1000328" -> "1000388"  [label="DDG: cur[2]"];
"1000323" -> "1000388"  [label="DDG: cur[1]"];
"1000339" -> "1000388"  [label="DDG: cur[0]"];
"1000345" -> "1000388"  [label="DDG: cur[1]"];
"1000384" -> "1000388"  [label="DDG: cur"];
"1000350" -> "1000344"  [label="AST: "];
"1000350" -> "1000354"  [label="CFG: "];
"1000351" -> "1000350"  [label="AST: "];
"1000354" -> "1000350"  [label="AST: "];
"1000344" -> "1000350"  [label="CFG: "];
"1000350" -> "1000823"  [label="DDG: cur[2]"];
"1000350" -> "1000299"  [label="DDG: cur[2]"];
"1000350" -> "1000305"  [label="DDG: cur[2]"];
"1000350" -> "1000306"  [label="DDG: cur[2]"];
"1000350" -> "1000310"  [label="DDG: cur[2]"];
"1000350" -> "1000317"  [label="DDG: cur[2]"];
"1000350" -> "1000323"  [label="DDG: cur[2]"];
"1000350" -> "1000328"  [label="DDG: cur[2]"];
"1000350" -> "1000339"  [label="DDG: cur[2]"];
"1000350" -> "1000345"  [label="DDG: cur[2]"];
"1000350" -> "1000344"  [label="DDG: cur[2]"];
"1000350" -> "1000344"  [label="DDG: 'd'"];
"1000328" -> "1000350"  [label="DDG: cur[2]"];
"1000310" -> "1000350"  [label="DDG: cur[3]"];
"1000299" -> "1000350"  [label="DDG: cur"];
"1000323" -> "1000350"  [label="DDG: cur[1]"];
"1000339" -> "1000350"  [label="DDG: cur[0]"];
"1000345" -> "1000350"  [label="DDG: cur[1]"];
"1000350" -> "1000373"  [label="DDG: cur[2]"];
"1000350" -> "1000374"  [label="DDG: cur[2]"];
"1000350" -> "1000384"  [label="DDG: cur[2]"];
"1000328" -> "1000322"  [label="AST: "];
"1000328" -> "1000332"  [label="CFG: "];
"1000329" -> "1000328"  [label="AST: "];
"1000332" -> "1000328"  [label="AST: "];
"1000322" -> "1000328"  [label="CFG: "];
"1000328" -> "1000823"  [label="DDG: cur[2]"];
"1000328" -> "1000299"  [label="DDG: cur[2]"];
"1000328" -> "1000305"  [label="DDG: cur[2]"];
"1000328" -> "1000306"  [label="DDG: cur[2]"];
"1000328" -> "1000310"  [label="DDG: cur[2]"];
"1000328" -> "1000317"  [label="DDG: cur[2]"];
"1000328" -> "1000323"  [label="DDG: cur[2]"];
"1000328" -> "1000322"  [label="DDG: cur[2]"];
"1000328" -> "1000322"  [label="DDG: 'f'"];
"1000310" -> "1000328"  [label="DDG: cur[3]"];
"1000299" -> "1000328"  [label="DDG: cur"];
"1000323" -> "1000328"  [label="DDG: cur[1]"];
"1000339" -> "1000328"  [label="DDG: cur[0]"];
"1000345" -> "1000328"  [label="DDG: cur[1]"];
"1000328" -> "1000339"  [label="DDG: cur[2]"];
"1000328" -> "1000345"  [label="DDG: cur[2]"];
"1000328" -> "1000373"  [label="DDG: cur[2]"];
"1000328" -> "1000374"  [label="DDG: cur[2]"];
"1000328" -> "1000384"  [label="DDG: cur[2]"];
"1000310" -> "1000304"  [label="AST: "];
"1000310" -> "1000311"  [label="CFG: "];
"1000311" -> "1000310"  [label="AST: "];
"1000304" -> "1000310"  [label="CFG: "];
"1000310" -> "1000823"  [label="DDG: cur[3]"];
"1000310" -> "1000299"  [label="DDG: cur[3]"];
"1000310" -> "1000305"  [label="DDG: cur[3]"];
"1000310" -> "1000306"  [label="DDG: cur[3]"];
"1000310" -> "1000304"  [label="DDG: cur[3]"];
"1000299" -> "1000310"  [label="DDG: cur"];
"1000323" -> "1000310"  [label="DDG: cur[1]"];
"1000339" -> "1000310"  [label="DDG: cur[0]"];
"1000345" -> "1000310"  [label="DDG: cur[1]"];
"1000310" -> "1000317"  [label="DDG: cur[3]"];
"1000310" -> "1000323"  [label="DDG: cur[3]"];
"1000310" -> "1000339"  [label="DDG: cur[3]"];
"1000310" -> "1000345"  [label="DDG: cur[3]"];
"1000310" -> "1000373"  [label="DDG: cur[3]"];
"1000310" -> "1000374"  [label="DDG: cur[3]"];
"1000310" -> "1000384"  [label="DDG: cur[3]"];
"1000299" -> "1000298"  [label="AST: "];
"1000299" -> "1000301"  [label="CFG: "];
"1000300" -> "1000299"  [label="AST: "];
"1000301" -> "1000299"  [label="AST: "];
"1000302" -> "1000299"  [label="CFG: "];
"1000307" -> "1000299"  [label="CFG: "];
"1000299" -> "1000823"  [label="DDG: cur >= limit"];
"1000299" -> "1000823"  [label="DDG: limit"];
"1000299" -> "1000823"  [label="DDG: cur"];
"1000291" -> "1000299"  [label="DDG: cur"];
"1000323" -> "1000299"  [label="DDG: cur[1]"];
"1000339" -> "1000299"  [label="DDG: cur[0]"];
"1000345" -> "1000299"  [label="DDG: cur[1]"];
"1000305" -> "1000299"  [label="DDG: limit"];
"1000373" -> "1000299"  [label="DDG: limit"];
"1000197" -> "1000299"  [label="DDG: limit"];
"1000299" -> "1000305"  [label="DDG: cur"];
"1000299" -> "1000305"  [label="DDG: limit"];
"1000299" -> "1000306"  [label="DDG: cur"];
"1000299" -> "1000317"  [label="DDG: cur"];
"1000299" -> "1000323"  [label="DDG: cur"];
"1000299" -> "1000339"  [label="DDG: cur"];
"1000299" -> "1000345"  [label="DDG: cur"];
"1000299" -> "1000373"  [label="DDG: cur"];
"1000299" -> "1000374"  [label="DDG: cur"];
"1000299" -> "1000384"  [label="DDG: cur"];
"1000291" -> "1000286"  [label="AST: "];
"1000291" -> "1000293"  [label="CFG: "];
"1000292" -> "1000291"  [label="AST: "];
"1000293" -> "1000291"  [label="AST: "];
"1000300" -> "1000291"  [label="CFG: "];
"1000291" -> "1000823"  [label="DDG: parser->root.cursor"];
"1000323" -> "1000322"  [label="AST: "];
"1000323" -> "1000327"  [label="CFG: "];
"1000324" -> "1000323"  [label="AST: "];
"1000327" -> "1000323"  [label="AST: "];
"1000330" -> "1000323"  [label="CFG: "];
"1000322" -> "1000323"  [label="CFG: "];
"1000323" -> "1000823"  [label="DDG: cur[1]"];
"1000323" -> "1000305"  [label="DDG: cur[1]"];
"1000323" -> "1000306"  [label="DDG: cur[1]"];
"1000323" -> "1000317"  [label="DDG: cur[1]"];
"1000323" -> "1000322"  [label="DDG: cur[1]"];
"1000323" -> "1000322"  [label="DDG: 'e'"];
"1000345" -> "1000323"  [label="DDG: cur[1]"];
"1000339" -> "1000323"  [label="DDG: cur[0]"];
"1000323" -> "1000339"  [label="DDG: cur[1]"];
"1000323" -> "1000345"  [label="DDG: cur[1]"];
"1000323" -> "1000373"  [label="DDG: cur[1]"];
"1000323" -> "1000374"  [label="DDG: cur[1]"];
"1000323" -> "1000384"  [label="DDG: cur[1]"];
"1000345" -> "1000344"  [label="AST: "];
"1000345" -> "1000349"  [label="CFG: "];
"1000346" -> "1000345"  [label="AST: "];
"1000349" -> "1000345"  [label="AST: "];
"1000352" -> "1000345"  [label="CFG: "];
"1000344" -> "1000345"  [label="CFG: "];
"1000345" -> "1000823"  [label="DDG: cur[1]"];
"1000345" -> "1000305"  [label="DDG: cur[1]"];
"1000345" -> "1000306"  [label="DDG: cur[1]"];
"1000345" -> "1000317"  [label="DDG: cur[1]"];
"1000345" -> "1000339"  [label="DDG: cur[1]"];
"1000345" -> "1000344"  [label="DDG: cur[1]"];
"1000345" -> "1000344"  [label="DDG: 'n'"];
"1000339" -> "1000345"  [label="DDG: cur[0]"];
"1000345" -> "1000373"  [label="DDG: cur[1]"];
"1000345" -> "1000374"  [label="DDG: cur[1]"];
"1000345" -> "1000384"  [label="DDG: cur[1]"];
"1000339" -> "1000338"  [label="AST: "];
"1000339" -> "1000343"  [label="CFG: "];
"1000340" -> "1000339"  [label="AST: "];
"1000343" -> "1000339"  [label="AST: "];
"1000347" -> "1000339"  [label="CFG: "];
"1000338" -> "1000339"  [label="CFG: "];
"1000339" -> "1000823"  [label="DDG: cur[0]"];
"1000339" -> "1000305"  [label="DDG: cur[0]"];
"1000339" -> "1000306"  [label="DDG: cur[0]"];
"1000339" -> "1000317"  [label="DDG: cur[0]"];
"1000339" -> "1000338"  [label="DDG: cur[0]"];
"1000339" -> "1000338"  [label="DDG: 'e'"];
"1000317" -> "1000339"  [label="DDG: cur[0]"];
"1000433" -> "1000339"  [label="DDG: *cur"];
"1000366" -> "1000339"  [label="DDG: *cur"];
"1000339" -> "1000366"  [label="DDG: cur[0]"];
"1000339" -> "1000373"  [label="DDG: cur[0]"];
"1000339" -> "1000374"  [label="DDG: cur[0]"];
"1000339" -> "1000384"  [label="DDG: cur[0]"];
"1000339" -> "1000433"  [label="DDG: cur[0]"];
"1000317" -> "1000316"  [label="AST: "];
"1000317" -> "1000321"  [label="CFG: "];
"1000318" -> "1000317"  [label="AST: "];
"1000321" -> "1000317"  [label="AST: "];
"1000325" -> "1000317"  [label="CFG: "];
"1000316" -> "1000317"  [label="CFG: "];
"1000317" -> "1000823"  [label="DDG: cur[0]"];
"1000317" -> "1000316"  [label="DDG: cur[0]"];
"1000317" -> "1000316"  [label="DDG: 'd'"];
"1000433" -> "1000317"  [label="DDG: *cur"];
"1000366" -> "1000317"  [label="DDG: *cur"];
"1000433" -> "1000432"  [label="AST: "];
"1000433" -> "1000436"  [label="CFG: "];
"1000434" -> "1000433"  [label="AST: "];
"1000436" -> "1000433"  [label="AST: "];
"1000439" -> "1000433"  [label="CFG: "];
"1000432" -> "1000433"  [label="CFG: "];
"1000433" -> "1000823"  [label="DDG: *cur"];
"1000433" -> "1000366"  [label="DDG: *cur"];
"1000433" -> "1000432"  [label="DDG: *cur"];
"1000433" -> "1000432"  [label="DDG: '.'"];
"1000366" -> "1000433"  [label="DDG: *cur"];
"1000366" -> "1000365"  [label="AST: "];
"1000366" -> "1000369"  [label="CFG: "];
"1000367" -> "1000366"  [label="AST: "];
"1000369" -> "1000366"  [label="AST: "];
"1000290" -> "1000366"  [label="CFG: "];
"1000375" -> "1000366"  [label="CFG: "];
"1000366" -> "1000823"  [label="DDG: *cur"];
"1000366" -> "1000823"  [label="DDG: *cur == '/'"];
"1000305" -> "1000304"  [label="AST: "];
"1000305" -> "1000309"  [label="CFG: "];
"1000306" -> "1000305"  [label="AST: "];
"1000309" -> "1000305"  [label="AST: "];
"1000312" -> "1000305"  [label="CFG: "];
"1000304" -> "1000305"  [label="CFG: "];
"1000305" -> "1000823"  [label="DDG: limit"];
"1000305" -> "1000823"  [label="DDG: cur + 3"];
"1000305" -> "1000304"  [label="DDG: cur + 3"];
"1000305" -> "1000304"  [label="DDG: limit"];
"1000305" -> "1000373"  [label="DDG: limit"];
"1000373" -> "1000372"  [label="AST: "];
"1000373" -> "1000377"  [label="CFG: "];
"1000374" -> "1000373"  [label="AST: "];
"1000377" -> "1000373"  [label="AST: "];
"1000380" -> "1000373"  [label="CFG: "];
"1000385" -> "1000373"  [label="CFG: "];
"1000373" -> "1000823"  [label="DDG: limit"];
"1000373" -> "1000823"  [label="DDG: cur + 1 >= limit"];
"1000373" -> "1000823"  [label="DDG: cur + 1"];
"1000197" -> "1000149"  [label="AST: "];
"1000197" -> "1000199"  [label="CFG: "];
"1000198" -> "1000197"  [label="AST: "];
"1000199" -> "1000197"  [label="AST: "];
"1000208" -> "1000197"  [label="CFG: "];
"1000197" -> "1000823"  [label="DDG: parser->root.limit"];
"1000197" -> "1000823"  [label="DDG: limit"];
"1000384" -> "1000370"  [label="AST: "];
"1000384" -> "1000385"  [label="CFG: "];
"1000385" -> "1000384"  [label="AST: "];
"1000387" -> "1000384"  [label="CFG: "];
"1000386" -> "1000370"  [label="AST: "];
"1000387" -> "1000386"  [label="AST: "];
"1000398" -> "1000386"  [label="CFG: "];
"1000386" -> "1000823"  [label="DDG: parser->root.cursor - cur"];
"1000386" -> "1000823"  [label="DDG: len"];
"1000386" -> "1000416"  [label="DDG: len"];
"1000449" -> "1000448"  [label="AST: "];
"1000449" -> "1000451"  [label="CFG: "];
"1000450" -> "1000449"  [label="AST: "];
"1000451" -> "1000449"  [label="AST: "];
"1000453" -> "1000449"  [label="CFG: "];
"1000449" -> "1000823"  [label="DDG: notdef_index"];
"1000449" -> "1000823"  [label="DDG: n"];
"1000207" -> "1000149"  [label="AST: "];
"1000207" -> "1000209"  [label="CFG: "];
"1000208" -> "1000207"  [label="AST: "];
"1000209" -> "1000207"  [label="AST: "];
"1000212" -> "1000207"  [label="CFG: "];
"1000207" -> "1000823"  [label="DDG: notdef_index"];
"1000631" -> "1000558"  [label="AST: "];
"1000632" -> "1000631"  [label="AST: "];
"1000647" -> "1000631"  [label="CFG: "];
"1000631" -> "1000823"  [label="DDG: T1_Add_Table( name_table, notdef_index,\n                            swap_table->elements[0],\n                            swap_table->lengths [0] )"];
"1000631" -> "1000816"  [label="DDG: error"];
"1000816" -> "1000149"  [label="AST: "];
"1000816" -> "1000822"  [label="CFG: "];
"1000817" -> "1000816"  [label="AST: "];
"1000822" -> "1000816"  [label="AST: "];
"1000823" -> "1000816"  [label="CFG: "];
"1000816" -> "1000823"  [label="DDG: parser->root.error"];
"1000816" -> "1000823"  [label="DDG: error"];
"1000559" -> "1000816"  [label="DDG: error"];
"1000667" -> "1000816"  [label="DDG: error"];
"1000225" -> "1000816"  [label="DDG: error"];
"1000273" -> "1000816"  [label="DDG: error"];
"1000685" -> "1000816"  [label="DDG: error"];
"1000773" -> "1000816"  [label="DDG: error"];
"1000717" -> "1000816"  [label="DDG: error"];
"1000260" -> "1000816"  [label="DDG: error"];
"1000735" -> "1000816"  [label="DDG: error"];
"1000484" -> "1000816"  [label="DDG: error"];
"1000613" -> "1000816"  [label="DDG: error"];
"1000247" -> "1000816"  [label="DDG: error"];
"1000791" -> "1000816"  [label="DDG: error"];
"1000753" -> "1000816"  [label="DDG: error"];
"1000649" -> "1000816"  [label="DDG: error"];
"1000410" -> "1000816"  [label="DDG: error"];
"1000379" -> "1000816"  [label="DDG: error"];
"1000595" -> "1000816"  [label="DDG: error"];
"1000577" -> "1000816"  [label="DDG: error"];
"1000529" -> "1000816"  [label="DDG: error"];
"1000763" -> "1000816"  [label="DDG: error"];
"1000511" -> "1000816"  [label="DDG: error"];
"1000651" -> "1000649"  [label="AST: "];
"1000651" -> "1000659"  [label="CFG: "];
"1000652" -> "1000651"  [label="AST: "];
"1000653" -> "1000651"  [label="AST: "];
"1000654" -> "1000651"  [label="AST: "];
"1000659" -> "1000651"  [label="AST: "];
"1000649" -> "1000651"  [label="CFG: "];
"1000651" -> "1000823"  [label="DDG: code_table"];
"1000651" -> "1000823"  [label="DDG: notdef_index"];
"1000651" -> "1000823"  [label="DDG: swap_table->lengths [1]"];
"1000651" -> "1000823"  [label="DDG: swap_table->elements[1]"];
"1000651" -> "1000649"  [label="DDG: code_table"];
"1000651" -> "1000649"  [label="DDG: notdef_index"];
"1000651" -> "1000649"  [label="DDG: swap_table->elements[1]"];
"1000651" -> "1000649"  [label="DDG: swap_table->lengths [1]"];
"1000651" -> "1000687"  [label="DDG: code_table"];
"1000649" -> "1000558"  [label="AST: "];
"1000650" -> "1000649"  [label="AST: "];
"1000665" -> "1000649"  [label="CFG: "];
"1000649" -> "1000823"  [label="DDG: T1_Add_Table( code_table, notdef_index,\n                            swap_table->elements[1],\n                            swap_table->lengths [1] )"];
"1000687" -> "1000685"  [label="AST: "];
"1000687" -> "1000695"  [label="CFG: "];
"1000688" -> "1000687"  [label="AST: "];
"1000689" -> "1000687"  [label="AST: "];
"1000690" -> "1000687"  [label="AST: "];
"1000695" -> "1000687"  [label="AST: "];
"1000685" -> "1000687"  [label="CFG: "];
"1000687" -> "1000823"  [label="DDG: swap_table->lengths [3]"];
"1000687" -> "1000823"  [label="DDG: swap_table->elements[3]"];
"1000687" -> "1000823"  [label="DDG: code_table"];
"1000687" -> "1000685"  [label="DDG: code_table"];
"1000687" -> "1000685"  [label="DDG: 0"];
"1000687" -> "1000685"  [label="DDG: swap_table->elements[3]"];
"1000687" -> "1000685"  [label="DDG: swap_table->lengths [3]"];
"1000685" -> "1000558"  [label="AST: "];
"1000686" -> "1000685"  [label="AST: "];
"1000701" -> "1000685"  [label="CFG: "];
"1000685" -> "1000823"  [label="DDG: T1_Add_Table( code_table, 0,\n                            swap_table->elements[3],\n                            swap_table->lengths [3] )"];
"1000685" -> "1000823"  [label="DDG: error"];
"1000669" -> "1000667"  [label="AST: "];
"1000669" -> "1000677"  [label="CFG: "];
"1000670" -> "1000669"  [label="AST: "];
"1000671" -> "1000669"  [label="AST: "];
"1000672" -> "1000669"  [label="AST: "];
"1000677" -> "1000669"  [label="AST: "];
"1000667" -> "1000669"  [label="CFG: "];
"1000669" -> "1000823"  [label="DDG: swap_table->lengths [2]"];
"1000669" -> "1000823"  [label="DDG: swap_table->elements[2]"];
"1000669" -> "1000823"  [label="DDG: name_table"];
"1000669" -> "1000667"  [label="DDG: name_table"];
"1000669" -> "1000667"  [label="DDG: 0"];
"1000669" -> "1000667"  [label="DDG: swap_table->elements[2]"];
"1000669" -> "1000667"  [label="DDG: swap_table->lengths [2]"];
"1000667" -> "1000558"  [label="AST: "];
"1000668" -> "1000667"  [label="AST: "];
"1000683" -> "1000667"  [label="CFG: "];
"1000667" -> "1000823"  [label="DDG: T1_Add_Table( name_table, 0,\n                            swap_table->elements[2],\n                            swap_table->lengths [2] )"];
}
