digraph "0_savannah_dd89710f0f643eb0f99a3830e0712d26c7642acd@pointer" {
"1000712" [label="(Call,*    notdef_name    = (char *)\".notdef\")"];
"1000714" [label="(Call,(char *)\".notdef\")"];
"1000755" [label="(Call,T1_Add_Table( name_table, 0, notdef_name, 8 ))"];
"1000753" [label="(Call,error = T1_Add_Table( name_table, 0, notdef_name, 8 ))"];
"1000816" [label="(Call,parser->root.error = error)"];
"1000775" [label="(Call,T1_Add_Table( name_table, n,\n                            swap_table->elements[0],\n                            swap_table->lengths [0] ))"];
"1000773" [label="(Call,error = T1_Add_Table( name_table, n,\n                            swap_table->elements[0],\n                            swap_table->lengths [0] ))"];
"1000793" [label="(Call,T1_Add_Table( code_table, n,\n                            swap_table->elements[1],\n                            swap_table->lengths [1] ))"];
"1000791" [label="(Call,error = T1_Add_Table( code_table, n,\n                            swap_table->elements[1],\n                            swap_table->lengths [1] ))"];
"1000714" [label="(Call,(char *)\".notdef\")"];
"1000262" [label="(Call,psaux->ps_table_funcs->init(\n                name_table, num_glyphs + 1 + TABLE_EXTEND, memory ))"];
"1000716" [label="(Literal,\".notdef\")"];
"1000759" [label="(Literal,8)"];
"1000412" [label="(Call,T1_Add_Table( name_table, n, cur, len + 1 ))"];
"1000685" [label="(Call,error = T1_Add_Table( code_table, 0,\n                            swap_table->elements[3],\n                            swap_table->lengths [3] ))"];
"1000816" [label="(Call,parser->root.error = error)"];
"1000282" [label="(Call,n = 0)"];
"1000765" [label="(Call,T1_Add_Table( code_table, 0, notdef_glyph, 5 ))"];
"1000707" [label="(Block,)"];
"1000776" [label="(Identifier,name_table)"];
"1000793" [label="(Call,T1_Add_Table( code_table, n,\n                            swap_table->elements[1],\n                            swap_table->lengths [1] ))"];
"1000777" [label="(Identifier,n)"];
"1000718" [label="(Identifier,error)"];
"1000484" [label="(Call,error = FT_THROW( Invalid_File_Format ))"];
"1000789" [label="(Identifier,error)"];
"1000792" [label="(Identifier,error)"];
"1000712" [label="(Call,*    notdef_name    = (char *)\".notdef\")"];
"1000667" [label="(Call,error = T1_Add_Table( name_table, 0,\n                            swap_table->elements[2],\n                            swap_table->lengths [2] ))"];
"1000273" [label="(Call,error = psaux->ps_table_funcs->init( swap_table, 4, memory ))"];
"1000649" [label="(Call,error = T1_Add_Table( code_table, notdef_index,\n                            swap_table->elements[1],\n                            swap_table->lengths [1] ))"];
"1000761" [label="(Identifier,error)"];
"1000753" [label="(Call,error = T1_Add_Table( name_table, 0, notdef_name, 8 ))"];
"1000260" [label="(Call,error = psaux->ps_table_funcs->init(\n                name_table, num_glyphs + 1 + TABLE_EXTEND, memory ))"];
"1000783" [label="(Call,swap_table->lengths [0])"];
"1000778" [label="(Call,swap_table->elements[0])"];
"1000631" [label="(Call,error = T1_Add_Table( name_table, notdef_index,\n                            swap_table->elements[0],\n                            swap_table->lengths [0] ))"];
"1000801" [label="(Call,swap_table->lengths [1])"];
"1000529" [label="(Call,error = T1_Add_Table( code_table, n, base, size ))"];
"1000794" [label="(Identifier,code_table)"];
"1000758" [label="(Identifier,notdef_name)"];
"1000763" [label="(Call,error = T1_Add_Table( code_table, 0, notdef_glyph, 5 ))"];
"1000595" [label="(Call,error = T1_Add_Table( swap_table, 2,\n                            name_table->elements[notdef_index],\n                            name_table->lengths [notdef_index] ))"];
"1000511" [label="(Call,error = T1_Add_Table( code_table, n,\n                                temp + face->type1.private_dict.lenIV, size ))"];
"1000795" [label="(Identifier,n)"];
"1000757" [label="(Literal,0)"];
"1000149" [label="(Block,)"];
"1000539" [label="(Call,n++)"];
"1000823" [label="(MethodReturn,RET)"];
"1000807" [label="(Identifier,error)"];
"1000822" [label="(Identifier,error)"];
"1000717" [label="(Call,error = T1_Add_Table( swap_table, 0,\n                            name_table->elements[0],\n                            name_table->lengths [0] ))"];
"1000559" [label="(Call,error = T1_Add_Table( swap_table, 0,\n                            name_table->elements[0],\n                            name_table->lengths [0] ))"];
"1000755" [label="(Call,T1_Add_Table( name_table, 0, notdef_name, 8 ))"];
"1000247" [label="(Call,error = psaux->ps_table_funcs->init(\n                code_table, num_glyphs + 1 + TABLE_EXTEND, memory ))"];
"1000165" [label="(Call,name_table   = &loader->glyph_names)"];
"1000754" [label="(Identifier,error)"];
"1000225" [label="(Call,error = FT_THROW( Invalid_File_Format ))"];
"1000735" [label="(Call,error = T1_Add_Table( swap_table, 1,\n                            code_table->elements[0],\n                            code_table->lengths [0] ))"];
"1000775" [label="(Call,T1_Add_Table( name_table, n,\n                            swap_table->elements[0],\n                            swap_table->lengths [0] ))"];
"1000817" [label="(Call,parser->root.error)"];
"1000379" [label="(Call,error = FT_THROW( Invalid_File_Format ))"];
"1000713" [label="(Identifier,notdef_name)"];
"1000774" [label="(Identifier,error)"];
"1000410" [label="(Call,error = T1_Add_Table( name_table, n, cur, len + 1 ))"];
"1000613" [label="(Call,error = T1_Add_Table( swap_table, 3,\n                            code_table->elements[notdef_index],\n                            code_table->lengths [notdef_index] ))"];
"1000796" [label="(Call,swap_table->elements[1])"];
"1000577" [label="(Call,error = T1_Add_Table( swap_table, 1,\n                            code_table->elements[0],\n                            code_table->lengths [0] ))"];
"1000756" [label="(Identifier,name_table)"];
"1000791" [label="(Call,error = T1_Add_Table( code_table, n,\n                            swap_table->elements[1],\n                            swap_table->lengths [1] ))"];
"1000773" [label="(Call,error = T1_Add_Table( name_table, n,\n                            swap_table->elements[0],\n                            swap_table->lengths [0] ))"];
"1000712" -> "1000707"  [label="AST: "];
"1000712" -> "1000714"  [label="CFG: "];
"1000713" -> "1000712"  [label="AST: "];
"1000714" -> "1000712"  [label="AST: "];
"1000718" -> "1000712"  [label="CFG: "];
"1000712" -> "1000823"  [label="DDG: "];
"1000712" -> "1000823"  [label="DDG: "];
"1000714" -> "1000712"  [label="DDG: "];
"1000712" -> "1000755"  [label="DDG: "];
"1000714" -> "1000716"  [label="CFG: "];
"1000715" -> "1000714"  [label="AST: "];
"1000716" -> "1000714"  [label="AST: "];
"1000755" -> "1000753"  [label="AST: "];
"1000755" -> "1000759"  [label="CFG: "];
"1000756" -> "1000755"  [label="AST: "];
"1000757" -> "1000755"  [label="AST: "];
"1000758" -> "1000755"  [label="AST: "];
"1000759" -> "1000755"  [label="AST: "];
"1000753" -> "1000755"  [label="CFG: "];
"1000755" -> "1000823"  [label="DDG: "];
"1000755" -> "1000823"  [label="DDG: "];
"1000755" -> "1000753"  [label="DDG: "];
"1000755" -> "1000753"  [label="DDG: "];
"1000755" -> "1000753"  [label="DDG: "];
"1000755" -> "1000753"  [label="DDG: "];
"1000165" -> "1000755"  [label="DDG: "];
"1000262" -> "1000755"  [label="DDG: "];
"1000412" -> "1000755"  [label="DDG: "];
"1000755" -> "1000775"  [label="DDG: "];
"1000753" -> "1000707"  [label="AST: "];
"1000754" -> "1000753"  [label="AST: "];
"1000761" -> "1000753"  [label="CFG: "];
"1000753" -> "1000823"  [label="DDG: "];
"1000753" -> "1000816"  [label="DDG: "];
"1000816" -> "1000149"  [label="AST: "];
"1000816" -> "1000822"  [label="CFG: "];
"1000817" -> "1000816"  [label="AST: "];
"1000822" -> "1000816"  [label="AST: "];
"1000823" -> "1000816"  [label="CFG: "];
"1000816" -> "1000823"  [label="DDG: "];
"1000816" -> "1000823"  [label="DDG: "];
"1000559" -> "1000816"  [label="DDG: "];
"1000667" -> "1000816"  [label="DDG: "];
"1000225" -> "1000816"  [label="DDG: "];
"1000273" -> "1000816"  [label="DDG: "];
"1000685" -> "1000816"  [label="DDG: "];
"1000773" -> "1000816"  [label="DDG: "];
"1000717" -> "1000816"  [label="DDG: "];
"1000260" -> "1000816"  [label="DDG: "];
"1000735" -> "1000816"  [label="DDG: "];
"1000484" -> "1000816"  [label="DDG: "];
"1000613" -> "1000816"  [label="DDG: "];
"1000247" -> "1000816"  [label="DDG: "];
"1000791" -> "1000816"  [label="DDG: "];
"1000649" -> "1000816"  [label="DDG: "];
"1000410" -> "1000816"  [label="DDG: "];
"1000631" -> "1000816"  [label="DDG: "];
"1000379" -> "1000816"  [label="DDG: "];
"1000595" -> "1000816"  [label="DDG: "];
"1000577" -> "1000816"  [label="DDG: "];
"1000529" -> "1000816"  [label="DDG: "];
"1000763" -> "1000816"  [label="DDG: "];
"1000511" -> "1000816"  [label="DDG: "];
"1000775" -> "1000773"  [label="AST: "];
"1000775" -> "1000783"  [label="CFG: "];
"1000776" -> "1000775"  [label="AST: "];
"1000777" -> "1000775"  [label="AST: "];
"1000778" -> "1000775"  [label="AST: "];
"1000783" -> "1000775"  [label="AST: "];
"1000773" -> "1000775"  [label="CFG: "];
"1000775" -> "1000823"  [label="DDG: "];
"1000775" -> "1000823"  [label="DDG: "];
"1000775" -> "1000823"  [label="DDG: "];
"1000775" -> "1000823"  [label="DDG: "];
"1000775" -> "1000773"  [label="DDG: "];
"1000775" -> "1000773"  [label="DDG: "];
"1000775" -> "1000773"  [label="DDG: "];
"1000775" -> "1000773"  [label="DDG: "];
"1000539" -> "1000775"  [label="DDG: "];
"1000282" -> "1000775"  [label="DDG: "];
"1000775" -> "1000793"  [label="DDG: "];
"1000773" -> "1000707"  [label="AST: "];
"1000774" -> "1000773"  [label="AST: "];
"1000789" -> "1000773"  [label="CFG: "];
"1000773" -> "1000823"  [label="DDG: "];
"1000793" -> "1000791"  [label="AST: "];
"1000793" -> "1000801"  [label="CFG: "];
"1000794" -> "1000793"  [label="AST: "];
"1000795" -> "1000793"  [label="AST: "];
"1000796" -> "1000793"  [label="AST: "];
"1000801" -> "1000793"  [label="AST: "];
"1000791" -> "1000793"  [label="CFG: "];
"1000793" -> "1000823"  [label="DDG: "];
"1000793" -> "1000823"  [label="DDG: "];
"1000793" -> "1000823"  [label="DDG: "];
"1000793" -> "1000823"  [label="DDG: "];
"1000793" -> "1000791"  [label="DDG: "];
"1000793" -> "1000791"  [label="DDG: "];
"1000793" -> "1000791"  [label="DDG: "];
"1000793" -> "1000791"  [label="DDG: "];
"1000765" -> "1000793"  [label="DDG: "];
"1000791" -> "1000707"  [label="AST: "];
"1000792" -> "1000791"  [label="AST: "];
"1000807" -> "1000791"  [label="CFG: "];
"1000791" -> "1000823"  [label="DDG: "];
"1000791" -> "1000823"  [label="DDG: "];
}
