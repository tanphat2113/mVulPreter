digraph "0_linux_979d63d50c0c0f7bc537bf821e056cc9fe5abd38_0@array" {
"1000518" [label="(Call,print_verifier_state(env, this_branch->frame[this_branch->curframe]))"];
"1000497" [label="(Call,is_pointer_value(env, insn->dst_reg))"];
"1000278" [label="(Call,push_stack(env, *insn_idx + insn->off + 1, *insn_idx))"];
"1000220" [label="(Call,check_reg_arg(env, insn->dst_reg, SRC_OP))"];
"1000188" [label="(Call,is_pointer_value(env, insn->src_reg))"];
"1000177" [label="(Call,check_reg_arg(env, insn->src_reg, SRC_OP))"];
"1000109" [label="(MethodParameterIn,struct bpf_verifier_env *env)"];
"1000512" [label="(ControlStructure,if (env->log.level))"];
"1000179" [label="(Call,insn->src_reg)"];
"1000169" [label="(Call,verbose(env, \"BPF_JMP uses reserved fields\n\"))"];
"1000529" [label="(MethodReturn,static int)"];
"1000276" [label="(Call,other_branch = push_stack(env, *insn_idx + insn->off + 1, *insn_idx))"];
"1000221" [label="(Identifier,env)"];
"1000528" [label="(Literal,0)"];
"1000219" [label="(Identifier,err)"];
"1000189" [label="(Identifier,env)"];
"1000175" [label="(Call,err = check_reg_arg(env, insn->src_reg, SRC_OP))"];
"1000497" [label="(Call,is_pointer_value(env, insn->dst_reg))"];
"1000194" [label="(Call,verbose(env, \"R%d pointer comparison prohibited\n\",\n\t\t\t\tinsn->src_reg))"];
"1000220" [label="(Call,check_reg_arg(env, insn->dst_reg, SRC_OP))"];
"1000190" [label="(Call,insn->src_reg)"];
"1000195" [label="(Identifier,env)"];
"1000279" [label="(Identifier,env)"];
"1000484" [label="(Call,!try_match_pkt_pointers(insn, dst_reg, &regs[insn->src_reg],\n\t\t\t\t\t   this_branch, other_branch) &&\n\t\t   is_pointer_value(env, insn->dst_reg))"];
"1000520" [label="(Call,this_branch->frame[this_branch->curframe])"];
"1000188" [label="(Call,is_pointer_value(env, insn->src_reg))"];
"1000187" [label="(ControlStructure,if (is_pointer_value(env, insn->src_reg)))"];
"1000222" [label="(Call,insn->dst_reg)"];
"1000498" [label="(Identifier,env)"];
"1000212" [label="(Call,verbose(env, \"BPF_JMP uses reserved fields\n\"))"];
"1000109" [label="(MethodParameterIn,struct bpf_verifier_env *env)"];
"1000177" [label="(Call,check_reg_arg(env, insn->src_reg, SRC_OP))"];
"1000278" [label="(Call,push_stack(env, *insn_idx + insn->off + 1, *insn_idx))"];
"1000218" [label="(Call,err = check_reg_arg(env, insn->dst_reg, SRC_OP))"];
"1000225" [label="(Identifier,SRC_OP)"];
"1000519" [label="(Identifier,env)"];
"1000147" [label="(Call,verbose(env, \"invalid BPF_JMP opcode %x\n\", opcode))"];
"1000503" [label="(Call,verbose(env, \"R%d pointer comparison prohibited\n\",\n\t\t\tinsn->dst_reg))"];
"1000518" [label="(Call,print_verifier_state(env, this_branch->frame[this_branch->curframe]))"];
"1000499" [label="(Call,insn->dst_reg)"];
"1000178" [label="(Identifier,env)"];
"1000466" [label="(Call,mark_ptr_or_null_regs(this_branch, insn->dst_reg,\n\t\t\t\t      opcode == BPF_JNE))"];
"1000182" [label="(Identifier,SRC_OP)"];
"1000280" [label="(Call,*insn_idx + insn->off + 1)"];
"1000288" [label="(Call,*insn_idx)"];
"1000518" -> "1000512"  [label="AST: "];
"1000518" -> "1000520"  [label="CFG: "];
"1000519" -> "1000518"  [label="AST: "];
"1000520" -> "1000518"  [label="AST: "];
"1000528" -> "1000518"  [label="CFG: "];
"1000518" -> "1000529"  [label="DDG: this_branch->frame[this_branch->curframe]"];
"1000518" -> "1000529"  [label="DDG: env"];
"1000518" -> "1000529"  [label="DDG: print_verifier_state(env, this_branch->frame[this_branch->curframe])"];
"1000497" -> "1000518"  [label="DDG: env"];
"1000278" -> "1000518"  [label="DDG: env"];
"1000109" -> "1000518"  [label="DDG: env"];
"1000497" -> "1000484"  [label="AST: "];
"1000497" -> "1000499"  [label="CFG: "];
"1000498" -> "1000497"  [label="AST: "];
"1000499" -> "1000497"  [label="AST: "];
"1000484" -> "1000497"  [label="CFG: "];
"1000497" -> "1000529"  [label="DDG: env"];
"1000497" -> "1000529"  [label="DDG: insn->dst_reg"];
"1000497" -> "1000484"  [label="DDG: env"];
"1000497" -> "1000484"  [label="DDG: insn->dst_reg"];
"1000278" -> "1000497"  [label="DDG: env"];
"1000109" -> "1000497"  [label="DDG: env"];
"1000220" -> "1000497"  [label="DDG: insn->dst_reg"];
"1000497" -> "1000503"  [label="DDG: env"];
"1000497" -> "1000503"  [label="DDG: insn->dst_reg"];
"1000278" -> "1000276"  [label="AST: "];
"1000278" -> "1000288"  [label="CFG: "];
"1000279" -> "1000278"  [label="AST: "];
"1000280" -> "1000278"  [label="AST: "];
"1000288" -> "1000278"  [label="AST: "];
"1000276" -> "1000278"  [label="CFG: "];
"1000278" -> "1000529"  [label="DDG: *insn_idx + insn->off + 1"];
"1000278" -> "1000529"  [label="DDG: *insn_idx"];
"1000278" -> "1000529"  [label="DDG: env"];
"1000278" -> "1000276"  [label="DDG: env"];
"1000278" -> "1000276"  [label="DDG: *insn_idx + insn->off + 1"];
"1000278" -> "1000276"  [label="DDG: *insn_idx"];
"1000220" -> "1000278"  [label="DDG: env"];
"1000109" -> "1000278"  [label="DDG: env"];
"1000278" -> "1000503"  [label="DDG: env"];
"1000220" -> "1000218"  [label="AST: "];
"1000220" -> "1000225"  [label="CFG: "];
"1000221" -> "1000220"  [label="AST: "];
"1000222" -> "1000220"  [label="AST: "];
"1000225" -> "1000220"  [label="AST: "];
"1000218" -> "1000220"  [label="CFG: "];
"1000220" -> "1000529"  [label="DDG: SRC_OP"];
"1000220" -> "1000529"  [label="DDG: env"];
"1000220" -> "1000529"  [label="DDG: insn->dst_reg"];
"1000220" -> "1000218"  [label="DDG: env"];
"1000220" -> "1000218"  [label="DDG: insn->dst_reg"];
"1000220" -> "1000218"  [label="DDG: SRC_OP"];
"1000188" -> "1000220"  [label="DDG: env"];
"1000109" -> "1000220"  [label="DDG: env"];
"1000177" -> "1000220"  [label="DDG: SRC_OP"];
"1000220" -> "1000466"  [label="DDG: insn->dst_reg"];
"1000220" -> "1000503"  [label="DDG: insn->dst_reg"];
"1000188" -> "1000187"  [label="AST: "];
"1000188" -> "1000190"  [label="CFG: "];
"1000189" -> "1000188"  [label="AST: "];
"1000190" -> "1000188"  [label="AST: "];
"1000195" -> "1000188"  [label="CFG: "];
"1000219" -> "1000188"  [label="CFG: "];
"1000188" -> "1000529"  [label="DDG: is_pointer_value(env, insn->src_reg)"];
"1000188" -> "1000529"  [label="DDG: insn->src_reg"];
"1000177" -> "1000188"  [label="DDG: env"];
"1000177" -> "1000188"  [label="DDG: insn->src_reg"];
"1000109" -> "1000188"  [label="DDG: env"];
"1000188" -> "1000194"  [label="DDG: env"];
"1000188" -> "1000194"  [label="DDG: insn->src_reg"];
"1000177" -> "1000175"  [label="AST: "];
"1000177" -> "1000182"  [label="CFG: "];
"1000178" -> "1000177"  [label="AST: "];
"1000179" -> "1000177"  [label="AST: "];
"1000182" -> "1000177"  [label="AST: "];
"1000175" -> "1000177"  [label="CFG: "];
"1000177" -> "1000529"  [label="DDG: SRC_OP"];
"1000177" -> "1000529"  [label="DDG: env"];
"1000177" -> "1000529"  [label="DDG: insn->src_reg"];
"1000177" -> "1000175"  [label="DDG: env"];
"1000177" -> "1000175"  [label="DDG: insn->src_reg"];
"1000177" -> "1000175"  [label="DDG: SRC_OP"];
"1000109" -> "1000177"  [label="DDG: env"];
"1000109" -> "1000108"  [label="AST: "];
"1000109" -> "1000529"  [label="DDG: env"];
"1000109" -> "1000147"  [label="DDG: env"];
"1000109" -> "1000169"  [label="DDG: env"];
"1000109" -> "1000194"  [label="DDG: env"];
"1000109" -> "1000212"  [label="DDG: env"];
"1000109" -> "1000503"  [label="DDG: env"];
}
