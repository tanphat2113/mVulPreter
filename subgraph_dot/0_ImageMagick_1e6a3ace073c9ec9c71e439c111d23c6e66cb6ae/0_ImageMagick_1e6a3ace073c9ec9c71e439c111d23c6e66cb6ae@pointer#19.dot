digraph "0_ImageMagick_1e6a3ace073c9ec9c71e439c111d23c6e66cb6ae@pointer" {
"1000420" [label="(Call,r->sequence=(unsigned int) (sum & 0xffff) << 16)"];
"1000424" [label="(Call,(unsigned int) (sum & 0xffff) << 16)"];
"1000425" [label="(Call,(unsigned int) (sum & 0xffff))"];
"1000427" [label="(Call,sum & 0xffff)"];
"1000380" [label="(Call,sum & 0xff)"];
"1000297" [label="(Call,sum & 0xff)"];
"1000439" [label="(Call,sum & 0xff)"];
"1000242" [label="(Call,sum=0)"];
"1000683" [label="(Call,(sum & r->mask) != r->sequence)"];
"1000677" [label="(Call,(i < (ssize_t) length) && ((sum & r->mask) != r->sequence))"];
"1000424" [label="(Call,(unsigned int) (sum & 0xffff) << 16)"];
"1000381" [label="(Identifier,sum)"];
"1000244" [label="(Literal,0)"];
"1000246" [label="(Identifier,bits)"];
"1000296" [label="(Call,(sum & 0xff)+1)"];
"1000294" [label="(Call,length=(sum & 0xff)+1)"];
"1000699" [label="(Identifier,row)"];
"1000242" [label="(Call,sum=0)"];
"1000673" [label="(ControlStructure,for (i=0; ((i < (ssize_t) length) && ((sum & r->mask) != r->sequence)); i++))"];
"1000300" [label="(Literal,1)"];
"1000440" [label="(Identifier,sum)"];
"1000421" [label="(Call,r->sequence)"];
"1000370" [label="(Block,)"];
"1000439" [label="(Call,sum & 0xff)"];
"1000112" [label="(Block,)"];
"1000382" [label="(Literal,0xff)"];
"1000378" [label="(Call,(unsigned int) (sum & 0xff))"];
"1000297" [label="(Call,sum & 0xff)"];
"1000683" [label="(Call,(sum & r->mask) != r->sequence)"];
"1000425" [label="(Call,(unsigned int) (sum & 0xffff))"];
"1000298" [label="(Identifier,sum)"];
"1000689" [label="(Call,r->sequence)"];
"1000429" [label="(Literal,0xffff)"];
"1000427" [label="(Call,sum & 0xffff)"];
"1000489" [label="(Call,sum & 0x00fff000UL)"];
"1000437" [label="(Call,(unsigned char) (sum & 0xff))"];
"1000678" [label="(Call,i < (ssize_t) length)"];
"1000420" [label="(Call,r->sequence=(unsigned int) (sum & 0xffff) << 16)"];
"1000677" [label="(Call,(i < (ssize_t) length) && ((sum & r->mask) != r->sequence))"];
"1000823" [label="(MethodReturn,static MagickBooleanType)"];
"1000430" [label="(Literal,16)"];
"1000380" [label="(Call,sum & 0xff)"];
"1000695" [label="(Identifier,r)"];
"1000684" [label="(Call,sum & r->mask)"];
"1000432" [label="(Literal,8)"];
"1000243" [label="(Identifier,sum)"];
"1000299" [label="(Literal,0xff)"];
"1000428" [label="(Identifier,sum)"];
"1000441" [label="(Literal,0xff)"];
"1000420" -> "1000370"  [label="AST: "];
"1000420" -> "1000424"  [label="CFG: "];
"1000421" -> "1000420"  [label="AST: "];
"1000424" -> "1000420"  [label="AST: "];
"1000432" -> "1000420"  [label="CFG: "];
"1000420" -> "1000823"  [label="DDG: (unsigned int) (sum & 0xffff) << 16"];
"1000420" -> "1000823"  [label="DDG: r->sequence"];
"1000424" -> "1000420"  [label="DDG: (unsigned int) (sum & 0xffff)"];
"1000424" -> "1000420"  [label="DDG: 16"];
"1000420" -> "1000683"  [label="DDG: r->sequence"];
"1000424" -> "1000430"  [label="CFG: "];
"1000425" -> "1000424"  [label="AST: "];
"1000430" -> "1000424"  [label="AST: "];
"1000424" -> "1000823"  [label="DDG: (unsigned int) (sum & 0xffff)"];
"1000425" -> "1000424"  [label="DDG: sum & 0xffff"];
"1000425" -> "1000427"  [label="CFG: "];
"1000426" -> "1000425"  [label="AST: "];
"1000427" -> "1000425"  [label="AST: "];
"1000430" -> "1000425"  [label="CFG: "];
"1000425" -> "1000823"  [label="DDG: sum & 0xffff"];
"1000427" -> "1000425"  [label="DDG: sum"];
"1000427" -> "1000425"  [label="DDG: 0xffff"];
"1000427" -> "1000429"  [label="CFG: "];
"1000428" -> "1000427"  [label="AST: "];
"1000429" -> "1000427"  [label="AST: "];
"1000380" -> "1000427"  [label="DDG: sum"];
"1000427" -> "1000439"  [label="DDG: sum"];
"1000380" -> "1000378"  [label="AST: "];
"1000380" -> "1000382"  [label="CFG: "];
"1000381" -> "1000380"  [label="AST: "];
"1000382" -> "1000380"  [label="AST: "];
"1000378" -> "1000380"  [label="CFG: "];
"1000380" -> "1000823"  [label="DDG: sum"];
"1000380" -> "1000378"  [label="DDG: sum"];
"1000380" -> "1000378"  [label="DDG: 0xff"];
"1000297" -> "1000380"  [label="DDG: sum"];
"1000439" -> "1000380"  [label="DDG: sum"];
"1000297" -> "1000296"  [label="AST: "];
"1000297" -> "1000299"  [label="CFG: "];
"1000298" -> "1000297"  [label="AST: "];
"1000299" -> "1000297"  [label="AST: "];
"1000300" -> "1000297"  [label="CFG: "];
"1000297" -> "1000294"  [label="DDG: sum"];
"1000297" -> "1000294"  [label="DDG: 0xff"];
"1000297" -> "1000296"  [label="DDG: sum"];
"1000297" -> "1000296"  [label="DDG: 0xff"];
"1000439" -> "1000297"  [label="DDG: sum"];
"1000242" -> "1000297"  [label="DDG: sum"];
"1000297" -> "1000489"  [label="DDG: sum"];
"1000439" -> "1000437"  [label="AST: "];
"1000439" -> "1000441"  [label="CFG: "];
"1000440" -> "1000439"  [label="AST: "];
"1000441" -> "1000439"  [label="AST: "];
"1000437" -> "1000439"  [label="CFG: "];
"1000439" -> "1000437"  [label="DDG: sum"];
"1000439" -> "1000437"  [label="DDG: 0xff"];
"1000439" -> "1000489"  [label="DDG: sum"];
"1000242" -> "1000112"  [label="AST: "];
"1000242" -> "1000244"  [label="CFG: "];
"1000243" -> "1000242"  [label="AST: "];
"1000244" -> "1000242"  [label="AST: "];
"1000246" -> "1000242"  [label="CFG: "];
"1000242" -> "1000489"  [label="DDG: sum"];
"1000683" -> "1000677"  [label="AST: "];
"1000683" -> "1000689"  [label="CFG: "];
"1000684" -> "1000683"  [label="AST: "];
"1000689" -> "1000683"  [label="AST: "];
"1000677" -> "1000683"  [label="CFG: "];
"1000683" -> "1000823"  [label="DDG: sum & r->mask"];
"1000683" -> "1000823"  [label="DDG: r->sequence"];
"1000683" -> "1000677"  [label="DDG: sum & r->mask"];
"1000683" -> "1000677"  [label="DDG: r->sequence"];
"1000684" -> "1000683"  [label="DDG: sum"];
"1000684" -> "1000683"  [label="DDG: r->mask"];
"1000677" -> "1000673"  [label="AST: "];
"1000677" -> "1000678"  [label="CFG: "];
"1000678" -> "1000677"  [label="AST: "];
"1000695" -> "1000677"  [label="CFG: "];
"1000699" -> "1000677"  [label="CFG: "];
"1000677" -> "1000823"  [label="DDG: i < (ssize_t) length"];
"1000677" -> "1000823"  [label="DDG: (i < (ssize_t) length) && ((sum & r->mask) != r->sequence)"];
"1000677" -> "1000823"  [label="DDG: (sum & r->mask) != r->sequence"];
"1000678" -> "1000677"  [label="DDG: i"];
"1000678" -> "1000677"  [label="DDG: (ssize_t) length"];
}
