digraph "0_linux_a8b0ca17b80e92faab46ee7179ba9e99ccb61233_36@API" {
"1000567" [label="(Call,32*sizeof(u32))"];
"1000562" [label="(Call,memset(f->regs, 0, 32*sizeof(u32)))"];
"1000583" [label="(Call,memcpy(f->regs + freg, data, size * 4))"];
"1000584" [label="(Call,f->regs + freg)"];
"1000403" [label="(Call,get_user (data[0], (u32 __user *) addr))"];
"1000563" [label="(Call,f->regs)"];
"1000589" [label="(Identifier,data)"];
"1000559" [label="(Call,freg < 32)"];
"1000331" [label="(Block,)"];
"1000604" [label="(MethodReturn,int)"];
"1000590" [label="(Call,size * 4)"];
"1000562" [label="(Call,memset(f->regs, 0, 32*sizeof(u32)))"];
"1000425" [label="(Call,__get_user (data[i], (u32 __user *)(addr + 4*i)))"];
"1000558" [label="(ControlStructure,if (freg < 32))"];
"1000584" [label="(Call,f->regs + freg)"];
"1000585" [label="(Call,f->regs)"];
"1000396" [label="(Call,data[i] = 0)"];
"1000569" [label="(Call,sizeof(u32))"];
"1000583" [label="(Call,memcpy(f->regs + freg, data, size * 4))"];
"1000567" [label="(Call,32*sizeof(u32))"];
"1000164" [label="(Call,freg & 3)"];
"1000469" [label="(Call,data[0] = le32_to_cpup(data + 0))"];
"1000588" [label="(Identifier,freg)"];
"1000568" [label="(Literal,32)"];
"1000566" [label="(Literal,0)"];
"1000586" [label="(Identifier,f)"];
"1000596" [label="(Call,current_thread_info())"];
"1000567" -> "1000562"  [label="AST: "];
"1000567" -> "1000569"  [label="CFG: "];
"1000568" -> "1000567"  [label="AST: "];
"1000569" -> "1000567"  [label="AST: "];
"1000562" -> "1000567"  [label="CFG: "];
"1000567" -> "1000562"  [label="DDG: 32"];
"1000562" -> "1000558"  [label="AST: "];
"1000563" -> "1000562"  [label="AST: "];
"1000566" -> "1000562"  [label="AST: "];
"1000586" -> "1000562"  [label="CFG: "];
"1000562" -> "1000604"  [label="DDG: memset(f->regs, 0, 32*sizeof(u32))"];
"1000562" -> "1000604"  [label="DDG: 32*sizeof(u32)"];
"1000562" -> "1000583"  [label="DDG: f->regs"];
"1000562" -> "1000584"  [label="DDG: f->regs"];
"1000583" -> "1000331"  [label="AST: "];
"1000583" -> "1000590"  [label="CFG: "];
"1000584" -> "1000583"  [label="AST: "];
"1000589" -> "1000583"  [label="AST: "];
"1000590" -> "1000583"  [label="AST: "];
"1000596" -> "1000583"  [label="CFG: "];
"1000583" -> "1000604"  [label="DDG: data"];
"1000583" -> "1000604"  [label="DDG: size * 4"];
"1000583" -> "1000604"  [label="DDG: memcpy(f->regs + freg, data, size * 4)"];
"1000583" -> "1000604"  [label="DDG: f->regs + freg"];
"1000559" -> "1000583"  [label="DDG: freg"];
"1000164" -> "1000583"  [label="DDG: freg"];
"1000396" -> "1000583"  [label="DDG: data[i]"];
"1000403" -> "1000583"  [label="DDG: data[0]"];
"1000425" -> "1000583"  [label="DDG: data[i]"];
"1000469" -> "1000583"  [label="DDG: data[0]"];
"1000590" -> "1000583"  [label="DDG: size"];
"1000590" -> "1000583"  [label="DDG: 4"];
"1000584" -> "1000588"  [label="CFG: "];
"1000585" -> "1000584"  [label="AST: "];
"1000588" -> "1000584"  [label="AST: "];
"1000589" -> "1000584"  [label="CFG: "];
"1000584" -> "1000604"  [label="DDG: freg"];
"1000584" -> "1000604"  [label="DDG: f->regs"];
"1000559" -> "1000584"  [label="DDG: freg"];
"1000164" -> "1000584"  [label="DDG: freg"];
}
