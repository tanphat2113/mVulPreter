digraph "0_linux_ce683e5f9d045e5d67d1312a42b359cb2ab2a13c_1@pointer" {
"1000266" [label="(Call,*size += off)"];
"1000262" [label="(Call,off += xt_compat_target_offset(target))"];
"1000264" [label="(Call,xt_compat_target_offset(target))"];
"1000236" [label="(Call,IS_ERR(target))"];
"1000217" [label="(Call,target = xt_request_find_target(NFPROTO_IPV4, t->u.user.name,\n\t\t\t\t\tt->u.user.revision))"];
"1000219" [label="(Call,xt_request_find_target(NFPROTO_IPV4, t->u.user.name,\n\t\t\t\t\tt->u.user.revision))"];
"1000175" [label="(Call,off = sizeof(struct ipt_entry) - sizeof(struct compat_ipt_entry))"];
"1000219" [label="(Call,xt_request_find_target(NFPROTO_IPV4, t->u.user.name,\n\t\t\t\t\tt->u.user.revision))"];
"1000218" [label="(Identifier,target)"];
"1000253" [label="(Call,t->u.kernel.target = target)"];
"1000269" [label="(Identifier,off)"];
"1000217" [label="(Call,target = xt_request_find_target(NFPROTO_IPV4, t->u.user.name,\n\t\t\t\t\tt->u.user.revision))"];
"1000267" [label="(Call,*size)"];
"1000183" [label="(Identifier,entry_offset)"];
"1000175" [label="(Call,off = sizeof(struct ipt_entry) - sizeof(struct compat_ipt_entry))"];
"1000264" [label="(Call,xt_compat_target_offset(target))"];
"1000271" [label="(Identifier,ret)"];
"1000111" [label="(Block,)"];
"1000265" [label="(Identifier,target)"];
"1000268" [label="(Identifier,size)"];
"1000235" [label="(ControlStructure,if (IS_ERR(target)))"];
"1000266" [label="(Call,*size += off)"];
"1000262" [label="(Call,off += xt_compat_target_offset(target))"];
"1000263" [label="(Identifier,off)"];
"1000240" [label="(Literal,\"check_compat_entry_size_and_hooks: `%s' not found\n\")"];
"1000237" [label="(Identifier,target)"];
"1000220" [label="(Identifier,NFPROTO_IPV4)"];
"1000176" [label="(Identifier,off)"];
"1000236" [label="(Call,IS_ERR(target))"];
"1000228" [label="(Call,t->u.user.revision)"];
"1000272" [label="(Call,xt_compat_add_offset(AF_INET, entry_offset, off))"];
"1000375" [label="(MethodReturn,RET)"];
"1000177" [label="(Call,sizeof(struct ipt_entry) - sizeof(struct compat_ipt_entry))"];
"1000257" [label="(Identifier,t)"];
"1000250" [label="(Call,PTR_ERR(target))"];
"1000239" [label="(Call,duprintf(\"check_compat_entry_size_and_hooks: `%s' not found\n\",\n\t\t\t t->u.user.name))"];
"1000221" [label="(Call,t->u.user.name)"];
"1000266" -> "1000111"  [label="AST: "];
"1000266" -> "1000269"  [label="CFG: "];
"1000267" -> "1000266"  [label="AST: "];
"1000269" -> "1000266"  [label="AST: "];
"1000271" -> "1000266"  [label="CFG: "];
"1000266" -> "1000375"  [label="DDG: *size"];
"1000262" -> "1000266"  [label="DDG: off"];
"1000262" -> "1000111"  [label="AST: "];
"1000262" -> "1000264"  [label="CFG: "];
"1000263" -> "1000262"  [label="AST: "];
"1000264" -> "1000262"  [label="AST: "];
"1000268" -> "1000262"  [label="CFG: "];
"1000262" -> "1000375"  [label="DDG: xt_compat_target_offset(target)"];
"1000264" -> "1000262"  [label="DDG: target"];
"1000175" -> "1000262"  [label="DDG: off"];
"1000262" -> "1000272"  [label="DDG: off"];
"1000264" -> "1000265"  [label="CFG: "];
"1000265" -> "1000264"  [label="AST: "];
"1000264" -> "1000375"  [label="DDG: target"];
"1000236" -> "1000264"  [label="DDG: target"];
"1000236" -> "1000235"  [label="AST: "];
"1000236" -> "1000237"  [label="CFG: "];
"1000237" -> "1000236"  [label="AST: "];
"1000240" -> "1000236"  [label="CFG: "];
"1000257" -> "1000236"  [label="CFG: "];
"1000236" -> "1000375"  [label="DDG: IS_ERR(target)"];
"1000217" -> "1000236"  [label="DDG: target"];
"1000236" -> "1000250"  [label="DDG: target"];
"1000236" -> "1000253"  [label="DDG: target"];
"1000217" -> "1000111"  [label="AST: "];
"1000217" -> "1000219"  [label="CFG: "];
"1000218" -> "1000217"  [label="AST: "];
"1000219" -> "1000217"  [label="AST: "];
"1000237" -> "1000217"  [label="CFG: "];
"1000217" -> "1000375"  [label="DDG: xt_request_find_target(NFPROTO_IPV4, t->u.user.name,\n\t\t\t\t\tt->u.user.revision)"];
"1000219" -> "1000217"  [label="DDG: NFPROTO_IPV4"];
"1000219" -> "1000217"  [label="DDG: t->u.user.name"];
"1000219" -> "1000217"  [label="DDG: t->u.user.revision"];
"1000219" -> "1000228"  [label="CFG: "];
"1000220" -> "1000219"  [label="AST: "];
"1000221" -> "1000219"  [label="AST: "];
"1000228" -> "1000219"  [label="AST: "];
"1000219" -> "1000375"  [label="DDG: t->u.user.name"];
"1000219" -> "1000375"  [label="DDG: t->u.user.revision"];
"1000219" -> "1000375"  [label="DDG: NFPROTO_IPV4"];
"1000219" -> "1000239"  [label="DDG: t->u.user.name"];
"1000175" -> "1000111"  [label="AST: "];
"1000175" -> "1000177"  [label="CFG: "];
"1000176" -> "1000175"  [label="AST: "];
"1000177" -> "1000175"  [label="AST: "];
"1000183" -> "1000175"  [label="CFG: "];
"1000175" -> "1000375"  [label="DDG: off"];
"1000175" -> "1000375"  [label="DDG: sizeof(struct ipt_entry) - sizeof(struct compat_ipt_entry)"];
}
