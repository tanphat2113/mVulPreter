digraph "0_linux_b98b0bc8c431e3ceb4b26b0dfc8db509518fb290@API" {
"1000607" [label="(Call,copy_from_user(&fprog, optval, sizeof(fprog)))"];
"1000147" [label="(Call,(int __user *)optval)"];
"1000111" [label="(MethodParameterIn,char __user *optval)"];
"1000616" [label="(Call,sk_attach_filter(&fprog, sk))"];
"1000614" [label="(Call,ret = sk_attach_filter(&fprog, sk))"];
"1000888" [label="(Return,return ret;)"];
"1000886" [label="(Call,release_sock(sk))"];
"1000731" [label="(Call,sock_valbool_flag(sk, SOCK_FILTER_LOCKED, valbool))"];
"1000171" [label="(Call,ret = -EACCES)"];
"1000202" [label="(Call,ret = -ENOPROTOOPT)"];
"1000638" [label="(Call,copy_from_user(&ufd, optval, sizeof(ufd)))"];
"1000287" [label="(Call,ret = -EPERM)"];
"1000606" [label="(ControlStructure,if (copy_from_user(&fprog, optval, sizeof(fprog))))"];
"1000726" [label="(Call,ret = -EPERM)"];
"1000780" [label="(Call,sock_valbool_flag(sk, SOCK_WIFI_STATUS, valbool))"];
"1000159" [label="(Call,lock_sock(sk))"];
"1000242" [label="(Call,sk->sk_write_space(sk))"];
"1000608" [label="(Call,&fprog)"];
"1000645" [label="(Call,ret = sk_attach_bpf(ufd, sk))"];
"1000794" [label="(Call,sock->ops->set_peek_off(sk, val))"];
"1000611" [label="(Call,sizeof(fprog))"];
"1000647" [label="(Call,sk_attach_bpf(ufd, sk))"];
"1000668" [label="(Call,copy_from_user(&fprog, optval, sizeof(fprog)))"];
"1000890" [label="(MethodReturn,int)"];
"1000251" [label="(Call,ret = -EPERM)"];
"1000774" [label="(Call,sock_valbool_flag(sk, SOCK_RXQ_OVFL, valbool))"];
"1000836" [label="(Call,ret = -EINVAL)"];
"1000886" [label="(Call,release_sock(sk))"];
"1000758" [label="(Call,sock_net(sk))"];
"1000600" [label="(Block,)"];
"1000361" [label="(Call,ret = -EINVAL)"];
"1000124" [label="(Call,ret = 0)"];
"1000214" [label="(Call,sock_valbool_flag(sk, SOCK_BROADCAST, valbool))"];
"1000176" [label="(Call,sock_valbool_flag(sk, SOCK_DBG, valbool))"];
"1000478" [label="(Call,ret = -EINVAL)"];
"1000147" [label="(Call,(int __user *)optval)"];
"1000708" [label="(Call,sk_reuseport_attach_bpf(ufd, sk))"];
"1000349" [label="(Call,ret = -EPERM)"];
"1000877" [label="(Call,dst_negative_advice(sk))"];
"1000810" [label="(Call,sock_valbool_flag(sk, SOCK_SELECT_ERR_QUEUE, valbool))"];
"1000552" [label="(Call,sock_disable_timestamp(sk,\n\t\t\t\t\t       (1UL << SOCK_TIMESTAMPING_RX_SOFTWARE)))"];
"1000633" [label="(Call,ret = -EFAULT)"];
"1000548" [label="(Call,sock_enable_timestamp(sk,\n\t\t\t\t\t      SOCK_TIMESTAMPING_RX_SOFTWARE))"];
"1000762" [label="(Call,ret = -EPERM)"];
"1000713" [label="(Call,ret = sk_detach_filter(sk))"];
"1000367" [label="(Call,copy_from_user(&ling, optval, sizeof(ling)))"];
"1000610" [label="(Identifier,optval)"];
"1000416" [label="(Call,sock_set_flag(sk, SOCK_LINGER))"];
"1000384" [label="(Call,sock_reset_flag(sk, SOCK_LINGER))"];
"1000613" [label="(ControlStructure,break;)"];
"1000113" [label="(Block,)"];
"1000315" [label="(Call,sock_valbool_flag(sk, SOCK_URGINLINE, valbool))"];
"1000677" [label="(Call,sk_reuseport_attach_filter(&fprog, sk))"];
"1000887" [label="(Identifier,sk)"];
"1000309" [label="(Call,sock_valbool_flag(sk, SOCK_KEEPOPEN, valbool))"];
"1000622" [label="(Call,ret = -EINVAL)"];
"1000580" [label="(Call,ret = sock_set_timeout(&sk->sk_sndtimeo, optval, optlen))"];
"1000460" [label="(Call,sock_enable_timestamp(sk, SOCK_TIMESTAMP))"];
"1000826" [label="(Call,ret = -EPERM)"];
"1000339" [label="(Call,sock_net(sk))"];
"1000804" [label="(Call,sock_valbool_flag(sk, SOCK_NOFCS, valbool))"];
"1000699" [label="(Call,copy_from_user(&ufd, optval, sizeof(ufd)))"];
"1000706" [label="(Call,ret = sk_reuseport_attach_bpf(ufd, sk))"];
"1000607" [label="(Call,copy_from_user(&fprog, optval, sizeof(fprog)))"];
"1000617" [label="(Call,&fprog)"];
"1000619" [label="(Identifier,sk)"];
"1000132" [label="(Call,sock_setbindtodevice(sk, optval, optlen))"];
"1000889" [label="(Identifier,ret)"];
"1000792" [label="(Call,ret = sock->ops->set_peek_off(sk, val))"];
"1000798" [label="(Call,ret = -EOPNOTSUPP)"];
"1000111" [label="(MethodParameterIn,char __user *optval)"];
"1000145" [label="(Call,get_user(val, (int __user *)optval))"];
"1000881" [label="(Call,ret = -ENOPROTOOPT)"];
"1000614" [label="(Call,ret = sk_attach_filter(&fprog, sk))"];
"1000149" [label="(Identifier,optval)"];
"1000591" [label="(Call,ret = -EINVAL)"];
"1000616" [label="(Call,sk_attach_filter(&fprog, sk))"];
"1000602" [label="(Call,ret = -EFAULT)"];
"1000652" [label="(Call,ret = -EINVAL)"];
"1000519" [label="(Call,ret = -EINVAL)"];
"1000208" [label="(Call,sock_valbool_flag(sk, SOCK_LOCALROUTE, valbool))"];
"1000620" [label="(ControlStructure,break;)"];
"1000374" [label="(Call,ret = -EFAULT)"];
"1000571" [label="(Call,sock_set_timeout(&sk->sk_rcvtimeo, optval, optlen))"];
"1000721" [label="(Call,sock_flag(sk, SOCK_FILTER_LOCKED))"];
"1000663" [label="(Call,ret = -EFAULT)"];
"1000888" [label="(Return,return ret;)"];
"1000694" [label="(Call,ret = -EFAULT)"];
"1000468" [label="(Call,sock_reset_flag(sk, SOCK_RCVTSTAMPNS))"];
"1000615" [label="(Identifier,ret)"];
"1000683" [label="(Call,ret = -EINVAL)"];
"1000675" [label="(Call,ret = sk_reuseport_attach_filter(&fprog, sk))"];
"1000715" [label="(Call,sk_detach_filter(sk))"];
"1000582" [label="(Call,sock_set_timeout(&sk->sk_sndtimeo, optval, optlen))"];
"1000569" [label="(Call,ret = sock_set_timeout(&sk->sk_rcvtimeo, optval, optlen))"];
"1000607" -> "1000606"  [label="AST: "];
"1000607" -> "1000611"  [label="CFG: "];
"1000608" -> "1000607"  [label="AST: "];
"1000610" -> "1000607"  [label="AST: "];
"1000611" -> "1000607"  [label="AST: "];
"1000613" -> "1000607"  [label="CFG: "];
"1000615" -> "1000607"  [label="CFG: "];
"1000607" -> "1000890"  [label="DDG: copy_from_user(&fprog, optval, sizeof(fprog))"];
"1000607" -> "1000890"  [label="DDG: optval"];
"1000607" -> "1000890"  [label="DDG: &fprog"];
"1000147" -> "1000607"  [label="DDG: optval"];
"1000111" -> "1000607"  [label="DDG: optval"];
"1000607" -> "1000616"  [label="DDG: &fprog"];
"1000147" -> "1000145"  [label="AST: "];
"1000147" -> "1000149"  [label="CFG: "];
"1000148" -> "1000147"  [label="AST: "];
"1000149" -> "1000147"  [label="AST: "];
"1000145" -> "1000147"  [label="CFG: "];
"1000147" -> "1000890"  [label="DDG: optval"];
"1000147" -> "1000145"  [label="DDG: optval"];
"1000111" -> "1000147"  [label="DDG: optval"];
"1000147" -> "1000367"  [label="DDG: optval"];
"1000147" -> "1000571"  [label="DDG: optval"];
"1000147" -> "1000582"  [label="DDG: optval"];
"1000147" -> "1000638"  [label="DDG: optval"];
"1000147" -> "1000668"  [label="DDG: optval"];
"1000147" -> "1000699"  [label="DDG: optval"];
"1000111" -> "1000107"  [label="AST: "];
"1000111" -> "1000890"  [label="DDG: optval"];
"1000111" -> "1000132"  [label="DDG: optval"];
"1000111" -> "1000367"  [label="DDG: optval"];
"1000111" -> "1000571"  [label="DDG: optval"];
"1000111" -> "1000582"  [label="DDG: optval"];
"1000111" -> "1000638"  [label="DDG: optval"];
"1000111" -> "1000668"  [label="DDG: optval"];
"1000111" -> "1000699"  [label="DDG: optval"];
"1000616" -> "1000614"  [label="AST: "];
"1000616" -> "1000619"  [label="CFG: "];
"1000617" -> "1000616"  [label="AST: "];
"1000619" -> "1000616"  [label="AST: "];
"1000614" -> "1000616"  [label="CFG: "];
"1000616" -> "1000890"  [label="DDG: &fprog"];
"1000616" -> "1000614"  [label="DDG: &fprog"];
"1000616" -> "1000614"  [label="DDG: sk"];
"1000159" -> "1000616"  [label="DDG: sk"];
"1000616" -> "1000886"  [label="DDG: sk"];
"1000614" -> "1000600"  [label="AST: "];
"1000615" -> "1000614"  [label="AST: "];
"1000620" -> "1000614"  [label="CFG: "];
"1000614" -> "1000890"  [label="DDG: sk_attach_filter(&fprog, sk)"];
"1000614" -> "1000890"  [label="DDG: ret"];
"1000614" -> "1000888"  [label="DDG: ret"];
"1000888" -> "1000113"  [label="AST: "];
"1000888" -> "1000889"  [label="CFG: "];
"1000889" -> "1000888"  [label="AST: "];
"1000890" -> "1000888"  [label="CFG: "];
"1000888" -> "1000890"  [label="DDG: <RET>"];
"1000889" -> "1000888"  [label="DDG: ret"];
"1000713" -> "1000888"  [label="DDG: ret"];
"1000171" -> "1000888"  [label="DDG: ret"];
"1000519" -> "1000888"  [label="DDG: ret"];
"1000726" -> "1000888"  [label="DDG: ret"];
"1000569" -> "1000888"  [label="DDG: ret"];
"1000633" -> "1000888"  [label="DDG: ret"];
"1000836" -> "1000888"  [label="DDG: ret"];
"1000124" -> "1000888"  [label="DDG: ret"];
"1000694" -> "1000888"  [label="DDG: ret"];
"1000622" -> "1000888"  [label="DDG: ret"];
"1000683" -> "1000888"  [label="DDG: ret"];
"1000374" -> "1000888"  [label="DDG: ret"];
"1000675" -> "1000888"  [label="DDG: ret"];
"1000826" -> "1000888"  [label="DDG: ret"];
"1000645" -> "1000888"  [label="DDG: ret"];
"1000792" -> "1000888"  [label="DDG: ret"];
"1000663" -> "1000888"  [label="DDG: ret"];
"1000251" -> "1000888"  [label="DDG: ret"];
"1000591" -> "1000888"  [label="DDG: ret"];
"1000478" -> "1000888"  [label="DDG: ret"];
"1000798" -> "1000888"  [label="DDG: ret"];
"1000202" -> "1000888"  [label="DDG: ret"];
"1000652" -> "1000888"  [label="DDG: ret"];
"1000580" -> "1000888"  [label="DDG: ret"];
"1000349" -> "1000888"  [label="DDG: ret"];
"1000762" -> "1000888"  [label="DDG: ret"];
"1000881" -> "1000888"  [label="DDG: ret"];
"1000287" -> "1000888"  [label="DDG: ret"];
"1000361" -> "1000888"  [label="DDG: ret"];
"1000602" -> "1000888"  [label="DDG: ret"];
"1000706" -> "1000888"  [label="DDG: ret"];
"1000886" -> "1000113"  [label="AST: "];
"1000886" -> "1000887"  [label="CFG: "];
"1000887" -> "1000886"  [label="AST: "];
"1000889" -> "1000886"  [label="CFG: "];
"1000886" -> "1000890"  [label="DDG: release_sock(sk)"];
"1000886" -> "1000890"  [label="DDG: sk"];
"1000877" -> "1000886"  [label="DDG: sk"];
"1000208" -> "1000886"  [label="DDG: sk"];
"1000780" -> "1000886"  [label="DDG: sk"];
"1000677" -> "1000886"  [label="DDG: sk"];
"1000315" -> "1000886"  [label="DDG: sk"];
"1000159" -> "1000886"  [label="DDG: sk"];
"1000794" -> "1000886"  [label="DDG: sk"];
"1000758" -> "1000886"  [label="DDG: sk"];
"1000721" -> "1000886"  [label="DDG: sk"];
"1000731" -> "1000886"  [label="DDG: sk"];
"1000548" -> "1000886"  [label="DDG: sk"];
"1000309" -> "1000886"  [label="DDG: sk"];
"1000804" -> "1000886"  [label="DDG: sk"];
"1000460" -> "1000886"  [label="DDG: sk"];
"1000552" -> "1000886"  [label="DDG: sk"];
"1000715" -> "1000886"  [label="DDG: sk"];
"1000708" -> "1000886"  [label="DDG: sk"];
"1000468" -> "1000886"  [label="DDG: sk"];
"1000810" -> "1000886"  [label="DDG: sk"];
"1000647" -> "1000886"  [label="DDG: sk"];
"1000339" -> "1000886"  [label="DDG: sk"];
"1000416" -> "1000886"  [label="DDG: sk"];
"1000214" -> "1000886"  [label="DDG: sk"];
"1000176" -> "1000886"  [label="DDG: sk"];
"1000774" -> "1000886"  [label="DDG: sk"];
"1000242" -> "1000886"  [label="DDG: sk"];
"1000384" -> "1000886"  [label="DDG: sk"];
}
