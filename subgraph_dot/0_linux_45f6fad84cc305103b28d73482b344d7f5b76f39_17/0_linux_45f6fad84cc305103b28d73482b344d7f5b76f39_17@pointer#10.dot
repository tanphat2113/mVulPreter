digraph "0_linux_45f6fad84cc305103b28d73482b344d7f5b76f39_17@pointer" {
"1000348" [label="(Call,newsk->sk_v6_daddr = ireq->ir_v6_rmt_addr)"];
"1000542" [label="(Call,tcp_v6_md5_do_lookup(sk, &newsk->sk_v6_daddr))"];
"1000540" [label="(Call,key = tcp_v6_md5_do_lookup(sk, &newsk->sk_v6_daddr))"];
"1000553" [label="(Call,(union tcp_md5_addr *)&newsk->sk_v6_daddr)"];
"1000551" [label="(Call,tcp_md5_do_add(newsk, (union tcp_md5_addr *)&newsk->sk_v6_daddr,\n\t\t\t       AF_INET6, key->key, key->keylen,\n\t\t\t       sk_gfp_atomic(sk, GFP_ATOMIC)))"];
"1000571" [label="(Call,__inet_inherit_port(sk, newsk))"];
"1000570" [label="(Call,__inet_inherit_port(sk, newsk) < 0)"];
"1000576" [label="(Call,inet_csk_prepare_forced_close(newsk))"];
"1000578" [label="(Call,tcp_done(newsk))"];
"1000584" [label="(Call,inet_ehash_nolisten(newsk, req_to_sk(req_unhash)))"];
"1000581" [label="(Call,*own_req = inet_ehash_nolisten(newsk, req_to_sk(req_unhash)))"];
"1000624" [label="(Call,skb_set_owner_r(newnp->pktoptions, newsk))"];
"1000629" [label="(Return,return newsk;)"];
"1000608" [label="(Call,sk_gfp_atomic(sk, GFP_ATOMIC))"];
"1000604" [label="(Call,skb_clone(ireq->pktopts,\n\t\t\t\t\t\t      sk_gfp_atomic(sk, GFP_ATOMIC)))"];
"1000600" [label="(Call,newnp->pktoptions = skb_clone(ireq->pktopts,\n\t\t\t\t\t\t      sk_gfp_atomic(sk, GFP_ATOMIC)))"];
"1000611" [label="(Call,consume_skb(ireq->pktopts))"];
"1000641" [label="(Call,sock_net(sk))"];
"1000640" [label="(Call,NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_LISTENDROPS))"];
"1000566" [label="(Call,sk_gfp_atomic(sk, GFP_ATOMIC))"];
"1000646" [label="(MethodReturn,static struct sock *)"];
"1000542" [label="(Call,tcp_v6_md5_do_lookup(sk, &newsk->sk_v6_daddr))"];
"1000576" [label="(Call,inet_csk_prepare_forced_close(newsk))"];
"1000590" [label="(Identifier,own_req)"];
"1000117" [label="(Block,)"];
"1000610" [label="(Identifier,GFP_ATOMIC)"];
"1000549" [label="(Identifier,key)"];
"1000600" [label="(Call,newnp->pktoptions = skb_clone(ireq->pktopts,\n\t\t\t\t\t\t      sk_gfp_atomic(sk, GFP_ATOMIC)))"];
"1000612" [label="(Call,ireq->pktopts)"];
"1000569" [label="(ControlStructure,if (__inet_inherit_port(sk, newsk) < 0))"];
"1000579" [label="(Identifier,newsk)"];
"1000541" [label="(Identifier,key)"];
"1000357" [label="(Identifier,newnp)"];
"1000284" [label="(Call,inet6_csk_route_req(sk, &fl6, req, IPPROTO_TCP))"];
"1000560" [label="(Call,key->key)"];
"1000555" [label="(Call,&newsk->sk_v6_daddr)"];
"1000629" [label="(Return,return newsk;)"];
"1000613" [label="(Identifier,ireq)"];
"1000559" [label="(Identifier,AF_INET6)"];
"1000584" [label="(Call,inet_ehash_nolisten(newsk, req_to_sk(req_unhash)))"];
"1000633" [label="(Call,sock_net(sk))"];
"1000568" [label="(Identifier,GFP_ATOMIC)"];
"1000570" [label="(Call,__inet_inherit_port(sk, newsk) < 0)"];
"1000586" [label="(Call,req_to_sk(req_unhash))"];
"1000581" [label="(Call,*own_req = inet_ehash_nolisten(newsk, req_to_sk(req_unhash)))"];
"1000111" [label="(MethodParameterIn,const struct sock *sk)"];
"1000352" [label="(Call,ireq->ir_v6_rmt_addr)"];
"1000572" [label="(Identifier,sk)"];
"1000630" [label="(Identifier,newsk)"];
"1000543" [label="(Identifier,sk)"];
"1000575" [label="(Block,)"];
"1000563" [label="(Call,key->keylen)"];
"1000617" [label="(Identifier,ireq)"];
"1000642" [label="(Identifier,sk)"];
"1000524" [label="(Call,tcp_initialize_rcv_mss(newsk))"];
"1000520" [label="(Call,tcp_sk(sk))"];
"1000601" [label="(Call,newnp->pktoptions)"];
"1000580" [label="(ControlStructure,goto out;)"];
"1000645" [label="(Identifier,NULL)"];
"1000641" [label="(Call,sock_net(sk))"];
"1000544" [label="(Call,&newsk->sk_v6_daddr)"];
"1000349" [label="(Call,newsk->sk_v6_daddr)"];
"1000566" [label="(Call,sk_gfp_atomic(sk, GFP_ATOMIC))"];
"1000571" [label="(Call,__inet_inherit_port(sk, newsk))"];
"1000550" [label="(Block,)"];
"1000624" [label="(Call,skb_set_owner_r(newnp->pktoptions, newsk))"];
"1000625" [label="(Call,newnp->pktoptions)"];
"1000540" [label="(Call,key = tcp_v6_md5_do_lookup(sk, &newsk->sk_v6_daddr))"];
"1000628" [label="(Identifier,newsk)"];
"1000348" [label="(Call,newsk->sk_v6_daddr = ireq->ir_v6_rmt_addr)"];
"1000507" [label="(Call,tcp_sk(sk))"];
"1000609" [label="(Identifier,sk)"];
"1000640" [label="(Call,NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_LISTENDROPS))"];
"1000585" [label="(Identifier,newsk)"];
"1000567" [label="(Identifier,sk)"];
"1000574" [label="(Literal,0)"];
"1000578" [label="(Call,tcp_done(newsk))"];
"1000582" [label="(Call,*own_req)"];
"1000599" [label="(Block,)"];
"1000552" [label="(Identifier,newsk)"];
"1000573" [label="(Identifier,newsk)"];
"1000620" [label="(ControlStructure,if (newnp->pktoptions))"];
"1000611" [label="(Call,consume_skb(ireq->pktopts))"];
"1000500" [label="(Call,tcp_sk(sk))"];
"1000608" [label="(Call,sk_gfp_atomic(sk, GFP_ATOMIC))"];
"1000577" [label="(Identifier,newsk)"];
"1000643" [label="(Identifier,LINUX_MIB_LISTENDROPS)"];
"1000296" [label="(Call,tcp_create_openreq_child(sk, req, skb))"];
"1000583" [label="(Identifier,own_req)"];
"1000605" [label="(Call,ireq->pktopts)"];
"1000553" [label="(Call,(union tcp_md5_addr *)&newsk->sk_v6_daddr)"];
"1000604" [label="(Call,skb_clone(ireq->pktopts,\n\t\t\t\t\t\t      sk_gfp_atomic(sk, GFP_ATOMIC)))"];
"1000551" [label="(Call,tcp_md5_do_add(newsk, (union tcp_md5_addr *)&newsk->sk_v6_daddr,\n\t\t\t       AF_INET6, key->key, key->keylen,\n\t\t\t       sk_gfp_atomic(sk, GFP_ATOMIC)))"];
"1000348" -> "1000117"  [label="AST: "];
"1000348" -> "1000352"  [label="CFG: "];
"1000349" -> "1000348"  [label="AST: "];
"1000352" -> "1000348"  [label="AST: "];
"1000357" -> "1000348"  [label="CFG: "];
"1000348" -> "1000646"  [label="DDG: newsk->sk_v6_daddr"];
"1000348" -> "1000646"  [label="DDG: ireq->ir_v6_rmt_addr"];
"1000348" -> "1000542"  [label="DDG: newsk->sk_v6_daddr"];
"1000348" -> "1000553"  [label="DDG: newsk->sk_v6_daddr"];
"1000542" -> "1000540"  [label="AST: "];
"1000542" -> "1000544"  [label="CFG: "];
"1000543" -> "1000542"  [label="AST: "];
"1000544" -> "1000542"  [label="AST: "];
"1000540" -> "1000542"  [label="CFG: "];
"1000542" -> "1000646"  [label="DDG: &newsk->sk_v6_daddr"];
"1000542" -> "1000540"  [label="DDG: sk"];
"1000542" -> "1000540"  [label="DDG: &newsk->sk_v6_daddr"];
"1000500" -> "1000542"  [label="DDG: sk"];
"1000520" -> "1000542"  [label="DDG: sk"];
"1000507" -> "1000542"  [label="DDG: sk"];
"1000111" -> "1000542"  [label="DDG: sk"];
"1000542" -> "1000553"  [label="DDG: &newsk->sk_v6_daddr"];
"1000542" -> "1000566"  [label="DDG: sk"];
"1000542" -> "1000571"  [label="DDG: sk"];
"1000540" -> "1000117"  [label="AST: "];
"1000541" -> "1000540"  [label="AST: "];
"1000549" -> "1000540"  [label="CFG: "];
"1000540" -> "1000646"  [label="DDG: tcp_v6_md5_do_lookup(sk, &newsk->sk_v6_daddr)"];
"1000540" -> "1000646"  [label="DDG: key"];
"1000553" -> "1000551"  [label="AST: "];
"1000553" -> "1000555"  [label="CFG: "];
"1000554" -> "1000553"  [label="AST: "];
"1000555" -> "1000553"  [label="AST: "];
"1000559" -> "1000553"  [label="CFG: "];
"1000553" -> "1000646"  [label="DDG: &newsk->sk_v6_daddr"];
"1000553" -> "1000551"  [label="DDG: &newsk->sk_v6_daddr"];
"1000551" -> "1000550"  [label="AST: "];
"1000551" -> "1000566"  [label="CFG: "];
"1000552" -> "1000551"  [label="AST: "];
"1000559" -> "1000551"  [label="AST: "];
"1000560" -> "1000551"  [label="AST: "];
"1000563" -> "1000551"  [label="AST: "];
"1000566" -> "1000551"  [label="AST: "];
"1000572" -> "1000551"  [label="CFG: "];
"1000551" -> "1000646"  [label="DDG: (union tcp_md5_addr *)&newsk->sk_v6_daddr"];
"1000551" -> "1000646"  [label="DDG: key->key"];
"1000551" -> "1000646"  [label="DDG: key->keylen"];
"1000551" -> "1000646"  [label="DDG: sk_gfp_atomic(sk, GFP_ATOMIC)"];
"1000551" -> "1000646"  [label="DDG: AF_INET6"];
"1000551" -> "1000646"  [label="DDG: tcp_md5_do_add(newsk, (union tcp_md5_addr *)&newsk->sk_v6_daddr,\n\t\t\t       AF_INET6, key->key, key->keylen,\n\t\t\t       sk_gfp_atomic(sk, GFP_ATOMIC))"];
"1000524" -> "1000551"  [label="DDG: newsk"];
"1000566" -> "1000551"  [label="DDG: sk"];
"1000566" -> "1000551"  [label="DDG: GFP_ATOMIC"];
"1000551" -> "1000571"  [label="DDG: newsk"];
"1000571" -> "1000570"  [label="AST: "];
"1000571" -> "1000573"  [label="CFG: "];
"1000572" -> "1000571"  [label="AST: "];
"1000573" -> "1000571"  [label="AST: "];
"1000574" -> "1000571"  [label="CFG: "];
"1000571" -> "1000646"  [label="DDG: sk"];
"1000571" -> "1000570"  [label="DDG: sk"];
"1000571" -> "1000570"  [label="DDG: newsk"];
"1000566" -> "1000571"  [label="DDG: sk"];
"1000111" -> "1000571"  [label="DDG: sk"];
"1000524" -> "1000571"  [label="DDG: newsk"];
"1000571" -> "1000576"  [label="DDG: newsk"];
"1000571" -> "1000584"  [label="DDG: newsk"];
"1000571" -> "1000608"  [label="DDG: sk"];
"1000571" -> "1000641"  [label="DDG: sk"];
"1000570" -> "1000569"  [label="AST: "];
"1000570" -> "1000574"  [label="CFG: "];
"1000574" -> "1000570"  [label="AST: "];
"1000577" -> "1000570"  [label="CFG: "];
"1000583" -> "1000570"  [label="CFG: "];
"1000570" -> "1000646"  [label="DDG: __inet_inherit_port(sk, newsk)"];
"1000570" -> "1000646"  [label="DDG: __inet_inherit_port(sk, newsk) < 0"];
"1000576" -> "1000575"  [label="AST: "];
"1000576" -> "1000577"  [label="CFG: "];
"1000577" -> "1000576"  [label="AST: "];
"1000579" -> "1000576"  [label="CFG: "];
"1000576" -> "1000646"  [label="DDG: inet_csk_prepare_forced_close(newsk)"];
"1000576" -> "1000578"  [label="DDG: newsk"];
"1000578" -> "1000575"  [label="AST: "];
"1000578" -> "1000579"  [label="CFG: "];
"1000579" -> "1000578"  [label="AST: "];
"1000580" -> "1000578"  [label="CFG: "];
"1000578" -> "1000646"  [label="DDG: newsk"];
"1000578" -> "1000646"  [label="DDG: tcp_done(newsk)"];
"1000584" -> "1000581"  [label="AST: "];
"1000584" -> "1000586"  [label="CFG: "];
"1000585" -> "1000584"  [label="AST: "];
"1000586" -> "1000584"  [label="AST: "];
"1000581" -> "1000584"  [label="CFG: "];
"1000584" -> "1000646"  [label="DDG: req_to_sk(req_unhash)"];
"1000584" -> "1000646"  [label="DDG: newsk"];
"1000584" -> "1000581"  [label="DDG: newsk"];
"1000584" -> "1000581"  [label="DDG: req_to_sk(req_unhash)"];
"1000586" -> "1000584"  [label="DDG: req_unhash"];
"1000584" -> "1000624"  [label="DDG: newsk"];
"1000584" -> "1000629"  [label="DDG: newsk"];
"1000581" -> "1000117"  [label="AST: "];
"1000582" -> "1000581"  [label="AST: "];
"1000590" -> "1000581"  [label="CFG: "];
"1000581" -> "1000646"  [label="DDG: inet_ehash_nolisten(newsk, req_to_sk(req_unhash))"];
"1000581" -> "1000646"  [label="DDG: *own_req"];
"1000624" -> "1000620"  [label="AST: "];
"1000624" -> "1000628"  [label="CFG: "];
"1000625" -> "1000624"  [label="AST: "];
"1000628" -> "1000624"  [label="AST: "];
"1000630" -> "1000624"  [label="CFG: "];
"1000624" -> "1000646"  [label="DDG: skb_set_owner_r(newnp->pktoptions, newsk)"];
"1000624" -> "1000646"  [label="DDG: newsk"];
"1000624" -> "1000646"  [label="DDG: newnp->pktoptions"];
"1000600" -> "1000624"  [label="DDG: newnp->pktoptions"];
"1000624" -> "1000629"  [label="DDG: newsk"];
"1000629" -> "1000117"  [label="AST: "];
"1000629" -> "1000630"  [label="CFG: "];
"1000630" -> "1000629"  [label="AST: "];
"1000646" -> "1000629"  [label="CFG: "];
"1000629" -> "1000646"  [label="DDG: <RET>"];
"1000630" -> "1000629"  [label="DDG: newsk"];
"1000608" -> "1000604"  [label="AST: "];
"1000608" -> "1000610"  [label="CFG: "];
"1000609" -> "1000608"  [label="AST: "];
"1000610" -> "1000608"  [label="AST: "];
"1000604" -> "1000608"  [label="CFG: "];
"1000608" -> "1000646"  [label="DDG: GFP_ATOMIC"];
"1000608" -> "1000646"  [label="DDG: sk"];
"1000608" -> "1000604"  [label="DDG: sk"];
"1000608" -> "1000604"  [label="DDG: GFP_ATOMIC"];
"1000111" -> "1000608"  [label="DDG: sk"];
"1000566" -> "1000608"  [label="DDG: GFP_ATOMIC"];
"1000604" -> "1000600"  [label="AST: "];
"1000605" -> "1000604"  [label="AST: "];
"1000600" -> "1000604"  [label="CFG: "];
"1000604" -> "1000646"  [label="DDG: sk_gfp_atomic(sk, GFP_ATOMIC)"];
"1000604" -> "1000600"  [label="DDG: ireq->pktopts"];
"1000604" -> "1000600"  [label="DDG: sk_gfp_atomic(sk, GFP_ATOMIC)"];
"1000604" -> "1000611"  [label="DDG: ireq->pktopts"];
"1000600" -> "1000599"  [label="AST: "];
"1000601" -> "1000600"  [label="AST: "];
"1000613" -> "1000600"  [label="CFG: "];
"1000600" -> "1000646"  [label="DDG: skb_clone(ireq->pktopts,\n\t\t\t\t\t\t      sk_gfp_atomic(sk, GFP_ATOMIC))"];
"1000600" -> "1000646"  [label="DDG: newnp->pktoptions"];
"1000611" -> "1000599"  [label="AST: "];
"1000611" -> "1000612"  [label="CFG: "];
"1000612" -> "1000611"  [label="AST: "];
"1000617" -> "1000611"  [label="CFG: "];
"1000611" -> "1000646"  [label="DDG: consume_skb(ireq->pktopts)"];
"1000641" -> "1000640"  [label="AST: "];
"1000641" -> "1000642"  [label="CFG: "];
"1000642" -> "1000641"  [label="AST: "];
"1000643" -> "1000641"  [label="CFG: "];
"1000641" -> "1000646"  [label="DDG: sk"];
"1000641" -> "1000640"  [label="DDG: sk"];
"1000284" -> "1000641"  [label="DDG: sk"];
"1000296" -> "1000641"  [label="DDG: sk"];
"1000633" -> "1000641"  [label="DDG: sk"];
"1000111" -> "1000641"  [label="DDG: sk"];
"1000640" -> "1000117"  [label="AST: "];
"1000640" -> "1000643"  [label="CFG: "];
"1000643" -> "1000640"  [label="AST: "];
"1000645" -> "1000640"  [label="CFG: "];
"1000640" -> "1000646"  [label="DDG: LINUX_MIB_LISTENDROPS"];
"1000640" -> "1000646"  [label="DDG: sock_net(sk)"];
"1000640" -> "1000646"  [label="DDG: NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_LISTENDROPS)"];
"1000566" -> "1000568"  [label="CFG: "];
"1000567" -> "1000566"  [label="AST: "];
"1000568" -> "1000566"  [label="AST: "];
"1000566" -> "1000646"  [label="DDG: GFP_ATOMIC"];
"1000111" -> "1000566"  [label="DDG: sk"];
}
