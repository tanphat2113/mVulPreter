digraph "0_linux_bb7f0f989ca7de1153bd128a40a71709e339fa03@pointer" {
"1000210" [label="(Call,print_verifier_state(env, env->cur_state))"];
"1000125" [label="(Call,cur_regs(env))"];
"1000117" [label="(MethodParameterIn,struct bpf_verifier_env *env)"];
"1000215" [label="(Call,verbose(env,\n\t\t\t\"verifier internal error: known but bad sbounds\n\"))"];
"1000234" [label="(Call,verbose(env,\n\t\t\t\"verifier internal error: known but bad ubounds\n\"))"];
"1000211" [label="(Identifier,env)"];
"1000126" [label="(Identifier,env)"];
"1000253" [label="(Call,verbose(env,\n\t\t\t\t\"R%d 32-bit pointer arithmetic prohibited\n\",\n\t\t\t\tdst))"];
"1000291" [label="(Call,verbose(env, \"R%d pointer arithmetic on CONST_PTR_TO_MAP prohibited\n\",\n\t\t\t\tdst))"];
"1000229" [label="(Call,print_verifier_state(env, env->cur_state))"];
"1000766" [label="(Call,verbose(env, \"R%d pointer arithmetic with %s operator prohibited\n\",\n\t\t\t\tdst, bpf_alu_string[opcode >> 4]))"];
"1000780" [label="(Call,check_reg_sane_offset(env, dst_reg, ptr_reg->type))"];
"1000212" [label="(Call,env->cur_state)"];
"1000210" [label="(Call,print_verifier_state(env, env->cur_state))"];
"1000216" [label="(Identifier,env)"];
"1000125" [label="(Call,cur_regs(env))"];
"1000272" [label="(Call,verbose(env, \"R%d pointer arithmetic on PTR_TO_MAP_VALUE_OR_NULL prohibited, null-check it first\n\",\n\t\t\t\tdst))"];
"1000557" [label="(Call,verbose(env, \"R%d subtraction from stack pointer prohibited\n\",\n\t\t\t\t\tdst))"];
"1000310" [label="(Call,verbose(env, \"R%d pointer arithmetic on PTR_TO_PACKET_END prohibited\n\",\n\t\t\t\tdst))"];
"1000797" [label="(MethodReturn,static int)"];
"1000341" [label="(Call,check_reg_sane_offset(env, ptr_reg, ptr_reg->type))"];
"1000217" [label="(Literal,\"verifier internal error: known but bad sbounds\n\")"];
"1000123" [label="(Call,*regs = cur_regs(env))"];
"1000220" [label="(Identifier,EINVAL)"];
"1000748" [label="(Call,verbose(env, \"R%d bitwise operator %s on pointer prohibited\n\",\n\t\t\t\tdst, bpf_alu_string[opcode >> 4]))"];
"1000209" [label="(Block,)"];
"1000538" [label="(Call,verbose(env, \"R%d tried to subtract pointer from scalar\n\",\n\t\t\t\t\tdst))"];
"1000215" [label="(Call,verbose(env,\n\t\t\t\"verifier internal error: known but bad sbounds\n\"))"];
"1000117" [label="(MethodParameterIn,struct bpf_verifier_env *env)"];
"1000334" [label="(Call,check_reg_sane_offset(env, off_reg, ptr_reg->type))"];
"1000210" -> "1000209"  [label="AST: "];
"1000210" -> "1000212"  [label="CFG: "];
"1000211" -> "1000210"  [label="AST: "];
"1000212" -> "1000210"  [label="AST: "];
"1000216" -> "1000210"  [label="CFG: "];
"1000210" -> "1000797"  [label="DDG: "];
"1000210" -> "1000797"  [label="DDG: "];
"1000125" -> "1000210"  [label="DDG: "];
"1000117" -> "1000210"  [label="DDG: "];
"1000210" -> "1000215"  [label="DDG: "];
"1000125" -> "1000123"  [label="AST: "];
"1000125" -> "1000126"  [label="CFG: "];
"1000126" -> "1000125"  [label="AST: "];
"1000123" -> "1000125"  [label="CFG: "];
"1000125" -> "1000797"  [label="DDG: "];
"1000125" -> "1000123"  [label="DDG: "];
"1000117" -> "1000125"  [label="DDG: "];
"1000125" -> "1000229"  [label="DDG: "];
"1000125" -> "1000253"  [label="DDG: "];
"1000125" -> "1000272"  [label="DDG: "];
"1000125" -> "1000291"  [label="DDG: "];
"1000125" -> "1000310"  [label="DDG: "];
"1000125" -> "1000334"  [label="DDG: "];
"1000117" -> "1000116"  [label="AST: "];
"1000117" -> "1000797"  [label="DDG: "];
"1000117" -> "1000215"  [label="DDG: "];
"1000117" -> "1000229"  [label="DDG: "];
"1000117" -> "1000234"  [label="DDG: "];
"1000117" -> "1000253"  [label="DDG: "];
"1000117" -> "1000272"  [label="DDG: "];
"1000117" -> "1000291"  [label="DDG: "];
"1000117" -> "1000310"  [label="DDG: "];
"1000117" -> "1000334"  [label="DDG: "];
"1000117" -> "1000341"  [label="DDG: "];
"1000117" -> "1000538"  [label="DDG: "];
"1000117" -> "1000557"  [label="DDG: "];
"1000117" -> "1000748"  [label="DDG: "];
"1000117" -> "1000766"  [label="DDG: "];
"1000117" -> "1000780"  [label="DDG: "];
"1000215" -> "1000209"  [label="AST: "];
"1000215" -> "1000217"  [label="CFG: "];
"1000216" -> "1000215"  [label="AST: "];
"1000217" -> "1000215"  [label="AST: "];
"1000220" -> "1000215"  [label="CFG: "];
"1000215" -> "1000797"  [label="DDG: "];
"1000215" -> "1000797"  [label="DDG: "];
}
