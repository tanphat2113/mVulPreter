digraph "0_linux_bb7f0f989ca7de1153bd128a40a71709e339fa03@array" {
"1000766" [label="(Call,verbose(env, \"R%d pointer arithmetic with %s operator prohibited\n\",\n\t\t\t\tdst, bpf_alu_string[opcode >> 4]))"];
"1000341" [label="(Call,check_reg_sane_offset(env, ptr_reg, ptr_reg->type))"];
"1000334" [label="(Call,check_reg_sane_offset(env, off_reg, ptr_reg->type))"];
"1000125" [label="(Call,cur_regs(env))"];
"1000117" [label="(MethodParameterIn,struct bpf_verifier_env *env)"];
"1000120" [label="(MethodParameterIn,const struct bpf_reg_state *off_reg)"];
"1000299" [label="(Call,ptr_reg->type == PTR_TO_PACKET_END)"];
"1000280" [label="(Call,ptr_reg->type == CONST_PTR_TO_MAP)"];
"1000261" [label="(Call,ptr_reg->type == PTR_TO_MAP_VALUE_OR_NULL)"];
"1000119" [label="(MethodParameterIn,const struct bpf_reg_state *ptr_reg)"];
"1000191" [label="(Call,dst = insn->dst_reg)"];
"1000120" [label="(MethodParameterIn,const struct bpf_reg_state *off_reg)"];
"1000234" [label="(Call,verbose(env,\n\t\t\t\"verifier internal error: known but bad ubounds\n\"))"];
"1000261" [label="(Call,ptr_reg->type == PTR_TO_MAP_VALUE_OR_NULL)"];
"1000265" [label="(Identifier,PTR_TO_MAP_VALUE_OR_NULL)"];
"1000308" [label="(Identifier,env)"];
"1000289" [label="(Identifier,env)"];
"1000121" [label="(Block,)"];
"1000126" [label="(Identifier,env)"];
"1000253" [label="(Call,verbose(env,\n\t\t\t\t\"R%d 32-bit pointer arithmetic prohibited\n\",\n\t\t\t\tdst))"];
"1000193" [label="(Call,insn->dst_reg)"];
"1000291" [label="(Call,verbose(env, \"R%d pointer arithmetic on CONST_PTR_TO_MAP prohibited\n\",\n\t\t\t\tdst))"];
"1000303" [label="(Identifier,PTR_TO_PACKET_END)"];
"1000317" [label="(Call,dst_reg->type = ptr_reg->type)"];
"1000197" [label="(Identifier,dst_reg)"];
"1000229" [label="(Call,print_verifier_state(env, env->cur_state))"];
"1000340" [label="(Call,!check_reg_sane_offset(env, ptr_reg, ptr_reg->type))"];
"1000766" [label="(Call,verbose(env, \"R%d pointer arithmetic with %s operator prohibited\n\",\n\t\t\t\tdst, bpf_alu_string[opcode >> 4]))"];
"1000192" [label="(Identifier,dst)"];
"1000342" [label="(Identifier,env)"];
"1000119" [label="(MethodParameterIn,const struct bpf_reg_state *ptr_reg)"];
"1000780" [label="(Call,check_reg_sane_offset(env, dst_reg, ptr_reg->type))"];
"1000210" [label="(Call,print_verifier_state(env, env->cur_state))"];
"1000300" [label="(Call,ptr_reg->type)"];
"1000282" [label="(Identifier,ptr_reg)"];
"1000510" [label="(Call,reg_is_pkt_pointer(ptr_reg))"];
"1000125" [label="(Call,cur_regs(env))"];
"1000529" [label="(Call,dst_reg == off_reg)"];
"1000270" [label="(Identifier,env)"];
"1000272" [label="(Call,verbose(env, \"R%d pointer arithmetic on PTR_TO_MAP_VALUE_OR_NULL prohibited, null-check it first\n\",\n\t\t\t\tdst))"];
"1000557" [label="(Call,verbose(env, \"R%d subtraction from stack pointer prohibited\n\",\n\t\t\t\t\tdst))"];
"1000284" [label="(Identifier,CONST_PTR_TO_MAP)"];
"1000262" [label="(Call,ptr_reg->type)"];
"1000335" [label="(Identifier,env)"];
"1000343" [label="(Identifier,ptr_reg)"];
"1000336" [label="(Identifier,off_reg)"];
"1000761" [label="(ControlStructure,if (!env->allow_ptr_leaks))"];
"1000767" [label="(Identifier,env)"];
"1000310" [label="(Call,verbose(env, \"R%d pointer arithmetic on PTR_TO_PACKET_END prohibited\n\",\n\t\t\t\tdst))"];
"1000260" [label="(ControlStructure,if (ptr_reg->type == PTR_TO_MAP_VALUE_OR_NULL))"];
"1000797" [label="(MethodReturn,static int)"];
"1000777" [label="(Identifier,EACCES)"];
"1000191" [label="(Call,dst = insn->dst_reg)"];
"1000337" [label="(Call,ptr_reg->type)"];
"1000546" [label="(Call,ptr_reg->type == PTR_TO_STACK)"];
"1000341" [label="(Call,check_reg_sane_offset(env, ptr_reg, ptr_reg->type))"];
"1000123" [label="(Call,*regs = cur_regs(env))"];
"1000319" [label="(Identifier,dst_reg)"];
"1000719" [label="(Call,reg_is_pkt_pointer(ptr_reg))"];
"1000301" [label="(Identifier,ptr_reg)"];
"1000769" [label="(Identifier,dst)"];
"1000299" [label="(Call,ptr_reg->type == PTR_TO_PACKET_END)"];
"1000748" [label="(Call,verbose(env, \"R%d bitwise operator %s on pointer prohibited\n\",\n\t\t\t\tdst, bpf_alu_string[opcode >> 4]))"];
"1000333" [label="(Call,!check_reg_sane_offset(env, off_reg, ptr_reg->type))"];
"1000298" [label="(ControlStructure,if (ptr_reg->type == PTR_TO_PACKET_END))"];
"1000279" [label="(ControlStructure,if (ptr_reg->type == CONST_PTR_TO_MAP))"];
"1000538" [label="(Call,verbose(env, \"R%d tried to subtract pointer from scalar\n\",\n\t\t\t\t\tdst))"];
"1000344" [label="(Call,ptr_reg->type)"];
"1000215" [label="(Call,verbose(env,\n\t\t\t\"verifier internal error: known but bad sbounds\n\"))"];
"1000768" [label="(Literal,\"R%d pointer arithmetic with %s operator prohibited\n\")"];
"1000280" [label="(Call,ptr_reg->type == CONST_PTR_TO_MAP)"];
"1000117" [label="(MethodParameterIn,struct bpf_verifier_env *env)"];
"1000281" [label="(Call,ptr_reg->type)"];
"1000334" [label="(Call,check_reg_sane_offset(env, off_reg, ptr_reg->type))"];
"1000770" [label="(Call,bpf_alu_string[opcode >> 4])"];
"1000766" -> "1000761"  [label="AST: "];
"1000766" -> "1000770"  [label="CFG: "];
"1000767" -> "1000766"  [label="AST: "];
"1000768" -> "1000766"  [label="AST: "];
"1000769" -> "1000766"  [label="AST: "];
"1000770" -> "1000766"  [label="AST: "];
"1000777" -> "1000766"  [label="CFG: "];
"1000766" -> "1000797"  [label="DDG: "];
"1000766" -> "1000797"  [label="DDG: "];
"1000766" -> "1000797"  [label="DDG: "];
"1000766" -> "1000797"  [label="DDG: "];
"1000341" -> "1000766"  [label="DDG: "];
"1000334" -> "1000766"  [label="DDG: "];
"1000117" -> "1000766"  [label="DDG: "];
"1000191" -> "1000766"  [label="DDG: "];
"1000341" -> "1000340"  [label="AST: "];
"1000341" -> "1000344"  [label="CFG: "];
"1000342" -> "1000341"  [label="AST: "];
"1000343" -> "1000341"  [label="AST: "];
"1000344" -> "1000341"  [label="AST: "];
"1000340" -> "1000341"  [label="CFG: "];
"1000341" -> "1000797"  [label="DDG: "];
"1000341" -> "1000797"  [label="DDG: "];
"1000341" -> "1000797"  [label="DDG: "];
"1000341" -> "1000340"  [label="DDG: "];
"1000341" -> "1000340"  [label="DDG: "];
"1000341" -> "1000340"  [label="DDG: "];
"1000334" -> "1000341"  [label="DDG: "];
"1000334" -> "1000341"  [label="DDG: "];
"1000117" -> "1000341"  [label="DDG: "];
"1000119" -> "1000341"  [label="DDG: "];
"1000341" -> "1000510"  [label="DDG: "];
"1000341" -> "1000538"  [label="DDG: "];
"1000341" -> "1000546"  [label="DDG: "];
"1000341" -> "1000557"  [label="DDG: "];
"1000341" -> "1000719"  [label="DDG: "];
"1000341" -> "1000748"  [label="DDG: "];
"1000341" -> "1000780"  [label="DDG: "];
"1000341" -> "1000780"  [label="DDG: "];
"1000334" -> "1000333"  [label="AST: "];
"1000334" -> "1000337"  [label="CFG: "];
"1000335" -> "1000334"  [label="AST: "];
"1000336" -> "1000334"  [label="AST: "];
"1000337" -> "1000334"  [label="AST: "];
"1000333" -> "1000334"  [label="CFG: "];
"1000334" -> "1000797"  [label="DDG: "];
"1000334" -> "1000797"  [label="DDG: "];
"1000334" -> "1000797"  [label="DDG: "];
"1000334" -> "1000333"  [label="DDG: "];
"1000334" -> "1000333"  [label="DDG: "];
"1000334" -> "1000333"  [label="DDG: "];
"1000125" -> "1000334"  [label="DDG: "];
"1000117" -> "1000334"  [label="DDG: "];
"1000120" -> "1000334"  [label="DDG: "];
"1000299" -> "1000334"  [label="DDG: "];
"1000334" -> "1000529"  [label="DDG: "];
"1000334" -> "1000538"  [label="DDG: "];
"1000334" -> "1000546"  [label="DDG: "];
"1000334" -> "1000557"  [label="DDG: "];
"1000334" -> "1000748"  [label="DDG: "];
"1000334" -> "1000780"  [label="DDG: "];
"1000334" -> "1000780"  [label="DDG: "];
"1000125" -> "1000123"  [label="AST: "];
"1000125" -> "1000126"  [label="CFG: "];
"1000126" -> "1000125"  [label="AST: "];
"1000123" -> "1000125"  [label="CFG: "];
"1000125" -> "1000797"  [label="DDG: "];
"1000125" -> "1000123"  [label="DDG: "];
"1000117" -> "1000125"  [label="DDG: "];
"1000125" -> "1000210"  [label="DDG: "];
"1000125" -> "1000229"  [label="DDG: "];
"1000125" -> "1000253"  [label="DDG: "];
"1000125" -> "1000272"  [label="DDG: "];
"1000125" -> "1000291"  [label="DDG: "];
"1000125" -> "1000310"  [label="DDG: "];
"1000117" -> "1000116"  [label="AST: "];
"1000117" -> "1000797"  [label="DDG: "];
"1000117" -> "1000210"  [label="DDG: "];
"1000117" -> "1000215"  [label="DDG: "];
"1000117" -> "1000229"  [label="DDG: "];
"1000117" -> "1000234"  [label="DDG: "];
"1000117" -> "1000253"  [label="DDG: "];
"1000117" -> "1000272"  [label="DDG: "];
"1000117" -> "1000291"  [label="DDG: "];
"1000117" -> "1000310"  [label="DDG: "];
"1000117" -> "1000538"  [label="DDG: "];
"1000117" -> "1000557"  [label="DDG: "];
"1000117" -> "1000748"  [label="DDG: "];
"1000117" -> "1000780"  [label="DDG: "];
"1000120" -> "1000116"  [label="AST: "];
"1000120" -> "1000797"  [label="DDG: "];
"1000120" -> "1000529"  [label="DDG: "];
"1000299" -> "1000298"  [label="AST: "];
"1000299" -> "1000303"  [label="CFG: "];
"1000300" -> "1000299"  [label="AST: "];
"1000303" -> "1000299"  [label="AST: "];
"1000308" -> "1000299"  [label="CFG: "];
"1000319" -> "1000299"  [label="CFG: "];
"1000299" -> "1000797"  [label="DDG: "];
"1000299" -> "1000797"  [label="DDG: "];
"1000299" -> "1000797"  [label="DDG: "];
"1000280" -> "1000299"  [label="DDG: "];
"1000299" -> "1000317"  [label="DDG: "];
"1000280" -> "1000279"  [label="AST: "];
"1000280" -> "1000284"  [label="CFG: "];
"1000281" -> "1000280"  [label="AST: "];
"1000284" -> "1000280"  [label="AST: "];
"1000289" -> "1000280"  [label="CFG: "];
"1000301" -> "1000280"  [label="CFG: "];
"1000280" -> "1000797"  [label="DDG: "];
"1000280" -> "1000797"  [label="DDG: "];
"1000280" -> "1000797"  [label="DDG: "];
"1000261" -> "1000280"  [label="DDG: "];
"1000261" -> "1000260"  [label="AST: "];
"1000261" -> "1000265"  [label="CFG: "];
"1000262" -> "1000261"  [label="AST: "];
"1000265" -> "1000261"  [label="AST: "];
"1000270" -> "1000261"  [label="CFG: "];
"1000282" -> "1000261"  [label="CFG: "];
"1000261" -> "1000797"  [label="DDG: "];
"1000261" -> "1000797"  [label="DDG: "];
"1000261" -> "1000797"  [label="DDG: "];
"1000119" -> "1000116"  [label="AST: "];
"1000119" -> "1000797"  [label="DDG: "];
"1000119" -> "1000510"  [label="DDG: "];
"1000119" -> "1000719"  [label="DDG: "];
"1000191" -> "1000121"  [label="AST: "];
"1000191" -> "1000193"  [label="CFG: "];
"1000192" -> "1000191"  [label="AST: "];
"1000193" -> "1000191"  [label="AST: "];
"1000197" -> "1000191"  [label="CFG: "];
"1000191" -> "1000797"  [label="DDG: "];
"1000191" -> "1000797"  [label="DDG: "];
"1000191" -> "1000253"  [label="DDG: "];
"1000191" -> "1000272"  [label="DDG: "];
"1000191" -> "1000291"  [label="DDG: "];
"1000191" -> "1000310"  [label="DDG: "];
"1000191" -> "1000538"  [label="DDG: "];
"1000191" -> "1000557"  [label="DDG: "];
"1000191" -> "1000748"  [label="DDG: "];
}
