digraph "0_linux_f3554aeb991214cbfafd17d55e2bfddb50282e32@pointer" {
"1000157" [label="(Call,g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK))"];
"1000161" [label="(Call,~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK))"];
"1000162" [label="(Call,FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000164" [label="(Call,FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000156" [label="(Call,(g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000145" [label="(Call,g->track > UDP->tracks >> STRETCH(g) ||\n \t    /* check if reserved bits are set */\n \t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000139" [label="(Call,g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n \t    /* check if reserved bits are set */\n \t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000126" [label="(Call,(unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n \t    /* check if reserved bits are set */\n \t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000120" [label="(Call,g->head <= 0 ||\n\t    /* check for zero in F_SECT_PER_TRACK */\n\t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n \t    /* check if reserved bits are set */\n \t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000114" [label="(Call,g->sect <= 0 ||\n \t    g->head <= 0 ||\n\t    /* check for zero in F_SECT_PER_TRACK */\n\t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n \t    /* check if reserved bits are set */\n \t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000299" [label="(Call,oldStretch = g->stretch)"];
"1000370" [label="(Call,user_params[drive].sect ^ oldStretch)"];
"1000369" [label="(Call,(user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK))"];
"1000365" [label="(Call,DRS->maxtrack ||\n\t\t    ((user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK)))"];
"1000355" [label="(Call,DRS->maxblock > user_params[drive].sect ||\n\t\t    DRS->maxtrack ||\n\t\t    ((user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK)))"];
"1000306" [label="(Identifier,user_params)"];
"1000386" [label="(MethodReturn,static int)"];
"1000369" [label="(Call,(user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK))"];
"1000170" [label="(Identifier,EINVAL)"];
"1000139" [label="(Call,g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n \t    /* check if reserved bits are set */\n \t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000158" [label="(Call,g->stretch)"];
"1000161" [label="(Call,~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK))"];
"1000113" [label="(ControlStructure,if (g->sect <= 0 ||\n \t    g->head <= 0 ||\n\t    /* check for zero in F_SECT_PER_TRACK */\n\t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n \t    /* check if reserved bits are set */\n \t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0))"];
"1000165" [label="(Identifier,FD_SWAPSIDES)"];
"1000163" [label="(Identifier,FD_STRETCH)"];
"1000114" [label="(Call,g->sect <= 0 ||\n \t    g->head <= 0 ||\n\t    /* check for zero in F_SECT_PER_TRACK */\n\t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n \t    /* check if reserved bits are set */\n \t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000381" [label="(Identifier,bdev)"];
"1000300" [label="(Identifier,oldStretch)"];
"1000172" [label="(Identifier,type)"];
"1000162" [label="(Call,FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000356" [label="(Call,DRS->maxblock > user_params[drive].sect)"];
"1000120" [label="(Call,g->head <= 0 ||\n\t    /* check for zero in F_SECT_PER_TRACK */\n\t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n \t    /* check if reserved bits are set */\n \t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000167" [label="(Literal,0)"];
"1000156" [label="(Call,(g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000366" [label="(Call,DRS->maxtrack)"];
"1000157" [label="(Call,g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK))"];
"1000115" [label="(Call,g->sect <= 0)"];
"1000276" [label="(Block,)"];
"1000371" [label="(Call,user_params[drive].sect)"];
"1000126" [label="(Call,(unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n \t    /* check if reserved bits are set */\n \t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000301" [label="(Call,g->stretch)"];
"1000378" [label="(Identifier,FD_SWAPSIDES)"];
"1000166" [label="(Identifier,FD_SECTBASEMASK)"];
"1000370" [label="(Call,user_params[drive].sect ^ oldStretch)"];
"1000355" [label="(Call,DRS->maxblock > user_params[drive].sect ||\n\t\t    DRS->maxtrack ||\n\t\t    ((user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK)))"];
"1000354" [label="(ControlStructure,if (DRS->maxblock > user_params[drive].sect ||\n\t\t    DRS->maxtrack ||\n\t\t    ((user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK))))"];
"1000299" [label="(Call,oldStretch = g->stretch)"];
"1000383" [label="(Call,process_fd_request())"];
"1000376" [label="(Identifier,oldStretch)"];
"1000365" [label="(Call,DRS->maxtrack ||\n\t\t    ((user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK)))"];
"1000164" [label="(Call,FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000127" [label="(Call,(unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0)"];
"1000377" [label="(Call,FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000121" [label="(Call,g->head <= 0)"];
"1000146" [label="(Call,g->track > UDP->tracks >> STRETCH(g))"];
"1000140" [label="(Call,g->track <= 0)"];
"1000145" [label="(Call,g->track > UDP->tracks >> STRETCH(g) ||\n \t    /* check if reserved bits are set */\n \t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000157" -> "1000156"  [label="AST: "];
"1000157" -> "1000161"  [label="CFG: "];
"1000158" -> "1000157"  [label="AST: "];
"1000161" -> "1000157"  [label="AST: "];
"1000167" -> "1000157"  [label="CFG: "];
"1000157" -> "1000386"  [label="DDG: g->stretch"];
"1000157" -> "1000386"  [label="DDG: ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000157" -> "1000156"  [label="DDG: g->stretch"];
"1000157" -> "1000156"  [label="DDG: ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000161" -> "1000157"  [label="DDG: FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK"];
"1000157" -> "1000299"  [label="DDG: g->stretch"];
"1000161" -> "1000162"  [label="CFG: "];
"1000162" -> "1000161"  [label="AST: "];
"1000161" -> "1000386"  [label="DDG: FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK"];
"1000162" -> "1000161"  [label="DDG: FD_STRETCH"];
"1000162" -> "1000161"  [label="DDG: FD_SWAPSIDES | FD_SECTBASEMASK"];
"1000162" -> "1000164"  [label="CFG: "];
"1000163" -> "1000162"  [label="AST: "];
"1000164" -> "1000162"  [label="AST: "];
"1000162" -> "1000386"  [label="DDG: FD_SWAPSIDES | FD_SECTBASEMASK"];
"1000162" -> "1000386"  [label="DDG: FD_STRETCH"];
"1000164" -> "1000162"  [label="DDG: FD_SWAPSIDES"];
"1000164" -> "1000162"  [label="DDG: FD_SECTBASEMASK"];
"1000164" -> "1000166"  [label="CFG: "];
"1000165" -> "1000164"  [label="AST: "];
"1000166" -> "1000164"  [label="AST: "];
"1000164" -> "1000386"  [label="DDG: FD_SECTBASEMASK"];
"1000164" -> "1000386"  [label="DDG: FD_SWAPSIDES"];
"1000164" -> "1000377"  [label="DDG: FD_SWAPSIDES"];
"1000164" -> "1000377"  [label="DDG: FD_SECTBASEMASK"];
"1000156" -> "1000145"  [label="AST: "];
"1000156" -> "1000167"  [label="CFG: "];
"1000167" -> "1000156"  [label="AST: "];
"1000145" -> "1000156"  [label="CFG: "];
"1000156" -> "1000386"  [label="DDG: g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000156" -> "1000145"  [label="DDG: g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000156" -> "1000145"  [label="DDG: 0"];
"1000145" -> "1000139"  [label="AST: "];
"1000145" -> "1000146"  [label="CFG: "];
"1000146" -> "1000145"  [label="AST: "];
"1000139" -> "1000145"  [label="CFG: "];
"1000145" -> "1000386"  [label="DDG: (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000145" -> "1000386"  [label="DDG: g->track > UDP->tracks >> STRETCH(g)"];
"1000145" -> "1000139"  [label="DDG: g->track > UDP->tracks >> STRETCH(g)"];
"1000145" -> "1000139"  [label="DDG: (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000146" -> "1000145"  [label="DDG: g->track"];
"1000146" -> "1000145"  [label="DDG: UDP->tracks >> STRETCH(g)"];
"1000139" -> "1000126"  [label="AST: "];
"1000139" -> "1000140"  [label="CFG: "];
"1000140" -> "1000139"  [label="AST: "];
"1000126" -> "1000139"  [label="CFG: "];
"1000139" -> "1000386"  [label="DDG: g->track <= 0"];
"1000139" -> "1000386"  [label="DDG: g->track > UDP->tracks >> STRETCH(g) ||\n \t    /* check if reserved bits are set */\n \t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000139" -> "1000126"  [label="DDG: g->track <= 0"];
"1000139" -> "1000126"  [label="DDG: g->track > UDP->tracks >> STRETCH(g) ||\n \t    /* check if reserved bits are set */\n \t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000140" -> "1000139"  [label="DDG: g->track"];
"1000140" -> "1000139"  [label="DDG: 0"];
"1000126" -> "1000120"  [label="AST: "];
"1000126" -> "1000127"  [label="CFG: "];
"1000127" -> "1000126"  [label="AST: "];
"1000120" -> "1000126"  [label="CFG: "];
"1000126" -> "1000386"  [label="DDG: g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n \t    /* check if reserved bits are set */\n \t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000126" -> "1000386"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0"];
"1000126" -> "1000120"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0"];
"1000126" -> "1000120"  [label="DDG: g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n \t    /* check if reserved bits are set */\n \t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000127" -> "1000126"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g))"];
"1000127" -> "1000126"  [label="DDG: 0"];
"1000120" -> "1000114"  [label="AST: "];
"1000120" -> "1000121"  [label="CFG: "];
"1000121" -> "1000120"  [label="AST: "];
"1000114" -> "1000120"  [label="CFG: "];
"1000120" -> "1000386"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n \t    /* check if reserved bits are set */\n \t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000120" -> "1000386"  [label="DDG: g->head <= 0"];
"1000120" -> "1000114"  [label="DDG: g->head <= 0"];
"1000120" -> "1000114"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n \t    /* check if reserved bits are set */\n \t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000121" -> "1000120"  [label="DDG: g->head"];
"1000121" -> "1000120"  [label="DDG: 0"];
"1000114" -> "1000113"  [label="AST: "];
"1000114" -> "1000115"  [label="CFG: "];
"1000115" -> "1000114"  [label="AST: "];
"1000170" -> "1000114"  [label="CFG: "];
"1000172" -> "1000114"  [label="CFG: "];
"1000114" -> "1000386"  [label="DDG: g->sect <= 0 ||\n \t    g->head <= 0 ||\n\t    /* check for zero in F_SECT_PER_TRACK */\n\t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n \t    /* check if reserved bits are set */\n \t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000114" -> "1000386"  [label="DDG: g->sect <= 0"];
"1000114" -> "1000386"  [label="DDG: g->head <= 0 ||\n\t    /* check for zero in F_SECT_PER_TRACK */\n\t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n \t    /* check if reserved bits are set */\n \t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000115" -> "1000114"  [label="DDG: g->sect"];
"1000115" -> "1000114"  [label="DDG: 0"];
"1000299" -> "1000276"  [label="AST: "];
"1000299" -> "1000301"  [label="CFG: "];
"1000300" -> "1000299"  [label="AST: "];
"1000301" -> "1000299"  [label="AST: "];
"1000306" -> "1000299"  [label="CFG: "];
"1000299" -> "1000386"  [label="DDG: g->stretch"];
"1000299" -> "1000386"  [label="DDG: oldStretch"];
"1000299" -> "1000370"  [label="DDG: oldStretch"];
"1000370" -> "1000369"  [label="AST: "];
"1000370" -> "1000376"  [label="CFG: "];
"1000371" -> "1000370"  [label="AST: "];
"1000376" -> "1000370"  [label="AST: "];
"1000378" -> "1000370"  [label="CFG: "];
"1000370" -> "1000386"  [label="DDG: oldStretch"];
"1000370" -> "1000386"  [label="DDG: user_params[drive].sect"];
"1000370" -> "1000369"  [label="DDG: user_params[drive].sect"];
"1000370" -> "1000369"  [label="DDG: oldStretch"];
"1000356" -> "1000370"  [label="DDG: user_params[drive].sect"];
"1000369" -> "1000365"  [label="AST: "];
"1000369" -> "1000377"  [label="CFG: "];
"1000377" -> "1000369"  [label="AST: "];
"1000365" -> "1000369"  [label="CFG: "];
"1000369" -> "1000386"  [label="DDG: FD_SWAPSIDES | FD_SECTBASEMASK"];
"1000369" -> "1000386"  [label="DDG: user_params[drive].sect ^ oldStretch"];
"1000369" -> "1000365"  [label="DDG: user_params[drive].sect ^ oldStretch"];
"1000369" -> "1000365"  [label="DDG: FD_SWAPSIDES | FD_SECTBASEMASK"];
"1000377" -> "1000369"  [label="DDG: FD_SWAPSIDES"];
"1000377" -> "1000369"  [label="DDG: FD_SECTBASEMASK"];
"1000365" -> "1000355"  [label="AST: "];
"1000365" -> "1000366"  [label="CFG: "];
"1000366" -> "1000365"  [label="AST: "];
"1000355" -> "1000365"  [label="CFG: "];
"1000365" -> "1000386"  [label="DDG: (user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000365" -> "1000386"  [label="DDG: DRS->maxtrack"];
"1000365" -> "1000355"  [label="DDG: DRS->maxtrack"];
"1000365" -> "1000355"  [label="DDG: (user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000355" -> "1000354"  [label="AST: "];
"1000355" -> "1000356"  [label="CFG: "];
"1000356" -> "1000355"  [label="AST: "];
"1000381" -> "1000355"  [label="CFG: "];
"1000383" -> "1000355"  [label="CFG: "];
"1000355" -> "1000386"  [label="DDG: DRS->maxtrack ||\n\t\t    ((user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK))"];
"1000355" -> "1000386"  [label="DDG: DRS->maxblock > user_params[drive].sect"];
"1000355" -> "1000386"  [label="DDG: DRS->maxblock > user_params[drive].sect ||\n\t\t    DRS->maxtrack ||\n\t\t    ((user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK))"];
"1000356" -> "1000355"  [label="DDG: DRS->maxblock"];
"1000356" -> "1000355"  [label="DDG: user_params[drive].sect"];
}
