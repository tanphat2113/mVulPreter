digraph "0_linux_b860d3cc62877fad02863e2a08efff69a19382d2@API" {
"1000185" [label="(Call,err = skb_copy_datagram_iovec(skb, 0, msg->msg_iov, copied))"];
"1000187" [label="(Call,skb_copy_datagram_iovec(skb, 0, msg->msg_iov, copied))"];
"1000164" [label="(Call,!skb)"];
"1000155" [label="(Call,skb = skb_recv_datagram(sk, flags, noblock, &err))"];
"1000157" [label="(Call,skb_recv_datagram(sk, flags, noblock, &err))"];
"1000113" [label="(Call,inet6_sk(sk))"];
"1000103" [label="(MethodParameterIn,struct sock *sk)"];
"1000147" [label="(Call,flags & MSG_ERRQUEUE)"];
"1000134" [label="(Call,flags & MSG_OOB)"];
"1000107" [label="(MethodParameterIn,int flags)"];
"1000106" [label="(MethodParameterIn,int noblock)"];
"1000182" [label="(Call,copied = len)"];
"1000173" [label="(Call,len < copied)"];
"1000105" [label="(MethodParameterIn,size_t len)"];
"1000167" [label="(Call,copied = skb->len)"];
"1000278" [label="(Call,err ? err : copied)"];
"1000277" [label="(Return,return err ? err : copied;)"];
"1000185" [label="(Call,err = skb_copy_datagram_iovec(skb, 0, msg->msg_iov, copied))"];
"1000166" [label="(ControlStructure,goto out;)"];
"1000160" [label="(Identifier,noblock)"];
"1000135" [label="(Identifier,flags)"];
"1000157" [label="(Call,skb_recv_datagram(sk, flags, noblock, &err))"];
"1000197" [label="(Call,sock_recv_timestamp(msg, sk, skb))"];
"1000103" [label="(MethodParameterIn,struct sock *sk)"];
"1000273" [label="(Call,skb_free_datagram(sk, skb))"];
"1000128" [label="(Call,err = -EOPNOTSUPP)"];
"1000163" [label="(ControlStructure,if (!skb))"];
"1000156" [label="(Identifier,skb)"];
"1000158" [label="(Identifier,sk)"];
"1000111" [label="(Call,*np = inet6_sk(sk))"];
"1000146" [label="(ControlStructure,if (flags & MSG_ERRQUEUE))"];
"1000187" [label="(Call,skb_copy_datagram_iovec(skb, 0, msg->msg_iov, copied))"];
"1000161" [label="(Call,&err)"];
"1000175" [label="(Identifier,copied)"];
"1000155" [label="(Call,skb = skb_recv_datagram(sk, flags, noblock, &err))"];
"1000279" [label="(Identifier,err)"];
"1000280" [label="(Identifier,err)"];
"1000176" [label="(Block,)"];
"1000277" [label="(Return,return err ? err : copied;)"];
"1000169" [label="(Call,skb->len)"];
"1000179" [label="(Identifier,msg)"];
"1000189" [label="(Literal,0)"];
"1000148" [label="(Identifier,flags)"];
"1000109" [label="(Block,)"];
"1000107" [label="(MethodParameterIn,int flags)"];
"1000136" [label="(Identifier,MSG_OOB)"];
"1000165" [label="(Identifier,skb)"];
"1000168" [label="(Identifier,copied)"];
"1000188" [label="(Identifier,skb)"];
"1000281" [label="(Identifier,copied)"];
"1000264" [label="(Call,flags & MSG_TRUNC)"];
"1000167" [label="(Call,copied = skb->len)"];
"1000134" [label="(Call,flags & MSG_OOB)"];
"1000159" [label="(Identifier,flags)"];
"1000174" [label="(Identifier,len)"];
"1000282" [label="(MethodReturn,static int)"];
"1000149" [label="(Identifier,MSG_ERRQUEUE)"];
"1000133" [label="(ControlStructure,if (flags & MSG_OOB))"];
"1000278" [label="(Call,err ? err : copied)"];
"1000164" [label="(Call,!skb)"];
"1000184" [label="(Identifier,len)"];
"1000190" [label="(Call,msg->msg_iov)"];
"1000195" [label="(Identifier,err)"];
"1000182" [label="(Call,copied = len)"];
"1000113" [label="(Call,inet6_sk(sk))"];
"1000172" [label="(ControlStructure,if (len < copied))"];
"1000173" [label="(Call,len < copied)"];
"1000186" [label="(Identifier,err)"];
"1000114" [label="(Identifier,sk)"];
"1000147" [label="(Call,flags & MSG_ERRQUEUE)"];
"1000151" [label="(Call,ipv6_recv_error(sk, msg, len))"];
"1000259" [label="(Call,ip6_datagram_recv_ctl(sk, msg, skb))"];
"1000183" [label="(Identifier,copied)"];
"1000193" [label="(Identifier,copied)"];
"1000105" [label="(MethodParameterIn,size_t len)"];
"1000152" [label="(Identifier,sk)"];
"1000139" [label="(Identifier,addr_len)"];
"1000106" [label="(MethodParameterIn,int noblock)"];
"1000267" [label="(Call,copied = skb->len)"];
"1000137" [label="(ControlStructure,goto out;)"];
"1000124" [label="(Call,copied = 0)"];
"1000185" -> "1000109"  [label="AST: "];
"1000185" -> "1000187"  [label="CFG: "];
"1000186" -> "1000185"  [label="AST: "];
"1000187" -> "1000185"  [label="AST: "];
"1000195" -> "1000185"  [label="CFG: "];
"1000185" -> "1000282"  [label="DDG: skb_copy_datagram_iovec(skb, 0, msg->msg_iov, copied)"];
"1000187" -> "1000185"  [label="DDG: skb"];
"1000187" -> "1000185"  [label="DDG: 0"];
"1000187" -> "1000185"  [label="DDG: msg->msg_iov"];
"1000187" -> "1000185"  [label="DDG: copied"];
"1000185" -> "1000278"  [label="DDG: err"];
"1000187" -> "1000193"  [label="CFG: "];
"1000188" -> "1000187"  [label="AST: "];
"1000189" -> "1000187"  [label="AST: "];
"1000190" -> "1000187"  [label="AST: "];
"1000193" -> "1000187"  [label="AST: "];
"1000187" -> "1000282"  [label="DDG: msg->msg_iov"];
"1000164" -> "1000187"  [label="DDG: skb"];
"1000182" -> "1000187"  [label="DDG: copied"];
"1000173" -> "1000187"  [label="DDG: copied"];
"1000187" -> "1000197"  [label="DDG: skb"];
"1000187" -> "1000273"  [label="DDG: skb"];
"1000187" -> "1000278"  [label="DDG: copied"];
"1000164" -> "1000163"  [label="AST: "];
"1000164" -> "1000165"  [label="CFG: "];
"1000165" -> "1000164"  [label="AST: "];
"1000166" -> "1000164"  [label="CFG: "];
"1000168" -> "1000164"  [label="CFG: "];
"1000164" -> "1000282"  [label="DDG: !skb"];
"1000164" -> "1000282"  [label="DDG: skb"];
"1000155" -> "1000164"  [label="DDG: skb"];
"1000155" -> "1000109"  [label="AST: "];
"1000155" -> "1000157"  [label="CFG: "];
"1000156" -> "1000155"  [label="AST: "];
"1000157" -> "1000155"  [label="AST: "];
"1000165" -> "1000155"  [label="CFG: "];
"1000155" -> "1000282"  [label="DDG: skb_recv_datagram(sk, flags, noblock, &err)"];
"1000157" -> "1000155"  [label="DDG: sk"];
"1000157" -> "1000155"  [label="DDG: flags"];
"1000157" -> "1000155"  [label="DDG: noblock"];
"1000157" -> "1000155"  [label="DDG: &err"];
"1000157" -> "1000161"  [label="CFG: "];
"1000158" -> "1000157"  [label="AST: "];
"1000159" -> "1000157"  [label="AST: "];
"1000160" -> "1000157"  [label="AST: "];
"1000161" -> "1000157"  [label="AST: "];
"1000157" -> "1000282"  [label="DDG: flags"];
"1000157" -> "1000282"  [label="DDG: noblock"];
"1000157" -> "1000282"  [label="DDG: sk"];
"1000157" -> "1000282"  [label="DDG: &err"];
"1000113" -> "1000157"  [label="DDG: sk"];
"1000103" -> "1000157"  [label="DDG: sk"];
"1000147" -> "1000157"  [label="DDG: flags"];
"1000107" -> "1000157"  [label="DDG: flags"];
"1000106" -> "1000157"  [label="DDG: noblock"];
"1000157" -> "1000197"  [label="DDG: sk"];
"1000157" -> "1000264"  [label="DDG: flags"];
"1000157" -> "1000273"  [label="DDG: sk"];
"1000113" -> "1000111"  [label="AST: "];
"1000113" -> "1000114"  [label="CFG: "];
"1000114" -> "1000113"  [label="AST: "];
"1000111" -> "1000113"  [label="CFG: "];
"1000113" -> "1000282"  [label="DDG: sk"];
"1000113" -> "1000111"  [label="DDG: sk"];
"1000103" -> "1000113"  [label="DDG: sk"];
"1000113" -> "1000151"  [label="DDG: sk"];
"1000103" -> "1000101"  [label="AST: "];
"1000103" -> "1000282"  [label="DDG: sk"];
"1000103" -> "1000151"  [label="DDG: sk"];
"1000103" -> "1000197"  [label="DDG: sk"];
"1000103" -> "1000259"  [label="DDG: sk"];
"1000103" -> "1000273"  [label="DDG: sk"];
"1000147" -> "1000146"  [label="AST: "];
"1000147" -> "1000149"  [label="CFG: "];
"1000148" -> "1000147"  [label="AST: "];
"1000149" -> "1000147"  [label="AST: "];
"1000152" -> "1000147"  [label="CFG: "];
"1000156" -> "1000147"  [label="CFG: "];
"1000147" -> "1000282"  [label="DDG: MSG_ERRQUEUE"];
"1000147" -> "1000282"  [label="DDG: flags"];
"1000147" -> "1000282"  [label="DDG: flags & MSG_ERRQUEUE"];
"1000134" -> "1000147"  [label="DDG: flags"];
"1000107" -> "1000147"  [label="DDG: flags"];
"1000134" -> "1000133"  [label="AST: "];
"1000134" -> "1000136"  [label="CFG: "];
"1000135" -> "1000134"  [label="AST: "];
"1000136" -> "1000134"  [label="AST: "];
"1000137" -> "1000134"  [label="CFG: "];
"1000139" -> "1000134"  [label="CFG: "];
"1000134" -> "1000282"  [label="DDG: flags & MSG_OOB"];
"1000134" -> "1000282"  [label="DDG: flags"];
"1000134" -> "1000282"  [label="DDG: MSG_OOB"];
"1000107" -> "1000134"  [label="DDG: flags"];
"1000107" -> "1000101"  [label="AST: "];
"1000107" -> "1000282"  [label="DDG: flags"];
"1000107" -> "1000264"  [label="DDG: flags"];
"1000106" -> "1000101"  [label="AST: "];
"1000106" -> "1000282"  [label="DDG: noblock"];
"1000182" -> "1000176"  [label="AST: "];
"1000182" -> "1000184"  [label="CFG: "];
"1000183" -> "1000182"  [label="AST: "];
"1000184" -> "1000182"  [label="AST: "];
"1000186" -> "1000182"  [label="CFG: "];
"1000182" -> "1000282"  [label="DDG: len"];
"1000173" -> "1000182"  [label="DDG: len"];
"1000105" -> "1000182"  [label="DDG: len"];
"1000173" -> "1000172"  [label="AST: "];
"1000173" -> "1000175"  [label="CFG: "];
"1000174" -> "1000173"  [label="AST: "];
"1000175" -> "1000173"  [label="AST: "];
"1000179" -> "1000173"  [label="CFG: "];
"1000186" -> "1000173"  [label="CFG: "];
"1000173" -> "1000282"  [label="DDG: len < copied"];
"1000173" -> "1000282"  [label="DDG: len"];
"1000105" -> "1000173"  [label="DDG: len"];
"1000167" -> "1000173"  [label="DDG: copied"];
"1000105" -> "1000101"  [label="AST: "];
"1000105" -> "1000282"  [label="DDG: len"];
"1000105" -> "1000151"  [label="DDG: len"];
"1000167" -> "1000109"  [label="AST: "];
"1000167" -> "1000169"  [label="CFG: "];
"1000168" -> "1000167"  [label="AST: "];
"1000169" -> "1000167"  [label="AST: "];
"1000174" -> "1000167"  [label="CFG: "];
"1000167" -> "1000282"  [label="DDG: skb->len"];
"1000278" -> "1000277"  [label="AST: "];
"1000278" -> "1000280"  [label="CFG: "];
"1000278" -> "1000281"  [label="CFG: "];
"1000279" -> "1000278"  [label="AST: "];
"1000280" -> "1000278"  [label="AST: "];
"1000281" -> "1000278"  [label="AST: "];
"1000277" -> "1000278"  [label="CFG: "];
"1000278" -> "1000282"  [label="DDG: err"];
"1000278" -> "1000282"  [label="DDG: err ? err : copied"];
"1000278" -> "1000282"  [label="DDG: copied"];
"1000278" -> "1000277"  [label="DDG: err ? err : copied"];
"1000128" -> "1000278"  [label="DDG: err"];
"1000124" -> "1000278"  [label="DDG: copied"];
"1000267" -> "1000278"  [label="DDG: copied"];
"1000277" -> "1000109"  [label="AST: "];
"1000282" -> "1000277"  [label="CFG: "];
"1000277" -> "1000282"  [label="DDG: <RET>"];
}
