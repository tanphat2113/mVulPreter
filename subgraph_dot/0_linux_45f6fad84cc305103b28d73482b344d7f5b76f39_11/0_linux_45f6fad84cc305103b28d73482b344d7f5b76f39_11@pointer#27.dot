digraph "0_linux_45f6fad84cc305103b28d73482b344d7f5b76f39_11@pointer" {
"1001352" [label="(Call,!dev)"];
"1001346" [label="(Call,dev = dev_get_by_index(net, val))"];
"1001348" [label="(Call,dev_get_by_index(net, val))"];
"1000127" [label="(Call,*net = sock_net(sk))"];
"1000129" [label="(Call,sock_net(sk))"];
"1000124" [label="(Call,inet6_sk(sk))"];
"1000115" [label="(MethodParameterIn,struct sock *sk)"];
"1001340" [label="(Call,sk->sk_bound_dev_if != val)"];
"1000172" [label="(Call,val != 0)"];
"1000158" [label="(Call,get_user(val, (int __user *) optval))"];
"1000160" [label="(Call,(int __user *) optval)"];
"1000144" [label="(Call,!optval)"];
"1000118" [label="(MethodParameterIn,char __user *optval)"];
"1000167" [label="(Call,val = 0)"];
"1000146" [label="(Call,val = 0)"];
"1001360" [label="(Call,dev_put(dev))"];
"1001471" [label="(Call,ipv6_sock_ac_drop(sk, mreq.ipv6mr_ifindex, &mreq.ipv6mr_acaddr))"];
"1000265" [label="(Call,ipv6_only_sock(sk))"];
"1001341" [label="(Call,sk->sk_bound_dev_if)"];
"1001897" [label="(Call,xfrm_user_policy(sk, optname, optval, optlen))"];
"1001057" [label="(Call,sock_kmalloc(sk, sizeof(*opt) + optlen, GFP_KERNEL))"];
"1000298" [label="(Call,sock_prot_inuse_add(net, sk->sk_prot, -1))"];
"1000120" [label="(Block,)"];
"1000295" [label="(Call,inet_csk(sk))"];
"1001336" [label="(Call,sk->sk_bound_dev_if && sk->sk_bound_dev_if != val)"];
"1000127" [label="(Call,*net = sock_net(sk))"];
"1001421" [label="(Call,ipv6_sock_mc_drop(sk, mreq.ipv6mr_ifindex, &mreq.ipv6mr_multiaddr))"];
"1000187" [label="(Call,lock_sock(sk))"];
"1002049" [label="(Call,release_sock(sk))"];
"1000128" [label="(Identifier,net)"];
"1000158" [label="(Call,get_user(val, (int __user *) optval))"];
"1000815" [label="(Call,!optval)"];
"1000959" [label="(Call,!optval)"];
"1000336" [label="(Call,tcp_sync_mss(sk, icsk->icsk_pmtu_cookie))"];
"1000926" [label="(Call,ipv6_update_options(sk, opt))"];
"1000122" [label="(Call,*np = inet6_sk(sk))"];
"1000162" [label="(Identifier,optval)"];
"1001497" [label="(Call,copy_from_user(&greq, optval, sizeof(struct group_req)))"];
"1001340" [label="(Call,sk->sk_bound_dev_if != val)"];
"1000153" [label="(Identifier,optlen)"];
"1001387" [label="(Call,inet_sk(sk))"];
"1001364" [label="(Identifier,np)"];
"1000954" [label="(Call,optlen < sizeof(struct in6_pktinfo) || !optval)"];
"1000125" [label="(Identifier,sk)"];
"1000359" [label="(Call,sock_prot_inuse_add(net, sk->sk_prot, -1))"];
"1000179" [label="(Call,ip6_mroute_setsockopt(sk, optname, optval, optlen))"];
"1002013" [label="(Call,val < 0)"];
"1001781" [label="(Call,ip6_ra_control(sk, val))"];
"1001362" [label="(Call,np->mcast_oif = val)"];
"1000144" [label="(Call,!optval)"];
"1001446" [label="(Call,copy_from_user(&mreq, optval, sizeof(struct ipv6_mreq)))"];
"1000174" [label="(Literal,0)"];
"1000118" [label="(MethodParameterIn,char __user *optval)"];
"1000173" [label="(Identifier,val)"];
"1000147" [label="(Identifier,val)"];
"1001351" [label="(ControlStructure,if (!dev))"];
"1001721" [label="(Call,copy_from_user(gsf, optval, optlen))"];
"1000434" [label="(Call,inet_sk(sk))"];
"1001396" [label="(Call,copy_from_user(&mreq, optval, sizeof(struct ipv6_mreq)))"];
"1000200" [label="(Call,val == PF_INET)"];
"1000159" [label="(Identifier,val)"];
"1001286" [label="(Call,dev_get_by_index(net, ifindex))"];
"1000165" [label="(Identifier,EFAULT)"];
"1000172" [label="(Call,val != 0)"];
"1001766" [label="(Call,ip6_mc_msfilter(sk, gsf))"];
"1000772" [label="(Call,inet_sk(sk))"];
"1001348" [label="(Call,dev_get_by_index(net, val))"];
"1000169" [label="(Literal,0)"];
"1000160" [label="(Call,(int __user *) optval)"];
"1000143" [label="(ControlStructure,if (!optval))"];
"1000417" [label="(Call,sk_refcnt_debug_inc(sk))"];
"1001346" [label="(Call,dev = dev_get_by_index(net, val))"];
"1000130" [label="(Identifier,sk)"];
"1001977" [label="(Call,val & (IPV6_PREFER_SRC_CGA|IPV6_PREFER_SRC_NONCGA))"];
"1001876" [label="(Call,ipv6_flowlabel_opt(sk, optval, optlen))"];
"1000279" [label="(Call,fl6_free_socklist(sk))"];
"1001267" [label="(Call,(__force __be32)val)"];
"1001794" [label="(Call,val < IPV6_PMTUDISC_DONT)"];
"1000115" [label="(MethodParameterIn,struct sock *sk)"];
"1000166" [label="(ControlStructure,else)"];
"1001350" [label="(Identifier,val)"];
"1002065" [label="(MethodReturn,static int)"];
"1001352" [label="(Call,!dev)"];
"1000129" [label="(Call,sock_net(sk))"];
"1001145" [label="(Call,ipv6_update_options(sk, opt))"];
"1001344" [label="(Identifier,val)"];
"1001924" [label="(Call,val & (IPV6_PREFER_SRC_PUBLIC|\n\t\t\t       IPV6_PREFER_SRC_TMP|\n\t\t\t       IPV6_PREFER_SRC_PUBTMP_DEFAULT))"];
"1001532" [label="(Call,ipv6_sock_mc_join(sk, greq.gr_interface,\n\t\t\t\t\t\t &psin6->sin6_addr))"];
"1001459" [label="(Call,ipv6_sock_ac_join(sk, mreq.ipv6mr_ifindex, &mreq.ipv6mr_acaddr))"];
"1001676" [label="(Call,ip6_mc_source(add, omode, sk, &greqs))"];
"1000656" [label="(Call,val < -1)"];
"1001360" [label="(Call,dev_put(dev))"];
"1001643" [label="(Call,ipv6_sock_mc_join(sk, greqs.gsr_interface,\n\t\t\t\t\t\t &psin6->sin6_addr))"];
"1000171" [label="(Identifier,valbool)"];
"1001353" [label="(Identifier,dev)"];
"1001820" [label="(Call,val < IPV6_MIN_MTU)"];
"1001099" [label="(Call,copy_from_user(opt+1, optval, optlen))"];
"1000146" [label="(Call,val = 0)"];
"1002057" [label="(Call,release_sock(sk))"];
"1000963" [label="(Call,copy_from_user(&pkt, optval, sizeof(struct in6_pktinfo)))"];
"1001956" [label="(Call,val & (IPV6_PREFER_SRC_HOME|IPV6_PREFER_SRC_COA))"];
"1001356" [label="(Identifier,retv)"];
"1001569" [label="(Call,copy_from_user(&greqs, optval, sizeof(greqs)))"];
"1000283" [label="(Call,sk_refcnt_debug_dec(sk))"];
"1001409" [label="(Call,ipv6_sock_mc_join(sk, mreq.ipv6mr_ifindex, &mreq.ipv6mr_multiaddr))"];
"1000170" [label="(Call,valbool = (val != 0))"];
"1000145" [label="(Identifier,optval)"];
"1000157" [label="(ControlStructure,if (get_user(val, (int __user *) optval)))"];
"1000167" [label="(Call,val = 0)"];
"1001544" [label="(Call,ipv6_sock_mc_drop(sk, greq.gr_interface,\n\t\t\t\t\t\t &psin6->sin6_addr))"];
"1000810" [label="(Call,optval = NULL)"];
"1000124" [label="(Call,inet6_sk(sk))"];
"1000135" [label="(Identifier,retv)"];
"1001122" [label="(Call,ip6_datagram_send_ctl(net, sk, &msg, &fl6, opt, &junk,\n\t\t\t\t\t     &junk, &junk))"];
"1000865" [label="(Call,(struct ipv6_opt_hdr __user *)optval)"];
"1001361" [label="(Identifier,dev)"];
"1000168" [label="(Identifier,val)"];
"1000281" [label="(Call,ipv6_sock_mc_close(sk))"];
"1000857" [label="(Call,sock_owned_by_user(sk))"];
"1001333" [label="(Block,)"];
"1001347" [label="(Identifier,dev)"];
"1001349" [label="(Identifier,net)"];
"1001236" [label="(Call,val != valbool)"];
"1001818" [label="(Call,val && val < IPV6_MIN_MTU)"];
"1001172" [label="(Call,val > 255)"];
"1000148" [label="(Literal,0)"];
"1000861" [label="(Call,ipv6_renew_options(sk, opt, optname,\n \t\t\t\t\t (struct ipv6_opt_hdr __user *)optval,\n \t\t\t\t\t optlen))"];
"1001205" [label="(Call,val > 255)"];
"1000229" [label="(Call,udp_sk(sk))"];
"1001846" [label="(Call,!val)"];
"1001352" -> "1001351"  [label="AST: "];
"1001352" -> "1001353"  [label="CFG: "];
"1001353" -> "1001352"  [label="AST: "];
"1001356" -> "1001352"  [label="CFG: "];
"1001361" -> "1001352"  [label="CFG: "];
"1001352" -> "1002065"  [label="DDG: dev"];
"1001352" -> "1002065"  [label="DDG: !dev"];
"1001346" -> "1001352"  [label="DDG: dev"];
"1001352" -> "1001360"  [label="DDG: dev"];
"1001346" -> "1001333"  [label="AST: "];
"1001346" -> "1001348"  [label="CFG: "];
"1001347" -> "1001346"  [label="AST: "];
"1001348" -> "1001346"  [label="AST: "];
"1001353" -> "1001346"  [label="CFG: "];
"1001346" -> "1002065"  [label="DDG: dev_get_by_index(net, val)"];
"1001348" -> "1001346"  [label="DDG: net"];
"1001348" -> "1001346"  [label="DDG: val"];
"1001348" -> "1001350"  [label="CFG: "];
"1001349" -> "1001348"  [label="AST: "];
"1001350" -> "1001348"  [label="AST: "];
"1001348" -> "1002065"  [label="DDG: net"];
"1001348" -> "1002065"  [label="DDG: val"];
"1000127" -> "1001348"  [label="DDG: net"];
"1001340" -> "1001348"  [label="DDG: val"];
"1000172" -> "1001348"  [label="DDG: val"];
"1001348" -> "1001362"  [label="DDG: val"];
"1000127" -> "1000120"  [label="AST: "];
"1000127" -> "1000129"  [label="CFG: "];
"1000128" -> "1000127"  [label="AST: "];
"1000129" -> "1000127"  [label="AST: "];
"1000135" -> "1000127"  [label="CFG: "];
"1000127" -> "1002065"  [label="DDG: sock_net(sk)"];
"1000127" -> "1002065"  [label="DDG: net"];
"1000129" -> "1000127"  [label="DDG: sk"];
"1000127" -> "1000298"  [label="DDG: net"];
"1000127" -> "1000359"  [label="DDG: net"];
"1000127" -> "1001122"  [label="DDG: net"];
"1000127" -> "1001286"  [label="DDG: net"];
"1000129" -> "1000130"  [label="CFG: "];
"1000130" -> "1000129"  [label="AST: "];
"1000129" -> "1002065"  [label="DDG: sk"];
"1000124" -> "1000129"  [label="DDG: sk"];
"1000115" -> "1000129"  [label="DDG: sk"];
"1000129" -> "1000179"  [label="DDG: sk"];
"1000129" -> "1000187"  [label="DDG: sk"];
"1000124" -> "1000122"  [label="AST: "];
"1000124" -> "1000125"  [label="CFG: "];
"1000125" -> "1000124"  [label="AST: "];
"1000122" -> "1000124"  [label="CFG: "];
"1000124" -> "1000122"  [label="DDG: sk"];
"1000115" -> "1000124"  [label="DDG: sk"];
"1000115" -> "1000114"  [label="AST: "];
"1000115" -> "1002065"  [label="DDG: sk"];
"1000115" -> "1000179"  [label="DDG: sk"];
"1000115" -> "1000187"  [label="DDG: sk"];
"1000115" -> "1000229"  [label="DDG: sk"];
"1000115" -> "1000265"  [label="DDG: sk"];
"1000115" -> "1000279"  [label="DDG: sk"];
"1000115" -> "1000281"  [label="DDG: sk"];
"1000115" -> "1000283"  [label="DDG: sk"];
"1000115" -> "1000295"  [label="DDG: sk"];
"1000115" -> "1000336"  [label="DDG: sk"];
"1000115" -> "1000417"  [label="DDG: sk"];
"1000115" -> "1000434"  [label="DDG: sk"];
"1000115" -> "1000772"  [label="DDG: sk"];
"1000115" -> "1000857"  [label="DDG: sk"];
"1000115" -> "1000861"  [label="DDG: sk"];
"1000115" -> "1000926"  [label="DDG: sk"];
"1000115" -> "1001057"  [label="DDG: sk"];
"1000115" -> "1001122"  [label="DDG: sk"];
"1000115" -> "1001145"  [label="DDG: sk"];
"1000115" -> "1001387"  [label="DDG: sk"];
"1000115" -> "1001409"  [label="DDG: sk"];
"1000115" -> "1001421"  [label="DDG: sk"];
"1000115" -> "1001459"  [label="DDG: sk"];
"1000115" -> "1001471"  [label="DDG: sk"];
"1000115" -> "1001532"  [label="DDG: sk"];
"1000115" -> "1001544"  [label="DDG: sk"];
"1000115" -> "1001643"  [label="DDG: sk"];
"1000115" -> "1001676"  [label="DDG: sk"];
"1000115" -> "1001766"  [label="DDG: sk"];
"1000115" -> "1001781"  [label="DDG: sk"];
"1000115" -> "1001876"  [label="DDG: sk"];
"1000115" -> "1001897"  [label="DDG: sk"];
"1000115" -> "1002049"  [label="DDG: sk"];
"1000115" -> "1002057"  [label="DDG: sk"];
"1001340" -> "1001336"  [label="AST: "];
"1001340" -> "1001344"  [label="CFG: "];
"1001341" -> "1001340"  [label="AST: "];
"1001344" -> "1001340"  [label="AST: "];
"1001336" -> "1001340"  [label="CFG: "];
"1001340" -> "1002065"  [label="DDG: val"];
"1001340" -> "1001336"  [label="DDG: sk->sk_bound_dev_if"];
"1001340" -> "1001336"  [label="DDG: val"];
"1000172" -> "1001340"  [label="DDG: val"];
"1000172" -> "1000170"  [label="AST: "];
"1000172" -> "1000174"  [label="CFG: "];
"1000173" -> "1000172"  [label="AST: "];
"1000174" -> "1000172"  [label="AST: "];
"1000170" -> "1000172"  [label="CFG: "];
"1000172" -> "1002065"  [label="DDG: val"];
"1000172" -> "1000170"  [label="DDG: val"];
"1000172" -> "1000170"  [label="DDG: 0"];
"1000158" -> "1000172"  [label="DDG: val"];
"1000167" -> "1000172"  [label="DDG: val"];
"1000146" -> "1000172"  [label="DDG: val"];
"1000172" -> "1000200"  [label="DDG: val"];
"1000172" -> "1000656"  [label="DDG: val"];
"1000172" -> "1001172"  [label="DDG: val"];
"1000172" -> "1001205"  [label="DDG: val"];
"1000172" -> "1001236"  [label="DDG: val"];
"1000172" -> "1001267"  [label="DDG: val"];
"1000172" -> "1001362"  [label="DDG: val"];
"1000172" -> "1001781"  [label="DDG: val"];
"1000172" -> "1001794"  [label="DDG: val"];
"1000172" -> "1001818"  [label="DDG: val"];
"1000172" -> "1001820"  [label="DDG: val"];
"1000172" -> "1001846"  [label="DDG: val"];
"1000172" -> "1001924"  [label="DDG: val"];
"1000172" -> "1001956"  [label="DDG: val"];
"1000172" -> "1001977"  [label="DDG: val"];
"1000172" -> "1002013"  [label="DDG: val"];
"1000158" -> "1000157"  [label="AST: "];
"1000158" -> "1000160"  [label="CFG: "];
"1000159" -> "1000158"  [label="AST: "];
"1000160" -> "1000158"  [label="AST: "];
"1000165" -> "1000158"  [label="CFG: "];
"1000171" -> "1000158"  [label="CFG: "];
"1000158" -> "1002065"  [label="DDG: val"];
"1000158" -> "1002065"  [label="DDG: (int __user *) optval"];
"1000158" -> "1002065"  [label="DDG: get_user(val, (int __user *) optval)"];
"1000160" -> "1000158"  [label="DDG: optval"];
"1000160" -> "1000162"  [label="CFG: "];
"1000161" -> "1000160"  [label="AST: "];
"1000162" -> "1000160"  [label="AST: "];
"1000160" -> "1002065"  [label="DDG: optval"];
"1000144" -> "1000160"  [label="DDG: optval"];
"1000118" -> "1000160"  [label="DDG: optval"];
"1000160" -> "1000179"  [label="DDG: optval"];
"1000160" -> "1000815"  [label="DDG: optval"];
"1000160" -> "1000959"  [label="DDG: optval"];
"1000160" -> "1000963"  [label="DDG: optval"];
"1000160" -> "1001099"  [label="DDG: optval"];
"1000160" -> "1001396"  [label="DDG: optval"];
"1000160" -> "1001446"  [label="DDG: optval"];
"1000160" -> "1001497"  [label="DDG: optval"];
"1000160" -> "1001569"  [label="DDG: optval"];
"1000160" -> "1001721"  [label="DDG: optval"];
"1000160" -> "1001876"  [label="DDG: optval"];
"1000160" -> "1001897"  [label="DDG: optval"];
"1000144" -> "1000143"  [label="AST: "];
"1000144" -> "1000145"  [label="CFG: "];
"1000145" -> "1000144"  [label="AST: "];
"1000147" -> "1000144"  [label="CFG: "];
"1000153" -> "1000144"  [label="CFG: "];
"1000144" -> "1002065"  [label="DDG: !optval"];
"1000144" -> "1002065"  [label="DDG: optval"];
"1000118" -> "1000144"  [label="DDG: optval"];
"1000144" -> "1000179"  [label="DDG: optval"];
"1000144" -> "1000815"  [label="DDG: optval"];
"1000144" -> "1000954"  [label="DDG: !optval"];
"1000144" -> "1000959"  [label="DDG: optval"];
"1000144" -> "1000963"  [label="DDG: optval"];
"1000144" -> "1001099"  [label="DDG: optval"];
"1000144" -> "1001396"  [label="DDG: optval"];
"1000144" -> "1001446"  [label="DDG: optval"];
"1000144" -> "1001497"  [label="DDG: optval"];
"1000144" -> "1001569"  [label="DDG: optval"];
"1000144" -> "1001721"  [label="DDG: optval"];
"1000144" -> "1001876"  [label="DDG: optval"];
"1000144" -> "1001897"  [label="DDG: optval"];
"1000118" -> "1000114"  [label="AST: "];
"1000118" -> "1002065"  [label="DDG: optval"];
"1000118" -> "1000179"  [label="DDG: optval"];
"1000118" -> "1000810"  [label="DDG: optval"];
"1000118" -> "1000815"  [label="DDG: optval"];
"1000118" -> "1000865"  [label="DDG: optval"];
"1000118" -> "1000959"  [label="DDG: optval"];
"1000118" -> "1000963"  [label="DDG: optval"];
"1000118" -> "1001099"  [label="DDG: optval"];
"1000118" -> "1001396"  [label="DDG: optval"];
"1000118" -> "1001446"  [label="DDG: optval"];
"1000118" -> "1001497"  [label="DDG: optval"];
"1000118" -> "1001569"  [label="DDG: optval"];
"1000118" -> "1001721"  [label="DDG: optval"];
"1000118" -> "1001876"  [label="DDG: optval"];
"1000118" -> "1001897"  [label="DDG: optval"];
"1000167" -> "1000166"  [label="AST: "];
"1000167" -> "1000169"  [label="CFG: "];
"1000168" -> "1000167"  [label="AST: "];
"1000169" -> "1000167"  [label="AST: "];
"1000171" -> "1000167"  [label="CFG: "];
"1000146" -> "1000143"  [label="AST: "];
"1000146" -> "1000148"  [label="CFG: "];
"1000147" -> "1000146"  [label="AST: "];
"1000148" -> "1000146"  [label="AST: "];
"1000171" -> "1000146"  [label="CFG: "];
"1001360" -> "1001333"  [label="AST: "];
"1001360" -> "1001361"  [label="CFG: "];
"1001361" -> "1001360"  [label="AST: "];
"1001364" -> "1001360"  [label="CFG: "];
"1001360" -> "1002065"  [label="DDG: dev_put(dev)"];
"1001360" -> "1002065"  [label="DDG: dev"];
}
