digraph "0_src_779974d35b4859c07bc3cb8a12c74b43b0a7d1e0_1@pointer" {
"1000298" [label="(Call,sshkey_ssh_name(key))"];
"1000276" [label="(Call,auth2_key_already_used(authctxt, key))"];
"1000109" [label="(Call,*authctxt = ssh->authctxt)"];
"1000232" [label="(Call,key == NULL)"];
"1000125" [label="(Call,*key = NULL)"];
"1000179" [label="(Call,sshpkt_get_cstring(ssh, &pkalg, NULL))"];
"1000170" [label="(Call,sshpkt_get_u8(ssh, &have_sig))"];
"1000106" [label="(MethodParameterIn,struct ssh *ssh)"];
"1000295" [label="(Call,logit(\"%s: key type %s not in PubkeyAcceptedKeyTypes\",\n\t\t    __func__, sshkey_ssh_name(key)))"];
"1000673" [label="(Call,debug(\"%s: key options inconsistent with existing\", __func__))"];
"1000679" [label="(Call,debug2(\"%s: authenticated %d pkalg %s\", __func__, authenticated, pkalg))"];
"1000690" [label="(Call,free(pkalg))"];
"1000700" [label="(Return,return authenticated;)"];
"1000686" [label="(Call,sshkey_free(key))"];
"1000195" [label="(Call,fatal(\"%s: parse request failed: %s\", __func__, ssh_err(r)))"];
"1000110" [label="(Identifier,authctxt)"];
"1000276" [label="(Call,auth2_key_already_used(authctxt, key))"];
"1000633" [label="(Call,sshpkt_put_string(ssh, pkblob, blen))"];
"1000225" [label="(Call,error(\"%s: could not parse key: %s\", __func__, ssh_err(r)))"];
"1000172" [label="(Call,&have_sig)"];
"1000281" [label="(Literal,\"refusing previously-used %s key\")"];
"1000234" [label="(Identifier,NULL)"];
"1000130" [label="(Identifier,pkalg)"];
"1000489" [label="(Call,sshbuf_put_cstring(b, pkalg))"];
"1000180" [label="(Identifier,ssh)"];
"1000248" [label="(Call,error(\"%s: type mismatch for decoded key \"\n\t\t    \"(received %d, expected %d)\", __func__, key->type, pktype))"];
"1000351" [label="(Call,sshpkt_get_end(ssh))"];
"1000116" [label="(Identifier,pw)"];
"1000681" [label="(Identifier,__func__)"];
"1000176" [label="(Call,(r = sshpkt_get_cstring(ssh, &pkalg, NULL)) != 0)"];
"1000417" [label="(Call,debug2(\"%s: disabled because of invalid user\",\n\t\t\t    __func__))"];
"1000558" [label="(Call,debug(\"%s: test pkalg %s pkblob %s%s%s\",\n\t\t    __func__, pkalg, key_s,\n\t\t    ca_s == NULL ? \"\" : \" CA \",\n\t\t    ca_s == NULL ? \"\" : ca_s))"];
"1000689" [label="(Identifier,userstyle)"];
"1000188" [label="(Call,sshpkt_get_string(ssh, &pkblob, &blen))"];
"1000181" [label="(Call,&pkalg)"];
"1000579" [label="(Call,sshpkt_get_end(ssh))"];
"1000384" [label="(Call,fatal(\"%s: sshbuf_put session id: %s\",\n\t\t\t\t    __func__, ssh_err(r)))"];
"1000275" [label="(ControlStructure,if (auth2_key_already_used(authctxt, key)))"];
"1000700" [label="(Return,return authenticated;)"];
"1000683" [label="(Identifier,pkalg)"];
"1000651" [label="(Call,fatal(\"%s: %s\", __func__, ssh_err(r)))"];
"1000687" [label="(Identifier,key)"];
"1000126" [label="(Identifier,key)"];
"1000682" [label="(Identifier,authenticated)"];
"1000107" [label="(Block,)"];
"1000676" [label="(Call,authenticated = 0)"];
"1000664" [label="(Call,authenticated == 1)"];
"1000690" [label="(Call,free(pkalg))"];
"1000319" [label="(Call,debug3(\"%s: have %s signature for %s%s%s\",\n\t\t    __func__, pkalg, key_s,\n\t\t    ca_s == NULL ? \"\" : \" CA \",\n\t\t    ca_s == NULL ? \"\" : ca_s))"];
"1000177" [label="(Call,r = sshpkt_get_cstring(ssh, &pkalg, NULL))"];
"1000106" [label="(MethodParameterIn,struct ssh *ssh)"];
"1000168" [label="(Call,r = sshpkt_get_u8(ssh, &have_sig))"];
"1000673" [label="(Call,debug(\"%s: key options inconsistent with existing\", __func__))"];
"1000702" [label="(MethodReturn,RET)"];
"1000111" [label="(Call,ssh->authctxt)"];
"1000297" [label="(Identifier,__func__)"];
"1000668" [label="(Call,auth_activate_options(ssh, authopts))"];
"1000125" [label="(Call,*key = NULL)"];
"1000295" [label="(Call,logit(\"%s: key type %s not in PubkeyAcceptedKeyTypes\",\n\t\t    __func__, sshkey_ssh_name(key)))"];
"1000685" [label="(Identifier,authopts)"];
"1000278" [label="(Identifier,key)"];
"1000236" [label="(Call,error(\"%s: cannot decode key: %s\", __func__, pkalg))"];
"1000277" [label="(Identifier,authctxt)"];
"1000701" [label="(Identifier,authenticated)"];
"1000233" [label="(Identifier,key)"];
"1000617" [label="(Call,sshpkt_start(ssh, SSH2_MSG_USERAUTH_PK_OK))"];
"1000294" [label="(Block,)"];
"1000282" [label="(Call,sshkey_type(key))"];
"1000675" [label="(Identifier,__func__)"];
"1000232" [label="(Call,key == NULL)"];
"1000582" [label="(Call,fatal(\"%s: %s\", __func__, ssh_err(r)))"];
"1000672" [label="(Block,)"];
"1000365" [label="(Call,fatal(\"%s: sshbuf_new failed\", __func__))"];
"1000171" [label="(Identifier,ssh)"];
"1000686" [label="(Call,sshkey_free(key))"];
"1000325" [label="(Call,ca_s == NULL)"];
"1000209" [label="(Call,verbose(\"%s: unsupported public key algorithm: %s\",\n\t\t    __func__, pkalg))"];
"1000244" [label="(Identifier,key)"];
"1000625" [label="(Call,sshpkt_put_cstring(ssh, pkalg))"];
"1000341" [label="(Call,sshpkt_get_string(ssh, &sig, &slen))"];
"1000300" [label="(ControlStructure,goto done;)"];
"1000170" [label="(Call,sshpkt_get_u8(ssh, &have_sig))"];
"1000306" [label="(Call,sshkey_is_cert(key))"];
"1000354" [label="(Call,fatal(\"%s: %s\", __func__, ssh_err(r)))"];
"1000693" [label="(Identifier,pkblob)"];
"1000674" [label="(Literal,\"%s: key options inconsistent with existing\")"];
"1000677" [label="(Identifier,authenticated)"];
"1000179" [label="(Call,sshpkt_get_cstring(ssh, &pkalg, NULL))"];
"1000183" [label="(Identifier,NULL)"];
"1000296" [label="(Literal,\"%s: key type %s not in PubkeyAcceptedKeyTypes\")"];
"1000552" [label="(Call,auth2_record_key(authctxt, authenticated, key))"];
"1000231" [label="(ControlStructure,if (key == NULL))"];
"1000299" [label="(Identifier,key)"];
"1000298" [label="(Call,sshkey_ssh_name(key))"];
"1000303" [label="(Call,format_key(key))"];
"1000202" [label="(Call,sshkey_type_from_name(pkalg))"];
"1000515" [label="(Call,user_key_allowed(ssh, pw, key, 1, &authopts))"];
"1000642" [label="(Call,sshpkt_send(ssh))"];
"1000605" [label="(Call,user_key_allowed(ssh, pw, key, 0, NULL))"];
"1000648" [label="(Call,ssh_packet_write_wait(ssh))"];
"1000679" [label="(Call,debug2(\"%s: authenticated %d pkalg %s\", __func__, authenticated, pkalg))"];
"1000501" [label="(Call,fatal(\"%s: build packet failed: %s\",\n\t\t\t    __func__, ssh_err(r)))"];
"1000237" [label="(Literal,\"%s: cannot decode key: %s\")"];
"1000599" [label="(Call,debug2(\"%s: disabled because of invalid user\",\n\t\t\t    __func__))"];
"1000691" [label="(Identifier,pkalg)"];
"1000127" [label="(Identifier,NULL)"];
"1000109" [label="(Call,*authctxt = ssh->authctxt)"];
"1000680" [label="(Literal,\"%s: authenticated %d pkalg %s\")"];
"1000564" [label="(Call,ca_s == NULL)"];
"1000287" [label="(Call,match_pattern_list(pkalg, options.pubkey_key_types, 0))"];
"1000167" [label="(Call,(r = sshpkt_get_u8(ssh, &have_sig)) != 0)"];
"1000400" [label="(Call,fatal(\"%s: sshbuf_put_string session id: %s\",\n \t\t\t\t    __func__, ssh_err(r)))"];
"1000288" [label="(Identifier,pkalg)"];
"1000298" -> "1000295"  [label="AST: "];
"1000298" -> "1000299"  [label="CFG: "];
"1000299" -> "1000298"  [label="AST: "];
"1000295" -> "1000298"  [label="CFG: "];
"1000298" -> "1000295"  [label="DDG: "];
"1000276" -> "1000298"  [label="DDG: "];
"1000298" -> "1000686"  [label="DDG: "];
"1000276" -> "1000275"  [label="AST: "];
"1000276" -> "1000278"  [label="CFG: "];
"1000277" -> "1000276"  [label="AST: "];
"1000278" -> "1000276"  [label="AST: "];
"1000281" -> "1000276"  [label="CFG: "];
"1000288" -> "1000276"  [label="CFG: "];
"1000276" -> "1000702"  [label="DDG: "];
"1000276" -> "1000702"  [label="DDG: "];
"1000109" -> "1000276"  [label="DDG: "];
"1000232" -> "1000276"  [label="DDG: "];
"1000276" -> "1000282"  [label="DDG: "];
"1000276" -> "1000303"  [label="DDG: "];
"1000276" -> "1000552"  [label="DDG: "];
"1000109" -> "1000107"  [label="AST: "];
"1000109" -> "1000111"  [label="CFG: "];
"1000110" -> "1000109"  [label="AST: "];
"1000111" -> "1000109"  [label="AST: "];
"1000116" -> "1000109"  [label="CFG: "];
"1000109" -> "1000702"  [label="DDG: "];
"1000109" -> "1000702"  [label="DDG: "];
"1000232" -> "1000231"  [label="AST: "];
"1000232" -> "1000234"  [label="CFG: "];
"1000233" -> "1000232"  [label="AST: "];
"1000234" -> "1000232"  [label="AST: "];
"1000237" -> "1000232"  [label="CFG: "];
"1000244" -> "1000232"  [label="CFG: "];
"1000232" -> "1000702"  [label="DDG: "];
"1000232" -> "1000702"  [label="DDG: "];
"1000125" -> "1000232"  [label="DDG: "];
"1000179" -> "1000232"  [label="DDG: "];
"1000232" -> "1000325"  [label="DDG: "];
"1000232" -> "1000564"  [label="DDG: "];
"1000232" -> "1000686"  [label="DDG: "];
"1000125" -> "1000107"  [label="AST: "];
"1000125" -> "1000127"  [label="CFG: "];
"1000126" -> "1000125"  [label="AST: "];
"1000127" -> "1000125"  [label="AST: "];
"1000130" -> "1000125"  [label="CFG: "];
"1000125" -> "1000686"  [label="DDG: "];
"1000179" -> "1000177"  [label="AST: "];
"1000179" -> "1000183"  [label="CFG: "];
"1000180" -> "1000179"  [label="AST: "];
"1000181" -> "1000179"  [label="AST: "];
"1000183" -> "1000179"  [label="AST: "];
"1000177" -> "1000179"  [label="CFG: "];
"1000179" -> "1000702"  [label="DDG: "];
"1000179" -> "1000702"  [label="DDG: "];
"1000179" -> "1000702"  [label="DDG: "];
"1000179" -> "1000176"  [label="DDG: "];
"1000179" -> "1000176"  [label="DDG: "];
"1000179" -> "1000176"  [label="DDG: "];
"1000179" -> "1000177"  [label="DDG: "];
"1000179" -> "1000177"  [label="DDG: "];
"1000179" -> "1000177"  [label="DDG: "];
"1000170" -> "1000179"  [label="DDG: "];
"1000106" -> "1000179"  [label="DDG: "];
"1000179" -> "1000188"  [label="DDG: "];
"1000179" -> "1000341"  [label="DDG: "];
"1000179" -> "1000579"  [label="DDG: "];
"1000179" -> "1000668"  [label="DDG: "];
"1000170" -> "1000168"  [label="AST: "];
"1000170" -> "1000172"  [label="CFG: "];
"1000171" -> "1000170"  [label="AST: "];
"1000172" -> "1000170"  [label="AST: "];
"1000168" -> "1000170"  [label="CFG: "];
"1000170" -> "1000702"  [label="DDG: "];
"1000170" -> "1000702"  [label="DDG: "];
"1000170" -> "1000167"  [label="DDG: "];
"1000170" -> "1000167"  [label="DDG: "];
"1000170" -> "1000168"  [label="DDG: "];
"1000170" -> "1000168"  [label="DDG: "];
"1000106" -> "1000170"  [label="DDG: "];
"1000170" -> "1000341"  [label="DDG: "];
"1000170" -> "1000579"  [label="DDG: "];
"1000170" -> "1000668"  [label="DDG: "];
"1000106" -> "1000105"  [label="AST: "];
"1000106" -> "1000702"  [label="DDG: "];
"1000106" -> "1000188"  [label="DDG: "];
"1000106" -> "1000341"  [label="DDG: "];
"1000106" -> "1000351"  [label="DDG: "];
"1000106" -> "1000515"  [label="DDG: "];
"1000106" -> "1000579"  [label="DDG: "];
"1000106" -> "1000605"  [label="DDG: "];
"1000106" -> "1000617"  [label="DDG: "];
"1000106" -> "1000625"  [label="DDG: "];
"1000106" -> "1000633"  [label="DDG: "];
"1000106" -> "1000642"  [label="DDG: "];
"1000106" -> "1000648"  [label="DDG: "];
"1000106" -> "1000668"  [label="DDG: "];
"1000295" -> "1000294"  [label="AST: "];
"1000296" -> "1000295"  [label="AST: "];
"1000297" -> "1000295"  [label="AST: "];
"1000300" -> "1000295"  [label="CFG: "];
"1000295" -> "1000702"  [label="DDG: "];
"1000295" -> "1000702"  [label="DDG: "];
"1000195" -> "1000295"  [label="DDG: "];
"1000295" -> "1000673"  [label="DDG: "];
"1000295" -> "1000679"  [label="DDG: "];
"1000673" -> "1000672"  [label="AST: "];
"1000673" -> "1000675"  [label="CFG: "];
"1000674" -> "1000673"  [label="AST: "];
"1000675" -> "1000673"  [label="AST: "];
"1000677" -> "1000673"  [label="CFG: "];
"1000673" -> "1000702"  [label="DDG: "];
"1000354" -> "1000673"  [label="DDG: "];
"1000558" -> "1000673"  [label="DDG: "];
"1000225" -> "1000673"  [label="DDG: "];
"1000501" -> "1000673"  [label="DDG: "];
"1000582" -> "1000673"  [label="DDG: "];
"1000651" -> "1000673"  [label="DDG: "];
"1000365" -> "1000673"  [label="DDG: "];
"1000195" -> "1000673"  [label="DDG: "];
"1000209" -> "1000673"  [label="DDG: "];
"1000417" -> "1000673"  [label="DDG: "];
"1000599" -> "1000673"  [label="DDG: "];
"1000236" -> "1000673"  [label="DDG: "];
"1000400" -> "1000673"  [label="DDG: "];
"1000384" -> "1000673"  [label="DDG: "];
"1000248" -> "1000673"  [label="DDG: "];
"1000319" -> "1000673"  [label="DDG: "];
"1000673" -> "1000679"  [label="DDG: "];
"1000679" -> "1000107"  [label="AST: "];
"1000679" -> "1000683"  [label="CFG: "];
"1000680" -> "1000679"  [label="AST: "];
"1000681" -> "1000679"  [label="AST: "];
"1000682" -> "1000679"  [label="AST: "];
"1000683" -> "1000679"  [label="AST: "];
"1000685" -> "1000679"  [label="CFG: "];
"1000679" -> "1000702"  [label="DDG: "];
"1000679" -> "1000702"  [label="DDG: "];
"1000679" -> "1000702"  [label="DDG: "];
"1000354" -> "1000679"  [label="DDG: "];
"1000558" -> "1000679"  [label="DDG: "];
"1000558" -> "1000679"  [label="DDG: "];
"1000225" -> "1000679"  [label="DDG: "];
"1000501" -> "1000679"  [label="DDG: "];
"1000582" -> "1000679"  [label="DDG: "];
"1000651" -> "1000679"  [label="DDG: "];
"1000365" -> "1000679"  [label="DDG: "];
"1000195" -> "1000679"  [label="DDG: "];
"1000209" -> "1000679"  [label="DDG: "];
"1000209" -> "1000679"  [label="DDG: "];
"1000417" -> "1000679"  [label="DDG: "];
"1000599" -> "1000679"  [label="DDG: "];
"1000236" -> "1000679"  [label="DDG: "];
"1000236" -> "1000679"  [label="DDG: "];
"1000400" -> "1000679"  [label="DDG: "];
"1000384" -> "1000679"  [label="DDG: "];
"1000248" -> "1000679"  [label="DDG: "];
"1000319" -> "1000679"  [label="DDG: "];
"1000319" -> "1000679"  [label="DDG: "];
"1000676" -> "1000679"  [label="DDG: "];
"1000664" -> "1000679"  [label="DDG: "];
"1000625" -> "1000679"  [label="DDG: "];
"1000202" -> "1000679"  [label="DDG: "];
"1000489" -> "1000679"  [label="DDG: "];
"1000287" -> "1000679"  [label="DDG: "];
"1000679" -> "1000690"  [label="DDG: "];
"1000679" -> "1000700"  [label="DDG: "];
"1000690" -> "1000107"  [label="AST: "];
"1000690" -> "1000691"  [label="CFG: "];
"1000691" -> "1000690"  [label="AST: "];
"1000693" -> "1000690"  [label="CFG: "];
"1000690" -> "1000702"  [label="DDG: "];
"1000700" -> "1000107"  [label="AST: "];
"1000700" -> "1000701"  [label="CFG: "];
"1000701" -> "1000700"  [label="AST: "];
"1000702" -> "1000700"  [label="CFG: "];
"1000700" -> "1000702"  [label="DDG: "];
"1000701" -> "1000700"  [label="DDG: "];
"1000686" -> "1000107"  [label="AST: "];
"1000686" -> "1000687"  [label="CFG: "];
"1000687" -> "1000686"  [label="AST: "];
"1000689" -> "1000686"  [label="CFG: "];
"1000686" -> "1000702"  [label="DDG: "];
"1000686" -> "1000702"  [label="DDG: "];
"1000306" -> "1000686"  [label="DDG: "];
"1000282" -> "1000686"  [label="DDG: "];
"1000605" -> "1000686"  [label="DDG: "];
"1000552" -> "1000686"  [label="DDG: "];
}
