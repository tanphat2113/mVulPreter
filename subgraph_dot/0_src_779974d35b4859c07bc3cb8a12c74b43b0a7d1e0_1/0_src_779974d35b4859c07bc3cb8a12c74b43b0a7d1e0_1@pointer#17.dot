digraph "0_src_779974d35b4859c07bc3cb8a12c74b43b0a7d1e0_1@pointer" {
"1000149" [label="(Call,*sig = NULL)"];
"1000524" [label="(Call,sshkey_verify(key, sig, slen,\n\t\t    sshbuf_ptr(b), sshbuf_len(b),\n\t\t    (ssh->compat & SSH_BUG_SIGTYPE) == 0 ? pkalg : NULL,\n\t\t    ssh->compat))"];
"1000523" [label="(Call,PRIVSEP(sshkey_verify(key, sig, slen,\n\t\t    sshbuf_ptr(b), sshbuf_len(b),\n\t\t    (ssh->compat & SSH_BUG_SIGTYPE) == 0 ? pkalg : NULL,\n\t\t    ssh->compat)))"];
"1000522" [label="(Call,PRIVSEP(sshkey_verify(key, sig, slen,\n\t\t    sshbuf_ptr(b), sshbuf_len(b),\n\t\t    (ssh->compat & SSH_BUG_SIGTYPE) == 0 ? pkalg : NULL,\n\t\t    ssh->compat)) == 0)"];
"1000513" [label="(Call,PRIVSEP(user_key_allowed(ssh, pw, key, 1, &authopts)) &&\n\t\t    PRIVSEP(sshkey_verify(key, sig, slen,\n\t\t    sshbuf_ptr(b), sshbuf_len(b),\n\t\t    (ssh->compat & SSH_BUG_SIGTYPE) == 0 ? pkalg : NULL,\n\t\t    ssh->compat)) == 0)"];
"1000552" [label="(Call,auth2_record_key(authctxt, authenticated, key))"];
"1000664" [label="(Call,authenticated == 1)"];
"1000663" [label="(Call,authenticated == 1 && auth_activate_options(ssh, authopts) != 0)"];
"1000679" [label="(Call,debug2(\"%s: authenticated %d pkalg %s\", __func__, authenticated, pkalg))"];
"1000690" [label="(Call,free(pkalg))"];
"1000700" [label="(Return,return authenticated;)"];
"1000686" [label="(Call,sshkey_free(key))"];
"1000698" [label="(Call,free(sig))"];
"1000547" [label="(Call,authenticated = 1)"];
"1000666" [label="(Literal,1)"];
"1000195" [label="(Call,fatal(\"%s: parse request failed: %s\", __func__, ssh_err(r)))"];
"1000276" [label="(Call,auth2_key_already_used(authctxt, key))"];
"1000225" [label="(Call,error(\"%s: could not parse key: %s\", __func__, ssh_err(r)))"];
"1000489" [label="(Call,sshbuf_put_cstring(b, pkalg))"];
"1000665" [label="(Identifier,authenticated)"];
"1000248" [label="(Call,error(\"%s: type mismatch for decoded key \"\n\t\t    \"(received %d, expected %d)\", __func__, key->type, pktype))"];
"1000681" [label="(Identifier,__func__)"];
"1000528" [label="(Call,sshbuf_ptr(b))"];
"1000150" [label="(Identifier,sig)"];
"1000524" [label="(Call,sshkey_verify(key, sig, slen,\n\t\t    sshbuf_ptr(b), sshbuf_len(b),\n\t\t    (ssh->compat & SSH_BUG_SIGTYPE) == 0 ? pkalg : NULL,\n\t\t    ssh->compat))"];
"1000417" [label="(Call,debug2(\"%s: disabled because of invalid user\",\n\t\t\t    __func__))"];
"1000558" [label="(Call,debug(\"%s: test pkalg %s pkblob %s%s%s\",\n\t\t    __func__, pkalg, key_s,\n\t\t    ca_s == NULL ? \"\" : \" CA \",\n\t\t    ca_s == NULL ? \"\" : ca_s))"];
"1000689" [label="(Identifier,userstyle)"];
"1000384" [label="(Call,fatal(\"%s: sshbuf_put session id: %s\",\n\t\t\t\t    __func__, ssh_err(r)))"];
"1000700" [label="(Return,return authenticated;)"];
"1000534" [label="(Call,ssh->compat & SSH_BUG_SIGTYPE)"];
"1000530" [label="(Call,sshbuf_len(b))"];
"1000551" [label="(Identifier,b)"];
"1000683" [label="(Identifier,pkalg)"];
"1000651" [label="(Call,fatal(\"%s: %s\", __func__, ssh_err(r)))"];
"1000687" [label="(Identifier,key)"];
"1000509" [label="(Call,authenticated = 0)"];
"1000151" [label="(Identifier,NULL)"];
"1000527" [label="(Identifier,slen)"];
"1000360" [label="(Call,(b = sshbuf_new()) == NULL)"];
"1000682" [label="(Identifier,authenticated)"];
"1000107" [label="(Block,)"];
"1000664" [label="(Call,authenticated == 1)"];
"1000676" [label="(Call,authenticated = 0)"];
"1000522" [label="(Call,PRIVSEP(sshkey_verify(key, sig, slen,\n\t\t    sshbuf_ptr(b), sshbuf_len(b),\n\t\t    (ssh->compat & SSH_BUG_SIGTYPE) == 0 ? pkalg : NULL,\n\t\t    ssh->compat)) == 0)"];
"1000545" [label="(Literal,0)"];
"1000690" [label="(Call,free(pkalg))"];
"1000319" [label="(Call,debug3(\"%s: have %s signature for %s%s%s\",\n\t\t    __func__, pkalg, key_s,\n\t\t    ca_s == NULL ? \"\" : \" CA \",\n\t\t    ca_s == NULL ? \"\" : ca_s))"];
"1000512" [label="(ControlStructure,if (PRIVSEP(user_key_allowed(ssh, pw, key, 1, &authopts)) &&\n\t\t    PRIVSEP(sshkey_verify(key, sig, slen,\n\t\t    sshbuf_ptr(b), sshbuf_len(b),\n\t\t    (ssh->compat & SSH_BUG_SIGTYPE) == 0 ? pkalg : NULL,\n\t\t    ssh->compat)) == 0))"];
"1000673" [label="(Call,debug(\"%s: key options inconsistent with existing\", __func__))"];
"1000702" [label="(MethodReturn,RET)"];
"1000532" [label="(Call,(ssh->compat & SSH_BUG_SIGTYPE) == 0 ? pkalg : NULL)"];
"1000548" [label="(Identifier,authenticated)"];
"1000526" [label="(Identifier,sig)"];
"1000149" [label="(Call,*sig = NULL)"];
"1000514" [label="(Call,PRIVSEP(user_key_allowed(ssh, pw, key, 1, &authopts)))"];
"1000125" [label="(Call,*key = NULL)"];
"1000295" [label="(Call,logit(\"%s: key type %s not in PubkeyAcceptedKeyTypes\",\n\t\t    __func__, sshkey_ssh_name(key)))"];
"1000685" [label="(Identifier,authopts)"];
"1000513" [label="(Call,PRIVSEP(user_key_allowed(ssh, pw, key, 1, &authopts)) &&\n\t\t    PRIVSEP(sshkey_verify(key, sig, slen,\n\t\t    sshbuf_ptr(b), sshbuf_len(b),\n\t\t    (ssh->compat & SSH_BUG_SIGTYPE) == 0 ? pkalg : NULL,\n\t\t    ssh->compat)) == 0)"];
"1000555" [label="(Identifier,key)"];
"1000318" [label="(Block,)"];
"1000236" [label="(Call,error(\"%s: cannot decode key: %s\", __func__, pkalg))"];
"1000661" [label="(JumpTarget,done:)"];
"1000411" [label="(Call,authctxt->user == NULL)"];
"1000663" [label="(Call,authenticated == 1 && auth_activate_options(ssh, authopts) != 0)"];
"1000701" [label="(Identifier,authenticated)"];
"1000698" [label="(Call,free(sig))"];
"1000667" [label="(Call,auth_activate_options(ssh, authopts) != 0)"];
"1000282" [label="(Call,sshkey_type(key))"];
"1000158" [label="(Call,authenticated = 0)"];
"1000542" [label="(Call,ssh->compat)"];
"1000232" [label="(Call,key == NULL)"];
"1000699" [label="(Identifier,sig)"];
"1000582" [label="(Call,fatal(\"%s: %s\", __func__, ssh_err(r)))"];
"1000365" [label="(Call,fatal(\"%s: sshbuf_new failed\", __func__))"];
"1000686" [label="(Call,sshkey_free(key))"];
"1000554" [label="(Identifier,authenticated)"];
"1000209" [label="(Call,verbose(\"%s: unsupported public key algorithm: %s\",\n\t\t    __func__, pkalg))"];
"1000662" [label="(ControlStructure,if (authenticated == 1 && auth_activate_options(ssh, authopts) != 0))"];
"1000625" [label="(Call,sshpkt_put_cstring(ssh, pkalg))"];
"1000523" [label="(Call,PRIVSEP(sshkey_verify(key, sig, slen,\n\t\t    sshbuf_ptr(b), sshbuf_len(b),\n\t\t    (ssh->compat & SSH_BUG_SIGTYPE) == 0 ? pkalg : NULL,\n\t\t    ssh->compat)))"];
"1000306" [label="(Call,sshkey_is_cert(key))"];
"1000354" [label="(Call,fatal(\"%s: %s\", __func__, ssh_err(r)))"];
"1000693" [label="(Identifier,pkblob)"];
"1000674" [label="(Literal,\"%s: key options inconsistent with existing\")"];
"1000552" [label="(Call,auth2_record_key(authctxt, authenticated, key))"];
"1000525" [label="(Identifier,key)"];
"1000298" [label="(Call,sshkey_ssh_name(key))"];
"1000202" [label="(Call,sshkey_type_from_name(pkalg))"];
"1000553" [label="(Identifier,authctxt)"];
"1000515" [label="(Call,user_key_allowed(ssh, pw, key, 1, &authopts))"];
"1000605" [label="(Call,user_key_allowed(ssh, pw, key, 0, NULL))"];
"1000679" [label="(Call,debug2(\"%s: authenticated %d pkalg %s\", __func__, authenticated, pkalg))"];
"1000501" [label="(Call,fatal(\"%s: build packet failed: %s\",\n\t\t\t    __func__, ssh_err(r)))"];
"1000599" [label="(Call,debug2(\"%s: disabled because of invalid user\",\n\t\t\t    __func__))"];
"1000669" [label="(Identifier,ssh)"];
"1000691" [label="(Identifier,pkalg)"];
"1000159" [label="(Identifier,authenticated)"];
"1000680" [label="(Literal,\"%s: authenticated %d pkalg %s\")"];
"1000287" [label="(Call,match_pattern_list(pkalg, options.pubkey_key_types, 0))"];
"1000400" [label="(Call,fatal(\"%s: sshbuf_put_string session id: %s\",\n \t\t\t\t    __func__, ssh_err(r)))"];
"1000149" -> "1000107"  [label="AST: "];
"1000149" -> "1000151"  [label="CFG: "];
"1000150" -> "1000149"  [label="AST: "];
"1000151" -> "1000149"  [label="AST: "];
"1000159" -> "1000149"  [label="CFG: "];
"1000149" -> "1000524"  [label="DDG: "];
"1000149" -> "1000698"  [label="DDG: "];
"1000524" -> "1000523"  [label="AST: "];
"1000524" -> "1000542"  [label="CFG: "];
"1000525" -> "1000524"  [label="AST: "];
"1000526" -> "1000524"  [label="AST: "];
"1000527" -> "1000524"  [label="AST: "];
"1000528" -> "1000524"  [label="AST: "];
"1000530" -> "1000524"  [label="AST: "];
"1000532" -> "1000524"  [label="AST: "];
"1000542" -> "1000524"  [label="AST: "];
"1000523" -> "1000524"  [label="CFG: "];
"1000524" -> "1000702"  [label="DDG: "];
"1000524" -> "1000702"  [label="DDG: "];
"1000524" -> "1000702"  [label="DDG: "];
"1000524" -> "1000702"  [label="DDG: "];
"1000524" -> "1000702"  [label="DDG: "];
"1000524" -> "1000523"  [label="DDG: "];
"1000524" -> "1000523"  [label="DDG: "];
"1000524" -> "1000523"  [label="DDG: "];
"1000524" -> "1000523"  [label="DDG: "];
"1000524" -> "1000523"  [label="DDG: "];
"1000524" -> "1000523"  [label="DDG: "];
"1000524" -> "1000523"  [label="DDG: "];
"1000515" -> "1000524"  [label="DDG: "];
"1000528" -> "1000524"  [label="DDG: "];
"1000530" -> "1000524"  [label="DDG: "];
"1000489" -> "1000524"  [label="DDG: "];
"1000319" -> "1000524"  [label="DDG: "];
"1000360" -> "1000524"  [label="DDG: "];
"1000411" -> "1000524"  [label="DDG: "];
"1000534" -> "1000524"  [label="DDG: "];
"1000524" -> "1000552"  [label="DDG: "];
"1000524" -> "1000698"  [label="DDG: "];
"1000523" -> "1000522"  [label="AST: "];
"1000545" -> "1000523"  [label="CFG: "];
"1000523" -> "1000702"  [label="DDG: "];
"1000523" -> "1000522"  [label="DDG: "];
"1000522" -> "1000513"  [label="AST: "];
"1000522" -> "1000545"  [label="CFG: "];
"1000545" -> "1000522"  [label="AST: "];
"1000513" -> "1000522"  [label="CFG: "];
"1000522" -> "1000702"  [label="DDG: "];
"1000522" -> "1000513"  [label="DDG: "];
"1000522" -> "1000513"  [label="DDG: "];
"1000513" -> "1000512"  [label="AST: "];
"1000513" -> "1000514"  [label="CFG: "];
"1000514" -> "1000513"  [label="AST: "];
"1000548" -> "1000513"  [label="CFG: "];
"1000551" -> "1000513"  [label="CFG: "];
"1000513" -> "1000702"  [label="DDG: "];
"1000513" -> "1000702"  [label="DDG: "];
"1000513" -> "1000702"  [label="DDG: "];
"1000514" -> "1000513"  [label="DDG: "];
"1000552" -> "1000318"  [label="AST: "];
"1000552" -> "1000555"  [label="CFG: "];
"1000553" -> "1000552"  [label="AST: "];
"1000554" -> "1000552"  [label="AST: "];
"1000555" -> "1000552"  [label="AST: "];
"1000661" -> "1000552"  [label="CFG: "];
"1000552" -> "1000702"  [label="DDG: "];
"1000552" -> "1000702"  [label="DDG: "];
"1000276" -> "1000552"  [label="DDG: "];
"1000547" -> "1000552"  [label="DDG: "];
"1000509" -> "1000552"  [label="DDG: "];
"1000515" -> "1000552"  [label="DDG: "];
"1000552" -> "1000664"  [label="DDG: "];
"1000552" -> "1000686"  [label="DDG: "];
"1000664" -> "1000663"  [label="AST: "];
"1000664" -> "1000666"  [label="CFG: "];
"1000665" -> "1000664"  [label="AST: "];
"1000666" -> "1000664"  [label="AST: "];
"1000669" -> "1000664"  [label="CFG: "];
"1000663" -> "1000664"  [label="CFG: "];
"1000664" -> "1000663"  [label="DDG: "];
"1000664" -> "1000663"  [label="DDG: "];
"1000158" -> "1000664"  [label="DDG: "];
"1000664" -> "1000679"  [label="DDG: "];
"1000663" -> "1000662"  [label="AST: "];
"1000663" -> "1000667"  [label="CFG: "];
"1000667" -> "1000663"  [label="AST: "];
"1000674" -> "1000663"  [label="CFG: "];
"1000680" -> "1000663"  [label="CFG: "];
"1000663" -> "1000702"  [label="DDG: "];
"1000663" -> "1000702"  [label="DDG: "];
"1000663" -> "1000702"  [label="DDG: "];
"1000667" -> "1000663"  [label="DDG: "];
"1000667" -> "1000663"  [label="DDG: "];
"1000679" -> "1000107"  [label="AST: "];
"1000679" -> "1000683"  [label="CFG: "];
"1000680" -> "1000679"  [label="AST: "];
"1000681" -> "1000679"  [label="AST: "];
"1000682" -> "1000679"  [label="AST: "];
"1000683" -> "1000679"  [label="AST: "];
"1000685" -> "1000679"  [label="CFG: "];
"1000679" -> "1000702"  [label="DDG: "];
"1000679" -> "1000702"  [label="DDG: "];
"1000679" -> "1000702"  [label="DDG: "];
"1000354" -> "1000679"  [label="DDG: "];
"1000558" -> "1000679"  [label="DDG: "];
"1000558" -> "1000679"  [label="DDG: "];
"1000225" -> "1000679"  [label="DDG: "];
"1000501" -> "1000679"  [label="DDG: "];
"1000582" -> "1000679"  [label="DDG: "];
"1000673" -> "1000679"  [label="DDG: "];
"1000651" -> "1000679"  [label="DDG: "];
"1000365" -> "1000679"  [label="DDG: "];
"1000295" -> "1000679"  [label="DDG: "];
"1000195" -> "1000679"  [label="DDG: "];
"1000209" -> "1000679"  [label="DDG: "];
"1000209" -> "1000679"  [label="DDG: "];
"1000417" -> "1000679"  [label="DDG: "];
"1000599" -> "1000679"  [label="DDG: "];
"1000236" -> "1000679"  [label="DDG: "];
"1000236" -> "1000679"  [label="DDG: "];
"1000400" -> "1000679"  [label="DDG: "];
"1000384" -> "1000679"  [label="DDG: "];
"1000248" -> "1000679"  [label="DDG: "];
"1000319" -> "1000679"  [label="DDG: "];
"1000319" -> "1000679"  [label="DDG: "];
"1000676" -> "1000679"  [label="DDG: "];
"1000625" -> "1000679"  [label="DDG: "];
"1000202" -> "1000679"  [label="DDG: "];
"1000489" -> "1000679"  [label="DDG: "];
"1000287" -> "1000679"  [label="DDG: "];
"1000679" -> "1000690"  [label="DDG: "];
"1000679" -> "1000700"  [label="DDG: "];
"1000690" -> "1000107"  [label="AST: "];
"1000690" -> "1000691"  [label="CFG: "];
"1000691" -> "1000690"  [label="AST: "];
"1000693" -> "1000690"  [label="CFG: "];
"1000690" -> "1000702"  [label="DDG: "];
"1000700" -> "1000107"  [label="AST: "];
"1000700" -> "1000701"  [label="CFG: "];
"1000701" -> "1000700"  [label="AST: "];
"1000702" -> "1000700"  [label="CFG: "];
"1000700" -> "1000702"  [label="DDG: "];
"1000701" -> "1000700"  [label="DDG: "];
"1000686" -> "1000107"  [label="AST: "];
"1000686" -> "1000687"  [label="CFG: "];
"1000687" -> "1000686"  [label="AST: "];
"1000689" -> "1000686"  [label="CFG: "];
"1000686" -> "1000702"  [label="DDG: "];
"1000686" -> "1000702"  [label="DDG: "];
"1000125" -> "1000686"  [label="DDG: "];
"1000232" -> "1000686"  [label="DDG: "];
"1000298" -> "1000686"  [label="DDG: "];
"1000306" -> "1000686"  [label="DDG: "];
"1000282" -> "1000686"  [label="DDG: "];
"1000605" -> "1000686"  [label="DDG: "];
"1000698" -> "1000107"  [label="AST: "];
"1000698" -> "1000699"  [label="CFG: "];
"1000699" -> "1000698"  [label="AST: "];
"1000701" -> "1000698"  [label="CFG: "];
"1000698" -> "1000702"  [label="DDG: "];
}
