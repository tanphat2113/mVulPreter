digraph "0_linux_83eaddab4378db256d00d295bda6ca997cd13a52_0@pointer" {
"1000176" [label="(Call,newtp = tcp_sk(newsk))"];
"1000178" [label="(Call,tcp_sk(newsk))"];
"1000174" [label="(Call,inet6_sk(newsk))"];
"1000170" [label="(Call,inet_sk(newsk))"];
"1000161" [label="(Call,inet_sk(newsk))"];
"1000156" [label="(Call,(struct tcp6_sock *)newsk)"];
"1000150" [label="(Call,!newsk)"];
"1000140" [label="(Call,newsk = tcp_v4_syn_recv_sock(sk, skb, req, dst,\n\t\t\t\t\t     req_unhash, own_req))"];
"1000142" [label="(Call,tcp_v4_syn_recv_sock(sk, skb, req, dst,\n\t\t\t\t\t     req_unhash, own_req))"];
"1000123" [label="(Call,inet6_sk(sk))"];
"1000111" [label="(MethodParameterIn,const struct sock *sk)"];
"1000112" [label="(MethodParameterIn,struct sk_buff *skb)"];
"1000113" [label="(MethodParameterIn,struct request_sock *req)"];
"1000114" [label="(MethodParameterIn,struct dst_entry *dst)"];
"1000115" [label="(MethodParameterIn,struct request_sock *req_unhash)"];
"1000116" [label="(MethodParameterIn,bool *own_req)"];
"1000433" [label="(Call,ipv6_hdr(skb))"];
"1000559" [label="(Call,sk_gfp_mask(sk, GFP_ATOMIC))"];
"1000116" [label="(MethodParameterIn,bool *own_req)"];
"1000265" [label="(Call,ipv6_hdr(skb))"];
"1000142" [label="(Call,tcp_v4_syn_recv_sock(sk, skb, req, dst,\n\t\t\t\t\t     req_unhash, own_req))"];
"1000111" [label="(MethodParameterIn,const struct sock *sk)"];
"1000277" [label="(Call,inet_rsk(req))"];
"1000638" [label="(Call,tcp_listendrop(sk))"];
"1000513" [label="(Call,tcp_sk(sk))"];
"1000515" [label="(Call,dst_metric_advmss(dst))"];
"1000170" [label="(Call,inet_sk(newsk))"];
"1000145" [label="(Identifier,req)"];
"1000179" [label="(Identifier,newsk)"];
"1000163" [label="(FieldIdentifier,pinet6)"];
"1000151" [label="(Identifier,newsk)"];
"1000114" [label="(MethodParameterIn,struct dst_entry *dst)"];
"1000115" [label="(MethodParameterIn,struct request_sock *req_unhash)"];
"1000144" [label="(Identifier,skb)"];
"1000194" [label="(Call,inet_csk(newsk))"];
"1000631" [label="(Call,sock_net(sk))"];
"1000585" [label="(Call,tcp_move_syn(newtp, req))"];
"1000579" [label="(Call,req_to_sk(req_unhash))"];
"1000564" [label="(Call,__inet_inherit_port(sk, newsk))"];
"1000174" [label="(Call,inet6_sk(newsk))"];
"1000426" [label="(Call,tcp_v6_iif(skb))"];
"1000506" [label="(Call,dst_mtu(dst))"];
"1000124" [label="(Identifier,sk)"];
"1000284" [label="(Call,!dst)"];
"1000178" [label="(Call,tcp_sk(newsk))"];
"1000141" [label="(Identifier,newsk)"];
"1000113" [label="(MethodParameterIn,struct request_sock *req)"];
"1000319" [label="(Call,inet6_sk_rx_dst_set(newsk, skb))"];
"1000123" [label="(Call,inet6_sk(sk))"];
"1000254" [label="(Call,ipv6_hdr(skb))"];
"1000147" [label="(Identifier,req_unhash)"];
"1000176" [label="(Call,newtp = tcp_sk(newsk))"];
"1000168" [label="(Call,newinet = inet_sk(newsk))"];
"1000156" [label="(Call,(struct tcp6_sock *)newsk)"];
"1000150" [label="(Call,!newsk)"];
"1000301" [label="(Call,tcp_create_openreq_child(sk, req, skb))"];
"1000441" [label="(Call,ipv6_hdr(skb))"];
"1000635" [label="(Call,dst_release(dst))"];
"1000112" [label="(MethodParameterIn,struct sk_buff *skb)"];
"1000246" [label="(Call,ipv6_hdr(skb))"];
"1000149" [label="(ControlStructure,if (!newsk))"];
"1000287" [label="(Call,dst = inet6_csk_route_req(sk, &fl6, req, IPPROTO_TCP))"];
"1000175" [label="(Identifier,newsk)"];
"1000172" [label="(Call,newnp = inet6_sk(newsk))"];
"1000239" [label="(Call,tcp_v6_iif(skb))"];
"1000161" [label="(Call,inet_sk(newsk))"];
"1000158" [label="(Identifier,newsk)"];
"1000535" [label="(Call,tcp_v6_md5_do_lookup(sk, &newsk->sk_v6_daddr))"];
"1000280" [label="(Call,sk_acceptq_is_full(sk))"];
"1000642" [label="(MethodReturn,static struct sock *)"];
"1000289" [label="(Call,inet6_csk_route_req(sk, &fl6, req, IPPROTO_TCP))"];
"1000501" [label="(Call,tcp_ca_openreq_child(newsk, dst))"];
"1000181" [label="(Identifier,newnp)"];
"1000177" [label="(Identifier,newtp)"];
"1000601" [label="(Call,sk_gfp_mask(sk, GFP_ATOMIC))"];
"1000296" [label="(Call,!dst)"];
"1000155" [label="(Identifier,newtcp6sk)"];
"1000139" [label="(Block,)"];
"1000171" [label="(Identifier,newsk)"];
"1000154" [label="(Call,newtcp6sk = (struct tcp6_sock *)newsk)"];
"1000160" [label="(Call,inet_sk(newsk)->pinet6)"];
"1000162" [label="(Identifier,newsk)"];
"1000148" [label="(Identifier,own_req)"];
"1000143" [label="(Identifier,sk)"];
"1000121" [label="(Call,*np = inet6_sk(sk))"];
"1000146" [label="(Identifier,dst)"];
"1000314" [label="(Call,ip6_dst_store(newsk, dst, NULL, NULL))"];
"1000153" [label="(Identifier,NULL)"];
"1000140" [label="(Call,newsk = tcp_v4_syn_recv_sock(sk, skb, req, dst,\n\t\t\t\t\t     req_unhash, own_req))"];
"1000452" [label="(Call,ipv6_hdr(skb))"];
"1000176" -> "1000139"  [label="AST: "];
"1000176" -> "1000178"  [label="CFG: "];
"1000177" -> "1000176"  [label="AST: "];
"1000178" -> "1000176"  [label="AST: "];
"1000181" -> "1000176"  [label="CFG: "];
"1000176" -> "1000642"  [label="DDG: tcp_sk(newsk)"];
"1000176" -> "1000642"  [label="DDG: newtp"];
"1000178" -> "1000176"  [label="DDG: newsk"];
"1000178" -> "1000179"  [label="CFG: "];
"1000179" -> "1000178"  [label="AST: "];
"1000174" -> "1000178"  [label="DDG: newsk"];
"1000178" -> "1000194"  [label="DDG: newsk"];
"1000174" -> "1000172"  [label="AST: "];
"1000174" -> "1000175"  [label="CFG: "];
"1000175" -> "1000174"  [label="AST: "];
"1000172" -> "1000174"  [label="CFG: "];
"1000174" -> "1000172"  [label="DDG: newsk"];
"1000170" -> "1000174"  [label="DDG: newsk"];
"1000170" -> "1000168"  [label="AST: "];
"1000170" -> "1000171"  [label="CFG: "];
"1000171" -> "1000170"  [label="AST: "];
"1000168" -> "1000170"  [label="CFG: "];
"1000170" -> "1000168"  [label="DDG: newsk"];
"1000161" -> "1000170"  [label="DDG: newsk"];
"1000161" -> "1000160"  [label="AST: "];
"1000161" -> "1000162"  [label="CFG: "];
"1000162" -> "1000161"  [label="AST: "];
"1000163" -> "1000161"  [label="CFG: "];
"1000156" -> "1000161"  [label="DDG: newsk"];
"1000156" -> "1000154"  [label="AST: "];
"1000156" -> "1000158"  [label="CFG: "];
"1000157" -> "1000156"  [label="AST: "];
"1000158" -> "1000156"  [label="AST: "];
"1000154" -> "1000156"  [label="CFG: "];
"1000156" -> "1000154"  [label="DDG: newsk"];
"1000150" -> "1000156"  [label="DDG: newsk"];
"1000150" -> "1000149"  [label="AST: "];
"1000150" -> "1000151"  [label="CFG: "];
"1000151" -> "1000150"  [label="AST: "];
"1000153" -> "1000150"  [label="CFG: "];
"1000155" -> "1000150"  [label="CFG: "];
"1000150" -> "1000642"  [label="DDG: newsk"];
"1000150" -> "1000642"  [label="DDG: !newsk"];
"1000140" -> "1000150"  [label="DDG: newsk"];
"1000140" -> "1000139"  [label="AST: "];
"1000140" -> "1000142"  [label="CFG: "];
"1000141" -> "1000140"  [label="AST: "];
"1000142" -> "1000140"  [label="AST: "];
"1000151" -> "1000140"  [label="CFG: "];
"1000140" -> "1000642"  [label="DDG: tcp_v4_syn_recv_sock(sk, skb, req, dst,\n\t\t\t\t\t     req_unhash, own_req)"];
"1000142" -> "1000140"  [label="DDG: skb"];
"1000142" -> "1000140"  [label="DDG: req_unhash"];
"1000142" -> "1000140"  [label="DDG: req"];
"1000142" -> "1000140"  [label="DDG: sk"];
"1000142" -> "1000140"  [label="DDG: dst"];
"1000142" -> "1000140"  [label="DDG: own_req"];
"1000142" -> "1000148"  [label="CFG: "];
"1000143" -> "1000142"  [label="AST: "];
"1000144" -> "1000142"  [label="AST: "];
"1000145" -> "1000142"  [label="AST: "];
"1000146" -> "1000142"  [label="AST: "];
"1000147" -> "1000142"  [label="AST: "];
"1000148" -> "1000142"  [label="AST: "];
"1000142" -> "1000642"  [label="DDG: skb"];
"1000142" -> "1000642"  [label="DDG: own_req"];
"1000142" -> "1000642"  [label="DDG: req"];
"1000142" -> "1000642"  [label="DDG: sk"];
"1000142" -> "1000642"  [label="DDG: dst"];
"1000142" -> "1000642"  [label="DDG: req_unhash"];
"1000123" -> "1000142"  [label="DDG: sk"];
"1000111" -> "1000142"  [label="DDG: sk"];
"1000112" -> "1000142"  [label="DDG: skb"];
"1000113" -> "1000142"  [label="DDG: req"];
"1000114" -> "1000142"  [label="DDG: dst"];
"1000115" -> "1000142"  [label="DDG: req_unhash"];
"1000116" -> "1000142"  [label="DDG: own_req"];
"1000142" -> "1000239"  [label="DDG: skb"];
"1000123" -> "1000121"  [label="AST: "];
"1000123" -> "1000124"  [label="CFG: "];
"1000124" -> "1000123"  [label="AST: "];
"1000121" -> "1000123"  [label="CFG: "];
"1000123" -> "1000121"  [label="DDG: sk"];
"1000111" -> "1000123"  [label="DDG: sk"];
"1000123" -> "1000280"  [label="DDG: sk"];
"1000111" -> "1000110"  [label="AST: "];
"1000111" -> "1000642"  [label="DDG: sk"];
"1000111" -> "1000280"  [label="DDG: sk"];
"1000111" -> "1000289"  [label="DDG: sk"];
"1000111" -> "1000301"  [label="DDG: sk"];
"1000111" -> "1000513"  [label="DDG: sk"];
"1000111" -> "1000535"  [label="DDG: sk"];
"1000111" -> "1000559"  [label="DDG: sk"];
"1000111" -> "1000564"  [label="DDG: sk"];
"1000111" -> "1000601"  [label="DDG: sk"];
"1000111" -> "1000631"  [label="DDG: sk"];
"1000111" -> "1000638"  [label="DDG: sk"];
"1000112" -> "1000110"  [label="AST: "];
"1000112" -> "1000642"  [label="DDG: skb"];
"1000112" -> "1000239"  [label="DDG: skb"];
"1000112" -> "1000246"  [label="DDG: skb"];
"1000112" -> "1000254"  [label="DDG: skb"];
"1000112" -> "1000265"  [label="DDG: skb"];
"1000112" -> "1000301"  [label="DDG: skb"];
"1000112" -> "1000319"  [label="DDG: skb"];
"1000112" -> "1000426"  [label="DDG: skb"];
"1000112" -> "1000433"  [label="DDG: skb"];
"1000112" -> "1000441"  [label="DDG: skb"];
"1000112" -> "1000452"  [label="DDG: skb"];
"1000113" -> "1000110"  [label="AST: "];
"1000113" -> "1000642"  [label="DDG: req"];
"1000113" -> "1000277"  [label="DDG: req"];
"1000113" -> "1000289"  [label="DDG: req"];
"1000113" -> "1000301"  [label="DDG: req"];
"1000113" -> "1000585"  [label="DDG: req"];
"1000114" -> "1000110"  [label="AST: "];
"1000114" -> "1000642"  [label="DDG: dst"];
"1000114" -> "1000284"  [label="DDG: dst"];
"1000114" -> "1000287"  [label="DDG: dst"];
"1000114" -> "1000296"  [label="DDG: dst"];
"1000114" -> "1000314"  [label="DDG: dst"];
"1000114" -> "1000501"  [label="DDG: dst"];
"1000114" -> "1000506"  [label="DDG: dst"];
"1000114" -> "1000515"  [label="DDG: dst"];
"1000114" -> "1000635"  [label="DDG: dst"];
"1000115" -> "1000110"  [label="AST: "];
"1000115" -> "1000642"  [label="DDG: req_unhash"];
"1000115" -> "1000579"  [label="DDG: req_unhash"];
"1000116" -> "1000110"  [label="AST: "];
"1000116" -> "1000642"  [label="DDG: own_req"];
}
