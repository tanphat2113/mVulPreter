digraph "0_linux_79462ad02e861803b3840cc782248c7359451cd9_0@pointer" {
"1000101" [label="(MethodParameterIn,struct net *net)"];
"1000120" [label="(Call,net_eq(net, &init_net))"];
"1000119" [label="(Call,!net_eq(net, &init_net))"];
"1000151" [label="(Call,dn_alloc_sock(net, sock, GFP_KERNEL, kern))"];
"1000148" [label="(Call,(sk = dn_alloc_sock(net, sock, GFP_KERNEL, kern)) == NULL)"];
"1000149" [label="(Call,sk = dn_alloc_sock(net, sock, GFP_KERNEL, kern))"];
"1000156" [label="(Identifier,NULL)"];
"1000150" [label="(Identifier,sk)"];
"1000118" [label="(ControlStructure,if (!net_eq(net, &init_net)))"];
"1000155" [label="(Identifier,kern)"];
"1000152" [label="(Identifier,net)"];
"1000119" [label="(Call,!net_eq(net, &init_net))"];
"1000159" [label="(Identifier,ENOBUFS)"];
"1000120" [label="(Call,net_eq(net, &init_net))"];
"1000162" [label="(Identifier,sk)"];
"1000129" [label="(Identifier,sock)"];
"1000126" [label="(Identifier,EAFNOSUPPORT)"];
"1000121" [label="(Identifier,net)"];
"1000101" [label="(MethodParameterIn,struct net *net)"];
"1000148" [label="(Call,(sk = dn_alloc_sock(net, sock, GFP_KERNEL, kern)) == NULL)"];
"1000149" [label="(Call,sk = dn_alloc_sock(net, sock, GFP_KERNEL, kern))"];
"1000153" [label="(Identifier,sock)"];
"1000102" [label="(MethodParameterIn,struct socket *sock)"];
"1000154" [label="(Identifier,GFP_KERNEL)"];
"1000122" [label="(Call,&init_net)"];
"1000147" [label="(ControlStructure,if ((sk = dn_alloc_sock(net, sock, GFP_KERNEL, kern)) == NULL))"];
"1000167" [label="(MethodReturn,static int)"];
"1000104" [label="(MethodParameterIn,int kern)"];
"1000151" [label="(Call,dn_alloc_sock(net, sock, GFP_KERNEL, kern))"];
"1000101" -> "1000100"  [label="AST: "];
"1000101" -> "1000167"  [label="DDG: net"];
"1000101" -> "1000120"  [label="DDG: net"];
"1000101" -> "1000151"  [label="DDG: net"];
"1000120" -> "1000119"  [label="AST: "];
"1000120" -> "1000122"  [label="CFG: "];
"1000121" -> "1000120"  [label="AST: "];
"1000122" -> "1000120"  [label="AST: "];
"1000119" -> "1000120"  [label="CFG: "];
"1000120" -> "1000167"  [label="DDG: net"];
"1000120" -> "1000167"  [label="DDG: &init_net"];
"1000120" -> "1000119"  [label="DDG: net"];
"1000120" -> "1000119"  [label="DDG: &init_net"];
"1000120" -> "1000151"  [label="DDG: net"];
"1000119" -> "1000118"  [label="AST: "];
"1000126" -> "1000119"  [label="CFG: "];
"1000129" -> "1000119"  [label="CFG: "];
"1000119" -> "1000167"  [label="DDG: !net_eq(net, &init_net)"];
"1000119" -> "1000167"  [label="DDG: net_eq(net, &init_net)"];
"1000151" -> "1000149"  [label="AST: "];
"1000151" -> "1000155"  [label="CFG: "];
"1000152" -> "1000151"  [label="AST: "];
"1000153" -> "1000151"  [label="AST: "];
"1000154" -> "1000151"  [label="AST: "];
"1000155" -> "1000151"  [label="AST: "];
"1000149" -> "1000151"  [label="CFG: "];
"1000151" -> "1000167"  [label="DDG: net"];
"1000151" -> "1000167"  [label="DDG: sock"];
"1000151" -> "1000167"  [label="DDG: GFP_KERNEL"];
"1000151" -> "1000167"  [label="DDG: kern"];
"1000151" -> "1000148"  [label="DDG: net"];
"1000151" -> "1000148"  [label="DDG: sock"];
"1000151" -> "1000148"  [label="DDG: GFP_KERNEL"];
"1000151" -> "1000148"  [label="DDG: kern"];
"1000151" -> "1000149"  [label="DDG: net"];
"1000151" -> "1000149"  [label="DDG: sock"];
"1000151" -> "1000149"  [label="DDG: GFP_KERNEL"];
"1000151" -> "1000149"  [label="DDG: kern"];
"1000102" -> "1000151"  [label="DDG: sock"];
"1000104" -> "1000151"  [label="DDG: kern"];
"1000148" -> "1000147"  [label="AST: "];
"1000148" -> "1000156"  [label="CFG: "];
"1000149" -> "1000148"  [label="AST: "];
"1000156" -> "1000148"  [label="AST: "];
"1000159" -> "1000148"  [label="CFG: "];
"1000162" -> "1000148"  [label="CFG: "];
"1000148" -> "1000167"  [label="DDG: (sk = dn_alloc_sock(net, sock, GFP_KERNEL, kern)) == NULL"];
"1000148" -> "1000167"  [label="DDG: NULL"];
"1000149" -> "1000148"  [label="DDG: sk"];
"1000150" -> "1000149"  [label="AST: "];
"1000156" -> "1000149"  [label="CFG: "];
"1000149" -> "1000167"  [label="DDG: dn_alloc_sock(net, sock, GFP_KERNEL, kern)"];
"1000149" -> "1000167"  [label="DDG: sk"];
}
