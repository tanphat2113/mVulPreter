digraph "0_linux_4442dc8a92b8f9ad8ee9e7f8438f4c04c03a22dc@pointer" {
"1000236" [label="(Call,kunmap(pg))"];
"1000230" [label="(Call,kmap(pg))"];
"1000215" [label="(Call,sg_assign_page(&sg[j], pg))"];
"1000207" [label="(Call,!pg)"];
"1000201" [label="(Call,pg = alloc_pages(GFP_KERNEL, 0))"];
"1000203" [label="(Call,alloc_pages(GFP_KERNEL, 0))"];
"1000140" [label="(Call,kzalloc(sg_per_table * sizeof(struct scatterlist),\n\t\t\t\tGFP_KERNEL))"];
"1000141" [label="(Call,sg_per_table * sizeof(struct scatterlist))"];
"1000130" [label="(Call,sg_per_table = (total_sg_needed > max_sg_per_table) ?\n\t\t\tmax_sg_per_table : total_sg_needed)"];
"1000133" [label="(Call,total_sg_needed > max_sg_per_table)"];
"1000241" [label="(Call,total_sg_needed -= sg_per_table)"];
"1000195" [label="(Call,j < sg_per_table)"];
"1000198" [label="(Call,j++)"];
"1000192" [label="(Call,j = 0)"];
"1000155" [label="(Call,sg_init_table(sg, sg_per_table))"];
"1000147" [label="(Call,!sg)"];
"1000138" [label="(Call,sg = kzalloc(sg_per_table * sizeof(struct scatterlist),\n\t\t\t\tGFP_KERNEL))"];
"1000104" [label="(MethodParameterIn,u32 total_sg_needed)"];
"1000118" [label="(Call,max_sg_per_table = (RD_MAX_ALLOCATION_SIZE /\n \t\t\t\tsizeof(struct scatterlist)))"];
"1000120" [label="(Call,RD_MAX_ALLOCATION_SIZE /\n \t\t\t\tsizeof(struct scatterlist))"];
"1000131" [label="(Identifier,sg_per_table)"];
"1000242" [label="(Identifier,total_sg_needed)"];
"1000145" [label="(Identifier,GFP_KERNEL)"];
"1000243" [label="(Identifier,sg_per_table)"];
"1000137" [label="(Identifier,total_sg_needed)"];
"1000141" [label="(Call,sg_per_table * sizeof(struct scatterlist))"];
"1000237" [label="(Identifier,pg)"];
"1000104" [label="(MethodParameterIn,u32 total_sg_needed)"];
"1000151" [label="(Literal,\"Unable to allocate scatterlist array\"\n\t\t\t\t\" for struct rd_dev\n\")"];
"1000203" [label="(Call,alloc_pages(GFP_KERNEL, 0))"];
"1000143" [label="(Call,sizeof(struct scatterlist))"];
"1000118" [label="(Call,max_sg_per_table = (RD_MAX_ALLOCATION_SIZE /\n \t\t\t\tsizeof(struct scatterlist)))"];
"1000155" [label="(Call,sg_init_table(sg, sg_per_table))"];
"1000204" [label="(Identifier,GFP_KERNEL)"];
"1000120" [label="(Call,RD_MAX_ALLOCATION_SIZE /\n \t\t\t\tsizeof(struct scatterlist))"];
"1000201" [label="(Call,pg = alloc_pages(GFP_KERNEL, 0))"];
"1000191" [label="(ControlStructure,for (j = 0; j < sg_per_table; j++))"];
"1000198" [label="(Call,j++)"];
"1000156" [label="(Identifier,sg)"];
"1000194" [label="(Literal,0)"];
"1000140" [label="(Call,kzalloc(sg_per_table * sizeof(struct scatterlist),\n\t\t\t\tGFP_KERNEL))"];
"1000220" [label="(Identifier,pg)"];
"1000224" [label="(Identifier,sg)"];
"1000130" [label="(Call,sg_per_table = (total_sg_needed > max_sg_per_table) ?\n\t\t\tmax_sg_per_table : total_sg_needed)"];
"1000231" [label="(Identifier,pg)"];
"1000136" [label="(Identifier,max_sg_per_table)"];
"1000132" [label="(Call,(total_sg_needed > max_sg_per_table) ?\n\t\t\tmax_sg_per_table : total_sg_needed)"];
"1000195" [label="(Call,j < sg_per_table)"];
"1000239" [label="(Identifier,page_offset)"];
"1000121" [label="(Identifier,RD_MAX_ALLOCATION_SIZE)"];
"1000165" [label="(Call,sg_table[i].rd_sg_count = sg_per_table)"];
"1000134" [label="(Identifier,total_sg_needed)"];
"1000106" [label="(Block,)"];
"1000128" [label="(Identifier,total_sg_needed)"];
"1000206" [label="(ControlStructure,if (!pg))"];
"1000187" [label="(Call,page_offset + sg_per_table)"];
"1000135" [label="(Identifier,max_sg_per_table)"];
"1000158" [label="(Call,sg_table[i].sg_table = sg)"];
"1000196" [label="(Identifier,j)"];
"1000230" [label="(Call,kmap(pg))"];
"1000200" [label="(Block,)"];
"1000157" [label="(Identifier,sg_per_table)"];
"1000192" [label="(Call,j = 0)"];
"1000202" [label="(Identifier,pg)"];
"1000122" [label="(Call,sizeof(struct scatterlist))"];
"1000246" [label="(MethodReturn,static int)"];
"1000139" [label="(Identifier,sg)"];
"1000218" [label="(Identifier,sg)"];
"1000133" [label="(Call,total_sg_needed > max_sg_per_table)"];
"1000147" [label="(Call,!sg)"];
"1000238" [label="(Call,page_offset += sg_per_table)"];
"1000228" [label="(Call,p = kmap(pg))"];
"1000211" [label="(Literal,\"Unable to allocate scatterlist\"\n\t\t\t\t\t\" pages for struct rd_dev_sg_table\n\")"];
"1000186" [label="(Call,(page_offset + sg_per_table)\n\t\t\t\t\t\t- 1)"];
"1000119" [label="(Identifier,max_sg_per_table)"];
"1000215" [label="(Call,sg_assign_page(&sg[j], pg))"];
"1000146" [label="(ControlStructure,if (!sg))"];
"1000205" [label="(Literal,0)"];
"1000241" [label="(Call,total_sg_needed -= sg_per_table)"];
"1000236" [label="(Call,kunmap(pg))"];
"1000142" [label="(Identifier,sg_per_table)"];
"1000161" [label="(Identifier,sg_table)"];
"1000148" [label="(Identifier,sg)"];
"1000199" [label="(Identifier,j)"];
"1000207" [label="(Call,!pg)"];
"1000208" [label="(Identifier,pg)"];
"1000129" [label="(Block,)"];
"1000197" [label="(Identifier,sg_per_table)"];
"1000193" [label="(Identifier,j)"];
"1000138" [label="(Call,sg = kzalloc(sg_per_table * sizeof(struct scatterlist),\n\t\t\t\tGFP_KERNEL))"];
"1000216" [label="(Call,&sg[j])"];
"1000236" -> "1000200"  [label="AST: "];
"1000236" -> "1000237"  [label="CFG: "];
"1000237" -> "1000236"  [label="AST: "];
"1000199" -> "1000236"  [label="CFG: "];
"1000236" -> "1000246"  [label="DDG: pg"];
"1000236" -> "1000246"  [label="DDG: kunmap(pg)"];
"1000230" -> "1000236"  [label="DDG: pg"];
"1000230" -> "1000228"  [label="AST: "];
"1000230" -> "1000231"  [label="CFG: "];
"1000231" -> "1000230"  [label="AST: "];
"1000228" -> "1000230"  [label="CFG: "];
"1000230" -> "1000228"  [label="DDG: pg"];
"1000215" -> "1000230"  [label="DDG: pg"];
"1000215" -> "1000200"  [label="AST: "];
"1000215" -> "1000220"  [label="CFG: "];
"1000216" -> "1000215"  [label="AST: "];
"1000220" -> "1000215"  [label="AST: "];
"1000224" -> "1000215"  [label="CFG: "];
"1000215" -> "1000246"  [label="DDG: &sg[j]"];
"1000215" -> "1000246"  [label="DDG: sg_assign_page(&sg[j], pg)"];
"1000207" -> "1000215"  [label="DDG: pg"];
"1000207" -> "1000206"  [label="AST: "];
"1000207" -> "1000208"  [label="CFG: "];
"1000208" -> "1000207"  [label="AST: "];
"1000211" -> "1000207"  [label="CFG: "];
"1000218" -> "1000207"  [label="CFG: "];
"1000207" -> "1000246"  [label="DDG: pg"];
"1000207" -> "1000246"  [label="DDG: !pg"];
"1000201" -> "1000207"  [label="DDG: pg"];
"1000201" -> "1000200"  [label="AST: "];
"1000201" -> "1000203"  [label="CFG: "];
"1000202" -> "1000201"  [label="AST: "];
"1000203" -> "1000201"  [label="AST: "];
"1000208" -> "1000201"  [label="CFG: "];
"1000201" -> "1000246"  [label="DDG: alloc_pages(GFP_KERNEL, 0)"];
"1000203" -> "1000201"  [label="DDG: GFP_KERNEL"];
"1000203" -> "1000201"  [label="DDG: 0"];
"1000203" -> "1000205"  [label="CFG: "];
"1000204" -> "1000203"  [label="AST: "];
"1000205" -> "1000203"  [label="AST: "];
"1000203" -> "1000246"  [label="DDG: GFP_KERNEL"];
"1000203" -> "1000140"  [label="DDG: GFP_KERNEL"];
"1000140" -> "1000203"  [label="DDG: GFP_KERNEL"];
"1000140" -> "1000138"  [label="AST: "];
"1000140" -> "1000145"  [label="CFG: "];
"1000141" -> "1000140"  [label="AST: "];
"1000145" -> "1000140"  [label="AST: "];
"1000138" -> "1000140"  [label="CFG: "];
"1000140" -> "1000246"  [label="DDG: sg_per_table * sizeof(struct scatterlist)"];
"1000140" -> "1000246"  [label="DDG: GFP_KERNEL"];
"1000140" -> "1000138"  [label="DDG: sg_per_table * sizeof(struct scatterlist)"];
"1000140" -> "1000138"  [label="DDG: GFP_KERNEL"];
"1000141" -> "1000140"  [label="DDG: sg_per_table"];
"1000141" -> "1000143"  [label="CFG: "];
"1000142" -> "1000141"  [label="AST: "];
"1000143" -> "1000141"  [label="AST: "];
"1000145" -> "1000141"  [label="CFG: "];
"1000141" -> "1000246"  [label="DDG: sg_per_table"];
"1000130" -> "1000141"  [label="DDG: sg_per_table"];
"1000141" -> "1000155"  [label="DDG: sg_per_table"];
"1000130" -> "1000129"  [label="AST: "];
"1000130" -> "1000132"  [label="CFG: "];
"1000131" -> "1000130"  [label="AST: "];
"1000132" -> "1000130"  [label="AST: "];
"1000139" -> "1000130"  [label="CFG: "];
"1000130" -> "1000246"  [label="DDG: (total_sg_needed > max_sg_per_table) ?\n\t\t\tmax_sg_per_table : total_sg_needed"];
"1000133" -> "1000130"  [label="DDG: max_sg_per_table"];
"1000133" -> "1000130"  [label="DDG: total_sg_needed"];
"1000104" -> "1000130"  [label="DDG: total_sg_needed"];
"1000133" -> "1000132"  [label="AST: "];
"1000133" -> "1000135"  [label="CFG: "];
"1000134" -> "1000133"  [label="AST: "];
"1000135" -> "1000133"  [label="AST: "];
"1000136" -> "1000133"  [label="CFG: "];
"1000137" -> "1000133"  [label="CFG: "];
"1000241" -> "1000133"  [label="DDG: total_sg_needed"];
"1000104" -> "1000133"  [label="DDG: total_sg_needed"];
"1000118" -> "1000133"  [label="DDG: max_sg_per_table"];
"1000133" -> "1000132"  [label="DDG: max_sg_per_table"];
"1000133" -> "1000132"  [label="DDG: total_sg_needed"];
"1000133" -> "1000241"  [label="DDG: total_sg_needed"];
"1000241" -> "1000129"  [label="AST: "];
"1000241" -> "1000243"  [label="CFG: "];
"1000242" -> "1000241"  [label="AST: "];
"1000243" -> "1000241"  [label="AST: "];
"1000128" -> "1000241"  [label="CFG: "];
"1000241" -> "1000246"  [label="DDG: total_sg_needed"];
"1000241" -> "1000246"  [label="DDG: sg_per_table"];
"1000195" -> "1000241"  [label="DDG: sg_per_table"];
"1000104" -> "1000241"  [label="DDG: total_sg_needed"];
"1000195" -> "1000191"  [label="AST: "];
"1000195" -> "1000197"  [label="CFG: "];
"1000196" -> "1000195"  [label="AST: "];
"1000197" -> "1000195"  [label="AST: "];
"1000202" -> "1000195"  [label="CFG: "];
"1000239" -> "1000195"  [label="CFG: "];
"1000195" -> "1000246"  [label="DDG: j < sg_per_table"];
"1000195" -> "1000246"  [label="DDG: sg_per_table"];
"1000195" -> "1000246"  [label="DDG: j"];
"1000198" -> "1000195"  [label="DDG: j"];
"1000192" -> "1000195"  [label="DDG: j"];
"1000155" -> "1000195"  [label="DDG: sg_per_table"];
"1000195" -> "1000198"  [label="DDG: j"];
"1000195" -> "1000238"  [label="DDG: sg_per_table"];
"1000198" -> "1000191"  [label="AST: "];
"1000198" -> "1000199"  [label="CFG: "];
"1000199" -> "1000198"  [label="AST: "];
"1000196" -> "1000198"  [label="CFG: "];
"1000192" -> "1000191"  [label="AST: "];
"1000192" -> "1000194"  [label="CFG: "];
"1000193" -> "1000192"  [label="AST: "];
"1000194" -> "1000192"  [label="AST: "];
"1000196" -> "1000192"  [label="CFG: "];
"1000155" -> "1000129"  [label="AST: "];
"1000155" -> "1000157"  [label="CFG: "];
"1000156" -> "1000155"  [label="AST: "];
"1000157" -> "1000155"  [label="AST: "];
"1000161" -> "1000155"  [label="CFG: "];
"1000155" -> "1000246"  [label="DDG: sg_init_table(sg, sg_per_table)"];
"1000147" -> "1000155"  [label="DDG: sg"];
"1000155" -> "1000158"  [label="DDG: sg"];
"1000155" -> "1000165"  [label="DDG: sg_per_table"];
"1000155" -> "1000186"  [label="DDG: sg_per_table"];
"1000155" -> "1000187"  [label="DDG: sg_per_table"];
"1000147" -> "1000146"  [label="AST: "];
"1000147" -> "1000148"  [label="CFG: "];
"1000148" -> "1000147"  [label="AST: "];
"1000151" -> "1000147"  [label="CFG: "];
"1000156" -> "1000147"  [label="CFG: "];
"1000147" -> "1000246"  [label="DDG: sg"];
"1000147" -> "1000246"  [label="DDG: !sg"];
"1000138" -> "1000147"  [label="DDG: sg"];
"1000138" -> "1000129"  [label="AST: "];
"1000139" -> "1000138"  [label="AST: "];
"1000148" -> "1000138"  [label="CFG: "];
"1000138" -> "1000246"  [label="DDG: kzalloc(sg_per_table * sizeof(struct scatterlist),\n\t\t\t\tGFP_KERNEL)"];
"1000104" -> "1000101"  [label="AST: "];
"1000104" -> "1000246"  [label="DDG: total_sg_needed"];
"1000104" -> "1000132"  [label="DDG: total_sg_needed"];
"1000118" -> "1000106"  [label="AST: "];
"1000118" -> "1000120"  [label="CFG: "];
"1000119" -> "1000118"  [label="AST: "];
"1000120" -> "1000118"  [label="AST: "];
"1000128" -> "1000118"  [label="CFG: "];
"1000118" -> "1000246"  [label="DDG: max_sg_per_table"];
"1000118" -> "1000246"  [label="DDG: RD_MAX_ALLOCATION_SIZE /\n \t\t\t\tsizeof(struct scatterlist)"];
"1000120" -> "1000118"  [label="DDG: RD_MAX_ALLOCATION_SIZE"];
"1000120" -> "1000122"  [label="CFG: "];
"1000121" -> "1000120"  [label="AST: "];
"1000122" -> "1000120"  [label="AST: "];
"1000120" -> "1000246"  [label="DDG: RD_MAX_ALLOCATION_SIZE"];
}
