digraph "0_postgres_31400a673325147e1205326008e32135a78b4d8a_1@API" {
"1000209" [label="(Call,ncolumns * sizeof(ColumnIOData))"];
"1000185" [label="(Call,my_extra->ncolumns != ncolumns)"];
"1000166" [label="(Call,ncolumns = tupdesc->natts)"];
"1000203" [label="(Call,sizeof(RecordIOData) - sizeof(ColumnIOData)\n\t\t\t\t\t\t\t   + ncolumns * sizeof(ColumnIOData))"];
"1000197" [label="(Call,MemoryContextAlloc(fcinfo->flinfo->fn_mcxt,\n\t\t\t\t\t\t\t   sizeof(RecordIOData) - sizeof(ColumnIOData)\n\t\t\t\t\t\t\t   + ncolumns * sizeof(ColumnIOData)))"];
"1000191" [label="(Call,fcinfo->flinfo->fn_extra =\n\t\t\tMemoryContextAlloc(fcinfo->flinfo->fn_mcxt,\n\t\t\t\t\t\t\t   sizeof(RecordIOData) - sizeof(ColumnIOData)\n\t\t\t\t\t\t\t   + ncolumns * sizeof(ColumnIOData)))"];
"1000215" [label="(Call,(RecordIOData *) fcinfo->flinfo->fn_extra)"];
"1000213" [label="(Call,my_extra = (RecordIOData *) fcinfo->flinfo->fn_extra)"];
"1000245" [label="(Call,MemSet(my_extra, 0,\n\t\t\t   sizeof(RecordIOData) - sizeof(ColumnIOData)\n\t\t\t   + ncolumns * sizeof(ColumnIOData)))"];
"1000468" [label="(Call,fmgr_info_cxt(column_info->typiofunc, &column_info->proc,\n\t\t\t\t\t\t  fcinfo->flinfo->fn_mcxt))"];
"1000460" [label="(Call,getTypeOutputInfo(column_type,\n\t\t\t\t\t\t\t  &column_info->typiofunc,\n\t\t\t\t\t\t\t  &typIsVarlena))"];
"1000481" [label="(Call,column_info->column_type = column_type)"];
"1000453" [label="(Call,column_info->column_type != column_type)"];
"1000488" [label="(Call,OutputFunctionCall(&column_info->proc, values[i]))"];
"1000486" [label="(Call,value = OutputFunctionCall(&column_info->proc, values[i]))"];
"1000496" [label="(Call,pairs[j].val = value)"];
"1000510" [label="(Call,strlen(value))"];
"1000509" [label="(Call,hstoreCheckValLen(strlen(value)))"];
"1000503" [label="(Call,pairs[j].vallen = hstoreCheckValLen(strlen(value)))"];
"1000206" [label="(Call,sizeof(ColumnIOData)\n\t\t\t\t\t\t\t   + ncolumns * sizeof(ColumnIOData))"];
"1000254" [label="(Call,ncolumns * sizeof(ColumnIOData))"];
"1000248" [label="(Call,sizeof(RecordIOData) - sizeof(ColumnIOData)\n\t\t\t   + ncolumns * sizeof(ColumnIOData))"];
"1000251" [label="(Call,sizeof(ColumnIOData)\n\t\t\t   + ncolumns * sizeof(ColumnIOData))"];
"1000268" [label="(Call,my_extra->ncolumns = ncolumns)"];
"1000274" [label="(Call,ncolumns <= MaxTupleAttributeNumber)"];
"1000273" [label="(Call,Assert(ncolumns <= MaxTupleAttributeNumber))"];
"1000280" [label="(Call,ncolumns * sizeof(Pairs))"];
"1000279" [label="(Call,palloc(ncolumns * sizeof(Pairs)))"];
"1000277" [label="(Call,pairs = palloc(ncolumns * sizeof(Pairs)))"];
"1000530" [label="(Call,hstoreUniquePairs(pairs, j, &buflen))"];
"1000528" [label="(Call,ncolumns = hstoreUniquePairs(pairs, j, &buflen))"];
"1000537" [label="(Call,hstorePairs(pairs, ncolumns, buflen))"];
"1000535" [label="(Call,out = hstorePairs(pairs, ncolumns, buflen))"];
"1000543" [label="(Call,PG_RETURN_POINTER(out))"];
"1000313" [label="(Call,ncolumns * sizeof(Datum))"];
"1000312" [label="(Call,palloc(ncolumns * sizeof(Datum)))"];
"1000310" [label="(Call,(Datum *) palloc(ncolumns * sizeof(Datum)))"];
"1000308" [label="(Call,values = (Datum *) palloc(ncolumns * sizeof(Datum)))"];
"1000326" [label="(Call,heap_deform_tuple(&tuple, tupdesc, values, nulls))"];
"1000415" [label="(Call,!nulls)"];
"1000414" [label="(Call,!nulls || nulls[i])"];
"1000541" [label="(Call,ReleaseTupleDesc(tupdesc))"];
"1000322" [label="(Call,ncolumns * sizeof(bool))"];
"1000321" [label="(Call,palloc(ncolumns * sizeof(bool)))"];
"1000319" [label="(Call,(bool *) palloc(ncolumns * sizeof(bool)))"];
"1000317" [label="(Call,nulls = (bool *) palloc(ncolumns * sizeof(bool)))"];
"1000348" [label="(Call,i < ncolumns)"];
"1000351" [label="(Call,++i)"];
"1000224" [label="(Identifier,my_extra)"];
"1000204" [label="(Call,sizeof(RecordIOData))"];
"1000275" [label="(Identifier,ncolumns)"];
"1000279" [label="(Call,palloc(ncolumns * sizeof(Pairs)))"];
"1000277" [label="(Call,pairs = palloc(ncolumns * sizeof(Pairs)))"];
"1000544" [label="(Identifier,out)"];
"1000252" [label="(Call,sizeof(ColumnIOData))"];
"1000536" [label="(Identifier,out)"];
"1000416" [label="(Identifier,nulls)"];
"1000203" [label="(Call,sizeof(RecordIOData) - sizeof(ColumnIOData)\n\t\t\t\t\t\t\t   + ncolumns * sizeof(ColumnIOData))"];
"1000458" [label="(Block,)"];
"1000166" [label="(Call,ncolumns = tupdesc->natts)"];
"1000503" [label="(Call,pairs[j].vallen = hstoreCheckValLen(strlen(value)))"];
"1000417" [label="(Call,nulls[i])"];
"1000272" [label="(Identifier,ncolumns)"];
"1000510" [label="(Call,strlen(value))"];
"1000364" [label="(Call,column_type = tupdesc->attrs[i]->atttypid)"];
"1000472" [label="(Call,&column_info->proc)"];
"1000213" [label="(Call,my_extra = (RecordIOData *) fcinfo->flinfo->fn_extra)"];
"1000260" [label="(Identifier,my_extra)"];
"1000497" [label="(Call,pairs[j].val)"];
"1000312" [label="(Call,palloc(ncolumns * sizeof(Datum)))"];
"1000268" [label="(Call,my_extra->ncolumns = ncolumns)"];
"1000308" [label="(Call,values = (Datum *) palloc(ncolumns * sizeof(Datum)))"];
"1000470" [label="(Identifier,column_info)"];
"1000172" [label="(Identifier,my_extra)"];
"1000246" [label="(Identifier,my_extra)"];
"1000506" [label="(Identifier,pairs)"];
"1000486" [label="(Call,value = OutputFunctionCall(&column_info->proc, values[i]))"];
"1000181" [label="(Call,my_extra == NULL ||\n\t\tmy_extra->ncolumns != ncolumns)"];
"1000322" [label="(Call,ncolumns * sizeof(bool))"];
"1000185" [label="(Call,my_extra->ncolumns != ncolumns)"];
"1000460" [label="(Call,getTypeOutputInfo(column_type,\n\t\t\t\t\t\t\t  &column_info->typiofunc,\n\t\t\t\t\t\t\t  &typIsVarlena))"];
"1000209" [label="(Call,ncolumns * sizeof(ColumnIOData))"];
"1000526" [label="(Call,++j)"];
"1000330" [label="(Identifier,values)"];
"1000496" [label="(Call,pairs[j].val = value)"];
"1000541" [label="(Call,ReleaseTupleDesc(tupdesc))"];
"1000329" [label="(Identifier,tupdesc)"];
"1000168" [label="(Call,tupdesc->natts)"];
"1000542" [label="(Identifier,tupdesc)"];
"1000324" [label="(Call,sizeof(bool))"];
"1000286" [label="(Block,)"];
"1000424" [label="(Identifier,pairs)"];
"1000191" [label="(Call,fcinfo->flinfo->fn_extra =\n\t\t\tMemoryContextAlloc(fcinfo->flinfo->fn_mcxt,\n\t\t\t\t\t\t\t   sizeof(RecordIOData) - sizeof(ColumnIOData)\n\t\t\t\t\t\t\t   + ncolumns * sizeof(ColumnIOData)))"];
"1000198" [label="(Call,fcinfo->flinfo->fn_mcxt)"];
"1000537" [label="(Call,hstorePairs(pairs, ncolumns, buflen))"];
"1000217" [label="(Call,fcinfo->flinfo->fn_extra)"];
"1000485" [label="(Identifier,column_type)"];
"1000327" [label="(Call,&tuple)"];
"1000418" [label="(Identifier,nulls)"];
"1000415" [label="(Call,!nulls)"];
"1000345" [label="(Call,j = 0)"];
"1000189" [label="(Identifier,ncolumns)"];
"1000323" [label="(Identifier,ncolumns)"];
"1000245" [label="(Call,MemSet(my_extra, 0,\n\t\t\t   sizeof(RecordIOData) - sizeof(ColumnIOData)\n\t\t\t   + ncolumns * sizeof(ColumnIOData)))"];
"1000326" [label="(Call,heap_deform_tuple(&tuple, tupdesc, values, nulls))"];
"1000352" [label="(Identifier,i)"];
"1000282" [label="(Call,sizeof(Pairs))"];
"1000530" [label="(Call,hstoreUniquePairs(pairs, j, &buflen))"];
"1000350" [label="(Identifier,ncolumns)"];
"1000511" [label="(Identifier,value)"];
"1000543" [label="(Call,PG_RETURN_POINTER(out))"];
"1000334" [label="(Call,values = NULL)"];
"1000540" [label="(Identifier,buflen)"];
"1000493" [label="(Call,values[i])"];
"1000190" [label="(Block,)"];
"1000161" [label="(Call,tupdesc = lookup_rowtype_tupdesc(tupType, tupTypmod))"];
"1000452" [label="(ControlStructure,if (column_info->column_type != column_type))"];
"1000532" [label="(Identifier,j)"];
"1000254" [label="(Call,ncolumns * sizeof(ColumnIOData))"];
"1000488" [label="(Call,OutputFunctionCall(&column_info->proc, values[i]))"];
"1000455" [label="(Identifier,column_info)"];
"1000461" [label="(Identifier,column_type)"];
"1000535" [label="(Call,out = hstorePairs(pairs, ncolumns, buflen))"];
"1000476" [label="(Call,fcinfo->flinfo->fn_mcxt)"];
"1000499" [label="(Identifier,pairs)"];
"1000285" [label="(Identifier,rec)"];
"1000186" [label="(Call,my_extra->ncolumns)"];
"1000309" [label="(Identifier,values)"];
"1000343" [label="(Identifier,i)"];
"1000342" [label="(Call,i = 0)"];
"1000314" [label="(Identifier,ncolumns)"];
"1000337" [label="(Call,nulls = NULL)"];
"1000110" [label="(Block,)"];
"1000269" [label="(Call,my_extra->ncolumns)"];
"1000489" [label="(Call,&column_info->proc)"];
"1000211" [label="(Call,sizeof(ColumnIOData))"];
"1000315" [label="(Call,sizeof(Datum))"];
"1000531" [label="(Identifier,pairs)"];
"1000197" [label="(Call,MemoryContextAlloc(fcinfo->flinfo->fn_mcxt,\n\t\t\t\t\t\t\t   sizeof(RecordIOData) - sizeof(ColumnIOData)\n\t\t\t\t\t\t\t   + ncolumns * sizeof(ColumnIOData)))"];
"1000248" [label="(Call,sizeof(RecordIOData) - sizeof(ColumnIOData)\n\t\t\t   + ncolumns * sizeof(ColumnIOData))"];
"1000468" [label="(Call,fmgr_info_cxt(column_info->typiofunc, &column_info->proc,\n\t\t\t\t\t\t  fcinfo->flinfo->fn_mcxt))"];
"1000244" [label="(Block,)"];
"1000318" [label="(Identifier,nulls)"];
"1000351" [label="(Call,++i)"];
"1000483" [label="(Identifier,column_info)"];
"1000502" [label="(Identifier,value)"];
"1000349" [label="(Identifier,i)"];
"1000538" [label="(Identifier,pairs)"];
"1000539" [label="(Identifier,ncolumns)"];
"1000545" [label="(MethodReturn,RET)"];
"1000449" [label="(Call,++j)"];
"1000207" [label="(Call,sizeof(ColumnIOData))"];
"1000276" [label="(Identifier,MaxTupleAttributeNumber)"];
"1000414" [label="(Call,!nulls || nulls[i])"];
"1000255" [label="(Identifier,ncolumns)"];
"1000529" [label="(Identifier,ncolumns)"];
"1000192" [label="(Call,fcinfo->flinfo->fn_extra)"];
"1000280" [label="(Call,ncolumns * sizeof(Pairs))"];
"1000348" [label="(Call,i < ncolumns)"];
"1000321" [label="(Call,palloc(ncolumns * sizeof(bool)))"];
"1000469" [label="(Call,column_info->typiofunc)"];
"1000454" [label="(Call,column_info->column_type)"];
"1000313" [label="(Call,ncolumns * sizeof(Datum))"];
"1000210" [label="(Identifier,ncolumns)"];
"1000509" [label="(Call,hstoreCheckValLen(strlen(value)))"];
"1000247" [label="(Literal,0)"];
"1000182" [label="(Call,my_extra == NULL)"];
"1000251" [label="(Call,sizeof(ColumnIOData)\n\t\t\t   + ncolumns * sizeof(ColumnIOData))"];
"1000453" [label="(Call,column_info->column_type != column_type)"];
"1000256" [label="(Call,sizeof(ColumnIOData))"];
"1000214" [label="(Identifier,my_extra)"];
"1000457" [label="(Identifier,column_type)"];
"1000281" [label="(Identifier,ncolumns)"];
"1000328" [label="(Identifier,tuple)"];
"1000487" [label="(Identifier,value)"];
"1000466" [label="(Call,&typIsVarlena)"];
"1000515" [label="(Identifier,pairs)"];
"1000249" [label="(Call,sizeof(RecordIOData))"];
"1000413" [label="(ControlStructure,if (!nulls || nulls[i]))"];
"1000273" [label="(Call,Assert(ncolumns <= MaxTupleAttributeNumber))"];
"1000528" [label="(Call,ncolumns = hstoreUniquePairs(pairs, j, &buflen))"];
"1000356" [label="(Identifier,column_info)"];
"1000215" [label="(Call,(RecordIOData *) fcinfo->flinfo->fn_extra)"];
"1000206" [label="(Call,sizeof(ColumnIOData)\n\t\t\t\t\t\t\t   + ncolumns * sizeof(ColumnIOData))"];
"1000331" [label="(Identifier,nulls)"];
"1000482" [label="(Call,column_info->column_type)"];
"1000319" [label="(Call,(bool *) palloc(ncolumns * sizeof(bool)))"];
"1000340" [label="(ControlStructure,for (i = 0, j = 0; i < ncolumns; ++i))"];
"1000504" [label="(Call,pairs[j].vallen)"];
"1000317" [label="(Call,nulls = (bool *) palloc(ncolumns * sizeof(bool)))"];
"1000278" [label="(Identifier,pairs)"];
"1000353" [label="(Block,)"];
"1000462" [label="(Call,&column_info->typiofunc)"];
"1000481" [label="(Call,column_info->column_type = column_type)"];
"1000167" [label="(Identifier,ncolumns)"];
"1000274" [label="(Call,ncolumns <= MaxTupleAttributeNumber)"];
"1000310" [label="(Call,(Datum *) palloc(ncolumns * sizeof(Datum)))"];
"1000533" [label="(Call,&buflen)"];
"1000209" -> "1000206"  [label="AST: "];
"1000209" -> "1000211"  [label="CFG: "];
"1000210" -> "1000209"  [label="AST: "];
"1000211" -> "1000209"  [label="AST: "];
"1000206" -> "1000209"  [label="CFG: "];
"1000209" -> "1000203"  [label="DDG: ncolumns"];
"1000209" -> "1000206"  [label="DDG: ncolumns"];
"1000185" -> "1000209"  [label="DDG: ncolumns"];
"1000166" -> "1000209"  [label="DDG: ncolumns"];
"1000209" -> "1000254"  [label="DDG: ncolumns"];
"1000209" -> "1000274"  [label="DDG: ncolumns"];
"1000185" -> "1000181"  [label="AST: "];
"1000185" -> "1000189"  [label="CFG: "];
"1000186" -> "1000185"  [label="AST: "];
"1000189" -> "1000185"  [label="AST: "];
"1000181" -> "1000185"  [label="CFG: "];
"1000185" -> "1000545"  [label="DDG: my_extra->ncolumns"];
"1000185" -> "1000181"  [label="DDG: my_extra->ncolumns"];
"1000185" -> "1000181"  [label="DDG: ncolumns"];
"1000166" -> "1000185"  [label="DDG: ncolumns"];
"1000185" -> "1000254"  [label="DDG: ncolumns"];
"1000185" -> "1000274"  [label="DDG: ncolumns"];
"1000166" -> "1000110"  [label="AST: "];
"1000166" -> "1000168"  [label="CFG: "];
"1000167" -> "1000166"  [label="AST: "];
"1000168" -> "1000166"  [label="AST: "];
"1000172" -> "1000166"  [label="CFG: "];
"1000166" -> "1000545"  [label="DDG: tupdesc->natts"];
"1000166" -> "1000254"  [label="DDG: ncolumns"];
"1000166" -> "1000274"  [label="DDG: ncolumns"];
"1000203" -> "1000197"  [label="AST: "];
"1000203" -> "1000206"  [label="CFG: "];
"1000204" -> "1000203"  [label="AST: "];
"1000206" -> "1000203"  [label="AST: "];
"1000197" -> "1000203"  [label="CFG: "];
"1000203" -> "1000545"  [label="DDG: sizeof(ColumnIOData)\n\t\t\t\t\t\t\t   + ncolumns * sizeof(ColumnIOData)"];
"1000203" -> "1000197"  [label="DDG: sizeof(ColumnIOData)\n\t\t\t\t\t\t\t   + ncolumns * sizeof(ColumnIOData)"];
"1000197" -> "1000191"  [label="AST: "];
"1000198" -> "1000197"  [label="AST: "];
"1000191" -> "1000197"  [label="CFG: "];
"1000197" -> "1000545"  [label="DDG: sizeof(RecordIOData) - sizeof(ColumnIOData)\n\t\t\t\t\t\t\t   + ncolumns * sizeof(ColumnIOData)"];
"1000197" -> "1000545"  [label="DDG: fcinfo->flinfo->fn_mcxt"];
"1000197" -> "1000191"  [label="DDG: fcinfo->flinfo->fn_mcxt"];
"1000197" -> "1000191"  [label="DDG: sizeof(RecordIOData) - sizeof(ColumnIOData)\n\t\t\t\t\t\t\t   + ncolumns * sizeof(ColumnIOData)"];
"1000197" -> "1000468"  [label="DDG: fcinfo->flinfo->fn_mcxt"];
"1000191" -> "1000190"  [label="AST: "];
"1000192" -> "1000191"  [label="AST: "];
"1000214" -> "1000191"  [label="CFG: "];
"1000191" -> "1000545"  [label="DDG: MemoryContextAlloc(fcinfo->flinfo->fn_mcxt,\n\t\t\t\t\t\t\t   sizeof(RecordIOData) - sizeof(ColumnIOData)\n\t\t\t\t\t\t\t   + ncolumns * sizeof(ColumnIOData))"];
"1000191" -> "1000215"  [label="DDG: fcinfo->flinfo->fn_extra"];
"1000215" -> "1000213"  [label="AST: "];
"1000215" -> "1000217"  [label="CFG: "];
"1000216" -> "1000215"  [label="AST: "];
"1000217" -> "1000215"  [label="AST: "];
"1000213" -> "1000215"  [label="CFG: "];
"1000215" -> "1000545"  [label="DDG: fcinfo->flinfo->fn_extra"];
"1000215" -> "1000213"  [label="DDG: fcinfo->flinfo->fn_extra"];
"1000213" -> "1000190"  [label="AST: "];
"1000214" -> "1000213"  [label="AST: "];
"1000224" -> "1000213"  [label="CFG: "];
"1000213" -> "1000545"  [label="DDG: my_extra"];
"1000213" -> "1000545"  [label="DDG: (RecordIOData *) fcinfo->flinfo->fn_extra"];
"1000213" -> "1000245"  [label="DDG: my_extra"];
"1000245" -> "1000244"  [label="AST: "];
"1000245" -> "1000248"  [label="CFG: "];
"1000246" -> "1000245"  [label="AST: "];
"1000247" -> "1000245"  [label="AST: "];
"1000248" -> "1000245"  [label="AST: "];
"1000260" -> "1000245"  [label="CFG: "];
"1000245" -> "1000545"  [label="DDG: sizeof(RecordIOData) - sizeof(ColumnIOData)\n\t\t\t   + ncolumns * sizeof(ColumnIOData)"];
"1000245" -> "1000545"  [label="DDG: MemSet(my_extra, 0,\n\t\t\t   sizeof(RecordIOData) - sizeof(ColumnIOData)\n\t\t\t   + ncolumns * sizeof(ColumnIOData))"];
"1000245" -> "1000545"  [label="DDG: my_extra"];
"1000182" -> "1000245"  [label="DDG: my_extra"];
"1000248" -> "1000245"  [label="DDG: sizeof(ColumnIOData)\n\t\t\t   + ncolumns * sizeof(ColumnIOData)"];
"1000468" -> "1000458"  [label="AST: "];
"1000468" -> "1000476"  [label="CFG: "];
"1000469" -> "1000468"  [label="AST: "];
"1000472" -> "1000468"  [label="AST: "];
"1000476" -> "1000468"  [label="AST: "];
"1000483" -> "1000468"  [label="CFG: "];
"1000468" -> "1000545"  [label="DDG: fmgr_info_cxt(column_info->typiofunc, &column_info->proc,\n\t\t\t\t\t\t  fcinfo->flinfo->fn_mcxt)"];
"1000468" -> "1000545"  [label="DDG: fcinfo->flinfo->fn_mcxt"];
"1000468" -> "1000545"  [label="DDG: column_info->typiofunc"];
"1000468" -> "1000460"  [label="DDG: column_info->typiofunc"];
"1000460" -> "1000468"  [label="DDG: &column_info->typiofunc"];
"1000488" -> "1000468"  [label="DDG: &column_info->proc"];
"1000468" -> "1000488"  [label="DDG: &column_info->proc"];
"1000460" -> "1000458"  [label="AST: "];
"1000460" -> "1000466"  [label="CFG: "];
"1000461" -> "1000460"  [label="AST: "];
"1000462" -> "1000460"  [label="AST: "];
"1000466" -> "1000460"  [label="AST: "];
"1000470" -> "1000460"  [label="CFG: "];
"1000460" -> "1000545"  [label="DDG: getTypeOutputInfo(column_type,\n\t\t\t\t\t\t\t  &column_info->typiofunc,\n\t\t\t\t\t\t\t  &typIsVarlena)"];
"1000460" -> "1000545"  [label="DDG: &column_info->typiofunc"];
"1000460" -> "1000545"  [label="DDG: &typIsVarlena"];
"1000453" -> "1000460"  [label="DDG: column_type"];
"1000460" -> "1000481"  [label="DDG: column_type"];
"1000481" -> "1000458"  [label="AST: "];
"1000481" -> "1000485"  [label="CFG: "];
"1000482" -> "1000481"  [label="AST: "];
"1000485" -> "1000481"  [label="AST: "];
"1000487" -> "1000481"  [label="CFG: "];
"1000481" -> "1000545"  [label="DDG: column_type"];
"1000481" -> "1000545"  [label="DDG: column_info->column_type"];
"1000481" -> "1000453"  [label="DDG: column_info->column_type"];
"1000453" -> "1000452"  [label="AST: "];
"1000453" -> "1000457"  [label="CFG: "];
"1000454" -> "1000453"  [label="AST: "];
"1000457" -> "1000453"  [label="AST: "];
"1000461" -> "1000453"  [label="CFG: "];
"1000487" -> "1000453"  [label="CFG: "];
"1000453" -> "1000545"  [label="DDG: column_type"];
"1000453" -> "1000545"  [label="DDG: column_info->column_type != column_type"];
"1000453" -> "1000545"  [label="DDG: column_info->column_type"];
"1000364" -> "1000453"  [label="DDG: column_type"];
"1000488" -> "1000486"  [label="AST: "];
"1000488" -> "1000493"  [label="CFG: "];
"1000489" -> "1000488"  [label="AST: "];
"1000493" -> "1000488"  [label="AST: "];
"1000486" -> "1000488"  [label="CFG: "];
"1000488" -> "1000545"  [label="DDG: &column_info->proc"];
"1000488" -> "1000545"  [label="DDG: values[i]"];
"1000488" -> "1000486"  [label="DDG: &column_info->proc"];
"1000488" -> "1000486"  [label="DDG: values[i]"];
"1000326" -> "1000488"  [label="DDG: values"];
"1000334" -> "1000488"  [label="DDG: values"];
"1000486" -> "1000353"  [label="AST: "];
"1000487" -> "1000486"  [label="AST: "];
"1000499" -> "1000486"  [label="CFG: "];
"1000486" -> "1000545"  [label="DDG: OutputFunctionCall(&column_info->proc, values[i])"];
"1000486" -> "1000496"  [label="DDG: value"];
"1000486" -> "1000510"  [label="DDG: value"];
"1000496" -> "1000353"  [label="AST: "];
"1000496" -> "1000502"  [label="CFG: "];
"1000497" -> "1000496"  [label="AST: "];
"1000502" -> "1000496"  [label="AST: "];
"1000506" -> "1000496"  [label="CFG: "];
"1000496" -> "1000545"  [label="DDG: pairs[j].val"];
"1000510" -> "1000509"  [label="AST: "];
"1000510" -> "1000511"  [label="CFG: "];
"1000511" -> "1000510"  [label="AST: "];
"1000509" -> "1000510"  [label="CFG: "];
"1000510" -> "1000545"  [label="DDG: value"];
"1000510" -> "1000509"  [label="DDG: value"];
"1000509" -> "1000503"  [label="AST: "];
"1000503" -> "1000509"  [label="CFG: "];
"1000509" -> "1000545"  [label="DDG: strlen(value)"];
"1000509" -> "1000503"  [label="DDG: strlen(value)"];
"1000503" -> "1000353"  [label="AST: "];
"1000504" -> "1000503"  [label="AST: "];
"1000515" -> "1000503"  [label="CFG: "];
"1000503" -> "1000545"  [label="DDG: hstoreCheckValLen(strlen(value))"];
"1000503" -> "1000545"  [label="DDG: pairs[j].vallen"];
"1000207" -> "1000206"  [label="AST: "];
"1000206" -> "1000545"  [label="DDG: ncolumns * sizeof(ColumnIOData)"];
"1000254" -> "1000251"  [label="AST: "];
"1000254" -> "1000256"  [label="CFG: "];
"1000255" -> "1000254"  [label="AST: "];
"1000256" -> "1000254"  [label="AST: "];
"1000251" -> "1000254"  [label="CFG: "];
"1000254" -> "1000248"  [label="DDG: ncolumns"];
"1000254" -> "1000251"  [label="DDG: ncolumns"];
"1000254" -> "1000268"  [label="DDG: ncolumns"];
"1000254" -> "1000274"  [label="DDG: ncolumns"];
"1000248" -> "1000251"  [label="CFG: "];
"1000249" -> "1000248"  [label="AST: "];
"1000251" -> "1000248"  [label="AST: "];
"1000248" -> "1000545"  [label="DDG: sizeof(ColumnIOData)\n\t\t\t   + ncolumns * sizeof(ColumnIOData)"];
"1000252" -> "1000251"  [label="AST: "];
"1000251" -> "1000545"  [label="DDG: ncolumns * sizeof(ColumnIOData)"];
"1000268" -> "1000244"  [label="AST: "];
"1000268" -> "1000272"  [label="CFG: "];
"1000269" -> "1000268"  [label="AST: "];
"1000272" -> "1000268"  [label="AST: "];
"1000275" -> "1000268"  [label="CFG: "];
"1000268" -> "1000545"  [label="DDG: my_extra->ncolumns"];
"1000274" -> "1000273"  [label="AST: "];
"1000274" -> "1000276"  [label="CFG: "];
"1000275" -> "1000274"  [label="AST: "];
"1000276" -> "1000274"  [label="AST: "];
"1000273" -> "1000274"  [label="CFG: "];
"1000274" -> "1000545"  [label="DDG: MaxTupleAttributeNumber"];
"1000274" -> "1000273"  [label="DDG: ncolumns"];
"1000274" -> "1000273"  [label="DDG: MaxTupleAttributeNumber"];
"1000274" -> "1000280"  [label="DDG: ncolumns"];
"1000273" -> "1000110"  [label="AST: "];
"1000278" -> "1000273"  [label="CFG: "];
"1000273" -> "1000545"  [label="DDG: ncolumns <= MaxTupleAttributeNumber"];
"1000273" -> "1000545"  [label="DDG: Assert(ncolumns <= MaxTupleAttributeNumber)"];
"1000280" -> "1000279"  [label="AST: "];
"1000280" -> "1000282"  [label="CFG: "];
"1000281" -> "1000280"  [label="AST: "];
"1000282" -> "1000280"  [label="AST: "];
"1000279" -> "1000280"  [label="CFG: "];
"1000280" -> "1000279"  [label="DDG: ncolumns"];
"1000280" -> "1000313"  [label="DDG: ncolumns"];
"1000280" -> "1000348"  [label="DDG: ncolumns"];
"1000279" -> "1000277"  [label="AST: "];
"1000277" -> "1000279"  [label="CFG: "];
"1000279" -> "1000545"  [label="DDG: ncolumns * sizeof(Pairs)"];
"1000279" -> "1000277"  [label="DDG: ncolumns * sizeof(Pairs)"];
"1000277" -> "1000110"  [label="AST: "];
"1000278" -> "1000277"  [label="AST: "];
"1000285" -> "1000277"  [label="CFG: "];
"1000277" -> "1000545"  [label="DDG: palloc(ncolumns * sizeof(Pairs))"];
"1000277" -> "1000530"  [label="DDG: pairs"];
"1000530" -> "1000528"  [label="AST: "];
"1000530" -> "1000533"  [label="CFG: "];
"1000531" -> "1000530"  [label="AST: "];
"1000532" -> "1000530"  [label="AST: "];
"1000533" -> "1000530"  [label="AST: "];
"1000528" -> "1000530"  [label="CFG: "];
"1000530" -> "1000545"  [label="DDG: &buflen"];
"1000530" -> "1000545"  [label="DDG: j"];
"1000530" -> "1000528"  [label="DDG: pairs"];
"1000530" -> "1000528"  [label="DDG: j"];
"1000530" -> "1000528"  [label="DDG: &buflen"];
"1000449" -> "1000530"  [label="DDG: j"];
"1000526" -> "1000530"  [label="DDG: j"];
"1000345" -> "1000530"  [label="DDG: j"];
"1000530" -> "1000537"  [label="DDG: pairs"];
"1000528" -> "1000110"  [label="AST: "];
"1000529" -> "1000528"  [label="AST: "];
"1000536" -> "1000528"  [label="CFG: "];
"1000528" -> "1000545"  [label="DDG: hstoreUniquePairs(pairs, j, &buflen)"];
"1000528" -> "1000537"  [label="DDG: ncolumns"];
"1000537" -> "1000535"  [label="AST: "];
"1000537" -> "1000540"  [label="CFG: "];
"1000538" -> "1000537"  [label="AST: "];
"1000539" -> "1000537"  [label="AST: "];
"1000540" -> "1000537"  [label="AST: "];
"1000535" -> "1000537"  [label="CFG: "];
"1000537" -> "1000545"  [label="DDG: buflen"];
"1000537" -> "1000545"  [label="DDG: ncolumns"];
"1000537" -> "1000545"  [label="DDG: pairs"];
"1000537" -> "1000535"  [label="DDG: pairs"];
"1000537" -> "1000535"  [label="DDG: ncolumns"];
"1000537" -> "1000535"  [label="DDG: buflen"];
"1000535" -> "1000110"  [label="AST: "];
"1000536" -> "1000535"  [label="AST: "];
"1000542" -> "1000535"  [label="CFG: "];
"1000535" -> "1000545"  [label="DDG: hstorePairs(pairs, ncolumns, buflen)"];
"1000535" -> "1000543"  [label="DDG: out"];
"1000543" -> "1000110"  [label="AST: "];
"1000543" -> "1000544"  [label="CFG: "];
"1000544" -> "1000543"  [label="AST: "];
"1000545" -> "1000543"  [label="CFG: "];
"1000543" -> "1000545"  [label="DDG: PG_RETURN_POINTER(out)"];
"1000543" -> "1000545"  [label="DDG: out"];
"1000313" -> "1000312"  [label="AST: "];
"1000313" -> "1000315"  [label="CFG: "];
"1000314" -> "1000313"  [label="AST: "];
"1000315" -> "1000313"  [label="AST: "];
"1000312" -> "1000313"  [label="CFG: "];
"1000313" -> "1000312"  [label="DDG: ncolumns"];
"1000313" -> "1000322"  [label="DDG: ncolumns"];
"1000312" -> "1000310"  [label="AST: "];
"1000310" -> "1000312"  [label="CFG: "];
"1000312" -> "1000545"  [label="DDG: ncolumns * sizeof(Datum)"];
"1000312" -> "1000310"  [label="DDG: ncolumns * sizeof(Datum)"];
"1000310" -> "1000308"  [label="AST: "];
"1000311" -> "1000310"  [label="AST: "];
"1000308" -> "1000310"  [label="CFG: "];
"1000310" -> "1000545"  [label="DDG: palloc(ncolumns * sizeof(Datum))"];
"1000310" -> "1000308"  [label="DDG: palloc(ncolumns * sizeof(Datum))"];
"1000308" -> "1000286"  [label="AST: "];
"1000309" -> "1000308"  [label="AST: "];
"1000318" -> "1000308"  [label="CFG: "];
"1000308" -> "1000545"  [label="DDG: (Datum *) palloc(ncolumns * sizeof(Datum))"];
"1000308" -> "1000326"  [label="DDG: values"];
"1000326" -> "1000286"  [label="AST: "];
"1000326" -> "1000331"  [label="CFG: "];
"1000327" -> "1000326"  [label="AST: "];
"1000329" -> "1000326"  [label="AST: "];
"1000330" -> "1000326"  [label="AST: "];
"1000331" -> "1000326"  [label="AST: "];
"1000343" -> "1000326"  [label="CFG: "];
"1000326" -> "1000545"  [label="DDG: heap_deform_tuple(&tuple, tupdesc, values, nulls)"];
"1000326" -> "1000545"  [label="DDG: nulls"];
"1000326" -> "1000545"  [label="DDG: values"];
"1000326" -> "1000545"  [label="DDG: &tuple"];
"1000161" -> "1000326"  [label="DDG: tupdesc"];
"1000317" -> "1000326"  [label="DDG: nulls"];
"1000326" -> "1000415"  [label="DDG: nulls"];
"1000326" -> "1000541"  [label="DDG: tupdesc"];
"1000415" -> "1000414"  [label="AST: "];
"1000415" -> "1000416"  [label="CFG: "];
"1000416" -> "1000415"  [label="AST: "];
"1000418" -> "1000415"  [label="CFG: "];
"1000414" -> "1000415"  [label="CFG: "];
"1000415" -> "1000545"  [label="DDG: nulls"];
"1000415" -> "1000414"  [label="DDG: nulls"];
"1000337" -> "1000415"  [label="DDG: nulls"];
"1000414" -> "1000415"  [label="DDG: nulls[i]"];
"1000414" -> "1000413"  [label="AST: "];
"1000414" -> "1000417"  [label="CFG: "];
"1000417" -> "1000414"  [label="AST: "];
"1000424" -> "1000414"  [label="CFG: "];
"1000455" -> "1000414"  [label="CFG: "];
"1000414" -> "1000545"  [label="DDG: !nulls || nulls[i]"];
"1000414" -> "1000545"  [label="DDG: !nulls"];
"1000414" -> "1000545"  [label="DDG: nulls[i]"];
"1000541" -> "1000110"  [label="AST: "];
"1000541" -> "1000542"  [label="CFG: "];
"1000542" -> "1000541"  [label="AST: "];
"1000544" -> "1000541"  [label="CFG: "];
"1000541" -> "1000545"  [label="DDG: tupdesc"];
"1000541" -> "1000545"  [label="DDG: ReleaseTupleDesc(tupdesc)"];
"1000161" -> "1000541"  [label="DDG: tupdesc"];
"1000322" -> "1000321"  [label="AST: "];
"1000322" -> "1000324"  [label="CFG: "];
"1000323" -> "1000322"  [label="AST: "];
"1000324" -> "1000322"  [label="AST: "];
"1000321" -> "1000322"  [label="CFG: "];
"1000322" -> "1000321"  [label="DDG: ncolumns"];
"1000322" -> "1000348"  [label="DDG: ncolumns"];
"1000321" -> "1000319"  [label="AST: "];
"1000319" -> "1000321"  [label="CFG: "];
"1000321" -> "1000545"  [label="DDG: ncolumns * sizeof(bool)"];
"1000321" -> "1000319"  [label="DDG: ncolumns * sizeof(bool)"];
"1000319" -> "1000317"  [label="AST: "];
"1000320" -> "1000319"  [label="AST: "];
"1000317" -> "1000319"  [label="CFG: "];
"1000319" -> "1000545"  [label="DDG: palloc(ncolumns * sizeof(bool))"];
"1000319" -> "1000317"  [label="DDG: palloc(ncolumns * sizeof(bool))"];
"1000317" -> "1000286"  [label="AST: "];
"1000318" -> "1000317"  [label="AST: "];
"1000328" -> "1000317"  [label="CFG: "];
"1000317" -> "1000545"  [label="DDG: (bool *) palloc(ncolumns * sizeof(bool))"];
"1000348" -> "1000340"  [label="AST: "];
"1000348" -> "1000350"  [label="CFG: "];
"1000349" -> "1000348"  [label="AST: "];
"1000350" -> "1000348"  [label="AST: "];
"1000356" -> "1000348"  [label="CFG: "];
"1000529" -> "1000348"  [label="CFG: "];
"1000348" -> "1000545"  [label="DDG: i"];
"1000348" -> "1000545"  [label="DDG: i < ncolumns"];
"1000342" -> "1000348"  [label="DDG: i"];
"1000351" -> "1000348"  [label="DDG: i"];
"1000348" -> "1000351"  [label="DDG: i"];
"1000351" -> "1000340"  [label="AST: "];
"1000351" -> "1000352"  [label="CFG: "];
"1000352" -> "1000351"  [label="AST: "];
"1000349" -> "1000351"  [label="CFG: "];
}
