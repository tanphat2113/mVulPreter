digraph "0_savannah_8fcf61523644df42e1905c81bed26838e0b04f91@API" {
"1001349" [label="(Call,memchr (line_buf, eolbyte, (buf + size) - line_buf))"];
"1001352" [label="(Call,(buf + size) - line_buf)"];
"1001343" [label="(Call,*line_buf = line_next)"];
"1001336" [label="(Call,line_next < buf + size)"];
"1001385" [label="(Call,line_next - line_buf)"];
"1001369" [label="(Call,line_next = line_end + 1)"];
"1001358" [label="(Call,line_end == NULL)"];
"1001347" [label="(Call,*line_end = memchr (line_buf, eolbyte, (buf + size) - line_buf))"];
"1001349" [label="(Call,memchr (line_buf, eolbyte, (buf + size) - line_buf))"];
"1001116" [label="(Call,memchr (lastout, eolbyte, lim - lastout))"];
"1001119" [label="(Call,lim - lastout)"];
"1001109" [label="(Call,lastout < lim)"];
"1001099" [label="(Call,!lastout)"];
"1001090" [label="(Call,lastout = lim)"];
"1001047" [label="(Call,print_line_middle (beg, lim, line_color, match_color))"];
"1000981" [label="(Call,print_line_head (beg, lim, sep))"];
"1001020" [label="(Call,line_color = match_color = NULL)"];
"1001022" [label="(Call,match_color = NULL)"];
"1000997" [label="(Call,line_color = (((sep == SEP_CHAR_SELECTED)\n                     ^ (out_invert && (color_option < 0)))\n                    ? selected_line_color  : context_line_color))"];
"1001011" [label="(Call,match_color = (sep == SEP_CHAR_SELECTED\n                     ? selected_match_color : context_match_color))"];
"1001068" [label="(Call,lim > beg)"];
"1001060" [label="(Call,print_line_tail (beg, lim, line_color))"];
"1001045" [label="(Call,beg = print_line_middle (beg, lim, line_color, match_color))"];
"1001058" [label="(Call,beg = print_line_tail (beg, lim, line_color))"];
"1001074" [label="(Call,lim - beg)"];
"1001146" [label="(Call,prline (lastout, nl + 1, SEP_CHAR_REJECTED))"];
"1001130" [label="(Call,execute (lastout, nl + 1 - lastout,\n                        &match_size, NULL))"];
"1001134" [label="(Call,1 - lastout)"];
"1001114" [label="(Call,*nl = memchr (lastout, eolbyte, lim - lastout))"];
"1001101" [label="(Call,lastout = bufbeg)"];
"1001361" [label="(Call,line_next = line_end = buf + size)"];
"1001363" [label="(Call,line_end = buf + size)"];
"1001333" [label="(Call,line_next = buf)"];
"1001383" [label="(Call,execute (line_buf, line_next - line_buf, match_size, start_ptr))"];
"1001375" [label="(Call,start_ptr && start_ptr >= line_end)"];
"1001377" [label="(Call,start_ptr >= line_end)"];
"1001381" [label="(Call,result = execute (line_buf, line_next - line_buf, match_size, start_ptr))"];
"1001391" [label="(Call,result != (size_t) -1)"];
"1001398" [label="(Call,(line_buf - buf) + result)"];
"1001397" [label="(Return,return (line_buf - buf) + result;)"];
"1001399" [label="(Call,line_buf - buf)"];
"1001371" [label="(Call,line_end + 1)"];
"1001378" [label="(Identifier,start_ptr)"];
"1001049" [label="(Identifier,lim)"];
"1001045" [label="(Call,beg = print_line_middle (beg, lim, line_color, match_color))"];
"1001357" [label="(ControlStructure,if (line_end == NULL))"];
"1001347" [label="(Call,*line_end = memchr (line_buf, eolbyte, (buf + size) - line_buf))"];
"1001052" [label="(ControlStructure,if (!only_matching && *line_color))"];
"1001063" [label="(Identifier,line_color)"];
"1001028" [label="(Identifier,only_matching)"];
"1001176" [label="(Call,bp = lastout ? lastout : bufbeg)"];
"1001112" [label="(Block,)"];
"1001011" [label="(Call,match_color = (sep == SEP_CHAR_SELECTED\n                     ? selected_match_color : context_match_color))"];
"1001332" [label="(ControlStructure,for (line_next = buf; line_next < buf + size; ))"];
"1001380" [label="(ControlStructure,continue;)"];
"1001134" [label="(Call,1 - lastout)"];
"1001351" [label="(Identifier,eolbyte)"];
"1001352" [label="(Call,(buf + size) - line_buf)"];
"1001146" [label="(Call,prline (lastout, nl + 1, SEP_CHAR_REJECTED))"];
"1001091" [label="(Identifier,lastout)"];
"1001065" [label="(Call,!only_matching && lim > beg)"];
"1001147" [label="(Identifier,lastout)"];
"1001374" [label="(ControlStructure,if (start_ptr && start_ptr >= line_end))"];
"1001385" [label="(Call,line_next - line_buf)"];
"1001359" [label="(Identifier,line_end)"];
"1001090" [label="(Call,lastout = lim)"];
"1001361" [label="(Call,line_next = line_end = buf + size)"];
"1001151" [label="(Identifier,SEP_CHAR_REJECTED)"];
"1001373" [label="(Literal,1)"];
"1000978" [label="(ControlStructure,if (!only_matching))"];
"1001398" [label="(Call,(line_buf - buf) + result)"];
"1000983" [label="(Identifier,lim)"];
"1001111" [label="(Identifier,lim)"];
"1001391" [label="(Call,result != (size_t) -1)"];
"1001337" [label="(Identifier,line_next)"];
"1001137" [label="(Call,&match_size)"];
"1001397" [label="(Return,return (line_buf - buf) + result;)"];
"1001348" [label="(Identifier,line_end)"];
"1001047" [label="(Call,print_line_middle (beg, lim, line_color, match_color))"];
"1001117" [label="(Identifier,lastout)"];
"1001051" [label="(Identifier,match_color)"];
"1001118" [label="(Identifier,eolbyte)"];
"1001148" [label="(Call,nl + 1)"];
"1001114" [label="(Call,*nl = memchr (lastout, eolbyte, lim - lastout))"];
"1001389" [label="(Identifier,start_ptr)"];
"1001383" [label="(Call,execute (line_buf, line_next - line_buf, match_size, start_ptr))"];
"1001350" [label="(Identifier,line_buf)"];
"1001074" [label="(Call,lim - beg)"];
"1001356" [label="(Identifier,line_buf)"];
"1001099" [label="(Call,!lastout)"];
"1001071" [label="(Call,fwrite (beg, 1, lim - beg, stdout))"];
"1001062" [label="(Identifier,lim)"];
"1001103" [label="(Identifier,bufbeg)"];
"1001408" [label="(MethodReturn,RET)"];
"1001360" [label="(Identifier,NULL)"];
"1000999" [label="(Call,((sep == SEP_CHAR_SELECTED)\n                     ^ (out_invert && (color_option < 0)))\n                    ? selected_line_color  : context_line_color)"];
"1001012" [label="(Identifier,match_color)"];
"1001092" [label="(Identifier,lim)"];
"1001362" [label="(Identifier,line_next)"];
"1001333" [label="(Call,line_next = buf)"];
"1001109" [label="(Call,lastout < lim)"];
"1000984" [label="(Identifier,sep)"];
"1001102" [label="(Identifier,lastout)"];
"1000982" [label="(Identifier,beg)"];
"1001024" [label="(Identifier,NULL)"];
"1001068" [label="(Call,lim > beg)"];
"1001162" [label="(Call,eol = eolbyte)"];
"1001387" [label="(Identifier,line_buf)"];
"1001129" [label="(Call,execute (lastout, nl + 1 - lastout,\n                        &match_size, NULL) == (size_t) -1)"];
"1001228" [label="(Call,p < beg)"];
"1001060" [label="(Call,print_line_tail (beg, lim, line_color))"];
"1001076" [label="(Identifier,beg)"];
"1001400" [label="(Identifier,line_buf)"];
"1001125" [label="(ControlStructure,if (outleft\n          || ((execute (lastout, nl + 1 - lastout,\n                        &match_size, NULL) == (size_t) -1)\n              == !out_invert)))"];
"1001258" [label="(Call,p < lim)"];
"1001061" [label="(Identifier,beg)"];
"1001402" [label="(Identifier,result)"];
"1001130" [label="(Call,execute (lastout, nl + 1 - lastout,\n                        &match_size, NULL))"];
"1000988" [label="(Call,sep == SEP_CHAR_SELECTED)"];
"1001401" [label="(Identifier,buf)"];
"1001371" [label="(Call,line_end + 1)"];
"1001399" [label="(Call,line_buf - buf)"];
"1001364" [label="(Identifier,line_end)"];
"1000998" [label="(Identifier,line_color)"];
"1001022" [label="(Call,match_color = NULL)"];
"1001370" [label="(Identifier,line_next)"];
"1001174" [label="(Call,prpending (beg))"];
"1001038" [label="(ControlStructure,if (matching && (only_matching || *match_color)))"];
"1001110" [label="(Identifier,lastout)"];
"1001069" [label="(Identifier,lim)"];
"1001132" [label="(Call,nl + 1 - lastout)"];
"1001094" [label="(Identifier,line_buffered)"];
"1001135" [label="(Literal,1)"];
"1001375" [label="(Call,start_ptr && start_ptr >= line_end)"];
"1001116" [label="(Call,memchr (lastout, eolbyte, lim - lastout))"];
"1001369" [label="(Call,line_next = line_end + 1)"];
"1001363" [label="(Call,line_end = buf + size)"];
"1001343" [label="(Call,*line_buf = line_next)"];
"1001105" [label="(Call,pending > 0 && lastout < lim)"];
"1001345" [label="(Identifier,line_next)"];
"1001120" [label="(Identifier,lim)"];
"1001121" [label="(Identifier,lastout)"];
"1001349" [label="(Call,memchr (line_buf, eolbyte, (buf + size) - line_buf))"];
"1001382" [label="(Identifier,result)"];
"1001379" [label="(Identifier,line_end)"];
"1001358" [label="(Call,line_end == NULL)"];
"1001115" [label="(Identifier,nl)"];
"1001101" [label="(Call,lastout = bufbeg)"];
"1000974" [label="(Block,)"];
"1001046" [label="(Identifier,beg)"];
"1001390" [label="(ControlStructure,if (result != (size_t) -1))"];
"1001303" [label="(Call,prline (beg, lim, SEP_CHAR_SELECTED))"];
"1001067" [label="(Identifier,only_matching)"];
"1001136" [label="(Identifier,lastout)"];
"1001100" [label="(Identifier,lastout)"];
"1001212" [label="(Call,p != lastout)"];
"1000997" [label="(Call,line_color = (((sep == SEP_CHAR_SELECTED)\n                     ^ (out_invert && (color_option < 0)))\n                    ? selected_line_color  : context_line_color))"];
"1001059" [label="(Identifier,beg)"];
"1001336" [label="(Call,line_next < buf + size)"];
"1001131" [label="(Identifier,lastout)"];
"1001119" [label="(Call,lim - lastout)"];
"1001178" [label="(Call,lastout ? lastout : bufbeg)"];
"1001098" [label="(ControlStructure,if (!lastout))"];
"1000981" [label="(Call,print_line_head (beg, lim, sep))"];
"1001353" [label="(Call,buf + size)"];
"1001365" [label="(Call,buf + size)"];
"1001338" [label="(Call,buf + size)"];
"1001048" [label="(Identifier,beg)"];
"1001070" [label="(Identifier,beg)"];
"1001023" [label="(Identifier,match_color)"];
"1001393" [label="(Call,(size_t) -1)"];
"1001341" [label="(Block,)"];
"1001381" [label="(Call,result = execute (line_buf, line_next - line_buf, match_size, start_ptr))"];
"1001372" [label="(Identifier,line_end)"];
"1001058" [label="(Call,beg = print_line_tail (beg, lim, line_color))"];
"1001334" [label="(Identifier,line_next)"];
"1001388" [label="(Identifier,match_size)"];
"1001368" [label="(ControlStructure,else)"];
"1001376" [label="(Identifier,start_ptr)"];
"1001021" [label="(Identifier,line_color)"];
"1001075" [label="(Identifier,lim)"];
"1001055" [label="(Identifier,only_matching)"];
"1000986" [label="(Identifier,matching)"];
"1001344" [label="(Identifier,line_buf)"];
"1001335" [label="(Identifier,buf)"];
"1001019" [label="(ControlStructure,else)"];
"1000996" [label="(Block,)"];
"1001377" [label="(Call,start_ptr >= line_end)"];
"1001384" [label="(Identifier,line_buf)"];
"1001020" [label="(Call,line_color = match_color = NULL)"];
"1001013" [label="(Call,sep == SEP_CHAR_SELECTED\n                     ? selected_match_color : context_match_color)"];
"1001139" [label="(Identifier,NULL)"];
"1001077" [label="(Identifier,stdout)"];
"1001124" [label="(Identifier,pending)"];
"1001107" [label="(Identifier,pending)"];
"1001386" [label="(Identifier,line_next)"];
"1001050" [label="(Identifier,line_color)"];
"1001243" [label="(Call,prline (p, nl, SEP_CHAR_REJECTED))"];
"1001392" [label="(Identifier,result)"];
"1001349" -> "1001347"  [label="AST: "];
"1001349" -> "1001352"  [label="CFG: "];
"1001350" -> "1001349"  [label="AST: "];
"1001351" -> "1001349"  [label="AST: "];
"1001352" -> "1001349"  [label="AST: "];
"1001347" -> "1001349"  [label="CFG: "];
"1001349" -> "1001408"  [label="DDG: line_buf"];
"1001349" -> "1001408"  [label="DDG: (buf + size) - line_buf"];
"1001349" -> "1001408"  [label="DDG: eolbyte"];
"1001349" -> "1001347"  [label="DDG: line_buf"];
"1001349" -> "1001347"  [label="DDG: eolbyte"];
"1001349" -> "1001347"  [label="DDG: (buf + size) - line_buf"];
"1001352" -> "1001349"  [label="DDG: line_buf"];
"1001352" -> "1001349"  [label="DDG: buf + size"];
"1001116" -> "1001349"  [label="DDG: eolbyte"];
"1001349" -> "1001385"  [label="DDG: line_buf"];
"1001352" -> "1001356"  [label="CFG: "];
"1001353" -> "1001352"  [label="AST: "];
"1001356" -> "1001352"  [label="AST: "];
"1001352" -> "1001408"  [label="DDG: buf + size"];
"1001343" -> "1001352"  [label="DDG: line_buf"];
"1001343" -> "1001341"  [label="AST: "];
"1001343" -> "1001345"  [label="CFG: "];
"1001344" -> "1001343"  [label="AST: "];
"1001345" -> "1001343"  [label="AST: "];
"1001348" -> "1001343"  [label="CFG: "];
"1001336" -> "1001343"  [label="DDG: line_next"];
"1001336" -> "1001332"  [label="AST: "];
"1001336" -> "1001338"  [label="CFG: "];
"1001337" -> "1001336"  [label="AST: "];
"1001338" -> "1001336"  [label="AST: "];
"1001344" -> "1001336"  [label="CFG: "];
"1001405" -> "1001336"  [label="CFG: "];
"1001336" -> "1001408"  [label="DDG: line_next"];
"1001336" -> "1001408"  [label="DDG: buf + size"];
"1001336" -> "1001408"  [label="DDG: line_next < buf + size"];
"1001385" -> "1001336"  [label="DDG: line_next"];
"1001361" -> "1001336"  [label="DDG: line_next"];
"1001333" -> "1001336"  [label="DDG: line_next"];
"1001369" -> "1001336"  [label="DDG: line_next"];
"1001385" -> "1001383"  [label="AST: "];
"1001385" -> "1001387"  [label="CFG: "];
"1001386" -> "1001385"  [label="AST: "];
"1001387" -> "1001385"  [label="AST: "];
"1001388" -> "1001385"  [label="CFG: "];
"1001385" -> "1001408"  [label="DDG: line_next"];
"1001385" -> "1001383"  [label="DDG: line_buf"];
"1001385" -> "1001383"  [label="DDG: line_next"];
"1001369" -> "1001385"  [label="DDG: line_next"];
"1001361" -> "1001385"  [label="DDG: line_next"];
"1001369" -> "1001368"  [label="AST: "];
"1001369" -> "1001371"  [label="CFG: "];
"1001370" -> "1001369"  [label="AST: "];
"1001371" -> "1001369"  [label="AST: "];
"1001376" -> "1001369"  [label="CFG: "];
"1001369" -> "1001408"  [label="DDG: line_end + 1"];
"1001358" -> "1001369"  [label="DDG: line_end"];
"1001358" -> "1001357"  [label="AST: "];
"1001358" -> "1001360"  [label="CFG: "];
"1001359" -> "1001358"  [label="AST: "];
"1001360" -> "1001358"  [label="AST: "];
"1001362" -> "1001358"  [label="CFG: "];
"1001370" -> "1001358"  [label="CFG: "];
"1001358" -> "1001408"  [label="DDG: NULL"];
"1001358" -> "1001408"  [label="DDG: line_end == NULL"];
"1001347" -> "1001358"  [label="DDG: line_end"];
"1001130" -> "1001358"  [label="DDG: NULL"];
"1001358" -> "1001371"  [label="DDG: line_end"];
"1001358" -> "1001377"  [label="DDG: line_end"];
"1001347" -> "1001341"  [label="AST: "];
"1001348" -> "1001347"  [label="AST: "];
"1001359" -> "1001347"  [label="CFG: "];
"1001347" -> "1001408"  [label="DDG: memchr (line_buf, eolbyte, (buf + size) - line_buf)"];
"1001116" -> "1001114"  [label="AST: "];
"1001116" -> "1001119"  [label="CFG: "];
"1001117" -> "1001116"  [label="AST: "];
"1001118" -> "1001116"  [label="AST: "];
"1001119" -> "1001116"  [label="AST: "];
"1001114" -> "1001116"  [label="CFG: "];
"1001116" -> "1001408"  [label="DDG: lim - lastout"];
"1001116" -> "1001109"  [label="DDG: lastout"];
"1001116" -> "1001114"  [label="DDG: lastout"];
"1001116" -> "1001114"  [label="DDG: eolbyte"];
"1001116" -> "1001114"  [label="DDG: lim - lastout"];
"1001119" -> "1001116"  [label="DDG: lastout"];
"1001119" -> "1001116"  [label="DDG: lim"];
"1001116" -> "1001119"  [label="DDG: lastout"];
"1001116" -> "1001134"  [label="DDG: lastout"];
"1001116" -> "1001146"  [label="DDG: lastout"];
"1001116" -> "1001162"  [label="DDG: eolbyte"];
"1001116" -> "1001176"  [label="DDG: lastout"];
"1001116" -> "1001178"  [label="DDG: lastout"];
"1001116" -> "1001212"  [label="DDG: lastout"];
"1001119" -> "1001121"  [label="CFG: "];
"1001120" -> "1001119"  [label="AST: "];
"1001121" -> "1001119"  [label="AST: "];
"1001119" -> "1001408"  [label="DDG: lim"];
"1001119" -> "1001109"  [label="DDG: lim"];
"1001109" -> "1001119"  [label="DDG: lim"];
"1001109" -> "1001119"  [label="DDG: lastout"];
"1001047" -> "1001119"  [label="DDG: lim"];
"1001068" -> "1001119"  [label="DDG: lim"];
"1000981" -> "1001119"  [label="DDG: lim"];
"1001060" -> "1001119"  [label="DDG: lim"];
"1001074" -> "1001119"  [label="DDG: lim"];
"1001099" -> "1001119"  [label="DDG: lastout"];
"1001146" -> "1001119"  [label="DDG: lastout"];
"1001101" -> "1001119"  [label="DDG: lastout"];
"1001130" -> "1001119"  [label="DDG: lastout"];
"1001119" -> "1001258"  [label="DDG: lim"];
"1001119" -> "1001303"  [label="DDG: lim"];
"1001109" -> "1001105"  [label="AST: "];
"1001109" -> "1001111"  [label="CFG: "];
"1001110" -> "1001109"  [label="AST: "];
"1001111" -> "1001109"  [label="AST: "];
"1001105" -> "1001109"  [label="CFG: "];
"1001109" -> "1001408"  [label="DDG: lim"];
"1001109" -> "1001105"  [label="DDG: lastout"];
"1001109" -> "1001105"  [label="DDG: lim"];
"1001099" -> "1001109"  [label="DDG: lastout"];
"1001146" -> "1001109"  [label="DDG: lastout"];
"1001101" -> "1001109"  [label="DDG: lastout"];
"1001130" -> "1001109"  [label="DDG: lastout"];
"1001047" -> "1001109"  [label="DDG: lim"];
"1001068" -> "1001109"  [label="DDG: lim"];
"1000981" -> "1001109"  [label="DDG: lim"];
"1001060" -> "1001109"  [label="DDG: lim"];
"1001074" -> "1001109"  [label="DDG: lim"];
"1001109" -> "1001176"  [label="DDG: lastout"];
"1001109" -> "1001178"  [label="DDG: lastout"];
"1001109" -> "1001212"  [label="DDG: lastout"];
"1001109" -> "1001258"  [label="DDG: lim"];
"1001109" -> "1001303"  [label="DDG: lim"];
"1001099" -> "1001098"  [label="AST: "];
"1001099" -> "1001100"  [label="CFG: "];
"1001100" -> "1001099"  [label="AST: "];
"1001102" -> "1001099"  [label="CFG: "];
"1001107" -> "1001099"  [label="CFG: "];
"1001099" -> "1001408"  [label="DDG: !lastout"];
"1001090" -> "1001099"  [label="DDG: lastout"];
"1001099" -> "1001176"  [label="DDG: lastout"];
"1001099" -> "1001178"  [label="DDG: lastout"];
"1001099" -> "1001212"  [label="DDG: lastout"];
"1001090" -> "1000974"  [label="AST: "];
"1001090" -> "1001092"  [label="CFG: "];
"1001091" -> "1001090"  [label="AST: "];
"1001092" -> "1001090"  [label="AST: "];
"1001094" -> "1001090"  [label="CFG: "];
"1001090" -> "1001408"  [label="DDG: lim"];
"1001047" -> "1001090"  [label="DDG: lim"];
"1001068" -> "1001090"  [label="DDG: lim"];
"1000981" -> "1001090"  [label="DDG: lim"];
"1001060" -> "1001090"  [label="DDG: lim"];
"1001074" -> "1001090"  [label="DDG: lim"];
"1001047" -> "1001045"  [label="AST: "];
"1001047" -> "1001051"  [label="CFG: "];
"1001048" -> "1001047"  [label="AST: "];
"1001049" -> "1001047"  [label="AST: "];
"1001050" -> "1001047"  [label="AST: "];
"1001051" -> "1001047"  [label="AST: "];
"1001045" -> "1001047"  [label="CFG: "];
"1001047" -> "1001408"  [label="DDG: match_color"];
"1001047" -> "1001408"  [label="DDG: line_color"];
"1001047" -> "1001045"  [label="DDG: beg"];
"1001047" -> "1001045"  [label="DDG: lim"];
"1001047" -> "1001045"  [label="DDG: line_color"];
"1001047" -> "1001045"  [label="DDG: match_color"];
"1000981" -> "1001047"  [label="DDG: beg"];
"1000981" -> "1001047"  [label="DDG: lim"];
"1001020" -> "1001047"  [label="DDG: line_color"];
"1000997" -> "1001047"  [label="DDG: line_color"];
"1001011" -> "1001047"  [label="DDG: match_color"];
"1001022" -> "1001047"  [label="DDG: match_color"];
"1001047" -> "1001060"  [label="DDG: lim"];
"1001047" -> "1001060"  [label="DDG: line_color"];
"1001047" -> "1001068"  [label="DDG: lim"];
"1001047" -> "1001074"  [label="DDG: lim"];
"1001047" -> "1001258"  [label="DDG: lim"];
"1001047" -> "1001303"  [label="DDG: lim"];
"1000981" -> "1000978"  [label="AST: "];
"1000981" -> "1000984"  [label="CFG: "];
"1000982" -> "1000981"  [label="AST: "];
"1000983" -> "1000981"  [label="AST: "];
"1000984" -> "1000981"  [label="AST: "];
"1000986" -> "1000981"  [label="CFG: "];
"1000981" -> "1001408"  [label="DDG: print_line_head (beg, lim, sep)"];
"1000981" -> "1000988"  [label="DDG: sep"];
"1000981" -> "1001060"  [label="DDG: beg"];
"1000981" -> "1001060"  [label="DDG: lim"];
"1000981" -> "1001068"  [label="DDG: lim"];
"1000981" -> "1001068"  [label="DDG: beg"];
"1000981" -> "1001074"  [label="DDG: lim"];
"1000981" -> "1001074"  [label="DDG: beg"];
"1000981" -> "1001174"  [label="DDG: beg"];
"1000981" -> "1001228"  [label="DDG: beg"];
"1000981" -> "1001258"  [label="DDG: lim"];
"1000981" -> "1001303"  [label="DDG: lim"];
"1001020" -> "1001019"  [label="AST: "];
"1001020" -> "1001022"  [label="CFG: "];
"1001021" -> "1001020"  [label="AST: "];
"1001022" -> "1001020"  [label="AST: "];
"1001028" -> "1001020"  [label="CFG: "];
"1001020" -> "1001408"  [label="DDG: line_color"];
"1001022" -> "1001020"  [label="DDG: match_color"];
"1001020" -> "1001060"  [label="DDG: line_color"];
"1001022" -> "1001024"  [label="CFG: "];
"1001023" -> "1001022"  [label="AST: "];
"1001024" -> "1001022"  [label="AST: "];
"1001022" -> "1001408"  [label="DDG: NULL"];
"1001022" -> "1001408"  [label="DDG: match_color"];
"1000997" -> "1000996"  [label="AST: "];
"1000997" -> "1000999"  [label="CFG: "];
"1000998" -> "1000997"  [label="AST: "];
"1000999" -> "1000997"  [label="AST: "];
"1001012" -> "1000997"  [label="CFG: "];
"1000997" -> "1001408"  [label="DDG: line_color"];
"1000997" -> "1001408"  [label="DDG: ((sep == SEP_CHAR_SELECTED)\n                     ^ (out_invert && (color_option < 0)))\n                    ? selected_line_color  : context_line_color"];
"1000997" -> "1001060"  [label="DDG: line_color"];
"1001011" -> "1000996"  [label="AST: "];
"1001011" -> "1001013"  [label="CFG: "];
"1001012" -> "1001011"  [label="AST: "];
"1001013" -> "1001011"  [label="AST: "];
"1001028" -> "1001011"  [label="CFG: "];
"1001011" -> "1001408"  [label="DDG: match_color"];
"1001011" -> "1001408"  [label="DDG: sep == SEP_CHAR_SELECTED\n                     ? selected_match_color : context_match_color"];
"1001068" -> "1001065"  [label="AST: "];
"1001068" -> "1001070"  [label="CFG: "];
"1001069" -> "1001068"  [label="AST: "];
"1001070" -> "1001068"  [label="AST: "];
"1001065" -> "1001068"  [label="CFG: "];
"1001068" -> "1001065"  [label="DDG: lim"];
"1001068" -> "1001065"  [label="DDG: beg"];
"1001060" -> "1001068"  [label="DDG: lim"];
"1001058" -> "1001068"  [label="DDG: beg"];
"1001045" -> "1001068"  [label="DDG: beg"];
"1001068" -> "1001074"  [label="DDG: lim"];
"1001068" -> "1001074"  [label="DDG: beg"];
"1001068" -> "1001174"  [label="DDG: beg"];
"1001068" -> "1001228"  [label="DDG: beg"];
"1001068" -> "1001258"  [label="DDG: lim"];
"1001068" -> "1001303"  [label="DDG: lim"];
"1001060" -> "1001058"  [label="AST: "];
"1001060" -> "1001063"  [label="CFG: "];
"1001061" -> "1001060"  [label="AST: "];
"1001062" -> "1001060"  [label="AST: "];
"1001063" -> "1001060"  [label="AST: "];
"1001058" -> "1001060"  [label="CFG: "];
"1001060" -> "1001408"  [label="DDG: line_color"];
"1001060" -> "1001058"  [label="DDG: beg"];
"1001060" -> "1001058"  [label="DDG: lim"];
"1001060" -> "1001058"  [label="DDG: line_color"];
"1001045" -> "1001060"  [label="DDG: beg"];
"1001060" -> "1001074"  [label="DDG: lim"];
"1001060" -> "1001258"  [label="DDG: lim"];
"1001060" -> "1001303"  [label="DDG: lim"];
"1001045" -> "1001038"  [label="AST: "];
"1001046" -> "1001045"  [label="AST: "];
"1001055" -> "1001045"  [label="CFG: "];
"1001045" -> "1001408"  [label="DDG: print_line_middle (beg, lim, line_color, match_color)"];
"1001045" -> "1001074"  [label="DDG: beg"];
"1001045" -> "1001174"  [label="DDG: beg"];
"1001045" -> "1001228"  [label="DDG: beg"];
"1001058" -> "1001052"  [label="AST: "];
"1001059" -> "1001058"  [label="AST: "];
"1001067" -> "1001058"  [label="CFG: "];
"1001058" -> "1001408"  [label="DDG: print_line_tail (beg, lim, line_color)"];
"1001058" -> "1001074"  [label="DDG: beg"];
"1001058" -> "1001174"  [label="DDG: beg"];
"1001058" -> "1001228"  [label="DDG: beg"];
"1001074" -> "1001071"  [label="AST: "];
"1001074" -> "1001076"  [label="CFG: "];
"1001075" -> "1001074"  [label="AST: "];
"1001076" -> "1001074"  [label="AST: "];
"1001077" -> "1001074"  [label="CFG: "];
"1001074" -> "1001071"  [label="DDG: beg"];
"1001074" -> "1001071"  [label="DDG: lim"];
"1001074" -> "1001258"  [label="DDG: lim"];
"1001074" -> "1001303"  [label="DDG: lim"];
"1001146" -> "1001125"  [label="AST: "];
"1001146" -> "1001151"  [label="CFG: "];
"1001147" -> "1001146"  [label="AST: "];
"1001148" -> "1001146"  [label="AST: "];
"1001151" -> "1001146"  [label="AST: "];
"1001107" -> "1001146"  [label="CFG: "];
"1001146" -> "1001408"  [label="DDG: SEP_CHAR_REJECTED"];
"1001146" -> "1001408"  [label="DDG: nl + 1"];
"1001146" -> "1001408"  [label="DDG: prline (lastout, nl + 1, SEP_CHAR_REJECTED)"];
"1001130" -> "1001146"  [label="DDG: lastout"];
"1001114" -> "1001146"  [label="DDG: nl"];
"1001146" -> "1001176"  [label="DDG: lastout"];
"1001146" -> "1001178"  [label="DDG: lastout"];
"1001146" -> "1001212"  [label="DDG: lastout"];
"1001146" -> "1001243"  [label="DDG: SEP_CHAR_REJECTED"];
"1001130" -> "1001129"  [label="AST: "];
"1001130" -> "1001139"  [label="CFG: "];
"1001131" -> "1001130"  [label="AST: "];
"1001132" -> "1001130"  [label="AST: "];
"1001137" -> "1001130"  [label="AST: "];
"1001139" -> "1001130"  [label="AST: "];
"1001141" -> "1001130"  [label="CFG: "];
"1001130" -> "1001408"  [label="DDG: &match_size"];
"1001130" -> "1001408"  [label="DDG: NULL"];
"1001130" -> "1001408"  [label="DDG: nl + 1 - lastout"];
"1001130" -> "1001129"  [label="DDG: lastout"];
"1001130" -> "1001129"  [label="DDG: nl + 1 - lastout"];
"1001130" -> "1001129"  [label="DDG: &match_size"];
"1001130" -> "1001129"  [label="DDG: NULL"];
"1001134" -> "1001130"  [label="DDG: lastout"];
"1001134" -> "1001130"  [label="DDG: 1"];
"1001114" -> "1001130"  [label="DDG: nl"];
"1001130" -> "1001176"  [label="DDG: lastout"];
"1001130" -> "1001178"  [label="DDG: lastout"];
"1001130" -> "1001212"  [label="DDG: lastout"];
"1001134" -> "1001132"  [label="AST: "];
"1001134" -> "1001136"  [label="CFG: "];
"1001135" -> "1001134"  [label="AST: "];
"1001136" -> "1001134"  [label="AST: "];
"1001132" -> "1001134"  [label="CFG: "];
"1001134" -> "1001132"  [label="DDG: 1"];
"1001134" -> "1001132"  [label="DDG: lastout"];
"1001114" -> "1001112"  [label="AST: "];
"1001115" -> "1001114"  [label="AST: "];
"1001124" -> "1001114"  [label="CFG: "];
"1001114" -> "1001408"  [label="DDG: memchr (lastout, eolbyte, lim - lastout)"];
"1001114" -> "1001408"  [label="DDG: nl"];
"1001114" -> "1001132"  [label="DDG: nl"];
"1001114" -> "1001148"  [label="DDG: nl"];
"1001101" -> "1001098"  [label="AST: "];
"1001101" -> "1001103"  [label="CFG: "];
"1001102" -> "1001101"  [label="AST: "];
"1001103" -> "1001101"  [label="AST: "];
"1001107" -> "1001101"  [label="CFG: "];
"1001101" -> "1001176"  [label="DDG: lastout"];
"1001101" -> "1001178"  [label="DDG: lastout"];
"1001101" -> "1001212"  [label="DDG: lastout"];
"1001361" -> "1001357"  [label="AST: "];
"1001361" -> "1001363"  [label="CFG: "];
"1001362" -> "1001361"  [label="AST: "];
"1001363" -> "1001361"  [label="AST: "];
"1001376" -> "1001361"  [label="CFG: "];
"1001363" -> "1001361"  [label="DDG: line_end"];
"1001363" -> "1001365"  [label="CFG: "];
"1001364" -> "1001363"  [label="AST: "];
"1001365" -> "1001363"  [label="AST: "];
"1001363" -> "1001408"  [label="DDG: line_end"];
"1001363" -> "1001408"  [label="DDG: buf + size"];
"1001363" -> "1001377"  [label="DDG: line_end"];
"1001333" -> "1001332"  [label="AST: "];
"1001333" -> "1001335"  [label="CFG: "];
"1001334" -> "1001333"  [label="AST: "];
"1001335" -> "1001333"  [label="AST: "];
"1001337" -> "1001333"  [label="CFG: "];
"1001383" -> "1001381"  [label="AST: "];
"1001383" -> "1001389"  [label="CFG: "];
"1001384" -> "1001383"  [label="AST: "];
"1001388" -> "1001383"  [label="AST: "];
"1001389" -> "1001383"  [label="AST: "];
"1001381" -> "1001383"  [label="CFG: "];
"1001383" -> "1001408"  [label="DDG: match_size"];
"1001383" -> "1001408"  [label="DDG: line_next - line_buf"];
"1001383" -> "1001408"  [label="DDG: line_buf"];
"1001383" -> "1001408"  [label="DDG: start_ptr"];
"1001383" -> "1001375"  [label="DDG: start_ptr"];
"1001383" -> "1001377"  [label="DDG: start_ptr"];
"1001383" -> "1001381"  [label="DDG: line_buf"];
"1001383" -> "1001381"  [label="DDG: line_next - line_buf"];
"1001383" -> "1001381"  [label="DDG: match_size"];
"1001383" -> "1001381"  [label="DDG: start_ptr"];
"1001375" -> "1001383"  [label="DDG: start_ptr"];
"1001383" -> "1001399"  [label="DDG: line_buf"];
"1001375" -> "1001374"  [label="AST: "];
"1001375" -> "1001376"  [label="CFG: "];
"1001375" -> "1001377"  [label="CFG: "];
"1001376" -> "1001375"  [label="AST: "];
"1001377" -> "1001375"  [label="AST: "];
"1001380" -> "1001375"  [label="CFG: "];
"1001382" -> "1001375"  [label="CFG: "];
"1001375" -> "1001408"  [label="DDG: start_ptr >= line_end"];
"1001375" -> "1001408"  [label="DDG: start_ptr && start_ptr >= line_end"];
"1001375" -> "1001408"  [label="DDG: start_ptr"];
"1001377" -> "1001375"  [label="DDG: start_ptr"];
"1001377" -> "1001375"  [label="DDG: line_end"];
"1001375" -> "1001377"  [label="DDG: start_ptr"];
"1001377" -> "1001379"  [label="CFG: "];
"1001378" -> "1001377"  [label="AST: "];
"1001379" -> "1001377"  [label="AST: "];
"1001377" -> "1001408"  [label="DDG: line_end"];
"1001381" -> "1001341"  [label="AST: "];
"1001382" -> "1001381"  [label="AST: "];
"1001392" -> "1001381"  [label="CFG: "];
"1001381" -> "1001408"  [label="DDG: execute (line_buf, line_next - line_buf, match_size, start_ptr)"];
"1001381" -> "1001391"  [label="DDG: result"];
"1001391" -> "1001390"  [label="AST: "];
"1001391" -> "1001393"  [label="CFG: "];
"1001392" -> "1001391"  [label="AST: "];
"1001393" -> "1001391"  [label="AST: "];
"1001337" -> "1001391"  [label="CFG: "];
"1001400" -> "1001391"  [label="CFG: "];
"1001391" -> "1001408"  [label="DDG: (size_t) -1"];
"1001391" -> "1001408"  [label="DDG: result"];
"1001391" -> "1001408"  [label="DDG: result != (size_t) -1"];
"1001393" -> "1001391"  [label="DDG: -1"];
"1001391" -> "1001398"  [label="DDG: result"];
"1001398" -> "1001397"  [label="AST: "];
"1001398" -> "1001402"  [label="CFG: "];
"1001399" -> "1001398"  [label="AST: "];
"1001402" -> "1001398"  [label="AST: "];
"1001397" -> "1001398"  [label="CFG: "];
"1001398" -> "1001408"  [label="DDG: (line_buf - buf) + result"];
"1001398" -> "1001408"  [label="DDG: result"];
"1001398" -> "1001408"  [label="DDG: line_buf - buf"];
"1001398" -> "1001397"  [label="DDG: (line_buf - buf) + result"];
"1001399" -> "1001398"  [label="DDG: line_buf"];
"1001399" -> "1001398"  [label="DDG: buf"];
"1001397" -> "1001390"  [label="AST: "];
"1001408" -> "1001397"  [label="CFG: "];
"1001397" -> "1001408"  [label="DDG: <RET>"];
"1001399" -> "1001401"  [label="CFG: "];
"1001400" -> "1001399"  [label="AST: "];
"1001401" -> "1001399"  [label="AST: "];
"1001402" -> "1001399"  [label="CFG: "];
"1001399" -> "1001408"  [label="DDG: line_buf"];
"1001399" -> "1001408"  [label="DDG: buf"];
"1001371" -> "1001373"  [label="CFG: "];
"1001372" -> "1001371"  [label="AST: "];
"1001373" -> "1001371"  [label="AST: "];
"1001371" -> "1001408"  [label="DDG: line_end"];
}
