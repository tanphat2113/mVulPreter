digraph "0_zstd_3e5cdf1b6a85843e991d7d10f6a2567c15580da0_0@pointer" {
"1000134" [label="(Call,cctxParams->cParams.windowLog > STREAM_ACCUMULATOR_MIN)"];
"1000132" [label="(Call,longOffsets = cctxParams->cParams.windowLog > STREAM_ACCUMULATOR_MIN)"];
"1000788" [label="(Call,ZSTD_encodeSequences(\n                                        op, oend - op,\n                                        CTable_MatchLength, mlCodeTable,\n                                        CTable_OffsetBits, ofCodeTable,\n                                        CTable_LitLength, llCodeTable,\n                                        sequences, nbSeq,\n                                        longOffsets, bmi2))"];
"1000786" [label="(Call,bitstreamSize = ZSTD_encodeSequences(\n                                        op, oend - op,\n                                        CTable_MatchLength, mlCodeTable,\n                                        CTable_OffsetBits, ofCodeTable,\n                                        CTable_LitLength, llCodeTable,\n                                        sequences, nbSeq,\n                                        longOffsets, bmi2))"];
"1000804" [label="(Call,ZSTD_isError(bitstreamSize))"];
"1000806" [label="(Return,return bitstreamSize;)"];
"1000808" [label="(Call,op += bitstreamSize)"];
"1000815" [label="(Call,op - lastNCount)"];
"1000812" [label="(Call,lastNCount && (op - lastNCount) < 4)"];
"1000822" [label="(Call,op - lastNCount)"];
"1000821" [label="(Call,op - lastNCount == 3)"];
"1000820" [label="(Call,assert(op - lastNCount == 3))"];
"1000814" [label="(Call,(op - lastNCount) < 4)"];
"1000832" [label="(Call,op - ostart)"];
"1000831" [label="(Return,return op - ostart;)"];
"1000197" [label="(Call,ostart = (BYTE*)dst)"];
"1000642" [label="(Call,lastNCount = op)"];
"1000812" [label="(Call,lastNCount && (op - lastNCount) < 4)"];
"1000808" [label="(Call,op += bitstreamSize)"];
"1000815" [label="(Call,op - lastNCount)"];
"1000832" [label="(Call,op - ostart)"];
"1000825" [label="(Literal,3)"];
"1000343" [label="(Call,op[1] = (BYTE)nbSeq)"];
"1000820" [label="(Call,assert(op - lastNCount == 3))"];
"1000797" [label="(Identifier,CTable_LitLength)"];
"1000789" [label="(Identifier,op)"];
"1000798" [label="(Identifier,llCodeTable)"];
"1000807" [label="(Identifier,bitstreamSize)"];
"1000223" [label="(Call,* lastNCount = NULL)"];
"1000790" [label="(Call,oend - op)"];
"1000786" [label="(Call,bitstreamSize = ZSTD_encodeSequences(\n                                        op, oend - op,\n                                        CTable_MatchLength, mlCodeTable,\n                                        CTable_OffsetBits, ofCodeTable,\n                                        CTable_LitLength, llCodeTable,\n                                        sequences, nbSeq,\n                                        longOffsets, bmi2))"];
"1000723" [label="(Call,ZSTD_buildCTable(op, oend - op, CTable_MatchLength, MLFSELog, (symbolEncodingType_e)MLtype,\n                                                    count, max, mlCodeTable, nbSeq, ML_defaultNorm, ML_defaultNormLog, MaxML,\n                                                    prevEntropy->fse.matchlengthCTable, sizeof(prevEntropy->fse.matchlengthCTable),\n                                                    workspace, wkspSize))"];
"1000177" [label="(Call,sequences = seqStorePtr->sequencesStart)"];
"1000821" [label="(Call,op - lastNCount == 3)"];
"1000784" [label="(Block,)"];
"1000796" [label="(Identifier,ofCodeTable)"];
"1000269" [label="(Call,ZSTD_compressLiterals(\n                                    &prevEntropy->huf, &nextEntropy->huf,\n                                    cctxParams->cParams.strategy, disableLiteralCompression,\n                                    op, dstCapacity,\n                                    literals, litSize,\n                                    workspace, wkspSize,\n                                    bmi2))"];
"1000806" [label="(Return,return bitstreamSize;)"];
"1000824" [label="(Identifier,lastNCount)"];
"1000834" [label="(Identifier,ostart)"];
"1000355" [label="(Call,op[0]=0xFF)"];
"1000795" [label="(Identifier,CTable_OffsetBits)"];
"1000762" [label="(Call,lastNCount = op)"];
"1000835" [label="(MethodReturn,RET)"];
"1000803" [label="(ControlStructure,if (ZSTD_isError(bitstreamSize)))"];
"1000811" [label="(ControlStructure,if (lastNCount && (op - lastNCount) < 4))"];
"1000804" [label="(Call,ZSTD_isError(bitstreamSize))"];
"1000794" [label="(Identifier,mlCodeTable)"];
"1000129" [label="(MethodParameterIn,const int bmi2)"];
"1000814" [label="(Call,(op - lastNCount) < 4)"];
"1000833" [label="(Identifier,op)"];
"1000800" [label="(Identifier,nbSeq)"];
"1000818" [label="(Literal,4)"];
"1000817" [label="(Identifier,lastNCount)"];
"1000802" [label="(Identifier,bmi2)"];
"1000130" [label="(Block,)"];
"1000788" [label="(Call,ZSTD_encodeSequences(\n                                        op, oend - op,\n                                        CTable_MatchLength, mlCodeTable,\n                                        CTable_OffsetBits, ofCodeTable,\n                                        CTable_LitLength, llCodeTable,\n                                        sequences, nbSeq,\n                                        longOffsets, bmi2))"];
"1000140" [label="(Identifier,STREAM_ACCUMULATOR_MIN)"];
"1000799" [label="(Identifier,sequences)"];
"1000134" [label="(Call,cctxParams->cParams.windowLog > STREAM_ACCUMULATOR_MIN)"];
"1000805" [label="(Identifier,bitstreamSize)"];
"1000810" [label="(Identifier,bitstreamSize)"];
"1000518" [label="(Call,lastNCount = op)"];
"1000479" [label="(Call,ZSTD_buildCTable(op, oend - op, CTable_LitLength, LLFSELog, (symbolEncodingType_e)LLtype,\n                                                    count, max, llCodeTable, nbSeq, LL_defaultNorm, LL_defaultNormLog, MaxLL,\n                                                    prevEntropy->fse.litlengthCTable, sizeof(prevEntropy->fse.litlengthCTable),\n                                                    workspace, wkspSize))"];
"1000132" [label="(Call,longOffsets = cctxParams->cParams.windowLog > STREAM_ACCUMULATOR_MIN)"];
"1000143" [label="(Identifier,strategy)"];
"1000823" [label="(Identifier,op)"];
"1000603" [label="(Call,ZSTD_buildCTable(op, oend - op, CTable_OffsetBits, OffFSELog, (symbolEncodingType_e)Offtype,\n                                                    count, max, ofCodeTable, nbSeq, OF_defaultNorm, OF_defaultNormLog, DefaultMaxOff,\n                                                    prevEntropy->fse.offcodeCTable, sizeof(prevEntropy->fse.offcodeCTable),\n                                                    workspace, wkspSize))"];
"1000331" [label="(Call,op[0] = (BYTE)((nbSeq>>8) + 0x80))"];
"1000827" [label="(Literal,5)"];
"1000133" [label="(Identifier,longOffsets)"];
"1000787" [label="(Identifier,bitstreamSize)"];
"1000809" [label="(Identifier,op)"];
"1000801" [label="(Identifier,longOffsets)"];
"1000813" [label="(Identifier,lastNCount)"];
"1000822" [label="(Call,op - lastNCount)"];
"1000816" [label="(Identifier,op)"];
"1000819" [label="(Block,)"];
"1000793" [label="(Identifier,CTable_MatchLength)"];
"1000831" [label="(Return,return op - ostart;)"];
"1000135" [label="(Call,cctxParams->cParams.windowLog)"];
"1000134" -> "1000132"  [label="AST: "];
"1000134" -> "1000140"  [label="CFG: "];
"1000135" -> "1000134"  [label="AST: "];
"1000140" -> "1000134"  [label="AST: "];
"1000132" -> "1000134"  [label="CFG: "];
"1000134" -> "1000835"  [label="DDG: STREAM_ACCUMULATOR_MIN"];
"1000134" -> "1000835"  [label="DDG: cctxParams->cParams.windowLog"];
"1000134" -> "1000132"  [label="DDG: cctxParams->cParams.windowLog"];
"1000134" -> "1000132"  [label="DDG: STREAM_ACCUMULATOR_MIN"];
"1000132" -> "1000130"  [label="AST: "];
"1000133" -> "1000132"  [label="AST: "];
"1000143" -> "1000132"  [label="CFG: "];
"1000132" -> "1000835"  [label="DDG: cctxParams->cParams.windowLog > STREAM_ACCUMULATOR_MIN"];
"1000132" -> "1000835"  [label="DDG: longOffsets"];
"1000132" -> "1000788"  [label="DDG: longOffsets"];
"1000788" -> "1000786"  [label="AST: "];
"1000788" -> "1000802"  [label="CFG: "];
"1000789" -> "1000788"  [label="AST: "];
"1000790" -> "1000788"  [label="AST: "];
"1000793" -> "1000788"  [label="AST: "];
"1000794" -> "1000788"  [label="AST: "];
"1000795" -> "1000788"  [label="AST: "];
"1000796" -> "1000788"  [label="AST: "];
"1000797" -> "1000788"  [label="AST: "];
"1000798" -> "1000788"  [label="AST: "];
"1000799" -> "1000788"  [label="AST: "];
"1000800" -> "1000788"  [label="AST: "];
"1000801" -> "1000788"  [label="AST: "];
"1000802" -> "1000788"  [label="AST: "];
"1000786" -> "1000788"  [label="CFG: "];
"1000788" -> "1000835"  [label="DDG: op"];
"1000788" -> "1000835"  [label="DDG: ofCodeTable"];
"1000788" -> "1000835"  [label="DDG: CTable_MatchLength"];
"1000788" -> "1000835"  [label="DDG: bmi2"];
"1000788" -> "1000835"  [label="DDG: oend - op"];
"1000788" -> "1000835"  [label="DDG: CTable_OffsetBits"];
"1000788" -> "1000835"  [label="DDG: nbSeq"];
"1000788" -> "1000835"  [label="DDG: sequences"];
"1000788" -> "1000835"  [label="DDG: mlCodeTable"];
"1000788" -> "1000835"  [label="DDG: llCodeTable"];
"1000788" -> "1000835"  [label="DDG: longOffsets"];
"1000788" -> "1000835"  [label="DDG: CTable_LitLength"];
"1000788" -> "1000786"  [label="DDG: llCodeTable"];
"1000788" -> "1000786"  [label="DDG: op"];
"1000788" -> "1000786"  [label="DDG: sequences"];
"1000788" -> "1000786"  [label="DDG: CTable_LitLength"];
"1000788" -> "1000786"  [label="DDG: oend - op"];
"1000788" -> "1000786"  [label="DDG: CTable_OffsetBits"];
"1000788" -> "1000786"  [label="DDG: CTable_MatchLength"];
"1000788" -> "1000786"  [label="DDG: ofCodeTable"];
"1000788" -> "1000786"  [label="DDG: bmi2"];
"1000788" -> "1000786"  [label="DDG: mlCodeTable"];
"1000788" -> "1000786"  [label="DDG: nbSeq"];
"1000788" -> "1000786"  [label="DDG: longOffsets"];
"1000343" -> "1000788"  [label="DDG: op[1]"];
"1000331" -> "1000788"  [label="DDG: op[0]"];
"1000790" -> "1000788"  [label="DDG: op"];
"1000790" -> "1000788"  [label="DDG: oend"];
"1000355" -> "1000788"  [label="DDG: op[0]"];
"1000723" -> "1000788"  [label="DDG: CTable_MatchLength"];
"1000723" -> "1000788"  [label="DDG: mlCodeTable"];
"1000723" -> "1000788"  [label="DDG: nbSeq"];
"1000603" -> "1000788"  [label="DDG: CTable_OffsetBits"];
"1000603" -> "1000788"  [label="DDG: ofCodeTable"];
"1000479" -> "1000788"  [label="DDG: CTable_LitLength"];
"1000479" -> "1000788"  [label="DDG: llCodeTable"];
"1000177" -> "1000788"  [label="DDG: sequences"];
"1000269" -> "1000788"  [label="DDG: bmi2"];
"1000129" -> "1000788"  [label="DDG: bmi2"];
"1000788" -> "1000808"  [label="DDG: op"];
"1000786" -> "1000784"  [label="AST: "];
"1000787" -> "1000786"  [label="AST: "];
"1000805" -> "1000786"  [label="CFG: "];
"1000786" -> "1000835"  [label="DDG: ZSTD_encodeSequences(\n                                        op, oend - op,\n                                        CTable_MatchLength, mlCodeTable,\n                                        CTable_OffsetBits, ofCodeTable,\n                                        CTable_LitLength, llCodeTable,\n                                        sequences, nbSeq,\n                                        longOffsets, bmi2)"];
"1000786" -> "1000804"  [label="DDG: bitstreamSize"];
"1000804" -> "1000803"  [label="AST: "];
"1000804" -> "1000805"  [label="CFG: "];
"1000805" -> "1000804"  [label="AST: "];
"1000807" -> "1000804"  [label="CFG: "];
"1000809" -> "1000804"  [label="CFG: "];
"1000804" -> "1000835"  [label="DDG: bitstreamSize"];
"1000804" -> "1000835"  [label="DDG: ZSTD_isError(bitstreamSize)"];
"1000804" -> "1000806"  [label="DDG: bitstreamSize"];
"1000804" -> "1000808"  [label="DDG: bitstreamSize"];
"1000806" -> "1000803"  [label="AST: "];
"1000806" -> "1000807"  [label="CFG: "];
"1000807" -> "1000806"  [label="AST: "];
"1000835" -> "1000806"  [label="CFG: "];
"1000806" -> "1000835"  [label="DDG: <RET>"];
"1000807" -> "1000806"  [label="DDG: bitstreamSize"];
"1000808" -> "1000784"  [label="AST: "];
"1000808" -> "1000810"  [label="CFG: "];
"1000809" -> "1000808"  [label="AST: "];
"1000810" -> "1000808"  [label="AST: "];
"1000813" -> "1000808"  [label="CFG: "];
"1000808" -> "1000835"  [label="DDG: bitstreamSize"];
"1000355" -> "1000808"  [label="DDG: op[0]"];
"1000331" -> "1000808"  [label="DDG: op[0]"];
"1000343" -> "1000808"  [label="DDG: op[1]"];
"1000808" -> "1000815"  [label="DDG: op"];
"1000808" -> "1000822"  [label="DDG: op"];
"1000808" -> "1000832"  [label="DDG: op"];
"1000815" -> "1000814"  [label="AST: "];
"1000815" -> "1000817"  [label="CFG: "];
"1000816" -> "1000815"  [label="AST: "];
"1000817" -> "1000815"  [label="AST: "];
"1000818" -> "1000815"  [label="CFG: "];
"1000815" -> "1000812"  [label="DDG: lastNCount"];
"1000815" -> "1000814"  [label="DDG: op"];
"1000815" -> "1000814"  [label="DDG: lastNCount"];
"1000355" -> "1000815"  [label="DDG: op[0]"];
"1000343" -> "1000815"  [label="DDG: op[1]"];
"1000331" -> "1000815"  [label="DDG: op[0]"];
"1000642" -> "1000815"  [label="DDG: lastNCount"];
"1000518" -> "1000815"  [label="DDG: lastNCount"];
"1000762" -> "1000815"  [label="DDG: lastNCount"];
"1000223" -> "1000815"  [label="DDG: lastNCount"];
"1000815" -> "1000822"  [label="DDG: op"];
"1000815" -> "1000832"  [label="DDG: op"];
"1000812" -> "1000811"  [label="AST: "];
"1000812" -> "1000813"  [label="CFG: "];
"1000812" -> "1000814"  [label="CFG: "];
"1000813" -> "1000812"  [label="AST: "];
"1000814" -> "1000812"  [label="AST: "];
"1000823" -> "1000812"  [label="CFG: "];
"1000833" -> "1000812"  [label="CFG: "];
"1000812" -> "1000835"  [label="DDG: (op - lastNCount) < 4"];
"1000812" -> "1000835"  [label="DDG: lastNCount"];
"1000812" -> "1000835"  [label="DDG: lastNCount && (op - lastNCount) < 4"];
"1000642" -> "1000812"  [label="DDG: lastNCount"];
"1000518" -> "1000812"  [label="DDG: lastNCount"];
"1000762" -> "1000812"  [label="DDG: lastNCount"];
"1000223" -> "1000812"  [label="DDG: lastNCount"];
"1000814" -> "1000812"  [label="DDG: op - lastNCount"];
"1000814" -> "1000812"  [label="DDG: 4"];
"1000812" -> "1000822"  [label="DDG: lastNCount"];
"1000822" -> "1000821"  [label="AST: "];
"1000822" -> "1000824"  [label="CFG: "];
"1000823" -> "1000822"  [label="AST: "];
"1000824" -> "1000822"  [label="AST: "];
"1000825" -> "1000822"  [label="CFG: "];
"1000822" -> "1000835"  [label="DDG: lastNCount"];
"1000822" -> "1000835"  [label="DDG: op"];
"1000822" -> "1000821"  [label="DDG: op"];
"1000822" -> "1000821"  [label="DDG: lastNCount"];
"1000355" -> "1000822"  [label="DDG: op[0]"];
"1000343" -> "1000822"  [label="DDG: op[1]"];
"1000331" -> "1000822"  [label="DDG: op[0]"];
"1000821" -> "1000820"  [label="AST: "];
"1000821" -> "1000825"  [label="CFG: "];
"1000825" -> "1000821"  [label="AST: "];
"1000820" -> "1000821"  [label="CFG: "];
"1000821" -> "1000835"  [label="DDG: op - lastNCount"];
"1000821" -> "1000820"  [label="DDG: op - lastNCount"];
"1000821" -> "1000820"  [label="DDG: 3"];
"1000820" -> "1000819"  [label="AST: "];
"1000827" -> "1000820"  [label="CFG: "];
"1000820" -> "1000835"  [label="DDG: assert(op - lastNCount == 3)"];
"1000820" -> "1000835"  [label="DDG: op - lastNCount == 3"];
"1000814" -> "1000818"  [label="CFG: "];
"1000818" -> "1000814"  [label="AST: "];
"1000814" -> "1000835"  [label="DDG: op - lastNCount"];
"1000832" -> "1000831"  [label="AST: "];
"1000832" -> "1000834"  [label="CFG: "];
"1000833" -> "1000832"  [label="AST: "];
"1000834" -> "1000832"  [label="AST: "];
"1000831" -> "1000832"  [label="CFG: "];
"1000832" -> "1000835"  [label="DDG: ostart"];
"1000832" -> "1000835"  [label="DDG: op - ostart"];
"1000832" -> "1000835"  [label="DDG: op"];
"1000832" -> "1000831"  [label="DDG: op - ostart"];
"1000355" -> "1000832"  [label="DDG: op[0]"];
"1000343" -> "1000832"  [label="DDG: op[1]"];
"1000331" -> "1000832"  [label="DDG: op[0]"];
"1000197" -> "1000832"  [label="DDG: ostart"];
"1000831" -> "1000130"  [label="AST: "];
"1000835" -> "1000831"  [label="CFG: "];
"1000831" -> "1000835"  [label="DDG: <RET>"];
}
