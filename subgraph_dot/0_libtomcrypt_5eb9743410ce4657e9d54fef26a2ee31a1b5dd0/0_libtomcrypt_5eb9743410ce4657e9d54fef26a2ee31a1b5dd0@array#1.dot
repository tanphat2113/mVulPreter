digraph "0_libtomcrypt_5eb9743410ce4657e9d54fef26a2ee31a1b5dd0@array" {
"1000451" [label="(Call,XMEMCMP(siginfo[1].data, hash, hashlen))"];
"1000132" [label="(Call,hash  != NULL)"];
"1000118" [label="(MethodParameterIn,const unsigned char *hash)"];
"1000443" [label="(Call,siginfo[1].size == hashlen)"];
"1000119" [label="(MethodParameterIn,unsigned long hashlen)"];
"1000450" [label="(Call,XMEMCMP(siginfo[1].data, hash, hashlen) == 0)"];
"1000442" [label="(Call,(siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0))"];
"1000420" [label="(Call,(XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&\n         (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0))"];
"1000408" [label="(Call,(digestinfo[0].size == hash_descriptor[hash_idx].OIDlen) &&\n         (XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&\n         (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0))"];
"1000404" [label="(Call,(reallen == outlen) &&\n        (digestinfo[0].size == hash_descriptor[hash_idx].OIDlen) &&\n         (XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&\n         (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0))"];
"1000136" [label="(Call,sig   != NULL)"];
"1000421" [label="(Call,XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0)"];
"1000443" [label="(Call,siginfo[1].size == hashlen)"];
"1000408" [label="(Call,(digestinfo[0].size == hash_descriptor[hash_idx].OIDlen) &&\n         (XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&\n         (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0))"];
"1000405" [label="(Call,reallen == outlen)"];
"1000451" [label="(Call,XMEMCMP(siginfo[1].data, hash, hashlen))"];
"1000457" [label="(Identifier,hash)"];
"1000450" [label="(Call,XMEMCMP(siginfo[1].data, hash, hashlen) == 0)"];
"1000449" [label="(Identifier,hashlen)"];
"1000134" [label="(Identifier,NULL)"];
"1000444" [label="(Call,siginfo[1].size)"];
"1000404" [label="(Call,(reallen == outlen) &&\n        (digestinfo[0].size == hash_descriptor[hash_idx].OIDlen) &&\n         (XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&\n         (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0))"];
"1000463" [label="(Identifier,stat)"];
"1000459" [label="(Literal,0)"];
"1000133" [label="(Identifier,hash)"];
"1000409" [label="(Call,digestinfo[0].size == hash_descriptor[hash_idx].OIDlen)"];
"1000131" [label="(Call,LTC_ARGCHK(hash  != NULL))"];
"1000132" [label="(Call,hash  != NULL)"];
"1000251" [label="(Call,pkcs_1_pss_decode(hash, hashlen, tmpbuf+1, x-1, saltlen, hash_idx, modulus_bitlen, stat))"];
"1000478" [label="(MethodReturn,int)"];
"1000119" [label="(MethodParameterIn,unsigned long hashlen)"];
"1000458" [label="(Identifier,hashlen)"];
"1000466" [label="(Identifier,out)"];
"1000442" [label="(Call,(siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0))"];
"1000452" [label="(Call,siginfo[1].data)"];
"1000454" [label="(Identifier,siginfo)"];
"1000403" [label="(ControlStructure,if ((reallen == outlen) &&\n        (digestinfo[0].size == hash_descriptor[hash_idx].OIDlen) &&\n         (XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&\n         (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0)))"];
"1000268" [label="(Call,pkcs_1_pss_decode(hash, hashlen, tmpbuf, x, saltlen, hash_idx, modulus_bitlen, stat))"];
"1000420" [label="(Call,(XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&\n         (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0))"];
"1000118" [label="(MethodParameterIn,const unsigned char *hash)"];
"1000451" -> "1000450"  [label="AST: "];
"1000451" -> "1000458"  [label="CFG: "];
"1000452" -> "1000451"  [label="AST: "];
"1000457" -> "1000451"  [label="AST: "];
"1000458" -> "1000451"  [label="AST: "];
"1000459" -> "1000451"  [label="CFG: "];
"1000451" -> "1000478"  [label="DDG: hash"];
"1000451" -> "1000478"  [label="DDG: siginfo[1].data"];
"1000451" -> "1000478"  [label="DDG: hashlen"];
"1000451" -> "1000450"  [label="DDG: siginfo[1].data"];
"1000451" -> "1000450"  [label="DDG: hash"];
"1000451" -> "1000450"  [label="DDG: hashlen"];
"1000132" -> "1000451"  [label="DDG: hash"];
"1000118" -> "1000451"  [label="DDG: hash"];
"1000443" -> "1000451"  [label="DDG: hashlen"];
"1000119" -> "1000451"  [label="DDG: hashlen"];
"1000132" -> "1000131"  [label="AST: "];
"1000132" -> "1000134"  [label="CFG: "];
"1000133" -> "1000132"  [label="AST: "];
"1000134" -> "1000132"  [label="AST: "];
"1000131" -> "1000132"  [label="CFG: "];
"1000132" -> "1000478"  [label="DDG: hash"];
"1000132" -> "1000131"  [label="DDG: hash"];
"1000132" -> "1000131"  [label="DDG: NULL"];
"1000118" -> "1000132"  [label="DDG: hash"];
"1000132" -> "1000136"  [label="DDG: NULL"];
"1000132" -> "1000251"  [label="DDG: hash"];
"1000132" -> "1000268"  [label="DDG: hash"];
"1000118" -> "1000115"  [label="AST: "];
"1000118" -> "1000478"  [label="DDG: hash"];
"1000118" -> "1000251"  [label="DDG: hash"];
"1000118" -> "1000268"  [label="DDG: hash"];
"1000443" -> "1000442"  [label="AST: "];
"1000443" -> "1000449"  [label="CFG: "];
"1000444" -> "1000443"  [label="AST: "];
"1000449" -> "1000443"  [label="AST: "];
"1000454" -> "1000443"  [label="CFG: "];
"1000442" -> "1000443"  [label="CFG: "];
"1000443" -> "1000478"  [label="DDG: hashlen"];
"1000443" -> "1000478"  [label="DDG: siginfo[1].size"];
"1000443" -> "1000442"  [label="DDG: siginfo[1].size"];
"1000443" -> "1000442"  [label="DDG: hashlen"];
"1000119" -> "1000443"  [label="DDG: hashlen"];
"1000119" -> "1000115"  [label="AST: "];
"1000119" -> "1000478"  [label="DDG: hashlen"];
"1000119" -> "1000251"  [label="DDG: hashlen"];
"1000119" -> "1000268"  [label="DDG: hashlen"];
"1000450" -> "1000442"  [label="AST: "];
"1000450" -> "1000459"  [label="CFG: "];
"1000459" -> "1000450"  [label="AST: "];
"1000442" -> "1000450"  [label="CFG: "];
"1000450" -> "1000478"  [label="DDG: XMEMCMP(siginfo[1].data, hash, hashlen)"];
"1000450" -> "1000442"  [label="DDG: XMEMCMP(siginfo[1].data, hash, hashlen)"];
"1000450" -> "1000442"  [label="DDG: 0"];
"1000442" -> "1000420"  [label="AST: "];
"1000420" -> "1000442"  [label="CFG: "];
"1000442" -> "1000478"  [label="DDG: siginfo[1].size == hashlen"];
"1000442" -> "1000478"  [label="DDG: XMEMCMP(siginfo[1].data, hash, hashlen) == 0"];
"1000442" -> "1000420"  [label="DDG: siginfo[1].size == hashlen"];
"1000442" -> "1000420"  [label="DDG: XMEMCMP(siginfo[1].data, hash, hashlen) == 0"];
"1000420" -> "1000408"  [label="AST: "];
"1000420" -> "1000421"  [label="CFG: "];
"1000421" -> "1000420"  [label="AST: "];
"1000408" -> "1000420"  [label="CFG: "];
"1000420" -> "1000478"  [label="DDG: (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0)"];
"1000420" -> "1000478"  [label="DDG: XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0"];
"1000420" -> "1000408"  [label="DDG: XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0"];
"1000420" -> "1000408"  [label="DDG: (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0)"];
"1000421" -> "1000420"  [label="DDG: XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen)"];
"1000421" -> "1000420"  [label="DDG: 0"];
"1000408" -> "1000404"  [label="AST: "];
"1000408" -> "1000409"  [label="CFG: "];
"1000409" -> "1000408"  [label="AST: "];
"1000404" -> "1000408"  [label="CFG: "];
"1000408" -> "1000478"  [label="DDG: digestinfo[0].size == hash_descriptor[hash_idx].OIDlen"];
"1000408" -> "1000478"  [label="DDG: (XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&\n         (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0)"];
"1000408" -> "1000404"  [label="DDG: digestinfo[0].size == hash_descriptor[hash_idx].OIDlen"];
"1000408" -> "1000404"  [label="DDG: (XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&\n         (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0)"];
"1000409" -> "1000408"  [label="DDG: digestinfo[0].size"];
"1000409" -> "1000408"  [label="DDG: hash_descriptor[hash_idx].OIDlen"];
"1000404" -> "1000403"  [label="AST: "];
"1000404" -> "1000405"  [label="CFG: "];
"1000405" -> "1000404"  [label="AST: "];
"1000463" -> "1000404"  [label="CFG: "];
"1000466" -> "1000404"  [label="CFG: "];
"1000404" -> "1000478"  [label="DDG: reallen == outlen"];
"1000404" -> "1000478"  [label="DDG: (reallen == outlen) &&\n        (digestinfo[0].size == hash_descriptor[hash_idx].OIDlen) &&\n         (XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&\n         (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0)"];
"1000404" -> "1000478"  [label="DDG: (digestinfo[0].size == hash_descriptor[hash_idx].OIDlen) &&\n         (XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&\n         (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0)"];
"1000405" -> "1000404"  [label="DDG: reallen"];
"1000405" -> "1000404"  [label="DDG: outlen"];
}
