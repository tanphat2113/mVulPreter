digraph "0_httpd_29c63b786ae028d82405421585e91283c8fa0da3_0@API" {
"1000115" [label="(Call,ap_assert(stream))"];
"1000105" [label="(MethodParameterIn,h2_stream *stream)"];
"1000262" [label="(Call,h2_stream_is_scheduled(stream))"];
"1000266" [label="(Call,add_trailer(stream, name, nlen, value, vlen))"];
"1000265" [label="(Return,return add_trailer(stream, name, nlen, value, vlen);)"];
"1000277" [label="(Call,h2_stream_set_error(stream, error))"];
"1000276" [label="(Return,return h2_stream_set_error(stream, error);)"];
"1000110" [label="(Block,)"];
"1000277" [label="(Call,h2_stream_set_error(stream, error))"];
"1000276" [label="(Return,return h2_stream_set_error(stream, error);)"];
"1000107" [label="(MethodParameterIn,size_t nlen)"];
"1000326" [label="(MethodReturn,apr_status_t)"];
"1000270" [label="(Identifier,value)"];
"1000274" [label="(Identifier,error)"];
"1000106" [label="(MethodParameterIn,const char *name)"];
"1000112" [label="(Call,error = 0)"];
"1000105" [label="(MethodParameterIn,h2_stream *stream)"];
"1000115" [label="(Call,ap_assert(stream))"];
"1000268" [label="(Identifier,name)"];
"1000265" [label="(Return,return add_trailer(stream, name, nlen, value, vlen);)"];
"1000146" [label="(Call,ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, stream->session->c,\n                          \"h2_stream(%ld-%d): pseudo header %s too long\", \n                           stream->session->id, stream->id, name))"];
"1000266" [label="(Call,add_trailer(stream, name, nlen, value, vlen))"];
"1000271" [label="(Identifier,vlen)"];
"1000129" [label="(Call,name[0] == ':')"];
"1000116" [label="(Identifier,stream)"];
"1000263" [label="(Identifier,stream)"];
"1000261" [label="(ControlStructure,if (h2_stream_is_scheduled(stream)))"];
"1000269" [label="(Identifier,nlen)"];
"1000136" [label="(Call,(vlen) > stream->session->s->limit_req_line)"];
"1000258" [label="(Call,error = HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE)"];
"1000119" [label="(Identifier,stream)"];
"1000184" [label="(Call,ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, stream->session->c,\n                      \"h2_stream(%ld-%d): header %s too long\", \n                      stream->session->id, stream->id, name))"];
"1000262" [label="(Call,h2_stream_is_scheduled(stream))"];
"1000264" [label="(Block,)"];
"1000267" [label="(Identifier,stream)"];
"1000275" [label="(Block,)"];
"1000109" [label="(MethodParameterIn,size_t vlen)"];
"1000108" [label="(MethodParameterIn,const char *value)"];
"1000203" [label="(Call,error = HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE)"];
"1000165" [label="(Call,error = HTTP_REQUEST_URI_TOO_LARGE)"];
"1000278" [label="(Identifier,stream)"];
"1000279" [label="(Identifier,error)"];
"1000115" -> "1000110"  [label="AST: "];
"1000115" -> "1000116"  [label="CFG: "];
"1000116" -> "1000115"  [label="AST: "];
"1000119" -> "1000115"  [label="CFG: "];
"1000115" -> "1000326"  [label="DDG: ap_assert(stream)"];
"1000115" -> "1000326"  [label="DDG: stream"];
"1000105" -> "1000115"  [label="DDG: stream"];
"1000115" -> "1000262"  [label="DDG: stream"];
"1000105" -> "1000104"  [label="AST: "];
"1000105" -> "1000326"  [label="DDG: stream"];
"1000105" -> "1000262"  [label="DDG: stream"];
"1000105" -> "1000266"  [label="DDG: stream"];
"1000105" -> "1000277"  [label="DDG: stream"];
"1000262" -> "1000261"  [label="AST: "];
"1000262" -> "1000263"  [label="CFG: "];
"1000263" -> "1000262"  [label="AST: "];
"1000267" -> "1000262"  [label="CFG: "];
"1000274" -> "1000262"  [label="CFG: "];
"1000262" -> "1000326"  [label="DDG: stream"];
"1000262" -> "1000326"  [label="DDG: h2_stream_is_scheduled(stream)"];
"1000262" -> "1000266"  [label="DDG: stream"];
"1000262" -> "1000277"  [label="DDG: stream"];
"1000266" -> "1000265"  [label="AST: "];
"1000266" -> "1000271"  [label="CFG: "];
"1000267" -> "1000266"  [label="AST: "];
"1000268" -> "1000266"  [label="AST: "];
"1000269" -> "1000266"  [label="AST: "];
"1000270" -> "1000266"  [label="AST: "];
"1000271" -> "1000266"  [label="AST: "];
"1000265" -> "1000266"  [label="CFG: "];
"1000266" -> "1000326"  [label="DDG: nlen"];
"1000266" -> "1000326"  [label="DDG: name"];
"1000266" -> "1000326"  [label="DDG: stream"];
"1000266" -> "1000326"  [label="DDG: add_trailer(stream, name, nlen, value, vlen)"];
"1000266" -> "1000326"  [label="DDG: value"];
"1000266" -> "1000326"  [label="DDG: vlen"];
"1000266" -> "1000265"  [label="DDG: add_trailer(stream, name, nlen, value, vlen)"];
"1000184" -> "1000266"  [label="DDG: name"];
"1000129" -> "1000266"  [label="DDG: name[0]"];
"1000146" -> "1000266"  [label="DDG: name"];
"1000106" -> "1000266"  [label="DDG: name"];
"1000107" -> "1000266"  [label="DDG: nlen"];
"1000108" -> "1000266"  [label="DDG: value"];
"1000136" -> "1000266"  [label="DDG: vlen"];
"1000109" -> "1000266"  [label="DDG: vlen"];
"1000265" -> "1000264"  [label="AST: "];
"1000326" -> "1000265"  [label="CFG: "];
"1000265" -> "1000326"  [label="DDG: <RET>"];
"1000277" -> "1000276"  [label="AST: "];
"1000277" -> "1000279"  [label="CFG: "];
"1000278" -> "1000277"  [label="AST: "];
"1000279" -> "1000277"  [label="AST: "];
"1000276" -> "1000277"  [label="CFG: "];
"1000277" -> "1000326"  [label="DDG: stream"];
"1000277" -> "1000326"  [label="DDG: h2_stream_set_error(stream, error)"];
"1000277" -> "1000326"  [label="DDG: error"];
"1000277" -> "1000276"  [label="DDG: h2_stream_set_error(stream, error)"];
"1000258" -> "1000277"  [label="DDG: error"];
"1000165" -> "1000277"  [label="DDG: error"];
"1000112" -> "1000277"  [label="DDG: error"];
"1000203" -> "1000277"  [label="DDG: error"];
"1000276" -> "1000275"  [label="AST: "];
"1000326" -> "1000276"  [label="CFG: "];
"1000276" -> "1000326"  [label="DDG: <RET>"];
}
