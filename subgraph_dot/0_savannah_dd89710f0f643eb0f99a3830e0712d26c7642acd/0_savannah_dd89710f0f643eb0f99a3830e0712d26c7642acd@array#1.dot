digraph "0_savannah_dd89710f0f643eb0f99a3830e0712d26c7642acd@array" {
"1000719" [label="(Call,T1_Add_Table( swap_table, 0,\n                            name_table->elements[0],\n                            name_table->lengths [0] ))"];
"1000275" [label="(Call,psaux->ps_table_funcs->init( swap_table, 4, memory ))"];
"1000172" [label="(Call,swap_table   = &loader->swap_table)"];
"1000262" [label="(Call,psaux->ps_table_funcs->init(\n                name_table, num_glyphs + 1 + TABLE_EXTEND, memory ))"];
"1000165" [label="(Call,name_table   = &loader->glyph_names)"];
"1000232" [label="(Call,num_glyphs == 0)"];
"1000221" [label="(Call,num_glyphs < 0)"];
"1000214" [label="(Call,num_glyphs = (FT_Int)T1_ToInt( parser ))"];
"1000216" [label="(Call,(FT_Int)T1_ToInt( parser ))"];
"1000218" [label="(Call,T1_ToInt( parser ))"];
"1000151" [label="(Call,parser       = &loader->parser)"];
"1000249" [label="(Call,psaux->ps_table_funcs->init(\n                code_table, num_glyphs + 1 + TABLE_EXTEND, memory ))"];
"1000158" [label="(Call,code_table   = &loader->charstrings)"];
"1000179" [label="(Call,memory       = parser->root.memory)"];
"1000551" [label="(Call,(const char*)name_table->elements[0])"];
"1000717" [label="(Call,error = T1_Add_Table( swap_table, 0,\n                            name_table->elements[0],\n                            name_table->lengths [0] ))"];
"1000816" [label="(Call,parser->root.error = error)"];
"1000737" [label="(Call,T1_Add_Table( swap_table, 1,\n                            code_table->elements[0],\n                            code_table->lengths [0] ))"];
"1000735" [label="(Call,error = T1_Add_Table( swap_table, 1,\n                            code_table->elements[0],\n                            code_table->lengths [0] ))"];
"1000219" [label="(Identifier,parser)"];
"1000773" [label="(Call,error = T1_Add_Table( name_table, n,\n                            swap_table->elements[0],\n                            swap_table->lengths [0] ))"];
"1000718" [label="(Identifier,error)"];
"1000264" [label="(Call,num_glyphs + 1 + TABLE_EXTEND)"];
"1000251" [label="(Call,num_glyphs + 1 + TABLE_EXTEND)"];
"1000484" [label="(Call,error = FT_THROW( Invalid_File_Format ))"];
"1000631" [label="(Call,error = T1_Add_Table( name_table, notdef_index,\n                            swap_table->elements[0],\n                            swap_table->lengths [0] ))"];
"1000466" [label="(Call,n < num_glyphs + TABLE_EXTEND)"];
"1000216" [label="(Call,(FT_Int)T1_ToInt( parser ))"];
"1000160" [label="(Call,&loader->charstrings)"];
"1000167" [label="(Call,&loader->glyph_names)"];
"1000263" [label="(Identifier,name_table)"];
"1000739" [label="(Literal,1)"];
"1000738" [label="(Identifier,swap_table)"];
"1000289" [label="(Call,T1_Skip_Spaces( parser ))"];
"1000174" [label="(Call,&loader->swap_table)"];
"1000755" [label="(Call,T1_Add_Table( name_table, 0, notdef_name, 8 ))"];
"1000551" [label="(Call,(const char*)name_table->elements[0])"];
"1000231" [label="(Call,num_glyphs == 0 || parser->root.error)"];
"1000225" [label="(Call,error = FT_THROW( Invalid_File_Format ))"];
"1000667" [label="(Call,error = T1_Add_Table( name_table, 0,\n                            swap_table->elements[2],\n                            swap_table->lengths [2] ))"];
"1000250" [label="(Identifier,code_table)"];
"1000179" [label="(Call,memory       = parser->root.memory)"];
"1000791" [label="(Call,error = T1_Add_Table( code_table, n,\n                            swap_table->elements[1],\n                            swap_table->lengths [1] ))"];
"1000151" [label="(Call,parser       = &loader->parser)"];
"1000633" [label="(Call,T1_Add_Table( name_table, notdef_index,\n                            swap_table->elements[0],\n                            swap_table->lengths [0] ))"];
"1000529" [label="(Call,error = T1_Add_Table( code_table, n, base, size ))"];
"1000269" [label="(Identifier,memory)"];
"1000149" [label="(Block,)"];
"1000721" [label="(Literal,0)"];
"1000720" [label="(Identifier,swap_table)"];
"1000559" [label="(Call,error = T1_Add_Table( swap_table, 0,\n                            name_table->elements[0],\n                            name_table->lengths [0] ))"];
"1000172" [label="(Call,swap_table   = &loader->swap_table)"];
"1000276" [label="(Identifier,swap_table)"];
"1000173" [label="(Identifier,swap_table)"];
"1000226" [label="(Identifier,error)"];
"1000166" [label="(Identifier,name_table)"];
"1000549" [label="(Call,ft_strcmp( \".notdef\", (const char*)name_table->elements[0] ))"];
"1000823" [label="(MethodReturn,RET)"];
"1000275" [label="(Call,psaux->ps_table_funcs->init( swap_table, 4, memory ))"];
"1000717" [label="(Call,error = T1_Add_Table( swap_table, 0,\n                            name_table->elements[0],\n                            name_table->lengths [0] ))"];
"1000727" [label="(Call,name_table->lengths [0])"];
"1000513" [label="(Call,T1_Add_Table( code_table, n,\n                                temp + face->type1.private_dict.lenIV, size ))"];
"1000737" [label="(Call,T1_Add_Table( swap_table, 1,\n                            code_table->elements[0],\n                            code_table->lengths [0] ))"];
"1000649" [label="(Call,error = T1_Add_Table( code_table, notdef_index,\n                            swap_table->elements[1],\n                            swap_table->lengths [1] ))"];
"1000577" [label="(Call,error = T1_Add_Table( swap_table, 1,\n                            code_table->elements[0],\n                            code_table->lengths [0] ))"];
"1000214" [label="(Call,num_glyphs = (FT_Int)T1_ToInt( parser ))"];
"1000232" [label="(Call,num_glyphs == 0)"];
"1000158" [label="(Call,code_table   = &loader->charstrings)"];
"1000165" [label="(Call,name_table   = &loader->glyph_names)"];
"1000468" [label="(Call,num_glyphs + TABLE_EXTEND)"];
"1000719" [label="(Call,T1_Add_Table( swap_table, 0,\n                            name_table->elements[0],\n                            name_table->lengths [0] ))"];
"1000816" [label="(Call,parser->root.error = error)"];
"1000707" [label="(Block,)"];
"1000412" [label="(Call,T1_Add_Table( name_table, n, cur, len + 1 ))"];
"1000751" [label="(Identifier,error)"];
"1000159" [label="(Identifier,code_table)"];
"1000379" [label="(Call,error = FT_THROW( Invalid_File_Format ))"];
"1000273" [label="(Call,error = psaux->ps_table_funcs->init( swap_table, 4, memory ))"];
"1000247" [label="(Call,error = psaux->ps_table_funcs->init(\n                code_table, num_glyphs + 1 + TABLE_EXTEND, memory ))"];
"1000189" [label="(Identifier,psaux)"];
"1000237" [label="(Identifier,parser)"];
"1000735" [label="(Call,error = T1_Add_Table( swap_table, 1,\n                            code_table->elements[0],\n                            code_table->lengths [0] ))"];
"1000260" [label="(Call,error = psaux->ps_table_funcs->init(\n                name_table, num_glyphs + 1 + TABLE_EXTEND, memory ))"];
"1000595" [label="(Call,error = T1_Add_Table( swap_table, 2,\n                            name_table->elements[notdef_index],\n                            name_table->lengths [notdef_index] ))"];
"1000215" [label="(Identifier,num_glyphs)"];
"1000736" [label="(Identifier,error)"];
"1000222" [label="(Identifier,num_glyphs)"];
"1000753" [label="(Call,error = T1_Add_Table( name_table, 0, notdef_name, 8 ))"];
"1000740" [label="(Call,code_table->elements[0])"];
"1000152" [label="(Identifier,parser)"];
"1000817" [label="(Call,parser->root.error)"];
"1000822" [label="(Identifier,error)"];
"1000765" [label="(Call,T1_Add_Table( code_table, 0, notdef_glyph, 5 ))"];
"1000733" [label="(Identifier,error)"];
"1000561" [label="(Call,T1_Add_Table( swap_table, 0,\n                            name_table->elements[0],\n                            name_table->lengths [0] ))"];
"1000651" [label="(Call,T1_Add_Table( code_table, notdef_index,\n                            swap_table->elements[1],\n                            swap_table->lengths [1] ))"];
"1000221" [label="(Call,num_glyphs < 0)"];
"1000153" [label="(Call,&loader->parser)"];
"1000553" [label="(Call,name_table->elements[0])"];
"1000745" [label="(Call,code_table->lengths [0])"];
"1000218" [label="(Call,T1_ToInt( parser ))"];
"1000685" [label="(Call,error = T1_Add_Table( code_table, 0,\n                            swap_table->elements[3],\n                            swap_table->lengths [3] ))"];
"1000531" [label="(Call,T1_Add_Table( code_table, n, base, size ))"];
"1000613" [label="(Call,error = T1_Add_Table( swap_table, 3,\n                            code_table->elements[notdef_index],\n                            code_table->lengths [notdef_index] ))"];
"1000511" [label="(Call,error = T1_Add_Table( code_table, n,\n                                temp + face->type1.private_dict.lenIV, size ))"];
"1000262" [label="(Call,psaux->ps_table_funcs->init(\n                name_table, num_glyphs + 1 + TABLE_EXTEND, memory ))"];
"1000180" [label="(Identifier,memory)"];
"1000256" [label="(Identifier,memory)"];
"1000220" [label="(ControlStructure,if ( num_glyphs < 0 ))"];
"1000410" [label="(Call,error = T1_Add_Table( name_table, n, cur, len + 1 ))"];
"1000763" [label="(Call,error = T1_Add_Table( code_table, 0, notdef_glyph, 5 ))"];
"1000181" [label="(Call,parser->root.memory)"];
"1000233" [label="(Identifier,num_glyphs)"];
"1000722" [label="(Call,name_table->elements[0])"];
"1000223" [label="(Literal,0)"];
"1000278" [label="(Identifier,memory)"];
"1000234" [label="(Literal,0)"];
"1000249" [label="(Call,psaux->ps_table_funcs->init(\n                code_table, num_glyphs + 1 + TABLE_EXTEND, memory ))"];
"1000277" [label="(Literal,4)"];
"1000719" -> "1000717"  [label="AST: "];
"1000719" -> "1000727"  [label="CFG: "];
"1000720" -> "1000719"  [label="AST: "];
"1000721" -> "1000719"  [label="AST: "];
"1000722" -> "1000719"  [label="AST: "];
"1000727" -> "1000719"  [label="AST: "];
"1000717" -> "1000719"  [label="CFG: "];
"1000719" -> "1000823"  [label="DDG: name_table->lengths [0]"];
"1000719" -> "1000823"  [label="DDG: swap_table"];
"1000719" -> "1000823"  [label="DDG: name_table->elements[0]"];
"1000719" -> "1000717"  [label="DDG: swap_table"];
"1000719" -> "1000717"  [label="DDG: 0"];
"1000719" -> "1000717"  [label="DDG: name_table->elements[0]"];
"1000719" -> "1000717"  [label="DDG: name_table->lengths [0]"];
"1000275" -> "1000719"  [label="DDG: swap_table"];
"1000172" -> "1000719"  [label="DDG: swap_table"];
"1000551" -> "1000719"  [label="DDG: name_table->elements[0]"];
"1000719" -> "1000737"  [label="DDG: swap_table"];
"1000275" -> "1000273"  [label="AST: "];
"1000275" -> "1000278"  [label="CFG: "];
"1000276" -> "1000275"  [label="AST: "];
"1000277" -> "1000275"  [label="AST: "];
"1000278" -> "1000275"  [label="AST: "];
"1000273" -> "1000275"  [label="CFG: "];
"1000275" -> "1000823"  [label="DDG: memory"];
"1000275" -> "1000823"  [label="DDG: swap_table"];
"1000275" -> "1000273"  [label="DDG: swap_table"];
"1000275" -> "1000273"  [label="DDG: 4"];
"1000275" -> "1000273"  [label="DDG: memory"];
"1000172" -> "1000275"  [label="DDG: swap_table"];
"1000262" -> "1000275"  [label="DDG: memory"];
"1000275" -> "1000561"  [label="DDG: swap_table"];
"1000172" -> "1000149"  [label="AST: "];
"1000172" -> "1000174"  [label="CFG: "];
"1000173" -> "1000172"  [label="AST: "];
"1000174" -> "1000172"  [label="AST: "];
"1000180" -> "1000172"  [label="CFG: "];
"1000172" -> "1000823"  [label="DDG: swap_table"];
"1000172" -> "1000823"  [label="DDG: &loader->swap_table"];
"1000172" -> "1000561"  [label="DDG: swap_table"];
"1000262" -> "1000260"  [label="AST: "];
"1000262" -> "1000269"  [label="CFG: "];
"1000263" -> "1000262"  [label="AST: "];
"1000264" -> "1000262"  [label="AST: "];
"1000269" -> "1000262"  [label="AST: "];
"1000260" -> "1000262"  [label="CFG: "];
"1000262" -> "1000823"  [label="DDG: memory"];
"1000262" -> "1000823"  [label="DDG: name_table"];
"1000262" -> "1000823"  [label="DDG: num_glyphs + 1 + TABLE_EXTEND"];
"1000262" -> "1000260"  [label="DDG: name_table"];
"1000262" -> "1000260"  [label="DDG: num_glyphs + 1 + TABLE_EXTEND"];
"1000262" -> "1000260"  [label="DDG: memory"];
"1000165" -> "1000262"  [label="DDG: name_table"];
"1000232" -> "1000262"  [label="DDG: num_glyphs"];
"1000249" -> "1000262"  [label="DDG: memory"];
"1000262" -> "1000412"  [label="DDG: name_table"];
"1000262" -> "1000633"  [label="DDG: name_table"];
"1000262" -> "1000755"  [label="DDG: name_table"];
"1000165" -> "1000149"  [label="AST: "];
"1000165" -> "1000167"  [label="CFG: "];
"1000166" -> "1000165"  [label="AST: "];
"1000167" -> "1000165"  [label="AST: "];
"1000173" -> "1000165"  [label="CFG: "];
"1000165" -> "1000823"  [label="DDG: name_table"];
"1000165" -> "1000823"  [label="DDG: &loader->glyph_names"];
"1000165" -> "1000412"  [label="DDG: name_table"];
"1000165" -> "1000633"  [label="DDG: name_table"];
"1000165" -> "1000755"  [label="DDG: name_table"];
"1000232" -> "1000231"  [label="AST: "];
"1000232" -> "1000234"  [label="CFG: "];
"1000233" -> "1000232"  [label="AST: "];
"1000234" -> "1000232"  [label="AST: "];
"1000237" -> "1000232"  [label="CFG: "];
"1000231" -> "1000232"  [label="CFG: "];
"1000232" -> "1000823"  [label="DDG: num_glyphs"];
"1000232" -> "1000231"  [label="DDG: num_glyphs"];
"1000232" -> "1000231"  [label="DDG: 0"];
"1000221" -> "1000232"  [label="DDG: num_glyphs"];
"1000232" -> "1000249"  [label="DDG: num_glyphs"];
"1000232" -> "1000251"  [label="DDG: num_glyphs"];
"1000232" -> "1000264"  [label="DDG: num_glyphs"];
"1000232" -> "1000466"  [label="DDG: num_glyphs"];
"1000232" -> "1000468"  [label="DDG: num_glyphs"];
"1000221" -> "1000220"  [label="AST: "];
"1000221" -> "1000223"  [label="CFG: "];
"1000222" -> "1000221"  [label="AST: "];
"1000223" -> "1000221"  [label="AST: "];
"1000226" -> "1000221"  [label="CFG: "];
"1000233" -> "1000221"  [label="CFG: "];
"1000221" -> "1000823"  [label="DDG: num_glyphs < 0"];
"1000221" -> "1000823"  [label="DDG: num_glyphs"];
"1000214" -> "1000221"  [label="DDG: num_glyphs"];
"1000214" -> "1000149"  [label="AST: "];
"1000214" -> "1000216"  [label="CFG: "];
"1000215" -> "1000214"  [label="AST: "];
"1000216" -> "1000214"  [label="AST: "];
"1000222" -> "1000214"  [label="CFG: "];
"1000214" -> "1000823"  [label="DDG: (FT_Int)T1_ToInt( parser )"];
"1000216" -> "1000214"  [label="DDG: T1_ToInt( parser )"];
"1000216" -> "1000218"  [label="CFG: "];
"1000217" -> "1000216"  [label="AST: "];
"1000218" -> "1000216"  [label="AST: "];
"1000216" -> "1000823"  [label="DDG: T1_ToInt( parser )"];
"1000218" -> "1000216"  [label="DDG: parser"];
"1000218" -> "1000219"  [label="CFG: "];
"1000219" -> "1000218"  [label="AST: "];
"1000218" -> "1000823"  [label="DDG: parser"];
"1000151" -> "1000218"  [label="DDG: parser"];
"1000218" -> "1000289"  [label="DDG: parser"];
"1000151" -> "1000149"  [label="AST: "];
"1000151" -> "1000153"  [label="CFG: "];
"1000152" -> "1000151"  [label="AST: "];
"1000153" -> "1000151"  [label="AST: "];
"1000159" -> "1000151"  [label="CFG: "];
"1000151" -> "1000823"  [label="DDG: &loader->parser"];
"1000249" -> "1000247"  [label="AST: "];
"1000249" -> "1000256"  [label="CFG: "];
"1000250" -> "1000249"  [label="AST: "];
"1000251" -> "1000249"  [label="AST: "];
"1000256" -> "1000249"  [label="AST: "];
"1000247" -> "1000249"  [label="CFG: "];
"1000249" -> "1000823"  [label="DDG: memory"];
"1000249" -> "1000823"  [label="DDG: num_glyphs + 1 + TABLE_EXTEND"];
"1000249" -> "1000823"  [label="DDG: code_table"];
"1000249" -> "1000247"  [label="DDG: code_table"];
"1000249" -> "1000247"  [label="DDG: num_glyphs + 1 + TABLE_EXTEND"];
"1000249" -> "1000247"  [label="DDG: memory"];
"1000158" -> "1000249"  [label="DDG: code_table"];
"1000179" -> "1000249"  [label="DDG: memory"];
"1000249" -> "1000513"  [label="DDG: code_table"];
"1000249" -> "1000531"  [label="DDG: code_table"];
"1000249" -> "1000651"  [label="DDG: code_table"];
"1000249" -> "1000765"  [label="DDG: code_table"];
"1000158" -> "1000149"  [label="AST: "];
"1000158" -> "1000160"  [label="CFG: "];
"1000159" -> "1000158"  [label="AST: "];
"1000160" -> "1000158"  [label="AST: "];
"1000166" -> "1000158"  [label="CFG: "];
"1000158" -> "1000823"  [label="DDG: code_table"];
"1000158" -> "1000823"  [label="DDG: &loader->charstrings"];
"1000158" -> "1000513"  [label="DDG: code_table"];
"1000158" -> "1000531"  [label="DDG: code_table"];
"1000158" -> "1000651"  [label="DDG: code_table"];
"1000158" -> "1000765"  [label="DDG: code_table"];
"1000179" -> "1000149"  [label="AST: "];
"1000179" -> "1000181"  [label="CFG: "];
"1000180" -> "1000179"  [label="AST: "];
"1000181" -> "1000179"  [label="AST: "];
"1000189" -> "1000179"  [label="CFG: "];
"1000179" -> "1000823"  [label="DDG: parser->root.memory"];
"1000179" -> "1000823"  [label="DDG: memory"];
"1000551" -> "1000549"  [label="AST: "];
"1000551" -> "1000553"  [label="CFG: "];
"1000552" -> "1000551"  [label="AST: "];
"1000553" -> "1000551"  [label="AST: "];
"1000549" -> "1000551"  [label="CFG: "];
"1000551" -> "1000823"  [label="DDG: name_table->elements[0]"];
"1000551" -> "1000549"  [label="DDG: name_table->elements[0]"];
"1000551" -> "1000561"  [label="DDG: name_table->elements[0]"];
"1000717" -> "1000707"  [label="AST: "];
"1000718" -> "1000717"  [label="AST: "];
"1000733" -> "1000717"  [label="CFG: "];
"1000717" -> "1000823"  [label="DDG: T1_Add_Table( swap_table, 0,\n                            name_table->elements[0],\n                            name_table->lengths [0] )"];
"1000717" -> "1000816"  [label="DDG: error"];
"1000816" -> "1000149"  [label="AST: "];
"1000816" -> "1000822"  [label="CFG: "];
"1000817" -> "1000816"  [label="AST: "];
"1000822" -> "1000816"  [label="AST: "];
"1000823" -> "1000816"  [label="CFG: "];
"1000816" -> "1000823"  [label="DDG: parser->root.error"];
"1000816" -> "1000823"  [label="DDG: error"];
"1000559" -> "1000816"  [label="DDG: error"];
"1000667" -> "1000816"  [label="DDG: error"];
"1000225" -> "1000816"  [label="DDG: error"];
"1000273" -> "1000816"  [label="DDG: error"];
"1000685" -> "1000816"  [label="DDG: error"];
"1000773" -> "1000816"  [label="DDG: error"];
"1000260" -> "1000816"  [label="DDG: error"];
"1000735" -> "1000816"  [label="DDG: error"];
"1000484" -> "1000816"  [label="DDG: error"];
"1000613" -> "1000816"  [label="DDG: error"];
"1000247" -> "1000816"  [label="DDG: error"];
"1000791" -> "1000816"  [label="DDG: error"];
"1000753" -> "1000816"  [label="DDG: error"];
"1000649" -> "1000816"  [label="DDG: error"];
"1000410" -> "1000816"  [label="DDG: error"];
"1000631" -> "1000816"  [label="DDG: error"];
"1000379" -> "1000816"  [label="DDG: error"];
"1000595" -> "1000816"  [label="DDG: error"];
"1000577" -> "1000816"  [label="DDG: error"];
"1000529" -> "1000816"  [label="DDG: error"];
"1000763" -> "1000816"  [label="DDG: error"];
"1000511" -> "1000816"  [label="DDG: error"];
"1000737" -> "1000735"  [label="AST: "];
"1000737" -> "1000745"  [label="CFG: "];
"1000738" -> "1000737"  [label="AST: "];
"1000739" -> "1000737"  [label="AST: "];
"1000740" -> "1000737"  [label="AST: "];
"1000745" -> "1000737"  [label="AST: "];
"1000735" -> "1000737"  [label="CFG: "];
"1000737" -> "1000823"  [label="DDG: code_table->lengths [0]"];
"1000737" -> "1000823"  [label="DDG: code_table->elements[0]"];
"1000737" -> "1000823"  [label="DDG: swap_table"];
"1000737" -> "1000735"  [label="DDG: swap_table"];
"1000737" -> "1000735"  [label="DDG: 1"];
"1000737" -> "1000735"  [label="DDG: code_table->elements[0]"];
"1000737" -> "1000735"  [label="DDG: code_table->lengths [0]"];
"1000735" -> "1000707"  [label="AST: "];
"1000736" -> "1000735"  [label="AST: "];
"1000751" -> "1000735"  [label="CFG: "];
"1000735" -> "1000823"  [label="DDG: T1_Add_Table( swap_table, 1,\n                            code_table->elements[0],\n                            code_table->lengths [0] )"];
}
