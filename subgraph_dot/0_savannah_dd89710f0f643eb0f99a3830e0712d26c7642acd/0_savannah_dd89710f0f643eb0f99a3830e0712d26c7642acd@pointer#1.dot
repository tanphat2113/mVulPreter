digraph "0_savannah_dd89710f0f643eb0f99a3830e0712d26c7642acd@pointer" {
"1000397" [label="(Call,read_binary_data( parser, &size, &base, IS_INCREMENTAL ))"];
"1000356" [label="(Call,T1_Skip_PS_Token( parser ))"];
"1000289" [label="(Call,T1_Skip_Spaces( parser ))"];
"1000397" [label="(Call,read_binary_data( parser, &size, &base, IS_INCREMENTAL ))"];
"1000218" [label="(Call,T1_ToInt( parser ))"];
"1000151" [label="(Call,parser       = &loader->parser)"];
"1000396" [label="(Call,!read_binary_data( parser, &size, &base, IS_INCREMENTAL ))"];
"1000403" [label="(Identifier,IS_INCREMENTAL)"];
"1000219" [label="(Identifier,parser)"];
"1000218" [label="(Call,T1_ToInt( parser ))"];
"1000149" [label="(Block,)"];
"1000216" [label="(Call,(FT_Int)T1_ToInt( parser ))"];
"1000286" [label="(Block,)"];
"1000159" [label="(Identifier,code_table)"];
"1000356" [label="(Call,T1_Skip_PS_Token( parser ))"];
"1000398" [label="(Identifier,parser)"];
"1000395" [label="(ControlStructure,if ( !read_binary_data( parser, &size, &base, IS_INCREMENTAL ) ))"];
"1000401" [label="(Call,&base)"];
"1000290" [label="(Identifier,parser)"];
"1000399" [label="(Call,&size)"];
"1000404" [label="(Return,return;)"];
"1000289" [label="(Call,T1_Skip_Spaces( parser ))"];
"1000292" [label="(Identifier,cur)"];
"1000407" [label="(Identifier,loader)"];
"1000823" [label="(MethodReturn,RET)"];
"1000152" [label="(Identifier,parser)"];
"1000361" [label="(Identifier,parser)"];
"1000397" [label="(Call,read_binary_data( parser, &size, &base, IS_INCREMENTAL ))"];
"1000396" [label="(Call,!read_binary_data( parser, &size, &base, IS_INCREMENTAL ))"];
"1000153" [label="(Call,&loader->parser)"];
"1000151" [label="(Call,parser       = &loader->parser)"];
"1000357" [label="(Identifier,parser)"];
"1000397" -> "1000396"  [label="AST: "];
"1000397" -> "1000403"  [label="CFG: "];
"1000398" -> "1000397"  [label="AST: "];
"1000399" -> "1000397"  [label="AST: "];
"1000401" -> "1000397"  [label="AST: "];
"1000403" -> "1000397"  [label="AST: "];
"1000396" -> "1000397"  [label="CFG: "];
"1000397" -> "1000823"  [label="DDG: parser"];
"1000397" -> "1000823"  [label="DDG: &base"];
"1000397" -> "1000823"  [label="DDG: IS_INCREMENTAL"];
"1000397" -> "1000823"  [label="DDG: &size"];
"1000397" -> "1000289"  [label="DDG: parser"];
"1000397" -> "1000396"  [label="DDG: parser"];
"1000397" -> "1000396"  [label="DDG: &size"];
"1000397" -> "1000396"  [label="DDG: &base"];
"1000397" -> "1000396"  [label="DDG: IS_INCREMENTAL"];
"1000356" -> "1000397"  [label="DDG: parser"];
"1000356" -> "1000286"  [label="AST: "];
"1000356" -> "1000357"  [label="CFG: "];
"1000357" -> "1000356"  [label="AST: "];
"1000361" -> "1000356"  [label="CFG: "];
"1000356" -> "1000823"  [label="DDG: T1_Skip_PS_Token( parser )"];
"1000356" -> "1000823"  [label="DDG: parser"];
"1000356" -> "1000289"  [label="DDG: parser"];
"1000289" -> "1000356"  [label="DDG: parser"];
"1000289" -> "1000286"  [label="AST: "];
"1000289" -> "1000290"  [label="CFG: "];
"1000290" -> "1000289"  [label="AST: "];
"1000292" -> "1000289"  [label="CFG: "];
"1000289" -> "1000823"  [label="DDG: parser"];
"1000289" -> "1000823"  [label="DDG: T1_Skip_Spaces( parser )"];
"1000218" -> "1000289"  [label="DDG: parser"];
"1000218" -> "1000216"  [label="AST: "];
"1000218" -> "1000219"  [label="CFG: "];
"1000219" -> "1000218"  [label="AST: "];
"1000216" -> "1000218"  [label="CFG: "];
"1000218" -> "1000823"  [label="DDG: parser"];
"1000218" -> "1000216"  [label="DDG: parser"];
"1000151" -> "1000218"  [label="DDG: parser"];
"1000151" -> "1000149"  [label="AST: "];
"1000151" -> "1000153"  [label="CFG: "];
"1000152" -> "1000151"  [label="AST: "];
"1000153" -> "1000151"  [label="AST: "];
"1000159" -> "1000151"  [label="CFG: "];
"1000151" -> "1000823"  [label="DDG: &loader->parser"];
"1000396" -> "1000395"  [label="AST: "];
"1000404" -> "1000396"  [label="CFG: "];
"1000407" -> "1000396"  [label="CFG: "];
"1000396" -> "1000823"  [label="DDG: !read_binary_data( parser, &size, &base, IS_INCREMENTAL )"];
"1000396" -> "1000823"  [label="DDG: read_binary_data( parser, &size, &base, IS_INCREMENTAL )"];
}
