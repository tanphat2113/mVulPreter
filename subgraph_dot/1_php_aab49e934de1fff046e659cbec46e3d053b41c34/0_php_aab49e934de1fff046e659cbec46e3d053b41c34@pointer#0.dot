digraph "0_php_aab49e934de1fff046e659cbec46e3d053b41c34@pointer" {
"1000161" [label="(Call,*setting == _PASSWORD_EFMT1)"];
"1000331" [label="(Call,ascii_is_unsafe(setting[0]))"];
"1000330" [label="(Call,ascii_is_unsafe(setting[0]) || ascii_is_unsafe(setting[1]))"];
"1000350" [label="(Call,ascii_to_bin(setting[0]))"];
"1000343" [label="(Call,(ascii_to_bin(setting[1]) << 6)\n\t\t     |  ascii_to_bin(setting[0]))"];
"1000341" [label="(Call,salt = (ascii_to_bin(setting[1]) << 6)\n\t\t     |  ascii_to_bin(setting[0]))"];
"1000381" [label="(Call,setup_salt(salt, data))"];
"1000385" [label="(Call,do_des(0, 0, &r0, &r1, count, data))"];
"1000354" [label="(Call,data->output[0] = setting[0])"];
"1000375" [label="(Call,(u_char *) data->output)"];
"1000372" [label="(Call,p = (u_char *) data->output + 2)"];
"1000403" [label="(Call,p++)"];
"1000414" [label="(Call,p++)"];
"1000425" [label="(Call,p++)"];
"1000436" [label="(Call,p++)"];
"1000456" [label="(Call,p++)"];
"1000467" [label="(Call,p++)"];
"1000478" [label="(Call,p++)"];
"1000489" [label="(Call,p++)"];
"1000503" [label="(Call,p++)"];
"1000514" [label="(Call,p++)"];
"1000525" [label="(Call,p++)"];
"1000374" [label="(Call,(u_char *) data->output + 2)"];
"1000536" [label="(Return,return(data->output);)"];
"1000457" [label="(Identifier,p)"];
"1000315" [label="(Call,p = (u_char *) data->output + 9)"];
"1000351" [label="(Call,setting[0])"];
"1000110" [label="(MethodParameterIn,struct php_crypt_extended_data *data)"];
"1000387" [label="(Literal,0)"];
"1000155" [label="(Call,des_setkey((u_char *) keybuf, data))"];
"1000169" [label="(Identifier,i)"];
"1000373" [label="(Identifier,p)"];
"1000395" [label="(Identifier,NULL)"];
"1000413" [label="(Call,*p++)"];
"1000397" [label="(Identifier,l)"];
"1000354" [label="(Call,data->output[0] = setting[0])"];
"1000357" [label="(Identifier,data)"];
"1000377" [label="(Call,data->output)"];
"1000161" [label="(Call,*setting == _PASSWORD_EFMT1)"];
"1000536" [label="(Return,return(data->output);)"];
"1000374" [label="(Call,(u_char *) data->output + 2)"];
"1000404" [label="(Identifier,p)"];
"1000295" [label="(Call,des_setkey((u_char *) keybuf, data))"];
"1000425" [label="(Call,p++)"];
"1000478" [label="(Call,p++)"];
"1000363" [label="(Call,data->output[1] = setting[1])"];
"1000329" [label="(ControlStructure,if (ascii_is_unsafe(setting[0]) || ascii_is_unsafe(setting[1])))"];
"1000386" [label="(Literal,0)"];
"1000525" [label="(Call,p++)"];
"1000207" [label="(Call,!count)"];
"1000392" [label="(Identifier,count)"];
"1000384" [label="(ControlStructure,if (do_des(0, 0, &r0, &r1, count, data)))"];
"1000385" [label="(Call,do_des(0, 0, &r0, &r1, count, data))"];
"1000350" [label="(Call,ascii_to_bin(setting[0]))"];
"1000375" [label="(Call,(u_char *) data->output)"];
"1000488" [label="(Call,*p++)"];
"1000467" [label="(Call,p++)"];
"1000390" [label="(Call,&r1)"];
"1000466" [label="(Call,*p++)"];
"1000526" [label="(Identifier,p)"];
"1000342" [label="(Identifier,salt)"];
"1000477" [label="(Call,*p++)"];
"1000366" [label="(Identifier,data)"];
"1000162" [label="(Call,*setting)"];
"1000437" [label="(Identifier,p)"];
"1000383" [label="(Identifier,data)"];
"1000337" [label="(Identifier,setting)"];
"1000160" [label="(ControlStructure,if (*setting == _PASSWORD_EFMT1))"];
"1000326" [label="(Call,count = 25)"];
"1000164" [label="(Identifier,_PASSWORD_EFMT1)"];
"1000382" [label="(Identifier,salt)"];
"1000341" [label="(Call,salt = (ascii_to_bin(setting[1]) << 6)\n\t\t     |  ascii_to_bin(setting[0]))"];
"1000456" [label="(Call,p++)"];
"1000393" [label="(Identifier,data)"];
"1000415" [label="(Identifier,p)"];
"1000502" [label="(Call,*p++)"];
"1000344" [label="(Call,ascii_to_bin(setting[1]) << 6)"];
"1000479" [label="(Identifier,p)"];
"1000372" [label="(Call,p = (u_char *) data->output + 2)"];
"1000414" [label="(Call,p++)"];
"1000330" [label="(Call,ascii_is_unsafe(setting[0]) || ascii_is_unsafe(setting[1]))"];
"1000402" [label="(Call,*p++)"];
"1000325" [label="(Block,)"];
"1000515" [label="(Identifier,p)"];
"1000327" [label="(Identifier,count)"];
"1000503" [label="(Call,p++)"];
"1000335" [label="(Call,ascii_is_unsafe(setting[1]))"];
"1000424" [label="(Call,*p++)"];
"1000436" [label="(Call,p++)"];
"1000381" [label="(Call,setup_salt(salt, data))"];
"1000455" [label="(Call,*p++)"];
"1000343" [label="(Call,(ascii_to_bin(setting[1]) << 6)\n\t\t     |  ascii_to_bin(setting[0]))"];
"1000468" [label="(Identifier,p)"];
"1000490" [label="(Identifier,p)"];
"1000331" [label="(Call,ascii_is_unsafe(setting[0]))"];
"1000403" [label="(Call,p++)"];
"1000524" [label="(Call,*p++)"];
"1000380" [label="(Literal,2)"];
"1000340" [label="(Identifier,NULL)"];
"1000318" [label="(Call,(u_char *) data->output)"];
"1000109" [label="(MethodParameterIn,const char *setting)"];
"1000489" [label="(Call,p++)"];
"1000426" [label="(Identifier,p)"];
"1000504" [label="(Identifier,p)"];
"1000216" [label="(Call,salt = 0)"];
"1000360" [label="(Call,setting[0])"];
"1000355" [label="(Call,data->output[0])"];
"1000537" [label="(Call,data->output)"];
"1000514" [label="(Call,p++)"];
"1000308" [label="(Call,data->output[9] = '\0')"];
"1000435" [label="(Call,*p++)"];
"1000388" [label="(Call,&r0)"];
"1000242" [label="(Call,salt |= value << (i - 5) * 6)"];
"1000540" [label="(MethodReturn,RET)"];
"1000332" [label="(Call,setting[0])"];
"1000513" [label="(Call,*p++)"];
"1000111" [label="(Block,)"];
"1000161" -> "1000160"  [label="AST: "];
"1000161" -> "1000164"  [label="CFG: "];
"1000162" -> "1000161"  [label="AST: "];
"1000164" -> "1000161"  [label="AST: "];
"1000169" -> "1000161"  [label="CFG: "];
"1000327" -> "1000161"  [label="CFG: "];
"1000161" -> "1000540"  [label="DDG: _PASSWORD_EFMT1"];
"1000161" -> "1000540"  [label="DDG: *setting"];
"1000161" -> "1000540"  [label="DDG: *setting == _PASSWORD_EFMT1"];
"1000161" -> "1000331"  [label="DDG: *setting"];
"1000161" -> "1000350"  [label="DDG: *setting"];
"1000161" -> "1000354"  [label="DDG: *setting"];
"1000331" -> "1000330"  [label="AST: "];
"1000331" -> "1000332"  [label="CFG: "];
"1000332" -> "1000331"  [label="AST: "];
"1000337" -> "1000331"  [label="CFG: "];
"1000330" -> "1000331"  [label="CFG: "];
"1000331" -> "1000540"  [label="DDG: setting[0]"];
"1000331" -> "1000330"  [label="DDG: setting[0]"];
"1000109" -> "1000331"  [label="DDG: setting"];
"1000331" -> "1000350"  [label="DDG: setting[0]"];
"1000330" -> "1000329"  [label="AST: "];
"1000330" -> "1000335"  [label="CFG: "];
"1000335" -> "1000330"  [label="AST: "];
"1000340" -> "1000330"  [label="CFG: "];
"1000342" -> "1000330"  [label="CFG: "];
"1000330" -> "1000540"  [label="DDG: ascii_is_unsafe(setting[0])"];
"1000330" -> "1000540"  [label="DDG: ascii_is_unsafe(setting[0]) || ascii_is_unsafe(setting[1])"];
"1000330" -> "1000540"  [label="DDG: ascii_is_unsafe(setting[1])"];
"1000335" -> "1000330"  [label="DDG: setting[1]"];
"1000350" -> "1000343"  [label="AST: "];
"1000350" -> "1000351"  [label="CFG: "];
"1000351" -> "1000350"  [label="AST: "];
"1000343" -> "1000350"  [label="CFG: "];
"1000350" -> "1000343"  [label="DDG: setting[0]"];
"1000109" -> "1000350"  [label="DDG: setting"];
"1000350" -> "1000354"  [label="DDG: setting[0]"];
"1000343" -> "1000341"  [label="AST: "];
"1000344" -> "1000343"  [label="AST: "];
"1000341" -> "1000343"  [label="CFG: "];
"1000343" -> "1000540"  [label="DDG: ascii_to_bin(setting[1]) << 6"];
"1000343" -> "1000540"  [label="DDG: ascii_to_bin(setting[0])"];
"1000343" -> "1000341"  [label="DDG: ascii_to_bin(setting[1]) << 6"];
"1000343" -> "1000341"  [label="DDG: ascii_to_bin(setting[0])"];
"1000344" -> "1000343"  [label="DDG: ascii_to_bin(setting[1])"];
"1000344" -> "1000343"  [label="DDG: 6"];
"1000341" -> "1000325"  [label="AST: "];
"1000342" -> "1000341"  [label="AST: "];
"1000357" -> "1000341"  [label="CFG: "];
"1000341" -> "1000540"  [label="DDG: (ascii_to_bin(setting[1]) << 6)\n\t\t     |  ascii_to_bin(setting[0])"];
"1000341" -> "1000381"  [label="DDG: salt"];
"1000381" -> "1000111"  [label="AST: "];
"1000381" -> "1000383"  [label="CFG: "];
"1000382" -> "1000381"  [label="AST: "];
"1000383" -> "1000381"  [label="AST: "];
"1000386" -> "1000381"  [label="CFG: "];
"1000381" -> "1000540"  [label="DDG: salt"];
"1000381" -> "1000540"  [label="DDG: setup_salt(salt, data)"];
"1000216" -> "1000381"  [label="DDG: salt"];
"1000242" -> "1000381"  [label="DDG: salt"];
"1000155" -> "1000381"  [label="DDG: data"];
"1000295" -> "1000381"  [label="DDG: data"];
"1000110" -> "1000381"  [label="DDG: data"];
"1000381" -> "1000385"  [label="DDG: data"];
"1000385" -> "1000384"  [label="AST: "];
"1000385" -> "1000393"  [label="CFG: "];
"1000386" -> "1000385"  [label="AST: "];
"1000387" -> "1000385"  [label="AST: "];
"1000388" -> "1000385"  [label="AST: "];
"1000390" -> "1000385"  [label="AST: "];
"1000392" -> "1000385"  [label="AST: "];
"1000393" -> "1000385"  [label="AST: "];
"1000395" -> "1000385"  [label="CFG: "];
"1000397" -> "1000385"  [label="CFG: "];
"1000385" -> "1000540"  [label="DDG: count"];
"1000385" -> "1000540"  [label="DDG: data"];
"1000385" -> "1000540"  [label="DDG: &r0"];
"1000385" -> "1000540"  [label="DDG: &r1"];
"1000385" -> "1000540"  [label="DDG: do_des(0, 0, &r0, &r1, count, data)"];
"1000207" -> "1000385"  [label="DDG: count"];
"1000326" -> "1000385"  [label="DDG: count"];
"1000110" -> "1000385"  [label="DDG: data"];
"1000354" -> "1000325"  [label="AST: "];
"1000354" -> "1000360"  [label="CFG: "];
"1000355" -> "1000354"  [label="AST: "];
"1000360" -> "1000354"  [label="AST: "];
"1000366" -> "1000354"  [label="CFG: "];
"1000354" -> "1000540"  [label="DDG: setting[0]"];
"1000354" -> "1000540"  [label="DDG: data->output[0]"];
"1000109" -> "1000354"  [label="DDG: setting"];
"1000354" -> "1000375"  [label="DDG: data->output[0]"];
"1000354" -> "1000536"  [label="DDG: data->output[0]"];
"1000375" -> "1000374"  [label="AST: "];
"1000375" -> "1000377"  [label="CFG: "];
"1000376" -> "1000375"  [label="AST: "];
"1000377" -> "1000375"  [label="AST: "];
"1000380" -> "1000375"  [label="CFG: "];
"1000375" -> "1000540"  [label="DDG: data->output"];
"1000375" -> "1000372"  [label="DDG: data->output"];
"1000375" -> "1000374"  [label="DDG: data->output"];
"1000363" -> "1000375"  [label="DDG: data->output[1]"];
"1000375" -> "1000536"  [label="DDG: data->output"];
"1000372" -> "1000325"  [label="AST: "];
"1000372" -> "1000374"  [label="CFG: "];
"1000373" -> "1000372"  [label="AST: "];
"1000374" -> "1000372"  [label="AST: "];
"1000382" -> "1000372"  [label="CFG: "];
"1000372" -> "1000540"  [label="DDG: p"];
"1000372" -> "1000540"  [label="DDG: (u_char *) data->output + 2"];
"1000372" -> "1000403"  [label="DDG: p"];
"1000403" -> "1000402"  [label="AST: "];
"1000403" -> "1000404"  [label="CFG: "];
"1000404" -> "1000403"  [label="AST: "];
"1000402" -> "1000403"  [label="CFG: "];
"1000315" -> "1000403"  [label="DDG: p"];
"1000403" -> "1000414"  [label="DDG: p"];
"1000414" -> "1000413"  [label="AST: "];
"1000414" -> "1000415"  [label="CFG: "];
"1000415" -> "1000414"  [label="AST: "];
"1000413" -> "1000414"  [label="CFG: "];
"1000414" -> "1000425"  [label="DDG: p"];
"1000425" -> "1000424"  [label="AST: "];
"1000425" -> "1000426"  [label="CFG: "];
"1000426" -> "1000425"  [label="AST: "];
"1000424" -> "1000425"  [label="CFG: "];
"1000425" -> "1000436"  [label="DDG: p"];
"1000436" -> "1000435"  [label="AST: "];
"1000436" -> "1000437"  [label="CFG: "];
"1000437" -> "1000436"  [label="AST: "];
"1000435" -> "1000436"  [label="CFG: "];
"1000436" -> "1000456"  [label="DDG: p"];
"1000456" -> "1000455"  [label="AST: "];
"1000456" -> "1000457"  [label="CFG: "];
"1000457" -> "1000456"  [label="AST: "];
"1000455" -> "1000456"  [label="CFG: "];
"1000456" -> "1000467"  [label="DDG: p"];
"1000467" -> "1000466"  [label="AST: "];
"1000467" -> "1000468"  [label="CFG: "];
"1000468" -> "1000467"  [label="AST: "];
"1000466" -> "1000467"  [label="CFG: "];
"1000467" -> "1000478"  [label="DDG: p"];
"1000478" -> "1000477"  [label="AST: "];
"1000478" -> "1000479"  [label="CFG: "];
"1000479" -> "1000478"  [label="AST: "];
"1000477" -> "1000478"  [label="CFG: "];
"1000478" -> "1000489"  [label="DDG: p"];
"1000489" -> "1000488"  [label="AST: "];
"1000489" -> "1000490"  [label="CFG: "];
"1000490" -> "1000489"  [label="AST: "];
"1000488" -> "1000489"  [label="CFG: "];
"1000489" -> "1000503"  [label="DDG: p"];
"1000503" -> "1000502"  [label="AST: "];
"1000503" -> "1000504"  [label="CFG: "];
"1000504" -> "1000503"  [label="AST: "];
"1000502" -> "1000503"  [label="CFG: "];
"1000503" -> "1000514"  [label="DDG: p"];
"1000514" -> "1000513"  [label="AST: "];
"1000514" -> "1000515"  [label="CFG: "];
"1000515" -> "1000514"  [label="AST: "];
"1000513" -> "1000514"  [label="CFG: "];
"1000514" -> "1000525"  [label="DDG: p"];
"1000525" -> "1000524"  [label="AST: "];
"1000525" -> "1000526"  [label="CFG: "];
"1000526" -> "1000525"  [label="AST: "];
"1000524" -> "1000525"  [label="CFG: "];
"1000525" -> "1000540"  [label="DDG: p"];
"1000374" -> "1000380"  [label="CFG: "];
"1000380" -> "1000374"  [label="AST: "];
"1000374" -> "1000540"  [label="DDG: (u_char *) data->output"];
"1000536" -> "1000111"  [label="AST: "];
"1000536" -> "1000537"  [label="CFG: "];
"1000537" -> "1000536"  [label="AST: "];
"1000540" -> "1000536"  [label="CFG: "];
"1000536" -> "1000540"  [label="DDG: <RET>"];
"1000308" -> "1000536"  [label="DDG: data->output[9]"];
"1000363" -> "1000536"  [label="DDG: data->output[1]"];
"1000318" -> "1000536"  [label="DDG: data->output"];
}
