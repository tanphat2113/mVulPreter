digraph "0_OpenSC_8fe377e93b4b56060e5bbfb6f3142ceaeca744fa_10@pointer" {
"1000217" [label="(Call,iin->country = 0)"];
"1000232" [label="(Call,iin->country *= 10)"];
"1000237" [label="(Call,iin->country += (rbuf[ii/2] >> ((ii & 0x01) ? 0 : 4)) & 0x0F)"];
"1000435" [label="(Call,sc_log(ctx, \"serial number '%s'; mii %i; country %i; issuer_id %li\", txt, iin->mii, iin->country, iin->issuer_id))"];
"1000420" [label="(Call,sprintf(txt + ii*2, \"%02X\", *(card->serialnr.value + ii)))"];
"1000421" [label="(Call,txt + ii*2)"];
"1000461" [label="(Call,LOG_FUNC_RETURN(ctx, SC_SUCCESS))"];
"1000423" [label="(Call,ii*2)"];
"1000217" [label="(Call,iin->country = 0)"];
"1000224" [label="(Identifier,ii)"];
"1000461" [label="(Call,LOG_FUNC_RETURN(ctx, SC_SUCCESS))"];
"1000422" [label="(Identifier,txt)"];
"1000255" [label="(Call,iin->issuer_id = 0)"];
"1000448" [label="(Literal,0)"];
"1000232" [label="(Call,iin->country *= 10)"];
"1000435" [label="(Call,sc_log(ctx, \"serial number '%s'; mii %i; country %i; issuer_id %li\", txt, iin->mii, iin->country, iin->issuer_id))"];
"1000192" [label="(Call,LOG_TEST_RET(ctx, rv, \"Get 'serial number' data failed\"))"];
"1000236" [label="(Literal,10)"];
"1000437" [label="(Literal,\"serial number '%s'; mii %i; country %i; issuer_id %li\")"];
"1000275" [label="(Call,iin->issuer_id += (rbuf[ii/2] >> (ii & 0x01 ? 0 : 4)) & 0x0F)"];
"1000445" [label="(Call,iin->issuer_id)"];
"1000407" [label="(ControlStructure,for (ii=0;ii<card->serialnr.len;ii++))"];
"1000464" [label="(MethodReturn,RET)"];
"1000439" [label="(Call,iin->mii)"];
"1000206" [label="(Call,iin->mii = (rbuf[2] >> 4) & 0x0F)"];
"1000239" [label="(Identifier,iin)"];
"1000230" [label="(Identifier,ii)"];
"1000419" [label="(Identifier,ii)"];
"1000426" [label="(Literal,\"%02X\")"];
"1000427" [label="(Call,*(card->serialnr.value + ii))"];
"1000381" [label="(Call,*(card->serialnr.value + ii) = rbuf[ii + offs + 2])"];
"1000462" [label="(Identifier,ctx)"];
"1000241" [label="(Call,(rbuf[ii/2] >> ((ii & 0x01) ? 0 : 4)) & 0x0F)"];
"1000233" [label="(Call,iin->country)"];
"1000238" [label="(Call,iin->country)"];
"1000327" [label="(Call,*(card->serialnr.value + ii) = ((rbuf[ii + offs + 1] & 0x0F) << 4)\n \t\t\t\t+ ((rbuf[ii + offs + 2] & 0xF0) >> 4))"];
"1000463" [label="(Identifier,SC_SUCCESS)"];
"1000218" [label="(Call,iin->country)"];
"1000442" [label="(Call,iin->country)"];
"1000126" [label="(Call,LOG_FUNC_CALLED(ctx))"];
"1000105" [label="(Block,)"];
"1000438" [label="(Identifier,txt)"];
"1000221" [label="(Literal,0)"];
"1000436" [label="(Identifier,ctx)"];
"1000237" [label="(Call,iin->country += (rbuf[ii/2] >> ((ii & 0x01) ? 0 : 4)) & 0x0F)"];
"1000421" [label="(Call,txt + ii*2)"];
"1000420" [label="(Call,sprintf(txt + ii*2, \"%02X\", *(card->serialnr.value + ii)))"];
"1000231" [label="(Block,)"];
"1000202" [label="(Call,LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, \"serial number parse error\"))"];
"1000405" [label="(Block,)"];
"1000217" -> "1000105"  [label="AST: "];
"1000217" -> "1000221"  [label="CFG: "];
"1000218" -> "1000217"  [label="AST: "];
"1000221" -> "1000217"  [label="AST: "];
"1000224" -> "1000217"  [label="CFG: "];
"1000217" -> "1000232"  [label="DDG: "];
"1000217" -> "1000435"  [label="DDG: "];
"1000232" -> "1000231"  [label="AST: "];
"1000232" -> "1000236"  [label="CFG: "];
"1000233" -> "1000232"  [label="AST: "];
"1000236" -> "1000232"  [label="AST: "];
"1000239" -> "1000232"  [label="CFG: "];
"1000237" -> "1000232"  [label="DDG: "];
"1000232" -> "1000237"  [label="DDG: "];
"1000237" -> "1000231"  [label="AST: "];
"1000237" -> "1000241"  [label="CFG: "];
"1000238" -> "1000237"  [label="AST: "];
"1000241" -> "1000237"  [label="AST: "];
"1000230" -> "1000237"  [label="CFG: "];
"1000237" -> "1000464"  [label="DDG: "];
"1000241" -> "1000237"  [label="DDG: "];
"1000241" -> "1000237"  [label="DDG: "];
"1000237" -> "1000435"  [label="DDG: "];
"1000435" -> "1000405"  [label="AST: "];
"1000435" -> "1000445"  [label="CFG: "];
"1000436" -> "1000435"  [label="AST: "];
"1000437" -> "1000435"  [label="AST: "];
"1000438" -> "1000435"  [label="AST: "];
"1000439" -> "1000435"  [label="AST: "];
"1000442" -> "1000435"  [label="AST: "];
"1000445" -> "1000435"  [label="AST: "];
"1000448" -> "1000435"  [label="CFG: "];
"1000435" -> "1000464"  [label="DDG: "];
"1000435" -> "1000464"  [label="DDG: "];
"1000435" -> "1000464"  [label="DDG: "];
"1000435" -> "1000464"  [label="DDG: "];
"1000435" -> "1000464"  [label="DDG: "];
"1000435" -> "1000420"  [label="DDG: "];
"1000435" -> "1000421"  [label="DDG: "];
"1000202" -> "1000435"  [label="DDG: "];
"1000192" -> "1000435"  [label="DDG: "];
"1000206" -> "1000435"  [label="DDG: "];
"1000275" -> "1000435"  [label="DDG: "];
"1000255" -> "1000435"  [label="DDG: "];
"1000435" -> "1000461"  [label="DDG: "];
"1000420" -> "1000407"  [label="AST: "];
"1000420" -> "1000427"  [label="CFG: "];
"1000421" -> "1000420"  [label="AST: "];
"1000426" -> "1000420"  [label="AST: "];
"1000427" -> "1000420"  [label="AST: "];
"1000419" -> "1000420"  [label="CFG: "];
"1000420" -> "1000464"  [label="DDG: "];
"1000420" -> "1000464"  [label="DDG: "];
"1000420" -> "1000464"  [label="DDG: "];
"1000423" -> "1000420"  [label="DDG: "];
"1000423" -> "1000420"  [label="DDG: "];
"1000327" -> "1000420"  [label="DDG: "];
"1000381" -> "1000420"  [label="DDG: "];
"1000421" -> "1000423"  [label="CFG: "];
"1000422" -> "1000421"  [label="AST: "];
"1000423" -> "1000421"  [label="AST: "];
"1000426" -> "1000421"  [label="CFG: "];
"1000421" -> "1000464"  [label="DDG: "];
"1000423" -> "1000421"  [label="DDG: "];
"1000423" -> "1000421"  [label="DDG: "];
"1000461" -> "1000105"  [label="AST: "];
"1000461" -> "1000463"  [label="CFG: "];
"1000462" -> "1000461"  [label="AST: "];
"1000463" -> "1000461"  [label="AST: "];
"1000464" -> "1000461"  [label="CFG: "];
"1000461" -> "1000464"  [label="DDG: "];
"1000461" -> "1000464"  [label="DDG: "];
"1000461" -> "1000464"  [label="DDG: "];
"1000126" -> "1000461"  [label="DDG: "];
}
