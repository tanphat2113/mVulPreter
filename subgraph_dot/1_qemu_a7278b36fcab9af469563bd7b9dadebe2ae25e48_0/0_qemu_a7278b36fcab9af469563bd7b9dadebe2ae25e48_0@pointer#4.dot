digraph "0_qemu_a7278b36fcab9af469563bd7b9dadebe2ae25e48_0@pointer" {
"1000185" [label="(Call,(struct ip_header *) l3_hdr->iov_base)"];
"1000176" [label="(Call,IP_HDR_GET_LEN(l3_hdr->iov_base))"];
"1000193" [label="(Call,iov_to_buf(pkt->raw, pkt->raw_frags,\n                                l2_hdr->iov_len + sizeof(struct ip_header),\n                                l3_hdr->iov_base + sizeof(struct ip_header),\n                                l3_hdr->iov_len - sizeof(struct ip_header)))"];
"1000191" [label="(Call,bytes_read = iov_to_buf(pkt->raw, pkt->raw_frags,\n                                l2_hdr->iov_len + sizeof(struct ip_header),\n                                l3_hdr->iov_base + sizeof(struct ip_header),\n                                l3_hdr->iov_len - sizeof(struct ip_header)))"];
"1000219" [label="(Call,bytes_read < l3_hdr->iov_len - sizeof(struct ip_header))"];
"1000206" [label="(Call,l3_hdr->iov_base + sizeof(struct ip_header))"];
"1000187" [label="(Call,l3_hdr->iov_base)"];
"1000206" [label="(Call,l3_hdr->iov_base + sizeof(struct ip_header))"];
"1000177" [label="(Call,l3_hdr->iov_base)"];
"1000219" [label="(Call,bytes_read < l3_hdr->iov_len - sizeof(struct ip_header))"];
"1000212" [label="(Call,l3_hdr->iov_len - sizeof(struct ip_header))"];
"1000210" [label="(Call,sizeof(struct ip_header))"];
"1000235" [label="(ControlStructure,break;)"];
"1000221" [label="(Call,l3_hdr->iov_len - sizeof(struct ip_header))"];
"1000220" [label="(Identifier,bytes_read)"];
"1000190" [label="(FieldIdentifier,ip_p)"];
"1000218" [label="(ControlStructure,if (bytes_read < l3_hdr->iov_len - sizeof(struct ip_header)))"];
"1000214" [label="(Identifier,l3_hdr)"];
"1000230" [label="(Identifier,l3_hdr)"];
"1000172" [label="(Call,l3_hdr->iov_len = IP_HDR_GET_LEN(l3_hdr->iov_base))"];
"1000192" [label="(Identifier,bytes_read)"];
"1000207" [label="(Call,l3_hdr->iov_base)"];
"1000200" [label="(Call,l2_hdr->iov_len + sizeof(struct ip_header))"];
"1000194" [label="(Call,pkt->raw)"];
"1000184" [label="(Call,((struct ip_header *) l3_hdr->iov_base)->ip_p)"];
"1000176" [label="(Call,IP_HDR_GET_LEN(l3_hdr->iov_base))"];
"1000165" [label="(Call,eth_get_l3_proto(l2_hdr->iov_base, l2_hdr->iov_len))"];
"1000103" [label="(Block,)"];
"1000185" [label="(Call,(struct ip_header *) l3_hdr->iov_base)"];
"1000191" [label="(Call,bytes_read = iov_to_buf(pkt->raw, pkt->raw_frags,\n                                l2_hdr->iov_len + sizeof(struct ip_header),\n                                l3_hdr->iov_base + sizeof(struct ip_header),\n                                l3_hdr->iov_len - sizeof(struct ip_header)))"];
"1000312" [label="(MethodReturn,static bool)"];
"1000197" [label="(Call,pkt->raw_frags)"];
"1000129" [label="(Call,iov_to_buf(pkt->raw, pkt->raw_frags, 0, l2_hdr->iov_base,\n                             ETH_MAX_L2_HDR_LEN))"];
"1000193" [label="(Call,iov_to_buf(pkt->raw, pkt->raw_frags,\n                                l2_hdr->iov_len + sizeof(struct ip_header),\n                                l3_hdr->iov_base + sizeof(struct ip_header),\n                                l3_hdr->iov_len - sizeof(struct ip_header)))"];
"1000185" -> "1000184"  [label="AST: "];
"1000185" -> "1000187"  [label="CFG: "];
"1000186" -> "1000185"  [label="AST: "];
"1000187" -> "1000185"  [label="AST: "];
"1000190" -> "1000185"  [label="CFG: "];
"1000176" -> "1000185"  [label="DDG: l3_hdr->iov_base"];
"1000185" -> "1000193"  [label="DDG: l3_hdr->iov_base"];
"1000185" -> "1000206"  [label="DDG: l3_hdr->iov_base"];
"1000176" -> "1000172"  [label="AST: "];
"1000176" -> "1000177"  [label="CFG: "];
"1000177" -> "1000176"  [label="AST: "];
"1000172" -> "1000176"  [label="CFG: "];
"1000176" -> "1000172"  [label="DDG: l3_hdr->iov_base"];
"1000193" -> "1000191"  [label="AST: "];
"1000193" -> "1000212"  [label="CFG: "];
"1000194" -> "1000193"  [label="AST: "];
"1000197" -> "1000193"  [label="AST: "];
"1000200" -> "1000193"  [label="AST: "];
"1000206" -> "1000193"  [label="AST: "];
"1000212" -> "1000193"  [label="AST: "];
"1000191" -> "1000193"  [label="CFG: "];
"1000193" -> "1000312"  [label="DDG: l3_hdr->iov_base + sizeof(struct ip_header)"];
"1000193" -> "1000312"  [label="DDG: pkt->raw_frags"];
"1000193" -> "1000312"  [label="DDG: pkt->raw"];
"1000193" -> "1000312"  [label="DDG: l2_hdr->iov_len + sizeof(struct ip_header)"];
"1000193" -> "1000191"  [label="DDG: pkt->raw_frags"];
"1000193" -> "1000191"  [label="DDG: l2_hdr->iov_len + sizeof(struct ip_header)"];
"1000193" -> "1000191"  [label="DDG: l3_hdr->iov_len - sizeof(struct ip_header)"];
"1000193" -> "1000191"  [label="DDG: l3_hdr->iov_base + sizeof(struct ip_header)"];
"1000193" -> "1000191"  [label="DDG: pkt->raw"];
"1000129" -> "1000193"  [label="DDG: pkt->raw"];
"1000129" -> "1000193"  [label="DDG: pkt->raw_frags"];
"1000165" -> "1000193"  [label="DDG: l2_hdr->iov_len"];
"1000212" -> "1000193"  [label="DDG: l3_hdr->iov_len"];
"1000191" -> "1000103"  [label="AST: "];
"1000192" -> "1000191"  [label="AST: "];
"1000220" -> "1000191"  [label="CFG: "];
"1000191" -> "1000312"  [label="DDG: iov_to_buf(pkt->raw, pkt->raw_frags,\n                                l2_hdr->iov_len + sizeof(struct ip_header),\n                                l3_hdr->iov_base + sizeof(struct ip_header),\n                                l3_hdr->iov_len - sizeof(struct ip_header))"];
"1000191" -> "1000219"  [label="DDG: bytes_read"];
"1000219" -> "1000218"  [label="AST: "];
"1000219" -> "1000221"  [label="CFG: "];
"1000220" -> "1000219"  [label="AST: "];
"1000221" -> "1000219"  [label="AST: "];
"1000230" -> "1000219"  [label="CFG: "];
"1000235" -> "1000219"  [label="CFG: "];
"1000219" -> "1000312"  [label="DDG: bytes_read < l3_hdr->iov_len - sizeof(struct ip_header)"];
"1000219" -> "1000312"  [label="DDG: l3_hdr->iov_len - sizeof(struct ip_header)"];
"1000219" -> "1000312"  [label="DDG: bytes_read"];
"1000221" -> "1000219"  [label="DDG: l3_hdr->iov_len"];
"1000206" -> "1000210"  [label="CFG: "];
"1000207" -> "1000206"  [label="AST: "];
"1000210" -> "1000206"  [label="AST: "];
"1000214" -> "1000206"  [label="CFG: "];
"1000206" -> "1000312"  [label="DDG: l3_hdr->iov_base"];
}
