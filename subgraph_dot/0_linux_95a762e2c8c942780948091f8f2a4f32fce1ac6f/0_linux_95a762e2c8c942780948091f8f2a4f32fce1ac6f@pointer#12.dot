digraph "0_linux_95a762e2c8c942780948091f8f2a4f32fce1ac6f@pointer" {
"1000234" [label="(Call,is_pointer_value(env, insn->dst_reg))"];
"1000223" [label="(Call,check_reg_arg(env, insn->dst_reg, SRC_OP))"];
"1000119" [label="(Call,cur_regs(env))"];
"1000113" [label="(MethodParameterIn,struct bpf_verifier_env *env)"];
"1000240" [label="(Call,verbose(env, \"R%d pointer arithmetic prohibited\n\",\n\t\t\t\tinsn->dst_reg))"];
"1000251" [label="(Call,check_reg_arg(env, insn->dst_reg, DST_OP))"];
"1000249" [label="(Call,err = check_reg_arg(env, insn->dst_reg, DST_OP))"];
"1000259" [label="(Return,return err;)"];
"1000224" [label="(Identifier,env)"];
"1000258" [label="(Identifier,err)"];
"1000288" [label="(Call,verbose(env, \"BPF_MOV uses reserved fields\n\"))"];
"1000241" [label="(Identifier,env)"];
"1000541" [label="(Call,check_reg_arg(env, insn->dst_reg, SRC_OP))"];
"1000378" [label="(Call,is_pointer_value(env, insn->src_reg))"];
"1000646" [label="(Call,adjust_reg_min_max_vals(env, insn))"];
"1000239" [label="(Block,)"];
"1000137" [label="(Block,)"];
"1000321" [label="(Call,verbose(env, \"BPF_MOV uses reserved fields\n\"))"];
"1000329" [label="(Call,check_reg_arg(env, insn->dst_reg, DST_OP))"];
"1000651" [label="(MethodReturn,static int)"];
"1000573" [label="(Call,verbose(env, \"div by zero\n\"))"];
"1000252" [label="(Identifier,env)"];
"1000296" [label="(Call,check_reg_arg(env, insn->src_reg, SRC_OP))"];
"1000253" [label="(Call,insn->dst_reg)"];
"1000119" [label="(Call,cur_regs(env))"];
"1000257" [label="(ControlStructure,if (err))"];
"1000120" [label="(Identifier,env)"];
"1000251" [label="(Call,check_reg_arg(env, insn->dst_reg, DST_OP))"];
"1000508" [label="(Call,check_reg_arg(env, insn->src_reg, SRC_OP))"];
"1000256" [label="(Identifier,DST_OP)"];
"1000250" [label="(Identifier,err)"];
"1000240" [label="(Call,verbose(env, \"R%d pointer arithmetic prohibited\n\",\n\t\t\t\tinsn->dst_reg))"];
"1000234" [label="(Call,is_pointer_value(env, insn->dst_reg))"];
"1000500" [label="(Call,verbose(env, \"BPF_ALU uses reserved fields\n\"))"];
"1000248" [label="(Identifier,EACCES)"];
"1000259" [label="(Return,return err;)"];
"1000236" [label="(Call,insn->dst_reg)"];
"1000117" [label="(Call,*regs = cur_regs(env))"];
"1000249" [label="(Call,err = check_reg_arg(env, insn->dst_reg, DST_OP))"];
"1000233" [label="(ControlStructure,if (is_pointer_value(env, insn->dst_reg)))"];
"1000384" [label="(Call,verbose(env,\n\t\t\t\t\t\t\"R%d partial copy of pointer\n\",\n\t\t\t\t\t\tinsn->src_reg))"];
"1000235" [label="(Identifier,env)"];
"1000221" [label="(Call,err = check_reg_arg(env, insn->dst_reg, SRC_OP))"];
"1000260" [label="(Identifier,err)"];
"1000242" [label="(Literal,\"R%d pointer arithmetic prohibited\n\")"];
"1000215" [label="(Call,verbose(env, \"BPF_END uses reserved fields\n\"))"];
"1000624" [label="(Call,verbose(env, \"invalid shift %d\n\", insn->imm))"];
"1000228" [label="(Identifier,SRC_OP)"];
"1000113" [label="(MethodParameterIn,struct bpf_verifier_env *env)"];
"1000635" [label="(Call,check_reg_arg(env, insn->dst_reg, DST_OP_NO_MARK))"];
"1000223" [label="(Call,check_reg_arg(env, insn->dst_reg, SRC_OP))"];
"1000243" [label="(Call,insn->dst_reg)"];
"1000225" [label="(Call,insn->dst_reg)"];
"1000470" [label="(Call,verbose(env, \"invalid BPF_ALU opcode %x\n\", opcode))"];
"1000393" [label="(Call,mark_reg_unknown(env, regs, insn->dst_reg))"];
"1000169" [label="(Call,verbose(env, \"BPF_NEG uses reserved fields\n\"))"];
"1000533" [label="(Call,verbose(env, \"BPF_ALU uses reserved fields\n\"))"];
"1000234" -> "1000233"  [label="AST: "];
"1000234" -> "1000236"  [label="CFG: "];
"1000235" -> "1000234"  [label="AST: "];
"1000236" -> "1000234"  [label="AST: "];
"1000241" -> "1000234"  [label="CFG: "];
"1000250" -> "1000234"  [label="CFG: "];
"1000234" -> "1000651"  [label="DDG: "];
"1000223" -> "1000234"  [label="DDG: "];
"1000223" -> "1000234"  [label="DDG: "];
"1000113" -> "1000234"  [label="DDG: "];
"1000234" -> "1000240"  [label="DDG: "];
"1000234" -> "1000240"  [label="DDG: "];
"1000234" -> "1000251"  [label="DDG: "];
"1000234" -> "1000251"  [label="DDG: "];
"1000223" -> "1000221"  [label="AST: "];
"1000223" -> "1000228"  [label="CFG: "];
"1000224" -> "1000223"  [label="AST: "];
"1000225" -> "1000223"  [label="AST: "];
"1000228" -> "1000223"  [label="AST: "];
"1000221" -> "1000223"  [label="CFG: "];
"1000223" -> "1000651"  [label="DDG: "];
"1000223" -> "1000651"  [label="DDG: "];
"1000223" -> "1000651"  [label="DDG: "];
"1000223" -> "1000221"  [label="DDG: "];
"1000223" -> "1000221"  [label="DDG: "];
"1000223" -> "1000221"  [label="DDG: "];
"1000119" -> "1000223"  [label="DDG: "];
"1000113" -> "1000223"  [label="DDG: "];
"1000119" -> "1000117"  [label="AST: "];
"1000119" -> "1000120"  [label="CFG: "];
"1000120" -> "1000119"  [label="AST: "];
"1000117" -> "1000119"  [label="CFG: "];
"1000119" -> "1000117"  [label="DDG: "];
"1000113" -> "1000119"  [label="DDG: "];
"1000119" -> "1000169"  [label="DDG: "];
"1000119" -> "1000215"  [label="DDG: "];
"1000119" -> "1000288"  [label="DDG: "];
"1000119" -> "1000296"  [label="DDG: "];
"1000119" -> "1000321"  [label="DDG: "];
"1000119" -> "1000329"  [label="DDG: "];
"1000119" -> "1000470"  [label="DDG: "];
"1000119" -> "1000500"  [label="DDG: "];
"1000119" -> "1000508"  [label="DDG: "];
"1000119" -> "1000533"  [label="DDG: "];
"1000119" -> "1000541"  [label="DDG: "];
"1000113" -> "1000112"  [label="AST: "];
"1000113" -> "1000651"  [label="DDG: "];
"1000113" -> "1000169"  [label="DDG: "];
"1000113" -> "1000215"  [label="DDG: "];
"1000113" -> "1000240"  [label="DDG: "];
"1000113" -> "1000251"  [label="DDG: "];
"1000113" -> "1000288"  [label="DDG: "];
"1000113" -> "1000296"  [label="DDG: "];
"1000113" -> "1000321"  [label="DDG: "];
"1000113" -> "1000329"  [label="DDG: "];
"1000113" -> "1000378"  [label="DDG: "];
"1000113" -> "1000384"  [label="DDG: "];
"1000113" -> "1000393"  [label="DDG: "];
"1000113" -> "1000470"  [label="DDG: "];
"1000113" -> "1000500"  [label="DDG: "];
"1000113" -> "1000508"  [label="DDG: "];
"1000113" -> "1000533"  [label="DDG: "];
"1000113" -> "1000541"  [label="DDG: "];
"1000113" -> "1000573"  [label="DDG: "];
"1000113" -> "1000624"  [label="DDG: "];
"1000113" -> "1000635"  [label="DDG: "];
"1000113" -> "1000646"  [label="DDG: "];
"1000240" -> "1000239"  [label="AST: "];
"1000240" -> "1000243"  [label="CFG: "];
"1000241" -> "1000240"  [label="AST: "];
"1000242" -> "1000240"  [label="AST: "];
"1000243" -> "1000240"  [label="AST: "];
"1000248" -> "1000240"  [label="CFG: "];
"1000240" -> "1000651"  [label="DDG: "];
"1000240" -> "1000651"  [label="DDG: "];
"1000240" -> "1000651"  [label="DDG: "];
"1000251" -> "1000249"  [label="AST: "];
"1000251" -> "1000256"  [label="CFG: "];
"1000252" -> "1000251"  [label="AST: "];
"1000253" -> "1000251"  [label="AST: "];
"1000256" -> "1000251"  [label="AST: "];
"1000249" -> "1000251"  [label="CFG: "];
"1000251" -> "1000651"  [label="DDG: "];
"1000251" -> "1000651"  [label="DDG: "];
"1000251" -> "1000651"  [label="DDG: "];
"1000251" -> "1000249"  [label="DDG: "];
"1000251" -> "1000249"  [label="DDG: "];
"1000251" -> "1000249"  [label="DDG: "];
"1000249" -> "1000137"  [label="AST: "];
"1000250" -> "1000249"  [label="AST: "];
"1000258" -> "1000249"  [label="CFG: "];
"1000249" -> "1000651"  [label="DDG: "];
"1000249" -> "1000651"  [label="DDG: "];
"1000249" -> "1000259"  [label="DDG: "];
"1000259" -> "1000257"  [label="AST: "];
"1000259" -> "1000260"  [label="CFG: "];
"1000260" -> "1000259"  [label="AST: "];
"1000651" -> "1000259"  [label="CFG: "];
"1000259" -> "1000651"  [label="DDG: "];
"1000260" -> "1000259"  [label="DDG: "];
}
