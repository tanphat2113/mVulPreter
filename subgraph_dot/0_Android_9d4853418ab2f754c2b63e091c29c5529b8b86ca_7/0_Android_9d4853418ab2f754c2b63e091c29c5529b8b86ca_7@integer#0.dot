digraph "0_Android_9d4853418ab2f754c2b63e091c29c5529b8b86ca_7@integer" {
"1000165" [label="(Call,default_display_exponent = LUT_exponent * CRT_exponent)"];
"1000167" [label="(Call,LUT_exponent * CRT_exponent)"];
"1000160" [label="(Call,LUT_exponent = 1.0 / 2.2)"];
"1000162" [label="(Call,1.0 / 2.2)"];
"1000144" [label="(Call,CRT_exponent = 2.2)"];
"1000182" [label="(Call,display_exponent = default_display_exponent)"];
"1000478" [label="(Call,readpng_get_image(display_exponent, &image_channels,\n &image_rowbytes))"];
"1000476" [label="(Call,image_data = readpng_get_image(display_exponent, &image_channels,\n &image_rowbytes))"];
"1000489" [label="(Call,!image_data)"];
"1000497" [label="(Call,free(image_data))"];
"1000318" [label="(Call,fprintf(stderr, \"\n\"\n\n           \"Usage:  %s [-display xdpy] [-gamma exp] [-bgcolor bg] file.png\n\"\n           \"    xdpy\tname of the target X display (e.g., ``hostname:0'')\n\"\n           \"    exp \ttransfer-function exponent (``gamma'') of the display\n\"\n          \"\t\t  system in floating-point format (e.g., ``%.1f''); equal\n\",\n          PROGNAME, default_display_exponent))"];
"1000323" [label="(Call,fprintf(stderr, \"\n\"\n           \"\t\t  to the product of the lookup-table exponent (varies)\n\"\n           \"\t\t  and the CRT exponent (usually 2.2); must be positive\n\"\n           \"    bg  \tdesired background color in 7-character hex RGB format\n\"\n           \"\t\t  (e.g., ``#ff7700'' for orange:  same as HTML colors);\n\"\n           \"\t\t  used with transparent images\n\"\n           \"\nPress Q, Esc or mouse button 1 (within image window, after image\n\"\n          \"is displayed) to quit.\n\"))"];
"1000493" [label="(Literal,3)"];
"1000173" [label="(Identifier,p)"];
"1000161" [label="(Identifier,LUT_exponent)"];
"1000177" [label="(Call,display_exponent = atof(p))"];
"1000496" [label="(Block,)"];
"1000477" [label="(Identifier,image_data)"];
"1000488" [label="(ControlStructure,if (!image_data))"];
"1000128" [label="(Block,)"];
"1000321" [label="(Identifier,PROGNAME)"];
"1000476" [label="(Call,image_data = readpng_get_image(display_exponent, &image_channels,\n &image_rowbytes))"];
"1000310" [label="(Block,)"];
"1000168" [label="(Identifier,LUT_exponent)"];
"1000184" [label="(Identifier,default_display_exponent)"];
"1000480" [label="(Call,&image_channels)"];
"1000324" [label="(Identifier,stderr)"];
"1000320" [label="(Literal,\"\n\"\n\n           \"Usage:  %s [-display xdpy] [-gamma exp] [-bgcolor bg] file.png\n\"\n           \"    xdpy\tname of the target X display (e.g., ``hostname:0'')\n\"\n           \"    exp \ttransfer-function exponent (``gamma'') of the display\n\"\n          \"\t\t  system in floating-point format (e.g., ``%.1f''); equal\n\")"];
"1000166" [label="(Identifier,default_display_exponent)"];
"1000552" [label="(MethodReturn,int)"];
"1000182" [label="(Call,display_exponent = default_display_exponent)"];
"1000164" [label="(Literal,2.2)"];
"1000162" [label="(Call,1.0 / 2.2)"];
"1000489" [label="(Call,!image_data)"];
"1000145" [label="(Identifier,CRT_exponent)"];
"1000327" [label="(Literal,1)"];
"1000485" [label="(Identifier,FALSE)"];
"1000311" [label="(Call,fprintf(stderr, \"\n%s %s:  %s\n\", PROGNAME, VERSION, appname))"];
"1000183" [label="(Identifier,display_exponent)"];
"1000144" [label="(Call,CRT_exponent = 2.2)"];
"1000500" [label="(Literal,4)"];
"1000498" [label="(Identifier,image_data)"];
"1000318" [label="(Call,fprintf(stderr, \"\n\"\n\n           \"Usage:  %s [-display xdpy] [-gamma exp] [-bgcolor bg] file.png\n\"\n           \"    xdpy\tname of the target X display (e.g., ``hostname:0'')\n\"\n           \"    exp \ttransfer-function exponent (``gamma'') of the display\n\"\n          \"\t\t  system in floating-point format (e.g., ``%.1f''); equal\n\",\n          PROGNAME, default_display_exponent))"];
"1000189" [label="(Identifier,argv)"];
"1000478" [label="(Call,readpng_get_image(display_exponent, &image_channels,\n &image_rowbytes))"];
"1000146" [label="(Literal,2.2)"];
"1000490" [label="(Identifier,image_data)"];
"1000323" [label="(Call,fprintf(stderr, \"\n\"\n           \"\t\t  to the product of the lookup-table exponent (varies)\n\"\n           \"\t\t  and the CRT exponent (usually 2.2); must be positive\n\"\n           \"    bg  \tdesired background color in 7-character hex RGB format\n\"\n           \"\t\t  (e.g., ``#ff7700'' for orange:  same as HTML colors);\n\"\n           \"\t\t  used with transparent images\n\"\n           \"\nPress Q, Esc or mouse button 1 (within image window, after image\n\"\n          \"is displayed) to quit.\n\"))"];
"1000237" [label="(Call,display_exponent <= 0.0)"];
"1000319" [label="(Identifier,stderr)"];
"1000482" [label="(Call,&image_rowbytes)"];
"1000497" [label="(Call,free(image_data))"];
"1000479" [label="(Identifier,display_exponent)"];
"1000163" [label="(Literal,1.0)"];
"1000325" [label="(Literal,\"\n\"\n           \"\t\t  to the product of the lookup-table exponent (varies)\n\"\n           \"\t\t  and the CRT exponent (usually 2.2); must be positive\n\"\n           \"    bg  \tdesired background color in 7-character hex RGB format\n\"\n           \"\t\t  (e.g., ``#ff7700'' for orange:  same as HTML colors);\n\"\n           \"\t\t  used with transparent images\n\"\n           \"\nPress Q, Esc or mouse button 1 (within image window, after image\n\"\n          \"is displayed) to quit.\n\")"];
"1000495" [label="(Call,rpng_x_display_image())"];
"1000160" [label="(Call,LUT_exponent = 1.0 / 2.2)"];
"1000322" [label="(Identifier,default_display_exponent)"];
"1000181" [label="(ControlStructure,else)"];
"1000167" [label="(Call,LUT_exponent * CRT_exponent)"];
"1000151" [label="(Identifier,displayname)"];
"1000169" [label="(Identifier,CRT_exponent)"];
"1000165" [label="(Call,default_display_exponent = LUT_exponent * CRT_exponent)"];
"1000165" -> "1000128"  [label="AST: "];
"1000165" -> "1000167"  [label="CFG: "];
"1000166" -> "1000165"  [label="AST: "];
"1000167" -> "1000165"  [label="AST: "];
"1000173" -> "1000165"  [label="CFG: "];
"1000165" -> "1000552"  [label="DDG: "];
"1000165" -> "1000552"  [label="DDG: "];
"1000167" -> "1000165"  [label="DDG: "];
"1000167" -> "1000165"  [label="DDG: "];
"1000165" -> "1000182"  [label="DDG: "];
"1000165" -> "1000318"  [label="DDG: "];
"1000167" -> "1000169"  [label="CFG: "];
"1000168" -> "1000167"  [label="AST: "];
"1000169" -> "1000167"  [label="AST: "];
"1000167" -> "1000552"  [label="DDG: "];
"1000167" -> "1000552"  [label="DDG: "];
"1000160" -> "1000167"  [label="DDG: "];
"1000144" -> "1000167"  [label="DDG: "];
"1000160" -> "1000128"  [label="AST: "];
"1000160" -> "1000162"  [label="CFG: "];
"1000161" -> "1000160"  [label="AST: "];
"1000162" -> "1000160"  [label="AST: "];
"1000166" -> "1000160"  [label="CFG: "];
"1000160" -> "1000552"  [label="DDG: "];
"1000162" -> "1000160"  [label="DDG: "];
"1000162" -> "1000160"  [label="DDG: "];
"1000162" -> "1000164"  [label="CFG: "];
"1000163" -> "1000162"  [label="AST: "];
"1000164" -> "1000162"  [label="AST: "];
"1000144" -> "1000128"  [label="AST: "];
"1000144" -> "1000146"  [label="CFG: "];
"1000145" -> "1000144"  [label="AST: "];
"1000146" -> "1000144"  [label="AST: "];
"1000151" -> "1000144"  [label="CFG: "];
"1000182" -> "1000181"  [label="AST: "];
"1000182" -> "1000184"  [label="CFG: "];
"1000183" -> "1000182"  [label="AST: "];
"1000184" -> "1000182"  [label="AST: "];
"1000189" -> "1000182"  [label="CFG: "];
"1000182" -> "1000552"  [label="DDG: "];
"1000182" -> "1000478"  [label="DDG: "];
"1000478" -> "1000476"  [label="AST: "];
"1000478" -> "1000482"  [label="CFG: "];
"1000479" -> "1000478"  [label="AST: "];
"1000480" -> "1000478"  [label="AST: "];
"1000482" -> "1000478"  [label="AST: "];
"1000476" -> "1000478"  [label="CFG: "];
"1000478" -> "1000552"  [label="DDG: "];
"1000478" -> "1000552"  [label="DDG: "];
"1000478" -> "1000552"  [label="DDG: "];
"1000478" -> "1000476"  [label="DDG: "];
"1000478" -> "1000476"  [label="DDG: "];
"1000478" -> "1000476"  [label="DDG: "];
"1000177" -> "1000478"  [label="DDG: "];
"1000237" -> "1000478"  [label="DDG: "];
"1000476" -> "1000128"  [label="AST: "];
"1000477" -> "1000476"  [label="AST: "];
"1000485" -> "1000476"  [label="CFG: "];
"1000476" -> "1000552"  [label="DDG: "];
"1000476" -> "1000489"  [label="DDG: "];
"1000489" -> "1000488"  [label="AST: "];
"1000489" -> "1000490"  [label="CFG: "];
"1000490" -> "1000489"  [label="AST: "];
"1000493" -> "1000489"  [label="CFG: "];
"1000495" -> "1000489"  [label="CFG: "];
"1000489" -> "1000552"  [label="DDG: "];
"1000489" -> "1000552"  [label="DDG: "];
"1000489" -> "1000497"  [label="DDG: "];
"1000497" -> "1000496"  [label="AST: "];
"1000497" -> "1000498"  [label="CFG: "];
"1000498" -> "1000497"  [label="AST: "];
"1000500" -> "1000497"  [label="CFG: "];
"1000497" -> "1000552"  [label="DDG: "];
"1000318" -> "1000310"  [label="AST: "];
"1000318" -> "1000322"  [label="CFG: "];
"1000319" -> "1000318"  [label="AST: "];
"1000320" -> "1000318"  [label="AST: "];
"1000321" -> "1000318"  [label="AST: "];
"1000322" -> "1000318"  [label="AST: "];
"1000324" -> "1000318"  [label="CFG: "];
"1000318" -> "1000552"  [label="DDG: "];
"1000318" -> "1000552"  [label="DDG: "];
"1000318" -> "1000552"  [label="DDG: "];
"1000311" -> "1000318"  [label="DDG: "];
"1000311" -> "1000318"  [label="DDG: "];
"1000318" -> "1000323"  [label="DDG: "];
"1000323" -> "1000310"  [label="AST: "];
"1000323" -> "1000325"  [label="CFG: "];
"1000324" -> "1000323"  [label="AST: "];
"1000325" -> "1000323"  [label="AST: "];
"1000327" -> "1000323"  [label="CFG: "];
"1000323" -> "1000552"  [label="DDG: "];
"1000323" -> "1000552"  [label="DDG: "];
}
