digraph "0_linux_60085c3d009b0df252547adb336d1ccca5ce52ec_0@integer" {
"1000306" [label="(Call,needed = (buf_len - sz_copied))"];
"1000308" [label="(Call,buf_len - sz_copied)"];
"1000183" [label="(Call,sock_rcvlowat(sk, flags & MSG_WAITALL, buf_len))"];
"1000155" [label="(Call,lock_sock(sk))"];
"1000130" [label="(Call,tipc_sk_port(sk))"];
"1000122" [label="(Call,*sk = sock->sk)"];
"1000185" [label="(Call,flags & MSG_WAITALL)"];
"1000119" [label="(MethodParameterIn,int flags)"];
"1000150" [label="(Call,!buf_len)"];
"1000118" [label="(MethodParameterIn,size_t buf_len)"];
"1000409" [label="(Call,sz_copied < buf_len)"];
"1000363" [label="(Call,sz_copied != 0)"];
"1000272" [label="(Call,sz_copied == 0)"];
"1000140" [label="(Call,sz_copied = 0)"];
"1000420" [label="(Call,sz_copied < target)"];
"1000181" [label="(Call,target = sock_rcvlowat(sk, flags & MSG_WAITALL, buf_len))"];
"1000334" [label="(Call,sz_copied += sz_to_copy)"];
"1000321" [label="(Call,skb_copy_datagram_iovec(buf, msg_hdr_sz(msg) + offset,\n\t\t\t\t\t      m->msg_iov, sz_to_copy))"];
"1000300" [label="(Call,TIPC_SKB_CB(buf))"];
"1000251" [label="(Call,buf_msg(buf))"];
"1000242" [label="(Call,buf = skb_peek(&sk->sk_receive_queue))"];
"1000244" [label="(Call,skb_peek(&sk->sk_receive_queue))"];
"1000198" [label="(Call,skb_queue_empty(&sk->sk_receive_queue))"];
"1000415" [label="(Call,skb_queue_empty(&sk->sk_receive_queue))"];
"1000324" [label="(Call,msg_hdr_sz(msg))"];
"1000259" [label="(Call,msg_errcode(msg))"];
"1000255" [label="(Call,msg_data_sz(msg))"];
"1000249" [label="(Call,msg = buf_msg(buf))"];
"1000281" [label="(Call,anc_data_recv(m, msg, tport))"];
"1000276" [label="(Call,set_orig_addr(m, msg))"];
"1000117" [label="(MethodParameterIn,struct msghdr *m)"];
"1000128" [label="(Call,*tport = tipc_sk_port(sk))"];
"1000293" [label="(Call,offset = (u32)(unsigned long)(TIPC_SKB_CB(buf)->handle))"];
"1000295" [label="(Call,(u32)(unsigned long)(TIPC_SKB_CB(buf)->handle))"];
"1000297" [label="(Call,(unsigned long)(TIPC_SKB_CB(buf)->handle))"];
"1000311" [label="(Call,sz_to_copy = (sz <= needed) ? sz : needed)"];
"1000314" [label="(Call,sz <= needed)"];
"1000303" [label="(Call,sz -= offset)"];
"1000263" [label="(Call,!sz)"];
"1000253" [label="(Call,sz = msg_data_sz(msg))"];
"1000306" [label="(Call,needed = (buf_len - sz_copied))"];
"1000319" [label="(Call,res = skb_copy_datagram_iovec(buf, msg_hdr_sz(msg) + offset,\n\t\t\t\t\t      m->msg_iov, sz_to_copy))"];
"1000435" [label="(Call,sz_copied ? sz_copied : res)"];
"1000434" [label="(Return,return sz_copied ? sz_copied : res;)"];
"1000408" [label="(Call,(sz_copied < buf_len) &&\t/* didn't get all requested data */\n\t    (!skb_queue_empty(&sk->sk_receive_queue) ||\n\t    (sz_copied < target)) &&\t/* and more is ready or required */\n\t    (!(flags & MSG_PEEK)) &&\t/* and aren't just peeking at data */\n\t    (!err))"];
"1000413" [label="(Call,!skb_queue_empty(&sk->sk_receive_queue) ||\n\t    (sz_copied < target))"];
"1000412" [label="(Call,(!skb_queue_empty(&sk->sk_receive_queue) ||\n\t    (sz_copied < target)) &&\t/* and more is ready or required */\n\t    (!(flags & MSG_PEEK)) &&\t/* and aren't just peeking at data */\n\t    (!err))"];
"1000338" [label="(Call,sz_to_copy < sz)"];
"1000354" [label="(Call,(unsigned long)(offset + sz_to_copy))"];
"1000352" [label="(Call,(void *)(unsigned long)(offset + sz_to_copy))"];
"1000347" [label="(Call,TIPC_SKB_CB(buf)->handle =\n\t\t\t\t(void *)(unsigned long)(offset + sz_to_copy))"];
"1000356" [label="(Call,offset + sz_to_copy)"];
"1000349" [label="(Call,TIPC_SKB_CB(buf))"];
"1000313" [label="(Call,(sz <= needed) ? sz : needed)"];
"1000408" [label="(Call,(sz_copied < buf_len) &&\t/* didn't get all requested data */\n\t    (!skb_queue_empty(&sk->sk_receive_queue) ||\n\t    (sz_copied < target)) &&\t/* and more is ready or required */\n\t    (!(flags & MSG_PEEK)) &&\t/* and aren't just peeking at data */\n\t    (!err))"];
"1000422" [label="(Identifier,target)"];
"1000242" [label="(Call,buf = skb_peek(&sk->sk_receive_queue))"];
"1000171" [label="(Call,res = -ENOTCONN)"];
"1000339" [label="(Identifier,sz_to_copy)"];
"1000322" [label="(Identifier,buf)"];
"1000327" [label="(Call,m->msg_iov)"];
"1000342" [label="(ControlStructure,if (!(flags & MSG_PEEK)))"];
"1000434" [label="(Return,return sz_copied ? sz_copied : res;)"];
"1000362" [label="(ControlStructure,if (sz_copied != 0))"];
"1000191" [label="(Call,sock_rcvtimeo(sk, flags & MSG_DONTWAIT))"];
"1000262" [label="(Call,(!sz) && (!err))"];
"1000319" [label="(Call,res = skb_copy_datagram_iovec(buf, msg_hdr_sz(msg) + offset,\n\t\t\t\t\t      m->msg_iov, sz_to_copy))"];
"1000426" [label="(Identifier,flags)"];
"1000257" [label="(Call,err = msg_errcode(msg))"];
"1000243" [label="(Identifier,buf)"];
"1000290" [label="(Identifier,err)"];
"1000439" [label="(MethodReturn,static int)"];
"1000253" [label="(Call,sz = msg_data_sz(msg))"];
"1000318" [label="(Identifier,needed)"];
"1000307" [label="(Identifier,needed)"];
"1000336" [label="(Identifier,sz_to_copy)"];
"1000326" [label="(Identifier,offset)"];
"1000117" [label="(MethodParameterIn,struct msghdr *m)"];
"1000282" [label="(Identifier,m)"];
"1000325" [label="(Identifier,msg)"];
"1000324" [label="(Call,msg_hdr_sz(msg))"];
"1000379" [label="(Call,res = -ECONNRESET)"];
"1000140" [label="(Call,sz_copied = 0)"];
"1000284" [label="(Identifier,tport)"];
"1000352" [label="(Call,(void *)(unsigned long)(offset + sz_to_copy))"];
"1000415" [label="(Call,skb_queue_empty(&sk->sk_receive_queue))"];
"1000302" [label="(FieldIdentifier,handle)"];
"1000274" [label="(Literal,0)"];
"1000156" [label="(Identifier,sk)"];
"1000309" [label="(Identifier,buf_len)"];
"1000299" [label="(Call,TIPC_SKB_CB(buf)->handle)"];
"1000130" [label="(Call,tipc_sk_port(sk))"];
"1000365" [label="(Literal,0)"];
"1000279" [label="(Call,res = anc_data_recv(m, msg, tport))"];
"1000283" [label="(Identifier,msg)"];
"1000438" [label="(Identifier,res)"];
"1000185" [label="(Call,flags & MSG_WAITALL)"];
"1000245" [label="(Call,&sk->sk_receive_queue)"];
"1000181" [label="(Call,target = sock_rcvlowat(sk, flags & MSG_WAITALL, buf_len))"];
"1000414" [label="(Call,!skb_queue_empty(&sk->sk_receive_queue))"];
"1000119" [label="(MethodParameterIn,int flags)"];
"1000436" [label="(Identifier,sz_copied)"];
"1000255" [label="(Call,msg_data_sz(msg))"];
"1000249" [label="(Call,msg = buf_msg(buf))"];
"1000387" [label="(Identifier,flags)"];
"1000129" [label="(Identifier,tport)"];
"1000291" [label="(Block,)"];
"1000187" [label="(Identifier,MSG_WAITALL)"];
"1000123" [label="(Identifier,sk)"];
"1000375" [label="(Call,res = 0)"];
"1000407" [label="(ControlStructure,if ((sz_copied < buf_len) &&\t/* didn't get all requested data */\n\t    (!skb_queue_empty(&sk->sk_receive_queue) ||\n\t    (sz_copied < target)) &&\t/* and more is ready or required */\n\t    (!(flags & MSG_PEEK)) &&\t/* and aren't just peeking at data */\n\t    (!err)))"];
"1000435" [label="(Call,sz_copied ? sz_copied : res)"];
"1000350" [label="(Identifier,buf)"];
"1000244" [label="(Call,skb_peek(&sk->sk_receive_queue))"];
"1000356" [label="(Call,offset + sz_to_copy)"];
"1000432" [label="(Call,release_sock(sk))"];
"1000146" [label="(Identifier,res)"];
"1000128" [label="(Call,*tport = tipc_sk_port(sk))"];
"1000308" [label="(Call,buf_len - sz_copied)"];
"1000276" [label="(Call,set_orig_addr(m, msg))"];
"1000190" [label="(Identifier,timeout)"];
"1000409" [label="(Call,sz_copied < buf_len)"];
"1000295" [label="(Call,(u32)(unsigned long)(TIPC_SKB_CB(buf)->handle))"];
"1000122" [label="(Call,*sk = sock->sk)"];
"1000320" [label="(Identifier,res)"];
"1000301" [label="(Identifier,buf)"];
"1000149" [label="(Call,unlikely(!buf_len))"];
"1000418" [label="(Identifier,sk)"];
"1000182" [label="(Identifier,target)"];
"1000345" [label="(Identifier,flags)"];
"1000184" [label="(Identifier,sk)"];
"1000335" [label="(Identifier,sz_copied)"];
"1000425" [label="(Call,flags & MSG_PEEK)"];
"1000358" [label="(Identifier,sz_to_copy)"];
"1000183" [label="(Call,sock_rcvlowat(sk, flags & MSG_WAITALL, buf_len))"];
"1000304" [label="(Identifier,sz)"];
"1000338" [label="(Call,sz_to_copy < sz)"];
"1000266" [label="(Identifier,err)"];
"1000211" [label="(Call,res = -ENOTCONN)"];
"1000263" [label="(Call,!sz)"];
"1000264" [label="(Identifier,sz)"];
"1000281" [label="(Call,anc_data_recv(m, msg, tport))"];
"1000278" [label="(Identifier,msg)"];
"1000259" [label="(Call,msg_errcode(msg))"];
"1000420" [label="(Call,sz_copied < target)"];
"1000332" [label="(Identifier,res)"];
"1000411" [label="(Identifier,buf_len)"];
"1000340" [label="(Identifier,sz)"];
"1000354" [label="(Call,(unsigned long)(offset + sz_to_copy))"];
"1000198" [label="(Call,skb_queue_empty(&sk->sk_receive_queue))"];
"1000311" [label="(Call,sz_to_copy = (sz <= needed) ? sz : needed)"];
"1000421" [label="(Identifier,sz_copied)"];
"1000120" [label="(Block,)"];
"1000258" [label="(Identifier,err)"];
"1000186" [label="(Identifier,flags)"];
"1000151" [label="(Identifier,buf_len)"];
"1000305" [label="(Identifier,offset)"];
"1000131" [label="(Identifier,sk)"];
"1000207" [label="(Identifier,sock)"];
"1000260" [label="(Identifier,msg)"];
"1000250" [label="(Identifier,msg)"];
"1000273" [label="(Identifier,sz_copied)"];
"1000197" [label="(ControlStructure,while (skb_queue_empty(&sk->sk_receive_queue)))"];
"1000199" [label="(Call,&sk->sk_receive_queue)"];
"1000348" [label="(Call,TIPC_SKB_CB(buf)->handle)"];
"1000364" [label="(Identifier,sz_copied)"];
"1000297" [label="(Call,(unsigned long)(TIPC_SKB_CB(buf)->handle))"];
"1000351" [label="(FieldIdentifier,handle)"];
"1000437" [label="(Identifier,sz_copied)"];
"1000357" [label="(Identifier,offset)"];
"1000277" [label="(Identifier,m)"];
"1000370" [label="(Identifier,err)"];
"1000431" [label="(JumpTarget,exit:)"];
"1000323" [label="(Call,msg_hdr_sz(msg) + offset)"];
"1000252" [label="(Identifier,buf)"];
"1000347" [label="(Call,TIPC_SKB_CB(buf)->handle =\n\t\t\t\t(void *)(unsigned long)(offset + sz_to_copy))"];
"1000141" [label="(Identifier,sz_copied)"];
"1000410" [label="(Identifier,sz_copied)"];
"1000303" [label="(Call,sz -= offset)"];
"1000150" [label="(Call,!buf_len)"];
"1000337" [label="(ControlStructure,if (sz_to_copy < sz))"];
"1000162" [label="(Identifier,sock)"];
"1000312" [label="(Identifier,sz_to_copy)"];
"1000317" [label="(Identifier,sz)"];
"1000359" [label="(ControlStructure,goto exit;)"];
"1000386" [label="(Call,flags & MSG_PEEK)"];
"1000271" [label="(ControlStructure,if (sz_copied == 0))"];
"1000145" [label="(Call,res = 0)"];
"1000124" [label="(Call,sock->sk)"];
"1000344" [label="(Call,flags & MSG_PEEK)"];
"1000256" [label="(Identifier,msg)"];
"1000280" [label="(Identifier,res)"];
"1000330" [label="(Identifier,sz_to_copy)"];
"1000412" [label="(Call,(!skb_queue_empty(&sk->sk_receive_queue) ||\n\t    (sz_copied < target)) &&\t/* and more is ready or required */\n\t    (!(flags & MSG_PEEK)) &&\t/* and aren't just peeking at data */\n\t    (!err))"];
"1000254" [label="(Identifier,sz)"];
"1000155" [label="(Call,lock_sock(sk))"];
"1000306" [label="(Call,needed = (buf_len - sz_copied))"];
"1000221" [label="(Call,res = timeout ? timeout : -EWOULDBLOCK)"];
"1000313" [label="(Call,(sz <= needed) ? sz : needed)"];
"1000272" [label="(Call,sz_copied == 0)"];
"1000423" [label="(Call,(!(flags & MSG_PEEK)) &&\t/* and aren't just peeking at data */\n\t    (!err))"];
"1000188" [label="(Identifier,buf_len)"];
"1000315" [label="(Identifier,sz)"];
"1000349" [label="(Call,TIPC_SKB_CB(buf))"];
"1000416" [label="(Call,&sk->sk_receive_queue)"];
"1000142" [label="(Literal,0)"];
"1000300" [label="(Call,TIPC_SKB_CB(buf))"];
"1000316" [label="(Identifier,needed)"];
"1000193" [label="(Call,flags & MSG_DONTWAIT)"];
"1000363" [label="(Call,sz_copied != 0)"];
"1000293" [label="(Call,offset = (u32)(unsigned long)(TIPC_SKB_CB(buf)->handle))"];
"1000294" [label="(Identifier,offset)"];
"1000334" [label="(Call,sz_copied += sz_to_copy)"];
"1000275" [label="(Block,)"];
"1000251" [label="(Call,buf_msg(buf))"];
"1000314" [label="(Call,sz <= needed)"];
"1000310" [label="(Identifier,sz_copied)"];
"1000366" [label="(ControlStructure,goto exit;)"];
"1000118" [label="(MethodParameterIn,size_t buf_len)"];
"1000413" [label="(Call,!skb_queue_empty(&sk->sk_receive_queue) ||\n\t    (sz_copied < target))"];
"1000321" [label="(Call,skb_copy_datagram_iovec(buf, msg_hdr_sz(msg) + offset,\n\t\t\t\t\t      m->msg_iov, sz_to_copy))"];
"1000430" [label="(ControlStructure,goto restart;)"];
"1000306" -> "1000291"  [label="AST: "];
"1000306" -> "1000308"  [label="CFG: "];
"1000307" -> "1000306"  [label="AST: "];
"1000308" -> "1000306"  [label="AST: "];
"1000312" -> "1000306"  [label="CFG: "];
"1000306" -> "1000439"  [label="DDG: buf_len - sz_copied"];
"1000308" -> "1000306"  [label="DDG: buf_len"];
"1000308" -> "1000306"  [label="DDG: sz_copied"];
"1000306" -> "1000314"  [label="DDG: needed"];
"1000308" -> "1000310"  [label="CFG: "];
"1000309" -> "1000308"  [label="AST: "];
"1000310" -> "1000308"  [label="AST: "];
"1000308" -> "1000439"  [label="DDG: buf_len"];
"1000183" -> "1000308"  [label="DDG: buf_len"];
"1000409" -> "1000308"  [label="DDG: buf_len"];
"1000118" -> "1000308"  [label="DDG: buf_len"];
"1000272" -> "1000308"  [label="DDG: sz_copied"];
"1000308" -> "1000334"  [label="DDG: sz_copied"];
"1000308" -> "1000409"  [label="DDG: buf_len"];
"1000308" -> "1000435"  [label="DDG: sz_copied"];
"1000183" -> "1000181"  [label="AST: "];
"1000183" -> "1000188"  [label="CFG: "];
"1000184" -> "1000183"  [label="AST: "];
"1000185" -> "1000183"  [label="AST: "];
"1000188" -> "1000183"  [label="AST: "];
"1000181" -> "1000183"  [label="CFG: "];
"1000183" -> "1000439"  [label="DDG: buf_len"];
"1000183" -> "1000439"  [label="DDG: flags & MSG_WAITALL"];
"1000183" -> "1000181"  [label="DDG: sk"];
"1000183" -> "1000181"  [label="DDG: flags & MSG_WAITALL"];
"1000183" -> "1000181"  [label="DDG: buf_len"];
"1000155" -> "1000183"  [label="DDG: sk"];
"1000185" -> "1000183"  [label="DDG: flags"];
"1000185" -> "1000183"  [label="DDG: MSG_WAITALL"];
"1000150" -> "1000183"  [label="DDG: buf_len"];
"1000118" -> "1000183"  [label="DDG: buf_len"];
"1000183" -> "1000191"  [label="DDG: sk"];
"1000183" -> "1000409"  [label="DDG: buf_len"];
"1000155" -> "1000120"  [label="AST: "];
"1000155" -> "1000156"  [label="CFG: "];
"1000156" -> "1000155"  [label="AST: "];
"1000162" -> "1000155"  [label="CFG: "];
"1000155" -> "1000439"  [label="DDG: lock_sock(sk)"];
"1000130" -> "1000155"  [label="DDG: sk"];
"1000155" -> "1000432"  [label="DDG: sk"];
"1000130" -> "1000128"  [label="AST: "];
"1000130" -> "1000131"  [label="CFG: "];
"1000131" -> "1000130"  [label="AST: "];
"1000128" -> "1000130"  [label="CFG: "];
"1000130" -> "1000439"  [label="DDG: sk"];
"1000130" -> "1000128"  [label="DDG: sk"];
"1000122" -> "1000130"  [label="DDG: sk"];
"1000122" -> "1000120"  [label="AST: "];
"1000122" -> "1000124"  [label="CFG: "];
"1000123" -> "1000122"  [label="AST: "];
"1000124" -> "1000122"  [label="AST: "];
"1000129" -> "1000122"  [label="CFG: "];
"1000122" -> "1000439"  [label="DDG: sock->sk"];
"1000185" -> "1000187"  [label="CFG: "];
"1000186" -> "1000185"  [label="AST: "];
"1000187" -> "1000185"  [label="AST: "];
"1000188" -> "1000185"  [label="CFG: "];
"1000185" -> "1000439"  [label="DDG: MSG_WAITALL"];
"1000119" -> "1000185"  [label="DDG: flags"];
"1000185" -> "1000193"  [label="DDG: flags"];
"1000119" -> "1000114"  [label="AST: "];
"1000119" -> "1000439"  [label="DDG: flags"];
"1000119" -> "1000193"  [label="DDG: flags"];
"1000119" -> "1000344"  [label="DDG: flags"];
"1000119" -> "1000386"  [label="DDG: flags"];
"1000119" -> "1000425"  [label="DDG: flags"];
"1000150" -> "1000149"  [label="AST: "];
"1000150" -> "1000151"  [label="CFG: "];
"1000151" -> "1000150"  [label="AST: "];
"1000149" -> "1000150"  [label="CFG: "];
"1000150" -> "1000439"  [label="DDG: buf_len"];
"1000150" -> "1000149"  [label="DDG: buf_len"];
"1000118" -> "1000150"  [label="DDG: buf_len"];
"1000118" -> "1000114"  [label="AST: "];
"1000118" -> "1000439"  [label="DDG: buf_len"];
"1000118" -> "1000409"  [label="DDG: buf_len"];
"1000409" -> "1000408"  [label="AST: "];
"1000409" -> "1000411"  [label="CFG: "];
"1000410" -> "1000409"  [label="AST: "];
"1000411" -> "1000409"  [label="AST: "];
"1000418" -> "1000409"  [label="CFG: "];
"1000408" -> "1000409"  [label="CFG: "];
"1000409" -> "1000439"  [label="DDG: buf_len"];
"1000409" -> "1000272"  [label="DDG: sz_copied"];
"1000409" -> "1000408"  [label="DDG: sz_copied"];
"1000409" -> "1000408"  [label="DDG: buf_len"];
"1000363" -> "1000409"  [label="DDG: sz_copied"];
"1000334" -> "1000409"  [label="DDG: sz_copied"];
"1000409" -> "1000420"  [label="DDG: sz_copied"];
"1000409" -> "1000435"  [label="DDG: sz_copied"];
"1000363" -> "1000362"  [label="AST: "];
"1000363" -> "1000365"  [label="CFG: "];
"1000364" -> "1000363"  [label="AST: "];
"1000365" -> "1000363"  [label="AST: "];
"1000366" -> "1000363"  [label="CFG: "];
"1000370" -> "1000363"  [label="CFG: "];
"1000363" -> "1000439"  [label="DDG: sz_copied != 0"];
"1000272" -> "1000363"  [label="DDG: sz_copied"];
"1000363" -> "1000435"  [label="DDG: sz_copied"];
"1000272" -> "1000271"  [label="AST: "];
"1000272" -> "1000274"  [label="CFG: "];
"1000273" -> "1000272"  [label="AST: "];
"1000274" -> "1000272"  [label="AST: "];
"1000277" -> "1000272"  [label="CFG: "];
"1000290" -> "1000272"  [label="CFG: "];
"1000272" -> "1000439"  [label="DDG: sz_copied == 0"];
"1000140" -> "1000272"  [label="DDG: sz_copied"];
"1000420" -> "1000272"  [label="DDG: sz_copied"];
"1000272" -> "1000435"  [label="DDG: sz_copied"];
"1000140" -> "1000120"  [label="AST: "];
"1000140" -> "1000142"  [label="CFG: "];
"1000141" -> "1000140"  [label="AST: "];
"1000142" -> "1000140"  [label="AST: "];
"1000146" -> "1000140"  [label="CFG: "];
"1000140" -> "1000439"  [label="DDG: sz_copied"];
"1000140" -> "1000435"  [label="DDG: sz_copied"];
"1000420" -> "1000413"  [label="AST: "];
"1000420" -> "1000422"  [label="CFG: "];
"1000421" -> "1000420"  [label="AST: "];
"1000422" -> "1000420"  [label="AST: "];
"1000413" -> "1000420"  [label="CFG: "];
"1000420" -> "1000439"  [label="DDG: target"];
"1000420" -> "1000413"  [label="DDG: sz_copied"];
"1000420" -> "1000413"  [label="DDG: target"];
"1000181" -> "1000420"  [label="DDG: target"];
"1000420" -> "1000435"  [label="DDG: sz_copied"];
"1000181" -> "1000120"  [label="AST: "];
"1000182" -> "1000181"  [label="AST: "];
"1000190" -> "1000181"  [label="CFG: "];
"1000181" -> "1000439"  [label="DDG: target"];
"1000181" -> "1000439"  [label="DDG: sock_rcvlowat(sk, flags & MSG_WAITALL, buf_len)"];
"1000334" -> "1000291"  [label="AST: "];
"1000334" -> "1000336"  [label="CFG: "];
"1000335" -> "1000334"  [label="AST: "];
"1000336" -> "1000334"  [label="AST: "];
"1000339" -> "1000334"  [label="CFG: "];
"1000321" -> "1000334"  [label="DDG: sz_to_copy"];
"1000334" -> "1000435"  [label="DDG: sz_copied"];
"1000321" -> "1000319"  [label="AST: "];
"1000321" -> "1000330"  [label="CFG: "];
"1000322" -> "1000321"  [label="AST: "];
"1000323" -> "1000321"  [label="AST: "];
"1000327" -> "1000321"  [label="AST: "];
"1000330" -> "1000321"  [label="AST: "];
"1000319" -> "1000321"  [label="CFG: "];
"1000321" -> "1000439"  [label="DDG: sz_to_copy"];
"1000321" -> "1000439"  [label="DDG: buf"];
"1000321" -> "1000439"  [label="DDG: msg_hdr_sz(msg) + offset"];
"1000321" -> "1000439"  [label="DDG: m->msg_iov"];
"1000321" -> "1000319"  [label="DDG: buf"];
"1000321" -> "1000319"  [label="DDG: msg_hdr_sz(msg) + offset"];
"1000321" -> "1000319"  [label="DDG: m->msg_iov"];
"1000321" -> "1000319"  [label="DDG: sz_to_copy"];
"1000300" -> "1000321"  [label="DDG: buf"];
"1000324" -> "1000321"  [label="DDG: msg"];
"1000293" -> "1000321"  [label="DDG: offset"];
"1000311" -> "1000321"  [label="DDG: sz_to_copy"];
"1000321" -> "1000338"  [label="DDG: sz_to_copy"];
"1000321" -> "1000349"  [label="DDG: buf"];
"1000300" -> "1000299"  [label="AST: "];
"1000300" -> "1000301"  [label="CFG: "];
"1000301" -> "1000300"  [label="AST: "];
"1000302" -> "1000300"  [label="CFG: "];
"1000251" -> "1000300"  [label="DDG: buf"];
"1000251" -> "1000249"  [label="AST: "];
"1000251" -> "1000252"  [label="CFG: "];
"1000252" -> "1000251"  [label="AST: "];
"1000249" -> "1000251"  [label="CFG: "];
"1000251" -> "1000439"  [label="DDG: buf"];
"1000251" -> "1000249"  [label="DDG: buf"];
"1000242" -> "1000251"  [label="DDG: buf"];
"1000242" -> "1000120"  [label="AST: "];
"1000242" -> "1000244"  [label="CFG: "];
"1000243" -> "1000242"  [label="AST: "];
"1000244" -> "1000242"  [label="AST: "];
"1000250" -> "1000242"  [label="CFG: "];
"1000242" -> "1000439"  [label="DDG: skb_peek(&sk->sk_receive_queue)"];
"1000244" -> "1000242"  [label="DDG: &sk->sk_receive_queue"];
"1000244" -> "1000245"  [label="CFG: "];
"1000245" -> "1000244"  [label="AST: "];
"1000244" -> "1000439"  [label="DDG: &sk->sk_receive_queue"];
"1000244" -> "1000198"  [label="DDG: &sk->sk_receive_queue"];
"1000198" -> "1000244"  [label="DDG: &sk->sk_receive_queue"];
"1000244" -> "1000415"  [label="DDG: &sk->sk_receive_queue"];
"1000198" -> "1000197"  [label="AST: "];
"1000198" -> "1000199"  [label="CFG: "];
"1000199" -> "1000198"  [label="AST: "];
"1000207" -> "1000198"  [label="CFG: "];
"1000243" -> "1000198"  [label="CFG: "];
"1000198" -> "1000439"  [label="DDG: &sk->sk_receive_queue"];
"1000198" -> "1000439"  [label="DDG: skb_queue_empty(&sk->sk_receive_queue)"];
"1000415" -> "1000198"  [label="DDG: &sk->sk_receive_queue"];
"1000415" -> "1000414"  [label="AST: "];
"1000415" -> "1000416"  [label="CFG: "];
"1000416" -> "1000415"  [label="AST: "];
"1000414" -> "1000415"  [label="CFG: "];
"1000415" -> "1000439"  [label="DDG: &sk->sk_receive_queue"];
"1000415" -> "1000414"  [label="DDG: &sk->sk_receive_queue"];
"1000324" -> "1000323"  [label="AST: "];
"1000324" -> "1000325"  [label="CFG: "];
"1000325" -> "1000324"  [label="AST: "];
"1000326" -> "1000324"  [label="CFG: "];
"1000324" -> "1000439"  [label="DDG: msg"];
"1000324" -> "1000323"  [label="DDG: msg"];
"1000259" -> "1000324"  [label="DDG: msg"];
"1000281" -> "1000324"  [label="DDG: msg"];
"1000259" -> "1000257"  [label="AST: "];
"1000259" -> "1000260"  [label="CFG: "];
"1000260" -> "1000259"  [label="AST: "];
"1000257" -> "1000259"  [label="CFG: "];
"1000259" -> "1000439"  [label="DDG: msg"];
"1000259" -> "1000257"  [label="DDG: msg"];
"1000255" -> "1000259"  [label="DDG: msg"];
"1000259" -> "1000276"  [label="DDG: msg"];
"1000255" -> "1000253"  [label="AST: "];
"1000255" -> "1000256"  [label="CFG: "];
"1000256" -> "1000255"  [label="AST: "];
"1000253" -> "1000255"  [label="CFG: "];
"1000255" -> "1000253"  [label="DDG: msg"];
"1000249" -> "1000255"  [label="DDG: msg"];
"1000249" -> "1000120"  [label="AST: "];
"1000250" -> "1000249"  [label="AST: "];
"1000254" -> "1000249"  [label="CFG: "];
"1000249" -> "1000439"  [label="DDG: buf_msg(buf)"];
"1000281" -> "1000279"  [label="AST: "];
"1000281" -> "1000284"  [label="CFG: "];
"1000282" -> "1000281"  [label="AST: "];
"1000283" -> "1000281"  [label="AST: "];
"1000284" -> "1000281"  [label="AST: "];
"1000279" -> "1000281"  [label="CFG: "];
"1000281" -> "1000439"  [label="DDG: m"];
"1000281" -> "1000439"  [label="DDG: tport"];
"1000281" -> "1000439"  [label="DDG: msg"];
"1000281" -> "1000276"  [label="DDG: m"];
"1000281" -> "1000279"  [label="DDG: m"];
"1000281" -> "1000279"  [label="DDG: msg"];
"1000281" -> "1000279"  [label="DDG: tport"];
"1000276" -> "1000281"  [label="DDG: m"];
"1000276" -> "1000281"  [label="DDG: msg"];
"1000117" -> "1000281"  [label="DDG: m"];
"1000128" -> "1000281"  [label="DDG: tport"];
"1000276" -> "1000275"  [label="AST: "];
"1000276" -> "1000278"  [label="CFG: "];
"1000277" -> "1000276"  [label="AST: "];
"1000278" -> "1000276"  [label="AST: "];
"1000280" -> "1000276"  [label="CFG: "];
"1000276" -> "1000439"  [label="DDG: set_orig_addr(m, msg)"];
"1000117" -> "1000276"  [label="DDG: m"];
"1000117" -> "1000114"  [label="AST: "];
"1000117" -> "1000439"  [label="DDG: m"];
"1000128" -> "1000120"  [label="AST: "];
"1000129" -> "1000128"  [label="AST: "];
"1000141" -> "1000128"  [label="CFG: "];
"1000128" -> "1000439"  [label="DDG: tipc_sk_port(sk)"];
"1000128" -> "1000439"  [label="DDG: tport"];
"1000293" -> "1000291"  [label="AST: "];
"1000293" -> "1000295"  [label="CFG: "];
"1000294" -> "1000293"  [label="AST: "];
"1000295" -> "1000293"  [label="AST: "];
"1000304" -> "1000293"  [label="CFG: "];
"1000293" -> "1000439"  [label="DDG: (u32)(unsigned long)(TIPC_SKB_CB(buf)->handle)"];
"1000295" -> "1000293"  [label="DDG: (unsigned long)(TIPC_SKB_CB(buf)->handle)"];
"1000293" -> "1000303"  [label="DDG: offset"];
"1000293" -> "1000323"  [label="DDG: offset"];
"1000293" -> "1000354"  [label="DDG: offset"];
"1000293" -> "1000356"  [label="DDG: offset"];
"1000295" -> "1000297"  [label="CFG: "];
"1000296" -> "1000295"  [label="AST: "];
"1000297" -> "1000295"  [label="AST: "];
"1000295" -> "1000439"  [label="DDG: (unsigned long)(TIPC_SKB_CB(buf)->handle)"];
"1000297" -> "1000295"  [label="DDG: TIPC_SKB_CB(buf)->handle"];
"1000297" -> "1000299"  [label="CFG: "];
"1000298" -> "1000297"  [label="AST: "];
"1000299" -> "1000297"  [label="AST: "];
"1000297" -> "1000439"  [label="DDG: TIPC_SKB_CB(buf)->handle"];
"1000311" -> "1000291"  [label="AST: "];
"1000311" -> "1000313"  [label="CFG: "];
"1000312" -> "1000311"  [label="AST: "];
"1000313" -> "1000311"  [label="AST: "];
"1000320" -> "1000311"  [label="CFG: "];
"1000311" -> "1000439"  [label="DDG: (sz <= needed) ? sz : needed"];
"1000314" -> "1000311"  [label="DDG: sz"];
"1000314" -> "1000311"  [label="DDG: needed"];
"1000314" -> "1000313"  [label="AST: "];
"1000314" -> "1000316"  [label="CFG: "];
"1000315" -> "1000314"  [label="AST: "];
"1000316" -> "1000314"  [label="AST: "];
"1000317" -> "1000314"  [label="CFG: "];
"1000318" -> "1000314"  [label="CFG: "];
"1000303" -> "1000314"  [label="DDG: sz"];
"1000314" -> "1000313"  [label="DDG: sz"];
"1000314" -> "1000313"  [label="DDG: needed"];
"1000314" -> "1000338"  [label="DDG: sz"];
"1000303" -> "1000291"  [label="AST: "];
"1000303" -> "1000305"  [label="CFG: "];
"1000304" -> "1000303"  [label="AST: "];
"1000305" -> "1000303"  [label="AST: "];
"1000307" -> "1000303"  [label="CFG: "];
"1000263" -> "1000303"  [label="DDG: sz"];
"1000263" -> "1000262"  [label="AST: "];
"1000263" -> "1000264"  [label="CFG: "];
"1000264" -> "1000263"  [label="AST: "];
"1000266" -> "1000263"  [label="CFG: "];
"1000262" -> "1000263"  [label="CFG: "];
"1000263" -> "1000439"  [label="DDG: sz"];
"1000263" -> "1000262"  [label="DDG: sz"];
"1000253" -> "1000263"  [label="DDG: sz"];
"1000253" -> "1000120"  [label="AST: "];
"1000254" -> "1000253"  [label="AST: "];
"1000258" -> "1000253"  [label="CFG: "];
"1000253" -> "1000439"  [label="DDG: msg_data_sz(msg)"];
"1000319" -> "1000291"  [label="AST: "];
"1000320" -> "1000319"  [label="AST: "];
"1000332" -> "1000319"  [label="CFG: "];
"1000319" -> "1000439"  [label="DDG: skb_copy_datagram_iovec(buf, msg_hdr_sz(msg) + offset,\n\t\t\t\t\t      m->msg_iov, sz_to_copy)"];
"1000319" -> "1000435"  [label="DDG: res"];
"1000435" -> "1000434"  [label="AST: "];
"1000435" -> "1000437"  [label="CFG: "];
"1000435" -> "1000438"  [label="CFG: "];
"1000436" -> "1000435"  [label="AST: "];
"1000437" -> "1000435"  [label="AST: "];
"1000438" -> "1000435"  [label="AST: "];
"1000434" -> "1000435"  [label="CFG: "];
"1000435" -> "1000439"  [label="DDG: sz_copied"];
"1000435" -> "1000439"  [label="DDG: res"];
"1000435" -> "1000439"  [label="DDG: sz_copied ? sz_copied : res"];
"1000435" -> "1000434"  [label="DDG: sz_copied ? sz_copied : res"];
"1000279" -> "1000435"  [label="DDG: res"];
"1000379" -> "1000435"  [label="DDG: res"];
"1000221" -> "1000435"  [label="DDG: res"];
"1000211" -> "1000435"  [label="DDG: res"];
"1000145" -> "1000435"  [label="DDG: res"];
"1000171" -> "1000435"  [label="DDG: res"];
"1000375" -> "1000435"  [label="DDG: res"];
"1000434" -> "1000120"  [label="AST: "];
"1000439" -> "1000434"  [label="CFG: "];
"1000434" -> "1000439"  [label="DDG: <RET>"];
"1000408" -> "1000407"  [label="AST: "];
"1000408" -> "1000412"  [label="CFG: "];
"1000412" -> "1000408"  [label="AST: "];
"1000430" -> "1000408"  [label="CFG: "];
"1000431" -> "1000408"  [label="CFG: "];
"1000408" -> "1000439"  [label="DDG: sz_copied < buf_len"];
"1000408" -> "1000439"  [label="DDG: (!skb_queue_empty(&sk->sk_receive_queue) ||\n\t    (sz_copied < target)) &&\t/* and more is ready or required */\n\t    (!(flags & MSG_PEEK)) &&\t/* and aren't just peeking at data */\n\t    (!err)"];
"1000408" -> "1000439"  [label="DDG: (sz_copied < buf_len) &&\t/* didn't get all requested data */\n\t    (!skb_queue_empty(&sk->sk_receive_queue) ||\n\t    (sz_copied < target)) &&\t/* and more is ready or required */\n\t    (!(flags & MSG_PEEK)) &&\t/* and aren't just peeking at data */\n\t    (!err)"];
"1000412" -> "1000408"  [label="DDG: !skb_queue_empty(&sk->sk_receive_queue) ||\n\t    (sz_copied < target)"];
"1000412" -> "1000408"  [label="DDG: (!(flags & MSG_PEEK)) &&\t/* and aren't just peeking at data */\n\t    (!err)"];
"1000413" -> "1000412"  [label="AST: "];
"1000413" -> "1000414"  [label="CFG: "];
"1000414" -> "1000413"  [label="AST: "];
"1000426" -> "1000413"  [label="CFG: "];
"1000412" -> "1000413"  [label="CFG: "];
"1000413" -> "1000439"  [label="DDG: sz_copied < target"];
"1000413" -> "1000439"  [label="DDG: !skb_queue_empty(&sk->sk_receive_queue)"];
"1000413" -> "1000412"  [label="DDG: !skb_queue_empty(&sk->sk_receive_queue)"];
"1000413" -> "1000412"  [label="DDG: sz_copied < target"];
"1000414" -> "1000413"  [label="DDG: skb_queue_empty(&sk->sk_receive_queue)"];
"1000412" -> "1000423"  [label="CFG: "];
"1000423" -> "1000412"  [label="AST: "];
"1000412" -> "1000439"  [label="DDG: (!(flags & MSG_PEEK)) &&\t/* and aren't just peeking at data */\n\t    (!err)"];
"1000412" -> "1000439"  [label="DDG: !skb_queue_empty(&sk->sk_receive_queue) ||\n\t    (sz_copied < target)"];
"1000423" -> "1000412"  [label="DDG: !(flags & MSG_PEEK)"];
"1000423" -> "1000412"  [label="DDG: !err"];
"1000338" -> "1000337"  [label="AST: "];
"1000338" -> "1000340"  [label="CFG: "];
"1000339" -> "1000338"  [label="AST: "];
"1000340" -> "1000338"  [label="AST: "];
"1000345" -> "1000338"  [label="CFG: "];
"1000387" -> "1000338"  [label="CFG: "];
"1000338" -> "1000439"  [label="DDG: sz_to_copy"];
"1000338" -> "1000439"  [label="DDG: sz_to_copy < sz"];
"1000338" -> "1000439"  [label="DDG: sz"];
"1000338" -> "1000354"  [label="DDG: sz_to_copy"];
"1000338" -> "1000356"  [label="DDG: sz_to_copy"];
"1000354" -> "1000352"  [label="AST: "];
"1000354" -> "1000356"  [label="CFG: "];
"1000355" -> "1000354"  [label="AST: "];
"1000356" -> "1000354"  [label="AST: "];
"1000352" -> "1000354"  [label="CFG: "];
"1000354" -> "1000439"  [label="DDG: offset + sz_to_copy"];
"1000354" -> "1000352"  [label="DDG: offset + sz_to_copy"];
"1000352" -> "1000347"  [label="AST: "];
"1000353" -> "1000352"  [label="AST: "];
"1000347" -> "1000352"  [label="CFG: "];
"1000352" -> "1000439"  [label="DDG: (unsigned long)(offset + sz_to_copy)"];
"1000352" -> "1000347"  [label="DDG: (unsigned long)(offset + sz_to_copy)"];
"1000347" -> "1000342"  [label="AST: "];
"1000348" -> "1000347"  [label="AST: "];
"1000359" -> "1000347"  [label="CFG: "];
"1000347" -> "1000439"  [label="DDG: TIPC_SKB_CB(buf)->handle"];
"1000347" -> "1000439"  [label="DDG: (void *)(unsigned long)(offset + sz_to_copy)"];
"1000356" -> "1000358"  [label="CFG: "];
"1000357" -> "1000356"  [label="AST: "];
"1000358" -> "1000356"  [label="AST: "];
"1000356" -> "1000439"  [label="DDG: offset"];
"1000356" -> "1000439"  [label="DDG: sz_to_copy"];
"1000349" -> "1000348"  [label="AST: "];
"1000349" -> "1000350"  [label="CFG: "];
"1000350" -> "1000349"  [label="AST: "];
"1000351" -> "1000349"  [label="CFG: "];
"1000349" -> "1000439"  [label="DDG: buf"];
"1000313" -> "1000317"  [label="CFG: "];
"1000313" -> "1000318"  [label="CFG: "];
"1000317" -> "1000313"  [label="AST: "];
"1000318" -> "1000313"  [label="AST: "];
"1000313" -> "1000439"  [label="DDG: needed"];
"1000313" -> "1000439"  [label="DDG: sz <= needed"];
"1000313" -> "1000439"  [label="DDG: sz"];
}
