digraph "0_linux_a430c9166312e1aa3d80bce32374233bdbfeba32@array" {
"1000681" [label="(Call,opcode = opcode.u.esc->high[ctxt->modrm - 0xc0])"];
"1000726" [label="(Call,ctxt->d |= opcode.flags)"];
"1000516" [label="(Call,ctxt->d & GroupMask)"];
"1000523" [label="(Call,ctxt->d & GroupMask)"];
"1000718" [label="(Call,ctxt->d &= ~(u64)GroupMask)"];
"1000723" [label="(Call,(u64)GroupMask)"];
"1000722" [label="(Call,~(u64)GroupMask)"];
"1000734" [label="(Call,ctxt->d == 0)"];
"1000758" [label="(Call,ctxt->d & EmulateOnUD)"];
"1000757" [label="(Call,!(ctxt->d & EmulateOnUD))"];
"1000756" [label="(Call,likely(!(ctxt->d & EmulateOnUD)))"];
"1000751" [label="(Call,unlikely(ctxt->ud) && likely(!(ctxt->d & EmulateOnUD)))"];
"1000767" [label="(Call,ctxt->d &\n\t\t     (NotImpl|Stack|Op3264|Sse|Mmx|Intercept|CheckPerm))"];
"1000766" [label="(Call,unlikely(ctxt->d &\n\t\t     (NotImpl|Stack|Op3264|Sse|Mmx|Intercept|CheckPerm)))"];
"1000800" [label="(Call,ctxt->d & NotImpl)"];
"1000812" [label="(Call,ctxt->d & Stack)"];
"1000808" [label="(Call,mode == X86EMUL_MODE_PROT64 && (ctxt->d & Stack))"];
"1000823" [label="(Call,ctxt->d & Op3264)"];
"1000845" [label="(Call,ctxt->d & Sse)"];
"1000857" [label="(Call,ctxt->d & Mmx)"];
"1000868" [label="(Call,ctxt->d & ModRM)"];
"1000898" [label="(Call,ctxt->d & MemAbs)"];
"1000946" [label="(Call,ctxt->d >> SrcShift)"];
"1000945" [label="(Call,(ctxt->d >> SrcShift) & OpMask)"];
"1000939" [label="(Call,decode_operand(ctxt, &ctxt->src, (ctxt->d >> SrcShift) & OpMask))"];
"1000937" [label="(Call,rc = decode_operand(ctxt, &ctxt->src, (ctxt->d >> SrcShift) & OpMask))"];
"1000953" [label="(Call,rc != X86EMUL_CONTINUE)"];
"1000973" [label="(Call,rc != X86EMUL_CONTINUE)"];
"1001012" [label="(Call,rc != X86EMUL_CONTINUE)"];
"1000959" [label="(Call,decode_operand(ctxt, &ctxt->src2, (ctxt->d >> Src2Shift) & OpMask))"];
"1000957" [label="(Call,rc = decode_operand(ctxt, &ctxt->src2, (ctxt->d >> Src2Shift) & OpMask))"];
"1000979" [label="(Call,decode_operand(ctxt, &ctxt->dst, (ctxt->d >> DstShift) & OpMask))"];
"1000977" [label="(Call,rc = decode_operand(ctxt, &ctxt->dst, (ctxt->d >> DstShift) & OpMask))"];
"1000965" [label="(Call,(ctxt->d >> Src2Shift) & OpMask)"];
"1000985" [label="(Call,(ctxt->d >> DstShift) & OpMask)"];
"1000966" [label="(Call,ctxt->d >> Src2Shift)"];
"1000986" [label="(Call,ctxt->d >> DstShift)"];
"1000785" [label="(Call,ctxt->check_perm = opcode.check_perm)"];
"1000792" [label="(Call,ctxt->intercept = opcode.intercept)"];
"1000641" [label="(Call,opcode = opcode.u.gprefix->pfx_66)"];
"1000465" [label="(Call,ctxt->d & ModRM)"];
"1000939" [label="(Call,decode_operand(ctxt, &ctxt->src, (ctxt->d >> SrcShift) & OpMask))"];
"1000697" [label="(Call,opcode = opcode.u.esc->op[(ctxt->modrm >> 3) & 7])"];
"1000640" [label="(JumpTarget,case 0x66:)"];
"1000767" [label="(Call,ctxt->d &\n\t\t     (NotImpl|Stack|Op3264|Sse|Mmx|Intercept|CheckPerm))"];
"1000810" [label="(Identifier,mode)"];
"1000900" [label="(Identifier,ctxt)"];
"1000549" [label="(JumpTarget,case GroupDual:)"];
"1000902" [label="(Identifier,MemAbs)"];
"1001011" [label="(Call,(rc != X86EMUL_CONTINUE) ? EMULATION_FAILED : EMULATION_OK)"];
"1000845" [label="(Call,ctxt->d & Sse)"];
"1000726" [label="(Call,ctxt->d |= opcode.flags)"];
"1000447" [label="(Call,insn_fetch(u8, ctxt))"];
"1000591" [label="(JumpTarget,case RMExt:)"];
"1000756" [label="(Call,likely(!(ctxt->d & EmulateOnUD)))"];
"1000800" [label="(Call,ctxt->d & NotImpl)"];
"1000812" [label="(Call,ctxt->d & Stack)"];
"1000813" [label="(Call,ctxt->d)"];
"1001014" [label="(Identifier,X86EMUL_CONTINUE)"];
"1000786" [label="(Call,ctxt->check_perm)"];
"1000759" [label="(Call,ctxt->d)"];
"1000875" [label="(Identifier,rc)"];
"1000959" [label="(Call,decode_operand(ctxt, &ctxt->src2, (ctxt->d >> Src2Shift) & OpMask))"];
"1000967" [label="(Call,ctxt->d)"];
"1000785" [label="(Call,ctxt->check_perm = opcode.check_perm)"];
"1000987" [label="(Call,ctxt->d)"];
"1000858" [label="(Call,ctxt->d)"];
"1001017" [label="(MethodReturn,int)"];
"1000861" [label="(Identifier,Mmx)"];
"1000846" [label="(Call,ctxt->d)"];
"1000956" [label="(ControlStructure,goto done;)"];
"1000824" [label="(Call,ctxt->d)"];
"1000831" [label="(Identifier,mode)"];
"1000947" [label="(Call,ctxt->d)"];
"1000794" [label="(Identifier,ctxt)"];
"1000905" [label="(Call,decode_abs(ctxt, &ctxt->memop))"];
"1000978" [label="(Identifier,rc)"];
"1000567" [label="(Call,opcode = opcode.u.gdual->mod3[goffset])"];
"1001016" [label="(Identifier,EMULATION_OK)"];
"1000751" [label="(Call,unlikely(ctxt->ud) && likely(!(ctxt->d & EmulateOnUD)))"];
"1000809" [label="(Call,mode == X86EMUL_MODE_PROT64)"];
"1000719" [label="(Call,ctxt->d)"];
"1000867" [label="(ControlStructure,if (ctxt->d & ModRM))"];
"1000985" [label="(Call,(ctxt->d >> DstShift) & OpMask)"];
"1000277" [label="(Call,insn_fetch(u8, ctxt))"];
"1000971" [label="(Identifier,OpMask)"];
"1000722" [label="(Call,~(u64)GroupMask)"];
"1000789" [label="(Call,opcode.check_perm)"];
"1000808" [label="(Call,mode == X86EMUL_MODE_PROT64 && (ctxt->d & Stack))"];
"1000804" [label="(Identifier,NotImpl)"];
"1000515" [label="(ControlStructure,while (ctxt->d & GroupMask))"];
"1000825" [label="(Identifier,ctxt)"];
"1000938" [label="(Identifier,rc)"];
"1000872" [label="(Identifier,ModRM)"];
"1000579" [label="(Call,opcode = opcode.u.gdual->mod012[goffset])"];
"1000762" [label="(Identifier,EmulateOnUD)"];
"1000975" [label="(Identifier,X86EMUL_CONTINUE)"];
"1000990" [label="(Identifier,DstShift)"];
"1000868" [label="(Call,ctxt->d & ModRM)"];
"1000424" [label="(Call,opcode = twobyte_table[ctxt->b])"];
"1000951" [label="(Identifier,OpMask)"];
"1000952" [label="(ControlStructure,if (rc != X86EMUL_CONTINUE))"];
"1000510" [label="(Call,ctxt->d = NotImpl)"];
"1000844" [label="(ControlStructure,if (ctxt->d & Sse))"];
"1000779" [label="(Call,Mmx|Intercept|CheckPerm)"];
"1000750" [label="(ControlStructure,if (unlikely(ctxt->ud) && likely(!(ctxt->d & EmulateOnUD))))"];
"1000516" [label="(Call,ctxt->d & GroupMask)"];
"1000955" [label="(Identifier,X86EMUL_CONTINUE)"];
"1000980" [label="(Identifier,ctxt)"];
"1000520" [label="(Identifier,GroupMask)"];
"1000674" [label="(JumpTarget,case Escape:)"];
"1000787" [label="(Identifier,ctxt)"];
"1001015" [label="(Identifier,EMULATION_FAILED)"];
"1000945" [label="(Call,(ctxt->d >> SrcShift) & OpMask)"];
"1000960" [label="(Identifier,ctxt)"];
"1000801" [label="(Call,ctxt->d)"];
"1001012" [label="(Call,rc != X86EMUL_CONTINUE)"];
"1000991" [label="(Identifier,OpMask)"];
"1000913" [label="(Identifier,rc)"];
"1000652" [label="(Call,opcode = opcode.u.gprefix->pfx_f2)"];
"1000899" [label="(Call,ctxt->d)"];
"1000764" [label="(Identifier,EMULATION_FAILED)"];
"1000683" [label="(Call,opcode.u.esc->high[ctxt->modrm - 0xc0])"];
"1000450" [label="(Call,opcode = opcode_map_0f_38[ctxt->b])"];
"1000768" [label="(Call,ctxt->d)"];
"1000827" [label="(Identifier,Op3264)"];
"1000730" [label="(Call,opcode.flags)"];
"1000961" [label="(Call,&ctxt->src2)"];
"1000662" [label="(JumpTarget,case 0xf3:)"];
"1000725" [label="(Identifier,GroupMask)"];
"1000757" [label="(Call,!(ctxt->d & EmulateOnUD))"];
"1000823" [label="(Call,ctxt->d & Op3264)"];
"1000792" [label="(Call,ctxt->intercept = opcode.intercept)"];
"1000474" [label="(Call,insn_fetch(u8, ctxt))"];
"1000727" [label="(Call,ctxt->d)"];
"1000802" [label="(Identifier,ctxt)"];
"1000771" [label="(Call,NotImpl|Stack|Op3264|Sse|Mmx|Intercept|CheckPerm)"];
"1000740" [label="(Identifier,EMULATION_FAILED)"];
"1000735" [label="(Call,ctxt->d)"];
"1000682" [label="(Identifier,opcode)"];
"1000723" [label="(Call,(u64)GroupMask)"];
"1000775" [label="(Call,Op3264|Sse|Mmx|Intercept|CheckPerm)"];
"1000994" [label="(Identifier,ctxt)"];
"1000856" [label="(ControlStructure,if (ctxt->d & Mmx))"];
"1000904" [label="(Identifier,rc)"];
"1000957" [label="(Call,rc = decode_operand(ctxt, &ctxt->src2, (ctxt->d >> Src2Shift) & OpMask))"];
"1000539" [label="(Call,opcode = opcode.u.group[goffset])"];
"1000972" [label="(ControlStructure,if (rc != X86EMUL_CONTINUE))"];
"1000870" [label="(Identifier,ctxt)"];
"1000954" [label="(Identifier,rc)"];
"1000793" [label="(Call,ctxt->intercept)"];
"1000966" [label="(Call,ctxt->d >> Src2Shift)"];
"1000977" [label="(Call,rc = decode_operand(ctxt, &ctxt->dst, (ctxt->d >> DstShift) & OpMask))"];
"1000630" [label="(Call,opcode = opcode.u.gprefix->pfx_no)"];
"1000973" [label="(Call,rc != X86EMUL_CONTINUE)"];
"1000421" [label="(Call,insn_fetch(u8, ctxt))"];
"1000898" [label="(Call,ctxt->d & MemAbs)"];
"1000522" [label="(ControlStructure,switch (ctxt->d & GroupMask))"];
"1000715" [label="(JumpTarget,default:)"];
"1000819" [label="(Identifier,ctxt)"];
"1000937" [label="(Call,rc = decode_operand(ctxt, &ctxt->src, (ctxt->d >> SrcShift) & OpMask))"];
"1000718" [label="(Call,ctxt->d &= ~(u64)GroupMask)"];
"1000758" [label="(Call,ctxt->d & EmulateOnUD)"];
"1000766" [label="(Call,unlikely(ctxt->d &\n\t\t     (NotImpl|Stack|Op3264|Sse|Mmx|Intercept|CheckPerm)))"];
"1000974" [label="(Identifier,rc)"];
"1000859" [label="(Identifier,ctxt)"];
"1000849" [label="(Identifier,Sse)"];
"1000796" [label="(Call,opcode.intercept)"];
"1000876" [label="(Call,decode_modrm(ctxt, &ctxt->memop))"];
"1000979" [label="(Call,decode_operand(ctxt, &ctxt->dst, (ctxt->d >> DstShift) & OpMask))"];
"1000852" [label="(Identifier,ctxt)"];
"1000816" [label="(Identifier,Stack)"];
"1000950" [label="(Identifier,SrcShift)"];
"1000529" [label="(JumpTarget,case Group:)"];
"1000965" [label="(Call,(ctxt->d >> Src2Shift) & OpMask)"];
"1000609" [label="(JumpTarget,case Prefix:)"];
"1000912" [label="(Call,rc != X86EMUL_CONTINUE)"];
"1000681" [label="(Call,opcode = opcode.u.esc->high[ctxt->modrm - 0xc0])"];
"1000738" [label="(Literal,0)"];
"1000981" [label="(Call,&ctxt->dst)"];
"1000869" [label="(Call,ctxt->d)"];
"1000736" [label="(Identifier,ctxt)"];
"1000777" [label="(Call,Sse|Mmx|Intercept|CheckPerm)"];
"1000752" [label="(Call,unlikely(ctxt->ud))"];
"1000769" [label="(Identifier,ctxt)"];
"1000784" [label="(Block,)"];
"1000847" [label="(Identifier,ctxt)"];
"1000527" [label="(Identifier,GroupMask)"];
"1000946" [label="(Call,ctxt->d >> SrcShift)"];
"1000675" [label="(ControlStructure,if (ctxt->modrm > 0xbf))"];
"1000857" [label="(Call,ctxt->d & Mmx)"];
"1000807" [label="(ControlStructure,if (mode == X86EMUL_MODE_PROT64 && (ctxt->d & Stack)))"];
"1000958" [label="(Identifier,rc)"];
"1000525" [label="(Identifier,ctxt)"];
"1000517" [label="(Call,ctxt->d)"];
"1000733" [label="(ControlStructure,if (ctxt->d == 0))"];
"1000133" [label="(Block,)"];
"1000864" [label="(Identifier,ctxt)"];
"1000651" [label="(JumpTarget,case 0xf2:)"];
"1000986" [label="(Call,ctxt->d >> DstShift)"];
"1000734" [label="(Call,ctxt->d == 0)"];
"1000629" [label="(JumpTarget,case 0x00:)"];
"1000663" [label="(Call,opcode = opcode.u.gprefix->pfx_f3)"];
"1000728" [label="(Identifier,ctxt)"];
"1000523" [label="(Call,ctxt->d & GroupMask)"];
"1000806" [label="(Identifier,EMULATION_FAILED)"];
"1000940" [label="(Identifier,ctxt)"];
"1000953" [label="(Call,rc != X86EMUL_CONTINUE)"];
"1000398" [label="(Call,opcode = opcode_table[ctxt->b])"];
"1000897" [label="(ControlStructure,if (ctxt->d & MemAbs))"];
"1000743" [label="(Identifier,ctxt)"];
"1000976" [label="(ControlStructure,goto done;)"];
"1000524" [label="(Call,ctxt->d)"];
"1000970" [label="(Identifier,Src2Shift)"];
"1000941" [label="(Call,&ctxt->src)"];
"1000521" [label="(Block,)"];
"1001013" [label="(Identifier,rc)"];
"1000773" [label="(Call,Stack|Op3264|Sse|Mmx|Intercept|CheckPerm)"];
"1000799" [label="(ControlStructure,if (ctxt->d & NotImpl))"];
"1000130" [label="(MethodParameterIn,struct x86_emulate_ctxt *ctxt)"];
"1000599" [label="(Call,opcode = opcode.u.group[goffset])"];
"1000714" [label="(ControlStructure,break;)"];
"1000822" [label="(ControlStructure,if (ctxt->d & Op3264))"];
"1000765" [label="(ControlStructure,if (unlikely(ctxt->d &\n\t\t     (NotImpl|Stack|Op3264|Sse|Mmx|Intercept|CheckPerm))))"];
"1000518" [label="(Identifier,ctxt)"];
"1000681" -> "1000675"  [label="AST: "];
"1000681" -> "1000683"  [label="CFG: "];
"1000682" -> "1000681"  [label="AST: "];
"1000683" -> "1000681"  [label="AST: "];
"1000714" -> "1000681"  [label="CFG: "];
"1000681" -> "1001017"  [label="DDG: opcode"];
"1000681" -> "1001017"  [label="DDG: opcode.u.esc->high[ctxt->modrm - 0xc0]"];
"1000681" -> "1000726"  [label="DDG: opcode"];
"1000681" -> "1000785"  [label="DDG: opcode"];
"1000681" -> "1000792"  [label="DDG: opcode"];
"1000726" -> "1000521"  [label="AST: "];
"1000726" -> "1000730"  [label="CFG: "];
"1000727" -> "1000726"  [label="AST: "];
"1000730" -> "1000726"  [label="AST: "];
"1000518" -> "1000726"  [label="CFG: "];
"1000726" -> "1001017"  [label="DDG: opcode.flags"];
"1000726" -> "1001017"  [label="DDG: ctxt->d |= opcode.flags"];
"1000726" -> "1000516"  [label="DDG: ctxt->d"];
"1000718" -> "1000726"  [label="DDG: ctxt->d"];
"1000539" -> "1000726"  [label="DDG: opcode"];
"1000567" -> "1000726"  [label="DDG: opcode"];
"1000663" -> "1000726"  [label="DDG: opcode"];
"1000630" -> "1000726"  [label="DDG: opcode"];
"1000599" -> "1000726"  [label="DDG: opcode"];
"1000450" -> "1000726"  [label="DDG: opcode"];
"1000697" -> "1000726"  [label="DDG: opcode"];
"1000641" -> "1000726"  [label="DDG: opcode"];
"1000398" -> "1000726"  [label="DDG: opcode"];
"1000579" -> "1000726"  [label="DDG: opcode"];
"1000652" -> "1000726"  [label="DDG: opcode"];
"1000424" -> "1000726"  [label="DDG: opcode"];
"1000516" -> "1000515"  [label="AST: "];
"1000516" -> "1000520"  [label="CFG: "];
"1000517" -> "1000516"  [label="AST: "];
"1000520" -> "1000516"  [label="AST: "];
"1000525" -> "1000516"  [label="CFG: "];
"1000736" -> "1000516"  [label="CFG: "];
"1000516" -> "1001017"  [label="DDG: GroupMask"];
"1000516" -> "1001017"  [label="DDG: ctxt->d & GroupMask"];
"1000510" -> "1000516"  [label="DDG: ctxt->d"];
"1000465" -> "1000516"  [label="DDG: ctxt->d"];
"1000723" -> "1000516"  [label="DDG: GroupMask"];
"1000516" -> "1000523"  [label="DDG: ctxt->d"];
"1000516" -> "1000523"  [label="DDG: GroupMask"];
"1000516" -> "1000734"  [label="DDG: ctxt->d"];
"1000523" -> "1000522"  [label="AST: "];
"1000523" -> "1000527"  [label="CFG: "];
"1000524" -> "1000523"  [label="AST: "];
"1000527" -> "1000523"  [label="AST: "];
"1000529" -> "1000523"  [label="CFG: "];
"1000549" -> "1000523"  [label="CFG: "];
"1000591" -> "1000523"  [label="CFG: "];
"1000609" -> "1000523"  [label="CFG: "];
"1000629" -> "1000523"  [label="CFG: "];
"1000640" -> "1000523"  [label="CFG: "];
"1000651" -> "1000523"  [label="CFG: "];
"1000662" -> "1000523"  [label="CFG: "];
"1000674" -> "1000523"  [label="CFG: "];
"1000715" -> "1000523"  [label="CFG: "];
"1000523" -> "1001017"  [label="DDG: ctxt->d"];
"1000523" -> "1001017"  [label="DDG: GroupMask"];
"1000523" -> "1001017"  [label="DDG: ctxt->d & GroupMask"];
"1000523" -> "1000718"  [label="DDG: ctxt->d"];
"1000523" -> "1000723"  [label="DDG: GroupMask"];
"1000523" -> "1000734"  [label="DDG: ctxt->d"];
"1000718" -> "1000521"  [label="AST: "];
"1000718" -> "1000722"  [label="CFG: "];
"1000719" -> "1000718"  [label="AST: "];
"1000722" -> "1000718"  [label="AST: "];
"1000728" -> "1000718"  [label="CFG: "];
"1000718" -> "1001017"  [label="DDG: ctxt->d &= ~(u64)GroupMask"];
"1000718" -> "1001017"  [label="DDG: ~(u64)GroupMask"];
"1000722" -> "1000718"  [label="DDG: (u64)GroupMask"];
"1000723" -> "1000722"  [label="AST: "];
"1000723" -> "1000725"  [label="CFG: "];
"1000724" -> "1000723"  [label="AST: "];
"1000725" -> "1000723"  [label="AST: "];
"1000722" -> "1000723"  [label="CFG: "];
"1000723" -> "1000722"  [label="DDG: GroupMask"];
"1000722" -> "1001017"  [label="DDG: (u64)GroupMask"];
"1000734" -> "1000733"  [label="AST: "];
"1000734" -> "1000738"  [label="CFG: "];
"1000735" -> "1000734"  [label="AST: "];
"1000738" -> "1000734"  [label="AST: "];
"1000740" -> "1000734"  [label="CFG: "];
"1000743" -> "1000734"  [label="CFG: "];
"1000734" -> "1001017"  [label="DDG: ctxt->d"];
"1000734" -> "1001017"  [label="DDG: ctxt->d == 0"];
"1000734" -> "1000758"  [label="DDG: ctxt->d"];
"1000734" -> "1000767"  [label="DDG: ctxt->d"];
"1000758" -> "1000757"  [label="AST: "];
"1000758" -> "1000762"  [label="CFG: "];
"1000759" -> "1000758"  [label="AST: "];
"1000762" -> "1000758"  [label="AST: "];
"1000757" -> "1000758"  [label="CFG: "];
"1000758" -> "1001017"  [label="DDG: EmulateOnUD"];
"1000758" -> "1001017"  [label="DDG: ctxt->d"];
"1000758" -> "1000757"  [label="DDG: ctxt->d"];
"1000758" -> "1000757"  [label="DDG: EmulateOnUD"];
"1000758" -> "1000767"  [label="DDG: ctxt->d"];
"1000757" -> "1000756"  [label="AST: "];
"1000756" -> "1000757"  [label="CFG: "];
"1000757" -> "1001017"  [label="DDG: ctxt->d & EmulateOnUD"];
"1000757" -> "1000756"  [label="DDG: ctxt->d & EmulateOnUD"];
"1000756" -> "1000751"  [label="AST: "];
"1000751" -> "1000756"  [label="CFG: "];
"1000756" -> "1001017"  [label="DDG: !(ctxt->d & EmulateOnUD)"];
"1000756" -> "1000751"  [label="DDG: !(ctxt->d & EmulateOnUD)"];
"1000751" -> "1000750"  [label="AST: "];
"1000751" -> "1000752"  [label="CFG: "];
"1000752" -> "1000751"  [label="AST: "];
"1000764" -> "1000751"  [label="CFG: "];
"1000769" -> "1000751"  [label="CFG: "];
"1000751" -> "1001017"  [label="DDG: unlikely(ctxt->ud) && likely(!(ctxt->d & EmulateOnUD))"];
"1000751" -> "1001017"  [label="DDG: unlikely(ctxt->ud)"];
"1000751" -> "1001017"  [label="DDG: likely(!(ctxt->d & EmulateOnUD))"];
"1000752" -> "1000751"  [label="DDG: ctxt->ud"];
"1000767" -> "1000766"  [label="AST: "];
"1000767" -> "1000771"  [label="CFG: "];
"1000768" -> "1000767"  [label="AST: "];
"1000771" -> "1000767"  [label="AST: "];
"1000766" -> "1000767"  [label="CFG: "];
"1000767" -> "1001017"  [label="DDG: NotImpl|Stack|Op3264|Sse|Mmx|Intercept|CheckPerm"];
"1000767" -> "1000766"  [label="DDG: ctxt->d"];
"1000767" -> "1000766"  [label="DDG: NotImpl|Stack|Op3264|Sse|Mmx|Intercept|CheckPerm"];
"1000771" -> "1000767"  [label="DDG: NotImpl"];
"1000771" -> "1000767"  [label="DDG: Stack|Op3264|Sse|Mmx|Intercept|CheckPerm"];
"1000767" -> "1000800"  [label="DDG: ctxt->d"];
"1000767" -> "1000868"  [label="DDG: ctxt->d"];
"1000766" -> "1000765"  [label="AST: "];
"1000787" -> "1000766"  [label="CFG: "];
"1000870" -> "1000766"  [label="CFG: "];
"1000766" -> "1001017"  [label="DDG: ctxt->d &\n\t\t     (NotImpl|Stack|Op3264|Sse|Mmx|Intercept|CheckPerm)"];
"1000766" -> "1001017"  [label="DDG: unlikely(ctxt->d &\n\t\t     (NotImpl|Stack|Op3264|Sse|Mmx|Intercept|CheckPerm))"];
"1000800" -> "1000799"  [label="AST: "];
"1000800" -> "1000804"  [label="CFG: "];
"1000801" -> "1000800"  [label="AST: "];
"1000804" -> "1000800"  [label="AST: "];
"1000806" -> "1000800"  [label="CFG: "];
"1000810" -> "1000800"  [label="CFG: "];
"1000800" -> "1001017"  [label="DDG: ctxt->d & NotImpl"];
"1000800" -> "1001017"  [label="DDG: NotImpl"];
"1000800" -> "1001017"  [label="DDG: ctxt->d"];
"1000771" -> "1000800"  [label="DDG: NotImpl"];
"1000800" -> "1000812"  [label="DDG: ctxt->d"];
"1000800" -> "1000823"  [label="DDG: ctxt->d"];
"1000812" -> "1000808"  [label="AST: "];
"1000812" -> "1000816"  [label="CFG: "];
"1000813" -> "1000812"  [label="AST: "];
"1000816" -> "1000812"  [label="AST: "];
"1000808" -> "1000812"  [label="CFG: "];
"1000812" -> "1001017"  [label="DDG: Stack"];
"1000812" -> "1000808"  [label="DDG: ctxt->d"];
"1000812" -> "1000808"  [label="DDG: Stack"];
"1000773" -> "1000812"  [label="DDG: Stack"];
"1000812" -> "1000823"  [label="DDG: ctxt->d"];
"1000808" -> "1000807"  [label="AST: "];
"1000808" -> "1000809"  [label="CFG: "];
"1000809" -> "1000808"  [label="AST: "];
"1000819" -> "1000808"  [label="CFG: "];
"1000825" -> "1000808"  [label="CFG: "];
"1000808" -> "1001017"  [label="DDG: mode == X86EMUL_MODE_PROT64 && (ctxt->d & Stack)"];
"1000808" -> "1001017"  [label="DDG: mode == X86EMUL_MODE_PROT64"];
"1000808" -> "1001017"  [label="DDG: ctxt->d & Stack"];
"1000809" -> "1000808"  [label="DDG: mode"];
"1000809" -> "1000808"  [label="DDG: X86EMUL_MODE_PROT64"];
"1000823" -> "1000822"  [label="AST: "];
"1000823" -> "1000827"  [label="CFG: "];
"1000824" -> "1000823"  [label="AST: "];
"1000827" -> "1000823"  [label="AST: "];
"1000831" -> "1000823"  [label="CFG: "];
"1000847" -> "1000823"  [label="CFG: "];
"1000823" -> "1001017"  [label="DDG: Op3264"];
"1000823" -> "1001017"  [label="DDG: ctxt->d & Op3264"];
"1000775" -> "1000823"  [label="DDG: Op3264"];
"1000823" -> "1000845"  [label="DDG: ctxt->d"];
"1000845" -> "1000844"  [label="AST: "];
"1000845" -> "1000849"  [label="CFG: "];
"1000846" -> "1000845"  [label="AST: "];
"1000849" -> "1000845"  [label="AST: "];
"1000852" -> "1000845"  [label="CFG: "];
"1000859" -> "1000845"  [label="CFG: "];
"1000845" -> "1001017"  [label="DDG: Sse"];
"1000845" -> "1001017"  [label="DDG: ctxt->d & Sse"];
"1000777" -> "1000845"  [label="DDG: Sse"];
"1000845" -> "1000857"  [label="DDG: ctxt->d"];
"1000845" -> "1000868"  [label="DDG: ctxt->d"];
"1000857" -> "1000856"  [label="AST: "];
"1000857" -> "1000861"  [label="CFG: "];
"1000858" -> "1000857"  [label="AST: "];
"1000861" -> "1000857"  [label="AST: "];
"1000864" -> "1000857"  [label="CFG: "];
"1000870" -> "1000857"  [label="CFG: "];
"1000857" -> "1001017"  [label="DDG: ctxt->d & Mmx"];
"1000857" -> "1001017"  [label="DDG: Mmx"];
"1000779" -> "1000857"  [label="DDG: Mmx"];
"1000857" -> "1000868"  [label="DDG: ctxt->d"];
"1000868" -> "1000867"  [label="AST: "];
"1000868" -> "1000872"  [label="CFG: "];
"1000869" -> "1000868"  [label="AST: "];
"1000872" -> "1000868"  [label="AST: "];
"1000875" -> "1000868"  [label="CFG: "];
"1000900" -> "1000868"  [label="CFG: "];
"1000868" -> "1001017"  [label="DDG: ModRM"];
"1000868" -> "1001017"  [label="DDG: ctxt->d & ModRM"];
"1000868" -> "1001017"  [label="DDG: ctxt->d"];
"1000465" -> "1000868"  [label="DDG: ModRM"];
"1000868" -> "1000898"  [label="DDG: ctxt->d"];
"1000868" -> "1000946"  [label="DDG: ctxt->d"];
"1000898" -> "1000897"  [label="AST: "];
"1000898" -> "1000902"  [label="CFG: "];
"1000899" -> "1000898"  [label="AST: "];
"1000902" -> "1000898"  [label="AST: "];
"1000904" -> "1000898"  [label="CFG: "];
"1000913" -> "1000898"  [label="CFG: "];
"1000898" -> "1001017"  [label="DDG: ctxt->d"];
"1000898" -> "1001017"  [label="DDG: ctxt->d & MemAbs"];
"1000898" -> "1001017"  [label="DDG: MemAbs"];
"1000898" -> "1000946"  [label="DDG: ctxt->d"];
"1000946" -> "1000945"  [label="AST: "];
"1000946" -> "1000950"  [label="CFG: "];
"1000947" -> "1000946"  [label="AST: "];
"1000950" -> "1000946"  [label="AST: "];
"1000951" -> "1000946"  [label="CFG: "];
"1000946" -> "1001017"  [label="DDG: SrcShift"];
"1000946" -> "1001017"  [label="DDG: ctxt->d"];
"1000946" -> "1000945"  [label="DDG: ctxt->d"];
"1000946" -> "1000945"  [label="DDG: SrcShift"];
"1000946" -> "1000966"  [label="DDG: ctxt->d"];
"1000945" -> "1000939"  [label="AST: "];
"1000945" -> "1000951"  [label="CFG: "];
"1000951" -> "1000945"  [label="AST: "];
"1000939" -> "1000945"  [label="CFG: "];
"1000945" -> "1001017"  [label="DDG: ctxt->d >> SrcShift"];
"1000945" -> "1001017"  [label="DDG: OpMask"];
"1000945" -> "1000939"  [label="DDG: ctxt->d >> SrcShift"];
"1000945" -> "1000939"  [label="DDG: OpMask"];
"1000945" -> "1000965"  [label="DDG: OpMask"];
"1000939" -> "1000937"  [label="AST: "];
"1000940" -> "1000939"  [label="AST: "];
"1000941" -> "1000939"  [label="AST: "];
"1000937" -> "1000939"  [label="CFG: "];
"1000939" -> "1001017"  [label="DDG: &ctxt->src"];
"1000939" -> "1001017"  [label="DDG: ctxt"];
"1000939" -> "1001017"  [label="DDG: (ctxt->d >> SrcShift) & OpMask"];
"1000939" -> "1000937"  [label="DDG: ctxt"];
"1000939" -> "1000937"  [label="DDG: &ctxt->src"];
"1000939" -> "1000937"  [label="DDG: (ctxt->d >> SrcShift) & OpMask"];
"1000905" -> "1000939"  [label="DDG: ctxt"];
"1000474" -> "1000939"  [label="DDG: ctxt"];
"1000421" -> "1000939"  [label="DDG: ctxt"];
"1000447" -> "1000939"  [label="DDG: ctxt"];
"1000277" -> "1000939"  [label="DDG: ctxt"];
"1000876" -> "1000939"  [label="DDG: ctxt"];
"1000130" -> "1000939"  [label="DDG: ctxt"];
"1000939" -> "1000959"  [label="DDG: ctxt"];
"1000937" -> "1000133"  [label="AST: "];
"1000938" -> "1000937"  [label="AST: "];
"1000954" -> "1000937"  [label="CFG: "];
"1000937" -> "1001017"  [label="DDG: decode_operand(ctxt, &ctxt->src, (ctxt->d >> SrcShift) & OpMask)"];
"1000937" -> "1000953"  [label="DDG: rc"];
"1000953" -> "1000952"  [label="AST: "];
"1000953" -> "1000955"  [label="CFG: "];
"1000954" -> "1000953"  [label="AST: "];
"1000955" -> "1000953"  [label="AST: "];
"1000956" -> "1000953"  [label="CFG: "];
"1000958" -> "1000953"  [label="CFG: "];
"1000912" -> "1000953"  [label="DDG: X86EMUL_CONTINUE"];
"1000953" -> "1000973"  [label="DDG: X86EMUL_CONTINUE"];
"1000953" -> "1001012"  [label="DDG: rc"];
"1000953" -> "1001012"  [label="DDG: X86EMUL_CONTINUE"];
"1000973" -> "1000972"  [label="AST: "];
"1000973" -> "1000975"  [label="CFG: "];
"1000974" -> "1000973"  [label="AST: "];
"1000975" -> "1000973"  [label="AST: "];
"1000976" -> "1000973"  [label="CFG: "];
"1000978" -> "1000973"  [label="CFG: "];
"1000957" -> "1000973"  [label="DDG: rc"];
"1000973" -> "1001012"  [label="DDG: rc"];
"1000973" -> "1001012"  [label="DDG: X86EMUL_CONTINUE"];
"1001012" -> "1001011"  [label="AST: "];
"1001012" -> "1001014"  [label="CFG: "];
"1001013" -> "1001012"  [label="AST: "];
"1001014" -> "1001012"  [label="AST: "];
"1001015" -> "1001012"  [label="CFG: "];
"1001016" -> "1001012"  [label="CFG: "];
"1001012" -> "1001017"  [label="DDG: rc"];
"1001012" -> "1001017"  [label="DDG: X86EMUL_CONTINUE"];
"1000912" -> "1001012"  [label="DDG: rc"];
"1000912" -> "1001012"  [label="DDG: X86EMUL_CONTINUE"];
"1000977" -> "1001012"  [label="DDG: rc"];
"1000959" -> "1000957"  [label="AST: "];
"1000959" -> "1000965"  [label="CFG: "];
"1000960" -> "1000959"  [label="AST: "];
"1000961" -> "1000959"  [label="AST: "];
"1000965" -> "1000959"  [label="AST: "];
"1000957" -> "1000959"  [label="CFG: "];
"1000959" -> "1001017"  [label="DDG: (ctxt->d >> Src2Shift) & OpMask"];
"1000959" -> "1001017"  [label="DDG: &ctxt->src2"];
"1000959" -> "1001017"  [label="DDG: ctxt"];
"1000959" -> "1000957"  [label="DDG: ctxt"];
"1000959" -> "1000957"  [label="DDG: &ctxt->src2"];
"1000959" -> "1000957"  [label="DDG: (ctxt->d >> Src2Shift) & OpMask"];
"1000130" -> "1000959"  [label="DDG: ctxt"];
"1000965" -> "1000959"  [label="DDG: ctxt->d >> Src2Shift"];
"1000965" -> "1000959"  [label="DDG: OpMask"];
"1000959" -> "1000979"  [label="DDG: ctxt"];
"1000957" -> "1000133"  [label="AST: "];
"1000958" -> "1000957"  [label="AST: "];
"1000974" -> "1000957"  [label="CFG: "];
"1000957" -> "1001017"  [label="DDG: decode_operand(ctxt, &ctxt->src2, (ctxt->d >> Src2Shift) & OpMask)"];
"1000979" -> "1000977"  [label="AST: "];
"1000979" -> "1000985"  [label="CFG: "];
"1000980" -> "1000979"  [label="AST: "];
"1000981" -> "1000979"  [label="AST: "];
"1000985" -> "1000979"  [label="AST: "];
"1000977" -> "1000979"  [label="CFG: "];
"1000979" -> "1001017"  [label="DDG: &ctxt->dst"];
"1000979" -> "1001017"  [label="DDG: ctxt"];
"1000979" -> "1001017"  [label="DDG: (ctxt->d >> DstShift) & OpMask"];
"1000979" -> "1000977"  [label="DDG: ctxt"];
"1000979" -> "1000977"  [label="DDG: &ctxt->dst"];
"1000979" -> "1000977"  [label="DDG: (ctxt->d >> DstShift) & OpMask"];
"1000130" -> "1000979"  [label="DDG: ctxt"];
"1000985" -> "1000979"  [label="DDG: ctxt->d >> DstShift"];
"1000985" -> "1000979"  [label="DDG: OpMask"];
"1000977" -> "1000133"  [label="AST: "];
"1000978" -> "1000977"  [label="AST: "];
"1000994" -> "1000977"  [label="CFG: "];
"1000977" -> "1001017"  [label="DDG: decode_operand(ctxt, &ctxt->dst, (ctxt->d >> DstShift) & OpMask)"];
"1000965" -> "1000971"  [label="CFG: "];
"1000966" -> "1000965"  [label="AST: "];
"1000971" -> "1000965"  [label="AST: "];
"1000965" -> "1001017"  [label="DDG: OpMask"];
"1000965" -> "1001017"  [label="DDG: ctxt->d >> Src2Shift"];
"1000966" -> "1000965"  [label="DDG: ctxt->d"];
"1000966" -> "1000965"  [label="DDG: Src2Shift"];
"1000965" -> "1000985"  [label="DDG: OpMask"];
"1000985" -> "1000991"  [label="CFG: "];
"1000986" -> "1000985"  [label="AST: "];
"1000991" -> "1000985"  [label="AST: "];
"1000985" -> "1001017"  [label="DDG: OpMask"];
"1000985" -> "1001017"  [label="DDG: ctxt->d >> DstShift"];
"1000986" -> "1000985"  [label="DDG: ctxt->d"];
"1000986" -> "1000985"  [label="DDG: DstShift"];
"1000966" -> "1000970"  [label="CFG: "];
"1000967" -> "1000966"  [label="AST: "];
"1000970" -> "1000966"  [label="AST: "];
"1000971" -> "1000966"  [label="CFG: "];
"1000966" -> "1001017"  [label="DDG: ctxt->d"];
"1000966" -> "1001017"  [label="DDG: Src2Shift"];
"1000966" -> "1000986"  [label="DDG: ctxt->d"];
"1000986" -> "1000990"  [label="CFG: "];
"1000987" -> "1000986"  [label="AST: "];
"1000990" -> "1000986"  [label="AST: "];
"1000991" -> "1000986"  [label="CFG: "];
"1000986" -> "1001017"  [label="DDG: ctxt->d"];
"1000986" -> "1001017"  [label="DDG: DstShift"];
"1000785" -> "1000784"  [label="AST: "];
"1000785" -> "1000789"  [label="CFG: "];
"1000786" -> "1000785"  [label="AST: "];
"1000789" -> "1000785"  [label="AST: "];
"1000794" -> "1000785"  [label="CFG: "];
"1000785" -> "1001017"  [label="DDG: opcode.check_perm"];
"1000785" -> "1001017"  [label="DDG: ctxt->check_perm"];
"1000539" -> "1000785"  [label="DDG: opcode"];
"1000567" -> "1000785"  [label="DDG: opcode"];
"1000663" -> "1000785"  [label="DDG: opcode"];
"1000630" -> "1000785"  [label="DDG: opcode"];
"1000599" -> "1000785"  [label="DDG: opcode"];
"1000450" -> "1000785"  [label="DDG: opcode"];
"1000697" -> "1000785"  [label="DDG: opcode"];
"1000641" -> "1000785"  [label="DDG: opcode"];
"1000398" -> "1000785"  [label="DDG: opcode"];
"1000579" -> "1000785"  [label="DDG: opcode"];
"1000652" -> "1000785"  [label="DDG: opcode"];
"1000424" -> "1000785"  [label="DDG: opcode"];
"1000792" -> "1000784"  [label="AST: "];
"1000792" -> "1000796"  [label="CFG: "];
"1000793" -> "1000792"  [label="AST: "];
"1000796" -> "1000792"  [label="AST: "];
"1000802" -> "1000792"  [label="CFG: "];
"1000792" -> "1001017"  [label="DDG: opcode.intercept"];
"1000792" -> "1001017"  [label="DDG: ctxt->intercept"];
"1000539" -> "1000792"  [label="DDG: opcode"];
"1000567" -> "1000792"  [label="DDG: opcode"];
"1000663" -> "1000792"  [label="DDG: opcode"];
"1000630" -> "1000792"  [label="DDG: opcode"];
"1000599" -> "1000792"  [label="DDG: opcode"];
"1000450" -> "1000792"  [label="DDG: opcode"];
"1000697" -> "1000792"  [label="DDG: opcode"];
"1000641" -> "1000792"  [label="DDG: opcode"];
"1000398" -> "1000792"  [label="DDG: opcode"];
"1000579" -> "1000792"  [label="DDG: opcode"];
"1000652" -> "1000792"  [label="DDG: opcode"];
"1000424" -> "1000792"  [label="DDG: opcode"];
}
