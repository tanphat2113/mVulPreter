digraph "0_linux_a430c9166312e1aa3d80bce32374233bdbfeba32@pointer" {
"1000486" [label="(Call,ctxt->b == 0xc5)"];
"1000406" [label="(Call,ctxt->b == 0x0f)"];
"1000342" [label="(Call,ctxt->b & 7)"];
"1000273" [label="(Call,ctxt->b = insn_fetch(u8, ctxt))"];
"1000277" [label="(Call,insn_fetch(u8, ctxt))"];
"1000221" [label="(Call,__do_insn_fetch_bytes(ctxt, 1))"];
"1000130" [label="(MethodParameterIn,struct x86_emulate_ctxt *ctxt)"];
"1000326" [label="(Call,ctxt->b >> 3)"];
"1000432" [label="(Call,ctxt->b == 0x38)"];
"1000417" [label="(Call,ctxt->b = insn_fetch(u8, ctxt))"];
"1000421" [label="(Call,insn_fetch(u8, ctxt))"];
"1000443" [label="(Call,ctxt->b = insn_fetch(u8, ctxt))"];
"1000447" [label="(Call,insn_fetch(u8, ctxt))"];
"1000485" [label="(Call,ctxt->b == 0xc5 || ctxt->b == 0xc4)"];
"1000484" [label="(Call,(ctxt->b == 0xc5 || ctxt->b == 0xc4) &&\n\t    (mode == X86EMUL_MODE_PROT64 ||\n\t    (mode >= X86EMUL_MODE_PROT16 && (ctxt->modrm & 0x80))))"];
"1000478" [label="(Call,ctxt->opcode_len == 1 && (ctxt->b == 0xc5 || ctxt->b == 0xc4) &&\n\t    (mode == X86EMUL_MODE_PROT64 ||\n\t    (mode >= X86EMUL_MODE_PROT16 && (ctxt->modrm & 0x80))))"];
"1000491" [label="(Call,ctxt->b == 0xc4)"];
"1000327" [label="(Call,ctxt->b)"];
"1000369" [label="(JumpTarget,case 0xf2:)"];
"1000281" [label="(JumpTarget,case 0x66:)"];
"1000334" [label="(JumpTarget,case 0x65:)"];
"1000939" [label="(Call,decode_operand(ctxt, &ctxt->src, (ctxt->d >> SrcShift) & OpMask))"];
"1000484" [label="(Call,(ctxt->b == 0xc5 || ctxt->b == 0xc4) &&\n\t    (mode == X86EMUL_MODE_PROT64 ||\n\t    (mode >= X86EMUL_MODE_PROT16 && (ctxt->modrm & 0x80))))"];
"1000272" [label="(ControlStructure,switch (ctxt->b = insn_fetch(u8, ctxt)))"];
"1000449" [label="(Identifier,ctxt)"];
"1000314" [label="(JumpTarget,case 0x26:)"];
"1000315" [label="(JumpTarget,case 0x2e:)"];
"1000330" [label="(Literal,3)"];
"1000443" [label="(Call,ctxt->b = insn_fetch(u8, ctxt))"];
"1000316" [label="(JumpTarget,case 0x36:)"];
"1000417" [label="(Call,ctxt->b = insn_fetch(u8, ctxt))"];
"1000273" [label="(Call,ctxt->b = insn_fetch(u8, ctxt))"];
"1000436" [label="(Literal,0x38)"];
"1000405" [label="(ControlStructure,if (ctxt->b == 0x0f))"];
"1000325" [label="(Call,(ctxt->b >> 3) & 3)"];
"1000346" [label="(Literal,7)"];
"1000447" [label="(Call,insn_fetch(u8, ctxt))"];
"1000491" [label="(Call,ctxt->b == 0xc4)"];
"1000422" [label="(Identifier,u8)"];
"1000223" [label="(Literal,1)"];
"1000440" [label="(Identifier,ctxt)"];
"1000478" [label="(Call,ctxt->opcode_len == 1 && (ctxt->b == 0xc5 || ctxt->b == 0xc4) &&\n\t    (mode == X86EMUL_MODE_PROT64 ||\n\t    (mode >= X86EMUL_MODE_PROT16 && (ctxt->modrm & 0x80))))"];
"1000317" [label="(JumpTarget,case 0x3e:)"];
"1000421" [label="(Call,insn_fetch(u8, ctxt))"];
"1000411" [label="(Block,)"];
"1000219" [label="(Call,rc = __do_insn_fetch_bytes(ctxt, 1))"];
"1000959" [label="(Call,decode_operand(ctxt, &ctxt->src2, (ctxt->d >> Src2Shift) & OpMask))"];
"1000370" [label="(JumpTarget,case 0xf3:)"];
"1000512" [label="(Identifier,ctxt)"];
"1000493" [label="(Identifier,ctxt)"];
"1000331" [label="(Literal,3)"];
"1000406" [label="(Call,ctxt->b == 0x0f)"];
"1000496" [label="(Call,mode == X86EMUL_MODE_PROT64 ||\n\t    (mode >= X86EMUL_MODE_PROT16 && (ctxt->modrm & 0x80)))"];
"1000222" [label="(Identifier,ctxt)"];
"1001017" [label="(MethodReturn,int)"];
"1000274" [label="(Call,ctxt->b)"];
"1000221" [label="(Call,__do_insn_fetch_bytes(ctxt, 1))"];
"1000485" [label="(Call,ctxt->b == 0xc5 || ctxt->b == 0xc4)"];
"1000498" [label="(Identifier,mode)"];
"1000425" [label="(Identifier,opcode)"];
"1000407" [label="(Call,ctxt->b)"];
"1000495" [label="(Literal,0xc4)"];
"1000342" [label="(Call,ctxt->b & 7)"];
"1000486" [label="(Call,ctxt->b == 0xc5)"];
"1000371" [label="(Call,ctxt->rep_prefix = ctxt->b)"];
"1000431" [label="(ControlStructure,if (ctxt->b == 0x38))"];
"1000448" [label="(Identifier,u8)"];
"1000326" [label="(Call,ctxt->b >> 3)"];
"1000905" [label="(Call,decode_abs(ctxt, &ctxt->memop))"];
"1000414" [label="(Identifier,ctxt)"];
"1000423" [label="(Identifier,ctxt)"];
"1000433" [label="(Call,ctxt->b)"];
"1000479" [label="(Call,ctxt->opcode_len == 1)"];
"1000333" [label="(JumpTarget,case 0x64:)"];
"1000437" [label="(Block,)"];
"1000444" [label="(Call,ctxt->b)"];
"1000487" [label="(Call,ctxt->b)"];
"1000410" [label="(Literal,0x0f)"];
"1000278" [label="(Identifier,u8)"];
"1000474" [label="(Call,insn_fetch(u8, ctxt))"];
"1000277" [label="(Call,insn_fetch(u8, ctxt))"];
"1000279" [label="(Identifier,ctxt)"];
"1000130" [label="(MethodParameterIn,struct x86_emulate_ctxt *ctxt)"];
"1000432" [label="(Call,ctxt->b == 0x38)"];
"1000459" [label="(Identifier,ctxt)"];
"1000338" [label="(Call,ctxt->seg_override = ctxt->b & 7)"];
"1000343" [label="(Call,ctxt->b)"];
"1000490" [label="(Literal,0xc5)"];
"1000876" [label="(Call,decode_modrm(ctxt, &ctxt->memop))"];
"1000979" [label="(Call,decode_operand(ctxt, &ctxt->dst, (ctxt->d >> DstShift) & OpMask))"];
"1000451" [label="(Identifier,opcode)"];
"1000477" [label="(ControlStructure,if (ctxt->opcode_len == 1 && (ctxt->b == 0xc5 || ctxt->b == 0xc4) &&\n\t    (mode == X86EMUL_MODE_PROT64 ||\n\t    (mode >= X86EMUL_MODE_PROT16 && (ctxt->modrm & 0x80)))))"];
"1000492" [label="(Call,ctxt->b)"];
"1000379" [label="(JumpTarget,default:)"];
"1000418" [label="(Call,ctxt->b)"];
"1000362" [label="(JumpTarget,case 0xf0:)"];
"1000293" [label="(JumpTarget,case 0x67:)"];
"1000518" [label="(Identifier,ctxt)"];
"1000486" -> "1000485"  [label="AST: "];
"1000486" -> "1000490"  [label="CFG: "];
"1000487" -> "1000486"  [label="AST: "];
"1000490" -> "1000486"  [label="AST: "];
"1000493" -> "1000486"  [label="CFG: "];
"1000485" -> "1000486"  [label="CFG: "];
"1000486" -> "1001017"  [label="DDG: ctxt->b"];
"1000486" -> "1000485"  [label="DDG: ctxt->b"];
"1000486" -> "1000485"  [label="DDG: 0xc5"];
"1000406" -> "1000486"  [label="DDG: ctxt->b"];
"1000432" -> "1000486"  [label="DDG: ctxt->b"];
"1000443" -> "1000486"  [label="DDG: ctxt->b"];
"1000486" -> "1000491"  [label="DDG: ctxt->b"];
"1000406" -> "1000405"  [label="AST: "];
"1000406" -> "1000410"  [label="CFG: "];
"1000407" -> "1000406"  [label="AST: "];
"1000410" -> "1000406"  [label="AST: "];
"1000414" -> "1000406"  [label="CFG: "];
"1000459" -> "1000406"  [label="CFG: "];
"1000406" -> "1001017"  [label="DDG: ctxt->b"];
"1000406" -> "1001017"  [label="DDG: ctxt->b == 0x0f"];
"1000342" -> "1000406"  [label="DDG: ctxt->b"];
"1000273" -> "1000406"  [label="DDG: ctxt->b"];
"1000326" -> "1000406"  [label="DDG: ctxt->b"];
"1000342" -> "1000338"  [label="AST: "];
"1000342" -> "1000346"  [label="CFG: "];
"1000343" -> "1000342"  [label="AST: "];
"1000346" -> "1000342"  [label="AST: "];
"1000338" -> "1000342"  [label="CFG: "];
"1000342" -> "1000338"  [label="DDG: ctxt->b"];
"1000342" -> "1000338"  [label="DDG: 7"];
"1000273" -> "1000342"  [label="DDG: ctxt->b"];
"1000273" -> "1000272"  [label="AST: "];
"1000273" -> "1000277"  [label="CFG: "];
"1000274" -> "1000273"  [label="AST: "];
"1000277" -> "1000273"  [label="AST: "];
"1000281" -> "1000273"  [label="CFG: "];
"1000293" -> "1000273"  [label="CFG: "];
"1000314" -> "1000273"  [label="CFG: "];
"1000315" -> "1000273"  [label="CFG: "];
"1000316" -> "1000273"  [label="CFG: "];
"1000317" -> "1000273"  [label="CFG: "];
"1000333" -> "1000273"  [label="CFG: "];
"1000334" -> "1000273"  [label="CFG: "];
"1000362" -> "1000273"  [label="CFG: "];
"1000369" -> "1000273"  [label="CFG: "];
"1000370" -> "1000273"  [label="CFG: "];
"1000379" -> "1000273"  [label="CFG: "];
"1000273" -> "1001017"  [label="DDG: insn_fetch(u8, ctxt)"];
"1000277" -> "1000273"  [label="DDG: u8"];
"1000277" -> "1000273"  [label="DDG: ctxt"];
"1000273" -> "1000326"  [label="DDG: ctxt->b"];
"1000273" -> "1000371"  [label="DDG: ctxt->b"];
"1000277" -> "1000279"  [label="CFG: "];
"1000278" -> "1000277"  [label="AST: "];
"1000279" -> "1000277"  [label="AST: "];
"1000277" -> "1001017"  [label="DDG: u8"];
"1000277" -> "1001017"  [label="DDG: ctxt"];
"1000221" -> "1000277"  [label="DDG: ctxt"];
"1000130" -> "1000277"  [label="DDG: ctxt"];
"1000277" -> "1000421"  [label="DDG: u8"];
"1000277" -> "1000421"  [label="DDG: ctxt"];
"1000277" -> "1000474"  [label="DDG: u8"];
"1000277" -> "1000474"  [label="DDG: ctxt"];
"1000277" -> "1000876"  [label="DDG: ctxt"];
"1000277" -> "1000905"  [label="DDG: ctxt"];
"1000277" -> "1000939"  [label="DDG: ctxt"];
"1000221" -> "1000219"  [label="AST: "];
"1000221" -> "1000223"  [label="CFG: "];
"1000222" -> "1000221"  [label="AST: "];
"1000223" -> "1000221"  [label="AST: "];
"1000219" -> "1000221"  [label="CFG: "];
"1000221" -> "1001017"  [label="DDG: ctxt"];
"1000221" -> "1000219"  [label="DDG: ctxt"];
"1000221" -> "1000219"  [label="DDG: 1"];
"1000130" -> "1000221"  [label="DDG: ctxt"];
"1000130" -> "1000129"  [label="AST: "];
"1000130" -> "1001017"  [label="DDG: ctxt"];
"1000130" -> "1000421"  [label="DDG: ctxt"];
"1000130" -> "1000447"  [label="DDG: ctxt"];
"1000130" -> "1000474"  [label="DDG: ctxt"];
"1000130" -> "1000876"  [label="DDG: ctxt"];
"1000130" -> "1000905"  [label="DDG: ctxt"];
"1000130" -> "1000939"  [label="DDG: ctxt"];
"1000130" -> "1000959"  [label="DDG: ctxt"];
"1000130" -> "1000979"  [label="DDG: ctxt"];
"1000326" -> "1000325"  [label="AST: "];
"1000326" -> "1000330"  [label="CFG: "];
"1000327" -> "1000326"  [label="AST: "];
"1000330" -> "1000326"  [label="AST: "];
"1000331" -> "1000326"  [label="CFG: "];
"1000326" -> "1000325"  [label="DDG: ctxt->b"];
"1000326" -> "1000325"  [label="DDG: 3"];
"1000432" -> "1000431"  [label="AST: "];
"1000432" -> "1000436"  [label="CFG: "];
"1000433" -> "1000432"  [label="AST: "];
"1000436" -> "1000432"  [label="AST: "];
"1000440" -> "1000432"  [label="CFG: "];
"1000459" -> "1000432"  [label="CFG: "];
"1000432" -> "1001017"  [label="DDG: ctxt->b == 0x38"];
"1000432" -> "1001017"  [label="DDG: ctxt->b"];
"1000417" -> "1000432"  [label="DDG: ctxt->b"];
"1000417" -> "1000411"  [label="AST: "];
"1000417" -> "1000421"  [label="CFG: "];
"1000418" -> "1000417"  [label="AST: "];
"1000421" -> "1000417"  [label="AST: "];
"1000425" -> "1000417"  [label="CFG: "];
"1000417" -> "1001017"  [label="DDG: insn_fetch(u8, ctxt)"];
"1000421" -> "1000417"  [label="DDG: u8"];
"1000421" -> "1000417"  [label="DDG: ctxt"];
"1000421" -> "1000423"  [label="CFG: "];
"1000422" -> "1000421"  [label="AST: "];
"1000423" -> "1000421"  [label="AST: "];
"1000421" -> "1001017"  [label="DDG: ctxt"];
"1000421" -> "1001017"  [label="DDG: u8"];
"1000421" -> "1000447"  [label="DDG: u8"];
"1000421" -> "1000447"  [label="DDG: ctxt"];
"1000421" -> "1000474"  [label="DDG: u8"];
"1000421" -> "1000474"  [label="DDG: ctxt"];
"1000421" -> "1000876"  [label="DDG: ctxt"];
"1000421" -> "1000905"  [label="DDG: ctxt"];
"1000421" -> "1000939"  [label="DDG: ctxt"];
"1000443" -> "1000437"  [label="AST: "];
"1000443" -> "1000447"  [label="CFG: "];
"1000444" -> "1000443"  [label="AST: "];
"1000447" -> "1000443"  [label="AST: "];
"1000451" -> "1000443"  [label="CFG: "];
"1000443" -> "1001017"  [label="DDG: insn_fetch(u8, ctxt)"];
"1000443" -> "1001017"  [label="DDG: ctxt->b"];
"1000447" -> "1000443"  [label="DDG: u8"];
"1000447" -> "1000443"  [label="DDG: ctxt"];
"1000447" -> "1000449"  [label="CFG: "];
"1000448" -> "1000447"  [label="AST: "];
"1000449" -> "1000447"  [label="AST: "];
"1000447" -> "1001017"  [label="DDG: ctxt"];
"1000447" -> "1001017"  [label="DDG: u8"];
"1000447" -> "1000474"  [label="DDG: u8"];
"1000447" -> "1000474"  [label="DDG: ctxt"];
"1000447" -> "1000876"  [label="DDG: ctxt"];
"1000447" -> "1000905"  [label="DDG: ctxt"];
"1000447" -> "1000939"  [label="DDG: ctxt"];
"1000485" -> "1000484"  [label="AST: "];
"1000485" -> "1000491"  [label="CFG: "];
"1000491" -> "1000485"  [label="AST: "];
"1000498" -> "1000485"  [label="CFG: "];
"1000484" -> "1000485"  [label="CFG: "];
"1000485" -> "1001017"  [label="DDG: ctxt->b == 0xc5"];
"1000485" -> "1001017"  [label="DDG: ctxt->b == 0xc4"];
"1000485" -> "1000484"  [label="DDG: ctxt->b == 0xc5"];
"1000485" -> "1000484"  [label="DDG: ctxt->b == 0xc4"];
"1000491" -> "1000485"  [label="DDG: ctxt->b"];
"1000491" -> "1000485"  [label="DDG: 0xc4"];
"1000484" -> "1000478"  [label="AST: "];
"1000484" -> "1000496"  [label="CFG: "];
"1000496" -> "1000484"  [label="AST: "];
"1000478" -> "1000484"  [label="CFG: "];
"1000484" -> "1001017"  [label="DDG: mode == X86EMUL_MODE_PROT64 ||\n\t    (mode >= X86EMUL_MODE_PROT16 && (ctxt->modrm & 0x80))"];
"1000484" -> "1001017"  [label="DDG: ctxt->b == 0xc5 || ctxt->b == 0xc4"];
"1000484" -> "1000478"  [label="DDG: ctxt->b == 0xc5 || ctxt->b == 0xc4"];
"1000484" -> "1000478"  [label="DDG: mode == X86EMUL_MODE_PROT64 ||\n\t    (mode >= X86EMUL_MODE_PROT16 && (ctxt->modrm & 0x80))"];
"1000496" -> "1000484"  [label="DDG: mode == X86EMUL_MODE_PROT64"];
"1000496" -> "1000484"  [label="DDG: mode >= X86EMUL_MODE_PROT16 && (ctxt->modrm & 0x80)"];
"1000478" -> "1000477"  [label="AST: "];
"1000478" -> "1000479"  [label="CFG: "];
"1000479" -> "1000478"  [label="AST: "];
"1000512" -> "1000478"  [label="CFG: "];
"1000518" -> "1000478"  [label="CFG: "];
"1000478" -> "1001017"  [label="DDG: ctxt->opcode_len == 1"];
"1000478" -> "1001017"  [label="DDG: ctxt->opcode_len == 1 && (ctxt->b == 0xc5 || ctxt->b == 0xc4) &&\n\t    (mode == X86EMUL_MODE_PROT64 ||\n\t    (mode >= X86EMUL_MODE_PROT16 && (ctxt->modrm & 0x80)))"];
"1000478" -> "1001017"  [label="DDG: (ctxt->b == 0xc5 || ctxt->b == 0xc4) &&\n\t    (mode == X86EMUL_MODE_PROT64 ||\n\t    (mode >= X86EMUL_MODE_PROT16 && (ctxt->modrm & 0x80)))"];
"1000479" -> "1000478"  [label="DDG: ctxt->opcode_len"];
"1000479" -> "1000478"  [label="DDG: 1"];
"1000491" -> "1000495"  [label="CFG: "];
"1000492" -> "1000491"  [label="AST: "];
"1000495" -> "1000491"  [label="AST: "];
"1000491" -> "1001017"  [label="DDG: ctxt->b"];
}
