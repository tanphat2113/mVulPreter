digraph "0_libevt_444ca3ce7853538c577e0ec3f6146d2d65780734@pointer" {
"1000326" [label="(Call,byte_stream_copy_to_uint32_little_endian(\n\t &( record_data[ record_data_size - 4 ] ),\n\t size_copy ))"];
"1000142" [label="(Call,size_copy         = 0)"];
"1001121" [label="(Call,size_copy == 0)"];
"1001321" [label="(Call,libcnotify_printf(\n\t\t \"%s: size copy\t\t\t\t: %\" PRIu32 \"\n\",\n\t\t function,\n\t\t size_copy ))"];
"1001332" [label="(Call,size_copy == 0)"];
"1001328" [label="(Call,( strict_mode == 0 )\n\t && ( size_copy == 0 ))"];
"1001340" [label="(Call,size != size_copy)"];
"1001354" [label="(Call,(size_t) size)"];
"1001352" [label="(Call,record_data_size != (size_t) size)"];
"1001344" [label="(Call,libcerror_error_set(\n\t\t error,\n\t\t LIBCERROR_ERROR_DOMAIN_INPUT,\n\t\t LIBCERROR_INPUT_ERROR_VALUE_MISMATCH,\n\t\t \"%s: value mismatch for size and size copy.\",\n\t\t function ))"];
"1001358" [label="(Call,libcerror_error_set(\n\t\t error,\n\t\t LIBCERROR_ERROR_DOMAIN_INPUT,\n\t\t LIBCERROR_INPUT_ERROR_VALUE_MISMATCH,\n\t\t \"%s: value mismatch for record_values data size and size.\",\n\t\t function ))"];
"1001341" [label="(Identifier,size)"];
"1001349" [label="(Identifier,function)"];
"1001353" [label="(Identifier,record_data_size)"];
"1001093" [label="(Call,record_data_size - 4)"];
"1001267" [label="(Call,libfvalue_value_set_data(\n\t\t     record_values->data,\n\t\t     &( record_data[ record_data_offset ] ),\n\t\t     (size_t) data_size,\n\t\t     LIBFVALUE_ENDIAN_LITTLE,\n\t\t     LIBFVALUE_VALUE_DATA_FLAG_MANAGED,\n\t\t     error ))"];
"1000976" [label="(Call,libcnotify_printf(\n\t\t\t\t \"%s: members trailing data:\n\",\n\t\t\t\t function ))"];
"1000230" [label="(Call,byte_stream_copy_to_uint32_little_endian(\n\t ( (evt_record_event_header_t *) record_data )->size,\n\t size ))"];
"1001122" [label="(Identifier,size_copy)"];
"1001324" [label="(Identifier,size_copy)"];
"1001357" [label="(Block,)"];
"1000339" [label="(Call,libcnotify_printf(\n\t\t \"%s: size\t\t\t\t\t: %\" PRIu32 \"\n\",\n\t\t function,\n\t\t size ))"];
"1000147" [label="(Identifier,strings_offset)"];
"1001301" [label="(Call,record_data_size - 4)"];
"1001121" [label="(Call,size_copy == 0)"];
"1001352" [label="(Call,record_data_size != (size_t) size)"];
"1000108" [label="(Block,)"];
"1001328" [label="(Call,( strict_mode == 0 )\n\t && ( size_copy == 0 ))"];
"1001235" [label="(Call,libcnotify_printf(\n \t\t\t \"%s: data:\n\",\n \t\t\t function ))"];
"1001366" [label="(Literal,1)"];
"1001334" [label="(Literal,0)"];
"1001314" [label="(Call,(size_t) record_data_size)"];
"1000559" [label="(Call,libcnotify_printf(\n\t\t \"%s: data offset\t\t\t\t: %\" PRIu32 \"\n\",\n\t\t function,\n\t\t data_offset ))"];
"1000794" [label="(Call,libcnotify_printf(\n\t\t\t \"%s: members data:\n\",\n\t\t\t function ))"];
"1001354" [label="(Call,(size_t) size)"];
"1001110" [label="(Call,libcnotify_printf(\n\t\t\t \"%s: strings data:\n\",\n\t\t\t function ))"];
"1000773" [label="(Call,record_data_size - 4)"];
"1001030" [label="(Call,libfvalue_value_set_data(\n\t\t     record_values->user_security_identifier,\n\t\t     &( record_data[ user_sid_offset ] ),\n\t\t     (size_t) user_sid_size,\n\t\t     LIBFVALUE_ENDIAN_LITTLE,\n\t\t     LIBFVALUE_VALUE_DATA_FLAG_MANAGED,\n\t\t     error ))"];
"1001167" [label="(Identifier,record_values)"];
"1001363" [label="(Identifier,function)"];
"1000905" [label="(Call,libfvalue_value_type_set_data_string(\n\t\t                   record_values->computer_name,\n\t\t                   &( record_data[ record_data_offset ] ),\n\t\t                   members_data_size,\n\t\t                   LIBFVALUE_CODEPAGE_UTF16_LITTLE_ENDIAN,\n\t\t                   LIBFVALUE_VALUE_DATA_FLAG_MANAGED,\n\t\t                   error ))"];
"1000998" [label="(Call,record_data_size - 4)"];
"1001356" [label="(Identifier,size)"];
"1001343" [label="(Block,)"];
"1001351" [label="(ControlStructure,if( record_data_size != (size_t) size ))"];
"1001358" [label="(Call,libcerror_error_set(\n\t\t error,\n\t\t LIBCERROR_ERROR_DOMAIN_INPUT,\n\t\t LIBCERROR_INPUT_ERROR_VALUE_MISMATCH,\n\t\t \"%s: value mismatch for record_values data size and size.\",\n\t\t function ))"];
"1001326" [label="(Literal,\"\n\")"];
"1000854" [label="(Call,libcnotify_printf(\n\t\t\t \"%s: source name\t\t\t\t: \",\n\t\t\t function ))"];
"1001305" [label="(Call,libcnotify_printf(\n\t\t\t \"%s: padding:\n\",\n\t\t\t function ))"];
"1000695" [label="(Call,record_data_size - 4)"];
"1000143" [label="(Identifier,size_copy)"];
"1001063" [label="(Call,libfvalue_value_print(\n\t\t\t     record_values->user_security_identifier,\n\t\t\t     0,\n\t\t\t     0,\n\t\t\t     error ))"];
"1001332" [label="(Call,size_copy == 0)"];
"1001345" [label="(Identifier,error)"];
"1000408" [label="(Call,libevt_debug_print_posix_time_value(\n\t\t     function,\n\t\t     \"written time\t\t\t\t\",\n\t\t     ( (evt_record_event_header_t *) record_data )->written_time,\n\t\t     4,\n\t\t     LIBFDATETIME_ENDIAN_LITTLE,\n\t\t     LIBFDATETIME_POSIX_TIME_VALUE_TYPE_SECONDS_32BIT_SIGNED,\n\t\t     LIBFDATETIME_STRING_FORMAT_TYPE_CTIME | LIBFDATETIME_STRING_FORMAT_FLAG_DATE_TIME,\n\t\t     error ))"];
"1001347" [label="(Identifier,LIBCERROR_INPUT_ERROR_VALUE_MISMATCH)"];
"1001182" [label="(Call,libfvalue_value_type_set_data_strings_array(\n\t\t                   record_values->strings,\n\t\t                   &( record_data[ strings_offset ] ),\n\t\t                   strings_size,\n\t\t                   LIBFVALUE_CODEPAGE_UTF16_LITTLE_ENDIAN,\n\t\t                   error ))"];
"1001336" [label="(Call,size_copy = size)"];
"1000326" [label="(Call,byte_stream_copy_to_uint32_little_endian(\n\t &( record_data[ record_data_size - 4 ] ),\n\t size_copy ))"];
"1001327" [label="(ControlStructure,if( ( strict_mode == 0 )\n\t && ( size_copy == 0 ) ))"];
"1000142" [label="(Call,size_copy         = 0)"];
"1001360" [label="(Identifier,LIBCERROR_ERROR_DOMAIN_INPUT)"];
"1000327" [label="(Call,&( record_data[ record_data_size - 4 ] ))"];
"1000110" [label="(Call,*function      = \"libevt_record_values_read_event\")"];
"1001436" [label="(MethodReturn,int)"];
"1001344" [label="(Call,libcerror_error_set(\n\t\t error,\n\t\t LIBCERROR_ERROR_DOMAIN_INPUT,\n\t\t LIBCERROR_INPUT_ERROR_VALUE_MISMATCH,\n\t\t \"%s: value mismatch for size and size copy.\",\n\t\t function ))"];
"1000940" [label="(Call,libfvalue_value_print(\n\t\t\t     record_values->computer_name,\n\t\t\t     0,\n\t\t\t     0,\n\t\t\t     error ))"];
"1000336" [label="(Identifier,libcnotify_verbose)"];
"1001126" [label="(Identifier,strings_data_offset)"];
"1001322" [label="(Literal,\"%s: size copy\t\t\t\t: %\" PRIu32 \"\n\")"];
"1001346" [label="(Identifier,LIBCERROR_ERROR_DOMAIN_INPUT)"];
"1001364" [label="(ControlStructure,goto on_error;)"];
"1001340" [label="(Call,size != size_copy)"];
"1001123" [label="(Literal,0)"];
"1001337" [label="(Identifier,size_copy)"];
"1000333" [label="(Identifier,size_copy)"];
"1001058" [label="(Call,libcnotify_printf(\n\t\t\t \"%s: user security identifier (SID)\t\t: \",\n\t\t\t function ))"];
"1000107" [label="(MethodParameterIn,libcerror_error_t **error)"];
"1001348" [label="(Literal,\"%s: value mismatch for size and size copy.\")"];
"1001339" [label="(ControlStructure,if( size != size_copy ))"];
"1001359" [label="(Identifier,error)"];
"1000144" [label="(Literal,0)"];
"1001218" [label="(Call,record_data_size - 4)"];
"1001297" [label="(Block,)"];
"1000935" [label="(Call,libcnotify_printf(\n\t\t\t \"%s: computer name\t\t\t\t: \",\n\t\t\t function ))"];
"1001323" [label="(Identifier,function)"];
"1001321" [label="(Call,libcnotify_printf(\n\t\t \"%s: size copy\t\t\t\t: %\" PRIu32 \"\n\",\n\t\t function,\n\t\t size_copy ))"];
"1001329" [label="(Call,strict_mode == 0)"];
"1001333" [label="(Identifier,size_copy)"];
"1001350" [label="(ControlStructure,goto on_error;)"];
"1001120" [label="(ControlStructure,if( size_copy == 0 ))"];
"1000105" [label="(MethodParameterIn,size_t record_data_size)"];
"1001342" [label="(Identifier,size_copy)"];
"1001361" [label="(Identifier,LIBCERROR_INPUT_ERROR_VALUE_MISMATCH)"];
"1001362" [label="(Literal,\"%s: value mismatch for record_values data size and size.\")"];
"1000326" -> "1000108"  [label="AST: "];
"1000326" -> "1000333"  [label="CFG: "];
"1000327" -> "1000326"  [label="AST: "];
"1000333" -> "1000326"  [label="AST: "];
"1000336" -> "1000326"  [label="CFG: "];
"1000326" -> "1001436"  [label="DDG: "];
"1000326" -> "1001436"  [label="DDG: "];
"1000326" -> "1001436"  [label="DDG: "];
"1000142" -> "1000326"  [label="DDG: "];
"1000326" -> "1001121"  [label="DDG: "];
"1000326" -> "1001321"  [label="DDG: "];
"1000326" -> "1001332"  [label="DDG: "];
"1000326" -> "1001340"  [label="DDG: "];
"1000142" -> "1000108"  [label="AST: "];
"1000142" -> "1000144"  [label="CFG: "];
"1000143" -> "1000142"  [label="AST: "];
"1000144" -> "1000142"  [label="AST: "];
"1000147" -> "1000142"  [label="CFG: "];
"1000142" -> "1001436"  [label="DDG: "];
"1001121" -> "1001120"  [label="AST: "];
"1001121" -> "1001123"  [label="CFG: "];
"1001122" -> "1001121"  [label="AST: "];
"1001123" -> "1001121"  [label="AST: "];
"1001126" -> "1001121"  [label="CFG: "];
"1001167" -> "1001121"  [label="CFG: "];
"1001121" -> "1001436"  [label="DDG: "];
"1001121" -> "1001436"  [label="DDG: "];
"1001121" -> "1001321"  [label="DDG: "];
"1001121" -> "1001328"  [label="DDG: "];
"1001121" -> "1001332"  [label="DDG: "];
"1001121" -> "1001340"  [label="DDG: "];
"1001321" -> "1001297"  [label="AST: "];
"1001321" -> "1001324"  [label="CFG: "];
"1001322" -> "1001321"  [label="AST: "];
"1001323" -> "1001321"  [label="AST: "];
"1001324" -> "1001321"  [label="AST: "];
"1001326" -> "1001321"  [label="CFG: "];
"1001321" -> "1001436"  [label="DDG: "];
"1001321" -> "1001436"  [label="DDG: "];
"1000935" -> "1001321"  [label="DDG: "];
"1000794" -> "1001321"  [label="DDG: "];
"1001235" -> "1001321"  [label="DDG: "];
"1001305" -> "1001321"  [label="DDG: "];
"1001058" -> "1001321"  [label="DDG: "];
"1000110" -> "1001321"  [label="DDG: "];
"1000559" -> "1001321"  [label="DDG: "];
"1001110" -> "1001321"  [label="DDG: "];
"1000854" -> "1001321"  [label="DDG: "];
"1000976" -> "1001321"  [label="DDG: "];
"1001321" -> "1001332"  [label="DDG: "];
"1001321" -> "1001340"  [label="DDG: "];
"1001321" -> "1001344"  [label="DDG: "];
"1001321" -> "1001358"  [label="DDG: "];
"1001332" -> "1001328"  [label="AST: "];
"1001332" -> "1001334"  [label="CFG: "];
"1001333" -> "1001332"  [label="AST: "];
"1001334" -> "1001332"  [label="AST: "];
"1001328" -> "1001332"  [label="CFG: "];
"1001332" -> "1001328"  [label="DDG: "];
"1001332" -> "1001328"  [label="DDG: "];
"1001332" -> "1001340"  [label="DDG: "];
"1001328" -> "1001327"  [label="AST: "];
"1001328" -> "1001329"  [label="CFG: "];
"1001329" -> "1001328"  [label="AST: "];
"1001337" -> "1001328"  [label="CFG: "];
"1001341" -> "1001328"  [label="CFG: "];
"1001328" -> "1001436"  [label="DDG: "];
"1001328" -> "1001436"  [label="DDG: "];
"1001328" -> "1001436"  [label="DDG: "];
"1001329" -> "1001328"  [label="DDG: "];
"1001329" -> "1001328"  [label="DDG: "];
"1001340" -> "1001339"  [label="AST: "];
"1001340" -> "1001342"  [label="CFG: "];
"1001341" -> "1001340"  [label="AST: "];
"1001342" -> "1001340"  [label="AST: "];
"1001345" -> "1001340"  [label="CFG: "];
"1001353" -> "1001340"  [label="CFG: "];
"1001340" -> "1001436"  [label="DDG: "];
"1001340" -> "1001436"  [label="DDG: "];
"1001340" -> "1001436"  [label="DDG: "];
"1000230" -> "1001340"  [label="DDG: "];
"1000339" -> "1001340"  [label="DDG: "];
"1001336" -> "1001340"  [label="DDG: "];
"1001340" -> "1001354"  [label="DDG: "];
"1001354" -> "1001352"  [label="AST: "];
"1001354" -> "1001356"  [label="CFG: "];
"1001355" -> "1001354"  [label="AST: "];
"1001356" -> "1001354"  [label="AST: "];
"1001352" -> "1001354"  [label="CFG: "];
"1001354" -> "1001436"  [label="DDG: "];
"1001354" -> "1001352"  [label="DDG: "];
"1001352" -> "1001351"  [label="AST: "];
"1001353" -> "1001352"  [label="AST: "];
"1001359" -> "1001352"  [label="CFG: "];
"1001366" -> "1001352"  [label="CFG: "];
"1001352" -> "1001436"  [label="DDG: "];
"1001352" -> "1001436"  [label="DDG: "];
"1001352" -> "1001436"  [label="DDG: "];
"1000695" -> "1001352"  [label="DDG: "];
"1001314" -> "1001352"  [label="DDG: "];
"1001301" -> "1001352"  [label="DDG: "];
"1001093" -> "1001352"  [label="DDG: "];
"1001218" -> "1001352"  [label="DDG: "];
"1000773" -> "1001352"  [label="DDG: "];
"1000998" -> "1001352"  [label="DDG: "];
"1000105" -> "1001352"  [label="DDG: "];
"1001344" -> "1001343"  [label="AST: "];
"1001344" -> "1001349"  [label="CFG: "];
"1001345" -> "1001344"  [label="AST: "];
"1001346" -> "1001344"  [label="AST: "];
"1001347" -> "1001344"  [label="AST: "];
"1001348" -> "1001344"  [label="AST: "];
"1001349" -> "1001344"  [label="AST: "];
"1001350" -> "1001344"  [label="CFG: "];
"1001344" -> "1001436"  [label="DDG: "];
"1001344" -> "1001436"  [label="DDG: "];
"1001344" -> "1001436"  [label="DDG: "];
"1001344" -> "1001436"  [label="DDG: "];
"1001344" -> "1001436"  [label="DDG: "];
"1001182" -> "1001344"  [label="DDG: "];
"1001267" -> "1001344"  [label="DDG: "];
"1000940" -> "1001344"  [label="DDG: "];
"1000905" -> "1001344"  [label="DDG: "];
"1000408" -> "1001344"  [label="DDG: "];
"1001030" -> "1001344"  [label="DDG: "];
"1001063" -> "1001344"  [label="DDG: "];
"1000107" -> "1001344"  [label="DDG: "];
"1000935" -> "1001344"  [label="DDG: "];
"1000794" -> "1001344"  [label="DDG: "];
"1001235" -> "1001344"  [label="DDG: "];
"1001058" -> "1001344"  [label="DDG: "];
"1000110" -> "1001344"  [label="DDG: "];
"1000559" -> "1001344"  [label="DDG: "];
"1001110" -> "1001344"  [label="DDG: "];
"1000854" -> "1001344"  [label="DDG: "];
"1000976" -> "1001344"  [label="DDG: "];
"1001358" -> "1001357"  [label="AST: "];
"1001358" -> "1001363"  [label="CFG: "];
"1001359" -> "1001358"  [label="AST: "];
"1001360" -> "1001358"  [label="AST: "];
"1001361" -> "1001358"  [label="AST: "];
"1001362" -> "1001358"  [label="AST: "];
"1001363" -> "1001358"  [label="AST: "];
"1001364" -> "1001358"  [label="CFG: "];
"1001358" -> "1001436"  [label="DDG: "];
"1001358" -> "1001436"  [label="DDG: "];
"1001358" -> "1001436"  [label="DDG: "];
"1001358" -> "1001436"  [label="DDG: "];
"1001358" -> "1001436"  [label="DDG: "];
"1001182" -> "1001358"  [label="DDG: "];
"1001267" -> "1001358"  [label="DDG: "];
"1000940" -> "1001358"  [label="DDG: "];
"1000905" -> "1001358"  [label="DDG: "];
"1000408" -> "1001358"  [label="DDG: "];
"1001030" -> "1001358"  [label="DDG: "];
"1001063" -> "1001358"  [label="DDG: "];
"1000107" -> "1001358"  [label="DDG: "];
"1000935" -> "1001358"  [label="DDG: "];
"1000794" -> "1001358"  [label="DDG: "];
"1001235" -> "1001358"  [label="DDG: "];
"1001058" -> "1001358"  [label="DDG: "];
"1000110" -> "1001358"  [label="DDG: "];
"1000559" -> "1001358"  [label="DDG: "];
"1001110" -> "1001358"  [label="DDG: "];
"1000854" -> "1001358"  [label="DDG: "];
"1000976" -> "1001358"  [label="DDG: "];
}
