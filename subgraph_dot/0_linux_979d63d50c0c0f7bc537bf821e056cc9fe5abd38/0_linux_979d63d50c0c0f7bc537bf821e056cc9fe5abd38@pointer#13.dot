digraph "0_linux_979d63d50c0c0f7bc537bf821e056cc9fe5abd38@pointer" {
"1000289" [label="(Call,verbose(env, \"R%d pointer arithmetic on %s prohibited\n\",\n\t\t\tdst, reg_type_str[ptr_reg->type]))"];
"1000120" [label="(MethodParameterIn,struct bpf_verifier_env *env)"];
"1000204" [label="(Call,dst = insn->dst_reg)"];
"1000292" [label="(Identifier,dst)"];
"1000385" [label="(Call,verbose(env, \"R%d tried to add from different maps or paths\n\", dst))"];
"1000319" [label="(Call,verbose(env, \"R%d has unknown scalar with mixed signed bounds, pointer arithmetic with it prohibited for !root\n\",\n\t\t\t\toff_reg == dst_reg ? dst : src))"];
"1000273" [label="(Call,verbose(env, \"R%d pointer arithmetic on %s prohibited, null-check it first\n\",\n\t\t\tdst, reg_type_str[ptr_reg->type]))"];
"1000291" [label="(Literal,\"R%d pointer arithmetic on %s prohibited\n\")"];
"1000372" [label="(Call,sanitize_ptr_alu(env, insn, ptr_reg, dst_reg, smin_val < 0))"];
"1000206" [label="(Call,insn->dst_reg)"];
"1000205" [label="(Identifier,dst)"];
"1000204" [label="(Call,dst = insn->dst_reg)"];
"1000120" [label="(MethodParameterIn,struct bpf_verifier_env *env)"];
"1000574" [label="(Call,sanitize_ptr_alu(env, insn, ptr_reg, dst_reg, smin_val < 0))"];
"1000884" [label="(Call,check_stack_access(env, dst_reg, dst_reg->off +\n\t\t\t\t\t      dst_reg->var_off.value, 1))"];
"1000898" [label="(Call,verbose(env, \"R%d stack pointer arithmetic goes out of range, \"\n\t\t\t\t\"prohibited for !root\n\", dst))"];
"1000271" [label="(Block,)"];
"1000290" [label="(Identifier,env)"];
"1000289" [label="(Call,verbose(env, \"R%d pointer arithmetic on %s prohibited\n\",\n\t\t\tdst, reg_type_str[ptr_reg->type]))"];
"1000211" [label="(Identifier,src)"];
"1000124" [label="(Block,)"];
"1000300" [label="(Identifier,EACCES)"];
"1000907" [label="(MethodReturn,static int)"];
"1000860" [label="(Call,check_map_access(env, dst, dst_reg->off, 1, false))"];
"1000293" [label="(Call,reg_type_str[ptr_reg->type])"];
"1000805" [label="(Call,verbose(env, \"R%d bitwise operator %s on pointer prohibited\n\",\n\t\t\tdst, bpf_alu_string[opcode >> 4]))"];
"1000322" [label="(Call,off_reg == dst_reg ? dst : src)"];
"1000587" [label="(Call,verbose(env, \"R%d tried to sub from different maps or paths\n\", dst))"];
"1000869" [label="(Call,verbose(env, \"R%d pointer arithmetic of map value goes out of range, \"\n\t\t\t\t\"prohibited for !root\n\", dst))"];
"1000350" [label="(Call,check_reg_sane_offset(env, off_reg, ptr_reg->type))"];
"1000818" [label="(Call,verbose(env, \"R%d pointer arithmetic with %s operator prohibited\n\",\n\t\t\tdst, bpf_alu_string[opcode >> 4]))"];
"1000598" [label="(Call,verbose(env, \"R%d tried to subtract pointer from scalar\n\",\n\t\t\t\tdst))"];
"1000260" [label="(Call,verbose(env,\n\t\t\t\"R%d 32-bit pointer arithmetic prohibited\n\",\n\t\t\tdst))"];
"1000357" [label="(Call,check_reg_sane_offset(env, ptr_reg, ptr_reg->type))"];
"1000832" [label="(Call,check_reg_sane_offset(env, dst_reg, ptr_reg->type))"];
"1000612" [label="(Call,verbose(env, \"R%d subtraction from stack pointer prohibited\n\",\n\t\t\t\tdst))"];
"1000289" -> "1000271"  [label="AST: "];
"1000289" -> "1000293"  [label="CFG: "];
"1000290" -> "1000289"  [label="AST: "];
"1000291" -> "1000289"  [label="AST: "];
"1000292" -> "1000289"  [label="AST: "];
"1000293" -> "1000289"  [label="AST: "];
"1000300" -> "1000289"  [label="CFG: "];
"1000289" -> "1000907"  [label="DDG: "];
"1000289" -> "1000907"  [label="DDG: "];
"1000289" -> "1000907"  [label="DDG: "];
"1000289" -> "1000907"  [label="DDG: "];
"1000120" -> "1000289"  [label="DDG: "];
"1000204" -> "1000289"  [label="DDG: "];
"1000120" -> "1000119"  [label="AST: "];
"1000120" -> "1000907"  [label="DDG: "];
"1000120" -> "1000260"  [label="DDG: "];
"1000120" -> "1000273"  [label="DDG: "];
"1000120" -> "1000319"  [label="DDG: "];
"1000120" -> "1000350"  [label="DDG: "];
"1000120" -> "1000357"  [label="DDG: "];
"1000120" -> "1000372"  [label="DDG: "];
"1000120" -> "1000385"  [label="DDG: "];
"1000120" -> "1000574"  [label="DDG: "];
"1000120" -> "1000587"  [label="DDG: "];
"1000120" -> "1000598"  [label="DDG: "];
"1000120" -> "1000612"  [label="DDG: "];
"1000120" -> "1000805"  [label="DDG: "];
"1000120" -> "1000818"  [label="DDG: "];
"1000120" -> "1000832"  [label="DDG: "];
"1000120" -> "1000860"  [label="DDG: "];
"1000120" -> "1000869"  [label="DDG: "];
"1000120" -> "1000884"  [label="DDG: "];
"1000120" -> "1000898"  [label="DDG: "];
"1000204" -> "1000124"  [label="AST: "];
"1000204" -> "1000206"  [label="CFG: "];
"1000205" -> "1000204"  [label="AST: "];
"1000206" -> "1000204"  [label="AST: "];
"1000211" -> "1000204"  [label="CFG: "];
"1000204" -> "1000907"  [label="DDG: "];
"1000204" -> "1000907"  [label="DDG: "];
"1000204" -> "1000260"  [label="DDG: "];
"1000204" -> "1000273"  [label="DDG: "];
"1000204" -> "1000319"  [label="DDG: "];
"1000204" -> "1000322"  [label="DDG: "];
"1000204" -> "1000385"  [label="DDG: "];
"1000204" -> "1000587"  [label="DDG: "];
"1000204" -> "1000598"  [label="DDG: "];
"1000204" -> "1000612"  [label="DDG: "];
"1000204" -> "1000805"  [label="DDG: "];
"1000204" -> "1000818"  [label="DDG: "];
"1000204" -> "1000860"  [label="DDG: "];
"1000204" -> "1000869"  [label="DDG: "];
"1000204" -> "1000898"  [label="DDG: "];
}
