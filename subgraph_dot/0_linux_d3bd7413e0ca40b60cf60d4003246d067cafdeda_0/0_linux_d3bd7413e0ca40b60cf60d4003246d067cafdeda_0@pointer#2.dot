digraph "0_linux_d3bd7413e0ca40b60cf60d4003246d067cafdeda_0@pointer" {
"1000123" [label="(Call,ptr_reg == dst_reg)"];
"1000105" [label="(MethodParameterIn,const struct bpf_reg_state *ptr_reg)"];
"1000106" [label="(MethodParameterIn,struct bpf_reg_state *dst_reg)"];
"1000121" [label="(Call,ptr_is_dst_reg = ptr_reg == dst_reg)"];
"1000179" [label="(Call,!ptr_is_dst_reg)"];
"1000205" [label="(Call,!ptr_is_dst_reg)"];
"1000161" [label="(Call,retrieve_ptr_limit(ptr_reg, &alu_limit, opcode, off_is_neg))"];
"1000125" [label="(Identifier,dst_reg)"];
"1000218" [label="(MethodReturn,static int)"];
"1000128" [label="(Identifier,opcode)"];
"1000192" [label="(Identifier,ret)"];
"1000179" [label="(Call,!ptr_is_dst_reg)"];
"1000171" [label="(Identifier,aux)"];
"1000127" [label="(Call,opcode = BPF_OP(insn->code))"];
"1000121" [label="(Call,ptr_is_dst_reg = ptr_reg == dst_reg)"];
"1000183" [label="(Identifier,tmp)"];
"1000122" [label="(Identifier,ptr_is_dst_reg)"];
"1000204" [label="(ControlStructure,if (!ptr_is_dst_reg))"];
"1000168" [label="(Literal,0)"];
"1000124" [label="(Identifier,ptr_reg)"];
"1000163" [label="(Call,&alu_limit)"];
"1000160" [label="(ControlStructure,if (retrieve_ptr_limit(ptr_reg, &alu_limit, opcode, off_is_neg)))"];
"1000165" [label="(Identifier,opcode)"];
"1000105" [label="(MethodParameterIn,const struct bpf_reg_state *ptr_reg)"];
"1000166" [label="(Identifier,off_is_neg)"];
"1000162" [label="(Identifier,ptr_reg)"];
"1000209" [label="(Identifier,dst_reg)"];
"1000178" [label="(ControlStructure,if (!ptr_is_dst_reg))"];
"1000107" [label="(MethodParameterIn,bool off_is_neg)"];
"1000214" [label="(Identifier,ret)"];
"1000206" [label="(Identifier,ptr_is_dst_reg)"];
"1000108" [label="(Block,)"];
"1000205" [label="(Call,!ptr_is_dst_reg)"];
"1000123" [label="(Call,ptr_reg == dst_reg)"];
"1000180" [label="(Identifier,ptr_is_dst_reg)"];
"1000161" [label="(Call,retrieve_ptr_limit(ptr_reg, &alu_limit, opcode, off_is_neg))"];
"1000106" [label="(MethodParameterIn,struct bpf_reg_state *dst_reg)"];
"1000123" -> "1000121"  [label="AST: "];
"1000123" -> "1000125"  [label="CFG: "];
"1000124" -> "1000123"  [label="AST: "];
"1000125" -> "1000123"  [label="AST: "];
"1000121" -> "1000123"  [label="CFG: "];
"1000123" -> "1000218"  [label="DDG: dst_reg"];
"1000123" -> "1000218"  [label="DDG: ptr_reg"];
"1000123" -> "1000121"  [label="DDG: ptr_reg"];
"1000123" -> "1000121"  [label="DDG: dst_reg"];
"1000105" -> "1000123"  [label="DDG: ptr_reg"];
"1000106" -> "1000123"  [label="DDG: dst_reg"];
"1000123" -> "1000161"  [label="DDG: ptr_reg"];
"1000105" -> "1000102"  [label="AST: "];
"1000105" -> "1000218"  [label="DDG: ptr_reg"];
"1000105" -> "1000161"  [label="DDG: ptr_reg"];
"1000106" -> "1000102"  [label="AST: "];
"1000106" -> "1000218"  [label="DDG: dst_reg"];
"1000121" -> "1000108"  [label="AST: "];
"1000122" -> "1000121"  [label="AST: "];
"1000128" -> "1000121"  [label="CFG: "];
"1000121" -> "1000218"  [label="DDG: ptr_reg == dst_reg"];
"1000121" -> "1000218"  [label="DDG: ptr_is_dst_reg"];
"1000121" -> "1000179"  [label="DDG: ptr_is_dst_reg"];
"1000179" -> "1000178"  [label="AST: "];
"1000179" -> "1000180"  [label="CFG: "];
"1000180" -> "1000179"  [label="AST: "];
"1000183" -> "1000179"  [label="CFG: "];
"1000192" -> "1000179"  [label="CFG: "];
"1000179" -> "1000205"  [label="DDG: ptr_is_dst_reg"];
"1000205" -> "1000204"  [label="AST: "];
"1000205" -> "1000206"  [label="CFG: "];
"1000206" -> "1000205"  [label="AST: "];
"1000209" -> "1000205"  [label="CFG: "];
"1000214" -> "1000205"  [label="CFG: "];
"1000205" -> "1000218"  [label="DDG: !ptr_is_dst_reg"];
"1000205" -> "1000218"  [label="DDG: ptr_is_dst_reg"];
"1000161" -> "1000160"  [label="AST: "];
"1000161" -> "1000166"  [label="CFG: "];
"1000162" -> "1000161"  [label="AST: "];
"1000163" -> "1000161"  [label="AST: "];
"1000165" -> "1000161"  [label="AST: "];
"1000166" -> "1000161"  [label="AST: "];
"1000168" -> "1000161"  [label="CFG: "];
"1000171" -> "1000161"  [label="CFG: "];
"1000161" -> "1000218"  [label="DDG: off_is_neg"];
"1000161" -> "1000218"  [label="DDG: &alu_limit"];
"1000161" -> "1000218"  [label="DDG: ptr_reg"];
"1000161" -> "1000218"  [label="DDG: retrieve_ptr_limit(ptr_reg, &alu_limit, opcode, off_is_neg)"];
"1000161" -> "1000218"  [label="DDG: opcode"];
"1000127" -> "1000161"  [label="DDG: opcode"];
"1000107" -> "1000161"  [label="DDG: off_is_neg"];
}
