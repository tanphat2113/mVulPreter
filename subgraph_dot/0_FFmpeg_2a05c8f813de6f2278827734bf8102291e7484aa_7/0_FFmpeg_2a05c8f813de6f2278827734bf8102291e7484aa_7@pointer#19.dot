digraph "0_FFmpeg_2a05c8f813de6f2278827734bf8102291e7484aa_7@pointer" {
"1000453" [label="(Call,parse_content_range(h, p))"];
"1000102" [label="(MethodParameterIn,URLContext *h)"];
"1000397" [label="(Call,p++)"];
"1000381" [label="(Call,p++)"];
"1000145" [label="(Call,p = line)"];
"1000132" [label="(Call,line[0] == '\0')"];
"1000103" [label="(MethodParameterIn,char *line)"];
"1000403" [label="(Call,p++)"];
"1000465" [label="(Call,strncmp(p, \"bytes\", 5))"];
"1000381" [label="(Call,p++)"];
"1000609" [label="(Call,av_strdup(p))"];
"1000404" [label="(Identifier,p)"];
"1000344" [label="(Call,strtol(p, &end, 10))"];
"1000555" [label="(Call,strcmp(p, \"close\"))"];
"1000554" [label="(Call,!strcmp(p, \"close\"))"];
"1000452" [label="(Block,)"];
"1000315" [label="(Call,av_log(h, AV_LOG_TRACE, \"HTTP version string: %s\n\", version))"];
"1000140" [label="(Identifier,s)"];
"1000103" [label="(MethodParameterIn,char *line)"];
"1000539" [label="(Call,ff_http_auth_handle_header(&s->proxy_auth_state, tag, p))"];
"1000173" [label="(Call,p++)"];
"1000375" [label="(Identifier,p)"];
"1000261" [label="(Call,av_log(h, AV_LOG_TRACE, \"Requested resource: %s\n\", resource))"];
"1000136" [label="(Literal,'\0')"];
"1000332" [label="(Call,p++)"];
"1000176" [label="(Call,av_log(h, AV_LOG_TRACE, \"Received method: %s\n\", method))"];
"1000572" [label="(Call,av_strcasecmp(p, \"AkamaiGHost\"))"];
"1000619" [label="(Call,parse_cookie(s, p, &s->cookie_dict))"];
"1000150" [label="(Identifier,line_count)"];
"1000370" [label="(Block,)"];
"1000397" [label="(Call,p++)"];
"1000349" [label="(Call,av_log(h, AV_LOG_TRACE, \"http_code=%d\n\", s->http_code))"];
"1000525" [label="(Call,ff_http_auth_handle_header(&s->auth_state, tag, p))"];
"1000658" [label="(Call,parse_icy(s, tag, p))"];
"1000147" [label="(Identifier,line)"];
"1000106" [label="(Block,)"];
"1000169" [label="(Call,p++)"];
"1000415" [label="(Call,parse_location(s, p))"];
"1000511" [label="(Call,ff_http_auth_handle_header(&s->auth_state, tag, p))"];
"1000382" [label="(Identifier,p)"];
"1000131" [label="(ControlStructure,if (line[0] == '\0'))"];
"1000133" [label="(Call,line[0])"];
"1000442" [label="(Call,strtoull(p, NULL, 10))"];
"1000626" [label="(Call,av_log(h, AV_LOG_WARNING, \"Unable to parse '%s'\n\", p))"];
"1000394" [label="(Call,tag = line)"];
"1000683" [label="(Literal,1)"];
"1000145" [label="(Call,p = line)"];
"1000371" [label="(ControlStructure,while (*p != '\0' && *p != ':'))"];
"1000193" [label="(Call,av_log(h, AV_LOG_ERROR, \"Received and expected HTTP method do not match. (%s expected, %s received)\n\",\n                           s->method, method))"];
"1000642" [label="(Call,strtoull(p, NULL, 10))"];
"1000398" [label="(Identifier,p)"];
"1000489" [label="(Call,av_strncasecmp(p, \"chunked\", 7))"];
"1000102" [label="(MethodParameterIn,URLContext *h)"];
"1000132" [label="(Call,line[0] == '\0')"];
"1000158" [label="(Call,method = p)"];
"1000306" [label="(Call,av_log(h, AV_LOG_ERROR, \"Malformed HTTP version string.\n\"))"];
"1000360" [label="(Call,check_http_code(h, s->http_code, end))"];
"1000453" [label="(Call,parse_content_range(h, p))"];
"1000403" [label="(Call,p++)"];
"1000146" [label="(Identifier,p)"];
"1000684" [label="(MethodReturn,static int)"];
"1000454" [label="(Identifier,h)"];
"1000676" [label="(Call,parse_content_encoding(h, p))"];
"1000338" [label="(Call,p++)"];
"1000455" [label="(Identifier,p)"];
"1000208" [label="(Call,av_log(h, AV_LOG_TRACE, \"Autodetected %s HTTP method\n\", auto_method))"];
"1000218" [label="(Call,av_log(h, AV_LOG_ERROR, \"Received and autodetected HTTP method did not match \"\n                           \"(%s autodetected %s received)\n\", auto_method, method))"];
"1000402" [label="(Identifier,p)"];
"1000399" [label="(ControlStructure,while (av_isspace(*p)))"];
"1000453" -> "1000452"  [label="AST: "];
"1000453" -> "1000455"  [label="CFG: "];
"1000454" -> "1000453"  [label="AST: "];
"1000455" -> "1000453"  [label="AST: "];
"1000683" -> "1000453"  [label="CFG: "];
"1000453" -> "1000684"  [label="DDG: p"];
"1000453" -> "1000684"  [label="DDG: parse_content_range(h, p)"];
"1000453" -> "1000684"  [label="DDG: h"];
"1000102" -> "1000453"  [label="DDG: h"];
"1000397" -> "1000453"  [label="DDG: p"];
"1000403" -> "1000453"  [label="DDG: p"];
"1000102" -> "1000101"  [label="AST: "];
"1000102" -> "1000684"  [label="DDG: h"];
"1000102" -> "1000176"  [label="DDG: h"];
"1000102" -> "1000193"  [label="DDG: h"];
"1000102" -> "1000208"  [label="DDG: h"];
"1000102" -> "1000218"  [label="DDG: h"];
"1000102" -> "1000261"  [label="DDG: h"];
"1000102" -> "1000306"  [label="DDG: h"];
"1000102" -> "1000315"  [label="DDG: h"];
"1000102" -> "1000349"  [label="DDG: h"];
"1000102" -> "1000360"  [label="DDG: h"];
"1000102" -> "1000626"  [label="DDG: h"];
"1000102" -> "1000676"  [label="DDG: h"];
"1000397" -> "1000370"  [label="AST: "];
"1000397" -> "1000398"  [label="CFG: "];
"1000398" -> "1000397"  [label="AST: "];
"1000402" -> "1000397"  [label="CFG: "];
"1000397" -> "1000684"  [label="DDG: p"];
"1000381" -> "1000397"  [label="DDG: p"];
"1000145" -> "1000397"  [label="DDG: p"];
"1000397" -> "1000403"  [label="DDG: p"];
"1000397" -> "1000415"  [label="DDG: p"];
"1000397" -> "1000442"  [label="DDG: p"];
"1000397" -> "1000465"  [label="DDG: p"];
"1000397" -> "1000489"  [label="DDG: p"];
"1000397" -> "1000511"  [label="DDG: p"];
"1000397" -> "1000525"  [label="DDG: p"];
"1000397" -> "1000539"  [label="DDG: p"];
"1000397" -> "1000554"  [label="DDG: p"];
"1000397" -> "1000555"  [label="DDG: p"];
"1000397" -> "1000572"  [label="DDG: p"];
"1000397" -> "1000609"  [label="DDG: p"];
"1000397" -> "1000619"  [label="DDG: p"];
"1000397" -> "1000642"  [label="DDG: p"];
"1000397" -> "1000658"  [label="DDG: p"];
"1000397" -> "1000676"  [label="DDG: p"];
"1000381" -> "1000371"  [label="AST: "];
"1000381" -> "1000382"  [label="CFG: "];
"1000382" -> "1000381"  [label="AST: "];
"1000375" -> "1000381"  [label="CFG: "];
"1000381" -> "1000684"  [label="DDG: p"];
"1000145" -> "1000381"  [label="DDG: p"];
"1000145" -> "1000106"  [label="AST: "];
"1000145" -> "1000147"  [label="CFG: "];
"1000146" -> "1000145"  [label="AST: "];
"1000147" -> "1000145"  [label="AST: "];
"1000150" -> "1000145"  [label="CFG: "];
"1000145" -> "1000684"  [label="DDG: p"];
"1000145" -> "1000684"  [label="DDG: line"];
"1000132" -> "1000145"  [label="DDG: line[0]"];
"1000103" -> "1000145"  [label="DDG: line"];
"1000145" -> "1000158"  [label="DDG: p"];
"1000145" -> "1000169"  [label="DDG: p"];
"1000145" -> "1000173"  [label="DDG: p"];
"1000145" -> "1000332"  [label="DDG: p"];
"1000145" -> "1000338"  [label="DDG: p"];
"1000145" -> "1000344"  [label="DDG: p"];
"1000132" -> "1000131"  [label="AST: "];
"1000132" -> "1000136"  [label="CFG: "];
"1000133" -> "1000132"  [label="AST: "];
"1000136" -> "1000132"  [label="AST: "];
"1000140" -> "1000132"  [label="CFG: "];
"1000146" -> "1000132"  [label="CFG: "];
"1000132" -> "1000684"  [label="DDG: line[0] == '\0'"];
"1000132" -> "1000684"  [label="DDG: line[0]"];
"1000103" -> "1000132"  [label="DDG: line"];
"1000132" -> "1000394"  [label="DDG: line[0]"];
"1000103" -> "1000101"  [label="AST: "];
"1000103" -> "1000684"  [label="DDG: line"];
"1000103" -> "1000394"  [label="DDG: line"];
"1000403" -> "1000399"  [label="AST: "];
"1000403" -> "1000404"  [label="CFG: "];
"1000404" -> "1000403"  [label="AST: "];
"1000402" -> "1000403"  [label="CFG: "];
"1000403" -> "1000684"  [label="DDG: p"];
"1000403" -> "1000415"  [label="DDG: p"];
"1000403" -> "1000442"  [label="DDG: p"];
"1000403" -> "1000465"  [label="DDG: p"];
"1000403" -> "1000489"  [label="DDG: p"];
"1000403" -> "1000511"  [label="DDG: p"];
"1000403" -> "1000525"  [label="DDG: p"];
"1000403" -> "1000539"  [label="DDG: p"];
"1000403" -> "1000554"  [label="DDG: p"];
"1000403" -> "1000555"  [label="DDG: p"];
"1000403" -> "1000572"  [label="DDG: p"];
"1000403" -> "1000609"  [label="DDG: p"];
"1000403" -> "1000619"  [label="DDG: p"];
"1000403" -> "1000642"  [label="DDG: p"];
"1000403" -> "1000658"  [label="DDG: p"];
"1000403" -> "1000676"  [label="DDG: p"];
}
