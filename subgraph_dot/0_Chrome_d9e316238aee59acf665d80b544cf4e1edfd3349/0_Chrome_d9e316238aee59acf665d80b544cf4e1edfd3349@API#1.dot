digraph "0_Chrome_d9e316238aee59acf665d80b544cf4e1edfd3349@API" {
"1000275" [label="(Call,strlen(filename))"];
"1000105" [label="(MethodParameterIn,const char* filename)"];
"1000273" [label="(Call,target_len = strlen(filename))"];
"1000363" [label="(Call,file_name_length == target_len)"];
"1000362" [label="(Call,file_name_length == target_len &&\n        memcmp(filename_bytes, filename, target_len) == 0)"];
"1000367" [label="(Call,memcmp(filename_bytes, filename, target_len))"];
"1000366" [label="(Call,memcmp(filename_bytes, filename, target_len) == 0)"];
"1000405" [label="(Call,LOG(\"%s: %s is compressed within %s. \"\n            \"Found compression method %u but expected %u\n\", __FUNCTION__,\n            filename, zip_file, compression_method, kCompressionMethodStored))"];
"1000466" [label="(Call,LOG(\"%s: Did not find %s in %s\n\", __FUNCTION__, filename, zip_file))"];
"1000361" [label="(ControlStructure,if (file_name_length == target_len &&\n        memcmp(filename_bytes, filename, target_len) == 0))"];
"1000409" [label="(Identifier,zip_file)"];
"1000275" [label="(Call,strlen(filename))"];
"1000279" [label="(Identifier,n)"];
"1000366" [label="(Call,memcmp(filename_bytes, filename, target_len) == 0)"];
"1000443" [label="(Identifier,off)"];
"1000469" [label="(Identifier,filename)"];
"1000367" [label="(Call,memcmp(filename_bytes, filename, target_len))"];
"1000368" [label="(Identifier,filename_bytes)"];
"1000411" [label="(Identifier,kCompressionMethodStored)"];
"1000406" [label="(Literal,\"%s: %s is compressed within %s. \"\n            \"Found compression method %u but expected %u\n\")"];
"1000354" [label="(Call,* filename_bytes =\n        mem_bytes + off + kOffsetFilenameInCentralDirectory)"];
"1000105" [label="(MethodParameterIn,const char* filename)"];
"1000369" [label="(Identifier,filename)"];
"1000408" [label="(Identifier,filename)"];
"1000410" [label="(Identifier,compression_method)"];
"1000364" [label="(Identifier,file_name_length)"];
"1000472" [label="(Identifier,CRAZY_OFFSET_FAILED)"];
"1000468" [label="(Identifier,__FUNCTION__)"];
"1000363" [label="(Call,file_name_length == target_len)"];
"1000466" [label="(Call,LOG(\"%s: Did not find %s in %s\n\", __FUNCTION__, filename, zip_file))"];
"1000375" [label="(Identifier,marker)"];
"1000370" [label="(Identifier,target_len)"];
"1000407" [label="(Identifier,__FUNCTION__)"];
"1000405" [label="(Call,LOG(\"%s: %s is compressed within %s. \"\n            \"Found compression method %u but expected %u\n\", __FUNCTION__,\n            filename, zip_file, compression_method, kCompressionMethodStored))"];
"1000413" [label="(Identifier,CRAZY_OFFSET_FAILED)"];
"1000273" [label="(Call,target_len = strlen(filename))"];
"1000106" [label="(Block,)"];
"1000473" [label="(MethodReturn,int)"];
"1000371" [label="(Literal,0)"];
"1000362" [label="(Call,file_name_length == target_len &&\n        memcmp(filename_bytes, filename, target_len) == 0)"];
"1000312" [label="(Call,file_name_length =\n        ReadUInt16(mem_bytes, off + kOffsetFilenameLengthInCentralDirectory))"];
"1000450" [label="(Call,LOG(\"%s: Did not find all the expected entries in the central directory. \"\n        \"Found %d but expected %d\n\", __FUNCTION__, n, num_entries))"];
"1000365" [label="(Identifier,target_len)"];
"1000122" [label="(Call,stat(zip_file, &stat_buf))"];
"1000401" [label="(Call,compression_method != kCompressionMethodStored)"];
"1000467" [label="(Literal,\"%s: Did not find %s in %s\n\")"];
"1000470" [label="(Identifier,zip_file)"];
"1000404" [label="(Block,)"];
"1000104" [label="(MethodParameterIn,const char* zip_file)"];
"1000276" [label="(Identifier,filename)"];
"1000274" [label="(Identifier,target_len)"];
"1000460" [label="(Call,LOG(\"%s: There are %d extra bytes at the end of the central directory.\n\",\n        __FUNCTION__, end_of_central_dir - off))"];
"1000275" -> "1000273"  [label="AST: "];
"1000275" -> "1000276"  [label="CFG: "];
"1000276" -> "1000275"  [label="AST: "];
"1000273" -> "1000275"  [label="CFG: "];
"1000275" -> "1000473"  [label="DDG: "];
"1000275" -> "1000273"  [label="DDG: "];
"1000105" -> "1000275"  [label="DDG: "];
"1000275" -> "1000367"  [label="DDG: "];
"1000275" -> "1000405"  [label="DDG: "];
"1000275" -> "1000466"  [label="DDG: "];
"1000105" -> "1000103"  [label="AST: "];
"1000105" -> "1000473"  [label="DDG: "];
"1000105" -> "1000367"  [label="DDG: "];
"1000105" -> "1000405"  [label="DDG: "];
"1000105" -> "1000466"  [label="DDG: "];
"1000273" -> "1000106"  [label="AST: "];
"1000274" -> "1000273"  [label="AST: "];
"1000279" -> "1000273"  [label="CFG: "];
"1000273" -> "1000473"  [label="DDG: "];
"1000273" -> "1000473"  [label="DDG: "];
"1000273" -> "1000363"  [label="DDG: "];
"1000363" -> "1000362"  [label="AST: "];
"1000363" -> "1000365"  [label="CFG: "];
"1000364" -> "1000363"  [label="AST: "];
"1000365" -> "1000363"  [label="AST: "];
"1000368" -> "1000363"  [label="CFG: "];
"1000362" -> "1000363"  [label="CFG: "];
"1000363" -> "1000473"  [label="DDG: "];
"1000363" -> "1000473"  [label="DDG: "];
"1000363" -> "1000362"  [label="DDG: "];
"1000363" -> "1000362"  [label="DDG: "];
"1000312" -> "1000363"  [label="DDG: "];
"1000367" -> "1000363"  [label="DDG: "];
"1000363" -> "1000367"  [label="DDG: "];
"1000362" -> "1000361"  [label="AST: "];
"1000362" -> "1000366"  [label="CFG: "];
"1000366" -> "1000362"  [label="AST: "];
"1000375" -> "1000362"  [label="CFG: "];
"1000443" -> "1000362"  [label="CFG: "];
"1000362" -> "1000473"  [label="DDG: "];
"1000362" -> "1000473"  [label="DDG: "];
"1000362" -> "1000473"  [label="DDG: "];
"1000366" -> "1000362"  [label="DDG: "];
"1000366" -> "1000362"  [label="DDG: "];
"1000367" -> "1000366"  [label="AST: "];
"1000367" -> "1000370"  [label="CFG: "];
"1000368" -> "1000367"  [label="AST: "];
"1000369" -> "1000367"  [label="AST: "];
"1000370" -> "1000367"  [label="AST: "];
"1000371" -> "1000367"  [label="CFG: "];
"1000367" -> "1000473"  [label="DDG: "];
"1000367" -> "1000473"  [label="DDG: "];
"1000367" -> "1000473"  [label="DDG: "];
"1000367" -> "1000366"  [label="DDG: "];
"1000367" -> "1000366"  [label="DDG: "];
"1000367" -> "1000366"  [label="DDG: "];
"1000354" -> "1000367"  [label="DDG: "];
"1000367" -> "1000405"  [label="DDG: "];
"1000367" -> "1000466"  [label="DDG: "];
"1000366" -> "1000371"  [label="CFG: "];
"1000371" -> "1000366"  [label="AST: "];
"1000366" -> "1000473"  [label="DDG: "];
"1000405" -> "1000404"  [label="AST: "];
"1000405" -> "1000411"  [label="CFG: "];
"1000406" -> "1000405"  [label="AST: "];
"1000407" -> "1000405"  [label="AST: "];
"1000408" -> "1000405"  [label="AST: "];
"1000409" -> "1000405"  [label="AST: "];
"1000410" -> "1000405"  [label="AST: "];
"1000411" -> "1000405"  [label="AST: "];
"1000413" -> "1000405"  [label="CFG: "];
"1000405" -> "1000473"  [label="DDG: "];
"1000405" -> "1000473"  [label="DDG: "];
"1000405" -> "1000473"  [label="DDG: "];
"1000405" -> "1000473"  [label="DDG: "];
"1000405" -> "1000473"  [label="DDG: "];
"1000405" -> "1000473"  [label="DDG: "];
"1000122" -> "1000405"  [label="DDG: "];
"1000104" -> "1000405"  [label="DDG: "];
"1000401" -> "1000405"  [label="DDG: "];
"1000401" -> "1000405"  [label="DDG: "];
"1000466" -> "1000106"  [label="AST: "];
"1000466" -> "1000470"  [label="CFG: "];
"1000467" -> "1000466"  [label="AST: "];
"1000468" -> "1000466"  [label="AST: "];
"1000469" -> "1000466"  [label="AST: "];
"1000470" -> "1000466"  [label="AST: "];
"1000472" -> "1000466"  [label="CFG: "];
"1000466" -> "1000473"  [label="DDG: "];
"1000466" -> "1000473"  [label="DDG: "];
"1000466" -> "1000473"  [label="DDG: "];
"1000466" -> "1000473"  [label="DDG: "];
"1000450" -> "1000466"  [label="DDG: "];
"1000460" -> "1000466"  [label="DDG: "];
"1000122" -> "1000466"  [label="DDG: "];
"1000104" -> "1000466"  [label="DDG: "];
}
