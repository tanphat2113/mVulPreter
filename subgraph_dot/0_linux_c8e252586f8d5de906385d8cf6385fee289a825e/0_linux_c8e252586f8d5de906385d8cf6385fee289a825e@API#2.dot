digraph "0_linux_c8e252586f8d5de906385d8cf6385fee289a825e@API" {
"1000264" [label="(Call,kfree(data))"];
"1000252" [label="(Call,regset->get(t->task, regset,\n\t\t\t\t\t  0, size, data, NULL))"];
"1000202" [label="(Call,do_thread_regset_writeback(t->task, regset))"];
"1000171" [label="(Call,do_thread_regset_writeback(t->task, &view->regsets[0]))"];
"1000120" [label="(Call,view->regsets[0].get(t->task, &view->regsets[0],\n\t\t\t\t    0, sizeof(t->prstatus.pr_reg),\n\t\t\t\t    &t->prstatus.pr_reg, NULL))"];
"1000109" [label="(Call,fill_prstatus(&t->prstatus, t->task, signr))"];
"1000105" [label="(MethodParameterIn,long signr)"];
"1000221" [label="(Call,regset->active(t->task, regset))"];
"1000194" [label="(Call,*regset = &view->regsets[i])"];
"1000241" [label="(Call,kmalloc(size, GFP_KERNEL))"];
"1000229" [label="(Call,size = regset->n * regset->size)"];
"1000231" [label="(Call,regset->n * regset->size)"];
"1000246" [label="(Call,!data)"];
"1000239" [label="(Call,*data = kmalloc(size, GFP_KERNEL))"];
"1000222" [label="(Call,t->task)"];
"1000264" [label="(Call,kfree(data))"];
"1000231" [label="(Call,regset->n * regset->size)"];
"1000105" [label="(MethodParameterIn,long signr)"];
"1000194" [label="(Call,*regset = &view->regsets[i])"];
"1000242" [label="(Identifier,size)"];
"1000259" [label="(Identifier,data)"];
"1000171" [label="(Call,do_thread_regset_writeback(t->task, &view->regsets[0]))"];
"1000226" [label="(Block,)"];
"1000245" [label="(Call,unlikely(!data))"];
"1000232" [label="(Call,regset->n)"];
"1000124" [label="(Call,&view->regsets[0])"];
"1000143" [label="(Identifier,NULL)"];
"1000229" [label="(Call,size = regset->n * regset->size)"];
"1000256" [label="(Identifier,regset)"];
"1000241" [label="(Call,kmalloc(size, GFP_KERNEL))"];
"1000191" [label="(Identifier,i)"];
"1000235" [label="(Call,regset->size)"];
"1000319" [label="(MethodReturn,static int)"];
"1000183" [label="(Identifier,i)"];
"1000246" [label="(Call,!data)"];
"1000257" [label="(Literal,0)"];
"1000243" [label="(Identifier,GFP_KERNEL)"];
"1000120" [label="(Call,view->regsets[0].get(t->task, &view->regsets[0],\n\t\t\t\t    0, sizeof(t->prstatus.pr_reg),\n\t\t\t\t    &t->prstatus.pr_reg, NULL))"];
"1000265" [label="(Identifier,data)"];
"1000258" [label="(Identifier,size)"];
"1000240" [label="(Identifier,data)"];
"1000253" [label="(Call,t->task)"];
"1000239" [label="(Call,*data = kmalloc(size, GFP_KERNEL))"];
"1000221" [label="(Call,regset->active(t->task, regset))"];
"1000121" [label="(Call,t->task)"];
"1000110" [label="(Call,&t->prstatus)"];
"1000192" [label="(Block,)"];
"1000196" [label="(Call,&view->regsets[i])"];
"1000131" [label="(Call,sizeof(t->prstatus.pr_reg))"];
"1000247" [label="(Identifier,data)"];
"1000117" [label="(Identifier,signr)"];
"1000296" [label="(Call,fill_note(&t->notes[i], \"CORE\",\n\t\t\t\t\t\t  NT_PRFPREG, size, data))"];
"1000175" [label="(Call,&view->regsets[0])"];
"1000261" [label="(ControlStructure,if (unlikely(ret)))"];
"1000202" [label="(Call,do_thread_regset_writeback(t->task, regset))"];
"1000260" [label="(Identifier,NULL)"];
"1000250" [label="(Call,ret = regset->get(t->task, regset,\n\t\t\t\t\t  0, size, data, NULL))"];
"1000230" [label="(Identifier,size)"];
"1000210" [label="(Identifier,regset)"];
"1000137" [label="(Call,&t->prstatus.pr_reg)"];
"1000114" [label="(Call,t->task)"];
"1000172" [label="(Call,t->task)"];
"1000274" [label="(Call,fill_note(&t->notes[i], \"LINUX\",\n\t\t\t\t\t\t  regset->core_note_type,\n\t\t\t\t\t\t  size, data))"];
"1000203" [label="(Call,t->task)"];
"1000195" [label="(Identifier,regset)"];
"1000216" [label="(Call,!regset->active || regset->active(t->task, regset))"];
"1000252" [label="(Call,regset->get(t->task, regset,\n\t\t\t\t\t  0, size, data, NULL))"];
"1000225" [label="(Identifier,regset)"];
"1000144" [label="(Call,fill_note(&t->notes[0], \"CORE\", NT_PRSTATUS,\n\t\t  sizeof(t->prstatus), &t->prstatus))"];
"1000118" [label="(Call,(void) view->regsets[0].get(t->task, &view->regsets[0],\n\t\t\t\t    0, sizeof(t->prstatus.pr_reg),\n\t\t\t\t    &t->prstatus.pr_reg, NULL))"];
"1000206" [label="(Identifier,regset)"];
"1000130" [label="(Literal,0)"];
"1000204" [label="(Identifier,t)"];
"1000109" [label="(Call,fill_prstatus(&t->prstatus, t->task, signr))"];
"1000107" [label="(Block,)"];
"1000264" -> "1000261"  [label="AST: "];
"1000264" -> "1000265"  [label="CFG: "];
"1000265" -> "1000264"  [label="AST: "];
"1000191" -> "1000264"  [label="CFG: "];
"1000264" -> "1000319"  [label="DDG: data"];
"1000264" -> "1000319"  [label="DDG: kfree(data)"];
"1000252" -> "1000264"  [label="DDG: data"];
"1000252" -> "1000250"  [label="AST: "];
"1000252" -> "1000260"  [label="CFG: "];
"1000253" -> "1000252"  [label="AST: "];
"1000256" -> "1000252"  [label="AST: "];
"1000257" -> "1000252"  [label="AST: "];
"1000258" -> "1000252"  [label="AST: "];
"1000259" -> "1000252"  [label="AST: "];
"1000260" -> "1000252"  [label="AST: "];
"1000250" -> "1000252"  [label="CFG: "];
"1000252" -> "1000319"  [label="DDG: NULL"];
"1000252" -> "1000319"  [label="DDG: t->task"];
"1000252" -> "1000319"  [label="DDG: size"];
"1000252" -> "1000319"  [label="DDG: regset"];
"1000252" -> "1000202"  [label="DDG: t->task"];
"1000252" -> "1000250"  [label="DDG: t->task"];
"1000252" -> "1000250"  [label="DDG: regset"];
"1000252" -> "1000250"  [label="DDG: data"];
"1000252" -> "1000250"  [label="DDG: NULL"];
"1000252" -> "1000250"  [label="DDG: size"];
"1000252" -> "1000250"  [label="DDG: 0"];
"1000202" -> "1000252"  [label="DDG: t->task"];
"1000202" -> "1000252"  [label="DDG: regset"];
"1000221" -> "1000252"  [label="DDG: t->task"];
"1000221" -> "1000252"  [label="DDG: regset"];
"1000241" -> "1000252"  [label="DDG: size"];
"1000246" -> "1000252"  [label="DDG: data"];
"1000120" -> "1000252"  [label="DDG: NULL"];
"1000252" -> "1000274"  [label="DDG: size"];
"1000252" -> "1000274"  [label="DDG: data"];
"1000252" -> "1000296"  [label="DDG: size"];
"1000252" -> "1000296"  [label="DDG: data"];
"1000202" -> "1000192"  [label="AST: "];
"1000202" -> "1000206"  [label="CFG: "];
"1000203" -> "1000202"  [label="AST: "];
"1000206" -> "1000202"  [label="AST: "];
"1000210" -> "1000202"  [label="CFG: "];
"1000202" -> "1000319"  [label="DDG: regset"];
"1000202" -> "1000319"  [label="DDG: t->task"];
"1000202" -> "1000319"  [label="DDG: do_thread_regset_writeback(t->task, regset)"];
"1000171" -> "1000202"  [label="DDG: t->task"];
"1000221" -> "1000202"  [label="DDG: t->task"];
"1000194" -> "1000202"  [label="DDG: regset"];
"1000202" -> "1000221"  [label="DDG: t->task"];
"1000202" -> "1000221"  [label="DDG: regset"];
"1000171" -> "1000107"  [label="AST: "];
"1000171" -> "1000175"  [label="CFG: "];
"1000172" -> "1000171"  [label="AST: "];
"1000175" -> "1000171"  [label="AST: "];
"1000183" -> "1000171"  [label="CFG: "];
"1000171" -> "1000319"  [label="DDG: t->task"];
"1000171" -> "1000319"  [label="DDG: do_thread_regset_writeback(t->task, &view->regsets[0])"];
"1000171" -> "1000319"  [label="DDG: &view->regsets[0]"];
"1000120" -> "1000171"  [label="DDG: t->task"];
"1000120" -> "1000171"  [label="DDG: &view->regsets[0]"];
"1000171" -> "1000194"  [label="DDG: &view->regsets[0]"];
"1000120" -> "1000118"  [label="AST: "];
"1000120" -> "1000143"  [label="CFG: "];
"1000121" -> "1000120"  [label="AST: "];
"1000124" -> "1000120"  [label="AST: "];
"1000130" -> "1000120"  [label="AST: "];
"1000131" -> "1000120"  [label="AST: "];
"1000137" -> "1000120"  [label="AST: "];
"1000143" -> "1000120"  [label="AST: "];
"1000118" -> "1000120"  [label="CFG: "];
"1000120" -> "1000319"  [label="DDG: NULL"];
"1000120" -> "1000319"  [label="DDG: &t->prstatus.pr_reg"];
"1000120" -> "1000118"  [label="DDG: t->task"];
"1000120" -> "1000118"  [label="DDG: NULL"];
"1000120" -> "1000118"  [label="DDG: 0"];
"1000120" -> "1000118"  [label="DDG: &view->regsets[0]"];
"1000120" -> "1000118"  [label="DDG: &t->prstatus.pr_reg"];
"1000109" -> "1000120"  [label="DDG: t->task"];
"1000109" -> "1000107"  [label="AST: "];
"1000109" -> "1000117"  [label="CFG: "];
"1000110" -> "1000109"  [label="AST: "];
"1000114" -> "1000109"  [label="AST: "];
"1000117" -> "1000109"  [label="AST: "];
"1000119" -> "1000109"  [label="CFG: "];
"1000109" -> "1000319"  [label="DDG: signr"];
"1000109" -> "1000319"  [label="DDG: fill_prstatus(&t->prstatus, t->task, signr)"];
"1000105" -> "1000109"  [label="DDG: signr"];
"1000109" -> "1000144"  [label="DDG: &t->prstatus"];
"1000105" -> "1000102"  [label="AST: "];
"1000105" -> "1000319"  [label="DDG: signr"];
"1000221" -> "1000216"  [label="AST: "];
"1000221" -> "1000225"  [label="CFG: "];
"1000222" -> "1000221"  [label="AST: "];
"1000225" -> "1000221"  [label="AST: "];
"1000216" -> "1000221"  [label="CFG: "];
"1000221" -> "1000319"  [label="DDG: regset"];
"1000221" -> "1000319"  [label="DDG: t->task"];
"1000221" -> "1000216"  [label="DDG: t->task"];
"1000221" -> "1000216"  [label="DDG: regset"];
"1000194" -> "1000192"  [label="AST: "];
"1000194" -> "1000196"  [label="CFG: "];
"1000195" -> "1000194"  [label="AST: "];
"1000196" -> "1000194"  [label="AST: "];
"1000204" -> "1000194"  [label="CFG: "];
"1000194" -> "1000319"  [label="DDG: &view->regsets[i]"];
"1000241" -> "1000239"  [label="AST: "];
"1000241" -> "1000243"  [label="CFG: "];
"1000242" -> "1000241"  [label="AST: "];
"1000243" -> "1000241"  [label="AST: "];
"1000239" -> "1000241"  [label="CFG: "];
"1000241" -> "1000319"  [label="DDG: size"];
"1000241" -> "1000319"  [label="DDG: GFP_KERNEL"];
"1000241" -> "1000239"  [label="DDG: size"];
"1000241" -> "1000239"  [label="DDG: GFP_KERNEL"];
"1000229" -> "1000241"  [label="DDG: size"];
"1000229" -> "1000226"  [label="AST: "];
"1000229" -> "1000231"  [label="CFG: "];
"1000230" -> "1000229"  [label="AST: "];
"1000231" -> "1000229"  [label="AST: "];
"1000240" -> "1000229"  [label="CFG: "];
"1000229" -> "1000319"  [label="DDG: regset->n * regset->size"];
"1000231" -> "1000229"  [label="DDG: regset->n"];
"1000231" -> "1000229"  [label="DDG: regset->size"];
"1000231" -> "1000235"  [label="CFG: "];
"1000232" -> "1000231"  [label="AST: "];
"1000235" -> "1000231"  [label="AST: "];
"1000231" -> "1000319"  [label="DDG: regset->size"];
"1000231" -> "1000319"  [label="DDG: regset->n"];
"1000246" -> "1000245"  [label="AST: "];
"1000246" -> "1000247"  [label="CFG: "];
"1000247" -> "1000246"  [label="AST: "];
"1000245" -> "1000246"  [label="CFG: "];
"1000246" -> "1000319"  [label="DDG: data"];
"1000246" -> "1000245"  [label="DDG: data"];
"1000239" -> "1000246"  [label="DDG: data"];
"1000239" -> "1000226"  [label="AST: "];
"1000240" -> "1000239"  [label="AST: "];
"1000247" -> "1000239"  [label="CFG: "];
"1000239" -> "1000319"  [label="DDG: kmalloc(size, GFP_KERNEL)"];
}
