digraph "0_Chrome_504e0c45030f76bffda93f0857e7595216d6e7a4@API" {
"1000150" [label="(Call,net::registry_controlled_domains::PermissiveGetHostRegistryLength(\n            host, net::registry_controlled_domains::EXCLUDE_UNKNOWN_REGISTRIES,\n            net::registry_controlled_domains::EXCLUDE_PRIVATE_REGISTRIES))"];
"1000141" [label="(Call,host = \"*.\" + host)"];
"1000128" [label="(Call,host = base::UTF16ToUTF8(url_formatter::FormatUrlForSecurityDisplay(\n          GURL(base::StringPrintf(\"%s%s%s\", url::kHttpScheme,\n                                  url::kStandardSchemeSeparator, host.c_str())),\n          url_formatter::SchemeDisplay::OMIT_HTTP_AND_HTTPS)))"];
"1000130" [label="(Call,base::UTF16ToUTF8(url_formatter::FormatUrlForSecurityDisplay(\n          GURL(base::StringPrintf(\"%s%s%s\", url::kHttpScheme,\n                                  url::kStandardSchemeSeparator, host.c_str())),\n          url_formatter::SchemeDisplay::OMIT_HTTP_AND_HTTPS)))"];
"1000131" [label="(Call,url_formatter::FormatUrlForSecurityDisplay(\n          GURL(base::StringPrintf(\"%s%s%s\", url::kHttpScheme,\n                                  url::kStandardSchemeSeparator, host.c_str())),\n          url_formatter::SchemeDisplay::OMIT_HTTP_AND_HTTPS))"];
"1000132" [label="(Call,GURL(base::StringPrintf(\"%s%s%s\", url::kHttpScheme,\n                                  url::kStandardSchemeSeparator, host.c_str())))"];
"1000133" [label="(Call,base::StringPrintf(\"%s%s%s\", url::kHttpScheme,\n                                  url::kStandardSchemeSeparator, host.c_str()))"];
"1000121" [label="(Call,host = pattern.host())"];
"1000148" [label="(Call,reg_len =\n        net::registry_controlled_domains::PermissiveGetHostRegistryLength(\n            host, net::registry_controlled_domains::EXCLUDE_UNKNOWN_REGISTRIES,\n            net::registry_controlled_domains::EXCLUDE_PRIVATE_REGISTRIES))"];
"1000155" [label="(Call,reg_len && reg_len != std::string::npos)"];
"1000166" [label="(Call,host.size() - reg_len)"];
"1000165" [label="(Call,host.substr(host.size() - reg_len))"];
"1000163" [label="(Call,rcd = host.substr(host.size() - reg_len))"];
"1000202" [label="(Call,RcdBetterThan(rcd, it->second))"];
"1000200" [label="(Call,include_rcd && RcdBetterThan(rcd, it->second))"];
"1000207" [label="(Call,it->second = rcd)"];
"1000215" [label="(Call,std::make_pair(host, rcd))"];
"1000214" [label="(Call,hosts_best_rcd.push_back(std::make_pair(host, rcd)))"];
"1000173" [label="(Call,host.size() - reg_len)"];
"1000171" [label="(Call,host.substr(0, host.size() - reg_len))"];
"1000169" [label="(Call,host = host.substr(0, host.size() - reg_len))"];
"1000188" [label="(Call,it->first == host)"];
"1000157" [label="(Call,reg_len != std::string::npos)"];
"1000208" [label="(Call,it->second)"];
"1000200" [label="(Call,include_rcd && RcdBetterThan(rcd, it->second))"];
"1000201" [label="(Identifier,include_rcd)"];
"1000164" [label="(Identifier,rcd)"];
"1000112" [label="(Block,)"];
"1000185" [label="(Identifier,it)"];
"1000126" [label="(Call,host.empty())"];
"1000178" [label="(Identifier,it)"];
"1000131" [label="(Call,url_formatter::FormatUrlForSecurityDisplay(\n          GURL(base::StringPrintf(\"%s%s%s\", url::kHttpScheme,\n                                  url::kStandardSchemeSeparator, host.c_str())),\n          url_formatter::SchemeDisplay::OMIT_HTTP_AND_HTTPS))"];
"1000163" [label="(Call,rcd = host.substr(host.size() - reg_len))"];
"1000171" [label="(Call,host.substr(0, host.size() - reg_len))"];
"1000129" [label="(Identifier,host)"];
"1000127" [label="(Block,)"];
"1000213" [label="(Block,)"];
"1000141" [label="(Call,host = \"*.\" + host)"];
"1000138" [label="(Identifier,url_formatter::SchemeDisplay::OMIT_HTTP_AND_HTTPS)"];
"1000159" [label="(Identifier,std::string::npos)"];
"1000149" [label="(Identifier,reg_len)"];
"1000160" [label="(Block,)"];
"1000188" [label="(Call,it->first == host)"];
"1000142" [label="(Identifier,host)"];
"1000207" [label="(Call,it->second = rcd)"];
"1000155" [label="(Call,reg_len && reg_len != std::string::npos)"];
"1000187" [label="(ControlStructure,if (it->first == host))"];
"1000169" [label="(Call,host = host.substr(0, host.size() - reg_len))"];
"1000204" [label="(Call,it->second)"];
"1000106" [label="(MethodParameterIn,bool include_rcd)"];
"1000134" [label="(Literal,\"%s%s%s\")"];
"1000140" [label="(Call,pattern.match_subdomains())"];
"1000216" [label="(Identifier,host)"];
"1000199" [label="(ControlStructure,if (include_rcd && RcdBetterThan(rcd, it->second)))"];
"1000202" [label="(Call,RcdBetterThan(rcd, it->second))"];
"1000219" [label="(Identifier,std::set)"];
"1000214" [label="(Call,hosts_best_rcd.push_back(std::make_pair(host, rcd)))"];
"1000151" [label="(Identifier,host)"];
"1000130" [label="(Call,base::UTF16ToUTF8(url_formatter::FormatUrlForSecurityDisplay(\n          GURL(base::StringPrintf(\"%s%s%s\", url::kHttpScheme,\n                                  url::kStandardSchemeSeparator, host.c_str())),\n          url_formatter::SchemeDisplay::OMIT_HTTP_AND_HTTPS)))"];
"1000156" [label="(Identifier,reg_len)"];
"1000158" [label="(Identifier,reg_len)"];
"1000150" [label="(Call,net::registry_controlled_domains::PermissiveGetHostRegistryLength(\n            host, net::registry_controlled_domains::EXCLUDE_UNKNOWN_REGISTRIES,\n            net::registry_controlled_domains::EXCLUDE_PRIVATE_REGISTRIES))"];
"1000133" [label="(Call,base::StringPrintf(\"%s%s%s\", url::kHttpScheme,\n                                  url::kStandardSchemeSeparator, host.c_str()))"];
"1000162" [label="(Identifier,include_rcd)"];
"1000166" [label="(Call,host.size() - reg_len)"];
"1000135" [label="(Identifier,url::kHttpScheme)"];
"1000165" [label="(Call,host.substr(host.size() - reg_len))"];
"1000209" [label="(Identifier,it)"];
"1000203" [label="(Identifier,rcd)"];
"1000172" [label="(Literal,0)"];
"1000123" [label="(Call,pattern.host())"];
"1000122" [label="(Identifier,host)"];
"1000154" [label="(ControlStructure,if (reg_len && reg_len != std::string::npos))"];
"1000148" [label="(Call,reg_len =\n        net::registry_controlled_domains::PermissiveGetHostRegistryLength(\n            host, net::registry_controlled_domains::EXCLUDE_UNKNOWN_REGISTRIES,\n            net::registry_controlled_domains::EXCLUDE_PRIVATE_REGISTRIES))"];
"1000167" [label="(Call,host.size())"];
"1000170" [label="(Identifier,host)"];
"1000193" [label="(ControlStructure,break;)"];
"1000152" [label="(Identifier,net::registry_controlled_domains::EXCLUDE_UNKNOWN_REGISTRIES)"];
"1000174" [label="(Call,host.size())"];
"1000215" [label="(Call,std::make_pair(host, rcd))"];
"1000211" [label="(Identifier,rcd)"];
"1000192" [label="(Identifier,host)"];
"1000153" [label="(Identifier,net::registry_controlled_domains::EXCLUDE_PRIVATE_REGISTRIES)"];
"1000234" [label="(MethodReturn,RET)"];
"1000173" [label="(Call,host.size() - reg_len)"];
"1000168" [label="(Identifier,reg_len)"];
"1000157" [label="(Call,reg_len != std::string::npos)"];
"1000139" [label="(ControlStructure,if (pattern.match_subdomains()))"];
"1000121" [label="(Call,host = pattern.host())"];
"1000132" [label="(Call,GURL(base::StringPrintf(\"%s%s%s\", url::kHttpScheme,\n                                  url::kStandardSchemeSeparator, host.c_str())))"];
"1000175" [label="(Identifier,reg_len)"];
"1000137" [label="(Call,host.c_str())"];
"1000217" [label="(Identifier,rcd)"];
"1000189" [label="(Call,it->first)"];
"1000128" [label="(Call,host = base::UTF16ToUTF8(url_formatter::FormatUrlForSecurityDisplay(\n          GURL(base::StringPrintf(\"%s%s%s\", url::kHttpScheme,\n                                  url::kStandardSchemeSeparator, host.c_str())),\n          url_formatter::SchemeDisplay::OMIT_HTTP_AND_HTTPS)))"];
"1000161" [label="(ControlStructure,if (include_rcd))"];
"1000136" [label="(Identifier,url::kStandardSchemeSeparator)"];
"1000143" [label="(Call,\"*.\" + host)"];
"1000150" -> "1000148"  [label="AST: "];
"1000150" -> "1000153"  [label="CFG: "];
"1000151" -> "1000150"  [label="AST: "];
"1000152" -> "1000150"  [label="AST: "];
"1000153" -> "1000150"  [label="AST: "];
"1000148" -> "1000150"  [label="CFG: "];
"1000150" -> "1000234"  [label="DDG: "];
"1000150" -> "1000234"  [label="DDG: "];
"1000150" -> "1000234"  [label="DDG: "];
"1000150" -> "1000148"  [label="DDG: "];
"1000150" -> "1000148"  [label="DDG: "];
"1000150" -> "1000148"  [label="DDG: "];
"1000141" -> "1000150"  [label="DDG: "];
"1000128" -> "1000150"  [label="DDG: "];
"1000121" -> "1000150"  [label="DDG: "];
"1000150" -> "1000188"  [label="DDG: "];
"1000150" -> "1000215"  [label="DDG: "];
"1000141" -> "1000139"  [label="AST: "];
"1000141" -> "1000143"  [label="CFG: "];
"1000142" -> "1000141"  [label="AST: "];
"1000143" -> "1000141"  [label="AST: "];
"1000149" -> "1000141"  [label="CFG: "];
"1000141" -> "1000234"  [label="DDG: "];
"1000128" -> "1000141"  [label="DDG: "];
"1000121" -> "1000141"  [label="DDG: "];
"1000128" -> "1000127"  [label="AST: "];
"1000128" -> "1000130"  [label="CFG: "];
"1000129" -> "1000128"  [label="AST: "];
"1000130" -> "1000128"  [label="AST: "];
"1000140" -> "1000128"  [label="CFG: "];
"1000128" -> "1000234"  [label="DDG: "];
"1000130" -> "1000128"  [label="DDG: "];
"1000128" -> "1000143"  [label="DDG: "];
"1000130" -> "1000131"  [label="CFG: "];
"1000131" -> "1000130"  [label="AST: "];
"1000130" -> "1000234"  [label="DDG: "];
"1000131" -> "1000130"  [label="DDG: "];
"1000131" -> "1000130"  [label="DDG: "];
"1000131" -> "1000138"  [label="CFG: "];
"1000132" -> "1000131"  [label="AST: "];
"1000138" -> "1000131"  [label="AST: "];
"1000131" -> "1000234"  [label="DDG: "];
"1000131" -> "1000234"  [label="DDG: "];
"1000132" -> "1000131"  [label="DDG: "];
"1000132" -> "1000133"  [label="CFG: "];
"1000133" -> "1000132"  [label="AST: "];
"1000138" -> "1000132"  [label="CFG: "];
"1000132" -> "1000234"  [label="DDG: "];
"1000133" -> "1000132"  [label="DDG: "];
"1000133" -> "1000132"  [label="DDG: "];
"1000133" -> "1000132"  [label="DDG: "];
"1000133" -> "1000132"  [label="DDG: "];
"1000133" -> "1000137"  [label="CFG: "];
"1000134" -> "1000133"  [label="AST: "];
"1000135" -> "1000133"  [label="AST: "];
"1000136" -> "1000133"  [label="AST: "];
"1000137" -> "1000133"  [label="AST: "];
"1000133" -> "1000234"  [label="DDG: "];
"1000133" -> "1000234"  [label="DDG: "];
"1000133" -> "1000234"  [label="DDG: "];
"1000121" -> "1000112"  [label="AST: "];
"1000121" -> "1000123"  [label="CFG: "];
"1000122" -> "1000121"  [label="AST: "];
"1000123" -> "1000121"  [label="AST: "];
"1000126" -> "1000121"  [label="CFG: "];
"1000121" -> "1000234"  [label="DDG: "];
"1000121" -> "1000143"  [label="DDG: "];
"1000148" -> "1000112"  [label="AST: "];
"1000149" -> "1000148"  [label="AST: "];
"1000156" -> "1000148"  [label="CFG: "];
"1000148" -> "1000234"  [label="DDG: "];
"1000148" -> "1000155"  [label="DDG: "];
"1000148" -> "1000157"  [label="DDG: "];
"1000155" -> "1000154"  [label="AST: "];
"1000155" -> "1000156"  [label="CFG: "];
"1000155" -> "1000157"  [label="CFG: "];
"1000156" -> "1000155"  [label="AST: "];
"1000157" -> "1000155"  [label="AST: "];
"1000162" -> "1000155"  [label="CFG: "];
"1000178" -> "1000155"  [label="CFG: "];
"1000155" -> "1000234"  [label="DDG: "];
"1000155" -> "1000234"  [label="DDG: "];
"1000155" -> "1000234"  [label="DDG: "];
"1000157" -> "1000155"  [label="DDG: "];
"1000157" -> "1000155"  [label="DDG: "];
"1000155" -> "1000166"  [label="DDG: "];
"1000155" -> "1000173"  [label="DDG: "];
"1000166" -> "1000165"  [label="AST: "];
"1000166" -> "1000168"  [label="CFG: "];
"1000167" -> "1000166"  [label="AST: "];
"1000168" -> "1000166"  [label="AST: "];
"1000165" -> "1000166"  [label="CFG: "];
"1000166" -> "1000165"  [label="DDG: "];
"1000166" -> "1000165"  [label="DDG: "];
"1000166" -> "1000173"  [label="DDG: "];
"1000165" -> "1000163"  [label="AST: "];
"1000163" -> "1000165"  [label="CFG: "];
"1000165" -> "1000163"  [label="DDG: "];
"1000163" -> "1000161"  [label="AST: "];
"1000164" -> "1000163"  [label="AST: "];
"1000170" -> "1000163"  [label="CFG: "];
"1000163" -> "1000234"  [label="DDG: "];
"1000163" -> "1000234"  [label="DDG: "];
"1000163" -> "1000202"  [label="DDG: "];
"1000163" -> "1000207"  [label="DDG: "];
"1000163" -> "1000215"  [label="DDG: "];
"1000202" -> "1000200"  [label="AST: "];
"1000202" -> "1000204"  [label="CFG: "];
"1000203" -> "1000202"  [label="AST: "];
"1000204" -> "1000202"  [label="AST: "];
"1000200" -> "1000202"  [label="CFG: "];
"1000202" -> "1000234"  [label="DDG: "];
"1000202" -> "1000234"  [label="DDG: "];
"1000202" -> "1000200"  [label="DDG: "];
"1000202" -> "1000200"  [label="DDG: "];
"1000202" -> "1000207"  [label="DDG: "];
"1000200" -> "1000199"  [label="AST: "];
"1000200" -> "1000201"  [label="CFG: "];
"1000201" -> "1000200"  [label="AST: "];
"1000209" -> "1000200"  [label="CFG: "];
"1000219" -> "1000200"  [label="CFG: "];
"1000200" -> "1000234"  [label="DDG: "];
"1000200" -> "1000234"  [label="DDG: "];
"1000200" -> "1000234"  [label="DDG: "];
"1000106" -> "1000200"  [label="DDG: "];
"1000207" -> "1000199"  [label="AST: "];
"1000207" -> "1000211"  [label="CFG: "];
"1000208" -> "1000207"  [label="AST: "];
"1000211" -> "1000207"  [label="AST: "];
"1000219" -> "1000207"  [label="CFG: "];
"1000207" -> "1000234"  [label="DDG: "];
"1000207" -> "1000234"  [label="DDG: "];
"1000215" -> "1000214"  [label="AST: "];
"1000215" -> "1000217"  [label="CFG: "];
"1000216" -> "1000215"  [label="AST: "];
"1000217" -> "1000215"  [label="AST: "];
"1000214" -> "1000215"  [label="CFG: "];
"1000215" -> "1000234"  [label="DDG: "];
"1000215" -> "1000234"  [label="DDG: "];
"1000215" -> "1000214"  [label="DDG: "];
"1000215" -> "1000214"  [label="DDG: "];
"1000169" -> "1000215"  [label="DDG: "];
"1000188" -> "1000215"  [label="DDG: "];
"1000214" -> "1000213"  [label="AST: "];
"1000219" -> "1000214"  [label="CFG: "];
"1000214" -> "1000234"  [label="DDG: "];
"1000214" -> "1000234"  [label="DDG: "];
"1000173" -> "1000171"  [label="AST: "];
"1000173" -> "1000175"  [label="CFG: "];
"1000174" -> "1000173"  [label="AST: "];
"1000175" -> "1000173"  [label="AST: "];
"1000171" -> "1000173"  [label="CFG: "];
"1000173" -> "1000234"  [label="DDG: "];
"1000173" -> "1000234"  [label="DDG: "];
"1000173" -> "1000171"  [label="DDG: "];
"1000173" -> "1000171"  [label="DDG: "];
"1000171" -> "1000169"  [label="AST: "];
"1000172" -> "1000171"  [label="AST: "];
"1000169" -> "1000171"  [label="CFG: "];
"1000171" -> "1000234"  [label="DDG: "];
"1000171" -> "1000169"  [label="DDG: "];
"1000171" -> "1000169"  [label="DDG: "];
"1000169" -> "1000160"  [label="AST: "];
"1000170" -> "1000169"  [label="AST: "];
"1000178" -> "1000169"  [label="CFG: "];
"1000169" -> "1000234"  [label="DDG: "];
"1000169" -> "1000234"  [label="DDG: "];
"1000169" -> "1000188"  [label="DDG: "];
"1000188" -> "1000187"  [label="AST: "];
"1000188" -> "1000192"  [label="CFG: "];
"1000189" -> "1000188"  [label="AST: "];
"1000192" -> "1000188"  [label="AST: "];
"1000193" -> "1000188"  [label="CFG: "];
"1000185" -> "1000188"  [label="CFG: "];
"1000188" -> "1000234"  [label="DDG: "];
"1000188" -> "1000234"  [label="DDG: "];
"1000188" -> "1000234"  [label="DDG: "];
"1000157" -> "1000159"  [label="CFG: "];
"1000158" -> "1000157"  [label="AST: "];
"1000159" -> "1000157"  [label="AST: "];
"1000157" -> "1000234"  [label="DDG: "];
}
