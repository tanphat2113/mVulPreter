digraph "0_libpcap_617b12c0339db4891d117b661982126c495439ea@API" {
"1000124" [label="(Call,sendbufidx = 0)"];
"1000612" [label="(Call,sock_send(pars->sockctrl, sendbuf, sendbufidx, errbuf, PCAP_ERRBUF_SIZE))"];
"1000611" [label="(Call,sock_send(pars->sockctrl, sendbuf, sendbufidx, errbuf, PCAP_ERRBUF_SIZE) == -1)"];
"1000623" [label="(Call,rpcapd_log(LOGPRIO_ERROR, \"Send to client failed: %s\", errbuf))"];
"1000623" [label="(Call,rpcapd_log(LOGPRIO_ERROR, \"Send to client failed: %s\", errbuf))"];
"1000629" [label="(Literal,1)"];
"1000621" [label="(Literal,1)"];
"1000584" [label="(Call,sock_bufferize(NULL, sizeof(struct rpcap_sockaddr), NULL,\n\t\t\t\t    &sendbufidx, RPCAP_NETBUF_SIZE, SOCKBUF_CHECKONLY, errmsgbuf, PCAP_ERRBUF_SIZE))"];
"1000126" [label="(Literal,0)"];
"1000124" [label="(Call,sendbufidx = 0)"];
"1000625" [label="(Literal,\"Send to client failed: %s\")"];
"1000617" [label="(Identifier,sendbufidx)"];
"1000129" [label="(Identifier,alldevs)"];
"1000141" [label="(Call,rpcapd_discard(pars->sockctrl, plen))"];
"1000611" [label="(Call,sock_send(pars->sockctrl, sendbuf, sendbufidx, errbuf, PCAP_ERRBUF_SIZE) == -1)"];
"1000619" [label="(Identifier,PCAP_ERRBUF_SIZE)"];
"1000612" [label="(Call,sock_send(pars->sockctrl, sendbuf, sendbufidx, errbuf, PCAP_ERRBUF_SIZE))"];
"1000265" [label="(Call,sock_bufferize(NULL, sizeof(struct rpcap_header), NULL,\n\t    &sendbufidx, RPCAP_NETBUF_SIZE, SOCKBUF_CHECKONLY, errmsgbuf,\n\t    PCAP_ERRBUF_SIZE))"];
"1000125" [label="(Identifier,sendbufidx)"];
"1000119" [label="(Block,)"];
"1000622" [label="(Block,)"];
"1000613" [label="(Call,pars->sockctrl)"];
"1000631" [label="(Literal,0)"];
"1000280" [label="(Call,(struct rpcap_header *) sendbuf)"];
"1000659" [label="(MethodReturn,RET)"];
"1000624" [label="(Identifier,LOGPRIO_ERROR)"];
"1000616" [label="(Identifier,sendbuf)"];
"1000618" [label="(Identifier,errbuf)"];
"1000610" [label="(ControlStructure,if (sock_send(pars->sockctrl, sendbuf, sendbufidx, errbuf, PCAP_ERRBUF_SIZE) == -1))"];
"1000312" [label="(Call,sock_bufferize(NULL, sizeof(struct rpcap_findalldevs_if), NULL,\n\t\t    &sendbufidx, RPCAP_NETBUF_SIZE, SOCKBUF_CHECKONLY, errmsgbuf, PCAP_ERRBUF_SIZE))"];
"1000626" [label="(Identifier,errbuf)"];
"1000441" [label="(Call,sock_bufferize(d->description, ldescr, sendbuf, &sendbufidx,\n\t\t    RPCAP_NETBUF_SIZE, SOCKBUF_BUFFERIZE, errmsgbuf,\n\t\t    PCAP_ERRBUF_SIZE))"];
"1000620" [label="(Call,-1)"];
"1000124" -> "1000119"  [label="AST: "];
"1000124" -> "1000126"  [label="CFG: "];
"1000125" -> "1000124"  [label="AST: "];
"1000126" -> "1000124"  [label="AST: "];
"1000129" -> "1000124"  [label="CFG: "];
"1000124" -> "1000659"  [label="DDG: "];
"1000124" -> "1000612"  [label="DDG: "];
"1000612" -> "1000611"  [label="AST: "];
"1000612" -> "1000619"  [label="CFG: "];
"1000613" -> "1000612"  [label="AST: "];
"1000616" -> "1000612"  [label="AST: "];
"1000617" -> "1000612"  [label="AST: "];
"1000618" -> "1000612"  [label="AST: "];
"1000619" -> "1000612"  [label="AST: "];
"1000621" -> "1000612"  [label="CFG: "];
"1000612" -> "1000659"  [label="DDG: "];
"1000612" -> "1000659"  [label="DDG: "];
"1000612" -> "1000659"  [label="DDG: "];
"1000612" -> "1000659"  [label="DDG: "];
"1000612" -> "1000659"  [label="DDG: "];
"1000612" -> "1000611"  [label="DDG: "];
"1000612" -> "1000611"  [label="DDG: "];
"1000612" -> "1000611"  [label="DDG: "];
"1000612" -> "1000611"  [label="DDG: "];
"1000612" -> "1000611"  [label="DDG: "];
"1000141" -> "1000612"  [label="DDG: "];
"1000280" -> "1000612"  [label="DDG: "];
"1000441" -> "1000612"  [label="DDG: "];
"1000441" -> "1000612"  [label="DDG: "];
"1000265" -> "1000612"  [label="DDG: "];
"1000584" -> "1000612"  [label="DDG: "];
"1000312" -> "1000612"  [label="DDG: "];
"1000612" -> "1000623"  [label="DDG: "];
"1000611" -> "1000610"  [label="AST: "];
"1000611" -> "1000620"  [label="CFG: "];
"1000620" -> "1000611"  [label="AST: "];
"1000624" -> "1000611"  [label="CFG: "];
"1000631" -> "1000611"  [label="CFG: "];
"1000611" -> "1000659"  [label="DDG: "];
"1000611" -> "1000659"  [label="DDG: "];
"1000611" -> "1000659"  [label="DDG: "];
"1000620" -> "1000611"  [label="DDG: "];
"1000623" -> "1000622"  [label="AST: "];
"1000623" -> "1000626"  [label="CFG: "];
"1000624" -> "1000623"  [label="AST: "];
"1000625" -> "1000623"  [label="AST: "];
"1000626" -> "1000623"  [label="AST: "];
"1000629" -> "1000623"  [label="CFG: "];
"1000623" -> "1000659"  [label="DDG: "];
"1000623" -> "1000659"  [label="DDG: "];
"1000623" -> "1000659"  [label="DDG: "];
}
