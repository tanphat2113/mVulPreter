digraph "0_savannah_df14e6c0b9592cbb24d5381dfc6106b14f915e75@array" {
"1000374" [label="(Call,cur[2] == 'f')"];
"1000347" [label="(Call,cur = parser->root.cursor)"];
"1000339" [label="(Call,parser->root.cursor < limit)"];
"1000476" [label="(Call,parser->root.cursor - cur)"];
"1000459" [label="(Call,parser->root.cursor >= limit)"];
"1000449" [label="(Call,parser->root.cursor = cur)"];
"1000368" [label="(Call,cur[1] == 'e')"];
"1000374" [label="(Call,cur[2] == 'f')"];
"1000379" [label="(Call,IS_PS_DELIM( cur[3] ))"];
"1000442" [label="(Call,cur = parser->root.cursor)"];
"1000425" [label="(Call,cur == parser->root.cursor)"];
"1000360" [label="(Call,cur + 3 < limit)"];
"1000257" [label="(Call,parser->root.cursor >= limit)"];
"1000241" [label="(Call,parser->root.cursor++)"];
"1000173" [label="(Call,cur >= limit)"];
"1000165" [label="(Call,cur = parser->root.cursor)"];
"1000148" [label="(Call,*   limit  = parser->root.limit)"];
"1000361" [label="(Call,cur + 3)"];
"1000367" [label="(Call,cur[1] == 'e'         &&\n               cur[2] == 'f'         &&\n               IS_PS_DELIM( cur[3] ))"];
"1000373" [label="(Call,cur[2] == 'f'         &&\n               IS_PS_DELIM( cur[3] ))"];
"1000386" [label="(Call,cur += 3)"];
"1000536" [label="(Call,parser->root.cursor       = cur)"];
"1000398" [label="(Call,cur++)"];
"1000474" [label="(Call,len = parser->root.cursor - cur)"];
"1000489" [label="(Call,T1_Add_Table( char_table, charcode,\n                                               cur, len + 1 ))"];
"1000483" [label="(Call,parser->root.error = T1_Add_Table( char_table, charcode,\n                                               cur, len + 1 ))"];
"1000493" [label="(Call,len + 1)"];
"1000355" [label="(Call,*cur == 'd' && cur + 3 < limit)"];
"1000465" [label="(Identifier,limit)"];
"1000400" [label="(ControlStructure,break;)"];
"1000241" [label="(Call,parser->root.cursor++)"];
"1000385" [label="(Literal,\"encoding end\n\")"];
"1000388" [label="(Literal,3)"];
"1000491" [label="(Identifier,charcode)"];
"1000443" [label="(Identifier,cur)"];
"1000367" [label="(Call,cur[1] == 'e'         &&\n               cur[2] == 'f'         &&\n               IS_PS_DELIM( cur[3] ))"];
"1000536" [label="(Call,parser->root.cursor       = cur)"];
"1000416" [label="(Call,charcode = (FT_Int)T1_ToInt( parser ))"];
"1000492" [label="(Identifier,cur)"];
"1000264" [label="(Return,return;)"];
"1000458" [label="(ControlStructure,if ( parser->root.cursor >= limit ))"];
"1000166" [label="(Identifier,cur)"];
"1000399" [label="(Identifier,cur)"];
"1000386" [label="(Call,cur += 3)"];
"1000484" [label="(Call,parser->root.error)"];
"1000257" [label="(Call,parser->root.cursor >= limit)"];
"1000369" [label="(Call,cur[1])"];
"1000442" [label="(Call,cur = parser->root.cursor)"];
"1000364" [label="(Identifier,limit)"];
"1000375" [label="(Call,cur[2])"];
"1000175" [label="(Identifier,limit)"];
"1000362" [label="(Identifier,cur)"];
"1000450" [label="(Call,parser->root.cursor)"];
"1000470" [label="(Identifier,parser)"];
"1000355" [label="(Call,*cur == 'd' && cur + 3 < limit)"];
"1000426" [label="(Identifier,cur)"];
"1000172" [label="(ControlStructure,if ( cur >= limit ))"];
"1000486" [label="(Identifier,parser)"];
"1000339" [label="(Call,parser->root.cursor < limit)"];
"1000460" [label="(Call,parser->root.cursor)"];
"1000165" [label="(Call,cur = parser->root.cursor)"];
"1000361" [label="(Call,cur + 3)"];
"1000258" [label="(Call,parser->root.cursor)"];
"1000173" [label="(Call,cur >= limit)"];
"1000366" [label="(ControlStructure,if ( cur[1] == 'e'         &&\n               cur[2] == 'f'         &&\n               IS_PS_DELIM( cur[3] ) ))"];
"1000542" [label="(Identifier,cur)"];
"1000424" [label="(ControlStructure,if ( cur == parser->root.cursor ))"];
"1000381" [label="(Identifier,cur)"];
"1000537" [label="(Call,parser->root.cursor)"];
"1000138" [label="(Block,)"];
"1000157" [label="(Identifier,psaux)"];
"1000345" [label="(Identifier,limit)"];
"1000376" [label="(Identifier,cur)"];
"1000387" [label="(Identifier,cur)"];
"1000242" [label="(Call,parser->root.cursor)"];
"1000148" [label="(Call,*   limit  = parser->root.limit)"];
"1000543" [label="(MethodReturn,RET)"];
"1000427" [label="(Call,parser->root.cursor)"];
"1000474" [label="(Call,len = parser->root.cursor - cur)"];
"1000444" [label="(Call,parser->root.cursor)"];
"1000393" [label="(Identifier,cur)"];
"1000459" [label="(Call,parser->root.cursor >= limit)"];
"1000379" [label="(Call,IS_PS_DELIM( cur[3] ))"];
"1000263" [label="(Identifier,limit)"];
"1000493" [label="(Call,len + 1)"];
"1000452" [label="(Identifier,parser)"];
"1000267" [label="(Identifier,loader)"];
"1000455" [label="(Identifier,cur)"];
"1000476" [label="(Call,parser->root.cursor - cur)"];
"1000499" [label="(Identifier,parser)"];
"1000411" [label="(Call,charcode = n)"];
"1000383" [label="(Block,)"];
"1000380" [label="(Call,cur[3])"];
"1000489" [label="(Call,T1_Add_Table( char_table, charcode,\n                                               cur, len + 1 ))"];
"1000234" [label="(Block,)"];
"1000475" [label="(Identifier,len)"];
"1000374" [label="(Call,cur[2] == 'f')"];
"1000363" [label="(Literal,3)"];
"1000407" [label="(Block,)"];
"1000490" [label="(Identifier,char_table)"];
"1000494" [label="(Identifier,len)"];
"1000483" [label="(Call,parser->root.error = T1_Add_Table( char_table, charcode,\n                                               cur, len + 1 ))"];
"1000346" [label="(Block,)"];
"1000349" [label="(Call,parser->root.cursor)"];
"1000149" [label="(Identifier,limit)"];
"1000495" [label="(Literal,1)"];
"1000449" [label="(Call,parser->root.cursor = cur)"];
"1000347" [label="(Call,cur = parser->root.cursor)"];
"1000255" [label="(Identifier,parser)"];
"1000288" [label="(Call,psaux->ps_table_funcs->init(\n                           char_table, count, memory ))"];
"1000338" [label="(ControlStructure,while ( parser->root.cursor < limit ))"];
"1000192" [label="(Identifier,cur)"];
"1000378" [label="(Literal,'f')"];
"1000477" [label="(Call,parser->root.cursor)"];
"1000348" [label="(Identifier,cur)"];
"1000372" [label="(Literal,'e')"];
"1000150" [label="(Call,parser->root.limit)"];
"1000436" [label="(Identifier,parser)"];
"1000389" [label="(ControlStructure,break;)"];
"1000210" [label="(Call,char_table      = &loader->encoding_table)"];
"1000368" [label="(Call,cur[1] == 'e')"];
"1000354" [label="(ControlStructure,if ( *cur == 'd' && cur + 3 < limit ))"];
"1000174" [label="(Identifier,cur)"];
"1000256" [label="(ControlStructure,if ( parser->root.cursor >= limit ))"];
"1000395" [label="(Block,)"];
"1000457" [label="(Identifier,parser)"];
"1000178" [label="(Literal,\"parse_encoding: out of bounds\n\")"];
"1000328" [label="(Call,T1_Add_Table( char_table, n, notdef, 8 ))"];
"1000466" [label="(Return,return;)"];
"1000370" [label="(Identifier,cur)"];
"1000528" [label="(Identifier,parser)"];
"1000358" [label="(Identifier,cur)"];
"1000356" [label="(Call,*cur == 'd')"];
"1000425" [label="(Call,cur == parser->root.cursor)"];
"1000373" [label="(Call,cur[2] == 'f'         &&\n               IS_PS_DELIM( cur[3] ))"];
"1000482" [label="(Identifier,cur)"];
"1000340" [label="(Call,parser->root.cursor)"];
"1000398" [label="(Call,cur++)"];
"1000360" [label="(Call,cur + 3 < limit)"];
"1000167" [label="(Call,parser->root.cursor)"];
"1000374" -> "1000373"  [label="AST: "];
"1000374" -> "1000378"  [label="CFG: "];
"1000375" -> "1000374"  [label="AST: "];
"1000378" -> "1000374"  [label="AST: "];
"1000381" -> "1000374"  [label="CFG: "];
"1000373" -> "1000374"  [label="CFG: "];
"1000374" -> "1000543"  [label="DDG: cur[2]"];
"1000374" -> "1000360"  [label="DDG: cur[2]"];
"1000374" -> "1000361"  [label="DDG: cur[2]"];
"1000374" -> "1000368"  [label="DDG: cur[2]"];
"1000374" -> "1000373"  [label="DDG: cur[2]"];
"1000374" -> "1000373"  [label="DDG: 'f'"];
"1000347" -> "1000374"  [label="DDG: cur"];
"1000368" -> "1000374"  [label="DDG: cur[1]"];
"1000379" -> "1000374"  [label="DDG: cur[3]"];
"1000374" -> "1000379"  [label="DDG: cur[2]"];
"1000374" -> "1000386"  [label="DDG: cur[2]"];
"1000374" -> "1000398"  [label="DDG: cur[2]"];
"1000374" -> "1000425"  [label="DDG: cur[2]"];
"1000374" -> "1000449"  [label="DDG: cur[2]"];
"1000374" -> "1000476"  [label="DDG: cur[2]"];
"1000374" -> "1000489"  [label="DDG: cur[2]"];
"1000374" -> "1000536"  [label="DDG: cur[2]"];
"1000347" -> "1000346"  [label="AST: "];
"1000347" -> "1000349"  [label="CFG: "];
"1000348" -> "1000347"  [label="AST: "];
"1000349" -> "1000347"  [label="AST: "];
"1000358" -> "1000347"  [label="CFG: "];
"1000347" -> "1000543"  [label="DDG: parser->root.cursor"];
"1000347" -> "1000543"  [label="DDG: cur"];
"1000339" -> "1000347"  [label="DDG: parser->root.cursor"];
"1000347" -> "1000360"  [label="DDG: cur"];
"1000347" -> "1000361"  [label="DDG: cur"];
"1000347" -> "1000368"  [label="DDG: cur"];
"1000347" -> "1000379"  [label="DDG: cur"];
"1000347" -> "1000386"  [label="DDG: cur"];
"1000347" -> "1000398"  [label="DDG: cur"];
"1000347" -> "1000425"  [label="DDG: cur"];
"1000347" -> "1000536"  [label="DDG: cur"];
"1000339" -> "1000338"  [label="AST: "];
"1000339" -> "1000345"  [label="CFG: "];
"1000340" -> "1000339"  [label="AST: "];
"1000345" -> "1000339"  [label="AST: "];
"1000348" -> "1000339"  [label="CFG: "];
"1000528" -> "1000339"  [label="CFG: "];
"1000339" -> "1000543"  [label="DDG: parser->root.cursor < limit"];
"1000339" -> "1000543"  [label="DDG: limit"];
"1000476" -> "1000339"  [label="DDG: parser->root.cursor"];
"1000257" -> "1000339"  [label="DDG: parser->root.cursor"];
"1000257" -> "1000339"  [label="DDG: limit"];
"1000459" -> "1000339"  [label="DDG: limit"];
"1000360" -> "1000339"  [label="DDG: limit"];
"1000339" -> "1000360"  [label="DDG: limit"];
"1000339" -> "1000425"  [label="DDG: parser->root.cursor"];
"1000339" -> "1000442"  [label="DDG: parser->root.cursor"];
"1000339" -> "1000459"  [label="DDG: limit"];
"1000476" -> "1000474"  [label="AST: "];
"1000476" -> "1000482"  [label="CFG: "];
"1000477" -> "1000476"  [label="AST: "];
"1000482" -> "1000476"  [label="AST: "];
"1000474" -> "1000476"  [label="CFG: "];
"1000476" -> "1000543"  [label="DDG: parser->root.cursor"];
"1000476" -> "1000474"  [label="DDG: parser->root.cursor"];
"1000476" -> "1000474"  [label="DDG: cur"];
"1000459" -> "1000476"  [label="DDG: parser->root.cursor"];
"1000379" -> "1000476"  [label="DDG: cur[3]"];
"1000368" -> "1000476"  [label="DDG: cur[1]"];
"1000442" -> "1000476"  [label="DDG: cur"];
"1000476" -> "1000489"  [label="DDG: cur"];
"1000459" -> "1000458"  [label="AST: "];
"1000459" -> "1000465"  [label="CFG: "];
"1000460" -> "1000459"  [label="AST: "];
"1000465" -> "1000459"  [label="AST: "];
"1000466" -> "1000459"  [label="CFG: "];
"1000470" -> "1000459"  [label="CFG: "];
"1000459" -> "1000543"  [label="DDG: parser->root.cursor"];
"1000459" -> "1000543"  [label="DDG: parser->root.cursor >= limit"];
"1000459" -> "1000543"  [label="DDG: limit"];
"1000449" -> "1000459"  [label="DDG: parser->root.cursor"];
"1000360" -> "1000459"  [label="DDG: limit"];
"1000449" -> "1000407"  [label="AST: "];
"1000449" -> "1000455"  [label="CFG: "];
"1000450" -> "1000449"  [label="AST: "];
"1000455" -> "1000449"  [label="AST: "];
"1000457" -> "1000449"  [label="CFG: "];
"1000449" -> "1000543"  [label="DDG: cur"];
"1000368" -> "1000449"  [label="DDG: cur[1]"];
"1000442" -> "1000449"  [label="DDG: cur"];
"1000379" -> "1000449"  [label="DDG: cur[3]"];
"1000368" -> "1000367"  [label="AST: "];
"1000368" -> "1000372"  [label="CFG: "];
"1000369" -> "1000368"  [label="AST: "];
"1000372" -> "1000368"  [label="AST: "];
"1000376" -> "1000368"  [label="CFG: "];
"1000367" -> "1000368"  [label="CFG: "];
"1000368" -> "1000543"  [label="DDG: cur[1]"];
"1000368" -> "1000360"  [label="DDG: cur[1]"];
"1000368" -> "1000361"  [label="DDG: cur[1]"];
"1000368" -> "1000367"  [label="DDG: cur[1]"];
"1000368" -> "1000367"  [label="DDG: 'e'"];
"1000379" -> "1000368"  [label="DDG: cur[3]"];
"1000368" -> "1000379"  [label="DDG: cur[1]"];
"1000368" -> "1000386"  [label="DDG: cur[1]"];
"1000368" -> "1000398"  [label="DDG: cur[1]"];
"1000368" -> "1000425"  [label="DDG: cur[1]"];
"1000368" -> "1000489"  [label="DDG: cur[1]"];
"1000368" -> "1000536"  [label="DDG: cur[1]"];
"1000379" -> "1000373"  [label="AST: "];
"1000379" -> "1000380"  [label="CFG: "];
"1000380" -> "1000379"  [label="AST: "];
"1000373" -> "1000379"  [label="CFG: "];
"1000379" -> "1000543"  [label="DDG: cur[3]"];
"1000379" -> "1000360"  [label="DDG: cur[3]"];
"1000379" -> "1000361"  [label="DDG: cur[3]"];
"1000379" -> "1000373"  [label="DDG: cur[3]"];
"1000379" -> "1000386"  [label="DDG: cur[3]"];
"1000379" -> "1000398"  [label="DDG: cur[3]"];
"1000379" -> "1000425"  [label="DDG: cur[3]"];
"1000379" -> "1000489"  [label="DDG: cur[3]"];
"1000379" -> "1000536"  [label="DDG: cur[3]"];
"1000442" -> "1000407"  [label="AST: "];
"1000442" -> "1000444"  [label="CFG: "];
"1000443" -> "1000442"  [label="AST: "];
"1000444" -> "1000442"  [label="AST: "];
"1000452" -> "1000442"  [label="CFG: "];
"1000425" -> "1000442"  [label="DDG: parser->root.cursor"];
"1000425" -> "1000424"  [label="AST: "];
"1000425" -> "1000427"  [label="CFG: "];
"1000426" -> "1000425"  [label="AST: "];
"1000427" -> "1000425"  [label="AST: "];
"1000436" -> "1000425"  [label="CFG: "];
"1000443" -> "1000425"  [label="CFG: "];
"1000425" -> "1000543"  [label="DDG: parser->root.cursor"];
"1000425" -> "1000543"  [label="DDG: cur"];
"1000425" -> "1000543"  [label="DDG: cur == parser->root.cursor"];
"1000360" -> "1000355"  [label="AST: "];
"1000360" -> "1000364"  [label="CFG: "];
"1000361" -> "1000360"  [label="AST: "];
"1000364" -> "1000360"  [label="AST: "];
"1000355" -> "1000360"  [label="CFG: "];
"1000360" -> "1000543"  [label="DDG: cur + 3"];
"1000360" -> "1000543"  [label="DDG: limit"];
"1000360" -> "1000355"  [label="DDG: cur + 3"];
"1000360" -> "1000355"  [label="DDG: limit"];
"1000257" -> "1000256"  [label="AST: "];
"1000257" -> "1000263"  [label="CFG: "];
"1000258" -> "1000257"  [label="AST: "];
"1000263" -> "1000257"  [label="AST: "];
"1000264" -> "1000257"  [label="CFG: "];
"1000267" -> "1000257"  [label="CFG: "];
"1000257" -> "1000543"  [label="DDG: limit"];
"1000257" -> "1000543"  [label="DDG: parser->root.cursor"];
"1000257" -> "1000543"  [label="DDG: parser->root.cursor >= limit"];
"1000241" -> "1000257"  [label="DDG: parser->root.cursor"];
"1000173" -> "1000257"  [label="DDG: limit"];
"1000241" -> "1000234"  [label="AST: "];
"1000241" -> "1000242"  [label="CFG: "];
"1000242" -> "1000241"  [label="AST: "];
"1000255" -> "1000241"  [label="CFG: "];
"1000173" -> "1000172"  [label="AST: "];
"1000173" -> "1000175"  [label="CFG: "];
"1000174" -> "1000173"  [label="AST: "];
"1000175" -> "1000173"  [label="AST: "];
"1000178" -> "1000173"  [label="CFG: "];
"1000192" -> "1000173"  [label="CFG: "];
"1000173" -> "1000543"  [label="DDG: cur >= limit"];
"1000173" -> "1000543"  [label="DDG: cur"];
"1000173" -> "1000543"  [label="DDG: limit"];
"1000165" -> "1000173"  [label="DDG: cur"];
"1000148" -> "1000173"  [label="DDG: limit"];
"1000173" -> "1000536"  [label="DDG: cur"];
"1000165" -> "1000138"  [label="AST: "];
"1000165" -> "1000167"  [label="CFG: "];
"1000166" -> "1000165"  [label="AST: "];
"1000167" -> "1000165"  [label="AST: "];
"1000174" -> "1000165"  [label="CFG: "];
"1000165" -> "1000543"  [label="DDG: parser->root.cursor"];
"1000148" -> "1000138"  [label="AST: "];
"1000148" -> "1000150"  [label="CFG: "];
"1000149" -> "1000148"  [label="AST: "];
"1000150" -> "1000148"  [label="AST: "];
"1000157" -> "1000148"  [label="CFG: "];
"1000148" -> "1000543"  [label="DDG: parser->root.limit"];
"1000361" -> "1000363"  [label="CFG: "];
"1000362" -> "1000361"  [label="AST: "];
"1000363" -> "1000361"  [label="AST: "];
"1000364" -> "1000361"  [label="CFG: "];
"1000361" -> "1000543"  [label="DDG: cur"];
"1000367" -> "1000366"  [label="AST: "];
"1000367" -> "1000373"  [label="CFG: "];
"1000373" -> "1000367"  [label="AST: "];
"1000385" -> "1000367"  [label="CFG: "];
"1000393" -> "1000367"  [label="CFG: "];
"1000367" -> "1000543"  [label="DDG: cur[1] == 'e'"];
"1000367" -> "1000543"  [label="DDG: cur[2] == 'f'         &&\n               IS_PS_DELIM( cur[3] )"];
"1000367" -> "1000543"  [label="DDG: cur[1] == 'e'         &&\n               cur[2] == 'f'         &&\n               IS_PS_DELIM( cur[3] )"];
"1000373" -> "1000367"  [label="DDG: cur[2] == 'f'"];
"1000373" -> "1000367"  [label="DDG: IS_PS_DELIM( cur[3] )"];
"1000373" -> "1000543"  [label="DDG: IS_PS_DELIM( cur[3] )"];
"1000373" -> "1000543"  [label="DDG: cur[2] == 'f'"];
"1000386" -> "1000383"  [label="AST: "];
"1000386" -> "1000388"  [label="CFG: "];
"1000387" -> "1000386"  [label="AST: "];
"1000388" -> "1000386"  [label="AST: "];
"1000389" -> "1000386"  [label="CFG: "];
"1000386" -> "1000536"  [label="DDG: cur"];
"1000536" -> "1000138"  [label="AST: "];
"1000536" -> "1000542"  [label="CFG: "];
"1000537" -> "1000536"  [label="AST: "];
"1000542" -> "1000536"  [label="AST: "];
"1000543" -> "1000536"  [label="CFG: "];
"1000536" -> "1000543"  [label="DDG: cur"];
"1000536" -> "1000543"  [label="DDG: parser->root.cursor"];
"1000489" -> "1000536"  [label="DDG: cur"];
"1000398" -> "1000536"  [label="DDG: cur"];
"1000398" -> "1000395"  [label="AST: "];
"1000398" -> "1000399"  [label="CFG: "];
"1000399" -> "1000398"  [label="AST: "];
"1000400" -> "1000398"  [label="CFG: "];
"1000474" -> "1000407"  [label="AST: "];
"1000475" -> "1000474"  [label="AST: "];
"1000486" -> "1000474"  [label="CFG: "];
"1000474" -> "1000543"  [label="DDG: parser->root.cursor - cur"];
"1000474" -> "1000489"  [label="DDG: len"];
"1000474" -> "1000493"  [label="DDG: len"];
"1000489" -> "1000483"  [label="AST: "];
"1000489" -> "1000493"  [label="CFG: "];
"1000490" -> "1000489"  [label="AST: "];
"1000491" -> "1000489"  [label="AST: "];
"1000492" -> "1000489"  [label="AST: "];
"1000493" -> "1000489"  [label="AST: "];
"1000483" -> "1000489"  [label="CFG: "];
"1000489" -> "1000543"  [label="DDG: len + 1"];
"1000489" -> "1000543"  [label="DDG: charcode"];
"1000489" -> "1000543"  [label="DDG: char_table"];
"1000489" -> "1000543"  [label="DDG: cur"];
"1000489" -> "1000483"  [label="DDG: char_table"];
"1000489" -> "1000483"  [label="DDG: charcode"];
"1000489" -> "1000483"  [label="DDG: cur"];
"1000489" -> "1000483"  [label="DDG: len + 1"];
"1000288" -> "1000489"  [label="DDG: char_table"];
"1000328" -> "1000489"  [label="DDG: char_table"];
"1000210" -> "1000489"  [label="DDG: char_table"];
"1000411" -> "1000489"  [label="DDG: charcode"];
"1000416" -> "1000489"  [label="DDG: charcode"];
"1000483" -> "1000407"  [label="AST: "];
"1000484" -> "1000483"  [label="AST: "];
"1000499" -> "1000483"  [label="CFG: "];
"1000483" -> "1000543"  [label="DDG: T1_Add_Table( char_table, charcode,\n                                               cur, len + 1 )"];
"1000483" -> "1000543"  [label="DDG: parser->root.error"];
"1000493" -> "1000495"  [label="CFG: "];
"1000494" -> "1000493"  [label="AST: "];
"1000495" -> "1000493"  [label="AST: "];
"1000493" -> "1000543"  [label="DDG: len"];
"1000355" -> "1000354"  [label="AST: "];
"1000355" -> "1000356"  [label="CFG: "];
"1000356" -> "1000355"  [label="AST: "];
"1000370" -> "1000355"  [label="CFG: "];
"1000393" -> "1000355"  [label="CFG: "];
"1000355" -> "1000543"  [label="DDG: *cur == 'd'"];
"1000355" -> "1000543"  [label="DDG: cur + 3 < limit"];
"1000355" -> "1000543"  [label="DDG: *cur == 'd' && cur + 3 < limit"];
"1000356" -> "1000355"  [label="DDG: *cur"];
"1000356" -> "1000355"  [label="DDG: 'd'"];
}
