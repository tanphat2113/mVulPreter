digraph "0_linux_45f6fad84cc305103b28d73482b344d7f5b76f39_17@pointer" {
"1000240" [label="(Call,ipv6_hdr(skb))"];
"1000233" [label="(Call,tcp_v6_iif(skb))"];
"1000141" [label="(Call,tcp_v4_syn_recv_sock(sk, skb, req, dst,\n\t\t\t\t\t     req_unhash, own_req))"];
"1000123" [label="(Call,inet6_sk(sk))"];
"1000111" [label="(MethodParameterIn,const struct sock *sk)"];
"1000112" [label="(MethodParameterIn,struct sk_buff *skb)"];
"1000113" [label="(MethodParameterIn,struct request_sock *req)"];
"1000114" [label="(MethodParameterIn,struct dst_entry *dst)"];
"1000115" [label="(MethodParameterIn,struct request_sock *req_unhash)"];
"1000116" [label="(MethodParameterIn,bool *own_req)"];
"1000248" [label="(Call,ipv6_hdr(skb))"];
"1000247" [label="(Call,ip6_flowinfo(ipv6_hdr(skb)))"];
"1000243" [label="(Call,newnp->rcv_flowinfo = ip6_flowinfo(ipv6_hdr(skb)))"];
"1000259" [label="(Call,ipv6_hdr(skb))"];
"1000258" [label="(Call,ip6_flowlabel(ipv6_hdr(skb)))"];
"1000254" [label="(Call,newnp->flow_label = ip6_flowlabel(ipv6_hdr(skb)))"];
"1000234" [label="(Identifier,skb)"];
"1000249" [label="(Identifier,skb)"];
"1000141" [label="(Call,tcp_v4_syn_recv_sock(sk, skb, req, dst,\n\t\t\t\t\t     req_unhash, own_req))"];
"1000640" [label="(Call,sock_net(sk))"];
"1000430" [label="(Call,ipv6_hdr(skb))"];
"1000239" [label="(Call,ipv6_hdr(skb)->hop_limit)"];
"1000313" [label="(Call,inet6_sk_rx_dst_set(newsk, skb))"];
"1000139" [label="(Call,newsk = tcp_v4_syn_recv_sock(sk, skb, req, dst,\n\t\t\t\t\t     req_unhash, own_req))"];
"1000248" [label="(Call,ipv6_hdr(skb))"];
"1000487" [label="(Call,dst_mtu(dst))"];
"1000281" [label="(Call,dst = inet6_csk_route_req(sk, &fl6, req, IPPROTO_TCP))"];
"1000113" [label="(MethodParameterIn,struct request_sock *req)"];
"1000240" [label="(Call,ipv6_hdr(skb))"];
"1000565" [label="(Call,sk_gfp_atomic(sk, GFP_ATOMIC))"];
"1000422" [label="(Call,ipv6_hdr(skb))"];
"1000124" [label="(Identifier,sk)"];
"1000295" [label="(Call,tcp_create_openreq_child(sk, req, skb))"];
"1000519" [label="(Call,tcp_sk(sk))"];
"1000229" [label="(Call,newnp->mcast_oif   = tcp_v6_iif(skb))"];
"1000415" [label="(Call,tcp_v6_iif(skb))"];
"1000271" [label="(Call,inet_rsk(req))"];
"1000636" [label="(Call,dst_release(dst))"];
"1000255" [label="(Call,newnp->flow_label)"];
"1000499" [label="(Call,tcp_sk(sk))"];
"1000116" [label="(MethodParameterIn,bool *own_req)"];
"1000585" [label="(Call,req_to_sk(req_unhash))"];
"1000244" [label="(Call,newnp->rcv_flowinfo)"];
"1000260" [label="(Identifier,skb)"];
"1000123" [label="(Call,inet6_sk(sk))"];
"1000607" [label="(Call,sk_gfp_atomic(sk, GFP_ATOMIC))"];
"1000254" [label="(Call,newnp->flow_label = ip6_flowlabel(ipv6_hdr(skb)))"];
"1000241" [label="(Identifier,skb)"];
"1000233" [label="(Call,tcp_v6_iif(skb))"];
"1000493" [label="(Call,dst_metric_advmss(dst))"];
"1000274" [label="(Call,sk_acceptq_is_full(sk))"];
"1000242" [label="(FieldIdentifier,hop_limit)"];
"1000645" [label="(MethodReturn,static struct sock *)"];
"1000111" [label="(MethodParameterIn,const struct sock *sk)"];
"1000262" [label="(Identifier,newsk)"];
"1000278" [label="(Call,!dst)"];
"1000142" [label="(Identifier,sk)"];
"1000506" [label="(Call,tcp_sk(sk))"];
"1000541" [label="(Call,tcp_v6_md5_do_lookup(sk, &newsk->sk_v6_daddr))"];
"1000570" [label="(Call,__inet_inherit_port(sk, newsk))"];
"1000632" [label="(Call,sock_net(sk))"];
"1000252" [label="(Identifier,np)"];
"1000258" [label="(Call,ip6_flowlabel(ipv6_hdr(skb)))"];
"1000283" [label="(Call,inet6_csk_route_req(sk, &fl6, req, IPPROTO_TCP))"];
"1000146" [label="(Identifier,req_unhash)"];
"1000143" [label="(Identifier,skb)"];
"1000115" [label="(MethodParameterIn,struct request_sock *req_unhash)"];
"1000259" [label="(Call,ipv6_hdr(skb))"];
"1000290" [label="(Call,!dst)"];
"1000308" [label="(Call,__ip6_dst_store(newsk, dst, NULL, NULL))"];
"1000482" [label="(Call,tcp_ca_openreq_child(newsk, dst))"];
"1000147" [label="(Identifier,own_req)"];
"1000144" [label="(Identifier,req)"];
"1000441" [label="(Call,ipv6_hdr(skb))"];
"1000112" [label="(MethodParameterIn,struct sk_buff *skb)"];
"1000121" [label="(Call,*np = inet6_sk(sk))"];
"1000114" [label="(MethodParameterIn,struct dst_entry *dst)"];
"1000591" [label="(Call,tcp_move_syn(newtp, req))"];
"1000145" [label="(Identifier,dst)"];
"1000243" [label="(Call,newnp->rcv_flowinfo = ip6_flowinfo(ipv6_hdr(skb)))"];
"1000138" [label="(Block,)"];
"1000250" [label="(ControlStructure,if (np->repflow))"];
"1000247" [label="(Call,ip6_flowinfo(ipv6_hdr(skb)))"];
"1000240" -> "1000239"  [label="AST: "];
"1000240" -> "1000241"  [label="CFG: "];
"1000241" -> "1000240"  [label="AST: "];
"1000242" -> "1000240"  [label="CFG: "];
"1000233" -> "1000240"  [label="DDG: skb"];
"1000112" -> "1000240"  [label="DDG: skb"];
"1000240" -> "1000248"  [label="DDG: skb"];
"1000233" -> "1000229"  [label="AST: "];
"1000233" -> "1000234"  [label="CFG: "];
"1000234" -> "1000233"  [label="AST: "];
"1000229" -> "1000233"  [label="CFG: "];
"1000233" -> "1000229"  [label="DDG: skb"];
"1000141" -> "1000233"  [label="DDG: skb"];
"1000112" -> "1000233"  [label="DDG: skb"];
"1000141" -> "1000139"  [label="AST: "];
"1000141" -> "1000147"  [label="CFG: "];
"1000142" -> "1000141"  [label="AST: "];
"1000143" -> "1000141"  [label="AST: "];
"1000144" -> "1000141"  [label="AST: "];
"1000145" -> "1000141"  [label="AST: "];
"1000146" -> "1000141"  [label="AST: "];
"1000147" -> "1000141"  [label="AST: "];
"1000139" -> "1000141"  [label="CFG: "];
"1000141" -> "1000645"  [label="DDG: sk"];
"1000141" -> "1000645"  [label="DDG: req"];
"1000141" -> "1000645"  [label="DDG: dst"];
"1000141" -> "1000645"  [label="DDG: skb"];
"1000141" -> "1000645"  [label="DDG: req_unhash"];
"1000141" -> "1000645"  [label="DDG: own_req"];
"1000141" -> "1000139"  [label="DDG: req"];
"1000141" -> "1000139"  [label="DDG: own_req"];
"1000141" -> "1000139"  [label="DDG: sk"];
"1000141" -> "1000139"  [label="DDG: req_unhash"];
"1000141" -> "1000139"  [label="DDG: dst"];
"1000141" -> "1000139"  [label="DDG: skb"];
"1000123" -> "1000141"  [label="DDG: sk"];
"1000111" -> "1000141"  [label="DDG: sk"];
"1000112" -> "1000141"  [label="DDG: skb"];
"1000113" -> "1000141"  [label="DDG: req"];
"1000114" -> "1000141"  [label="DDG: dst"];
"1000115" -> "1000141"  [label="DDG: req_unhash"];
"1000116" -> "1000141"  [label="DDG: own_req"];
"1000123" -> "1000121"  [label="AST: "];
"1000123" -> "1000124"  [label="CFG: "];
"1000124" -> "1000123"  [label="AST: "];
"1000121" -> "1000123"  [label="CFG: "];
"1000123" -> "1000121"  [label="DDG: sk"];
"1000111" -> "1000123"  [label="DDG: sk"];
"1000123" -> "1000274"  [label="DDG: sk"];
"1000111" -> "1000110"  [label="AST: "];
"1000111" -> "1000645"  [label="DDG: sk"];
"1000111" -> "1000274"  [label="DDG: sk"];
"1000111" -> "1000283"  [label="DDG: sk"];
"1000111" -> "1000295"  [label="DDG: sk"];
"1000111" -> "1000499"  [label="DDG: sk"];
"1000111" -> "1000506"  [label="DDG: sk"];
"1000111" -> "1000519"  [label="DDG: sk"];
"1000111" -> "1000541"  [label="DDG: sk"];
"1000111" -> "1000565"  [label="DDG: sk"];
"1000111" -> "1000570"  [label="DDG: sk"];
"1000111" -> "1000607"  [label="DDG: sk"];
"1000111" -> "1000632"  [label="DDG: sk"];
"1000111" -> "1000640"  [label="DDG: sk"];
"1000112" -> "1000110"  [label="AST: "];
"1000112" -> "1000645"  [label="DDG: skb"];
"1000112" -> "1000248"  [label="DDG: skb"];
"1000112" -> "1000259"  [label="DDG: skb"];
"1000112" -> "1000295"  [label="DDG: skb"];
"1000112" -> "1000313"  [label="DDG: skb"];
"1000112" -> "1000415"  [label="DDG: skb"];
"1000112" -> "1000422"  [label="DDG: skb"];
"1000112" -> "1000430"  [label="DDG: skb"];
"1000112" -> "1000441"  [label="DDG: skb"];
"1000113" -> "1000110"  [label="AST: "];
"1000113" -> "1000645"  [label="DDG: req"];
"1000113" -> "1000271"  [label="DDG: req"];
"1000113" -> "1000283"  [label="DDG: req"];
"1000113" -> "1000295"  [label="DDG: req"];
"1000113" -> "1000591"  [label="DDG: req"];
"1000114" -> "1000110"  [label="AST: "];
"1000114" -> "1000645"  [label="DDG: dst"];
"1000114" -> "1000278"  [label="DDG: dst"];
"1000114" -> "1000281"  [label="DDG: dst"];
"1000114" -> "1000290"  [label="DDG: dst"];
"1000114" -> "1000308"  [label="DDG: dst"];
"1000114" -> "1000482"  [label="DDG: dst"];
"1000114" -> "1000487"  [label="DDG: dst"];
"1000114" -> "1000493"  [label="DDG: dst"];
"1000114" -> "1000636"  [label="DDG: dst"];
"1000115" -> "1000110"  [label="AST: "];
"1000115" -> "1000645"  [label="DDG: req_unhash"];
"1000115" -> "1000585"  [label="DDG: req_unhash"];
"1000116" -> "1000110"  [label="AST: "];
"1000116" -> "1000645"  [label="DDG: own_req"];
"1000248" -> "1000247"  [label="AST: "];
"1000248" -> "1000249"  [label="CFG: "];
"1000249" -> "1000248"  [label="AST: "];
"1000247" -> "1000248"  [label="CFG: "];
"1000248" -> "1000645"  [label="DDG: skb"];
"1000248" -> "1000247"  [label="DDG: skb"];
"1000248" -> "1000259"  [label="DDG: skb"];
"1000247" -> "1000243"  [label="AST: "];
"1000243" -> "1000247"  [label="CFG: "];
"1000247" -> "1000645"  [label="DDG: ipv6_hdr(skb)"];
"1000247" -> "1000243"  [label="DDG: ipv6_hdr(skb)"];
"1000243" -> "1000138"  [label="AST: "];
"1000244" -> "1000243"  [label="AST: "];
"1000252" -> "1000243"  [label="CFG: "];
"1000243" -> "1000645"  [label="DDG: newnp->rcv_flowinfo"];
"1000243" -> "1000645"  [label="DDG: ip6_flowinfo(ipv6_hdr(skb))"];
"1000259" -> "1000258"  [label="AST: "];
"1000259" -> "1000260"  [label="CFG: "];
"1000260" -> "1000259"  [label="AST: "];
"1000258" -> "1000259"  [label="CFG: "];
"1000259" -> "1000645"  [label="DDG: skb"];
"1000259" -> "1000258"  [label="DDG: skb"];
"1000258" -> "1000254"  [label="AST: "];
"1000254" -> "1000258"  [label="CFG: "];
"1000258" -> "1000645"  [label="DDG: ipv6_hdr(skb)"];
"1000258" -> "1000254"  [label="DDG: ipv6_hdr(skb)"];
"1000254" -> "1000250"  [label="AST: "];
"1000255" -> "1000254"  [label="AST: "];
"1000262" -> "1000254"  [label="CFG: "];
"1000254" -> "1000645"  [label="DDG: newnp->flow_label"];
"1000254" -> "1000645"  [label="DDG: ip6_flowlabel(ipv6_hdr(skb))"];
}
