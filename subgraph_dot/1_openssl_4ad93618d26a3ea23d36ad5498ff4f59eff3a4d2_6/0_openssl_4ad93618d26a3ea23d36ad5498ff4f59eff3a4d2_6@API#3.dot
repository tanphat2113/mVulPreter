digraph "0_openssl_4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2_6@API" {
"1000335" [label="(Call,memcpy(ret, plist, plistlen))"];
"1000330" [label="(Call,ret++)"];
"1000323" [label="(Call,s2n(plistlen + 1, ret))"];
"1000302" [label="(Call,plistlen > 255)"];
"1000320" [label="(Call,s2n(TLSEXT_TYPE_ec_point_formats, ret))"];
"1000312" [label="(Call,CHECKLEN(ret, 5 + plistlen, limit))"];
"1000247" [label="(Call,ret += el)"];
"1000235" [label="(Call,ssl_add_serverhello_renegotiate_ext(s, ret, &el, el))"];
"1000206" [label="(Call,ssl_add_serverhello_renegotiate_ext(s, 0, &el, 0))"];
"1000124" [label="(MethodParameterIn,SSL *s)"];
"1000230" [label="(Call,s2n(el, ret))"];
"1000227" [label="(Call,s2n(TLSEXT_TYPE_renegotiate, ret))"];
"1000219" [label="(Call,CHECKLEN(ret, 4 + el, limit))"];
"1000191" [label="(Call,ret >= limit)"];
"1000187" [label="(Call,ret += 2)"];
"1000138" [label="(Call,*ret = buf)"];
"1000125" [label="(MethodParameterIn,unsigned char *buf)"];
"1000126" [label="(MethodParameterIn,unsigned char *limit)"];
"1000287" [label="(Call,s2n(0, ret))"];
"1000284" [label="(Call,s2n(TLSEXT_TYPE_server_name, ret))"];
"1000278" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000332" [label="(Call,(unsigned char)plistlen)"];
"1000339" [label="(Call,ret += plistlen)"];
"1000351" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000357" [label="(Call,s2n(TLSEXT_TYPE_session_ticket, ret))"];
"1000360" [label="(Call,s2n(0, ret))"];
"1000376" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000382" [label="(Call,s2n(TLSEXT_TYPE_status_request, ret))"];
"1000385" [label="(Call,s2n(0, ret))"];
"1000411" [label="(Call,CHECKLEN(ret, 4 + el, limit))"];
"1000419" [label="(Call,s2n(TLSEXT_TYPE_use_srtp, ret))"];
"1000422" [label="(Call,s2n(el, ret))"];
"1000426" [label="(Call,ssl_add_serverhello_use_srtp_ext(s, ret, &el, el))"];
"1000438" [label="(Call,ret += el)"];
"1000479" [label="(Call,CHECKLEN(ret, sizeof(cryptopro_ext), limit))"];
"1000486" [label="(Call,memcpy(ret, cryptopro_ext, sizeof(cryptopro_ext)))"];
"1000491" [label="(Call,ret += sizeof(cryptopro_ext))"];
"1000506" [label="(Call,CHECKLEN(ret, 5, limit))"];
"1000512" [label="(Call,s2n(TLSEXT_TYPE_heartbeat, ret))"];
"1000515" [label="(Call,s2n(1, ret))"];
"1000526" [label="(Call,ret++)"];
"1000580" [label="(Call,CHECKLEN(ret, 4 + npalen, limit))"];
"1000588" [label="(Call,s2n(TLSEXT_TYPE_next_proto_neg, ret))"];
"1000591" [label="(Call,s2n(npalen, ret))"];
"1000594" [label="(Call,memcpy(ret, npa, npalen))"];
"1000598" [label="(Call,ret += npalen)"];
"1000689" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000695" [label="(Call,s2n(TLSEXT_TYPE_encrypt_then_mac, ret))"];
"1000698" [label="(Call,s2n(0, ret))"];
"1000711" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000717" [label="(Call,s2n(TLSEXT_TYPE_extended_master_secret, ret))"];
"1000720" [label="(Call,s2n(0, ret))"];
"1000749" [label="(Call,CHECKLEN(ret, 7 + len, limit))"];
"1000757" [label="(Call,s2n(TLSEXT_TYPE_application_layer_protocol_negotiation, ret))"];
"1000760" [label="(Call,s2n(3 + len, ret))"];
"1000765" [label="(Call,s2n(1 + len, ret))"];
"1000772" [label="(Call,ret++)"];
"1000775" [label="(Call,memcpy(ret, selected, len))"];
"1000779" [label="(Call,ret += len)"];
"1000787" [label="(Call,ret - orig - 2)"];
"1000784" [label="(Call,(extdatalen = ret - orig - 2) == 0)"];
"1000785" [label="(Call,extdatalen = ret - orig - 2)"];
"1000795" [label="(Call,s2n(extdatalen, orig))"];
"1000798" [label="(Return,return ret;)"];
"1000610" [label="(Call,custom_ext_add(s, 1, &ret, limit, al))"];
"1000609" [label="(Call,!custom_ext_add(s, 1, &ret, limit, al))"];
"1000630" [label="(Call,SSL_IS_DTLS(s))"];
"1000629" [label="(Call,SSL_IS_DTLS(s) || s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)"];
"1000532" [label="(Call,ret++)"];
"1000471" [label="(Call,SSL_get_options(s))"];
"1000470" [label="(Call,SSL_get_options(s) & SSL_OP_CRYPTOPRO_TLSEXT_BUG)"];
"1000442" [label="(Call,((s->s3->tmp.new_cipher->id & 0xFFFF) == 0x80\n         || (s->s3->tmp.new_cipher->id & 0xFFFF) == 0x81)\n        && (SSL_get_options(s) & SSL_OP_CRYPTOPRO_TLSEXT_BUG))"];
"1000497" [label="(Call,SSL_IS_DTLS(s))"];
"1000496" [label="(Call,SSL_IS_DTLS(s) && (s->tlsext_heartbeat & SSL_DTLSEXT_HB_ENABLED))"];
"1000563" [label="(Call,s->ctx->next_protos_advertised_cb(s, &npa, &npalen,\n                                              s->\n                                              ctx->next_protos_advertised_cb_arg))"];
"1000561" [label="(Call,r = s->ctx->next_protos_advertised_cb(s, &npa, &npalen,\n                                              s->\n                                              ctx->next_protos_advertised_cb_arg))"];
"1000575" [label="(Call,r == SSL_TLSEXT_ERR_OK)"];
"1000561" [label="(Call,r = s->ctx->next_protos_advertised_cb(s, &npa, &npalen,\n                                              s->\n                                              ctx->next_protos_advertised_cb_arg))"];
"1000761" [label="(Call,3 + len)"];
"1000249" [label="(Identifier,el)"];
"1000797" [label="(Identifier,orig)"];
"1000629" [label="(Call,SSL_IS_DTLS(s) || s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)"];
"1000711" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000189" [label="(Literal,2)"];
"1000382" [label="(Call,s2n(TLSEXT_TYPE_status_request, ret))"];
"1000391" [label="(Identifier,s)"];
"1000699" [label="(Literal,0)"];
"1000515" [label="(Call,s2n(1, ret))"];
"1000477" [label="(Identifier,cryptopro_ext)"];
"1000199" [label="(Identifier,s)"];
"1000509" [label="(Identifier,limit)"];
"1000798" [label="(Return,return ret;)"];
"1000235" [label="(Call,ssl_add_serverhello_renegotiate_ext(s, ret, &el, el))"];
"1000340" [label="(Identifier,ret)"];
"1000794" [label="(Identifier,orig)"];
"1000288" [label="(Literal,0)"];
"1000533" [label="(Identifier,ret)"];
"1000375" [label="(ControlStructure,if (CHECKLEN(ret, 4, limit)))"];
"1000295" [label="(Call,tls1_get_formatlist(s, &plist, &plistlen))"];
"1000286" [label="(Identifier,ret)"];
"1000595" [label="(Identifier,ret)"];
"1000590" [label="(Identifier,ret)"];
"1000127" [label="(MethodParameterIn,int *al)"];
"1000764" [label="(Identifier,ret)"];
"1000526" [label="(Call,ret++)"];
"1000506" [label="(Call,CHECKLEN(ret, 5, limit))"];
"1000207" [label="(Identifier,s)"];
"1000362" [label="(Identifier,ret)"];
"1000514" [label="(Identifier,ret)"];
"1000628" [label="(ControlStructure,if (SSL_IS_DTLS(s) || s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12))"];
"1000230" [label="(Call,s2n(el, ret))"];
"1000800" [label="(MethodReturn,unsigned char *)"];
"1000191" [label="(Call,ret >= limit)"];
"1000304" [label="(Literal,255)"];
"1000376" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000582" [label="(Call,4 + npalen)"];
"1000487" [label="(Identifier,ret)"];
"1000694" [label="(Identifier,NULL)"];
"1000495" [label="(ControlStructure,if (SSL_IS_DTLS(s) && (s->tlsext_heartbeat & SSL_DTLSEXT_HB_ENABLED)))"];
"1000187" [label="(Call,ret += 2)"];
"1000691" [label="(Literal,4)"];
"1000345" [label="(Identifier,s)"];
"1000383" [label="(Identifier,TLSEXT_TYPE_status_request)"];
"1000485" [label="(Identifier,NULL)"];
"1000128" [label="(Block,)"];
"1000577" [label="(Identifier,SSL_TLSEXT_ERR_OK)"];
"1000377" [label="(Identifier,ret)"];
"1000492" [label="(Identifier,ret)"];
"1000505" [label="(ControlStructure,if (CHECKLEN(ret, 5, limit)))"];
"1000741" [label="(Call,len = s->s3->alpn_selected_len)"];
"1000713" [label="(Literal,4)"];
"1000352" [label="(Identifier,ret)"];
"1000470" [label="(Call,SSL_get_options(s) & SSL_OP_CRYPTOPRO_TLSEXT_BUG)"];
"1000532" [label="(Call,ret++)"];
"1000789" [label="(Call,orig - 2)"];
"1000313" [label="(Identifier,ret)"];
"1000792" [label="(Literal,0)"];
"1000594" [label="(Call,memcpy(ret, npa, npalen))"];
"1000336" [label="(Identifier,ret)"];
"1000218" [label="(ControlStructure,if (CHECKLEN(ret, 4 + el, limit)))"];
"1000360" [label="(Call,s2n(0, ret))"];
"1000134" [label="(Call,*orig = buf)"];
"1000330" [label="(Call,ret++)"];
"1000491" [label="(Call,ret += sizeof(cryptopro_ext))"];
"1000749" [label="(Call,CHECKLEN(ret, 7 + len, limit))"];
"1000139" [label="(Identifier,ret)"];
"1000771" [label="(Call,*ret++)"];
"1000608" [label="(ControlStructure,if (!custom_ext_add(s, 1, &ret, limit, al)))"];
"1000712" [label="(Identifier,ret)"];
"1000688" [label="(ControlStructure,if (CHECKLEN(ret, 4, limit)))"];
"1000314" [label="(Call,5 + plistlen)"];
"1000517" [label="(Identifier,ret)"];
"1000748" [label="(ControlStructure,if (CHECKLEN(ret, 7 + len, limit)))"];
"1000188" [label="(Identifier,ret)"];
"1000615" [label="(Identifier,limit)"];
"1000285" [label="(Identifier,TLSEXT_TYPE_server_name)"];
"1000361" [label="(Literal,0)"];
"1000785" [label="(Call,extdatalen = ret - orig - 2)"];
"1000632" [label="(Call,s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)"];
"1000226" [label="(Identifier,NULL)"];
"1000307" [label="(Identifier,SSL_F_SSL_ADD_SERVERHELLO_TLSEXT)"];
"1000206" [label="(Call,ssl_add_serverhello_renegotiate_ext(s, 0, &el, 0))"];
"1000591" [label="(Call,s2n(npalen, ret))"];
"1000776" [label="(Identifier,ret)"];
"1000479" [label="(Call,CHECKLEN(ret, sizeof(cryptopro_ext), limit))"];
"1000418" [label="(Identifier,NULL)"];
"1000751" [label="(Call,7 + len)"];
"1000277" [label="(ControlStructure,if (CHECKLEN(ret, 4, limit)))"];
"1000504" [label="(Block,)"];
"1000705" [label="(Identifier,s)"];
"1000125" [label="(MethodParameterIn,unsigned char *buf)"];
"1000513" [label="(Identifier,TLSEXT_TYPE_heartbeat)"];
"1000757" [label="(Call,s2n(TLSEXT_TYPE_application_layer_protocol_negotiation, ret))"];
"1000611" [label="(Identifier,s)"];
"1000302" [label="(Call,plistlen > 255)"];
"1000787" [label="(Call,ret - orig - 2)"];
"1000359" [label="(Identifier,ret)"];
"1000421" [label="(Identifier,ret)"];
"1000799" [label="(Identifier,ret)"];
"1000232" [label="(Identifier,ret)"];
"1000587" [label="(Identifier,NULL)"];
"1000630" [label="(Call,SSL_IS_DTLS(s))"];
"1000478" [label="(ControlStructure,if (CHECKLEN(ret, sizeof(cryptopro_ext), limit)))"];
"1000498" [label="(Identifier,s)"];
"1000356" [label="(Identifier,NULL)"];
"1000144" [label="(Identifier,alg_k)"];
"1000780" [label="(Identifier,ret)"];
"1000565" [label="(Call,&npa)"];
"1000569" [label="(Call,s->\n                                              ctx->next_protos_advertised_cb_arg)"];
"1000205" [label="(Call,!ssl_add_serverhello_renegotiate_ext(s, 0, &el, 0))"];
"1000354" [label="(Identifier,limit)"];
"1000597" [label="(Identifier,npalen)"];
"1000253" [label="(Identifier,s)"];
"1000311" [label="(ControlStructure,if (CHECKLEN(ret, 5 + plistlen, limit)))"];
"1000236" [label="(Identifier,s)"];
"1000413" [label="(Call,4 + el)"];
"1000716" [label="(Identifier,NULL)"];
"1000319" [label="(Identifier,NULL)"];
"1000769" [label="(Identifier,ret)"];
"1000422" [label="(Call,s2n(el, ret))"];
"1000323" [label="(Call,s2n(plistlen + 1, ret))"];
"1000766" [label="(Call,1 + len)"];
"1000788" [label="(Identifier,ret)"];
"1000428" [label="(Identifier,ret)"];
"1000531" [label="(Call,*(ret++))"];
"1000536" [label="(Identifier,next_proto_neg_seen)"];
"1000760" [label="(Call,s2n(3 + len, ret))"];
"1000322" [label="(Identifier,ret)"];
"1000483" [label="(Identifier,limit)"];
"1000623" [label="(Identifier,s)"];
"1000434" [label="(Identifier,SSL_F_SSL_ADD_SERVERHELLO_TLSEXT)"];
"1000581" [label="(Identifier,ret)"];
"1000575" [label="(Call,r == SSL_TLSEXT_ERR_OK)"];
"1000687" [label="(Block,)"];
"1000227" [label="(Call,s2n(TLSEXT_TYPE_renegotiate, ret))"];
"1000450" [label="(Identifier,s)"];
"1000349" [label="(Block,)"];
"1000493" [label="(Call,sizeof(cryptopro_ext))"];
"1000238" [label="(Call,&el)"];
"1000224" [label="(Identifier,limit)"];
"1000231" [label="(Identifier,el)"];
"1000481" [label="(Call,sizeof(cryptopro_ext))"];
"1000353" [label="(Literal,4)"];
"1000618" [label="(Identifier,NULL)"];
"1000499" [label="(Call,s->tlsext_heartbeat & SSL_DTLSEXT_HB_ENABLED)"];
"1000697" [label="(Identifier,ret)"];
"1000280" [label="(Literal,4)"];
"1000772" [label="(Call,ret++)"];
"1000682" [label="(Identifier,s)"];
"1000234" [label="(Call,!ssl_add_serverhello_renegotiate_ext(s, ret, &el, el))"];
"1000209" [label="(Call,&el)"];
"1000329" [label="(Call,*(ret++))"];
"1000351" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000357" [label="(Call,s2n(TLSEXT_TYPE_session_ticket, ret))"];
"1000593" [label="(Identifier,ret)"];
"1000719" [label="(Identifier,ret)"];
"1000731" [label="(Block,)"];
"1000589" [label="(Identifier,TLSEXT_TYPE_next_proto_neg)"];
"1000521" [label="(Identifier,s)"];
"1000386" [label="(Literal,0)"];
"1000733" [label="(Call,*selected = s->s3->alpn_selected)"];
"1000126" [label="(MethodParameterIn,unsigned char *limit)"];
"1000474" [label="(Block,)"];
"1000710" [label="(ControlStructure,if (CHECKLEN(ret, 4, limit)))"];
"1000613" [label="(Call,&ret)"];
"1000438" [label="(Call,ret += el)"];
"1000140" [label="(Identifier,buf)"];
"1000750" [label="(Identifier,ret)"];
"1000292" [label="(Block,)"];
"1000488" [label="(Identifier,cryptopro_ext)"];
"1000695" [label="(Call,s2n(TLSEXT_TYPE_encrypt_then_mac, ret))"];
"1000765" [label="(Call,s2n(1 + len, ret))"];
"1000324" [label="(Call,plistlen + 1)"];
"1000497" [label="(Call,SSL_IS_DTLS(s))"];
"1000385" [label="(Call,s2n(0, ret))"];
"1000312" [label="(Call,CHECKLEN(ret, 5 + plistlen, limit))"];
"1000767" [label="(Literal,1)"];
"1000580" [label="(Call,CHECKLEN(ret, 4 + npalen, limit))"];
"1000778" [label="(Identifier,len)"];
"1000439" [label="(Identifier,ret)"];
"1000507" [label="(Identifier,ret)"];
"1000443" [label="(Call,(s->s3->tmp.new_cipher->id & 0xFFFF) == 0x80\n         || (s->s3->tmp.new_cipher->id & 0xFFFF) == 0x81)"];
"1000395" [label="(Block,)"];
"1000279" [label="(Identifier,ret)"];
"1000690" [label="(Identifier,ret)"];
"1000777" [label="(Identifier,selected)"];
"1000486" [label="(Call,memcpy(ret, cryptopro_ext, sizeof(cryptopro_ext)))"];
"1000332" [label="(Call,(unsigned char)plistlen)"];
"1000221" [label="(Call,4 + el)"];
"1000237" [label="(Identifier,ret)"];
"1000425" [label="(ControlStructure,if (ssl_add_serverhello_use_srtp_ext(s, ret, &el, el)))"];
"1000579" [label="(ControlStructure,if (CHECKLEN(ret, 4 + npalen, limit)))"];
"1000696" [label="(Identifier,TLSEXT_TYPE_encrypt_then_mac)"];
"1000722" [label="(Identifier,ret)"];
"1000325" [label="(Identifier,plistlen)"];
"1000585" [label="(Identifier,limit)"];
"1000599" [label="(Identifier,ret)"];
"1000692" [label="(Identifier,limit)"];
"1000578" [label="(Block,)"];
"1000426" [label="(Call,ssl_add_serverhello_use_srtp_ext(s, ret, &el, el))"];
"1000588" [label="(Call,s2n(TLSEXT_TYPE_next_proto_neg, ret))"];
"1000240" [label="(Identifier,el)"];
"1000564" [label="(Identifier,s)"];
"1000193" [label="(Identifier,limit)"];
"1000276" [label="(Block,)"];
"1000328" [label="(Call,*(ret++) = (unsigned char)plistlen)"];
"1000379" [label="(Identifier,limit)"];
"1000387" [label="(Identifier,ret)"];
"1000431" [label="(Identifier,el)"];
"1000190" [label="(ControlStructure,if (ret >= limit))"];
"1000411" [label="(Call,CHECKLEN(ret, 4 + el, limit))"];
"1000511" [label="(Identifier,NULL)"];
"1000516" [label="(Literal,1)"];
"1000208" [label="(Literal,0)"];
"1000631" [label="(Identifier,s)"];
"1000320" [label="(Call,s2n(TLSEXT_TYPE_ec_point_formats, ret))"];
"1000419" [label="(Call,s2n(TLSEXT_TYPE_use_srtp, ret))"];
"1000211" [label="(Literal,0)"];
"1000779" [label="(Call,ret += len)"];
"1000489" [label="(Call,sizeof(cryptopro_ext))"];
"1000335" [label="(Call,memcpy(ret, plist, plistlen))"];
"1000721" [label="(Literal,0)"];
"1000192" [label="(Identifier,ret)"];
"1000718" [label="(Identifier,TLSEXT_TYPE_extended_master_secret)"];
"1000195" [label="(Identifier,NULL)"];
"1000334" [label="(Identifier,plistlen)"];
"1000317" [label="(Identifier,limit)"];
"1000442" [label="(Call,((s->s3->tmp.new_cipher->id & 0xFFFF) == 0x80\n         || (s->s3->tmp.new_cipher->id & 0xFFFF) == 0x81)\n        && (SSL_get_options(s) & SSL_OP_CRYPTOPRO_TLSEXT_BUG))"];
"1000616" [label="(Identifier,al)"];
"1000501" [label="(Identifier,s)"];
"1000609" [label="(Call,!custom_ext_add(s, 1, &ret, limit, al))"];
"1000576" [label="(Identifier,r)"];
"1000574" [label="(ControlStructure,if (r == SSL_TLSEXT_ERR_OK))"];
"1000717" [label="(Call,s2n(TLSEXT_TYPE_extended_master_secret, ret))"];
"1000689" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000423" [label="(Identifier,el)"];
"1000720" [label="(Call,s2n(0, ret))"];
"1000202" [label="(Block,)"];
"1000783" [label="(ControlStructure,if ((extdatalen = ret - orig - 2) == 0))"];
"1000248" [label="(Identifier,ret)"];
"1000429" [label="(Call,&el)"];
"1000709" [label="(Block,)"];
"1000338" [label="(Identifier,plistlen)"];
"1000700" [label="(Identifier,ret)"];
"1000762" [label="(Literal,3)"];
"1000420" [label="(Identifier,TLSEXT_TYPE_use_srtp)"];
"1000327" [label="(Identifier,ret)"];
"1000773" [label="(Identifier,ret)"];
"1000496" [label="(Call,SSL_IS_DTLS(s) && (s->tlsext_heartbeat & SSL_DTLSEXT_HB_ENABLED))"];
"1000781" [label="(Identifier,len)"];
"1000471" [label="(Call,SSL_get_options(s))"];
"1000247" [label="(Call,ret += el)"];
"1000283" [label="(Identifier,NULL)"];
"1000563" [label="(Call,s->ctx->next_protos_advertised_cb(s, &npa, &npalen,\n                                              s->\n                                              ctx->next_protos_advertised_cb_arg))"];
"1000786" [label="(Identifier,extdatalen)"];
"1000638" [label="(Identifier,s)"];
"1000220" [label="(Identifier,ret)"];
"1000138" [label="(Call,*ret = buf)"];
"1000219" [label="(Call,CHECKLEN(ret, 4 + el, limit))"];
"1000600" [label="(Identifier,npalen)"];
"1000410" [label="(ControlStructure,if (CHECKLEN(ret, 4 + el, limit)))"];
"1000727" [label="(Identifier,s)"];
"1000796" [label="(Identifier,extdatalen)"];
"1000291" [label="(Identifier,using_ecc)"];
"1000775" [label="(Call,memcpy(ret, selected, len))"];
"1000303" [label="(Identifier,plistlen)"];
"1000278" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000347" [label="(Call,tls_use_ticket(s))"];
"1000557" [label="(Block,)"];
"1000525" [label="(Call,*(ret++))"];
"1000604" [label="(Identifier,s)"];
"1000756" [label="(Identifier,NULL)"];
"1000714" [label="(Identifier,limit)"];
"1000124" [label="(MethodParameterIn,SSL *s)"];
"1000284" [label="(Call,s2n(TLSEXT_TYPE_server_name, ret))"];
"1000440" [label="(Identifier,el)"];
"1000512" [label="(Call,s2n(TLSEXT_TYPE_heartbeat, ret))"];
"1000784" [label="(Call,(extdatalen = ret - orig - 2) == 0)"];
"1000480" [label="(Identifier,ret)"];
"1000527" [label="(Identifier,ret)"];
"1000759" [label="(Identifier,ret)"];
"1000424" [label="(Identifier,ret)"];
"1000427" [label="(Identifier,s)"];
"1000754" [label="(Identifier,limit)"];
"1000398" [label="(Call,ssl_add_serverhello_use_srtp_ext(s, 0, &el, 0))"];
"1000301" [label="(ControlStructure,if (plistlen > 255))"];
"1000441" [label="(ControlStructure,if (((s->s3->tmp.new_cipher->id & 0xFFFF) == 0x80\n         || (s->s3->tmp.new_cipher->id & 0xFFFF) == 0x81)\n        && (SSL_get_options(s) & SSL_OP_CRYPTOPRO_TLSEXT_BUG)))"];
"1000281" [label="(Identifier,limit)"];
"1000390" [label="(Call,SSL_IS_DTLS(s))"];
"1000562" [label="(Identifier,r)"];
"1000610" [label="(Call,custom_ext_add(s, 1, &ret, limit, al))"];
"1000287" [label="(Call,s2n(0, ret))"];
"1000339" [label="(Call,ret += plistlen)"];
"1000350" [label="(ControlStructure,if (CHECKLEN(ret, 4, limit)))"];
"1000698" [label="(Call,s2n(0, ret))"];
"1000598" [label="(Call,ret += npalen)"];
"1000228" [label="(Identifier,TLSEXT_TYPE_renegotiate)"];
"1000592" [label="(Identifier,npalen)"];
"1000378" [label="(Literal,4)"];
"1000289" [label="(Identifier,ret)"];
"1000358" [label="(Identifier,TLSEXT_TYPE_session_ticket)"];
"1000372" [label="(Identifier,s)"];
"1000337" [label="(Identifier,plist)"];
"1000596" [label="(Identifier,npa)"];
"1000472" [label="(Identifier,s)"];
"1000321" [label="(Identifier,TLSEXT_TYPE_ec_point_formats)"];
"1000341" [label="(Identifier,plistlen)"];
"1000381" [label="(Identifier,NULL)"];
"1000384" [label="(Identifier,ret)"];
"1000612" [label="(Literal,1)"];
"1000508" [label="(Literal,5)"];
"1000795" [label="(Call,s2n(extdatalen, orig))"];
"1000331" [label="(Identifier,ret)"];
"1000782" [label="(JumpTarget,done:)"];
"1000567" [label="(Call,&npalen)"];
"1000416" [label="(Identifier,limit)"];
"1000412" [label="(Identifier,ret)"];
"1000758" [label="(Identifier,TLSEXT_TYPE_application_layer_protocol_negotiation)"];
"1000473" [label="(Identifier,SSL_OP_CRYPTOPRO_TLSEXT_BUG)"];
"1000229" [label="(Identifier,ret)"];
"1000374" [label="(Block,)"];
"1000335" -> "1000292"  [label="AST: "];
"1000335" -> "1000338"  [label="CFG: "];
"1000336" -> "1000335"  [label="AST: "];
"1000337" -> "1000335"  [label="AST: "];
"1000338" -> "1000335"  [label="AST: "];
"1000340" -> "1000335"  [label="CFG: "];
"1000335" -> "1000800"  [label="DDG: plist"];
"1000335" -> "1000800"  [label="DDG: memcpy(ret, plist, plistlen)"];
"1000330" -> "1000335"  [label="DDG: ret"];
"1000332" -> "1000335"  [label="DDG: plistlen"];
"1000335" -> "1000339"  [label="DDG: plistlen"];
"1000335" -> "1000339"  [label="DDG: ret"];
"1000330" -> "1000329"  [label="AST: "];
"1000330" -> "1000331"  [label="CFG: "];
"1000331" -> "1000330"  [label="AST: "];
"1000329" -> "1000330"  [label="CFG: "];
"1000323" -> "1000330"  [label="DDG: ret"];
"1000323" -> "1000292"  [label="AST: "];
"1000323" -> "1000327"  [label="CFG: "];
"1000324" -> "1000323"  [label="AST: "];
"1000327" -> "1000323"  [label="AST: "];
"1000331" -> "1000323"  [label="CFG: "];
"1000323" -> "1000800"  [label="DDG: plistlen + 1"];
"1000323" -> "1000800"  [label="DDG: s2n(plistlen + 1, ret)"];
"1000302" -> "1000323"  [label="DDG: plistlen"];
"1000320" -> "1000323"  [label="DDG: ret"];
"1000302" -> "1000301"  [label="AST: "];
"1000302" -> "1000304"  [label="CFG: "];
"1000303" -> "1000302"  [label="AST: "];
"1000304" -> "1000302"  [label="AST: "];
"1000307" -> "1000302"  [label="CFG: "];
"1000313" -> "1000302"  [label="CFG: "];
"1000302" -> "1000800"  [label="DDG: plistlen"];
"1000302" -> "1000800"  [label="DDG: plistlen > 255"];
"1000302" -> "1000312"  [label="DDG: plistlen"];
"1000302" -> "1000314"  [label="DDG: plistlen"];
"1000302" -> "1000324"  [label="DDG: plistlen"];
"1000302" -> "1000332"  [label="DDG: plistlen"];
"1000320" -> "1000292"  [label="AST: "];
"1000320" -> "1000322"  [label="CFG: "];
"1000321" -> "1000320"  [label="AST: "];
"1000322" -> "1000320"  [label="AST: "];
"1000325" -> "1000320"  [label="CFG: "];
"1000320" -> "1000800"  [label="DDG: TLSEXT_TYPE_ec_point_formats"];
"1000320" -> "1000800"  [label="DDG: s2n(TLSEXT_TYPE_ec_point_formats, ret)"];
"1000312" -> "1000320"  [label="DDG: ret"];
"1000312" -> "1000311"  [label="AST: "];
"1000312" -> "1000317"  [label="CFG: "];
"1000313" -> "1000312"  [label="AST: "];
"1000314" -> "1000312"  [label="AST: "];
"1000317" -> "1000312"  [label="AST: "];
"1000319" -> "1000312"  [label="CFG: "];
"1000321" -> "1000312"  [label="CFG: "];
"1000312" -> "1000800"  [label="DDG: CHECKLEN(ret, 5 + plistlen, limit)"];
"1000312" -> "1000800"  [label="DDG: ret"];
"1000312" -> "1000800"  [label="DDG: 5 + plistlen"];
"1000312" -> "1000800"  [label="DDG: limit"];
"1000247" -> "1000312"  [label="DDG: ret"];
"1000287" -> "1000312"  [label="DDG: ret"];
"1000191" -> "1000312"  [label="DDG: ret"];
"1000191" -> "1000312"  [label="DDG: limit"];
"1000219" -> "1000312"  [label="DDG: limit"];
"1000278" -> "1000312"  [label="DDG: limit"];
"1000126" -> "1000312"  [label="DDG: limit"];
"1000312" -> "1000351"  [label="DDG: limit"];
"1000312" -> "1000376"  [label="DDG: limit"];
"1000312" -> "1000411"  [label="DDG: limit"];
"1000312" -> "1000479"  [label="DDG: limit"];
"1000312" -> "1000506"  [label="DDG: limit"];
"1000312" -> "1000580"  [label="DDG: limit"];
"1000312" -> "1000610"  [label="DDG: limit"];
"1000247" -> "1000202"  [label="AST: "];
"1000247" -> "1000249"  [label="CFG: "];
"1000248" -> "1000247"  [label="AST: "];
"1000249" -> "1000247"  [label="AST: "];
"1000253" -> "1000247"  [label="CFG: "];
"1000247" -> "1000800"  [label="DDG: ret"];
"1000247" -> "1000800"  [label="DDG: el"];
"1000235" -> "1000247"  [label="DDG: el"];
"1000235" -> "1000247"  [label="DDG: ret"];
"1000247" -> "1000278"  [label="DDG: ret"];
"1000247" -> "1000351"  [label="DDG: ret"];
"1000247" -> "1000376"  [label="DDG: ret"];
"1000247" -> "1000411"  [label="DDG: ret"];
"1000247" -> "1000479"  [label="DDG: ret"];
"1000247" -> "1000506"  [label="DDG: ret"];
"1000247" -> "1000580"  [label="DDG: ret"];
"1000247" -> "1000689"  [label="DDG: ret"];
"1000247" -> "1000711"  [label="DDG: ret"];
"1000247" -> "1000749"  [label="DDG: ret"];
"1000247" -> "1000787"  [label="DDG: ret"];
"1000235" -> "1000234"  [label="AST: "];
"1000235" -> "1000240"  [label="CFG: "];
"1000236" -> "1000235"  [label="AST: "];
"1000237" -> "1000235"  [label="AST: "];
"1000238" -> "1000235"  [label="AST: "];
"1000240" -> "1000235"  [label="AST: "];
"1000234" -> "1000235"  [label="CFG: "];
"1000235" -> "1000800"  [label="DDG: ret"];
"1000235" -> "1000800"  [label="DDG: s"];
"1000235" -> "1000800"  [label="DDG: el"];
"1000235" -> "1000800"  [label="DDG: &el"];
"1000235" -> "1000234"  [label="DDG: s"];
"1000235" -> "1000234"  [label="DDG: ret"];
"1000235" -> "1000234"  [label="DDG: &el"];
"1000235" -> "1000234"  [label="DDG: el"];
"1000206" -> "1000235"  [label="DDG: s"];
"1000206" -> "1000235"  [label="DDG: &el"];
"1000124" -> "1000235"  [label="DDG: s"];
"1000230" -> "1000235"  [label="DDG: ret"];
"1000230" -> "1000235"  [label="DDG: el"];
"1000235" -> "1000295"  [label="DDG: s"];
"1000235" -> "1000347"  [label="DDG: s"];
"1000235" -> "1000390"  [label="DDG: s"];
"1000235" -> "1000398"  [label="DDG: &el"];
"1000235" -> "1000411"  [label="DDG: el"];
"1000235" -> "1000413"  [label="DDG: el"];
"1000235" -> "1000422"  [label="DDG: el"];
"1000206" -> "1000205"  [label="AST: "];
"1000206" -> "1000211"  [label="CFG: "];
"1000207" -> "1000206"  [label="AST: "];
"1000208" -> "1000206"  [label="AST: "];
"1000209" -> "1000206"  [label="AST: "];
"1000211" -> "1000206"  [label="AST: "];
"1000205" -> "1000206"  [label="CFG: "];
"1000206" -> "1000800"  [label="DDG: &el"];
"1000206" -> "1000800"  [label="DDG: s"];
"1000206" -> "1000205"  [label="DDG: s"];
"1000206" -> "1000205"  [label="DDG: 0"];
"1000206" -> "1000205"  [label="DDG: &el"];
"1000124" -> "1000206"  [label="DDG: s"];
"1000124" -> "1000123"  [label="AST: "];
"1000124" -> "1000800"  [label="DDG: s"];
"1000124" -> "1000295"  [label="DDG: s"];
"1000124" -> "1000347"  [label="DDG: s"];
"1000124" -> "1000390"  [label="DDG: s"];
"1000124" -> "1000398"  [label="DDG: s"];
"1000124" -> "1000426"  [label="DDG: s"];
"1000124" -> "1000471"  [label="DDG: s"];
"1000124" -> "1000497"  [label="DDG: s"];
"1000124" -> "1000563"  [label="DDG: s"];
"1000124" -> "1000610"  [label="DDG: s"];
"1000124" -> "1000630"  [label="DDG: s"];
"1000230" -> "1000202"  [label="AST: "];
"1000230" -> "1000232"  [label="CFG: "];
"1000231" -> "1000230"  [label="AST: "];
"1000232" -> "1000230"  [label="AST: "];
"1000236" -> "1000230"  [label="CFG: "];
"1000230" -> "1000800"  [label="DDG: s2n(el, ret)"];
"1000227" -> "1000230"  [label="DDG: ret"];
"1000227" -> "1000202"  [label="AST: "];
"1000227" -> "1000229"  [label="CFG: "];
"1000228" -> "1000227"  [label="AST: "];
"1000229" -> "1000227"  [label="AST: "];
"1000231" -> "1000227"  [label="CFG: "];
"1000227" -> "1000800"  [label="DDG: s2n(TLSEXT_TYPE_renegotiate, ret)"];
"1000227" -> "1000800"  [label="DDG: TLSEXT_TYPE_renegotiate"];
"1000219" -> "1000227"  [label="DDG: ret"];
"1000219" -> "1000218"  [label="AST: "];
"1000219" -> "1000224"  [label="CFG: "];
"1000220" -> "1000219"  [label="AST: "];
"1000221" -> "1000219"  [label="AST: "];
"1000224" -> "1000219"  [label="AST: "];
"1000226" -> "1000219"  [label="CFG: "];
"1000228" -> "1000219"  [label="CFG: "];
"1000219" -> "1000800"  [label="DDG: 4 + el"];
"1000219" -> "1000800"  [label="DDG: CHECKLEN(ret, 4 + el, limit)"];
"1000219" -> "1000800"  [label="DDG: ret"];
"1000219" -> "1000800"  [label="DDG: limit"];
"1000191" -> "1000219"  [label="DDG: ret"];
"1000191" -> "1000219"  [label="DDG: limit"];
"1000126" -> "1000219"  [label="DDG: limit"];
"1000219" -> "1000278"  [label="DDG: limit"];
"1000219" -> "1000351"  [label="DDG: limit"];
"1000219" -> "1000376"  [label="DDG: limit"];
"1000219" -> "1000411"  [label="DDG: limit"];
"1000219" -> "1000479"  [label="DDG: limit"];
"1000219" -> "1000506"  [label="DDG: limit"];
"1000219" -> "1000580"  [label="DDG: limit"];
"1000219" -> "1000610"  [label="DDG: limit"];
"1000191" -> "1000190"  [label="AST: "];
"1000191" -> "1000193"  [label="CFG: "];
"1000192" -> "1000191"  [label="AST: "];
"1000193" -> "1000191"  [label="AST: "];
"1000195" -> "1000191"  [label="CFG: "];
"1000199" -> "1000191"  [label="CFG: "];
"1000191" -> "1000800"  [label="DDG: ret >= limit"];
"1000191" -> "1000800"  [label="DDG: limit"];
"1000191" -> "1000800"  [label="DDG: ret"];
"1000187" -> "1000191"  [label="DDG: ret"];
"1000126" -> "1000191"  [label="DDG: limit"];
"1000191" -> "1000278"  [label="DDG: ret"];
"1000191" -> "1000278"  [label="DDG: limit"];
"1000191" -> "1000351"  [label="DDG: ret"];
"1000191" -> "1000351"  [label="DDG: limit"];
"1000191" -> "1000376"  [label="DDG: ret"];
"1000191" -> "1000376"  [label="DDG: limit"];
"1000191" -> "1000411"  [label="DDG: ret"];
"1000191" -> "1000411"  [label="DDG: limit"];
"1000191" -> "1000479"  [label="DDG: ret"];
"1000191" -> "1000479"  [label="DDG: limit"];
"1000191" -> "1000506"  [label="DDG: ret"];
"1000191" -> "1000506"  [label="DDG: limit"];
"1000191" -> "1000580"  [label="DDG: ret"];
"1000191" -> "1000580"  [label="DDG: limit"];
"1000191" -> "1000610"  [label="DDG: limit"];
"1000191" -> "1000689"  [label="DDG: ret"];
"1000191" -> "1000711"  [label="DDG: ret"];
"1000191" -> "1000749"  [label="DDG: ret"];
"1000191" -> "1000787"  [label="DDG: ret"];
"1000187" -> "1000128"  [label="AST: "];
"1000187" -> "1000189"  [label="CFG: "];
"1000188" -> "1000187"  [label="AST: "];
"1000189" -> "1000187"  [label="AST: "];
"1000192" -> "1000187"  [label="CFG: "];
"1000138" -> "1000187"  [label="DDG: ret"];
"1000138" -> "1000128"  [label="AST: "];
"1000138" -> "1000140"  [label="CFG: "];
"1000139" -> "1000138"  [label="AST: "];
"1000140" -> "1000138"  [label="AST: "];
"1000144" -> "1000138"  [label="CFG: "];
"1000138" -> "1000800"  [label="DDG: buf"];
"1000125" -> "1000138"  [label="DDG: buf"];
"1000125" -> "1000123"  [label="AST: "];
"1000125" -> "1000800"  [label="DDG: buf"];
"1000125" -> "1000134"  [label="DDG: buf"];
"1000126" -> "1000123"  [label="AST: "];
"1000126" -> "1000800"  [label="DDG: limit"];
"1000126" -> "1000278"  [label="DDG: limit"];
"1000126" -> "1000351"  [label="DDG: limit"];
"1000126" -> "1000376"  [label="DDG: limit"];
"1000126" -> "1000411"  [label="DDG: limit"];
"1000126" -> "1000479"  [label="DDG: limit"];
"1000126" -> "1000506"  [label="DDG: limit"];
"1000126" -> "1000580"  [label="DDG: limit"];
"1000126" -> "1000610"  [label="DDG: limit"];
"1000126" -> "1000689"  [label="DDG: limit"];
"1000126" -> "1000711"  [label="DDG: limit"];
"1000126" -> "1000749"  [label="DDG: limit"];
"1000287" -> "1000276"  [label="AST: "];
"1000287" -> "1000289"  [label="CFG: "];
"1000288" -> "1000287"  [label="AST: "];
"1000289" -> "1000287"  [label="AST: "];
"1000291" -> "1000287"  [label="CFG: "];
"1000287" -> "1000800"  [label="DDG: s2n(0, ret)"];
"1000287" -> "1000800"  [label="DDG: ret"];
"1000284" -> "1000287"  [label="DDG: ret"];
"1000287" -> "1000351"  [label="DDG: ret"];
"1000287" -> "1000376"  [label="DDG: ret"];
"1000287" -> "1000411"  [label="DDG: ret"];
"1000287" -> "1000479"  [label="DDG: ret"];
"1000287" -> "1000506"  [label="DDG: ret"];
"1000287" -> "1000580"  [label="DDG: ret"];
"1000287" -> "1000689"  [label="DDG: ret"];
"1000287" -> "1000711"  [label="DDG: ret"];
"1000287" -> "1000749"  [label="DDG: ret"];
"1000287" -> "1000787"  [label="DDG: ret"];
"1000284" -> "1000276"  [label="AST: "];
"1000284" -> "1000286"  [label="CFG: "];
"1000285" -> "1000284"  [label="AST: "];
"1000286" -> "1000284"  [label="AST: "];
"1000288" -> "1000284"  [label="CFG: "];
"1000284" -> "1000800"  [label="DDG: TLSEXT_TYPE_server_name"];
"1000284" -> "1000800"  [label="DDG: s2n(TLSEXT_TYPE_server_name, ret)"];
"1000278" -> "1000284"  [label="DDG: ret"];
"1000278" -> "1000277"  [label="AST: "];
"1000278" -> "1000281"  [label="CFG: "];
"1000279" -> "1000278"  [label="AST: "];
"1000280" -> "1000278"  [label="AST: "];
"1000281" -> "1000278"  [label="AST: "];
"1000283" -> "1000278"  [label="CFG: "];
"1000285" -> "1000278"  [label="CFG: "];
"1000278" -> "1000800"  [label="DDG: CHECKLEN(ret, 4, limit)"];
"1000278" -> "1000800"  [label="DDG: limit"];
"1000278" -> "1000800"  [label="DDG: ret"];
"1000278" -> "1000351"  [label="DDG: limit"];
"1000278" -> "1000376"  [label="DDG: limit"];
"1000278" -> "1000411"  [label="DDG: limit"];
"1000278" -> "1000479"  [label="DDG: limit"];
"1000278" -> "1000506"  [label="DDG: limit"];
"1000278" -> "1000580"  [label="DDG: limit"];
"1000278" -> "1000610"  [label="DDG: limit"];
"1000332" -> "1000328"  [label="AST: "];
"1000332" -> "1000334"  [label="CFG: "];
"1000333" -> "1000332"  [label="AST: "];
"1000334" -> "1000332"  [label="AST: "];
"1000328" -> "1000332"  [label="CFG: "];
"1000332" -> "1000328"  [label="DDG: plistlen"];
"1000339" -> "1000292"  [label="AST: "];
"1000339" -> "1000341"  [label="CFG: "];
"1000340" -> "1000339"  [label="AST: "];
"1000341" -> "1000339"  [label="AST: "];
"1000345" -> "1000339"  [label="CFG: "];
"1000339" -> "1000800"  [label="DDG: ret"];
"1000339" -> "1000800"  [label="DDG: plistlen"];
"1000339" -> "1000351"  [label="DDG: ret"];
"1000339" -> "1000376"  [label="DDG: ret"];
"1000339" -> "1000411"  [label="DDG: ret"];
"1000339" -> "1000479"  [label="DDG: ret"];
"1000339" -> "1000506"  [label="DDG: ret"];
"1000339" -> "1000580"  [label="DDG: ret"];
"1000339" -> "1000689"  [label="DDG: ret"];
"1000339" -> "1000711"  [label="DDG: ret"];
"1000339" -> "1000749"  [label="DDG: ret"];
"1000339" -> "1000787"  [label="DDG: ret"];
"1000351" -> "1000350"  [label="AST: "];
"1000351" -> "1000354"  [label="CFG: "];
"1000352" -> "1000351"  [label="AST: "];
"1000353" -> "1000351"  [label="AST: "];
"1000354" -> "1000351"  [label="AST: "];
"1000356" -> "1000351"  [label="CFG: "];
"1000358" -> "1000351"  [label="CFG: "];
"1000351" -> "1000800"  [label="DDG: CHECKLEN(ret, 4, limit)"];
"1000351" -> "1000800"  [label="DDG: ret"];
"1000351" -> "1000800"  [label="DDG: limit"];
"1000351" -> "1000357"  [label="DDG: ret"];
"1000351" -> "1000376"  [label="DDG: limit"];
"1000351" -> "1000411"  [label="DDG: limit"];
"1000351" -> "1000479"  [label="DDG: limit"];
"1000351" -> "1000506"  [label="DDG: limit"];
"1000351" -> "1000580"  [label="DDG: limit"];
"1000351" -> "1000610"  [label="DDG: limit"];
"1000357" -> "1000349"  [label="AST: "];
"1000357" -> "1000359"  [label="CFG: "];
"1000358" -> "1000357"  [label="AST: "];
"1000359" -> "1000357"  [label="AST: "];
"1000361" -> "1000357"  [label="CFG: "];
"1000357" -> "1000800"  [label="DDG: s2n(TLSEXT_TYPE_session_ticket, ret)"];
"1000357" -> "1000800"  [label="DDG: TLSEXT_TYPE_session_ticket"];
"1000357" -> "1000360"  [label="DDG: ret"];
"1000360" -> "1000349"  [label="AST: "];
"1000360" -> "1000362"  [label="CFG: "];
"1000361" -> "1000360"  [label="AST: "];
"1000362" -> "1000360"  [label="AST: "];
"1000372" -> "1000360"  [label="CFG: "];
"1000360" -> "1000800"  [label="DDG: s2n(0, ret)"];
"1000360" -> "1000800"  [label="DDG: ret"];
"1000360" -> "1000376"  [label="DDG: ret"];
"1000360" -> "1000411"  [label="DDG: ret"];
"1000360" -> "1000479"  [label="DDG: ret"];
"1000360" -> "1000506"  [label="DDG: ret"];
"1000360" -> "1000580"  [label="DDG: ret"];
"1000360" -> "1000689"  [label="DDG: ret"];
"1000360" -> "1000711"  [label="DDG: ret"];
"1000360" -> "1000749"  [label="DDG: ret"];
"1000360" -> "1000787"  [label="DDG: ret"];
"1000376" -> "1000375"  [label="AST: "];
"1000376" -> "1000379"  [label="CFG: "];
"1000377" -> "1000376"  [label="AST: "];
"1000378" -> "1000376"  [label="AST: "];
"1000379" -> "1000376"  [label="AST: "];
"1000381" -> "1000376"  [label="CFG: "];
"1000383" -> "1000376"  [label="CFG: "];
"1000376" -> "1000800"  [label="DDG: CHECKLEN(ret, 4, limit)"];
"1000376" -> "1000800"  [label="DDG: ret"];
"1000376" -> "1000800"  [label="DDG: limit"];
"1000376" -> "1000382"  [label="DDG: ret"];
"1000376" -> "1000411"  [label="DDG: limit"];
"1000376" -> "1000479"  [label="DDG: limit"];
"1000376" -> "1000506"  [label="DDG: limit"];
"1000376" -> "1000580"  [label="DDG: limit"];
"1000376" -> "1000610"  [label="DDG: limit"];
"1000382" -> "1000374"  [label="AST: "];
"1000382" -> "1000384"  [label="CFG: "];
"1000383" -> "1000382"  [label="AST: "];
"1000384" -> "1000382"  [label="AST: "];
"1000386" -> "1000382"  [label="CFG: "];
"1000382" -> "1000800"  [label="DDG: TLSEXT_TYPE_status_request"];
"1000382" -> "1000800"  [label="DDG: s2n(TLSEXT_TYPE_status_request, ret)"];
"1000382" -> "1000385"  [label="DDG: ret"];
"1000385" -> "1000374"  [label="AST: "];
"1000385" -> "1000387"  [label="CFG: "];
"1000386" -> "1000385"  [label="AST: "];
"1000387" -> "1000385"  [label="AST: "];
"1000391" -> "1000385"  [label="CFG: "];
"1000385" -> "1000800"  [label="DDG: ret"];
"1000385" -> "1000800"  [label="DDG: s2n(0, ret)"];
"1000385" -> "1000411"  [label="DDG: ret"];
"1000385" -> "1000479"  [label="DDG: ret"];
"1000385" -> "1000506"  [label="DDG: ret"];
"1000385" -> "1000580"  [label="DDG: ret"];
"1000385" -> "1000689"  [label="DDG: ret"];
"1000385" -> "1000711"  [label="DDG: ret"];
"1000385" -> "1000749"  [label="DDG: ret"];
"1000385" -> "1000787"  [label="DDG: ret"];
"1000411" -> "1000410"  [label="AST: "];
"1000411" -> "1000416"  [label="CFG: "];
"1000412" -> "1000411"  [label="AST: "];
"1000413" -> "1000411"  [label="AST: "];
"1000416" -> "1000411"  [label="AST: "];
"1000418" -> "1000411"  [label="CFG: "];
"1000420" -> "1000411"  [label="CFG: "];
"1000411" -> "1000800"  [label="DDG: CHECKLEN(ret, 4 + el, limit)"];
"1000411" -> "1000800"  [label="DDG: ret"];
"1000411" -> "1000800"  [label="DDG: 4 + el"];
"1000411" -> "1000800"  [label="DDG: limit"];
"1000411" -> "1000419"  [label="DDG: ret"];
"1000411" -> "1000479"  [label="DDG: limit"];
"1000411" -> "1000506"  [label="DDG: limit"];
"1000411" -> "1000580"  [label="DDG: limit"];
"1000411" -> "1000610"  [label="DDG: limit"];
"1000419" -> "1000395"  [label="AST: "];
"1000419" -> "1000421"  [label="CFG: "];
"1000420" -> "1000419"  [label="AST: "];
"1000421" -> "1000419"  [label="AST: "];
"1000423" -> "1000419"  [label="CFG: "];
"1000419" -> "1000800"  [label="DDG: TLSEXT_TYPE_use_srtp"];
"1000419" -> "1000800"  [label="DDG: s2n(TLSEXT_TYPE_use_srtp, ret)"];
"1000419" -> "1000422"  [label="DDG: ret"];
"1000422" -> "1000395"  [label="AST: "];
"1000422" -> "1000424"  [label="CFG: "];
"1000423" -> "1000422"  [label="AST: "];
"1000424" -> "1000422"  [label="AST: "];
"1000427" -> "1000422"  [label="CFG: "];
"1000422" -> "1000800"  [label="DDG: s2n(el, ret)"];
"1000422" -> "1000426"  [label="DDG: ret"];
"1000422" -> "1000426"  [label="DDG: el"];
"1000426" -> "1000425"  [label="AST: "];
"1000426" -> "1000431"  [label="CFG: "];
"1000427" -> "1000426"  [label="AST: "];
"1000428" -> "1000426"  [label="AST: "];
"1000429" -> "1000426"  [label="AST: "];
"1000431" -> "1000426"  [label="AST: "];
"1000434" -> "1000426"  [label="CFG: "];
"1000439" -> "1000426"  [label="CFG: "];
"1000426" -> "1000800"  [label="DDG: ret"];
"1000426" -> "1000800"  [label="DDG: s"];
"1000426" -> "1000800"  [label="DDG: ssl_add_serverhello_use_srtp_ext(s, ret, &el, el)"];
"1000426" -> "1000800"  [label="DDG: el"];
"1000426" -> "1000800"  [label="DDG: &el"];
"1000398" -> "1000426"  [label="DDG: s"];
"1000398" -> "1000426"  [label="DDG: &el"];
"1000426" -> "1000438"  [label="DDG: el"];
"1000426" -> "1000438"  [label="DDG: ret"];
"1000426" -> "1000471"  [label="DDG: s"];
"1000426" -> "1000497"  [label="DDG: s"];
"1000438" -> "1000395"  [label="AST: "];
"1000438" -> "1000440"  [label="CFG: "];
"1000439" -> "1000438"  [label="AST: "];
"1000440" -> "1000438"  [label="AST: "];
"1000450" -> "1000438"  [label="CFG: "];
"1000438" -> "1000800"  [label="DDG: el"];
"1000438" -> "1000800"  [label="DDG: ret"];
"1000438" -> "1000479"  [label="DDG: ret"];
"1000438" -> "1000506"  [label="DDG: ret"];
"1000438" -> "1000580"  [label="DDG: ret"];
"1000438" -> "1000689"  [label="DDG: ret"];
"1000438" -> "1000711"  [label="DDG: ret"];
"1000438" -> "1000749"  [label="DDG: ret"];
"1000438" -> "1000787"  [label="DDG: ret"];
"1000479" -> "1000478"  [label="AST: "];
"1000479" -> "1000483"  [label="CFG: "];
"1000480" -> "1000479"  [label="AST: "];
"1000481" -> "1000479"  [label="AST: "];
"1000483" -> "1000479"  [label="AST: "];
"1000485" -> "1000479"  [label="CFG: "];
"1000487" -> "1000479"  [label="CFG: "];
"1000479" -> "1000800"  [label="DDG: limit"];
"1000479" -> "1000800"  [label="DDG: CHECKLEN(ret, sizeof(cryptopro_ext), limit)"];
"1000479" -> "1000800"  [label="DDG: ret"];
"1000479" -> "1000486"  [label="DDG: ret"];
"1000479" -> "1000506"  [label="DDG: limit"];
"1000479" -> "1000580"  [label="DDG: limit"];
"1000479" -> "1000610"  [label="DDG: limit"];
"1000486" -> "1000474"  [label="AST: "];
"1000486" -> "1000489"  [label="CFG: "];
"1000487" -> "1000486"  [label="AST: "];
"1000488" -> "1000486"  [label="AST: "];
"1000489" -> "1000486"  [label="AST: "];
"1000492" -> "1000486"  [label="CFG: "];
"1000486" -> "1000800"  [label="DDG: memcpy(ret, cryptopro_ext, sizeof(cryptopro_ext))"];
"1000486" -> "1000491"  [label="DDG: ret"];
"1000491" -> "1000474"  [label="AST: "];
"1000491" -> "1000493"  [label="CFG: "];
"1000492" -> "1000491"  [label="AST: "];
"1000493" -> "1000491"  [label="AST: "];
"1000498" -> "1000491"  [label="CFG: "];
"1000491" -> "1000800"  [label="DDG: ret"];
"1000491" -> "1000506"  [label="DDG: ret"];
"1000491" -> "1000580"  [label="DDG: ret"];
"1000491" -> "1000689"  [label="DDG: ret"];
"1000491" -> "1000711"  [label="DDG: ret"];
"1000491" -> "1000749"  [label="DDG: ret"];
"1000491" -> "1000787"  [label="DDG: ret"];
"1000506" -> "1000505"  [label="AST: "];
"1000506" -> "1000509"  [label="CFG: "];
"1000507" -> "1000506"  [label="AST: "];
"1000508" -> "1000506"  [label="AST: "];
"1000509" -> "1000506"  [label="AST: "];
"1000511" -> "1000506"  [label="CFG: "];
"1000513" -> "1000506"  [label="CFG: "];
"1000506" -> "1000800"  [label="DDG: limit"];
"1000506" -> "1000800"  [label="DDG: CHECKLEN(ret, 5, limit)"];
"1000506" -> "1000800"  [label="DDG: ret"];
"1000506" -> "1000512"  [label="DDG: ret"];
"1000506" -> "1000580"  [label="DDG: limit"];
"1000506" -> "1000610"  [label="DDG: limit"];
"1000512" -> "1000504"  [label="AST: "];
"1000512" -> "1000514"  [label="CFG: "];
"1000513" -> "1000512"  [label="AST: "];
"1000514" -> "1000512"  [label="AST: "];
"1000516" -> "1000512"  [label="CFG: "];
"1000512" -> "1000800"  [label="DDG: TLSEXT_TYPE_heartbeat"];
"1000512" -> "1000800"  [label="DDG: s2n(TLSEXT_TYPE_heartbeat, ret)"];
"1000512" -> "1000515"  [label="DDG: ret"];
"1000515" -> "1000504"  [label="AST: "];
"1000515" -> "1000517"  [label="CFG: "];
"1000516" -> "1000515"  [label="AST: "];
"1000517" -> "1000515"  [label="AST: "];
"1000521" -> "1000515"  [label="CFG: "];
"1000515" -> "1000800"  [label="DDG: s2n(1, ret)"];
"1000515" -> "1000526"  [label="DDG: ret"];
"1000515" -> "1000532"  [label="DDG: ret"];
"1000526" -> "1000525"  [label="AST: "];
"1000526" -> "1000527"  [label="CFG: "];
"1000527" -> "1000526"  [label="AST: "];
"1000525" -> "1000526"  [label="CFG: "];
"1000526" -> "1000800"  [label="DDG: ret"];
"1000526" -> "1000580"  [label="DDG: ret"];
"1000526" -> "1000689"  [label="DDG: ret"];
"1000526" -> "1000711"  [label="DDG: ret"];
"1000526" -> "1000749"  [label="DDG: ret"];
"1000526" -> "1000787"  [label="DDG: ret"];
"1000580" -> "1000579"  [label="AST: "];
"1000580" -> "1000585"  [label="CFG: "];
"1000581" -> "1000580"  [label="AST: "];
"1000582" -> "1000580"  [label="AST: "];
"1000585" -> "1000580"  [label="AST: "];
"1000587" -> "1000580"  [label="CFG: "];
"1000589" -> "1000580"  [label="CFG: "];
"1000580" -> "1000800"  [label="DDG: CHECKLEN(ret, 4 + npalen, limit)"];
"1000580" -> "1000800"  [label="DDG: 4 + npalen"];
"1000580" -> "1000800"  [label="DDG: ret"];
"1000580" -> "1000800"  [label="DDG: limit"];
"1000532" -> "1000580"  [label="DDG: ret"];
"1000580" -> "1000588"  [label="DDG: ret"];
"1000580" -> "1000610"  [label="DDG: limit"];
"1000588" -> "1000578"  [label="AST: "];
"1000588" -> "1000590"  [label="CFG: "];
"1000589" -> "1000588"  [label="AST: "];
"1000590" -> "1000588"  [label="AST: "];
"1000592" -> "1000588"  [label="CFG: "];
"1000588" -> "1000800"  [label="DDG: TLSEXT_TYPE_next_proto_neg"];
"1000588" -> "1000800"  [label="DDG: s2n(TLSEXT_TYPE_next_proto_neg, ret)"];
"1000588" -> "1000591"  [label="DDG: ret"];
"1000591" -> "1000578"  [label="AST: "];
"1000591" -> "1000593"  [label="CFG: "];
"1000592" -> "1000591"  [label="AST: "];
"1000593" -> "1000591"  [label="AST: "];
"1000595" -> "1000591"  [label="CFG: "];
"1000591" -> "1000800"  [label="DDG: s2n(npalen, ret)"];
"1000591" -> "1000594"  [label="DDG: ret"];
"1000591" -> "1000594"  [label="DDG: npalen"];
"1000594" -> "1000578"  [label="AST: "];
"1000594" -> "1000597"  [label="CFG: "];
"1000595" -> "1000594"  [label="AST: "];
"1000596" -> "1000594"  [label="AST: "];
"1000597" -> "1000594"  [label="AST: "];
"1000599" -> "1000594"  [label="CFG: "];
"1000594" -> "1000800"  [label="DDG: npa"];
"1000594" -> "1000800"  [label="DDG: memcpy(ret, npa, npalen)"];
"1000594" -> "1000598"  [label="DDG: npalen"];
"1000594" -> "1000598"  [label="DDG: ret"];
"1000598" -> "1000578"  [label="AST: "];
"1000598" -> "1000600"  [label="CFG: "];
"1000599" -> "1000598"  [label="AST: "];
"1000600" -> "1000598"  [label="AST: "];
"1000604" -> "1000598"  [label="CFG: "];
"1000598" -> "1000800"  [label="DDG: ret"];
"1000598" -> "1000800"  [label="DDG: npalen"];
"1000598" -> "1000689"  [label="DDG: ret"];
"1000598" -> "1000711"  [label="DDG: ret"];
"1000598" -> "1000749"  [label="DDG: ret"];
"1000598" -> "1000787"  [label="DDG: ret"];
"1000689" -> "1000688"  [label="AST: "];
"1000689" -> "1000692"  [label="CFG: "];
"1000690" -> "1000689"  [label="AST: "];
"1000691" -> "1000689"  [label="AST: "];
"1000692" -> "1000689"  [label="AST: "];
"1000694" -> "1000689"  [label="CFG: "];
"1000696" -> "1000689"  [label="CFG: "];
"1000689" -> "1000800"  [label="DDG: CHECKLEN(ret, 4, limit)"];
"1000689" -> "1000800"  [label="DDG: ret"];
"1000689" -> "1000800"  [label="DDG: limit"];
"1000532" -> "1000689"  [label="DDG: ret"];
"1000610" -> "1000689"  [label="DDG: limit"];
"1000689" -> "1000695"  [label="DDG: ret"];
"1000689" -> "1000711"  [label="DDG: limit"];
"1000689" -> "1000749"  [label="DDG: limit"];
"1000695" -> "1000687"  [label="AST: "];
"1000695" -> "1000697"  [label="CFG: "];
"1000696" -> "1000695"  [label="AST: "];
"1000697" -> "1000695"  [label="AST: "];
"1000699" -> "1000695"  [label="CFG: "];
"1000695" -> "1000800"  [label="DDG: s2n(TLSEXT_TYPE_encrypt_then_mac, ret)"];
"1000695" -> "1000800"  [label="DDG: TLSEXT_TYPE_encrypt_then_mac"];
"1000695" -> "1000698"  [label="DDG: ret"];
"1000698" -> "1000687"  [label="AST: "];
"1000698" -> "1000700"  [label="CFG: "];
"1000699" -> "1000698"  [label="AST: "];
"1000700" -> "1000698"  [label="AST: "];
"1000705" -> "1000698"  [label="CFG: "];
"1000698" -> "1000800"  [label="DDG: s2n(0, ret)"];
"1000698" -> "1000711"  [label="DDG: ret"];
"1000698" -> "1000749"  [label="DDG: ret"];
"1000698" -> "1000787"  [label="DDG: ret"];
"1000711" -> "1000710"  [label="AST: "];
"1000711" -> "1000714"  [label="CFG: "];
"1000712" -> "1000711"  [label="AST: "];
"1000713" -> "1000711"  [label="AST: "];
"1000714" -> "1000711"  [label="AST: "];
"1000716" -> "1000711"  [label="CFG: "];
"1000718" -> "1000711"  [label="CFG: "];
"1000711" -> "1000800"  [label="DDG: limit"];
"1000711" -> "1000800"  [label="DDG: CHECKLEN(ret, 4, limit)"];
"1000711" -> "1000800"  [label="DDG: ret"];
"1000532" -> "1000711"  [label="DDG: ret"];
"1000610" -> "1000711"  [label="DDG: limit"];
"1000711" -> "1000717"  [label="DDG: ret"];
"1000711" -> "1000749"  [label="DDG: limit"];
"1000717" -> "1000709"  [label="AST: "];
"1000717" -> "1000719"  [label="CFG: "];
"1000718" -> "1000717"  [label="AST: "];
"1000719" -> "1000717"  [label="AST: "];
"1000721" -> "1000717"  [label="CFG: "];
"1000717" -> "1000800"  [label="DDG: s2n(TLSEXT_TYPE_extended_master_secret, ret)"];
"1000717" -> "1000800"  [label="DDG: TLSEXT_TYPE_extended_master_secret"];
"1000717" -> "1000720"  [label="DDG: ret"];
"1000720" -> "1000709"  [label="AST: "];
"1000720" -> "1000722"  [label="CFG: "];
"1000721" -> "1000720"  [label="AST: "];
"1000722" -> "1000720"  [label="AST: "];
"1000727" -> "1000720"  [label="CFG: "];
"1000720" -> "1000800"  [label="DDG: s2n(0, ret)"];
"1000720" -> "1000749"  [label="DDG: ret"];
"1000720" -> "1000787"  [label="DDG: ret"];
"1000749" -> "1000748"  [label="AST: "];
"1000749" -> "1000754"  [label="CFG: "];
"1000750" -> "1000749"  [label="AST: "];
"1000751" -> "1000749"  [label="AST: "];
"1000754" -> "1000749"  [label="AST: "];
"1000756" -> "1000749"  [label="CFG: "];
"1000758" -> "1000749"  [label="CFG: "];
"1000749" -> "1000800"  [label="DDG: limit"];
"1000749" -> "1000800"  [label="DDG: 7 + len"];
"1000749" -> "1000800"  [label="DDG: ret"];
"1000749" -> "1000800"  [label="DDG: CHECKLEN(ret, 7 + len, limit)"];
"1000532" -> "1000749"  [label="DDG: ret"];
"1000741" -> "1000749"  [label="DDG: len"];
"1000610" -> "1000749"  [label="DDG: limit"];
"1000749" -> "1000757"  [label="DDG: ret"];
"1000757" -> "1000731"  [label="AST: "];
"1000757" -> "1000759"  [label="CFG: "];
"1000758" -> "1000757"  [label="AST: "];
"1000759" -> "1000757"  [label="AST: "];
"1000762" -> "1000757"  [label="CFG: "];
"1000757" -> "1000800"  [label="DDG: s2n(TLSEXT_TYPE_application_layer_protocol_negotiation, ret)"];
"1000757" -> "1000800"  [label="DDG: TLSEXT_TYPE_application_layer_protocol_negotiation"];
"1000757" -> "1000760"  [label="DDG: ret"];
"1000760" -> "1000731"  [label="AST: "];
"1000760" -> "1000764"  [label="CFG: "];
"1000761" -> "1000760"  [label="AST: "];
"1000764" -> "1000760"  [label="AST: "];
"1000767" -> "1000760"  [label="CFG: "];
"1000760" -> "1000800"  [label="DDG: s2n(3 + len, ret)"];
"1000760" -> "1000800"  [label="DDG: 3 + len"];
"1000741" -> "1000760"  [label="DDG: len"];
"1000760" -> "1000765"  [label="DDG: ret"];
"1000765" -> "1000731"  [label="AST: "];
"1000765" -> "1000769"  [label="CFG: "];
"1000766" -> "1000765"  [label="AST: "];
"1000769" -> "1000765"  [label="AST: "];
"1000773" -> "1000765"  [label="CFG: "];
"1000765" -> "1000800"  [label="DDG: 1 + len"];
"1000765" -> "1000800"  [label="DDG: s2n(1 + len, ret)"];
"1000741" -> "1000765"  [label="DDG: len"];
"1000765" -> "1000772"  [label="DDG: ret"];
"1000772" -> "1000771"  [label="AST: "];
"1000772" -> "1000773"  [label="CFG: "];
"1000773" -> "1000772"  [label="AST: "];
"1000771" -> "1000772"  [label="CFG: "];
"1000772" -> "1000775"  [label="DDG: ret"];
"1000775" -> "1000731"  [label="AST: "];
"1000775" -> "1000778"  [label="CFG: "];
"1000776" -> "1000775"  [label="AST: "];
"1000777" -> "1000775"  [label="AST: "];
"1000778" -> "1000775"  [label="AST: "];
"1000780" -> "1000775"  [label="CFG: "];
"1000775" -> "1000800"  [label="DDG: selected"];
"1000775" -> "1000800"  [label="DDG: memcpy(ret, selected, len)"];
"1000733" -> "1000775"  [label="DDG: selected"];
"1000741" -> "1000775"  [label="DDG: len"];
"1000775" -> "1000779"  [label="DDG: len"];
"1000775" -> "1000779"  [label="DDG: ret"];
"1000779" -> "1000731"  [label="AST: "];
"1000779" -> "1000781"  [label="CFG: "];
"1000780" -> "1000779"  [label="AST: "];
"1000781" -> "1000779"  [label="AST: "];
"1000782" -> "1000779"  [label="CFG: "];
"1000779" -> "1000800"  [label="DDG: len"];
"1000779" -> "1000787"  [label="DDG: ret"];
"1000787" -> "1000785"  [label="AST: "];
"1000787" -> "1000789"  [label="CFG: "];
"1000788" -> "1000787"  [label="AST: "];
"1000789" -> "1000787"  [label="AST: "];
"1000785" -> "1000787"  [label="CFG: "];
"1000787" -> "1000800"  [label="DDG: orig - 2"];
"1000787" -> "1000800"  [label="DDG: ret"];
"1000787" -> "1000784"  [label="DDG: ret"];
"1000787" -> "1000784"  [label="DDG: orig - 2"];
"1000787" -> "1000785"  [label="DDG: ret"];
"1000787" -> "1000785"  [label="DDG: orig - 2"];
"1000532" -> "1000787"  [label="DDG: ret"];
"1000789" -> "1000787"  [label="DDG: orig"];
"1000789" -> "1000787"  [label="DDG: 2"];
"1000787" -> "1000798"  [label="DDG: ret"];
"1000784" -> "1000783"  [label="AST: "];
"1000784" -> "1000792"  [label="CFG: "];
"1000785" -> "1000784"  [label="AST: "];
"1000792" -> "1000784"  [label="AST: "];
"1000794" -> "1000784"  [label="CFG: "];
"1000796" -> "1000784"  [label="CFG: "];
"1000784" -> "1000800"  [label="DDG: (extdatalen = ret - orig - 2) == 0"];
"1000785" -> "1000784"  [label="DDG: extdatalen"];
"1000786" -> "1000785"  [label="AST: "];
"1000792" -> "1000785"  [label="CFG: "];
"1000785" -> "1000800"  [label="DDG: extdatalen"];
"1000785" -> "1000800"  [label="DDG: ret - orig - 2"];
"1000785" -> "1000795"  [label="DDG: extdatalen"];
"1000795" -> "1000128"  [label="AST: "];
"1000795" -> "1000797"  [label="CFG: "];
"1000796" -> "1000795"  [label="AST: "];
"1000797" -> "1000795"  [label="AST: "];
"1000799" -> "1000795"  [label="CFG: "];
"1000795" -> "1000800"  [label="DDG: extdatalen"];
"1000795" -> "1000800"  [label="DDG: s2n(extdatalen, orig)"];
"1000795" -> "1000800"  [label="DDG: orig"];
"1000789" -> "1000795"  [label="DDG: orig"];
"1000798" -> "1000128"  [label="AST: "];
"1000798" -> "1000799"  [label="CFG: "];
"1000799" -> "1000798"  [label="AST: "];
"1000800" -> "1000798"  [label="CFG: "];
"1000798" -> "1000800"  [label="DDG: <RET>"];
"1000799" -> "1000798"  [label="DDG: ret"];
"1000610" -> "1000609"  [label="AST: "];
"1000610" -> "1000616"  [label="CFG: "];
"1000611" -> "1000610"  [label="AST: "];
"1000612" -> "1000610"  [label="AST: "];
"1000613" -> "1000610"  [label="AST: "];
"1000615" -> "1000610"  [label="AST: "];
"1000616" -> "1000610"  [label="AST: "];
"1000609" -> "1000610"  [label="CFG: "];
"1000610" -> "1000800"  [label="DDG: &ret"];
"1000610" -> "1000800"  [label="DDG: al"];
"1000610" -> "1000800"  [label="DDG: s"];
"1000610" -> "1000800"  [label="DDG: limit"];
"1000610" -> "1000609"  [label="DDG: al"];
"1000610" -> "1000609"  [label="DDG: s"];
"1000610" -> "1000609"  [label="DDG: &ret"];
"1000610" -> "1000609"  [label="DDG: 1"];
"1000610" -> "1000609"  [label="DDG: limit"];
"1000497" -> "1000610"  [label="DDG: s"];
"1000563" -> "1000610"  [label="DDG: s"];
"1000127" -> "1000610"  [label="DDG: al"];
"1000610" -> "1000630"  [label="DDG: s"];
"1000609" -> "1000608"  [label="AST: "];
"1000618" -> "1000609"  [label="CFG: "];
"1000623" -> "1000609"  [label="CFG: "];
"1000609" -> "1000800"  [label="DDG: custom_ext_add(s, 1, &ret, limit, al)"];
"1000609" -> "1000800"  [label="DDG: !custom_ext_add(s, 1, &ret, limit, al)"];
"1000630" -> "1000629"  [label="AST: "];
"1000630" -> "1000631"  [label="CFG: "];
"1000631" -> "1000630"  [label="AST: "];
"1000638" -> "1000630"  [label="CFG: "];
"1000629" -> "1000630"  [label="CFG: "];
"1000630" -> "1000800"  [label="DDG: s"];
"1000630" -> "1000629"  [label="DDG: s"];
"1000629" -> "1000628"  [label="AST: "];
"1000629" -> "1000632"  [label="CFG: "];
"1000632" -> "1000629"  [label="AST: "];
"1000682" -> "1000629"  [label="CFG: "];
"1000690" -> "1000629"  [label="CFG: "];
"1000629" -> "1000800"  [label="DDG: SSL_IS_DTLS(s)"];
"1000629" -> "1000800"  [label="DDG: SSL_IS_DTLS(s) || s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12"];
"1000629" -> "1000800"  [label="DDG: s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12"];
"1000632" -> "1000629"  [label="DDG: s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD"];
"1000632" -> "1000629"  [label="DDG: s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12"];
"1000532" -> "1000531"  [label="AST: "];
"1000532" -> "1000533"  [label="CFG: "];
"1000533" -> "1000532"  [label="AST: "];
"1000531" -> "1000532"  [label="CFG: "];
"1000532" -> "1000800"  [label="DDG: ret"];
"1000471" -> "1000470"  [label="AST: "];
"1000471" -> "1000472"  [label="CFG: "];
"1000472" -> "1000471"  [label="AST: "];
"1000473" -> "1000471"  [label="CFG: "];
"1000471" -> "1000800"  [label="DDG: s"];
"1000471" -> "1000470"  [label="DDG: s"];
"1000390" -> "1000471"  [label="DDG: s"];
"1000471" -> "1000497"  [label="DDG: s"];
"1000470" -> "1000442"  [label="AST: "];
"1000470" -> "1000473"  [label="CFG: "];
"1000473" -> "1000470"  [label="AST: "];
"1000442" -> "1000470"  [label="CFG: "];
"1000470" -> "1000800"  [label="DDG: SSL_OP_CRYPTOPRO_TLSEXT_BUG"];
"1000470" -> "1000800"  [label="DDG: SSL_get_options(s)"];
"1000470" -> "1000442"  [label="DDG: SSL_get_options(s)"];
"1000470" -> "1000442"  [label="DDG: SSL_OP_CRYPTOPRO_TLSEXT_BUG"];
"1000442" -> "1000441"  [label="AST: "];
"1000442" -> "1000443"  [label="CFG: "];
"1000443" -> "1000442"  [label="AST: "];
"1000477" -> "1000442"  [label="CFG: "];
"1000498" -> "1000442"  [label="CFG: "];
"1000442" -> "1000800"  [label="DDG: ((s->s3->tmp.new_cipher->id & 0xFFFF) == 0x80\n         || (s->s3->tmp.new_cipher->id & 0xFFFF) == 0x81)\n        && (SSL_get_options(s) & SSL_OP_CRYPTOPRO_TLSEXT_BUG)"];
"1000442" -> "1000800"  [label="DDG: (s->s3->tmp.new_cipher->id & 0xFFFF) == 0x80\n         || (s->s3->tmp.new_cipher->id & 0xFFFF) == 0x81"];
"1000442" -> "1000800"  [label="DDG: SSL_get_options(s) & SSL_OP_CRYPTOPRO_TLSEXT_BUG"];
"1000443" -> "1000442"  [label="DDG: (s->s3->tmp.new_cipher->id & 0xFFFF) == 0x80"];
"1000443" -> "1000442"  [label="DDG: (s->s3->tmp.new_cipher->id & 0xFFFF) == 0x81"];
"1000497" -> "1000496"  [label="AST: "];
"1000497" -> "1000498"  [label="CFG: "];
"1000498" -> "1000497"  [label="AST: "];
"1000501" -> "1000497"  [label="CFG: "];
"1000496" -> "1000497"  [label="CFG: "];
"1000497" -> "1000800"  [label="DDG: s"];
"1000497" -> "1000496"  [label="DDG: s"];
"1000390" -> "1000497"  [label="DDG: s"];
"1000497" -> "1000563"  [label="DDG: s"];
"1000496" -> "1000495"  [label="AST: "];
"1000496" -> "1000499"  [label="CFG: "];
"1000499" -> "1000496"  [label="AST: "];
"1000507" -> "1000496"  [label="CFG: "];
"1000536" -> "1000496"  [label="CFG: "];
"1000496" -> "1000800"  [label="DDG: SSL_IS_DTLS(s) && (s->tlsext_heartbeat & SSL_DTLSEXT_HB_ENABLED)"];
"1000496" -> "1000800"  [label="DDG: SSL_IS_DTLS(s)"];
"1000496" -> "1000800"  [label="DDG: s->tlsext_heartbeat & SSL_DTLSEXT_HB_ENABLED"];
"1000499" -> "1000496"  [label="DDG: s->tlsext_heartbeat"];
"1000499" -> "1000496"  [label="DDG: SSL_DTLSEXT_HB_ENABLED"];
"1000563" -> "1000561"  [label="AST: "];
"1000563" -> "1000569"  [label="CFG: "];
"1000564" -> "1000563"  [label="AST: "];
"1000565" -> "1000563"  [label="AST: "];
"1000567" -> "1000563"  [label="AST: "];
"1000569" -> "1000563"  [label="AST: "];
"1000561" -> "1000563"  [label="CFG: "];
"1000563" -> "1000800"  [label="DDG: s->\n                                              ctx->next_protos_advertised_cb_arg"];
"1000563" -> "1000800"  [label="DDG: &npalen"];
"1000563" -> "1000800"  [label="DDG: &npa"];
"1000563" -> "1000800"  [label="DDG: s"];
"1000563" -> "1000561"  [label="DDG: s"];
"1000563" -> "1000561"  [label="DDG: &npa"];
"1000563" -> "1000561"  [label="DDG: &npalen"];
"1000563" -> "1000561"  [label="DDG: s->\n                                              ctx->next_protos_advertised_cb_arg"];
"1000561" -> "1000557"  [label="AST: "];
"1000562" -> "1000561"  [label="AST: "];
"1000576" -> "1000561"  [label="CFG: "];
"1000561" -> "1000800"  [label="DDG: s->ctx->next_protos_advertised_cb(s, &npa, &npalen,\n                                              s->\n                                              ctx->next_protos_advertised_cb_arg)"];
"1000561" -> "1000575"  [label="DDG: r"];
"1000575" -> "1000574"  [label="AST: "];
"1000575" -> "1000577"  [label="CFG: "];
"1000576" -> "1000575"  [label="AST: "];
"1000577" -> "1000575"  [label="AST: "];
"1000581" -> "1000575"  [label="CFG: "];
"1000611" -> "1000575"  [label="CFG: "];
"1000575" -> "1000800"  [label="DDG: r == SSL_TLSEXT_ERR_OK"];
"1000575" -> "1000800"  [label="DDG: SSL_TLSEXT_ERR_OK"];
"1000575" -> "1000800"  [label="DDG: r"];
}
