digraph "0_openssl_4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2_6@pointer" {
"1000398" [label="(Call,ssl_add_serverhello_use_srtp_ext(s, 0, &el, 0))"];
"1000390" [label="(Call,SSL_IS_DTLS(s))"];
"1000235" [label="(Call,ssl_add_serverhello_renegotiate_ext(s, ret, &el, el))"];
"1000206" [label="(Call,ssl_add_serverhello_renegotiate_ext(s, 0, &el, 0))"];
"1000124" [label="(MethodParameterIn,SSL *s)"];
"1000230" [label="(Call,s2n(el, ret))"];
"1000227" [label="(Call,s2n(TLSEXT_TYPE_renegotiate, ret))"];
"1000219" [label="(Call,CHECKLEN(ret, 4 + el, limit))"];
"1000191" [label="(Call,ret >= limit)"];
"1000187" [label="(Call,ret += 2)"];
"1000138" [label="(Call,*ret = buf)"];
"1000125" [label="(MethodParameterIn,unsigned char *buf)"];
"1000126" [label="(MethodParameterIn,unsigned char *limit)"];
"1000295" [label="(Call,tls1_get_formatlist(s, &plist, &plistlen))"];
"1000347" [label="(Call,tls_use_ticket(s))"];
"1000426" [label="(Call,ssl_add_serverhello_use_srtp_ext(s, ret, &el, el))"];
"1000438" [label="(Call,ret += el)"];
"1000479" [label="(Call,CHECKLEN(ret, sizeof(cryptopro_ext), limit))"];
"1000486" [label="(Call,memcpy(ret, cryptopro_ext, sizeof(cryptopro_ext)))"];
"1000491" [label="(Call,ret += sizeof(cryptopro_ext))"];
"1000506" [label="(Call,CHECKLEN(ret, 5, limit))"];
"1000512" [label="(Call,s2n(TLSEXT_TYPE_heartbeat, ret))"];
"1000515" [label="(Call,s2n(1, ret))"];
"1000526" [label="(Call,ret++)"];
"1000580" [label="(Call,CHECKLEN(ret, 4 + npalen, limit))"];
"1000588" [label="(Call,s2n(TLSEXT_TYPE_next_proto_neg, ret))"];
"1000591" [label="(Call,s2n(npalen, ret))"];
"1000594" [label="(Call,memcpy(ret, npa, npalen))"];
"1000598" [label="(Call,ret += npalen)"];
"1000683" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000689" [label="(Call,s2n(TLSEXT_TYPE_encrypt_then_mac, ret))"];
"1000692" [label="(Call,s2n(0, ret))"];
"1000705" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000711" [label="(Call,s2n(TLSEXT_TYPE_extended_master_secret, ret))"];
"1000714" [label="(Call,s2n(0, ret))"];
"1000743" [label="(Call,CHECKLEN(ret, 7 + len, limit))"];
"1000751" [label="(Call,s2n(TLSEXT_TYPE_application_layer_protocol_negotiation, ret))"];
"1000754" [label="(Call,s2n(3 + len, ret))"];
"1000759" [label="(Call,s2n(1 + len, ret))"];
"1000766" [label="(Call,ret++)"];
"1000769" [label="(Call,memcpy(ret, selected, len))"];
"1000773" [label="(Call,ret += len)"];
"1000781" [label="(Call,ret - orig - 2)"];
"1000778" [label="(Call,(extdatalen = ret - orig - 2) == 0)"];
"1000779" [label="(Call,extdatalen = ret - orig - 2)"];
"1000789" [label="(Call,s2n(extdatalen, orig))"];
"1000792" [label="(Return,return ret;)"];
"1000610" [label="(Call,custom_ext_add(s, 1, &ret, limit, al))"];
"1000609" [label="(Call,!custom_ext_add(s, 1, &ret, limit, al))"];
"1000626" [label="(Call,SSL_IS_DTLS(s))"];
"1000625" [label="(Call,SSL_IS_DTLS(s) || s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)"];
"1000532" [label="(Call,ret++)"];
"1000471" [label="(Call,SSL_get_options(s))"];
"1000470" [label="(Call,SSL_get_options(s) & SSL_OP_CRYPTOPRO_TLSEXT_BUG)"];
"1000442" [label="(Call,((s->s3->tmp.new_cipher->id & 0xFFFF) == 0x80\n         || (s->s3->tmp.new_cipher->id & 0xFFFF) == 0x81)\n        && (SSL_get_options(s) & SSL_OP_CRYPTOPRO_TLSEXT_BUG))"];
"1000497" [label="(Call,SSL_IS_DTLS(s))"];
"1000496" [label="(Call,SSL_IS_DTLS(s) && (s->tlsext_heartbeat & SSL_DTLSEXT_HB_ENABLED))"];
"1000563" [label="(Call,s->ctx->next_protos_advertised_cb(s, &npa, &npalen,\n                                              s->\n                                              ctx->next_protos_advertised_cb_arg))"];
"1000561" [label="(Call,r = s->ctx->next_protos_advertised_cb(s, &npa, &npalen,\n                                              s->\n                                              ctx->next_protos_advertised_cb_arg))"];
"1000575" [label="(Call,r == SSL_TLSEXT_ERR_OK)"];
"1000692" [label="(Call,s2n(0, ret))"];
"1000761" [label="(Literal,1)"];
"1000230" [label="(Call,s2n(el, ret))"];
"1000506" [label="(Call,CHECKLEN(ret, 5, limit))"];
"1000391" [label="(Identifier,s)"];
"1000488" [label="(Identifier,cryptopro_ext)"];
"1000124" [label="(MethodParameterIn,SSL *s)"];
"1000439" [label="(Identifier,ret)"];
"1000753" [label="(Identifier,ret)"];
"1000470" [label="(Call,SSL_get_options(s) & SSL_OP_CRYPTOPRO_TLSEXT_BUG)"];
"1000127" [label="(MethodParameterIn,int *al)"];
"1000232" [label="(Identifier,ret)"];
"1000763" [label="(Identifier,ret)"];
"1000191" [label="(Call,ret >= limit)"];
"1000478" [label="(ControlStructure,if (CHECKLEN(ret, sizeof(cryptopro_ext), limit)))"];
"1000585" [label="(Identifier,limit)"];
"1000422" [label="(Call,s2n(el, ret))"];
"1000689" [label="(Call,s2n(TLSEXT_TYPE_encrypt_then_mac, ret))"];
"1000569" [label="(Call,s->\n                                              ctx->next_protos_advertised_cb_arg)"];
"1000688" [label="(Identifier,NULL)"];
"1000682" [label="(ControlStructure,if (CHECKLEN(ret, 4, limit)))"];
"1000297" [label="(Call,&plist)"];
"1000389" [label="(Call,SSL_IS_DTLS(s) && s->srtp_profile)"];
"1000777" [label="(ControlStructure,if ((extdatalen = ret - orig - 2) == 0))"];
"1000604" [label="(Identifier,s)"];
"1000703" [label="(Block,)"];
"1000206" [label="(Call,ssl_add_serverhello_renegotiate_ext(s, 0, &el, 0))"];
"1000393" [label="(Identifier,s)"];
"1000303" [label="(Identifier,plistlen)"];
"1000608" [label="(ControlStructure,if (!custom_ext_add(s, 1, &ret, limit, al)))"];
"1000296" [label="(Identifier,s)"];
"1000532" [label="(Call,ret++)"];
"1000428" [label="(Identifier,ret)"];
"1000775" [label="(Identifier,len)"];
"1000125" [label="(MethodParameterIn,unsigned char *buf)"];
"1000199" [label="(Identifier,s)"];
"1000202" [label="(Block,)"];
"1000613" [label="(Call,&ret)"];
"1000483" [label="(Identifier,limit)"];
"1000348" [label="(Identifier,s)"];
"1000486" [label="(Call,memcpy(ret, cryptopro_ext, sizeof(cryptopro_ext)))"];
"1000789" [label="(Call,s2n(extdatalen, orig))"];
"1000495" [label="(ControlStructure,if (SSL_IS_DTLS(s) && (s->tlsext_heartbeat & SSL_DTLSEXT_HB_ENABLED)))"];
"1000229" [label="(Identifier,ret)"];
"1000209" [label="(Call,&el)"];
"1000596" [label="(Identifier,npa)"];
"1000769" [label="(Call,memcpy(ret, selected, len))"];
"1000390" [label="(Call,SSL_IS_DTLS(s))"];
"1000425" [label="(ControlStructure,if (ssl_add_serverhello_use_srtp_ext(s, ret, &el, el)))"];
"1000399" [label="(Identifier,s)"];
"1000395" [label="(Block,)"];
"1000774" [label="(Identifier,ret)"];
"1000515" [label="(Call,s2n(1, ret))"];
"1000588" [label="(Call,s2n(TLSEXT_TYPE_next_proto_neg, ret))"];
"1000691" [label="(Identifier,ret)"];
"1000716" [label="(Identifier,ret)"];
"1000533" [label="(Identifier,ret)"];
"1000536" [label="(Identifier,next_proto_neg_seen)"];
"1000192" [label="(Identifier,ret)"];
"1000234" [label="(Call,!ssl_add_serverhello_renegotiate_ext(s, ret, &el, el))"];
"1000312" [label="(Call,CHECKLEN(ret, 5 + plistlen, limit))"];
"1000236" [label="(Identifier,s)"];
"1000712" [label="(Identifier,TLSEXT_TYPE_extended_master_secret)"];
"1000686" [label="(Identifier,limit)"];
"1000144" [label="(Identifier,alg_k)"];
"1000563" [label="(Call,s->ctx->next_protos_advertised_cb(s, &npa, &npalen,\n                                              s->\n                                              ctx->next_protos_advertised_cb_arg))"];
"1000195" [label="(Identifier,NULL)"];
"1000744" [label="(Identifier,ret)"];
"1000231" [label="(Identifier,el)"];
"1000704" [label="(ControlStructure,if (CHECKLEN(ret, 4, limit)))"];
"1000441" [label="(ControlStructure,if (((s->s3->tmp.new_cipher->id & 0xFFFF) == 0x80\n         || (s->s3->tmp.new_cipher->id & 0xFFFF) == 0x81)\n        && (SSL_get_options(s) & SSL_OP_CRYPTOPRO_TLSEXT_BUG)))"];
"1000473" [label="(Identifier,SSL_OP_CRYPTOPRO_TLSEXT_BUG)"];
"1000577" [label="(Identifier,SSL_TLSEXT_ERR_OK)"];
"1000385" [label="(Call,s2n(0, ret))"];
"1000598" [label="(Call,ret += npalen)"];
"1000792" [label="(Return,return ret;)"];
"1000126" [label="(MethodParameterIn,unsigned char *limit)"];
"1000516" [label="(Literal,1)"];
"1000412" [label="(Identifier,ret)"];
"1000735" [label="(Call,len = s->s3->alpn_selected_len)"];
"1000713" [label="(Identifier,ret)"];
"1000438" [label="(Call,ret += el)"];
"1000411" [label="(Call,CHECKLEN(ret, 4 + el, limit))"];
"1000443" [label="(Call,(s->s3->tmp.new_cipher->id & 0xFFFF) == 0x80\n         || (s->s3->tmp.new_cipher->id & 0xFFFF) == 0x81)"];
"1000188" [label="(Identifier,ret)"];
"1000485" [label="(Identifier,NULL)"];
"1000591" [label="(Call,s2n(npalen, ret))"];
"1000612" [label="(Literal,1)"];
"1000187" [label="(Call,ret += 2)"];
"1000770" [label="(Identifier,ret)"];
"1000480" [label="(Identifier,ret)"];
"1000754" [label="(Call,s2n(3 + len, ret))"];
"1000487" [label="(Identifier,ret)"];
"1000295" [label="(Call,tls1_get_formatlist(s, &plist, &plistlen))"];
"1000706" [label="(Identifier,ret)"];
"1000580" [label="(Call,CHECKLEN(ret, 4 + npalen, limit))"];
"1000219" [label="(Call,CHECKLEN(ret, 4 + el, limit))"];
"1000434" [label="(Identifier,SSL_F_SSL_ADD_SERVERHELLO_TLSEXT)"];
"1000489" [label="(Call,sizeof(cryptopro_ext))"];
"1000690" [label="(Identifier,TLSEXT_TYPE_encrypt_then_mac)"];
"1000776" [label="(JumpTarget,done:)"];
"1000501" [label="(Identifier,s)"];
"1000727" [label="(Call,*selected = s->s3->alpn_selected)"];
"1000397" [label="(ControlStructure,if (ssl_add_serverhello_use_srtp_ext(s, 0, &el, 0)))"];
"1000766" [label="(Call,ret++)"];
"1000794" [label="(MethodReturn,unsigned char *)"];
"1000226" [label="(Identifier,NULL)"];
"1000771" [label="(Identifier,selected)"];
"1000592" [label="(Identifier,npalen)"];
"1000758" [label="(Identifier,ret)"];
"1000477" [label="(Identifier,cryptopro_ext)"];
"1000783" [label="(Call,orig - 2)"];
"1000618" [label="(Identifier,NULL)"];
"1000499" [label="(Call,s->tlsext_heartbeat & SSL_DTLSEXT_HB_ENABLED)"];
"1000278" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000595" [label="(Identifier,ret)"];
"1000767" [label="(Identifier,ret)"];
"1000567" [label="(Call,&npalen)"];
"1000610" [label="(Call,custom_ext_add(s, 1, &ret, limit, al))"];
"1000240" [label="(Identifier,el)"];
"1000582" [label="(Call,4 + npalen)"];
"1000609" [label="(Call,!custom_ext_add(s, 1, &ret, limit, al))"];
"1000498" [label="(Identifier,s)"];
"1000527" [label="(Identifier,ret)"];
"1000707" [label="(Literal,4)"];
"1000745" [label="(Call,7 + len)"];
"1000765" [label="(Call,*ret++)"];
"1000752" [label="(Identifier,TLSEXT_TYPE_application_layer_protocol_negotiation)"];
"1000782" [label="(Identifier,ret)"];
"1000575" [label="(Call,r == SSL_TLSEXT_ERR_OK)"];
"1000685" [label="(Literal,4)"];
"1000683" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000505" [label="(ControlStructure,if (CHECKLEN(ret, 5, limit)))"];
"1000526" [label="(Call,ret++)"];
"1000779" [label="(Call,extdatalen = ret - orig - 2)"];
"1000627" [label="(Identifier,s)"];
"1000626" [label="(Call,SSL_IS_DTLS(s))"];
"1000208" [label="(Literal,0)"];
"1000224" [label="(Identifier,limit)"];
"1000513" [label="(Identifier,TLSEXT_TYPE_heartbeat)"];
"1000615" [label="(Identifier,limit)"];
"1000479" [label="(Call,CHECKLEN(ret, sizeof(cryptopro_ext), limit))"];
"1000347" [label="(Call,tls_use_ticket(s))"];
"1000725" [label="(Block,)"];
"1000755" [label="(Call,3 + len)"];
"1000625" [label="(Call,SSL_IS_DTLS(s) || s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)"];
"1000576" [label="(Identifier,r)"];
"1000492" [label="(Identifier,ret)"];
"1000228" [label="(Identifier,TLSEXT_TYPE_renegotiate)"];
"1000218" [label="(ControlStructure,if (CHECKLEN(ret, 4 + el, limit)))"];
"1000748" [label="(Identifier,limit)"];
"1000742" [label="(ControlStructure,if (CHECKLEN(ret, 7 + len, limit)))"];
"1000557" [label="(Block,)"];
"1000406" [label="(Identifier,SSL_F_SSL_ADD_SERVERHELLO_TLSEXT)"];
"1000351" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000401" [label="(Call,&el)"];
"1000207" [label="(Identifier,s)"];
"1000474" [label="(Block,)"];
"1000597" [label="(Identifier,npalen)"];
"1000493" [label="(Call,sizeof(cryptopro_ext))"];
"1000628" [label="(Call,s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)"];
"1000190" [label="(ControlStructure,if (ret >= limit))"];
"1000579" [label="(ControlStructure,if (CHECKLEN(ret, 4 + npalen, limit)))"];
"1000497" [label="(Call,SSL_IS_DTLS(s))"];
"1000750" [label="(Identifier,NULL)"];
"1000531" [label="(Call,*(ret++))"];
"1000134" [label="(Call,*orig = buf)"];
"1000431" [label="(Identifier,el)"];
"1000759" [label="(Call,s2n(1 + len, ret))"];
"1000710" [label="(Identifier,NULL)"];
"1000504" [label="(Block,)"];
"1000235" [label="(Call,ssl_add_serverhello_renegotiate_ext(s, ret, &el, el))"];
"1000714" [label="(Call,s2n(0, ret))"];
"1000398" [label="(Call,ssl_add_serverhello_use_srtp_ext(s, 0, &el, 0))"];
"1000221" [label="(Call,4 + el)"];
"1000581" [label="(Identifier,ret)"];
"1000472" [label="(Identifier,s)"];
"1000616" [label="(Identifier,al)"];
"1000193" [label="(Identifier,limit)"];
"1000788" [label="(Identifier,orig)"];
"1000578" [label="(Block,)"];
"1000238" [label="(Call,&el)"];
"1000220" [label="(Identifier,ret)"];
"1000793" [label="(Identifier,ret)"];
"1000693" [label="(Literal,0)"];
"1000299" [label="(Call,&plistlen)"];
"1000139" [label="(Identifier,ret)"];
"1000481" [label="(Call,sizeof(cryptopro_ext))"];
"1000511" [label="(Identifier,NULL)"];
"1000442" [label="(Call,((s->s3->tmp.new_cipher->id & 0xFFFF) == 0x80\n         || (s->s3->tmp.new_cipher->id & 0xFFFF) == 0x81)\n        && (SSL_get_options(s) & SSL_OP_CRYPTOPRO_TLSEXT_BUG))"];
"1000525" [label="(Call,*(ret++))"];
"1000508" [label="(Literal,5)"];
"1000517" [label="(Identifier,ret)"];
"1000780" [label="(Identifier,extdatalen)"];
"1000621" [label="(Identifier,s)"];
"1000600" [label="(Identifier,npalen)"];
"1000471" [label="(Call,SSL_get_options(s))"];
"1000491" [label="(Call,ret += sizeof(cryptopro_ext))"];
"1000237" [label="(Identifier,ret)"];
"1000343" [label="(Call,s->tlsext_ticket_expected && tls_use_ticket(s))"];
"1000711" [label="(Call,s2n(TLSEXT_TYPE_extended_master_secret, ret))"];
"1000681" [label="(Block,)"];
"1000574" [label="(ControlStructure,if (r == SSL_TLSEXT_ERR_OK))"];
"1000790" [label="(Identifier,extdatalen)"];
"1000778" [label="(Call,(extdatalen = ret - orig - 2) == 0)"];
"1000138" [label="(Call,*ret = buf)"];
"1000450" [label="(Identifier,s)"];
"1000611" [label="(Identifier,s)"];
"1000743" [label="(Call,CHECKLEN(ret, 7 + len, limit))"];
"1000594" [label="(Call,memcpy(ret, npa, npalen))"];
"1000589" [label="(Identifier,TLSEXT_TYPE_next_proto_neg)"];
"1000593" [label="(Identifier,ret)"];
"1000413" [label="(Call,4 + el)"];
"1000227" [label="(Call,s2n(TLSEXT_TYPE_renegotiate, ret))"];
"1000756" [label="(Literal,3)"];
"1000514" [label="(Identifier,ret)"];
"1000507" [label="(Identifier,ret)"];
"1000496" [label="(Call,SSL_IS_DTLS(s) && (s->tlsext_heartbeat & SSL_DTLSEXT_HB_ENABLED))"];
"1000521" [label="(Identifier,s)"];
"1000694" [label="(Identifier,ret)"];
"1000403" [label="(Literal,0)"];
"1000140" [label="(Identifier,buf)"];
"1000561" [label="(Call,r = s->ctx->next_protos_advertised_cb(s, &npa, &npalen,\n                                              s->\n                                              ctx->next_protos_advertised_cb_arg))"];
"1000205" [label="(Call,!ssl_add_serverhello_renegotiate_ext(s, 0, &el, 0))"];
"1000360" [label="(Call,s2n(0, ret))"];
"1000562" [label="(Identifier,r)"];
"1000287" [label="(Call,s2n(0, ret))"];
"1000590" [label="(Identifier,ret)"];
"1000772" [label="(Identifier,len)"];
"1000786" [label="(Literal,0)"];
"1000376" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000512" [label="(Call,s2n(TLSEXT_TYPE_heartbeat, ret))"];
"1000587" [label="(Identifier,NULL)"];
"1000791" [label="(Identifier,orig)"];
"1000624" [label="(ControlStructure,if (SSL_IS_DTLS(s) || s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12))"];
"1000339" [label="(Call,ret += plistlen)"];
"1000427" [label="(Identifier,s)"];
"1000400" [label="(Literal,0)"];
"1000599" [label="(Identifier,ret)"];
"1000509" [label="(Identifier,limit)"];
"1000292" [label="(Block,)"];
"1000773" [label="(Call,ret += len)"];
"1000564" [label="(Identifier,s)"];
"1000211" [label="(Literal,0)"];
"1000760" [label="(Call,1 + len)"];
"1000705" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000247" [label="(Call,ret += el)"];
"1000440" [label="(Identifier,el)"];
"1000634" [label="(Identifier,s)"];
"1000426" [label="(Call,ssl_add_serverhello_use_srtp_ext(s, ret, &el, el))"];
"1000677" [label="(Identifier,s)"];
"1000565" [label="(Call,&npa)"];
"1000781" [label="(Call,ret - orig - 2)"];
"1000189" [label="(Literal,2)"];
"1000684" [label="(Identifier,ret)"];
"1000699" [label="(Identifier,s)"];
"1000715" [label="(Literal,0)"];
"1000721" [label="(Identifier,s)"];
"1000751" [label="(Call,s2n(TLSEXT_TYPE_application_layer_protocol_negotiation, ret))"];
"1000429" [label="(Call,&el)"];
"1000128" [label="(Block,)"];
"1000708" [label="(Identifier,limit)"];
"1000398" -> "1000397"  [label="AST: "];
"1000398" -> "1000403"  [label="CFG: "];
"1000399" -> "1000398"  [label="AST: "];
"1000400" -> "1000398"  [label="AST: "];
"1000401" -> "1000398"  [label="AST: "];
"1000403" -> "1000398"  [label="AST: "];
"1000406" -> "1000398"  [label="CFG: "];
"1000412" -> "1000398"  [label="CFG: "];
"1000398" -> "1000794"  [label="DDG: ssl_add_serverhello_use_srtp_ext(s, 0, &el, 0)"];
"1000398" -> "1000794"  [label="DDG: &el"];
"1000398" -> "1000794"  [label="DDG: s"];
"1000390" -> "1000398"  [label="DDG: s"];
"1000124" -> "1000398"  [label="DDG: s"];
"1000235" -> "1000398"  [label="DDG: &el"];
"1000398" -> "1000426"  [label="DDG: s"];
"1000398" -> "1000426"  [label="DDG: &el"];
"1000390" -> "1000389"  [label="AST: "];
"1000390" -> "1000391"  [label="CFG: "];
"1000391" -> "1000390"  [label="AST: "];
"1000393" -> "1000390"  [label="CFG: "];
"1000389" -> "1000390"  [label="CFG: "];
"1000390" -> "1000794"  [label="DDG: s"];
"1000390" -> "1000389"  [label="DDG: s"];
"1000235" -> "1000390"  [label="DDG: s"];
"1000295" -> "1000390"  [label="DDG: s"];
"1000347" -> "1000390"  [label="DDG: s"];
"1000124" -> "1000390"  [label="DDG: s"];
"1000390" -> "1000471"  [label="DDG: s"];
"1000390" -> "1000497"  [label="DDG: s"];
"1000235" -> "1000234"  [label="AST: "];
"1000235" -> "1000240"  [label="CFG: "];
"1000236" -> "1000235"  [label="AST: "];
"1000237" -> "1000235"  [label="AST: "];
"1000238" -> "1000235"  [label="AST: "];
"1000240" -> "1000235"  [label="AST: "];
"1000234" -> "1000235"  [label="CFG: "];
"1000235" -> "1000794"  [label="DDG: ret"];
"1000235" -> "1000794"  [label="DDG: s"];
"1000235" -> "1000794"  [label="DDG: el"];
"1000235" -> "1000794"  [label="DDG: &el"];
"1000235" -> "1000234"  [label="DDG: s"];
"1000235" -> "1000234"  [label="DDG: ret"];
"1000235" -> "1000234"  [label="DDG: &el"];
"1000235" -> "1000234"  [label="DDG: el"];
"1000206" -> "1000235"  [label="DDG: s"];
"1000206" -> "1000235"  [label="DDG: &el"];
"1000124" -> "1000235"  [label="DDG: s"];
"1000230" -> "1000235"  [label="DDG: ret"];
"1000230" -> "1000235"  [label="DDG: el"];
"1000235" -> "1000247"  [label="DDG: el"];
"1000235" -> "1000247"  [label="DDG: ret"];
"1000235" -> "1000295"  [label="DDG: s"];
"1000235" -> "1000347"  [label="DDG: s"];
"1000235" -> "1000411"  [label="DDG: el"];
"1000235" -> "1000413"  [label="DDG: el"];
"1000235" -> "1000422"  [label="DDG: el"];
"1000206" -> "1000205"  [label="AST: "];
"1000206" -> "1000211"  [label="CFG: "];
"1000207" -> "1000206"  [label="AST: "];
"1000208" -> "1000206"  [label="AST: "];
"1000209" -> "1000206"  [label="AST: "];
"1000211" -> "1000206"  [label="AST: "];
"1000205" -> "1000206"  [label="CFG: "];
"1000206" -> "1000794"  [label="DDG: &el"];
"1000206" -> "1000794"  [label="DDG: s"];
"1000206" -> "1000205"  [label="DDG: s"];
"1000206" -> "1000205"  [label="DDG: 0"];
"1000206" -> "1000205"  [label="DDG: &el"];
"1000124" -> "1000206"  [label="DDG: s"];
"1000124" -> "1000123"  [label="AST: "];
"1000124" -> "1000794"  [label="DDG: s"];
"1000124" -> "1000295"  [label="DDG: s"];
"1000124" -> "1000347"  [label="DDG: s"];
"1000124" -> "1000426"  [label="DDG: s"];
"1000124" -> "1000471"  [label="DDG: s"];
"1000124" -> "1000497"  [label="DDG: s"];
"1000124" -> "1000563"  [label="DDG: s"];
"1000124" -> "1000610"  [label="DDG: s"];
"1000124" -> "1000626"  [label="DDG: s"];
"1000230" -> "1000202"  [label="AST: "];
"1000230" -> "1000232"  [label="CFG: "];
"1000231" -> "1000230"  [label="AST: "];
"1000232" -> "1000230"  [label="AST: "];
"1000236" -> "1000230"  [label="CFG: "];
"1000230" -> "1000794"  [label="DDG: s2n(el, ret)"];
"1000227" -> "1000230"  [label="DDG: ret"];
"1000227" -> "1000202"  [label="AST: "];
"1000227" -> "1000229"  [label="CFG: "];
"1000228" -> "1000227"  [label="AST: "];
"1000229" -> "1000227"  [label="AST: "];
"1000231" -> "1000227"  [label="CFG: "];
"1000227" -> "1000794"  [label="DDG: s2n(TLSEXT_TYPE_renegotiate, ret)"];
"1000227" -> "1000794"  [label="DDG: TLSEXT_TYPE_renegotiate"];
"1000219" -> "1000227"  [label="DDG: ret"];
"1000219" -> "1000218"  [label="AST: "];
"1000219" -> "1000224"  [label="CFG: "];
"1000220" -> "1000219"  [label="AST: "];
"1000221" -> "1000219"  [label="AST: "];
"1000224" -> "1000219"  [label="AST: "];
"1000226" -> "1000219"  [label="CFG: "];
"1000228" -> "1000219"  [label="CFG: "];
"1000219" -> "1000794"  [label="DDG: 4 + el"];
"1000219" -> "1000794"  [label="DDG: CHECKLEN(ret, 4 + el, limit)"];
"1000219" -> "1000794"  [label="DDG: ret"];
"1000219" -> "1000794"  [label="DDG: limit"];
"1000191" -> "1000219"  [label="DDG: ret"];
"1000191" -> "1000219"  [label="DDG: limit"];
"1000126" -> "1000219"  [label="DDG: limit"];
"1000219" -> "1000278"  [label="DDG: limit"];
"1000219" -> "1000312"  [label="DDG: limit"];
"1000219" -> "1000351"  [label="DDG: limit"];
"1000219" -> "1000376"  [label="DDG: limit"];
"1000219" -> "1000411"  [label="DDG: limit"];
"1000219" -> "1000479"  [label="DDG: limit"];
"1000219" -> "1000506"  [label="DDG: limit"];
"1000219" -> "1000580"  [label="DDG: limit"];
"1000219" -> "1000610"  [label="DDG: limit"];
"1000191" -> "1000190"  [label="AST: "];
"1000191" -> "1000193"  [label="CFG: "];
"1000192" -> "1000191"  [label="AST: "];
"1000193" -> "1000191"  [label="AST: "];
"1000195" -> "1000191"  [label="CFG: "];
"1000199" -> "1000191"  [label="CFG: "];
"1000191" -> "1000794"  [label="DDG: ret >= limit"];
"1000191" -> "1000794"  [label="DDG: limit"];
"1000191" -> "1000794"  [label="DDG: ret"];
"1000187" -> "1000191"  [label="DDG: ret"];
"1000126" -> "1000191"  [label="DDG: limit"];
"1000191" -> "1000278"  [label="DDG: ret"];
"1000191" -> "1000278"  [label="DDG: limit"];
"1000191" -> "1000312"  [label="DDG: ret"];
"1000191" -> "1000312"  [label="DDG: limit"];
"1000191" -> "1000351"  [label="DDG: ret"];
"1000191" -> "1000351"  [label="DDG: limit"];
"1000191" -> "1000376"  [label="DDG: ret"];
"1000191" -> "1000376"  [label="DDG: limit"];
"1000191" -> "1000411"  [label="DDG: ret"];
"1000191" -> "1000411"  [label="DDG: limit"];
"1000191" -> "1000479"  [label="DDG: ret"];
"1000191" -> "1000479"  [label="DDG: limit"];
"1000191" -> "1000506"  [label="DDG: ret"];
"1000191" -> "1000506"  [label="DDG: limit"];
"1000191" -> "1000580"  [label="DDG: ret"];
"1000191" -> "1000580"  [label="DDG: limit"];
"1000191" -> "1000610"  [label="DDG: limit"];
"1000191" -> "1000683"  [label="DDG: ret"];
"1000191" -> "1000705"  [label="DDG: ret"];
"1000191" -> "1000743"  [label="DDG: ret"];
"1000191" -> "1000781"  [label="DDG: ret"];
"1000187" -> "1000128"  [label="AST: "];
"1000187" -> "1000189"  [label="CFG: "];
"1000188" -> "1000187"  [label="AST: "];
"1000189" -> "1000187"  [label="AST: "];
"1000192" -> "1000187"  [label="CFG: "];
"1000138" -> "1000187"  [label="DDG: ret"];
"1000138" -> "1000128"  [label="AST: "];
"1000138" -> "1000140"  [label="CFG: "];
"1000139" -> "1000138"  [label="AST: "];
"1000140" -> "1000138"  [label="AST: "];
"1000144" -> "1000138"  [label="CFG: "];
"1000138" -> "1000794"  [label="DDG: buf"];
"1000125" -> "1000138"  [label="DDG: buf"];
"1000125" -> "1000123"  [label="AST: "];
"1000125" -> "1000794"  [label="DDG: buf"];
"1000125" -> "1000134"  [label="DDG: buf"];
"1000126" -> "1000123"  [label="AST: "];
"1000126" -> "1000794"  [label="DDG: limit"];
"1000126" -> "1000278"  [label="DDG: limit"];
"1000126" -> "1000312"  [label="DDG: limit"];
"1000126" -> "1000351"  [label="DDG: limit"];
"1000126" -> "1000376"  [label="DDG: limit"];
"1000126" -> "1000411"  [label="DDG: limit"];
"1000126" -> "1000479"  [label="DDG: limit"];
"1000126" -> "1000506"  [label="DDG: limit"];
"1000126" -> "1000580"  [label="DDG: limit"];
"1000126" -> "1000610"  [label="DDG: limit"];
"1000126" -> "1000683"  [label="DDG: limit"];
"1000126" -> "1000705"  [label="DDG: limit"];
"1000126" -> "1000743"  [label="DDG: limit"];
"1000295" -> "1000292"  [label="AST: "];
"1000295" -> "1000299"  [label="CFG: "];
"1000296" -> "1000295"  [label="AST: "];
"1000297" -> "1000295"  [label="AST: "];
"1000299" -> "1000295"  [label="AST: "];
"1000303" -> "1000295"  [label="CFG: "];
"1000295" -> "1000794"  [label="DDG: s"];
"1000295" -> "1000794"  [label="DDG: &plistlen"];
"1000295" -> "1000794"  [label="DDG: &plist"];
"1000295" -> "1000794"  [label="DDG: tls1_get_formatlist(s, &plist, &plistlen)"];
"1000295" -> "1000347"  [label="DDG: s"];
"1000347" -> "1000343"  [label="AST: "];
"1000347" -> "1000348"  [label="CFG: "];
"1000348" -> "1000347"  [label="AST: "];
"1000343" -> "1000347"  [label="CFG: "];
"1000347" -> "1000794"  [label="DDG: s"];
"1000347" -> "1000343"  [label="DDG: s"];
"1000426" -> "1000425"  [label="AST: "];
"1000426" -> "1000431"  [label="CFG: "];
"1000427" -> "1000426"  [label="AST: "];
"1000428" -> "1000426"  [label="AST: "];
"1000429" -> "1000426"  [label="AST: "];
"1000431" -> "1000426"  [label="AST: "];
"1000434" -> "1000426"  [label="CFG: "];
"1000439" -> "1000426"  [label="CFG: "];
"1000426" -> "1000794"  [label="DDG: ret"];
"1000426" -> "1000794"  [label="DDG: s"];
"1000426" -> "1000794"  [label="DDG: ssl_add_serverhello_use_srtp_ext(s, ret, &el, el)"];
"1000426" -> "1000794"  [label="DDG: el"];
"1000426" -> "1000794"  [label="DDG: &el"];
"1000422" -> "1000426"  [label="DDG: ret"];
"1000422" -> "1000426"  [label="DDG: el"];
"1000426" -> "1000438"  [label="DDG: el"];
"1000426" -> "1000438"  [label="DDG: ret"];
"1000426" -> "1000471"  [label="DDG: s"];
"1000426" -> "1000497"  [label="DDG: s"];
"1000438" -> "1000395"  [label="AST: "];
"1000438" -> "1000440"  [label="CFG: "];
"1000439" -> "1000438"  [label="AST: "];
"1000440" -> "1000438"  [label="AST: "];
"1000450" -> "1000438"  [label="CFG: "];
"1000438" -> "1000794"  [label="DDG: el"];
"1000438" -> "1000794"  [label="DDG: ret"];
"1000438" -> "1000479"  [label="DDG: ret"];
"1000438" -> "1000506"  [label="DDG: ret"];
"1000438" -> "1000580"  [label="DDG: ret"];
"1000438" -> "1000683"  [label="DDG: ret"];
"1000438" -> "1000705"  [label="DDG: ret"];
"1000438" -> "1000743"  [label="DDG: ret"];
"1000438" -> "1000781"  [label="DDG: ret"];
"1000479" -> "1000478"  [label="AST: "];
"1000479" -> "1000483"  [label="CFG: "];
"1000480" -> "1000479"  [label="AST: "];
"1000481" -> "1000479"  [label="AST: "];
"1000483" -> "1000479"  [label="AST: "];
"1000485" -> "1000479"  [label="CFG: "];
"1000487" -> "1000479"  [label="CFG: "];
"1000479" -> "1000794"  [label="DDG: limit"];
"1000479" -> "1000794"  [label="DDG: CHECKLEN(ret, sizeof(cryptopro_ext), limit)"];
"1000479" -> "1000794"  [label="DDG: ret"];
"1000247" -> "1000479"  [label="DDG: ret"];
"1000287" -> "1000479"  [label="DDG: ret"];
"1000385" -> "1000479"  [label="DDG: ret"];
"1000339" -> "1000479"  [label="DDG: ret"];
"1000360" -> "1000479"  [label="DDG: ret"];
"1000376" -> "1000479"  [label="DDG: limit"];
"1000411" -> "1000479"  [label="DDG: limit"];
"1000351" -> "1000479"  [label="DDG: limit"];
"1000278" -> "1000479"  [label="DDG: limit"];
"1000312" -> "1000479"  [label="DDG: limit"];
"1000479" -> "1000486"  [label="DDG: ret"];
"1000479" -> "1000506"  [label="DDG: limit"];
"1000479" -> "1000580"  [label="DDG: limit"];
"1000479" -> "1000610"  [label="DDG: limit"];
"1000486" -> "1000474"  [label="AST: "];
"1000486" -> "1000489"  [label="CFG: "];
"1000487" -> "1000486"  [label="AST: "];
"1000488" -> "1000486"  [label="AST: "];
"1000489" -> "1000486"  [label="AST: "];
"1000492" -> "1000486"  [label="CFG: "];
"1000486" -> "1000794"  [label="DDG: memcpy(ret, cryptopro_ext, sizeof(cryptopro_ext))"];
"1000486" -> "1000491"  [label="DDG: ret"];
"1000491" -> "1000474"  [label="AST: "];
"1000491" -> "1000493"  [label="CFG: "];
"1000492" -> "1000491"  [label="AST: "];
"1000493" -> "1000491"  [label="AST: "];
"1000498" -> "1000491"  [label="CFG: "];
"1000491" -> "1000794"  [label="DDG: ret"];
"1000491" -> "1000506"  [label="DDG: ret"];
"1000491" -> "1000580"  [label="DDG: ret"];
"1000491" -> "1000683"  [label="DDG: ret"];
"1000491" -> "1000705"  [label="DDG: ret"];
"1000491" -> "1000743"  [label="DDG: ret"];
"1000491" -> "1000781"  [label="DDG: ret"];
"1000506" -> "1000505"  [label="AST: "];
"1000506" -> "1000509"  [label="CFG: "];
"1000507" -> "1000506"  [label="AST: "];
"1000508" -> "1000506"  [label="AST: "];
"1000509" -> "1000506"  [label="AST: "];
"1000511" -> "1000506"  [label="CFG: "];
"1000513" -> "1000506"  [label="CFG: "];
"1000506" -> "1000794"  [label="DDG: limit"];
"1000506" -> "1000794"  [label="DDG: CHECKLEN(ret, 5, limit)"];
"1000506" -> "1000794"  [label="DDG: ret"];
"1000247" -> "1000506"  [label="DDG: ret"];
"1000287" -> "1000506"  [label="DDG: ret"];
"1000385" -> "1000506"  [label="DDG: ret"];
"1000339" -> "1000506"  [label="DDG: ret"];
"1000360" -> "1000506"  [label="DDG: ret"];
"1000376" -> "1000506"  [label="DDG: limit"];
"1000411" -> "1000506"  [label="DDG: limit"];
"1000351" -> "1000506"  [label="DDG: limit"];
"1000278" -> "1000506"  [label="DDG: limit"];
"1000312" -> "1000506"  [label="DDG: limit"];
"1000506" -> "1000512"  [label="DDG: ret"];
"1000506" -> "1000580"  [label="DDG: limit"];
"1000506" -> "1000610"  [label="DDG: limit"];
"1000512" -> "1000504"  [label="AST: "];
"1000512" -> "1000514"  [label="CFG: "];
"1000513" -> "1000512"  [label="AST: "];
"1000514" -> "1000512"  [label="AST: "];
"1000516" -> "1000512"  [label="CFG: "];
"1000512" -> "1000794"  [label="DDG: TLSEXT_TYPE_heartbeat"];
"1000512" -> "1000794"  [label="DDG: s2n(TLSEXT_TYPE_heartbeat, ret)"];
"1000512" -> "1000515"  [label="DDG: ret"];
"1000515" -> "1000504"  [label="AST: "];
"1000515" -> "1000517"  [label="CFG: "];
"1000516" -> "1000515"  [label="AST: "];
"1000517" -> "1000515"  [label="AST: "];
"1000521" -> "1000515"  [label="CFG: "];
"1000515" -> "1000794"  [label="DDG: s2n(1, ret)"];
"1000515" -> "1000526"  [label="DDG: ret"];
"1000515" -> "1000532"  [label="DDG: ret"];
"1000526" -> "1000525"  [label="AST: "];
"1000526" -> "1000527"  [label="CFG: "];
"1000527" -> "1000526"  [label="AST: "];
"1000525" -> "1000526"  [label="CFG: "];
"1000526" -> "1000794"  [label="DDG: ret"];
"1000526" -> "1000580"  [label="DDG: ret"];
"1000526" -> "1000683"  [label="DDG: ret"];
"1000526" -> "1000705"  [label="DDG: ret"];
"1000526" -> "1000743"  [label="DDG: ret"];
"1000526" -> "1000781"  [label="DDG: ret"];
"1000580" -> "1000579"  [label="AST: "];
"1000580" -> "1000585"  [label="CFG: "];
"1000581" -> "1000580"  [label="AST: "];
"1000582" -> "1000580"  [label="AST: "];
"1000585" -> "1000580"  [label="AST: "];
"1000587" -> "1000580"  [label="CFG: "];
"1000589" -> "1000580"  [label="CFG: "];
"1000580" -> "1000794"  [label="DDG: CHECKLEN(ret, 4 + npalen, limit)"];
"1000580" -> "1000794"  [label="DDG: 4 + npalen"];
"1000580" -> "1000794"  [label="DDG: ret"];
"1000580" -> "1000794"  [label="DDG: limit"];
"1000247" -> "1000580"  [label="DDG: ret"];
"1000532" -> "1000580"  [label="DDG: ret"];
"1000287" -> "1000580"  [label="DDG: ret"];
"1000385" -> "1000580"  [label="DDG: ret"];
"1000339" -> "1000580"  [label="DDG: ret"];
"1000360" -> "1000580"  [label="DDG: ret"];
"1000376" -> "1000580"  [label="DDG: limit"];
"1000411" -> "1000580"  [label="DDG: limit"];
"1000351" -> "1000580"  [label="DDG: limit"];
"1000278" -> "1000580"  [label="DDG: limit"];
"1000312" -> "1000580"  [label="DDG: limit"];
"1000580" -> "1000588"  [label="DDG: ret"];
"1000580" -> "1000610"  [label="DDG: limit"];
"1000588" -> "1000578"  [label="AST: "];
"1000588" -> "1000590"  [label="CFG: "];
"1000589" -> "1000588"  [label="AST: "];
"1000590" -> "1000588"  [label="AST: "];
"1000592" -> "1000588"  [label="CFG: "];
"1000588" -> "1000794"  [label="DDG: TLSEXT_TYPE_next_proto_neg"];
"1000588" -> "1000794"  [label="DDG: s2n(TLSEXT_TYPE_next_proto_neg, ret)"];
"1000588" -> "1000591"  [label="DDG: ret"];
"1000591" -> "1000578"  [label="AST: "];
"1000591" -> "1000593"  [label="CFG: "];
"1000592" -> "1000591"  [label="AST: "];
"1000593" -> "1000591"  [label="AST: "];
"1000595" -> "1000591"  [label="CFG: "];
"1000591" -> "1000794"  [label="DDG: s2n(npalen, ret)"];
"1000591" -> "1000594"  [label="DDG: ret"];
"1000591" -> "1000594"  [label="DDG: npalen"];
"1000594" -> "1000578"  [label="AST: "];
"1000594" -> "1000597"  [label="CFG: "];
"1000595" -> "1000594"  [label="AST: "];
"1000596" -> "1000594"  [label="AST: "];
"1000597" -> "1000594"  [label="AST: "];
"1000599" -> "1000594"  [label="CFG: "];
"1000594" -> "1000794"  [label="DDG: npa"];
"1000594" -> "1000794"  [label="DDG: memcpy(ret, npa, npalen)"];
"1000594" -> "1000598"  [label="DDG: npalen"];
"1000594" -> "1000598"  [label="DDG: ret"];
"1000598" -> "1000578"  [label="AST: "];
"1000598" -> "1000600"  [label="CFG: "];
"1000599" -> "1000598"  [label="AST: "];
"1000600" -> "1000598"  [label="AST: "];
"1000604" -> "1000598"  [label="CFG: "];
"1000598" -> "1000794"  [label="DDG: ret"];
"1000598" -> "1000794"  [label="DDG: npalen"];
"1000598" -> "1000683"  [label="DDG: ret"];
"1000598" -> "1000705"  [label="DDG: ret"];
"1000598" -> "1000743"  [label="DDG: ret"];
"1000598" -> "1000781"  [label="DDG: ret"];
"1000683" -> "1000682"  [label="AST: "];
"1000683" -> "1000686"  [label="CFG: "];
"1000684" -> "1000683"  [label="AST: "];
"1000685" -> "1000683"  [label="AST: "];
"1000686" -> "1000683"  [label="AST: "];
"1000688" -> "1000683"  [label="CFG: "];
"1000690" -> "1000683"  [label="CFG: "];
"1000683" -> "1000794"  [label="DDG: ret"];
"1000683" -> "1000794"  [label="DDG: CHECKLEN(ret, 4, limit)"];
"1000683" -> "1000794"  [label="DDG: limit"];
"1000247" -> "1000683"  [label="DDG: ret"];
"1000532" -> "1000683"  [label="DDG: ret"];
"1000287" -> "1000683"  [label="DDG: ret"];
"1000385" -> "1000683"  [label="DDG: ret"];
"1000339" -> "1000683"  [label="DDG: ret"];
"1000360" -> "1000683"  [label="DDG: ret"];
"1000610" -> "1000683"  [label="DDG: limit"];
"1000683" -> "1000689"  [label="DDG: ret"];
"1000683" -> "1000705"  [label="DDG: limit"];
"1000683" -> "1000743"  [label="DDG: limit"];
"1000689" -> "1000681"  [label="AST: "];
"1000689" -> "1000691"  [label="CFG: "];
"1000690" -> "1000689"  [label="AST: "];
"1000691" -> "1000689"  [label="AST: "];
"1000693" -> "1000689"  [label="CFG: "];
"1000689" -> "1000794"  [label="DDG: s2n(TLSEXT_TYPE_encrypt_then_mac, ret)"];
"1000689" -> "1000794"  [label="DDG: TLSEXT_TYPE_encrypt_then_mac"];
"1000689" -> "1000692"  [label="DDG: ret"];
"1000692" -> "1000681"  [label="AST: "];
"1000692" -> "1000694"  [label="CFG: "];
"1000693" -> "1000692"  [label="AST: "];
"1000694" -> "1000692"  [label="AST: "];
"1000699" -> "1000692"  [label="CFG: "];
"1000692" -> "1000794"  [label="DDG: s2n(0, ret)"];
"1000692" -> "1000705"  [label="DDG: ret"];
"1000692" -> "1000743"  [label="DDG: ret"];
"1000692" -> "1000781"  [label="DDG: ret"];
"1000705" -> "1000704"  [label="AST: "];
"1000705" -> "1000708"  [label="CFG: "];
"1000706" -> "1000705"  [label="AST: "];
"1000707" -> "1000705"  [label="AST: "];
"1000708" -> "1000705"  [label="AST: "];
"1000710" -> "1000705"  [label="CFG: "];
"1000712" -> "1000705"  [label="CFG: "];
"1000705" -> "1000794"  [label="DDG: limit"];
"1000705" -> "1000794"  [label="DDG: ret"];
"1000705" -> "1000794"  [label="DDG: CHECKLEN(ret, 4, limit)"];
"1000247" -> "1000705"  [label="DDG: ret"];
"1000532" -> "1000705"  [label="DDG: ret"];
"1000287" -> "1000705"  [label="DDG: ret"];
"1000385" -> "1000705"  [label="DDG: ret"];
"1000339" -> "1000705"  [label="DDG: ret"];
"1000360" -> "1000705"  [label="DDG: ret"];
"1000610" -> "1000705"  [label="DDG: limit"];
"1000705" -> "1000711"  [label="DDG: ret"];
"1000705" -> "1000743"  [label="DDG: limit"];
"1000711" -> "1000703"  [label="AST: "];
"1000711" -> "1000713"  [label="CFG: "];
"1000712" -> "1000711"  [label="AST: "];
"1000713" -> "1000711"  [label="AST: "];
"1000715" -> "1000711"  [label="CFG: "];
"1000711" -> "1000794"  [label="DDG: s2n(TLSEXT_TYPE_extended_master_secret, ret)"];
"1000711" -> "1000794"  [label="DDG: TLSEXT_TYPE_extended_master_secret"];
"1000711" -> "1000714"  [label="DDG: ret"];
"1000714" -> "1000703"  [label="AST: "];
"1000714" -> "1000716"  [label="CFG: "];
"1000715" -> "1000714"  [label="AST: "];
"1000716" -> "1000714"  [label="AST: "];
"1000721" -> "1000714"  [label="CFG: "];
"1000714" -> "1000794"  [label="DDG: s2n(0, ret)"];
"1000714" -> "1000743"  [label="DDG: ret"];
"1000714" -> "1000781"  [label="DDG: ret"];
"1000743" -> "1000742"  [label="AST: "];
"1000743" -> "1000748"  [label="CFG: "];
"1000744" -> "1000743"  [label="AST: "];
"1000745" -> "1000743"  [label="AST: "];
"1000748" -> "1000743"  [label="AST: "];
"1000750" -> "1000743"  [label="CFG: "];
"1000752" -> "1000743"  [label="CFG: "];
"1000743" -> "1000794"  [label="DDG: limit"];
"1000743" -> "1000794"  [label="DDG: ret"];
"1000743" -> "1000794"  [label="DDG: 7 + len"];
"1000743" -> "1000794"  [label="DDG: CHECKLEN(ret, 7 + len, limit)"];
"1000247" -> "1000743"  [label="DDG: ret"];
"1000532" -> "1000743"  [label="DDG: ret"];
"1000287" -> "1000743"  [label="DDG: ret"];
"1000385" -> "1000743"  [label="DDG: ret"];
"1000339" -> "1000743"  [label="DDG: ret"];
"1000360" -> "1000743"  [label="DDG: ret"];
"1000735" -> "1000743"  [label="DDG: len"];
"1000610" -> "1000743"  [label="DDG: limit"];
"1000743" -> "1000751"  [label="DDG: ret"];
"1000751" -> "1000725"  [label="AST: "];
"1000751" -> "1000753"  [label="CFG: "];
"1000752" -> "1000751"  [label="AST: "];
"1000753" -> "1000751"  [label="AST: "];
"1000756" -> "1000751"  [label="CFG: "];
"1000751" -> "1000794"  [label="DDG: s2n(TLSEXT_TYPE_application_layer_protocol_negotiation, ret)"];
"1000751" -> "1000794"  [label="DDG: TLSEXT_TYPE_application_layer_protocol_negotiation"];
"1000751" -> "1000754"  [label="DDG: ret"];
"1000754" -> "1000725"  [label="AST: "];
"1000754" -> "1000758"  [label="CFG: "];
"1000755" -> "1000754"  [label="AST: "];
"1000758" -> "1000754"  [label="AST: "];
"1000761" -> "1000754"  [label="CFG: "];
"1000754" -> "1000794"  [label="DDG: s2n(3 + len, ret)"];
"1000754" -> "1000794"  [label="DDG: 3 + len"];
"1000735" -> "1000754"  [label="DDG: len"];
"1000754" -> "1000759"  [label="DDG: ret"];
"1000759" -> "1000725"  [label="AST: "];
"1000759" -> "1000763"  [label="CFG: "];
"1000760" -> "1000759"  [label="AST: "];
"1000763" -> "1000759"  [label="AST: "];
"1000767" -> "1000759"  [label="CFG: "];
"1000759" -> "1000794"  [label="DDG: 1 + len"];
"1000759" -> "1000794"  [label="DDG: s2n(1 + len, ret)"];
"1000735" -> "1000759"  [label="DDG: len"];
"1000759" -> "1000766"  [label="DDG: ret"];
"1000766" -> "1000765"  [label="AST: "];
"1000766" -> "1000767"  [label="CFG: "];
"1000767" -> "1000766"  [label="AST: "];
"1000765" -> "1000766"  [label="CFG: "];
"1000766" -> "1000769"  [label="DDG: ret"];
"1000769" -> "1000725"  [label="AST: "];
"1000769" -> "1000772"  [label="CFG: "];
"1000770" -> "1000769"  [label="AST: "];
"1000771" -> "1000769"  [label="AST: "];
"1000772" -> "1000769"  [label="AST: "];
"1000774" -> "1000769"  [label="CFG: "];
"1000769" -> "1000794"  [label="DDG: memcpy(ret, selected, len)"];
"1000769" -> "1000794"  [label="DDG: selected"];
"1000727" -> "1000769"  [label="DDG: selected"];
"1000735" -> "1000769"  [label="DDG: len"];
"1000769" -> "1000773"  [label="DDG: len"];
"1000769" -> "1000773"  [label="DDG: ret"];
"1000773" -> "1000725"  [label="AST: "];
"1000773" -> "1000775"  [label="CFG: "];
"1000774" -> "1000773"  [label="AST: "];
"1000775" -> "1000773"  [label="AST: "];
"1000776" -> "1000773"  [label="CFG: "];
"1000773" -> "1000794"  [label="DDG: len"];
"1000773" -> "1000781"  [label="DDG: ret"];
"1000781" -> "1000779"  [label="AST: "];
"1000781" -> "1000783"  [label="CFG: "];
"1000782" -> "1000781"  [label="AST: "];
"1000783" -> "1000781"  [label="AST: "];
"1000779" -> "1000781"  [label="CFG: "];
"1000781" -> "1000794"  [label="DDG: orig - 2"];
"1000781" -> "1000794"  [label="DDG: ret"];
"1000781" -> "1000778"  [label="DDG: ret"];
"1000781" -> "1000778"  [label="DDG: orig - 2"];
"1000781" -> "1000779"  [label="DDG: ret"];
"1000781" -> "1000779"  [label="DDG: orig - 2"];
"1000247" -> "1000781"  [label="DDG: ret"];
"1000532" -> "1000781"  [label="DDG: ret"];
"1000287" -> "1000781"  [label="DDG: ret"];
"1000385" -> "1000781"  [label="DDG: ret"];
"1000339" -> "1000781"  [label="DDG: ret"];
"1000360" -> "1000781"  [label="DDG: ret"];
"1000783" -> "1000781"  [label="DDG: orig"];
"1000783" -> "1000781"  [label="DDG: 2"];
"1000781" -> "1000792"  [label="DDG: ret"];
"1000778" -> "1000777"  [label="AST: "];
"1000778" -> "1000786"  [label="CFG: "];
"1000779" -> "1000778"  [label="AST: "];
"1000786" -> "1000778"  [label="AST: "];
"1000788" -> "1000778"  [label="CFG: "];
"1000790" -> "1000778"  [label="CFG: "];
"1000778" -> "1000794"  [label="DDG: (extdatalen = ret - orig - 2) == 0"];
"1000779" -> "1000778"  [label="DDG: extdatalen"];
"1000780" -> "1000779"  [label="AST: "];
"1000786" -> "1000779"  [label="CFG: "];
"1000779" -> "1000794"  [label="DDG: extdatalen"];
"1000779" -> "1000794"  [label="DDG: ret - orig - 2"];
"1000779" -> "1000789"  [label="DDG: extdatalen"];
"1000789" -> "1000128"  [label="AST: "];
"1000789" -> "1000791"  [label="CFG: "];
"1000790" -> "1000789"  [label="AST: "];
"1000791" -> "1000789"  [label="AST: "];
"1000793" -> "1000789"  [label="CFG: "];
"1000789" -> "1000794"  [label="DDG: orig"];
"1000789" -> "1000794"  [label="DDG: s2n(extdatalen, orig)"];
"1000789" -> "1000794"  [label="DDG: extdatalen"];
"1000783" -> "1000789"  [label="DDG: orig"];
"1000792" -> "1000128"  [label="AST: "];
"1000792" -> "1000793"  [label="CFG: "];
"1000793" -> "1000792"  [label="AST: "];
"1000794" -> "1000792"  [label="CFG: "];
"1000792" -> "1000794"  [label="DDG: <RET>"];
"1000793" -> "1000792"  [label="DDG: ret"];
"1000610" -> "1000609"  [label="AST: "];
"1000610" -> "1000616"  [label="CFG: "];
"1000611" -> "1000610"  [label="AST: "];
"1000612" -> "1000610"  [label="AST: "];
"1000613" -> "1000610"  [label="AST: "];
"1000615" -> "1000610"  [label="AST: "];
"1000616" -> "1000610"  [label="AST: "];
"1000609" -> "1000610"  [label="CFG: "];
"1000610" -> "1000794"  [label="DDG: &ret"];
"1000610" -> "1000794"  [label="DDG: al"];
"1000610" -> "1000794"  [label="DDG: s"];
"1000610" -> "1000794"  [label="DDG: limit"];
"1000610" -> "1000609"  [label="DDG: al"];
"1000610" -> "1000609"  [label="DDG: s"];
"1000610" -> "1000609"  [label="DDG: &ret"];
"1000610" -> "1000609"  [label="DDG: 1"];
"1000610" -> "1000609"  [label="DDG: limit"];
"1000497" -> "1000610"  [label="DDG: s"];
"1000563" -> "1000610"  [label="DDG: s"];
"1000376" -> "1000610"  [label="DDG: limit"];
"1000411" -> "1000610"  [label="DDG: limit"];
"1000351" -> "1000610"  [label="DDG: limit"];
"1000278" -> "1000610"  [label="DDG: limit"];
"1000312" -> "1000610"  [label="DDG: limit"];
"1000127" -> "1000610"  [label="DDG: al"];
"1000610" -> "1000626"  [label="DDG: s"];
"1000609" -> "1000608"  [label="AST: "];
"1000618" -> "1000609"  [label="CFG: "];
"1000621" -> "1000609"  [label="CFG: "];
"1000609" -> "1000794"  [label="DDG: custom_ext_add(s, 1, &ret, limit, al)"];
"1000609" -> "1000794"  [label="DDG: !custom_ext_add(s, 1, &ret, limit, al)"];
"1000626" -> "1000625"  [label="AST: "];
"1000626" -> "1000627"  [label="CFG: "];
"1000627" -> "1000626"  [label="AST: "];
"1000634" -> "1000626"  [label="CFG: "];
"1000625" -> "1000626"  [label="CFG: "];
"1000626" -> "1000794"  [label="DDG: s"];
"1000626" -> "1000625"  [label="DDG: s"];
"1000625" -> "1000624"  [label="AST: "];
"1000625" -> "1000628"  [label="CFG: "];
"1000628" -> "1000625"  [label="AST: "];
"1000677" -> "1000625"  [label="CFG: "];
"1000684" -> "1000625"  [label="CFG: "];
"1000625" -> "1000794"  [label="DDG: SSL_IS_DTLS(s)"];
"1000625" -> "1000794"  [label="DDG: s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12"];
"1000625" -> "1000794"  [label="DDG: SSL_IS_DTLS(s) || s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12"];
"1000628" -> "1000625"  [label="DDG: s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD"];
"1000628" -> "1000625"  [label="DDG: s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12"];
"1000532" -> "1000531"  [label="AST: "];
"1000532" -> "1000533"  [label="CFG: "];
"1000533" -> "1000532"  [label="AST: "];
"1000531" -> "1000532"  [label="CFG: "];
"1000532" -> "1000794"  [label="DDG: ret"];
"1000471" -> "1000470"  [label="AST: "];
"1000471" -> "1000472"  [label="CFG: "];
"1000472" -> "1000471"  [label="AST: "];
"1000473" -> "1000471"  [label="CFG: "];
"1000471" -> "1000794"  [label="DDG: s"];
"1000471" -> "1000470"  [label="DDG: s"];
"1000471" -> "1000497"  [label="DDG: s"];
"1000470" -> "1000442"  [label="AST: "];
"1000470" -> "1000473"  [label="CFG: "];
"1000473" -> "1000470"  [label="AST: "];
"1000442" -> "1000470"  [label="CFG: "];
"1000470" -> "1000794"  [label="DDG: SSL_OP_CRYPTOPRO_TLSEXT_BUG"];
"1000470" -> "1000794"  [label="DDG: SSL_get_options(s)"];
"1000470" -> "1000442"  [label="DDG: SSL_get_options(s)"];
"1000470" -> "1000442"  [label="DDG: SSL_OP_CRYPTOPRO_TLSEXT_BUG"];
"1000442" -> "1000441"  [label="AST: "];
"1000442" -> "1000443"  [label="CFG: "];
"1000443" -> "1000442"  [label="AST: "];
"1000477" -> "1000442"  [label="CFG: "];
"1000498" -> "1000442"  [label="CFG: "];
"1000442" -> "1000794"  [label="DDG: ((s->s3->tmp.new_cipher->id & 0xFFFF) == 0x80\n         || (s->s3->tmp.new_cipher->id & 0xFFFF) == 0x81)\n        && (SSL_get_options(s) & SSL_OP_CRYPTOPRO_TLSEXT_BUG)"];
"1000442" -> "1000794"  [label="DDG: (s->s3->tmp.new_cipher->id & 0xFFFF) == 0x80\n         || (s->s3->tmp.new_cipher->id & 0xFFFF) == 0x81"];
"1000442" -> "1000794"  [label="DDG: SSL_get_options(s) & SSL_OP_CRYPTOPRO_TLSEXT_BUG"];
"1000443" -> "1000442"  [label="DDG: (s->s3->tmp.new_cipher->id & 0xFFFF) == 0x80"];
"1000443" -> "1000442"  [label="DDG: (s->s3->tmp.new_cipher->id & 0xFFFF) == 0x81"];
"1000497" -> "1000496"  [label="AST: "];
"1000497" -> "1000498"  [label="CFG: "];
"1000498" -> "1000497"  [label="AST: "];
"1000501" -> "1000497"  [label="CFG: "];
"1000496" -> "1000497"  [label="CFG: "];
"1000497" -> "1000794"  [label="DDG: s"];
"1000497" -> "1000496"  [label="DDG: s"];
"1000497" -> "1000563"  [label="DDG: s"];
"1000496" -> "1000495"  [label="AST: "];
"1000496" -> "1000499"  [label="CFG: "];
"1000499" -> "1000496"  [label="AST: "];
"1000507" -> "1000496"  [label="CFG: "];
"1000536" -> "1000496"  [label="CFG: "];
"1000496" -> "1000794"  [label="DDG: SSL_IS_DTLS(s) && (s->tlsext_heartbeat & SSL_DTLSEXT_HB_ENABLED)"];
"1000496" -> "1000794"  [label="DDG: SSL_IS_DTLS(s)"];
"1000496" -> "1000794"  [label="DDG: s->tlsext_heartbeat & SSL_DTLSEXT_HB_ENABLED"];
"1000499" -> "1000496"  [label="DDG: s->tlsext_heartbeat"];
"1000499" -> "1000496"  [label="DDG: SSL_DTLSEXT_HB_ENABLED"];
"1000563" -> "1000561"  [label="AST: "];
"1000563" -> "1000569"  [label="CFG: "];
"1000564" -> "1000563"  [label="AST: "];
"1000565" -> "1000563"  [label="AST: "];
"1000567" -> "1000563"  [label="AST: "];
"1000569" -> "1000563"  [label="AST: "];
"1000561" -> "1000563"  [label="CFG: "];
"1000563" -> "1000794"  [label="DDG: s->\n                                              ctx->next_protos_advertised_cb_arg"];
"1000563" -> "1000794"  [label="DDG: &npalen"];
"1000563" -> "1000794"  [label="DDG: &npa"];
"1000563" -> "1000794"  [label="DDG: s"];
"1000563" -> "1000561"  [label="DDG: s"];
"1000563" -> "1000561"  [label="DDG: &npa"];
"1000563" -> "1000561"  [label="DDG: &npalen"];
"1000563" -> "1000561"  [label="DDG: s->\n                                              ctx->next_protos_advertised_cb_arg"];
"1000561" -> "1000557"  [label="AST: "];
"1000562" -> "1000561"  [label="AST: "];
"1000576" -> "1000561"  [label="CFG: "];
"1000561" -> "1000794"  [label="DDG: s->ctx->next_protos_advertised_cb(s, &npa, &npalen,\n                                              s->\n                                              ctx->next_protos_advertised_cb_arg)"];
"1000561" -> "1000575"  [label="DDG: r"];
"1000575" -> "1000574"  [label="AST: "];
"1000575" -> "1000577"  [label="CFG: "];
"1000576" -> "1000575"  [label="AST: "];
"1000577" -> "1000575"  [label="AST: "];
"1000581" -> "1000575"  [label="CFG: "];
"1000611" -> "1000575"  [label="CFG: "];
"1000575" -> "1000794"  [label="DDG: r == SSL_TLSEXT_ERR_OK"];
"1000575" -> "1000794"  [label="DDG: SSL_TLSEXT_ERR_OK"];
"1000575" -> "1000794"  [label="DDG: r"];
}
