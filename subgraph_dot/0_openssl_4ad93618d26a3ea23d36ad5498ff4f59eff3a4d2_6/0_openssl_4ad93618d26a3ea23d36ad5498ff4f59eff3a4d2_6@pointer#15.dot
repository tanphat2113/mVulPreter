digraph "0_openssl_4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2_6@pointer" {
"1000127" [label="(MethodParameterIn,int *al)"];
"1000610" [label="(Call,custom_ext_add(s, 1, &ret, limit, al))"];
"1000609" [label="(Call,!custom_ext_add(s, 1, &ret, limit, al))"];
"1000626" [label="(Call,SSL_IS_DTLS(s))"];
"1000625" [label="(Call,SSL_IS_DTLS(s) || s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)"];
"1000683" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000689" [label="(Call,s2n(TLSEXT_TYPE_encrypt_then_mac, ret))"];
"1000692" [label="(Call,s2n(0, ret))"];
"1000705" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000711" [label="(Call,s2n(TLSEXT_TYPE_extended_master_secret, ret))"];
"1000714" [label="(Call,s2n(0, ret))"];
"1000743" [label="(Call,CHECKLEN(ret, 7 + len, limit))"];
"1000751" [label="(Call,s2n(TLSEXT_TYPE_application_layer_protocol_negotiation, ret))"];
"1000754" [label="(Call,s2n(3 + len, ret))"];
"1000759" [label="(Call,s2n(1 + len, ret))"];
"1000766" [label="(Call,ret++)"];
"1000769" [label="(Call,memcpy(ret, selected, len))"];
"1000773" [label="(Call,ret += len)"];
"1000781" [label="(Call,ret - orig - 2)"];
"1000778" [label="(Call,(extdatalen = ret - orig - 2) == 0)"];
"1000779" [label="(Call,extdatalen = ret - orig - 2)"];
"1000789" [label="(Call,s2n(extdatalen, orig))"];
"1000792" [label="(Return,return ret;)"];
"1000692" [label="(Call,s2n(0, ret))"];
"1000761" [label="(Literal,1)"];
"1000506" [label="(Call,CHECKLEN(ret, 5, limit))"];
"1000124" [label="(MethodParameterIn,SSL *s)"];
"1000753" [label="(Identifier,ret)"];
"1000127" [label="(MethodParameterIn,int *al)"];
"1000763" [label="(Identifier,ret)"];
"1000191" [label="(Call,ret >= limit)"];
"1000689" [label="(Call,s2n(TLSEXT_TYPE_encrypt_then_mac, ret))"];
"1000688" [label="(Identifier,NULL)"];
"1000682" [label="(ControlStructure,if (CHECKLEN(ret, 4, limit)))"];
"1000777" [label="(ControlStructure,if ((extdatalen = ret - orig - 2) == 0))"];
"1000703" [label="(Block,)"];
"1000608" [label="(ControlStructure,if (!custom_ext_add(s, 1, &ret, limit, al)))"];
"1000532" [label="(Call,ret++)"];
"1000775" [label="(Identifier,len)"];
"1000613" [label="(Call,&ret)"];
"1000789" [label="(Call,s2n(extdatalen, orig))"];
"1000769" [label="(Call,memcpy(ret, selected, len))"];
"1000774" [label="(Identifier,ret)"];
"1000691" [label="(Identifier,ret)"];
"1000716" [label="(Identifier,ret)"];
"1000312" [label="(Call,CHECKLEN(ret, 5 + plistlen, limit))"];
"1000712" [label="(Identifier,TLSEXT_TYPE_extended_master_secret)"];
"1000686" [label="(Identifier,limit)"];
"1000563" [label="(Call,s->ctx->next_protos_advertised_cb(s, &npa, &npalen,\n                                              s->\n                                              ctx->next_protos_advertised_cb_arg))"];
"1000744" [label="(Identifier,ret)"];
"1000704" [label="(ControlStructure,if (CHECKLEN(ret, 4, limit)))"];
"1000385" [label="(Call,s2n(0, ret))"];
"1000598" [label="(Call,ret += npalen)"];
"1000792" [label="(Return,return ret;)"];
"1000126" [label="(MethodParameterIn,unsigned char *limit)"];
"1000735" [label="(Call,len = s->s3->alpn_selected_len)"];
"1000713" [label="(Identifier,ret)"];
"1000438" [label="(Call,ret += el)"];
"1000411" [label="(Call,CHECKLEN(ret, 4 + el, limit))"];
"1000612" [label="(Literal,1)"];
"1000770" [label="(Identifier,ret)"];
"1000754" [label="(Call,s2n(3 + len, ret))"];
"1000706" [label="(Identifier,ret)"];
"1000580" [label="(Call,CHECKLEN(ret, 4 + npalen, limit))"];
"1000219" [label="(Call,CHECKLEN(ret, 4 + el, limit))"];
"1000776" [label="(JumpTarget,done:)"];
"1000690" [label="(Identifier,TLSEXT_TYPE_encrypt_then_mac)"];
"1000727" [label="(Call,*selected = s->s3->alpn_selected)"];
"1000766" [label="(Call,ret++)"];
"1000794" [label="(MethodReturn,unsigned char *)"];
"1000771" [label="(Identifier,selected)"];
"1000758" [label="(Identifier,ret)"];
"1000783" [label="(Call,orig - 2)"];
"1000618" [label="(Identifier,NULL)"];
"1000278" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000767" [label="(Identifier,ret)"];
"1000610" [label="(Call,custom_ext_add(s, 1, &ret, limit, al))"];
"1000609" [label="(Call,!custom_ext_add(s, 1, &ret, limit, al))"];
"1000782" [label="(Identifier,ret)"];
"1000707" [label="(Literal,4)"];
"1000745" [label="(Call,7 + len)"];
"1000765" [label="(Call,*ret++)"];
"1000752" [label="(Identifier,TLSEXT_TYPE_application_layer_protocol_negotiation)"];
"1000685" [label="(Literal,4)"];
"1000683" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000526" [label="(Call,ret++)"];
"1000779" [label="(Call,extdatalen = ret - orig - 2)"];
"1000627" [label="(Identifier,s)"];
"1000626" [label="(Call,SSL_IS_DTLS(s))"];
"1000615" [label="(Identifier,limit)"];
"1000479" [label="(Call,CHECKLEN(ret, sizeof(cryptopro_ext), limit))"];
"1000725" [label="(Block,)"];
"1000755" [label="(Call,3 + len)"];
"1000625" [label="(Call,SSL_IS_DTLS(s) || s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)"];
"1000748" [label="(Identifier,limit)"];
"1000742" [label="(ControlStructure,if (CHECKLEN(ret, 7 + len, limit)))"];
"1000351" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000628" [label="(Call,s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)"];
"1000497" [label="(Call,SSL_IS_DTLS(s))"];
"1000750" [label="(Identifier,NULL)"];
"1000759" [label="(Call,s2n(1 + len, ret))"];
"1000710" [label="(Identifier,NULL)"];
"1000714" [label="(Call,s2n(0, ret))"];
"1000616" [label="(Identifier,al)"];
"1000788" [label="(Identifier,orig)"];
"1000793" [label="(Identifier,ret)"];
"1000693" [label="(Literal,0)"];
"1000780" [label="(Identifier,extdatalen)"];
"1000621" [label="(Identifier,s)"];
"1000491" [label="(Call,ret += sizeof(cryptopro_ext))"];
"1000711" [label="(Call,s2n(TLSEXT_TYPE_extended_master_secret, ret))"];
"1000681" [label="(Block,)"];
"1000790" [label="(Identifier,extdatalen)"];
"1000778" [label="(Call,(extdatalen = ret - orig - 2) == 0)"];
"1000611" [label="(Identifier,s)"];
"1000743" [label="(Call,CHECKLEN(ret, 7 + len, limit))"];
"1000756" [label="(Literal,3)"];
"1000694" [label="(Identifier,ret)"];
"1000360" [label="(Call,s2n(0, ret))"];
"1000287" [label="(Call,s2n(0, ret))"];
"1000772" [label="(Identifier,len)"];
"1000786" [label="(Literal,0)"];
"1000376" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000791" [label="(Identifier,orig)"];
"1000624" [label="(ControlStructure,if (SSL_IS_DTLS(s) || s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12))"];
"1000339" [label="(Call,ret += plistlen)"];
"1000773" [label="(Call,ret += len)"];
"1000760" [label="(Call,1 + len)"];
"1000705" [label="(Call,CHECKLEN(ret, 4, limit))"];
"1000247" [label="(Call,ret += el)"];
"1000634" [label="(Identifier,s)"];
"1000677" [label="(Identifier,s)"];
"1000699" [label="(Identifier,s)"];
"1000684" [label="(Identifier,ret)"];
"1000781" [label="(Call,ret - orig - 2)"];
"1000715" [label="(Literal,0)"];
"1000721" [label="(Identifier,s)"];
"1000751" [label="(Call,s2n(TLSEXT_TYPE_application_layer_protocol_negotiation, ret))"];
"1000128" [label="(Block,)"];
"1000708" [label="(Identifier,limit)"];
"1000127" -> "1000123"  [label="AST: "];
"1000127" -> "1000794"  [label="DDG: al"];
"1000127" -> "1000610"  [label="DDG: al"];
"1000610" -> "1000609"  [label="AST: "];
"1000610" -> "1000616"  [label="CFG: "];
"1000611" -> "1000610"  [label="AST: "];
"1000612" -> "1000610"  [label="AST: "];
"1000613" -> "1000610"  [label="AST: "];
"1000615" -> "1000610"  [label="AST: "];
"1000616" -> "1000610"  [label="AST: "];
"1000609" -> "1000610"  [label="CFG: "];
"1000610" -> "1000794"  [label="DDG: &ret"];
"1000610" -> "1000794"  [label="DDG: al"];
"1000610" -> "1000794"  [label="DDG: s"];
"1000610" -> "1000794"  [label="DDG: limit"];
"1000610" -> "1000609"  [label="DDG: al"];
"1000610" -> "1000609"  [label="DDG: s"];
"1000610" -> "1000609"  [label="DDG: &ret"];
"1000610" -> "1000609"  [label="DDG: 1"];
"1000610" -> "1000609"  [label="DDG: limit"];
"1000497" -> "1000610"  [label="DDG: s"];
"1000563" -> "1000610"  [label="DDG: s"];
"1000124" -> "1000610"  [label="DDG: s"];
"1000506" -> "1000610"  [label="DDG: limit"];
"1000479" -> "1000610"  [label="DDG: limit"];
"1000376" -> "1000610"  [label="DDG: limit"];
"1000411" -> "1000610"  [label="DDG: limit"];
"1000351" -> "1000610"  [label="DDG: limit"];
"1000580" -> "1000610"  [label="DDG: limit"];
"1000191" -> "1000610"  [label="DDG: limit"];
"1000278" -> "1000610"  [label="DDG: limit"];
"1000219" -> "1000610"  [label="DDG: limit"];
"1000312" -> "1000610"  [label="DDG: limit"];
"1000126" -> "1000610"  [label="DDG: limit"];
"1000610" -> "1000626"  [label="DDG: s"];
"1000610" -> "1000683"  [label="DDG: limit"];
"1000610" -> "1000705"  [label="DDG: limit"];
"1000610" -> "1000743"  [label="DDG: limit"];
"1000609" -> "1000608"  [label="AST: "];
"1000618" -> "1000609"  [label="CFG: "];
"1000621" -> "1000609"  [label="CFG: "];
"1000609" -> "1000794"  [label="DDG: custom_ext_add(s, 1, &ret, limit, al)"];
"1000609" -> "1000794"  [label="DDG: !custom_ext_add(s, 1, &ret, limit, al)"];
"1000626" -> "1000625"  [label="AST: "];
"1000626" -> "1000627"  [label="CFG: "];
"1000627" -> "1000626"  [label="AST: "];
"1000634" -> "1000626"  [label="CFG: "];
"1000625" -> "1000626"  [label="CFG: "];
"1000626" -> "1000794"  [label="DDG: s"];
"1000626" -> "1000625"  [label="DDG: s"];
"1000124" -> "1000626"  [label="DDG: s"];
"1000625" -> "1000624"  [label="AST: "];
"1000625" -> "1000628"  [label="CFG: "];
"1000628" -> "1000625"  [label="AST: "];
"1000677" -> "1000625"  [label="CFG: "];
"1000684" -> "1000625"  [label="CFG: "];
"1000625" -> "1000794"  [label="DDG: SSL_IS_DTLS(s)"];
"1000625" -> "1000794"  [label="DDG: s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12"];
"1000625" -> "1000794"  [label="DDG: SSL_IS_DTLS(s) || s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12"];
"1000628" -> "1000625"  [label="DDG: s->s3->tmp.new_cipher->algorithm_mac == SSL_AEAD"];
"1000628" -> "1000625"  [label="DDG: s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT\n             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12"];
"1000683" -> "1000682"  [label="AST: "];
"1000683" -> "1000686"  [label="CFG: "];
"1000684" -> "1000683"  [label="AST: "];
"1000685" -> "1000683"  [label="AST: "];
"1000686" -> "1000683"  [label="AST: "];
"1000688" -> "1000683"  [label="CFG: "];
"1000690" -> "1000683"  [label="CFG: "];
"1000683" -> "1000794"  [label="DDG: ret"];
"1000683" -> "1000794"  [label="DDG: CHECKLEN(ret, 4, limit)"];
"1000683" -> "1000794"  [label="DDG: limit"];
"1000247" -> "1000683"  [label="DDG: ret"];
"1000532" -> "1000683"  [label="DDG: ret"];
"1000598" -> "1000683"  [label="DDG: ret"];
"1000287" -> "1000683"  [label="DDG: ret"];
"1000385" -> "1000683"  [label="DDG: ret"];
"1000526" -> "1000683"  [label="DDG: ret"];
"1000339" -> "1000683"  [label="DDG: ret"];
"1000360" -> "1000683"  [label="DDG: ret"];
"1000491" -> "1000683"  [label="DDG: ret"];
"1000438" -> "1000683"  [label="DDG: ret"];
"1000191" -> "1000683"  [label="DDG: ret"];
"1000126" -> "1000683"  [label="DDG: limit"];
"1000683" -> "1000689"  [label="DDG: ret"];
"1000683" -> "1000705"  [label="DDG: limit"];
"1000683" -> "1000743"  [label="DDG: limit"];
"1000689" -> "1000681"  [label="AST: "];
"1000689" -> "1000691"  [label="CFG: "];
"1000690" -> "1000689"  [label="AST: "];
"1000691" -> "1000689"  [label="AST: "];
"1000693" -> "1000689"  [label="CFG: "];
"1000689" -> "1000794"  [label="DDG: s2n(TLSEXT_TYPE_encrypt_then_mac, ret)"];
"1000689" -> "1000794"  [label="DDG: TLSEXT_TYPE_encrypt_then_mac"];
"1000689" -> "1000692"  [label="DDG: ret"];
"1000692" -> "1000681"  [label="AST: "];
"1000692" -> "1000694"  [label="CFG: "];
"1000693" -> "1000692"  [label="AST: "];
"1000694" -> "1000692"  [label="AST: "];
"1000699" -> "1000692"  [label="CFG: "];
"1000692" -> "1000794"  [label="DDG: s2n(0, ret)"];
"1000692" -> "1000705"  [label="DDG: ret"];
"1000692" -> "1000743"  [label="DDG: ret"];
"1000692" -> "1000781"  [label="DDG: ret"];
"1000705" -> "1000704"  [label="AST: "];
"1000705" -> "1000708"  [label="CFG: "];
"1000706" -> "1000705"  [label="AST: "];
"1000707" -> "1000705"  [label="AST: "];
"1000708" -> "1000705"  [label="AST: "];
"1000710" -> "1000705"  [label="CFG: "];
"1000712" -> "1000705"  [label="CFG: "];
"1000705" -> "1000794"  [label="DDG: limit"];
"1000705" -> "1000794"  [label="DDG: ret"];
"1000705" -> "1000794"  [label="DDG: CHECKLEN(ret, 4, limit)"];
"1000247" -> "1000705"  [label="DDG: ret"];
"1000532" -> "1000705"  [label="DDG: ret"];
"1000598" -> "1000705"  [label="DDG: ret"];
"1000287" -> "1000705"  [label="DDG: ret"];
"1000385" -> "1000705"  [label="DDG: ret"];
"1000339" -> "1000705"  [label="DDG: ret"];
"1000360" -> "1000705"  [label="DDG: ret"];
"1000491" -> "1000705"  [label="DDG: ret"];
"1000438" -> "1000705"  [label="DDG: ret"];
"1000191" -> "1000705"  [label="DDG: ret"];
"1000526" -> "1000705"  [label="DDG: ret"];
"1000126" -> "1000705"  [label="DDG: limit"];
"1000705" -> "1000711"  [label="DDG: ret"];
"1000705" -> "1000743"  [label="DDG: limit"];
"1000711" -> "1000703"  [label="AST: "];
"1000711" -> "1000713"  [label="CFG: "];
"1000712" -> "1000711"  [label="AST: "];
"1000713" -> "1000711"  [label="AST: "];
"1000715" -> "1000711"  [label="CFG: "];
"1000711" -> "1000794"  [label="DDG: s2n(TLSEXT_TYPE_extended_master_secret, ret)"];
"1000711" -> "1000794"  [label="DDG: TLSEXT_TYPE_extended_master_secret"];
"1000711" -> "1000714"  [label="DDG: ret"];
"1000714" -> "1000703"  [label="AST: "];
"1000714" -> "1000716"  [label="CFG: "];
"1000715" -> "1000714"  [label="AST: "];
"1000716" -> "1000714"  [label="AST: "];
"1000721" -> "1000714"  [label="CFG: "];
"1000714" -> "1000794"  [label="DDG: s2n(0, ret)"];
"1000714" -> "1000743"  [label="DDG: ret"];
"1000714" -> "1000781"  [label="DDG: ret"];
"1000743" -> "1000742"  [label="AST: "];
"1000743" -> "1000748"  [label="CFG: "];
"1000744" -> "1000743"  [label="AST: "];
"1000745" -> "1000743"  [label="AST: "];
"1000748" -> "1000743"  [label="AST: "];
"1000750" -> "1000743"  [label="CFG: "];
"1000752" -> "1000743"  [label="CFG: "];
"1000743" -> "1000794"  [label="DDG: limit"];
"1000743" -> "1000794"  [label="DDG: ret"];
"1000743" -> "1000794"  [label="DDG: 7 + len"];
"1000743" -> "1000794"  [label="DDG: CHECKLEN(ret, 7 + len, limit)"];
"1000247" -> "1000743"  [label="DDG: ret"];
"1000532" -> "1000743"  [label="DDG: ret"];
"1000598" -> "1000743"  [label="DDG: ret"];
"1000287" -> "1000743"  [label="DDG: ret"];
"1000385" -> "1000743"  [label="DDG: ret"];
"1000339" -> "1000743"  [label="DDG: ret"];
"1000360" -> "1000743"  [label="DDG: ret"];
"1000491" -> "1000743"  [label="DDG: ret"];
"1000438" -> "1000743"  [label="DDG: ret"];
"1000191" -> "1000743"  [label="DDG: ret"];
"1000526" -> "1000743"  [label="DDG: ret"];
"1000735" -> "1000743"  [label="DDG: len"];
"1000126" -> "1000743"  [label="DDG: limit"];
"1000743" -> "1000751"  [label="DDG: ret"];
"1000751" -> "1000725"  [label="AST: "];
"1000751" -> "1000753"  [label="CFG: "];
"1000752" -> "1000751"  [label="AST: "];
"1000753" -> "1000751"  [label="AST: "];
"1000756" -> "1000751"  [label="CFG: "];
"1000751" -> "1000794"  [label="DDG: s2n(TLSEXT_TYPE_application_layer_protocol_negotiation, ret)"];
"1000751" -> "1000794"  [label="DDG: TLSEXT_TYPE_application_layer_protocol_negotiation"];
"1000751" -> "1000754"  [label="DDG: ret"];
"1000754" -> "1000725"  [label="AST: "];
"1000754" -> "1000758"  [label="CFG: "];
"1000755" -> "1000754"  [label="AST: "];
"1000758" -> "1000754"  [label="AST: "];
"1000761" -> "1000754"  [label="CFG: "];
"1000754" -> "1000794"  [label="DDG: s2n(3 + len, ret)"];
"1000754" -> "1000794"  [label="DDG: 3 + len"];
"1000735" -> "1000754"  [label="DDG: len"];
"1000754" -> "1000759"  [label="DDG: ret"];
"1000759" -> "1000725"  [label="AST: "];
"1000759" -> "1000763"  [label="CFG: "];
"1000760" -> "1000759"  [label="AST: "];
"1000763" -> "1000759"  [label="AST: "];
"1000767" -> "1000759"  [label="CFG: "];
"1000759" -> "1000794"  [label="DDG: 1 + len"];
"1000759" -> "1000794"  [label="DDG: s2n(1 + len, ret)"];
"1000735" -> "1000759"  [label="DDG: len"];
"1000759" -> "1000766"  [label="DDG: ret"];
"1000766" -> "1000765"  [label="AST: "];
"1000766" -> "1000767"  [label="CFG: "];
"1000767" -> "1000766"  [label="AST: "];
"1000765" -> "1000766"  [label="CFG: "];
"1000766" -> "1000769"  [label="DDG: ret"];
"1000769" -> "1000725"  [label="AST: "];
"1000769" -> "1000772"  [label="CFG: "];
"1000770" -> "1000769"  [label="AST: "];
"1000771" -> "1000769"  [label="AST: "];
"1000772" -> "1000769"  [label="AST: "];
"1000774" -> "1000769"  [label="CFG: "];
"1000769" -> "1000794"  [label="DDG: memcpy(ret, selected, len)"];
"1000769" -> "1000794"  [label="DDG: selected"];
"1000727" -> "1000769"  [label="DDG: selected"];
"1000735" -> "1000769"  [label="DDG: len"];
"1000769" -> "1000773"  [label="DDG: len"];
"1000769" -> "1000773"  [label="DDG: ret"];
"1000773" -> "1000725"  [label="AST: "];
"1000773" -> "1000775"  [label="CFG: "];
"1000774" -> "1000773"  [label="AST: "];
"1000775" -> "1000773"  [label="AST: "];
"1000776" -> "1000773"  [label="CFG: "];
"1000773" -> "1000794"  [label="DDG: len"];
"1000773" -> "1000781"  [label="DDG: ret"];
"1000781" -> "1000779"  [label="AST: "];
"1000781" -> "1000783"  [label="CFG: "];
"1000782" -> "1000781"  [label="AST: "];
"1000783" -> "1000781"  [label="AST: "];
"1000779" -> "1000781"  [label="CFG: "];
"1000781" -> "1000794"  [label="DDG: orig - 2"];
"1000781" -> "1000794"  [label="DDG: ret"];
"1000781" -> "1000778"  [label="DDG: ret"];
"1000781" -> "1000778"  [label="DDG: orig - 2"];
"1000781" -> "1000779"  [label="DDG: ret"];
"1000781" -> "1000779"  [label="DDG: orig - 2"];
"1000247" -> "1000781"  [label="DDG: ret"];
"1000532" -> "1000781"  [label="DDG: ret"];
"1000598" -> "1000781"  [label="DDG: ret"];
"1000287" -> "1000781"  [label="DDG: ret"];
"1000385" -> "1000781"  [label="DDG: ret"];
"1000339" -> "1000781"  [label="DDG: ret"];
"1000360" -> "1000781"  [label="DDG: ret"];
"1000491" -> "1000781"  [label="DDG: ret"];
"1000438" -> "1000781"  [label="DDG: ret"];
"1000191" -> "1000781"  [label="DDG: ret"];
"1000526" -> "1000781"  [label="DDG: ret"];
"1000783" -> "1000781"  [label="DDG: orig"];
"1000783" -> "1000781"  [label="DDG: 2"];
"1000781" -> "1000792"  [label="DDG: ret"];
"1000778" -> "1000777"  [label="AST: "];
"1000778" -> "1000786"  [label="CFG: "];
"1000779" -> "1000778"  [label="AST: "];
"1000786" -> "1000778"  [label="AST: "];
"1000788" -> "1000778"  [label="CFG: "];
"1000790" -> "1000778"  [label="CFG: "];
"1000778" -> "1000794"  [label="DDG: (extdatalen = ret - orig - 2) == 0"];
"1000779" -> "1000778"  [label="DDG: extdatalen"];
"1000780" -> "1000779"  [label="AST: "];
"1000786" -> "1000779"  [label="CFG: "];
"1000779" -> "1000794"  [label="DDG: extdatalen"];
"1000779" -> "1000794"  [label="DDG: ret - orig - 2"];
"1000779" -> "1000789"  [label="DDG: extdatalen"];
"1000789" -> "1000128"  [label="AST: "];
"1000789" -> "1000791"  [label="CFG: "];
"1000790" -> "1000789"  [label="AST: "];
"1000791" -> "1000789"  [label="AST: "];
"1000793" -> "1000789"  [label="CFG: "];
"1000789" -> "1000794"  [label="DDG: orig"];
"1000789" -> "1000794"  [label="DDG: s2n(extdatalen, orig)"];
"1000789" -> "1000794"  [label="DDG: extdatalen"];
"1000783" -> "1000789"  [label="DDG: orig"];
"1000792" -> "1000128"  [label="AST: "];
"1000792" -> "1000793"  [label="CFG: "];
"1000793" -> "1000792"  [label="AST: "];
"1000794" -> "1000792"  [label="CFG: "];
"1000792" -> "1000794"  [label="DDG: <RET>"];
"1000793" -> "1000792"  [label="DDG: ret"];
}
