digraph "0_heimdal_2f7f3d9960aa6ea21358bdf3687cee5149aa35cf@array" {
"1000525" [label="(Call,((char*)in->data)[0] == 4)"];
"1000521" [label="(Call,in->length && ((char*)in->data)[0] == 4)"];
"1000519" [label="(Call,ret && in->length && ((char*)in->data)[0] == 4)"];
"1001117" [label="(Return,return ret;)"];
"1000535" [label="(Identifier,ret)"];
"1000520" [label="(Identifier,ret)"];
"1001118" [label="(Identifier,ret)"];
"1000645" [label="(Call,ret == KRB5KRB_AP_ERR_SKEW)"];
"1000522" [label="(Call,in->length)"];
"1000519" [label="(Call,ret && in->length && ((char*)in->data)[0] == 4)"];
"1000997" [label="(Call,ret = process_pa_data_to_md(context, &ctx->cred, &ctx->as_req, ctx,\n\t\t\t\t&ctx->md, &ctx->as_req.padata,\n\t\t\t\tctx->prompter, ctx->prompter_data))"];
"1000636" [label="(Call,krb5_set_error_message(context, ret,\n\t\t\t\t\t   N_(\"Preauth required but no preauth \"\n\t\t\t\t\t      \"options send by KDC\", \"\")))"];
"1000604" [label="(Call,ret = decode_METHOD_DATA(ctx->error.e_data->data,\n\t\t\t\t\t     ctx->error.e_data->length,\n\t\t\t\t\t     &ctx->md,\n\t\t\t\t\t     NULL))"];
"1000703" [label="(Call,krb5_set_error_message(context, ret,\n\t\t\t\t\t   N_(\"Got a client referral, not but no realm\", \"\")))"];
"1000628" [label="(Call,krb5_set_error_message(context, ret,\n\t\t\t\t\t       N_(\"Failed to decode METHOD-DATA\", \"\")))"];
"1000874" [label="(Call,ret == KRB5KDC_ERR_PREAUTH_FAILED)"];
"1000521" [label="(Call,in->length && ((char*)in->data)[0] == 4)"];
"1000667" [label="(Call,ret = 0)"];
"1000538" [label="(Identifier,ret)"];
"1000317" [label="(Call,ret = process_pa_data_to_key(context, ctx, &ctx->cred,\n\t\t\t\t\t &ctx->as_req, &rep.kdc_rep,\n\t\t\t\t\t hostinfo, &ctx->fast_state.reply_key))"];
"1001119" [label="(MethodReturn,RET)"];
"1001036" [label="(Call,ret = fast_wrap_req(context, &ctx->fast_state, &req2))"];
"1000518" [label="(ControlStructure,if(ret && in->length && ((char*)in->data)[0] == 4))"];
"1000545" [label="(Call,ret = fast_unwrap_error(context, &ctx->fast_state, &ctx->error))"];
"1000720" [label="(Call,ret = krb5_principal_set_realm(context,\n\t\t\t\t\t       ctx->cred.client,\n\t\t\t\t\t       *ctx->error.crealm))"];
"1000835" [label="(Call,ret = change_password(context,\n\t\t\t\t      ctx->cred.client,\n\t\t\t\t      ctx->password,\n\t\t\t\t      buf2,\n\t\t\t\t      sizeof(buf2),\n\t\t\t\t      ctx->prompter,\n\t\t\t\t      ctx->prompter_data,\n\t\t\t\t      NULL))"];
"1000509" [label="(Call,ret = krb5_rd_error(context, in, &ctx->error))"];
"1000272" [label="(Call,ret = fast_unwrap_as_rep(context, ctx->nonce, &data,\n\t\t\t\t     &ctx->fast_state, &rep.kdc_rep))"];
"1000533" [label="(Literal,4)"];
"1000220" [label="(Call,decode_AS_REP(in->data, in->length, &rep.kdc_rep, &size))"];
"1000245" [label="(Call,ASN1_MALLOC_ENCODE(Ticket, data.data, data.length,\n\t\t\t       &rep.kdc_rep.ticket, &size, ret))"];
"1000534" [label="(Call,ret = KRB5KRB_AP_ERR_V4_REPLY)"];
"1000747" [label="(Call,ret = krb5_init_creds_set_service(context, ctx, NULL))"];
"1000121" [label="(Block,)"];
"1000526" [label="(Call,((char*)in->data)[0])"];
"1001058" [label="(Call,ASN1_MALLOC_ENCODE(AS_REQ,\n\t\t       ctx->req_buffer.data, ctx->req_buffer.length,\n\t\t       &req2, &len, ret))"];
"1000525" [label="(Call,((char*)in->data)[0] == 4)"];
"1000779" [label="(Call,ret == KRB5KDC_ERR_KEY_EXP)"];
"1000914" [label="(Call,ret = 0)"];
"1000869" [label="(Call,ret = 0)"];
"1001117" [label="(Return,return ret;)"];
"1000525" -> "1000521"  [label="AST: "];
"1000525" -> "1000533"  [label="CFG: "];
"1000526" -> "1000525"  [label="AST: "];
"1000533" -> "1000525"  [label="AST: "];
"1000521" -> "1000525"  [label="CFG: "];
"1000525" -> "1001119"  [label="DDG: ((char*)in->data)[0]"];
"1000525" -> "1000521"  [label="DDG: ((char*)in->data)[0]"];
"1000525" -> "1000521"  [label="DDG: 4"];
"1000521" -> "1000519"  [label="AST: "];
"1000521" -> "1000522"  [label="CFG: "];
"1000522" -> "1000521"  [label="AST: "];
"1000519" -> "1000521"  [label="CFG: "];
"1000521" -> "1001119"  [label="DDG: ((char*)in->data)[0] == 4"];
"1000521" -> "1001119"  [label="DDG: in->length"];
"1000521" -> "1000519"  [label="DDG: in->length"];
"1000521" -> "1000519"  [label="DDG: ((char*)in->data)[0] == 4"];
"1000220" -> "1000521"  [label="DDG: in->length"];
"1000519" -> "1000518"  [label="AST: "];
"1000519" -> "1000520"  [label="CFG: "];
"1000520" -> "1000519"  [label="AST: "];
"1000535" -> "1000519"  [label="CFG: "];
"1000538" -> "1000519"  [label="CFG: "];
"1000519" -> "1001119"  [label="DDG: ret"];
"1000519" -> "1001119"  [label="DDG: ret && in->length && ((char*)in->data)[0] == 4"];
"1000519" -> "1001119"  [label="DDG: in->length && ((char*)in->data)[0] == 4"];
"1000509" -> "1000519"  [label="DDG: ret"];
"1000519" -> "1001117"  [label="DDG: ret"];
"1001117" -> "1000121"  [label="AST: "];
"1001117" -> "1001118"  [label="CFG: "];
"1001118" -> "1001117"  [label="AST: "];
"1001119" -> "1001117"  [label="CFG: "];
"1001117" -> "1001119"  [label="DDG: <RET>"];
"1001118" -> "1001117"  [label="DDG: ret"];
"1001058" -> "1001117"  [label="DDG: ret"];
"1000869" -> "1001117"  [label="DDG: ret"];
"1000545" -> "1001117"  [label="DDG: ret"];
"1000720" -> "1001117"  [label="DDG: ret"];
"1000703" -> "1001117"  [label="DDG: ret"];
"1000604" -> "1001117"  [label="DDG: ret"];
"1000636" -> "1001117"  [label="DDG: ret"];
"1000628" -> "1001117"  [label="DDG: ret"];
"1000747" -> "1001117"  [label="DDG: ret"];
"1000645" -> "1001117"  [label="DDG: ret"];
"1000779" -> "1001117"  [label="DDG: ret"];
"1000997" -> "1001117"  [label="DDG: ret"];
"1000317" -> "1001117"  [label="DDG: ret"];
"1000667" -> "1001117"  [label="DDG: ret"];
"1000835" -> "1001117"  [label="DDG: ret"];
"1000272" -> "1001117"  [label="DDG: ret"];
"1001036" -> "1001117"  [label="DDG: ret"];
"1000245" -> "1001117"  [label="DDG: ret"];
"1000874" -> "1001117"  [label="DDG: ret"];
"1000534" -> "1001117"  [label="DDG: ret"];
"1000914" -> "1001117"  [label="DDG: ret"];
}
