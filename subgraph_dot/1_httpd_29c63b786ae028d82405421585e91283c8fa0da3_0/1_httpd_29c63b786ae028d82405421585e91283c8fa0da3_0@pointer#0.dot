digraph "1_httpd_29c63b786ae028d82405421585e91283c8fa0da3_0@pointer" {
"1000249" [label="(Call,add_trailer(stream, name, nlen, value, vlen))"];
"1000245" [label="(Call,h2_stream_is_scheduled(stream))"];
"1000110" [label="(Call,ap_assert(stream))"];
"1000104" [label="(MethodParameterIn,h2_stream *stream)"];
"1000199" [label="(Call,name[0] != ':')"];
"1000119" [label="(Call,name[0] == ':')"];
"1000105" [label="(MethodParameterIn,const char *name)"];
"1000106" [label="(MethodParameterIn,size_t nlen)"];
"1000107" [label="(MethodParameterIn,const char *value)"];
"1000126" [label="(Call,(vlen) > stream->session->s->limit_req_line)"];
"1000108" [label="(MethodParameterIn,size_t vlen)"];
"1000248" [label="(Return,return add_trailer(stream, name, nlen, value, vlen);)"];
"1000108" [label="(MethodParameterIn,size_t vlen)"];
"1000251" [label="(Identifier,name)"];
"1000200" [label="(Call,name[0])"];
"1000201" [label="(Identifier,name)"];
"1000105" [label="(MethodParameterIn,const char *name)"];
"1000164" [label="(Call,2 + vlen)"];
"1000301" [label="(MethodReturn,apr_status_t)"];
"1000249" [label="(Call,add_trailer(stream, name, nlen, value, vlen))"];
"1000126" [label="(Call,(vlen) > stream->session->s->limit_req_line)"];
"1000290" [label="(Call,h2_request_add_header(stream->rtmp, stream->pool,\n                                     name, nlen, value, vlen))"];
"1000163" [label="(Identifier,nlen)"];
"1000107" [label="(MethodParameterIn,const char *value)"];
"1000118" [label="(ControlStructure,if (name[0] == ':'))"];
"1000127" [label="(Identifier,vlen)"];
"1000244" [label="(ControlStructure,if (h2_stream_is_scheduled(stream)))"];
"1000207" [label="(Identifier,stream)"];
"1000110" [label="(Call,ap_assert(stream))"];
"1000106" [label="(MethodParameterIn,size_t nlen)"];
"1000119" [label="(Call,name[0] == ':')"];
"1000252" [label="(Identifier,nlen)"];
"1000125" [label="(ControlStructure,if ((vlen) > stream->session->s->limit_req_line))"];
"1000199" [label="(Call,name[0] != ':')"];
"1000156" [label="(Call,h2_stream_set_error(stream, \n                                           HTTP_REQUEST_URI_TOO_LARGE))"];
"1000248" [label="(Return,return add_trailer(stream, name, nlen, value, vlen);)"];
"1000162" [label="(Call,nlen + 2 + vlen)"];
"1000260" [label="(Identifier,stream)"];
"1000253" [label="(Identifier,value)"];
"1000203" [label="(Literal,':')"];
"1000123" [label="(Literal,':')"];
"1000109" [label="(Block,)"];
"1000254" [label="(Identifier,vlen)"];
"1000241" [label="(Call,h2_stream_set_error(stream, \n                                           HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE))"];
"1000245" [label="(Call,h2_stream_is_scheduled(stream))"];
"1000246" [label="(Identifier,stream)"];
"1000247" [label="(Block,)"];
"1000104" [label="(MethodParameterIn,h2_stream *stream)"];
"1000115" [label="(Identifier,stream)"];
"1000111" [label="(Identifier,stream)"];
"1000195" [label="(Call,h2_stream_set_error(stream, \n                                       HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE))"];
"1000175" [label="(Call,ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, stream->session->c,\n                          \"h2_stream(%ld-%d): header %s too long\", \n                           stream->session->id, stream->id, name))"];
"1000198" [label="(ControlStructure,if (name[0] != ':'))"];
"1000137" [label="(Identifier,APLOG_MARK)"];
"1000128" [label="(Call,stream->session->s->limit_req_line)"];
"1000250" [label="(Identifier,stream)"];
"1000136" [label="(Call,ap_log_cerror(APLOG_MARK, APLOG_TRACE1, 0, stream->session->c,\n                              \"h2_stream(%ld-%d): pseudo header %s too long\", \n                              stream->session->id, stream->id, name))"];
"1000161" [label="(Call,(nlen + 2 + vlen) > stream->session->s->limit_req_fieldsize)"];
"1000120" [label="(Call,name[0])"];
"1000249" -> "1000248"  [label="AST: "];
"1000249" -> "1000254"  [label="CFG: "];
"1000250" -> "1000249"  [label="AST: "];
"1000251" -> "1000249"  [label="AST: "];
"1000252" -> "1000249"  [label="AST: "];
"1000253" -> "1000249"  [label="AST: "];
"1000254" -> "1000249"  [label="AST: "];
"1000248" -> "1000249"  [label="CFG: "];
"1000249" -> "1000301"  [label="DDG: name"];
"1000249" -> "1000301"  [label="DDG: value"];
"1000249" -> "1000301"  [label="DDG: vlen"];
"1000249" -> "1000301"  [label="DDG: nlen"];
"1000249" -> "1000301"  [label="DDG: stream"];
"1000249" -> "1000301"  [label="DDG: add_trailer(stream, name, nlen, value, vlen)"];
"1000249" -> "1000248"  [label="DDG: add_trailer(stream, name, nlen, value, vlen)"];
"1000245" -> "1000249"  [label="DDG: stream"];
"1000104" -> "1000249"  [label="DDG: stream"];
"1000199" -> "1000249"  [label="DDG: name[0]"];
"1000105" -> "1000249"  [label="DDG: name"];
"1000106" -> "1000249"  [label="DDG: nlen"];
"1000107" -> "1000249"  [label="DDG: value"];
"1000126" -> "1000249"  [label="DDG: vlen"];
"1000108" -> "1000249"  [label="DDG: vlen"];
"1000245" -> "1000244"  [label="AST: "];
"1000245" -> "1000246"  [label="CFG: "];
"1000246" -> "1000245"  [label="AST: "];
"1000250" -> "1000245"  [label="CFG: "];
"1000260" -> "1000245"  [label="CFG: "];
"1000245" -> "1000301"  [label="DDG: h2_stream_is_scheduled(stream)"];
"1000245" -> "1000301"  [label="DDG: stream"];
"1000110" -> "1000245"  [label="DDG: stream"];
"1000104" -> "1000245"  [label="DDG: stream"];
"1000110" -> "1000109"  [label="AST: "];
"1000110" -> "1000111"  [label="CFG: "];
"1000111" -> "1000110"  [label="AST: "];
"1000115" -> "1000110"  [label="CFG: "];
"1000110" -> "1000301"  [label="DDG: ap_assert(stream)"];
"1000104" -> "1000110"  [label="DDG: stream"];
"1000110" -> "1000156"  [label="DDG: stream"];
"1000110" -> "1000195"  [label="DDG: stream"];
"1000110" -> "1000241"  [label="DDG: stream"];
"1000104" -> "1000103"  [label="AST: "];
"1000104" -> "1000301"  [label="DDG: stream"];
"1000104" -> "1000156"  [label="DDG: stream"];
"1000104" -> "1000195"  [label="DDG: stream"];
"1000104" -> "1000241"  [label="DDG: stream"];
"1000199" -> "1000198"  [label="AST: "];
"1000199" -> "1000203"  [label="CFG: "];
"1000200" -> "1000199"  [label="AST: "];
"1000203" -> "1000199"  [label="AST: "];
"1000207" -> "1000199"  [label="CFG: "];
"1000246" -> "1000199"  [label="CFG: "];
"1000199" -> "1000301"  [label="DDG: name[0]"];
"1000199" -> "1000301"  [label="DDG: name[0] != ':'"];
"1000119" -> "1000199"  [label="DDG: name[0]"];
"1000105" -> "1000199"  [label="DDG: name"];
"1000199" -> "1000290"  [label="DDG: name[0]"];
"1000119" -> "1000118"  [label="AST: "];
"1000119" -> "1000123"  [label="CFG: "];
"1000120" -> "1000119"  [label="AST: "];
"1000123" -> "1000119"  [label="AST: "];
"1000127" -> "1000119"  [label="CFG: "];
"1000163" -> "1000119"  [label="CFG: "];
"1000119" -> "1000301"  [label="DDG: name[0]"];
"1000119" -> "1000301"  [label="DDG: name[0] == ':'"];
"1000105" -> "1000119"  [label="DDG: name"];
"1000119" -> "1000136"  [label="DDG: name[0]"];
"1000119" -> "1000175"  [label="DDG: name[0]"];
"1000105" -> "1000103"  [label="AST: "];
"1000105" -> "1000301"  [label="DDG: name"];
"1000105" -> "1000136"  [label="DDG: name"];
"1000105" -> "1000175"  [label="DDG: name"];
"1000105" -> "1000290"  [label="DDG: name"];
"1000106" -> "1000103"  [label="AST: "];
"1000106" -> "1000301"  [label="DDG: nlen"];
"1000106" -> "1000161"  [label="DDG: nlen"];
"1000106" -> "1000162"  [label="DDG: nlen"];
"1000106" -> "1000290"  [label="DDG: nlen"];
"1000107" -> "1000103"  [label="AST: "];
"1000107" -> "1000301"  [label="DDG: value"];
"1000107" -> "1000290"  [label="DDG: value"];
"1000126" -> "1000125"  [label="AST: "];
"1000126" -> "1000128"  [label="CFG: "];
"1000127" -> "1000126"  [label="AST: "];
"1000128" -> "1000126"  [label="AST: "];
"1000137" -> "1000126"  [label="CFG: "];
"1000201" -> "1000126"  [label="CFG: "];
"1000126" -> "1000301"  [label="DDG: vlen"];
"1000126" -> "1000301"  [label="DDG: (vlen) > stream->session->s->limit_req_line"];
"1000126" -> "1000301"  [label="DDG: stream->session->s->limit_req_line"];
"1000108" -> "1000126"  [label="DDG: vlen"];
"1000126" -> "1000290"  [label="DDG: vlen"];
"1000108" -> "1000103"  [label="AST: "];
"1000108" -> "1000301"  [label="DDG: vlen"];
"1000108" -> "1000161"  [label="DDG: vlen"];
"1000108" -> "1000162"  [label="DDG: vlen"];
"1000108" -> "1000164"  [label="DDG: vlen"];
"1000108" -> "1000290"  [label="DDG: vlen"];
"1000248" -> "1000247"  [label="AST: "];
"1000301" -> "1000248"  [label="CFG: "];
"1000248" -> "1000301"  [label="DDG: <RET>"];
}
