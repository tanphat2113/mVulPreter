digraph "1_linux_dc0b027dfadfcb8a5504f7d8052754bf8d501ab9_21@API" {
"1000142" [label="(Call,can_open_cached(state, open_mode))"];
"1000106" [label="(Call,*state = opendata->state)"];
"1000231" [label="(Call,update_open_stateid(state, NULL, &stateid, open_mode))"];
"1000154" [label="(Call,can_open_cached(state, open_mode))"];
"1000142" [label="(Call,can_open_cached(state, open_mode))"];
"1000120" [label="(Call,open_mode = opendata->o_arg.open_flags & (FMODE_READ|FMODE_WRITE|O_EXCL))"];
"1000122" [label="(Call,opendata->o_arg.open_flags & (FMODE_READ|FMODE_WRITE|O_EXCL))"];
"1000128" [label="(Call,FMODE_READ|FMODE_WRITE|O_EXCL)"];
"1000130" [label="(Call,FMODE_WRITE|O_EXCL)"];
"1000185" [label="(Call,delegation == NULL)"];
"1000177" [label="(Call,delegation = rcu_dereference(nfsi->delegation))"];
"1000179" [label="(Call,rcu_dereference(nfsi->delegation))"];
"1000211" [label="(Call,nfs_may_open(state->inode, state->owner->so_cred, open_mode))"];
"1000114" [label="(Call,NFS_I(state->inode))"];
"1000189" [label="(Call,can_open_delegated(delegation, open_mode))"];
"1000158" [label="(Call,update_open_stateflags(state, open_mode))"];
"1000248" [label="(Return,return state;)"];
"1000188" [label="(Call,!can_open_delegated(delegation, open_mode))"];
"1000184" [label="(Call,delegation == NULL ||\n\t\t    !can_open_delegated(delegation, open_mode))"];
"1000209" [label="(Call,ret = nfs_may_open(state->inode, state->owner->so_cred, open_mode))"];
"1000222" [label="(Call,ret != 0)"];
"1000240" [label="(Call,ERR_PTR(ret))"];
"1000239" [label="(Return,return ERR_PTR(ret);)"];
"1000209" [label="(Call,ret = nfs_may_open(state->inode, state->owner->so_cred, open_mode))"];
"1000224" [label="(Literal,0)"];
"1000173" [label="(Identifier,state)"];
"1000143" [label="(Identifier,state)"];
"1000190" [label="(Identifier,delegation)"];
"1000227" [label="(Identifier,ret)"];
"1000177" [label="(Call,delegation = rcu_dereference(nfsi->delegation))"];
"1000241" [label="(Identifier,ret)"];
"1000226" [label="(Call,ret = -EAGAIN)"];
"1000156" [label="(Identifier,open_mode)"];
"1000114" [label="(Call,NFS_I(state->inode))"];
"1000239" [label="(Return,return ERR_PTR(ret);)"];
"1000128" [label="(Call,FMODE_READ|FMODE_WRITE|O_EXCL)"];
"1000220" [label="(Identifier,open_mode)"];
"1000150" [label="(Identifier,state)"];
"1000141" [label="(ControlStructure,if (can_open_cached(state, open_mode)))"];
"1000186" [label="(Identifier,delegation)"];
"1000184" [label="(Call,delegation == NULL ||\n\t\t    !can_open_delegated(delegation, open_mode))"];
"1000123" [label="(Call,opendata->o_arg.open_flags)"];
"1000210" [label="(Identifier,ret)"];
"1000155" [label="(Identifier,state)"];
"1000115" [label="(Call,state->inode)"];
"1000212" [label="(Call,state->inode)"];
"1000230" [label="(ControlStructure,if (update_open_stateid(state, NULL, &stateid, open_mode)))"];
"1000159" [label="(Identifier,state)"];
"1000191" [label="(Identifier,open_mode)"];
"1000142" [label="(Call,can_open_cached(state, open_mode))"];
"1000120" [label="(Call,open_mode = opendata->o_arg.open_flags & (FMODE_READ|FMODE_WRITE|O_EXCL))"];
"1000140" [label="(Block,)"];
"1000187" [label="(Identifier,NULL)"];
"1000250" [label="(MethodReturn,static struct nfs4_state *)"];
"1000211" [label="(Call,nfs_may_open(state->inode, state->owner->so_cred, open_mode))"];
"1000129" [label="(Identifier,FMODE_READ)"];
"1000234" [label="(Call,&stateid)"];
"1000240" [label="(Call,ERR_PTR(ret))"];
"1000157" [label="(Block,)"];
"1000108" [label="(Call,opendata->state)"];
"1000183" [label="(ControlStructure,if (delegation == NULL ||\n\t\t    !can_open_delegated(delegation, open_mode)))"];
"1000178" [label="(Identifier,delegation)"];
"1000144" [label="(Identifier,open_mode)"];
"1000130" [label="(Call,FMODE_WRITE|O_EXCL)"];
"1000197" [label="(Identifier,stateid)"];
"1000248" [label="(Return,return state;)"];
"1000236" [label="(Identifier,open_mode)"];
"1000189" [label="(Call,can_open_delegated(delegation, open_mode))"];
"1000176" [label="(Call,rcu_read_lock())"];
"1000249" [label="(Identifier,state)"];
"1000233" [label="(Identifier,NULL)"];
"1000107" [label="(Identifier,state)"];
"1000135" [label="(Call,ret = -EAGAIN)"];
"1000106" [label="(Call,*state = opendata->state)"];
"1000121" [label="(Identifier,open_mode)"];
"1000112" [label="(Call,*nfsi = NFS_I(state->inode))"];
"1000231" [label="(Call,update_open_stateid(state, NULL, &stateid, open_mode))"];
"1000221" [label="(ControlStructure,if (ret != 0))"];
"1000215" [label="(Call,state->owner->so_cred)"];
"1000237" [label="(ControlStructure,goto out_return_state;)"];
"1000158" [label="(Call,update_open_stateflags(state, open_mode))"];
"1000180" [label="(Call,nfsi->delegation)"];
"1000113" [label="(Identifier,nfsi)"];
"1000153" [label="(ControlStructure,if (can_open_cached(state, open_mode)))"];
"1000132" [label="(Identifier,O_EXCL)"];
"1000232" [label="(Identifier,state)"];
"1000223" [label="(Identifier,ret)"];
"1000154" [label="(Call,can_open_cached(state, open_mode))"];
"1000122" [label="(Call,opendata->o_arg.open_flags & (FMODE_READ|FMODE_WRITE|O_EXCL))"];
"1000225" [label="(ControlStructure,goto out;)"];
"1000188" [label="(Call,!can_open_delegated(delegation, open_mode))"];
"1000160" [label="(Identifier,open_mode)"];
"1000179" [label="(Call,rcu_dereference(nfsi->delegation))"];
"1000193" [label="(Call,rcu_read_unlock())"];
"1000131" [label="(Identifier,FMODE_WRITE)"];
"1000222" [label="(Call,ret != 0)"];
"1000104" [label="(Block,)"];
"1000185" [label="(Call,delegation == NULL)"];
"1000165" [label="(Identifier,state)"];
"1000136" [label="(Identifier,ret)"];
"1000142" -> "1000141"  [label="AST: "];
"1000142" -> "1000144"  [label="CFG: "];
"1000143" -> "1000142"  [label="AST: "];
"1000144" -> "1000142"  [label="AST: "];
"1000150" -> "1000142"  [label="CFG: "];
"1000176" -> "1000142"  [label="CFG: "];
"1000142" -> "1000250"  [label="DDG: can_open_cached(state, open_mode)"];
"1000142" -> "1000250"  [label="DDG: open_mode"];
"1000142" -> "1000250"  [label="DDG: state"];
"1000106" -> "1000142"  [label="DDG: state"];
"1000231" -> "1000142"  [label="DDG: state"];
"1000231" -> "1000142"  [label="DDG: open_mode"];
"1000120" -> "1000142"  [label="DDG: open_mode"];
"1000142" -> "1000154"  [label="DDG: state"];
"1000142" -> "1000154"  [label="DDG: open_mode"];
"1000142" -> "1000189"  [label="DDG: open_mode"];
"1000142" -> "1000211"  [label="DDG: open_mode"];
"1000142" -> "1000231"  [label="DDG: state"];
"1000106" -> "1000104"  [label="AST: "];
"1000106" -> "1000108"  [label="CFG: "];
"1000107" -> "1000106"  [label="AST: "];
"1000108" -> "1000106"  [label="AST: "];
"1000113" -> "1000106"  [label="CFG: "];
"1000106" -> "1000250"  [label="DDG: opendata->state"];
"1000231" -> "1000230"  [label="AST: "];
"1000231" -> "1000236"  [label="CFG: "];
"1000232" -> "1000231"  [label="AST: "];
"1000233" -> "1000231"  [label="AST: "];
"1000234" -> "1000231"  [label="AST: "];
"1000236" -> "1000231"  [label="AST: "];
"1000143" -> "1000231"  [label="CFG: "];
"1000237" -> "1000231"  [label="CFG: "];
"1000231" -> "1000250"  [label="DDG: update_open_stateid(state, NULL, &stateid, open_mode)"];
"1000231" -> "1000250"  [label="DDG: open_mode"];
"1000231" -> "1000250"  [label="DDG: NULL"];
"1000231" -> "1000250"  [label="DDG: state"];
"1000231" -> "1000250"  [label="DDG: &stateid"];
"1000231" -> "1000185"  [label="DDG: NULL"];
"1000154" -> "1000231"  [label="DDG: state"];
"1000185" -> "1000231"  [label="DDG: NULL"];
"1000211" -> "1000231"  [label="DDG: open_mode"];
"1000231" -> "1000248"  [label="DDG: state"];
"1000154" -> "1000153"  [label="AST: "];
"1000154" -> "1000156"  [label="CFG: "];
"1000155" -> "1000154"  [label="AST: "];
"1000156" -> "1000154"  [label="AST: "];
"1000159" -> "1000154"  [label="CFG: "];
"1000173" -> "1000154"  [label="CFG: "];
"1000154" -> "1000250"  [label="DDG: state"];
"1000154" -> "1000250"  [label="DDG: can_open_cached(state, open_mode)"];
"1000154" -> "1000250"  [label="DDG: open_mode"];
"1000154" -> "1000158"  [label="DDG: state"];
"1000154" -> "1000158"  [label="DDG: open_mode"];
"1000154" -> "1000189"  [label="DDG: open_mode"];
"1000154" -> "1000211"  [label="DDG: open_mode"];
"1000120" -> "1000104"  [label="AST: "];
"1000120" -> "1000122"  [label="CFG: "];
"1000121" -> "1000120"  [label="AST: "];
"1000122" -> "1000120"  [label="AST: "];
"1000136" -> "1000120"  [label="CFG: "];
"1000120" -> "1000250"  [label="DDG: opendata->o_arg.open_flags & (FMODE_READ|FMODE_WRITE|O_EXCL)"];
"1000122" -> "1000120"  [label="DDG: opendata->o_arg.open_flags"];
"1000122" -> "1000120"  [label="DDG: FMODE_READ|FMODE_WRITE|O_EXCL"];
"1000122" -> "1000128"  [label="CFG: "];
"1000123" -> "1000122"  [label="AST: "];
"1000128" -> "1000122"  [label="AST: "];
"1000122" -> "1000250"  [label="DDG: opendata->o_arg.open_flags"];
"1000122" -> "1000250"  [label="DDG: FMODE_READ|FMODE_WRITE|O_EXCL"];
"1000128" -> "1000122"  [label="DDG: FMODE_READ"];
"1000128" -> "1000122"  [label="DDG: FMODE_WRITE|O_EXCL"];
"1000128" -> "1000130"  [label="CFG: "];
"1000129" -> "1000128"  [label="AST: "];
"1000130" -> "1000128"  [label="AST: "];
"1000128" -> "1000250"  [label="DDG: FMODE_WRITE|O_EXCL"];
"1000128" -> "1000250"  [label="DDG: FMODE_READ"];
"1000130" -> "1000128"  [label="DDG: FMODE_WRITE"];
"1000130" -> "1000128"  [label="DDG: O_EXCL"];
"1000130" -> "1000132"  [label="CFG: "];
"1000131" -> "1000130"  [label="AST: "];
"1000132" -> "1000130"  [label="AST: "];
"1000130" -> "1000250"  [label="DDG: O_EXCL"];
"1000130" -> "1000250"  [label="DDG: FMODE_WRITE"];
"1000185" -> "1000184"  [label="AST: "];
"1000185" -> "1000187"  [label="CFG: "];
"1000186" -> "1000185"  [label="AST: "];
"1000187" -> "1000185"  [label="AST: "];
"1000190" -> "1000185"  [label="CFG: "];
"1000184" -> "1000185"  [label="CFG: "];
"1000185" -> "1000250"  [label="DDG: delegation"];
"1000185" -> "1000250"  [label="DDG: NULL"];
"1000185" -> "1000184"  [label="DDG: delegation"];
"1000185" -> "1000184"  [label="DDG: NULL"];
"1000177" -> "1000185"  [label="DDG: delegation"];
"1000185" -> "1000189"  [label="DDG: delegation"];
"1000177" -> "1000140"  [label="AST: "];
"1000177" -> "1000179"  [label="CFG: "];
"1000178" -> "1000177"  [label="AST: "];
"1000179" -> "1000177"  [label="AST: "];
"1000186" -> "1000177"  [label="CFG: "];
"1000177" -> "1000250"  [label="DDG: rcu_dereference(nfsi->delegation)"];
"1000179" -> "1000177"  [label="DDG: nfsi->delegation"];
"1000179" -> "1000180"  [label="CFG: "];
"1000180" -> "1000179"  [label="AST: "];
"1000179" -> "1000250"  [label="DDG: nfsi->delegation"];
"1000211" -> "1000209"  [label="AST: "];
"1000211" -> "1000220"  [label="CFG: "];
"1000212" -> "1000211"  [label="AST: "];
"1000215" -> "1000211"  [label="AST: "];
"1000220" -> "1000211"  [label="AST: "];
"1000209" -> "1000211"  [label="CFG: "];
"1000211" -> "1000250"  [label="DDG: state->inode"];
"1000211" -> "1000250"  [label="DDG: open_mode"];
"1000211" -> "1000250"  [label="DDG: state->owner->so_cred"];
"1000211" -> "1000209"  [label="DDG: state->inode"];
"1000211" -> "1000209"  [label="DDG: state->owner->so_cred"];
"1000211" -> "1000209"  [label="DDG: open_mode"];
"1000114" -> "1000211"  [label="DDG: state->inode"];
"1000189" -> "1000211"  [label="DDG: open_mode"];
"1000114" -> "1000112"  [label="AST: "];
"1000114" -> "1000115"  [label="CFG: "];
"1000115" -> "1000114"  [label="AST: "];
"1000112" -> "1000114"  [label="CFG: "];
"1000114" -> "1000250"  [label="DDG: state->inode"];
"1000114" -> "1000112"  [label="DDG: state->inode"];
"1000189" -> "1000188"  [label="AST: "];
"1000189" -> "1000191"  [label="CFG: "];
"1000190" -> "1000189"  [label="AST: "];
"1000191" -> "1000189"  [label="AST: "];
"1000188" -> "1000189"  [label="CFG: "];
"1000189" -> "1000250"  [label="DDG: delegation"];
"1000189" -> "1000250"  [label="DDG: open_mode"];
"1000189" -> "1000188"  [label="DDG: delegation"];
"1000189" -> "1000188"  [label="DDG: open_mode"];
"1000158" -> "1000157"  [label="AST: "];
"1000158" -> "1000160"  [label="CFG: "];
"1000159" -> "1000158"  [label="AST: "];
"1000160" -> "1000158"  [label="AST: "];
"1000165" -> "1000158"  [label="CFG: "];
"1000158" -> "1000250"  [label="DDG: state"];
"1000158" -> "1000250"  [label="DDG: open_mode"];
"1000158" -> "1000250"  [label="DDG: update_open_stateflags(state, open_mode)"];
"1000158" -> "1000248"  [label="DDG: state"];
"1000248" -> "1000104"  [label="AST: "];
"1000248" -> "1000249"  [label="CFG: "];
"1000249" -> "1000248"  [label="AST: "];
"1000250" -> "1000248"  [label="CFG: "];
"1000248" -> "1000250"  [label="DDG: <RET>"];
"1000249" -> "1000248"  [label="DDG: state"];
"1000188" -> "1000184"  [label="AST: "];
"1000184" -> "1000188"  [label="CFG: "];
"1000188" -> "1000250"  [label="DDG: can_open_delegated(delegation, open_mode)"];
"1000188" -> "1000184"  [label="DDG: can_open_delegated(delegation, open_mode)"];
"1000184" -> "1000183"  [label="AST: "];
"1000193" -> "1000184"  [label="CFG: "];
"1000197" -> "1000184"  [label="CFG: "];
"1000184" -> "1000250"  [label="DDG: delegation == NULL"];
"1000184" -> "1000250"  [label="DDG: !can_open_delegated(delegation, open_mode)"];
"1000184" -> "1000250"  [label="DDG: delegation == NULL ||\n\t\t    !can_open_delegated(delegation, open_mode)"];
"1000209" -> "1000140"  [label="AST: "];
"1000210" -> "1000209"  [label="AST: "];
"1000223" -> "1000209"  [label="CFG: "];
"1000209" -> "1000250"  [label="DDG: nfs_may_open(state->inode, state->owner->so_cred, open_mode)"];
"1000209" -> "1000222"  [label="DDG: ret"];
"1000222" -> "1000221"  [label="AST: "];
"1000222" -> "1000224"  [label="CFG: "];
"1000223" -> "1000222"  [label="AST: "];
"1000224" -> "1000222"  [label="AST: "];
"1000225" -> "1000222"  [label="CFG: "];
"1000227" -> "1000222"  [label="CFG: "];
"1000222" -> "1000250"  [label="DDG: ret != 0"];
"1000222" -> "1000240"  [label="DDG: ret"];
"1000240" -> "1000239"  [label="AST: "];
"1000240" -> "1000241"  [label="CFG: "];
"1000241" -> "1000240"  [label="AST: "];
"1000239" -> "1000240"  [label="CFG: "];
"1000240" -> "1000250"  [label="DDG: ERR_PTR(ret)"];
"1000240" -> "1000250"  [label="DDG: ret"];
"1000240" -> "1000239"  [label="DDG: ERR_PTR(ret)"];
"1000226" -> "1000240"  [label="DDG: ret"];
"1000135" -> "1000240"  [label="DDG: ret"];
"1000239" -> "1000104"  [label="AST: "];
"1000250" -> "1000239"  [label="CFG: "];
"1000239" -> "1000250"  [label="DDG: <RET>"];
}
