digraph "0_file_6f737ddfadb596d7d4a993f7ed2141ffd664a81c@pointer" {
"1000143" [label="(Call,file_error(ms, 0, \"recursion nesting exceeded\"))"];
"1000103" [label="(MethodParameterIn,struct magic_set *ms)"];
"1001769" [label="(Call,mconvert(ms, m, flip))"];
"1001404" [label="(Call,mcopy(ms, p, m->type, 0, s, offset, nbytes, m))"];
"1001624" [label="(Call,file_printf(ms, F(ms, m, \"%u\"), offset))"];
"1001626" [label="(Call,F(ms, m, \"%u\"))"];
"1000145" [label="(Literal,0)"];
"1000146" [label="(Literal,\"recursion nesting exceeded\")"];
"1000149" [label="(Literal,1)"];
"1001717" [label="(Call,match(ms, ml.magic, ml.nmagic, s, nbytes, offset + o,\n\t\t    mode, text, flip, recursion_level, printed_something,\n\t\t    need_separator, returnval))"];
"1000142" [label="(Block,)"];
"1001641" [label="(Call,file_printf(ms, \"%s\", rbuf))"];
"1000143" [label="(Call,file_error(ms, 0, \"recursion nesting exceeded\"))"];
"1000152" [label="(Call,mcopy(ms, p, m->type, m->flag & INDIR, s, (uint32_t)(offset + o),\n\t    (uint32_t)nbytes, m))"];
"1001693" [label="(Call,file_error(ms, 0, \"cannot find entry `%s'\", sbuf))"];
"1001750" [label="(Call,file_printf(ms, \"%s\", m->desc))"];
"1000103" [label="(MethodParameterIn,struct magic_set *ms)"];
"1001564" [label="(Call,file_softmagic(ms, s + offset, nbytes - offset,\n \t\t    recursion_level, BINTEST, text))"];
"1001685" [label="(Call,file_magicfind(ms, sbuf, &ml))"];
"1001777" [label="(MethodReturn,RET)"];
"1000144" [label="(Identifier,ms)"];
"1000143" -> "1000142"  [label="AST: "];
"1000143" -> "1000146"  [label="CFG: "];
"1000144" -> "1000143"  [label="AST: "];
"1000145" -> "1000143"  [label="AST: "];
"1000146" -> "1000143"  [label="AST: "];
"1000149" -> "1000143"  [label="CFG: "];
"1000143" -> "1001777"  [label="DDG: "];
"1000143" -> "1001777"  [label="DDG: "];
"1000103" -> "1000143"  [label="DDG: "];
"1000103" -> "1000102"  [label="AST: "];
"1000103" -> "1001777"  [label="DDG: "];
"1000103" -> "1000152"  [label="DDG: "];
"1000103" -> "1001404"  [label="DDG: "];
"1000103" -> "1001564"  [label="DDG: "];
"1000103" -> "1001624"  [label="DDG: "];
"1000103" -> "1001626"  [label="DDG: "];
"1000103" -> "1001641"  [label="DDG: "];
"1000103" -> "1001685"  [label="DDG: "];
"1000103" -> "1001693"  [label="DDG: "];
"1000103" -> "1001717"  [label="DDG: "];
"1000103" -> "1001750"  [label="DDG: "];
"1000103" -> "1001769"  [label="DDG: "];
}
