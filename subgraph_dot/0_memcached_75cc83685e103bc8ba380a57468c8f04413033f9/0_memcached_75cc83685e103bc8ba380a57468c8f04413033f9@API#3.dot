digraph "0_memcached_75cc83685e103bc8ba380a57468c8f04413033f9@API" {
"1000291" [label="(Call,fprintf(stderr, \"\n<%d   \", c->sfd))"];
"1000297" [label="(Call,fprintf(stderr, \" 0x%02x\", req->bytes[ii]))"];
"1000291" [label="(Call,fprintf(stderr, \"\n<%d   \", c->sfd))"];
"1000265" [label="(Call,fprintf(stderr, \"<%d Read binary protocol data:\", c->sfd))"];
"1000177" [label="(Call,fprintf(stderr, \"%d: Client using the %s protocol\n\", c->sfd,\n                    prot_text(c->protocol)))"];
"1000183" [label="(Call,prot_text(c->protocol))"];
"1000158" [label="(Call,c->protocol = binary_prot)"];
"1000165" [label="(Call,c->protocol = ascii_prot)"];
"1000243" [label="(Call,fprintf(stderr, \"%d: Realign input buffer\n\", c->sfd))"];
"1000305" [label="(Call,fprintf(stderr, \"\n\"))"];
"1000372" [label="(Call,fprintf(stderr, \"Invalid magic:  %x\n\",\n                            c->binary_header.request.magic))"];
"1000251" [label="(Identifier,req)"];
"1000166" [label="(Call,c->protocol)"];
"1000300" [label="(Call,req->bytes[ii])"];
"1000268" [label="(Call,c->sfd)"];
"1000603" [label="(MethodReturn,static int)"];
"1000157" [label="(Block,)"];
"1000246" [label="(Call,c->sfd)"];
"1000374" [label="(Literal,\"Invalid magic:  %x\n\")"];
"1000263" [label="(Block,)"];
"1000373" [label="(Identifier,stderr)"];
"1000273" [label="(Identifier,ii)"];
"1000357" [label="(Call,c->binary_header.request.magic != PROTOCOL_BINARY_REQ)"];
"1000158" [label="(Call,c->protocol = binary_prot)"];
"1000245" [label="(Literal,\"%d: Realign input buffer\n\")"];
"1000243" [label="(Call,fprintf(stderr, \"%d: Realign input buffer\n\", c->sfd))"];
"1000371" [label="(Block,)"];
"1000265" [label="(Call,fprintf(stderr, \"<%d Read binary protocol data:\", c->sfd))"];
"1000294" [label="(Call,c->sfd)"];
"1000162" [label="(Identifier,binary_prot)"];
"1000177" [label="(Call,fprintf(stderr, \"%d: Client using the %s protocol\n\", c->sfd,\n                    prot_text(c->protocol)))"];
"1000176" [label="(Block,)"];
"1000266" [label="(Identifier,stderr)"];
"1000179" [label="(Literal,\"%d: Client using the %s protocol\n\")"];
"1000169" [label="(Identifier,ascii_prot)"];
"1000297" [label="(Call,fprintf(stderr, \" 0x%02x\", req->bytes[ii]))"];
"1000291" [label="(Call,fprintf(stderr, \"\n<%d   \", c->sfd))"];
"1000165" [label="(Call,c->protocol = ascii_prot)"];
"1000292" [label="(Identifier,stderr)"];
"1000188" [label="(Call,c->protocol == binary_prot)"];
"1000283" [label="(Block,)"];
"1000242" [label="(Block,)"];
"1000383" [label="(Identifier,c)"];
"1000299" [label="(Literal,\" 0x%02x\")"];
"1000290" [label="(Block,)"];
"1000159" [label="(Call,c->protocol)"];
"1000282" [label="(Identifier,ii)"];
"1000310" [label="(Identifier,c)"];
"1000305" [label="(Call,fprintf(stderr, \"\n\"))"];
"1000372" [label="(Call,fprintf(stderr, \"Invalid magic:  %x\n\",\n                            c->binary_header.request.magic))"];
"1000184" [label="(Call,c->protocol)"];
"1000178" [label="(Identifier,stderr)"];
"1000190" [label="(Identifier,c)"];
"1000164" [label="(Block,)"];
"1000307" [label="(Literal,\"\n\")"];
"1000173" [label="(Identifier,settings)"];
"1000375" [label="(Call,c->binary_header.request.magic)"];
"1000180" [label="(Call,c->sfd)"];
"1000183" [label="(Call,prot_text(c->protocol))"];
"1000244" [label="(Identifier,stderr)"];
"1000267" [label="(Literal,\"<%d Read binary protocol data:\")"];
"1000306" [label="(Identifier,stderr)"];
"1000298" [label="(Identifier,stderr)"];
"1000293" [label="(Literal,\"\n<%d   \")"];
"1000291" -> "1000290"  [label="AST: "];
"1000291" -> "1000294"  [label="CFG: "];
"1000292" -> "1000291"  [label="AST: "];
"1000293" -> "1000291"  [label="AST: "];
"1000294" -> "1000291"  [label="AST: "];
"1000298" -> "1000291"  [label="CFG: "];
"1000291" -> "1000603"  [label="DDG: "];
"1000291" -> "1000603"  [label="DDG: "];
"1000297" -> "1000291"  [label="DDG: "];
"1000265" -> "1000291"  [label="DDG: "];
"1000265" -> "1000291"  [label="DDG: "];
"1000291" -> "1000297"  [label="DDG: "];
"1000297" -> "1000283"  [label="AST: "];
"1000297" -> "1000300"  [label="CFG: "];
"1000298" -> "1000297"  [label="AST: "];
"1000299" -> "1000297"  [label="AST: "];
"1000300" -> "1000297"  [label="AST: "];
"1000282" -> "1000297"  [label="CFG: "];
"1000297" -> "1000603"  [label="DDG: "];
"1000297" -> "1000603"  [label="DDG: "];
"1000265" -> "1000297"  [label="DDG: "];
"1000297" -> "1000305"  [label="DDG: "];
"1000265" -> "1000263"  [label="AST: "];
"1000265" -> "1000268"  [label="CFG: "];
"1000266" -> "1000265"  [label="AST: "];
"1000267" -> "1000265"  [label="AST: "];
"1000268" -> "1000265"  [label="AST: "];
"1000273" -> "1000265"  [label="CFG: "];
"1000265" -> "1000603"  [label="DDG: "];
"1000265" -> "1000603"  [label="DDG: "];
"1000177" -> "1000265"  [label="DDG: "];
"1000177" -> "1000265"  [label="DDG: "];
"1000243" -> "1000265"  [label="DDG: "];
"1000243" -> "1000265"  [label="DDG: "];
"1000265" -> "1000305"  [label="DDG: "];
"1000177" -> "1000176"  [label="AST: "];
"1000177" -> "1000183"  [label="CFG: "];
"1000178" -> "1000177"  [label="AST: "];
"1000179" -> "1000177"  [label="AST: "];
"1000180" -> "1000177"  [label="AST: "];
"1000183" -> "1000177"  [label="AST: "];
"1000190" -> "1000177"  [label="CFG: "];
"1000177" -> "1000603"  [label="DDG: "];
"1000177" -> "1000603"  [label="DDG: "];
"1000177" -> "1000603"  [label="DDG: "];
"1000177" -> "1000603"  [label="DDG: "];
"1000183" -> "1000177"  [label="DDG: "];
"1000177" -> "1000243"  [label="DDG: "];
"1000177" -> "1000243"  [label="DDG: "];
"1000177" -> "1000372"  [label="DDG: "];
"1000183" -> "1000184"  [label="CFG: "];
"1000184" -> "1000183"  [label="AST: "];
"1000158" -> "1000183"  [label="DDG: "];
"1000165" -> "1000183"  [label="DDG: "];
"1000183" -> "1000188"  [label="DDG: "];
"1000158" -> "1000157"  [label="AST: "];
"1000158" -> "1000162"  [label="CFG: "];
"1000159" -> "1000158"  [label="AST: "];
"1000162" -> "1000158"  [label="AST: "];
"1000173" -> "1000158"  [label="CFG: "];
"1000158" -> "1000188"  [label="DDG: "];
"1000165" -> "1000164"  [label="AST: "];
"1000165" -> "1000169"  [label="CFG: "];
"1000166" -> "1000165"  [label="AST: "];
"1000169" -> "1000165"  [label="AST: "];
"1000173" -> "1000165"  [label="CFG: "];
"1000165" -> "1000603"  [label="DDG: "];
"1000165" -> "1000188"  [label="DDG: "];
"1000243" -> "1000242"  [label="AST: "];
"1000243" -> "1000246"  [label="CFG: "];
"1000244" -> "1000243"  [label="AST: "];
"1000245" -> "1000243"  [label="AST: "];
"1000246" -> "1000243"  [label="AST: "];
"1000251" -> "1000243"  [label="CFG: "];
"1000243" -> "1000603"  [label="DDG: "];
"1000243" -> "1000603"  [label="DDG: "];
"1000243" -> "1000603"  [label="DDG: "];
"1000243" -> "1000372"  [label="DDG: "];
"1000305" -> "1000263"  [label="AST: "];
"1000305" -> "1000307"  [label="CFG: "];
"1000306" -> "1000305"  [label="AST: "];
"1000307" -> "1000305"  [label="AST: "];
"1000310" -> "1000305"  [label="CFG: "];
"1000305" -> "1000603"  [label="DDG: "];
"1000305" -> "1000603"  [label="DDG: "];
"1000305" -> "1000372"  [label="DDG: "];
"1000372" -> "1000371"  [label="AST: "];
"1000372" -> "1000375"  [label="CFG: "];
"1000373" -> "1000372"  [label="AST: "];
"1000374" -> "1000372"  [label="AST: "];
"1000375" -> "1000372"  [label="AST: "];
"1000383" -> "1000372"  [label="CFG: "];
"1000372" -> "1000603"  [label="DDG: "];
"1000372" -> "1000603"  [label="DDG: "];
"1000372" -> "1000603"  [label="DDG: "];
"1000357" -> "1000372"  [label="DDG: "];
}
