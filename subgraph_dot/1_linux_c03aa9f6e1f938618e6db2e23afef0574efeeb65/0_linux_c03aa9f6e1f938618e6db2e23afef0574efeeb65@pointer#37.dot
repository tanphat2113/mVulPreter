digraph "0_linux_c03aa9f6e1f938618e6db2e23afef0574efeeb65@pointer" {
"1000573" [label="(Call,le32_to_cpu(fe->uid))"];
"1000571" [label="(Call,i_uid_write(inode, le32_to_cpu(fe->uid)))"];
"1000605" [label="(Call,i_gid_write(inode, le32_to_cpu(fe->gid)))"];
"1000713" [label="(Call,set_nlink(inode, link_count))"];
"1000980" [label="(Call,inc_nlink(inode))"];
"1001130" [label="(Call,udf_get_extendedattr(inode, 12, 1))"];
"1001128" [label="(Call,(struct deviceSpec *)udf_get_extendedattr(inode, 12, 1))"];
"1001126" [label="(Call,*dsea =\n\t\t\t(struct deviceSpec *)udf_get_extendedattr(inode, 12, 1))"];
"1001137" [label="(Call,init_special_inode(inode, inode->i_mode,\n\t\t\t\tMKDEV(le32_to_cpu(dsea->majorDeviceIdent),\n\t\t\t\t      le32_to_cpu(dsea->minorDeviceIdent))))"];
"1001152" [label="(Call,make_bad_inode(inode))"];
"1001043" [label="(Call,init_special_inode(inode, inode->i_mode | S_IFIFO, 0))"];
"1001053" [label="(Call,init_special_inode(inode, inode->i_mode | S_IFSOCK, 0))"];
"1001111" [label="(Call,make_bad_inode(inode))"];
"1000708" [label="(Call,!link_count)"];
"1001061" [label="(ControlStructure,break;)"];
"1000980" [label="(Call,inc_nlink(inode))"];
"1001050" [label="(Literal,0)"];
"1001128" [label="(Call,(struct deviceSpec *)udf_get_extendedattr(inode, 12, 1))"];
"1001138" [label="(Identifier,inode)"];
"1001055" [label="(Call,inode->i_mode | S_IFSOCK)"];
"1000616" [label="(Identifier,inode)"];
"1001113" [label="(Return,return;)"];
"1001051" [label="(ControlStructure,break;)"];
"1000572" [label="(Identifier,inode)"];
"1001126" [label="(Call,*dsea =\n\t\t\t(struct deviceSpec *)udf_get_extendedattr(inode, 12, 1))"];
"1000574" [label="(Call,fe->uid)"];
"1000961" [label="(Block,)"];
"1000571" [label="(Call,i_uid_write(inode, le32_to_cpu(fe->uid)))"];
"1001127" [label="(Identifier,dsea)"];
"1000607" [label="(Call,le32_to_cpu(fe->gid))"];
"1001136" [label="(Block,)"];
"1001053" [label="(Call,init_special_inode(inode, inode->i_mode | S_IFSOCK, 0))"];
"1000605" [label="(Call,i_gid_write(inode, le32_to_cpu(fe->gid)))"];
"1000105" [label="(Block,)"];
"1001120" [label="(Call,S_ISBLK(inode->i_mode))"];
"1001060" [label="(Literal,0)"];
"1001137" [label="(Call,init_special_inode(inode, inode->i_mode,\n\t\t\t\tMKDEV(le32_to_cpu(dsea->majorDeviceIdent),\n\t\t\t\t      le32_to_cpu(dsea->minorDeviceIdent))))"];
"1000718" [label="(Identifier,inode)"];
"1001130" [label="(Call,udf_get_extendedattr(inode, 12, 1))"];
"1001135" [label="(Identifier,dsea)"];
"1001044" [label="(Identifier,inode)"];
"1001054" [label="(Identifier,inode)"];
"1001142" [label="(Call,MKDEV(le32_to_cpu(dsea->majorDeviceIdent),\n\t\t\t\t      le32_to_cpu(dsea->minorDeviceIdent)))"];
"1000981" [label="(Identifier,inode)"];
"1001133" [label="(Literal,1)"];
"1000714" [label="(Identifier,inode)"];
"1001139" [label="(Call,inode->i_mode)"];
"1001131" [label="(Identifier,inode)"];
"1001152" [label="(Call,make_bad_inode(inode))"];
"1001045" [label="(Call,inode->i_mode | S_IFIFO)"];
"1000407" [label="(Call,udf_alloc_i_data(inode, inode->i_sb->s_blocksize -\n\t\t\t\t\tsizeof(struct extendedFileEntry)))"];
"1000710" [label="(Call,link_count = 1)"];
"1001043" [label="(Call,init_special_inode(inode, inode->i_mode | S_IFIFO, 0))"];
"1001155" [label="(Identifier,bh)"];
"1000582" [label="(Identifier,inode)"];
"1001112" [label="(Identifier,inode)"];
"1001151" [label="(ControlStructure,else)"];
"1000116" [label="(Call,UDF_I(inode))"];
"1001111" [label="(Call,make_bad_inode(inode))"];
"1000713" [label="(Call,set_nlink(inode, link_count))"];
"1000982" [label="(ControlStructure,break;)"];
"1001124" [label="(Block,)"];
"1000104" [label="(MethodParameterIn,struct inode *inode)"];
"1001156" [label="(MethodReturn,static void)"];
"1001153" [label="(Identifier,inode)"];
"1000606" [label="(Identifier,inode)"];
"1000573" [label="(Call,le32_to_cpu(fe->uid))"];
"1001132" [label="(Literal,12)"];
"1000715" [label="(Identifier,link_count)"];
"1000463" [label="(Call,udf_alloc_i_data(inode, inode->i_sb->s_blocksize -\n\t\t\t\t\t\tsizeof(struct fileEntry)))"];
"1001116" [label="(Call,S_ISCHR(inode->i_mode))"];
"1000573" -> "1000571"  [label="AST: "];
"1000573" -> "1000574"  [label="CFG: "];
"1000574" -> "1000573"  [label="AST: "];
"1000571" -> "1000573"  [label="CFG: "];
"1000573" -> "1001156"  [label="DDG: fe->uid"];
"1000573" -> "1000571"  [label="DDG: fe->uid"];
"1000571" -> "1000105"  [label="AST: "];
"1000572" -> "1000571"  [label="AST: "];
"1000582" -> "1000571"  [label="CFG: "];
"1000571" -> "1001156"  [label="DDG: i_uid_write(inode, le32_to_cpu(fe->uid))"];
"1000571" -> "1001156"  [label="DDG: le32_to_cpu(fe->uid)"];
"1000116" -> "1000571"  [label="DDG: inode"];
"1000407" -> "1000571"  [label="DDG: inode"];
"1000463" -> "1000571"  [label="DDG: inode"];
"1000104" -> "1000571"  [label="DDG: inode"];
"1000571" -> "1000605"  [label="DDG: inode"];
"1000605" -> "1000105"  [label="AST: "];
"1000605" -> "1000607"  [label="CFG: "];
"1000606" -> "1000605"  [label="AST: "];
"1000607" -> "1000605"  [label="AST: "];
"1000616" -> "1000605"  [label="CFG: "];
"1000605" -> "1001156"  [label="DDG: le32_to_cpu(fe->gid)"];
"1000605" -> "1001156"  [label="DDG: i_gid_write(inode, le32_to_cpu(fe->gid))"];
"1000104" -> "1000605"  [label="DDG: inode"];
"1000607" -> "1000605"  [label="DDG: fe->gid"];
"1000605" -> "1000713"  [label="DDG: inode"];
"1000713" -> "1000105"  [label="AST: "];
"1000713" -> "1000715"  [label="CFG: "];
"1000714" -> "1000713"  [label="AST: "];
"1000715" -> "1000713"  [label="AST: "];
"1000718" -> "1000713"  [label="CFG: "];
"1000713" -> "1001156"  [label="DDG: inode"];
"1000713" -> "1001156"  [label="DDG: link_count"];
"1000713" -> "1001156"  [label="DDG: set_nlink(inode, link_count)"];
"1000104" -> "1000713"  [label="DDG: inode"];
"1000708" -> "1000713"  [label="DDG: link_count"];
"1000710" -> "1000713"  [label="DDG: link_count"];
"1000713" -> "1000980"  [label="DDG: inode"];
"1000713" -> "1001043"  [label="DDG: inode"];
"1000713" -> "1001053"  [label="DDG: inode"];
"1000713" -> "1001111"  [label="DDG: inode"];
"1000713" -> "1001130"  [label="DDG: inode"];
"1000980" -> "1000961"  [label="AST: "];
"1000980" -> "1000981"  [label="CFG: "];
"1000981" -> "1000980"  [label="AST: "];
"1000982" -> "1000980"  [label="CFG: "];
"1000980" -> "1001156"  [label="DDG: inode"];
"1000980" -> "1001156"  [label="DDG: inc_nlink(inode)"];
"1000104" -> "1000980"  [label="DDG: inode"];
"1000980" -> "1001130"  [label="DDG: inode"];
"1001130" -> "1001128"  [label="AST: "];
"1001130" -> "1001133"  [label="CFG: "];
"1001131" -> "1001130"  [label="AST: "];
"1001132" -> "1001130"  [label="AST: "];
"1001133" -> "1001130"  [label="AST: "];
"1001128" -> "1001130"  [label="CFG: "];
"1001130" -> "1001128"  [label="DDG: inode"];
"1001130" -> "1001128"  [label="DDG: 12"];
"1001130" -> "1001128"  [label="DDG: 1"];
"1001043" -> "1001130"  [label="DDG: inode"];
"1001053" -> "1001130"  [label="DDG: inode"];
"1000104" -> "1001130"  [label="DDG: inode"];
"1001130" -> "1001137"  [label="DDG: inode"];
"1001130" -> "1001152"  [label="DDG: inode"];
"1001128" -> "1001126"  [label="AST: "];
"1001129" -> "1001128"  [label="AST: "];
"1001126" -> "1001128"  [label="CFG: "];
"1001128" -> "1001156"  [label="DDG: udf_get_extendedattr(inode, 12, 1)"];
"1001128" -> "1001126"  [label="DDG: udf_get_extendedattr(inode, 12, 1)"];
"1001126" -> "1001124"  [label="AST: "];
"1001127" -> "1001126"  [label="AST: "];
"1001135" -> "1001126"  [label="CFG: "];
"1001126" -> "1001156"  [label="DDG: dsea"];
"1001126" -> "1001156"  [label="DDG: (struct deviceSpec *)udf_get_extendedattr(inode, 12, 1)"];
"1001137" -> "1001136"  [label="AST: "];
"1001137" -> "1001142"  [label="CFG: "];
"1001138" -> "1001137"  [label="AST: "];
"1001139" -> "1001137"  [label="AST: "];
"1001142" -> "1001137"  [label="AST: "];
"1001155" -> "1001137"  [label="CFG: "];
"1001137" -> "1001156"  [label="DDG: init_special_inode(inode, inode->i_mode,\n\t\t\t\tMKDEV(le32_to_cpu(dsea->majorDeviceIdent),\n\t\t\t\t      le32_to_cpu(dsea->minorDeviceIdent)))"];
"1001137" -> "1001156"  [label="DDG: inode->i_mode"];
"1001137" -> "1001156"  [label="DDG: inode"];
"1001137" -> "1001156"  [label="DDG: MKDEV(le32_to_cpu(dsea->majorDeviceIdent),\n\t\t\t\t      le32_to_cpu(dsea->minorDeviceIdent))"];
"1000104" -> "1001137"  [label="DDG: inode"];
"1001120" -> "1001137"  [label="DDG: inode->i_mode"];
"1001116" -> "1001137"  [label="DDG: inode->i_mode"];
"1001142" -> "1001137"  [label="DDG: le32_to_cpu(dsea->majorDeviceIdent)"];
"1001142" -> "1001137"  [label="DDG: le32_to_cpu(dsea->minorDeviceIdent)"];
"1001152" -> "1001151"  [label="AST: "];
"1001152" -> "1001153"  [label="CFG: "];
"1001153" -> "1001152"  [label="AST: "];
"1001155" -> "1001152"  [label="CFG: "];
"1001152" -> "1001156"  [label="DDG: make_bad_inode(inode)"];
"1001152" -> "1001156"  [label="DDG: inode"];
"1000104" -> "1001152"  [label="DDG: inode"];
"1001043" -> "1000961"  [label="AST: "];
"1001043" -> "1001050"  [label="CFG: "];
"1001044" -> "1001043"  [label="AST: "];
"1001045" -> "1001043"  [label="AST: "];
"1001050" -> "1001043"  [label="AST: "];
"1001051" -> "1001043"  [label="CFG: "];
"1001043" -> "1001156"  [label="DDG: inode->i_mode | S_IFIFO"];
"1001043" -> "1001156"  [label="DDG: inode"];
"1001043" -> "1001156"  [label="DDG: init_special_inode(inode, inode->i_mode | S_IFIFO, 0)"];
"1000104" -> "1001043"  [label="DDG: inode"];
"1001045" -> "1001043"  [label="DDG: inode->i_mode"];
"1001045" -> "1001043"  [label="DDG: S_IFIFO"];
"1001053" -> "1000961"  [label="AST: "];
"1001053" -> "1001060"  [label="CFG: "];
"1001054" -> "1001053"  [label="AST: "];
"1001055" -> "1001053"  [label="AST: "];
"1001060" -> "1001053"  [label="AST: "];
"1001061" -> "1001053"  [label="CFG: "];
"1001053" -> "1001156"  [label="DDG: inode->i_mode | S_IFSOCK"];
"1001053" -> "1001156"  [label="DDG: inode"];
"1001053" -> "1001156"  [label="DDG: init_special_inode(inode, inode->i_mode | S_IFSOCK, 0)"];
"1000104" -> "1001053"  [label="DDG: inode"];
"1001055" -> "1001053"  [label="DDG: inode->i_mode"];
"1001055" -> "1001053"  [label="DDG: S_IFSOCK"];
"1001111" -> "1000961"  [label="AST: "];
"1001111" -> "1001112"  [label="CFG: "];
"1001112" -> "1001111"  [label="AST: "];
"1001113" -> "1001111"  [label="CFG: "];
"1001111" -> "1001156"  [label="DDG: make_bad_inode(inode)"];
"1001111" -> "1001156"  [label="DDG: inode"];
"1000104" -> "1001111"  [label="DDG: inode"];
}
