digraph "0_linux_232cd35d0804cc241eb887bb8d4d9b3b9881c64a@pointer" {
"1000481" [label="(Call,ip6_ufo_append_data(sk, queue, getfrag, from, length,\n\t\t\t\t\t  hh_len, fragheaderlen, exthdrlen,\n\t\t\t\t\t  transhdrlen, mtu, flags, fl6))"];
"1000317" [label="(Call,ip6_sk_ignore_df(sk))"];
"1000114" [label="(MethodParameterIn,struct sock *sk)"];
"1000406" [label="(Call,sock_tx_timestamp(sk, sockc->tsflags, &tx_flags))"];
"1000476" [label="(Call,udp_get_no_check6_tx(sk))"];
"1000182" [label="(Call,skb_peek_tail(queue))"];
"1000116" [label="(MethodParameterIn,struct sk_buff_head *queue)"];
"1000120" [label="(MethodParameterIn,int getfrag(void *from, char *to, int offset,\n\t\t\t\t\t int len, int odd, struct sk_buff *skb))"];
"1000121" [label="(MethodParameterIn,void *from)"];
"1000122" [label="(MethodParameterIn,int length)"];
"1000369" [label="(Call,length <= mtu - headersize)"];
"1000371" [label="(Call,mtu - headersize)"];
"1000287" [label="(Call,mtu - headersize)"];
"1000242" [label="(Call,mtu - fragheaderlen)"];
"1000207" [label="(Call,mtu = cork->fragsize)"];
"1000223" [label="(Call,fragheaderlen = sizeof(struct ipv6hdr) + rt->rt6i_nfheader_len +\n\t\t\t(opt ? opt->opt_nflen : 0))"];
"1000198" [label="(Call,rt->dst.header_len - rt->rt6i_nfheader_len)"];
"1000250" [label="(Call,headersize = sizeof(struct ipv6hdr) +\n\t\t     (opt ? opt->opt_flen + opt->opt_nflen : 0) +\n\t\t     (dst_allfrag(&rt->dst) ?\n\t\t      sizeof(struct frag_hdr) : 0) +\n\t\t     rt->rt6i_nfheader_len)"];
"1000364" [label="(Call,headersize == sizeof(struct ipv6hdr))"];
"1000336" [label="(Call,maxnonfragsize - headersize)"];
"1000326" [label="(Call,maxnonfragsize = mtu)"];
"1000319" [label="(Call,maxnonfragsize = sizeof(struct ipv6hdr) + IPV6_MAXPLEN)"];
"1000215" [label="(Call,hh_len = LL_RESERVED_SPACE(rt->dst.dev))"];
"1000217" [label="(Call,LL_RESERVED_SPACE(rt->dst.dev))"];
"1000246" [label="(Call,fragheaderlen -\n\t\t     sizeof(struct frag_hdr))"];
"1000188" [label="(Call,exthdrlen = opt ? opt->opt_flen : 0)"];
"1000138" [label="(Call,exthdrlen = 0)"];
"1000355" [label="(Call,transhdrlen && sk->sk_protocol == IPPROTO_UDP &&\n\t    headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000123" [label="(MethodParameterIn,int transhdrlen)"];
"1000357" [label="(Call,sk->sk_protocol == IPPROTO_UDP &&\n\t    headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000358" [label="(Call,sk->sk_protocol == IPPROTO_UDP)"];
"1000295" [label="(Call,sk->sk_protocol == IPPROTO_UDP)"];
"1000300" [label="(Call,sk->sk_protocol == IPPROTO_RAW)"];
"1000363" [label="(Call,headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000368" [label="(Call,length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000374" [label="(Call,!(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000375" [label="(Call,!(flags & MSG_MORE))"];
"1000376" [label="(Call,flags & MSG_MORE)"];
"1000124" [label="(MethodParameterIn,unsigned int flags)"];
"1000379" [label="(Call,rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000387" [label="(Call,NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000437" [label="(Call,(length + fragheaderlen) > mtu)"];
"1000115" [label="(MethodParameterIn,struct flowi6 *fl6)"];
"1000479" [label="(Call,err = ip6_ufo_append_data(sk, queue, getfrag, from, length,\n\t\t\t\t\t  hh_len, fragheaderlen, exthdrlen,\n\t\t\t\t\t  transhdrlen, mtu, flags, fl6))"];
"1001101" [label="(Return,return err;)"];
"1001089" [label="(Call,cork->length -= length)"];
"1001095" [label="(Call,sock_net(sk))"];
"1001094" [label="(Call,IP6_INC_STATS(sock_net(sk), rt->rt6i_idev, IPSTATS_MIB_OUTDISCARDS))"];
"1000624" [label="(Call,rt->dst.dev->features&NETIF_F_SG)"];
"1000484" [label="(Identifier,getfrag)"];
"1000246" [label="(Call,fragheaderlen -\n\t\t     sizeof(struct frag_hdr))"];
"1000281" [label="(Call,cork->length + length > mtu - headersize)"];
"1000244" [label="(Identifier,fragheaderlen)"];
"1000354" [label="(ControlStructure,if (transhdrlen && sk->sk_protocol == IPPROTO_UDP &&\n\t    headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)))"];
"1000228" [label="(Call,rt->rt6i_nfheader_len +\n\t\t\t(opt ? opt->opt_nflen : 0))"];
"1000180" [label="(Call,skb = skb_peek_tail(queue))"];
"1000296" [label="(Call,sk->sk_protocol)"];
"1000900" [label="(Call,copy > length)"];
"1000282" [label="(Call,cork->length + length)"];
"1000363" [label="(Call,headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000140" [label="(Literal,0)"];
"1000330" [label="(Call,cork->length + length > maxnonfragsize - headersize)"];
"1000570" [label="(Call,ip6_append_data_mtu(&mtu, &maxfraglen,\n\t\t\t\t\t\t    fragheaderlen, skb, rt,\n\t\t\t\t\t\t    orig_mtu))"];
"1000123" [label="(MethodParameterIn,int transhdrlen)"];
"1000251" [label="(Identifier,headersize)"];
"1000300" [label="(Call,sk->sk_protocol == IPPROTO_RAW)"];
"1000266" [label="(Call,(dst_allfrag(&rt->dst) ?\n\t\t      sizeof(struct frag_hdr) : 0) +\n\t\t     rt->rt6i_nfheader_len)"];
"1000447" [label="(Call,sk->sk_protocol == IPPROTO_UDP)"];
"1000478" [label="(Block,)"];
"1000903" [label="(Call,copy = length)"];
"1000317" [label="(Call,ip6_sk_ignore_df(sk))"];
"1000411" [label="(Call,&tx_flags)"];
"1000216" [label="(Identifier,hh_len)"];
"1000239" [label="(Identifier,maxfraglen)"];
"1000370" [label="(Identifier,length)"];
"1000850" [label="(Call,getfrag(from, data + transhdrlen, offset, copy, fraggap, skb))"];
"1000331" [label="(Call,cork->length + length)"];
"1000198" [label="(Call,rt->dst.header_len - rt->rt6i_nfheader_len)"];
"1000378" [label="(Identifier,MSG_MORE)"];
"1000513" [label="(Call,cork->length <= mtu)"];
"1000861" [label="(Call,err = -EFAULT)"];
"1001090" [label="(Call,cork->length)"];
"1000646" [label="(Call,datalen != length + fraggap)"];
"1000486" [label="(Identifier,length)"];
"1000746" [label="(Call,skb_reserve(skb, hh_len + sizeof(struct frag_hdr) +\n\t\t\t\t    dst_exthdrlen))"];
"1000364" [label="(Call,headersize == sizeof(struct ipv6hdr))"];
"1000189" [label="(Identifier,exthdrlen)"];
"1000379" [label="(Call,rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000620" [label="(Call,flags & MSG_MORE)"];
"1000345" [label="(Call,mtu - headersize +\n\t\t\t\t sizeof(struct ipv6hdr))"];
"1000241" [label="(Call,(mtu - fragheaderlen) & ~7)"];
"1000318" [label="(Identifier,sk)"];
"1000212" [label="(Call,orig_mtu = mtu)"];
"1000328" [label="(Identifier,mtu)"];
"1000748" [label="(Call,hh_len + sizeof(struct frag_hdr) +\n\t\t\t\t    dst_exthdrlen)"];
"1000217" [label="(Call,LL_RESERVED_SPACE(rt->dst.dev))"];
"1000828" [label="(Call,transhdrlen - fraggap)"];
"1000114" [label="(MethodParameterIn,struct sock *sk)"];
"1000488" [label="(Identifier,fragheaderlen)"];
"1000722" [label="(Call,err = -ENOBUFS)"];
"1000121" [label="(MethodParameterIn,void *from)"];
"1000302" [label="(Identifier,sk)"];
"1000477" [label="(Identifier,sk)"];
"1000182" [label="(Call,skb_peek_tail(queue))"];
"1000213" [label="(Identifier,orig_mtu)"];
"1000320" [label="(Identifier,maxnonfragsize)"];
"1000391" [label="(Identifier,csummode)"];
"1000183" [label="(Identifier,queue)"];
"1000408" [label="(Call,sockc->tsflags)"];
"1000242" [label="(Call,mtu - fragheaderlen)"];
"1000405" [label="(Block,)"];
"1000375" [label="(Call,!(flags & MSG_MORE))"];
"1000325" [label="(ControlStructure,else)"];
"1000284" [label="(Identifier,cork)"];
"1000491" [label="(Identifier,mtu)"];
"1001089" [label="(Call,cork->length -= length)"];
"1001093" [label="(Identifier,length)"];
"1000960" [label="(Call,sk_page_frag_refill(sk, pfrag))"];
"1001103" [label="(MethodReturn,static int)"];
"1000209" [label="(Call,cork->fragsize)"];
"1000240" [label="(Call,((mtu - fragheaderlen) & ~7) + fragheaderlen -\n\t\t     sizeof(struct frag_hdr))"];
"1000475" [label="(Call,!udp_get_no_check6_tx(sk))"];
"1000685" [label="(Call,flags & MSG_DONTWAIT)"];
"1000252" [label="(Call,sizeof(struct ipv6hdr) +\n\t\t     (opt ? opt->opt_flen + opt->opt_nflen : 0) +\n\t\t     (dst_allfrag(&rt->dst) ?\n\t\t      sizeof(struct frag_hdr) : 0) +\n\t\t     rt->rt6i_nfheader_len)"];
"1000366" [label="(Call,sizeof(struct ipv6hdr))"];
"1000711" [label="(Call,alloclen + hh_len)"];
"1001078" [label="(Call,length -= copy)"];
"1000376" [label="(Call,flags & MSG_MORE)"];
"1001102" [label="(Identifier,err)"];
"1001084" [label="(Call,err = -EFAULT)"];
"1000207" [label="(Call,mtu = cork->fragsize)"];
"1000489" [label="(Identifier,exthdrlen)"];
"1000238" [label="(Call,maxfraglen = ((mtu - fragheaderlen) & ~7) + fragheaderlen -\n\t\t     sizeof(struct frag_hdr))"];
"1000582" [label="(Call,datalen = length + fraggap)"];
"1000341" [label="(Call,ipv6_local_error(sk, EMSGSIZE, fl6,\n\t\t\t\t mtu - headersize +\n\t\t\t\t sizeof(struct ipv6hdr)))"];
"1000199" [label="(Call,rt->dst.header_len)"];
"1000116" [label="(MethodParameterIn,struct sk_buff_head *queue)"];
"1000204" [label="(Call,rt->rt6i_nfheader_len)"];
"1000295" [label="(Call,sk->sk_protocol == IPPROTO_UDP)"];
"1000593" [label="(Call,cork->length <= mtu)"];
"1000255" [label="(Call,(opt ? opt->opt_flen + opt->opt_nflen : 0) +\n\t\t     (dst_allfrag(&rt->dst) ?\n\t\t      sizeof(struct frag_hdr) : 0) +\n\t\t     rt->rt6i_nfheader_len)"];
"1000188" [label="(Call,exthdrlen = opt ? opt->opt_flen : 0)"];
"1000802" [label="(Call,data + transhdrlen)"];
"1000250" [label="(Call,headersize = sizeof(struct ipv6hdr) +\n\t\t     (opt ? opt->opt_flen + opt->opt_nflen : 0) +\n\t\t     (dst_allfrag(&rt->dst) ?\n\t\t      sizeof(struct frag_hdr) : 0) +\n\t\t     rt->rt6i_nfheader_len)"];
"1000143" [label="(Identifier,dst_exthdrlen)"];
"1000682" [label="(Call,alloclen + hh_len)"];
"1000416" [label="(Identifier,tx_flags)"];
"1001097" [label="(Call,rt->rt6i_idev)"];
"1000584" [label="(Call,length + fraggap)"];
"1000483" [label="(Identifier,queue)"];
"1000327" [label="(Identifier,maxnonfragsize)"];
"1000438" [label="(Call,length + fragheaderlen)"];
"1000336" [label="(Call,maxnonfragsize - headersize)"];
"1000365" [label="(Identifier,headersize)"];
"1000337" [label="(Identifier,maxnonfragsize)"];
"1000362" [label="(Identifier,IPPROTO_UDP)"];
"1000373" [label="(Identifier,headersize)"];
"1000138" [label="(Call,exthdrlen = 0)"];
"1000443" [label="(Identifier,skb)"];
"1000504" [label="(Call,length > 0)"];
"1000387" [label="(Call,NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000954" [label="(Call,err = -ENOMEM)"];
"1000374" [label="(Call,!(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1001094" [label="(Call,IP6_INC_STATS(sock_net(sk), rt->rt6i_idev, IPSTATS_MIB_OUTDISCARDS))"];
"1000223" [label="(Call,fragheaderlen = sizeof(struct ipv6hdr) + rt->rt6i_nfheader_len +\n\t\t\t(opt ? opt->opt_nflen : 0))"];
"1000311" [label="(Call,headersize +\n\t\t\t\tsizeof(struct ipv6hdr))"];
"1000347" [label="(Call,headersize +\n\t\t\t\t sizeof(struct ipv6hdr))"];
"1000493" [label="(Identifier,fl6)"];
"1000397" [label="(Identifier,sk)"];
"1000356" [label="(Identifier,transhdrlen)"];
"1000357" [label="(Call,sk->sk_protocol == IPPROTO_UDP &&\n\t    headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000383" [label="(Identifier,rt)"];
"1000530" [label="(Call,copy < length)"];
"1000309" [label="(Call,mtu - headersize +\n\t\t\t\tsizeof(struct ipv6hdr))"];
"1000495" [label="(Identifier,err)"];
"1000287" [label="(Call,mtu - headersize)"];
"1000197" [label="(Identifier,dst_exthdrlen)"];
"1000407" [label="(Identifier,sk)"];
"1000648" [label="(Call,length + fraggap)"];
"1000371" [label="(Call,mtu - headersize)"];
"1000492" [label="(Identifier,flags)"];
"1000122" [label="(MethodParameterIn,int length)"];
"1000187" [label="(Block,)"];
"1000326" [label="(Call,maxnonfragsize = mtu)"];
"1000479" [label="(Call,err = ip6_ufo_append_data(sk, queue, getfrag, from, length,\n\t\t\t\t\t  hh_len, fragheaderlen, exthdrlen,\n\t\t\t\t\t  transhdrlen, mtu, flags, fl6))"];
"1000196" [label="(Call,dst_exthdrlen = rt->dst.header_len - rt->rt6i_nfheader_len)"];
"1000225" [label="(Call,sizeof(struct ipv6hdr) + rt->rt6i_nfheader_len +\n\t\t\t(opt ? opt->opt_nflen : 0))"];
"1000333" [label="(Identifier,cork)"];
"1000304" [label="(Identifier,IPPROTO_RAW)"];
"1000437" [label="(Call,(length + fragheaderlen) > mtu)"];
"1001101" [label="(Return,return err;)"];
"1001096" [label="(Identifier,sk)"];
"1000248" [label="(Call,sizeof(struct frag_hdr))"];
"1000127" [label="(Block,)"];
"1000289" [label="(Identifier,headersize)"];
"1000487" [label="(Identifier,hh_len)"];
"1000380" [label="(Call,rt->dst.dev->features)"];
"1000876" [label="(Call,transhdrlen = 0)"];
"1000243" [label="(Identifier,mtu)"];
"1000338" [label="(Identifier,headersize)"];
"1000476" [label="(Call,udp_get_no_check6_tx(sk))"];
"1000490" [label="(Identifier,transhdrlen)"];
"1000852" [label="(Call,data + transhdrlen)"];
"1000299" [label="(Identifier,IPPROTO_UDP)"];
"1001100" [label="(Identifier,IPSTATS_MIB_OUTDISCARDS)"];
"1000190" [label="(Call,opt ? opt->opt_flen : 0)"];
"1000590" [label="(Call,(cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - fragheaderlen)"];
"1000124" [label="(MethodParameterIn,unsigned int flags)"];
"1000372" [label="(Identifier,mtu)"];
"1000480" [label="(Identifier,err)"];
"1000680" [label="(Call,sock_alloc_send_skb(sk,\n \t\t\t\t\t\talloclen + hh_len,\n\t\t\t\t\t\t(flags & MSG_DONTWAIT), &err))"];
"1000369" [label="(Call,length <= mtu - headersize)"];
"1000321" [label="(Call,sizeof(struct ipv6hdr) + IPV6_MAXPLEN)"];
"1000294" [label="(Call,sk->sk_protocol == IPPROTO_UDP ||\n\t     sk->sk_protocol == IPPROTO_RAW)"];
"1001098" [label="(Identifier,rt)"];
"1000895" [label="(Call,__skb_queue_tail(queue, skb))"];
"1000871" [label="(Call,length -= datalen - fraggap)"];
"1001095" [label="(Call,sock_net(sk))"];
"1000316" [label="(ControlStructure,if (ip6_sk_ignore_df(sk)))"];
"1000115" [label="(MethodParameterIn,struct flowi6 *fl6)"];
"1000777" [label="(Call,skb_set_network_header(skb, exthdrlen))"];
"1000436" [label="(Call,((length + fragheaderlen) > mtu) ||\n\t     (skb && skb_is_gso(skb)))"];
"1000319" [label="(Call,maxnonfragsize = sizeof(struct ipv6hdr) + IPV6_MAXPLEN)"];
"1000359" [label="(Call,sk->sk_protocol)"];
"1000301" [label="(Call,sk->sk_protocol)"];
"1000355" [label="(Call,transhdrlen && sk->sk_protocol == IPPROTO_UDP &&\n\t    headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000406" [label="(Call,sock_tx_timestamp(sk, sockc->tsflags, &tx_flags))"];
"1000377" [label="(Identifier,flags)"];
"1000485" [label="(Identifier,from)"];
"1000940" [label="(Call,err = -EFAULT)"];
"1000429" [label="(Call,cork->length += length)"];
"1000306" [label="(Call,ipv6_local_rxpmtu(sk, fl6, mtu - headersize +\n\t\t\t\tsizeof(struct ipv6hdr)))"];
"1000139" [label="(Identifier,exthdrlen)"];
"1000908" [label="(Call,rt->dst.dev->features&NETIF_F_SG)"];
"1000120" [label="(MethodParameterIn,int getfrag(void *from, char *to, int offset,\n\t\t\t\t\t int len, int odd, struct sk_buff *skb))"];
"1000976" [label="(Call,err = -EMSGSIZE)"];
"1000247" [label="(Identifier,fragheaderlen)"];
"1001020" [label="(Call,getfrag(from,\n\t\t\t\t    page_address(pfrag->page) + pfrag->offset,\n\t\t\t\t    offset, copy, skb->len, skb))"];
"1000453" [label="(Call,rt->dst.dev->features & NETIF_F_UFO)"];
"1000482" [label="(Identifier,sk)"];
"1000288" [label="(Identifier,mtu)"];
"1000224" [label="(Identifier,fragheaderlen)"];
"1000799" [label="(Call,skb_copy_and_csum_bits(\n\t\t\t\t\tskb_prev, maxfraglen,\n\t\t\t\t\tdata + transhdrlen, fraggap, 0))"];
"1000388" [label="(Identifier,NETIF_F_IPV6_CSUM)"];
"1000389" [label="(Identifier,NETIF_F_HW_CSUM)"];
"1000245" [label="(Identifier,~7)"];
"1000441" [label="(Identifier,mtu)"];
"1000208" [label="(Identifier,mtu)"];
"1000218" [label="(Call,rt->dst.dev)"];
"1000709" [label="(Call,sock_wmalloc(sk,\n\t\t\t\t\t\t\t   alloclen + hh_len, 1,\n\t\t\t\t\t\t\t   sk->sk_allocation))"];
"1000836" [label="(Call,err = -EINVAL)"];
"1000926" [label="(Call,getfrag(from, skb_put(skb, copy),\n\t\t\t\t\t\toffset, copy, off, skb))"];
"1000481" [label="(Call,ip6_ufo_append_data(sk, queue, getfrag, from, length,\n\t\t\t\t\t  hh_len, fragheaderlen, exthdrlen,\n\t\t\t\t\t  transhdrlen, mtu, flags, fl6))"];
"1000368" [label="(Call,length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"];
"1000358" [label="(Call,sk->sk_protocol == IPPROTO_UDP)"];
"1000887" [label="(Call,flags & MSG_CONFIRM)"];
"1000215" [label="(Call,hh_len = LL_RESERVED_SPACE(rt->dst.dev))"];
"1000481" -> "1000479"  [label="AST: "];
"1000481" -> "1000493"  [label="CFG: "];
"1000482" -> "1000481"  [label="AST: "];
"1000483" -> "1000481"  [label="AST: "];
"1000484" -> "1000481"  [label="AST: "];
"1000485" -> "1000481"  [label="AST: "];
"1000486" -> "1000481"  [label="AST: "];
"1000487" -> "1000481"  [label="AST: "];
"1000488" -> "1000481"  [label="AST: "];
"1000489" -> "1000481"  [label="AST: "];
"1000490" -> "1000481"  [label="AST: "];
"1000491" -> "1000481"  [label="AST: "];
"1000492" -> "1000481"  [label="AST: "];
"1000493" -> "1000481"  [label="AST: "];
"1000479" -> "1000481"  [label="CFG: "];
"1000481" -> "1001103"  [label="DDG: length"];
"1000481" -> "1001103"  [label="DDG: exthdrlen"];
"1000481" -> "1001103"  [label="DDG: fragheaderlen"];
"1000481" -> "1001103"  [label="DDG: queue"];
"1000481" -> "1001103"  [label="DDG: fl6"];
"1000481" -> "1001103"  [label="DDG: mtu"];
"1000481" -> "1001103"  [label="DDG: transhdrlen"];
"1000481" -> "1001103"  [label="DDG: flags"];
"1000481" -> "1001103"  [label="DDG: hh_len"];
"1000481" -> "1001103"  [label="DDG: from"];
"1000481" -> "1001103"  [label="DDG: getfrag"];
"1000481" -> "1001103"  [label="DDG: sk"];
"1000481" -> "1000479"  [label="DDG: exthdrlen"];
"1000481" -> "1000479"  [label="DDG: fragheaderlen"];
"1000481" -> "1000479"  [label="DDG: flags"];
"1000481" -> "1000479"  [label="DDG: queue"];
"1000481" -> "1000479"  [label="DDG: hh_len"];
"1000481" -> "1000479"  [label="DDG: getfrag"];
"1000481" -> "1000479"  [label="DDG: fl6"];
"1000481" -> "1000479"  [label="DDG: sk"];
"1000481" -> "1000479"  [label="DDG: transhdrlen"];
"1000481" -> "1000479"  [label="DDG: from"];
"1000481" -> "1000479"  [label="DDG: length"];
"1000481" -> "1000479"  [label="DDG: mtu"];
"1000317" -> "1000481"  [label="DDG: sk"];
"1000406" -> "1000481"  [label="DDG: sk"];
"1000476" -> "1000481"  [label="DDG: sk"];
"1000114" -> "1000481"  [label="DDG: sk"];
"1000182" -> "1000481"  [label="DDG: queue"];
"1000116" -> "1000481"  [label="DDG: queue"];
"1000120" -> "1000481"  [label="DDG: getfrag"];
"1000121" -> "1000481"  [label="DDG: from"];
"1000122" -> "1000481"  [label="DDG: length"];
"1000369" -> "1000481"  [label="DDG: length"];
"1000215" -> "1000481"  [label="DDG: hh_len"];
"1000246" -> "1000481"  [label="DDG: fragheaderlen"];
"1000188" -> "1000481"  [label="DDG: exthdrlen"];
"1000138" -> "1000481"  [label="DDG: exthdrlen"];
"1000355" -> "1000481"  [label="DDG: transhdrlen"];
"1000123" -> "1000481"  [label="DDG: transhdrlen"];
"1000437" -> "1000481"  [label="DDG: mtu"];
"1000376" -> "1000481"  [label="DDG: flags"];
"1000124" -> "1000481"  [label="DDG: flags"];
"1000115" -> "1000481"  [label="DDG: fl6"];
"1000481" -> "1001089"  [label="DDG: length"];
"1000481" -> "1001095"  [label="DDG: sk"];
"1000317" -> "1000316"  [label="AST: "];
"1000317" -> "1000318"  [label="CFG: "];
"1000318" -> "1000317"  [label="AST: "];
"1000320" -> "1000317"  [label="CFG: "];
"1000327" -> "1000317"  [label="CFG: "];
"1000317" -> "1001103"  [label="DDG: sk"];
"1000317" -> "1001103"  [label="DDG: ip6_sk_ignore_df(sk)"];
"1000114" -> "1000317"  [label="DDG: sk"];
"1000317" -> "1000341"  [label="DDG: sk"];
"1000317" -> "1000406"  [label="DDG: sk"];
"1000317" -> "1000476"  [label="DDG: sk"];
"1000317" -> "1000680"  [label="DDG: sk"];
"1000317" -> "1000709"  [label="DDG: sk"];
"1000317" -> "1000960"  [label="DDG: sk"];
"1000317" -> "1001095"  [label="DDG: sk"];
"1000114" -> "1000113"  [label="AST: "];
"1000114" -> "1001103"  [label="DDG: sk"];
"1000114" -> "1000306"  [label="DDG: sk"];
"1000114" -> "1000341"  [label="DDG: sk"];
"1000114" -> "1000406"  [label="DDG: sk"];
"1000114" -> "1000476"  [label="DDG: sk"];
"1000114" -> "1000680"  [label="DDG: sk"];
"1000114" -> "1000709"  [label="DDG: sk"];
"1000114" -> "1000960"  [label="DDG: sk"];
"1000114" -> "1001095"  [label="DDG: sk"];
"1000406" -> "1000405"  [label="AST: "];
"1000406" -> "1000411"  [label="CFG: "];
"1000407" -> "1000406"  [label="AST: "];
"1000408" -> "1000406"  [label="AST: "];
"1000411" -> "1000406"  [label="AST: "];
"1000416" -> "1000406"  [label="CFG: "];
"1000406" -> "1001103"  [label="DDG: &tx_flags"];
"1000406" -> "1001103"  [label="DDG: sk"];
"1000406" -> "1001103"  [label="DDG: sockc->tsflags"];
"1000406" -> "1001103"  [label="DDG: sock_tx_timestamp(sk, sockc->tsflags, &tx_flags)"];
"1000406" -> "1000476"  [label="DDG: sk"];
"1000406" -> "1000680"  [label="DDG: sk"];
"1000406" -> "1000709"  [label="DDG: sk"];
"1000406" -> "1000960"  [label="DDG: sk"];
"1000406" -> "1001095"  [label="DDG: sk"];
"1000476" -> "1000475"  [label="AST: "];
"1000476" -> "1000477"  [label="CFG: "];
"1000477" -> "1000476"  [label="AST: "];
"1000475" -> "1000476"  [label="CFG: "];
"1000476" -> "1001103"  [label="DDG: sk"];
"1000476" -> "1000475"  [label="DDG: sk"];
"1000476" -> "1000680"  [label="DDG: sk"];
"1000476" -> "1000709"  [label="DDG: sk"];
"1000476" -> "1000960"  [label="DDG: sk"];
"1000476" -> "1001095"  [label="DDG: sk"];
"1000182" -> "1000180"  [label="AST: "];
"1000182" -> "1000183"  [label="CFG: "];
"1000183" -> "1000182"  [label="AST: "];
"1000180" -> "1000182"  [label="CFG: "];
"1000182" -> "1001103"  [label="DDG: queue"];
"1000182" -> "1000180"  [label="DDG: queue"];
"1000116" -> "1000182"  [label="DDG: queue"];
"1000182" -> "1000895"  [label="DDG: queue"];
"1000116" -> "1000113"  [label="AST: "];
"1000116" -> "1001103"  [label="DDG: queue"];
"1000116" -> "1000895"  [label="DDG: queue"];
"1000120" -> "1000113"  [label="AST: "];
"1000120" -> "1001103"  [label="DDG: getfrag"];
"1000121" -> "1000113"  [label="AST: "];
"1000121" -> "1001103"  [label="DDG: from"];
"1000121" -> "1000850"  [label="DDG: from"];
"1000121" -> "1000926"  [label="DDG: from"];
"1000121" -> "1001020"  [label="DDG: from"];
"1000122" -> "1000113"  [label="AST: "];
"1000122" -> "1001103"  [label="DDG: length"];
"1000122" -> "1000281"  [label="DDG: length"];
"1000122" -> "1000282"  [label="DDG: length"];
"1000122" -> "1000330"  [label="DDG: length"];
"1000122" -> "1000331"  [label="DDG: length"];
"1000122" -> "1000369"  [label="DDG: length"];
"1000122" -> "1000429"  [label="DDG: length"];
"1000122" -> "1000437"  [label="DDG: length"];
"1000122" -> "1000438"  [label="DDG: length"];
"1000122" -> "1000504"  [label="DDG: length"];
"1000122" -> "1000530"  [label="DDG: length"];
"1000122" -> "1000582"  [label="DDG: length"];
"1000122" -> "1000584"  [label="DDG: length"];
"1000122" -> "1000646"  [label="DDG: length"];
"1000122" -> "1000648"  [label="DDG: length"];
"1000122" -> "1000871"  [label="DDG: length"];
"1000122" -> "1000900"  [label="DDG: length"];
"1000122" -> "1000903"  [label="DDG: length"];
"1000122" -> "1001078"  [label="DDG: length"];
"1000122" -> "1001089"  [label="DDG: length"];
"1000369" -> "1000368"  [label="AST: "];
"1000369" -> "1000371"  [label="CFG: "];
"1000370" -> "1000369"  [label="AST: "];
"1000371" -> "1000369"  [label="AST: "];
"1000377" -> "1000369"  [label="CFG: "];
"1000368" -> "1000369"  [label="CFG: "];
"1000369" -> "1001103"  [label="DDG: mtu - headersize"];
"1000369" -> "1000368"  [label="DDG: length"];
"1000369" -> "1000368"  [label="DDG: mtu - headersize"];
"1000371" -> "1000369"  [label="DDG: mtu"];
"1000371" -> "1000369"  [label="DDG: headersize"];
"1000369" -> "1000429"  [label="DDG: length"];
"1000369" -> "1000437"  [label="DDG: length"];
"1000369" -> "1000438"  [label="DDG: length"];
"1000369" -> "1000504"  [label="DDG: length"];
"1000369" -> "1000582"  [label="DDG: length"];
"1000369" -> "1000584"  [label="DDG: length"];
"1000369" -> "1000646"  [label="DDG: length"];
"1000369" -> "1000648"  [label="DDG: length"];
"1000369" -> "1000871"  [label="DDG: length"];
"1000369" -> "1001089"  [label="DDG: length"];
"1000371" -> "1000373"  [label="CFG: "];
"1000372" -> "1000371"  [label="AST: "];
"1000373" -> "1000371"  [label="AST: "];
"1000371" -> "1001103"  [label="DDG: headersize"];
"1000287" -> "1000371"  [label="DDG: mtu"];
"1000364" -> "1000371"  [label="DDG: headersize"];
"1000371" -> "1000437"  [label="DDG: mtu"];
"1000287" -> "1000281"  [label="AST: "];
"1000287" -> "1000289"  [label="CFG: "];
"1000288" -> "1000287"  [label="AST: "];
"1000289" -> "1000287"  [label="AST: "];
"1000281" -> "1000287"  [label="CFG: "];
"1000287" -> "1000281"  [label="DDG: mtu"];
"1000287" -> "1000281"  [label="DDG: headersize"];
"1000242" -> "1000287"  [label="DDG: mtu"];
"1000250" -> "1000287"  [label="DDG: headersize"];
"1000287" -> "1000309"  [label="DDG: mtu"];
"1000287" -> "1000309"  [label="DDG: headersize"];
"1000287" -> "1000311"  [label="DDG: headersize"];
"1000287" -> "1000326"  [label="DDG: mtu"];
"1000287" -> "1000336"  [label="DDG: headersize"];
"1000287" -> "1000345"  [label="DDG: mtu"];
"1000287" -> "1000345"  [label="DDG: headersize"];
"1000287" -> "1000347"  [label="DDG: headersize"];
"1000287" -> "1000437"  [label="DDG: mtu"];
"1000242" -> "1000241"  [label="AST: "];
"1000242" -> "1000244"  [label="CFG: "];
"1000243" -> "1000242"  [label="AST: "];
"1000244" -> "1000242"  [label="AST: "];
"1000245" -> "1000242"  [label="CFG: "];
"1000242" -> "1000241"  [label="DDG: mtu"];
"1000242" -> "1000241"  [label="DDG: fragheaderlen"];
"1000207" -> "1000242"  [label="DDG: mtu"];
"1000223" -> "1000242"  [label="DDG: fragheaderlen"];
"1000242" -> "1000246"  [label="DDG: fragheaderlen"];
"1000207" -> "1000127"  [label="AST: "];
"1000207" -> "1000209"  [label="CFG: "];
"1000208" -> "1000207"  [label="AST: "];
"1000209" -> "1000207"  [label="AST: "];
"1000213" -> "1000207"  [label="CFG: "];
"1000207" -> "1001103"  [label="DDG: cork->fragsize"];
"1000207" -> "1000212"  [label="DDG: mtu"];
"1000223" -> "1000127"  [label="AST: "];
"1000223" -> "1000225"  [label="CFG: "];
"1000224" -> "1000223"  [label="AST: "];
"1000225" -> "1000223"  [label="AST: "];
"1000239" -> "1000223"  [label="CFG: "];
"1000223" -> "1001103"  [label="DDG: sizeof(struct ipv6hdr) + rt->rt6i_nfheader_len +\n\t\t\t(opt ? opt->opt_nflen : 0)"];
"1000198" -> "1000223"  [label="DDG: rt->rt6i_nfheader_len"];
"1000198" -> "1000196"  [label="AST: "];
"1000198" -> "1000204"  [label="CFG: "];
"1000199" -> "1000198"  [label="AST: "];
"1000204" -> "1000198"  [label="AST: "];
"1000196" -> "1000198"  [label="CFG: "];
"1000198" -> "1001103"  [label="DDG: rt->dst.header_len"];
"1000198" -> "1000196"  [label="DDG: rt->dst.header_len"];
"1000198" -> "1000196"  [label="DDG: rt->rt6i_nfheader_len"];
"1000198" -> "1000225"  [label="DDG: rt->rt6i_nfheader_len"];
"1000198" -> "1000228"  [label="DDG: rt->rt6i_nfheader_len"];
"1000198" -> "1000250"  [label="DDG: rt->rt6i_nfheader_len"];
"1000198" -> "1000252"  [label="DDG: rt->rt6i_nfheader_len"];
"1000198" -> "1000255"  [label="DDG: rt->rt6i_nfheader_len"];
"1000198" -> "1000266"  [label="DDG: rt->rt6i_nfheader_len"];
"1000250" -> "1000127"  [label="AST: "];
"1000250" -> "1000252"  [label="CFG: "];
"1000251" -> "1000250"  [label="AST: "];
"1000252" -> "1000250"  [label="AST: "];
"1000284" -> "1000250"  [label="CFG: "];
"1000250" -> "1001103"  [label="DDG: sizeof(struct ipv6hdr) +\n\t\t     (opt ? opt->opt_flen + opt->opt_nflen : 0) +\n\t\t     (dst_allfrag(&rt->dst) ?\n\t\t      sizeof(struct frag_hdr) : 0) +\n\t\t     rt->rt6i_nfheader_len"];
"1000364" -> "1000363"  [label="AST: "];
"1000364" -> "1000366"  [label="CFG: "];
"1000365" -> "1000364"  [label="AST: "];
"1000366" -> "1000364"  [label="AST: "];
"1000370" -> "1000364"  [label="CFG: "];
"1000363" -> "1000364"  [label="CFG: "];
"1000364" -> "1001103"  [label="DDG: headersize"];
"1000364" -> "1000363"  [label="DDG: headersize"];
"1000336" -> "1000364"  [label="DDG: headersize"];
"1000336" -> "1000330"  [label="AST: "];
"1000336" -> "1000338"  [label="CFG: "];
"1000337" -> "1000336"  [label="AST: "];
"1000338" -> "1000336"  [label="AST: "];
"1000330" -> "1000336"  [label="CFG: "];
"1000336" -> "1001103"  [label="DDG: headersize"];
"1000336" -> "1001103"  [label="DDG: maxnonfragsize"];
"1000336" -> "1000330"  [label="DDG: maxnonfragsize"];
"1000336" -> "1000330"  [label="DDG: headersize"];
"1000326" -> "1000336"  [label="DDG: maxnonfragsize"];
"1000319" -> "1000336"  [label="DDG: maxnonfragsize"];
"1000336" -> "1000345"  [label="DDG: headersize"];
"1000336" -> "1000347"  [label="DDG: headersize"];
"1000326" -> "1000325"  [label="AST: "];
"1000326" -> "1000328"  [label="CFG: "];
"1000327" -> "1000326"  [label="AST: "];
"1000328" -> "1000326"  [label="AST: "];
"1000333" -> "1000326"  [label="CFG: "];
"1000319" -> "1000316"  [label="AST: "];
"1000319" -> "1000321"  [label="CFG: "];
"1000320" -> "1000319"  [label="AST: "];
"1000321" -> "1000319"  [label="AST: "];
"1000333" -> "1000319"  [label="CFG: "];
"1000319" -> "1001103"  [label="DDG: sizeof(struct ipv6hdr) + IPV6_MAXPLEN"];
"1000215" -> "1000127"  [label="AST: "];
"1000215" -> "1000217"  [label="CFG: "];
"1000216" -> "1000215"  [label="AST: "];
"1000217" -> "1000215"  [label="AST: "];
"1000224" -> "1000215"  [label="CFG: "];
"1000215" -> "1001103"  [label="DDG: hh_len"];
"1000215" -> "1001103"  [label="DDG: LL_RESERVED_SPACE(rt->dst.dev)"];
"1000217" -> "1000215"  [label="DDG: rt->dst.dev"];
"1000215" -> "1000680"  [label="DDG: hh_len"];
"1000215" -> "1000682"  [label="DDG: hh_len"];
"1000215" -> "1000709"  [label="DDG: hh_len"];
"1000215" -> "1000711"  [label="DDG: hh_len"];
"1000215" -> "1000746"  [label="DDG: hh_len"];
"1000215" -> "1000748"  [label="DDG: hh_len"];
"1000217" -> "1000218"  [label="CFG: "];
"1000218" -> "1000217"  [label="AST: "];
"1000217" -> "1001103"  [label="DDG: rt->dst.dev"];
"1000246" -> "1000240"  [label="AST: "];
"1000246" -> "1000248"  [label="CFG: "];
"1000247" -> "1000246"  [label="AST: "];
"1000248" -> "1000246"  [label="AST: "];
"1000240" -> "1000246"  [label="CFG: "];
"1000246" -> "1001103"  [label="DDG: fragheaderlen"];
"1000246" -> "1000238"  [label="DDG: fragheaderlen"];
"1000246" -> "1000240"  [label="DDG: fragheaderlen"];
"1000246" -> "1000437"  [label="DDG: fragheaderlen"];
"1000246" -> "1000438"  [label="DDG: fragheaderlen"];
"1000246" -> "1000570"  [label="DDG: fragheaderlen"];
"1000246" -> "1000590"  [label="DDG: fragheaderlen"];
"1000188" -> "1000187"  [label="AST: "];
"1000188" -> "1000190"  [label="CFG: "];
"1000189" -> "1000188"  [label="AST: "];
"1000190" -> "1000188"  [label="AST: "];
"1000197" -> "1000188"  [label="CFG: "];
"1000188" -> "1001103"  [label="DDG: opt ? opt->opt_flen : 0"];
"1000188" -> "1001103"  [label="DDG: exthdrlen"];
"1000188" -> "1000777"  [label="DDG: exthdrlen"];
"1000138" -> "1000127"  [label="AST: "];
"1000138" -> "1000140"  [label="CFG: "];
"1000139" -> "1000138"  [label="AST: "];
"1000140" -> "1000138"  [label="AST: "];
"1000143" -> "1000138"  [label="CFG: "];
"1000138" -> "1001103"  [label="DDG: exthdrlen"];
"1000138" -> "1000777"  [label="DDG: exthdrlen"];
"1000355" -> "1000354"  [label="AST: "];
"1000355" -> "1000356"  [label="CFG: "];
"1000355" -> "1000357"  [label="CFG: "];
"1000356" -> "1000355"  [label="AST: "];
"1000357" -> "1000355"  [label="AST: "];
"1000391" -> "1000355"  [label="CFG: "];
"1000397" -> "1000355"  [label="CFG: "];
"1000355" -> "1001103"  [label="DDG: transhdrlen"];
"1000355" -> "1001103"  [label="DDG: sk->sk_protocol == IPPROTO_UDP &&\n\t    headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000355" -> "1001103"  [label="DDG: transhdrlen && sk->sk_protocol == IPPROTO_UDP &&\n\t    headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000123" -> "1000355"  [label="DDG: transhdrlen"];
"1000357" -> "1000355"  [label="DDG: sk->sk_protocol == IPPROTO_UDP"];
"1000357" -> "1000355"  [label="DDG: headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000355" -> "1000799"  [label="DDG: transhdrlen"];
"1000355" -> "1000802"  [label="DDG: transhdrlen"];
"1000355" -> "1000828"  [label="DDG: transhdrlen"];
"1000123" -> "1000113"  [label="AST: "];
"1000123" -> "1001103"  [label="DDG: transhdrlen"];
"1000123" -> "1000799"  [label="DDG: transhdrlen"];
"1000123" -> "1000802"  [label="DDG: transhdrlen"];
"1000123" -> "1000828"  [label="DDG: transhdrlen"];
"1000123" -> "1000850"  [label="DDG: transhdrlen"];
"1000123" -> "1000852"  [label="DDG: transhdrlen"];
"1000123" -> "1000876"  [label="DDG: transhdrlen"];
"1000357" -> "1000358"  [label="CFG: "];
"1000357" -> "1000363"  [label="CFG: "];
"1000358" -> "1000357"  [label="AST: "];
"1000363" -> "1000357"  [label="AST: "];
"1000357" -> "1001103"  [label="DDG: sk->sk_protocol == IPPROTO_UDP"];
"1000357" -> "1001103"  [label="DDG: headersize == sizeof(struct ipv6hdr) &&\n\t    length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000358" -> "1000357"  [label="DDG: sk->sk_protocol"];
"1000358" -> "1000357"  [label="DDG: IPPROTO_UDP"];
"1000363" -> "1000357"  [label="DDG: headersize == sizeof(struct ipv6hdr)"];
"1000363" -> "1000357"  [label="DDG: length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000358" -> "1000362"  [label="CFG: "];
"1000359" -> "1000358"  [label="AST: "];
"1000362" -> "1000358"  [label="AST: "];
"1000365" -> "1000358"  [label="CFG: "];
"1000358" -> "1001103"  [label="DDG: IPPROTO_UDP"];
"1000358" -> "1001103"  [label="DDG: sk->sk_protocol"];
"1000295" -> "1000358"  [label="DDG: sk->sk_protocol"];
"1000295" -> "1000358"  [label="DDG: IPPROTO_UDP"];
"1000300" -> "1000358"  [label="DDG: sk->sk_protocol"];
"1000358" -> "1000447"  [label="DDG: sk->sk_protocol"];
"1000358" -> "1000447"  [label="DDG: IPPROTO_UDP"];
"1000295" -> "1000294"  [label="AST: "];
"1000295" -> "1000299"  [label="CFG: "];
"1000296" -> "1000295"  [label="AST: "];
"1000299" -> "1000295"  [label="AST: "];
"1000302" -> "1000295"  [label="CFG: "];
"1000294" -> "1000295"  [label="CFG: "];
"1000295" -> "1001103"  [label="DDG: sk->sk_protocol"];
"1000295" -> "1001103"  [label="DDG: IPPROTO_UDP"];
"1000295" -> "1000294"  [label="DDG: sk->sk_protocol"];
"1000295" -> "1000294"  [label="DDG: IPPROTO_UDP"];
"1000295" -> "1000300"  [label="DDG: sk->sk_protocol"];
"1000295" -> "1000447"  [label="DDG: sk->sk_protocol"];
"1000295" -> "1000447"  [label="DDG: IPPROTO_UDP"];
"1000300" -> "1000294"  [label="AST: "];
"1000300" -> "1000304"  [label="CFG: "];
"1000301" -> "1000300"  [label="AST: "];
"1000304" -> "1000300"  [label="AST: "];
"1000294" -> "1000300"  [label="CFG: "];
"1000300" -> "1001103"  [label="DDG: IPPROTO_RAW"];
"1000300" -> "1001103"  [label="DDG: sk->sk_protocol"];
"1000300" -> "1000294"  [label="DDG: sk->sk_protocol"];
"1000300" -> "1000294"  [label="DDG: IPPROTO_RAW"];
"1000300" -> "1000447"  [label="DDG: sk->sk_protocol"];
"1000363" -> "1000368"  [label="CFG: "];
"1000368" -> "1000363"  [label="AST: "];
"1000363" -> "1001103"  [label="DDG: headersize == sizeof(struct ipv6hdr)"];
"1000363" -> "1001103"  [label="DDG: length <= mtu - headersize &&\n\t    !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000368" -> "1000363"  [label="DDG: length <= mtu - headersize"];
"1000368" -> "1000363"  [label="DDG: !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000368" -> "1000374"  [label="CFG: "];
"1000374" -> "1000368"  [label="AST: "];
"1000368" -> "1001103"  [label="DDG: length <= mtu - headersize"];
"1000368" -> "1001103"  [label="DDG: !(flags & MSG_MORE) &&\n\t    rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000374" -> "1000368"  [label="DDG: !(flags & MSG_MORE)"];
"1000374" -> "1000368"  [label="DDG: rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000374" -> "1000375"  [label="CFG: "];
"1000374" -> "1000379"  [label="CFG: "];
"1000375" -> "1000374"  [label="AST: "];
"1000379" -> "1000374"  [label="AST: "];
"1000374" -> "1001103"  [label="DDG: !(flags & MSG_MORE)"];
"1000374" -> "1001103"  [label="DDG: rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM)"];
"1000375" -> "1000374"  [label="DDG: flags & MSG_MORE"];
"1000379" -> "1000374"  [label="DDG: rt->dst.dev->features"];
"1000379" -> "1000374"  [label="DDG: NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM"];
"1000375" -> "1000376"  [label="CFG: "];
"1000376" -> "1000375"  [label="AST: "];
"1000383" -> "1000375"  [label="CFG: "];
"1000375" -> "1001103"  [label="DDG: flags & MSG_MORE"];
"1000376" -> "1000375"  [label="DDG: flags"];
"1000376" -> "1000375"  [label="DDG: MSG_MORE"];
"1000376" -> "1000378"  [label="CFG: "];
"1000377" -> "1000376"  [label="AST: "];
"1000378" -> "1000376"  [label="AST: "];
"1000376" -> "1001103"  [label="DDG: flags"];
"1000376" -> "1001103"  [label="DDG: MSG_MORE"];
"1000124" -> "1000376"  [label="DDG: flags"];
"1000376" -> "1000620"  [label="DDG: flags"];
"1000376" -> "1000620"  [label="DDG: MSG_MORE"];
"1000124" -> "1000113"  [label="AST: "];
"1000124" -> "1001103"  [label="DDG: flags"];
"1000124" -> "1000620"  [label="DDG: flags"];
"1000124" -> "1000685"  [label="DDG: flags"];
"1000124" -> "1000887"  [label="DDG: flags"];
"1000379" -> "1000387"  [label="CFG: "];
"1000380" -> "1000379"  [label="AST: "];
"1000387" -> "1000379"  [label="AST: "];
"1000379" -> "1001103"  [label="DDG: rt->dst.dev->features"];
"1000379" -> "1001103"  [label="DDG: NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM"];
"1000387" -> "1000379"  [label="DDG: NETIF_F_IPV6_CSUM"];
"1000387" -> "1000379"  [label="DDG: NETIF_F_HW_CSUM"];
"1000379" -> "1000453"  [label="DDG: rt->dst.dev->features"];
"1000379" -> "1000624"  [label="DDG: rt->dst.dev->features"];
"1000379" -> "1000908"  [label="DDG: rt->dst.dev->features"];
"1000387" -> "1000389"  [label="CFG: "];
"1000388" -> "1000387"  [label="AST: "];
"1000389" -> "1000387"  [label="AST: "];
"1000387" -> "1001103"  [label="DDG: NETIF_F_HW_CSUM"];
"1000387" -> "1001103"  [label="DDG: NETIF_F_IPV6_CSUM"];
"1000437" -> "1000436"  [label="AST: "];
"1000437" -> "1000441"  [label="CFG: "];
"1000438" -> "1000437"  [label="AST: "];
"1000441" -> "1000437"  [label="AST: "];
"1000443" -> "1000437"  [label="CFG: "];
"1000436" -> "1000437"  [label="CFG: "];
"1000437" -> "1001103"  [label="DDG: length + fragheaderlen"];
"1000437" -> "1001103"  [label="DDG: mtu"];
"1000437" -> "1000436"  [label="DDG: length + fragheaderlen"];
"1000437" -> "1000436"  [label="DDG: mtu"];
"1000437" -> "1000513"  [label="DDG: mtu"];
"1000437" -> "1000593"  [label="DDG: mtu"];
"1000115" -> "1000113"  [label="AST: "];
"1000115" -> "1001103"  [label="DDG: fl6"];
"1000115" -> "1000306"  [label="DDG: fl6"];
"1000115" -> "1000341"  [label="DDG: fl6"];
"1000479" -> "1000478"  [label="AST: "];
"1000480" -> "1000479"  [label="AST: "];
"1000495" -> "1000479"  [label="CFG: "];
"1000479" -> "1001103"  [label="DDG: err"];
"1000479" -> "1001103"  [label="DDG: ip6_ufo_append_data(sk, queue, getfrag, from, length,\n\t\t\t\t\t  hh_len, fragheaderlen, exthdrlen,\n\t\t\t\t\t  transhdrlen, mtu, flags, fl6)"];
"1000479" -> "1001101"  [label="DDG: err"];
"1001101" -> "1000127"  [label="AST: "];
"1001101" -> "1001102"  [label="CFG: "];
"1001102" -> "1001101"  [label="AST: "];
"1001103" -> "1001101"  [label="CFG: "];
"1001101" -> "1001103"  [label="DDG: <RET>"];
"1001102" -> "1001101"  [label="DDG: err"];
"1001084" -> "1001101"  [label="DDG: err"];
"1000940" -> "1001101"  [label="DDG: err"];
"1000976" -> "1001101"  [label="DDG: err"];
"1000861" -> "1001101"  [label="DDG: err"];
"1000836" -> "1001101"  [label="DDG: err"];
"1000722" -> "1001101"  [label="DDG: err"];
"1000954" -> "1001101"  [label="DDG: err"];
"1001089" -> "1000127"  [label="AST: "];
"1001089" -> "1001093"  [label="CFG: "];
"1001090" -> "1001089"  [label="AST: "];
"1001093" -> "1001089"  [label="AST: "];
"1001096" -> "1001089"  [label="CFG: "];
"1001089" -> "1001103"  [label="DDG: length"];
"1001089" -> "1001103"  [label="DDG: cork->length"];
"1000900" -> "1001089"  [label="DDG: length"];
"1000530" -> "1001089"  [label="DDG: length"];
"1000513" -> "1001089"  [label="DDG: cork->length"];
"1000593" -> "1001089"  [label="DDG: cork->length"];
"1000429" -> "1001089"  [label="DDG: cork->length"];
"1001095" -> "1001094"  [label="AST: "];
"1001095" -> "1001096"  [label="CFG: "];
"1001096" -> "1001095"  [label="AST: "];
"1001098" -> "1001095"  [label="CFG: "];
"1001095" -> "1001103"  [label="DDG: sk"];
"1001095" -> "1001094"  [label="DDG: sk"];
"1000680" -> "1001095"  [label="DDG: sk"];
"1000960" -> "1001095"  [label="DDG: sk"];
"1000709" -> "1001095"  [label="DDG: sk"];
"1001094" -> "1000127"  [label="AST: "];
"1001094" -> "1001100"  [label="CFG: "];
"1001097" -> "1001094"  [label="AST: "];
"1001100" -> "1001094"  [label="AST: "];
"1001102" -> "1001094"  [label="CFG: "];
"1001094" -> "1001103"  [label="DDG: rt->rt6i_idev"];
"1001094" -> "1001103"  [label="DDG: IPSTATS_MIB_OUTDISCARDS"];
"1001094" -> "1001103"  [label="DDG: IP6_INC_STATS(sock_net(sk), rt->rt6i_idev, IPSTATS_MIB_OUTDISCARDS)"];
"1001094" -> "1001103"  [label="DDG: sock_net(sk)"];
}
