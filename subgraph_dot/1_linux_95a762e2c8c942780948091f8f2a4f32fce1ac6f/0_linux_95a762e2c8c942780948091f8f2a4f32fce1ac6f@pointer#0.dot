digraph "0_linux_95a762e2c8c942780948091f8f2a4f32fce1ac6f@pointer" {
"1000251" [label="(Call,check_reg_arg(env, insn->dst_reg, DST_OP))"];
"1000234" [label="(Call,is_pointer_value(env, insn->dst_reg))"];
"1000223" [label="(Call,check_reg_arg(env, insn->dst_reg, SRC_OP))"];
"1000119" [label="(Call,cur_regs(env))"];
"1000113" [label="(MethodParameterIn,struct bpf_verifier_env *env)"];
"1000249" [label="(Call,err = check_reg_arg(env, insn->dst_reg, DST_OP))"];
"1000259" [label="(Return,return err;)"];
"1000552" [label="(Call,verbose(env, \"div by zero\n\"))"];
"1000603" [label="(Call,verbose(env, \"invalid shift %d\n\", insn->imm))"];
"1000625" [label="(Call,adjust_reg_min_max_vals(env, insn))"];
"1000117" [label="(Call,*regs = cur_regs(env))"];
"1000235" [label="(Identifier,env)"];
"1000321" [label="(Call,verbose(env, \"BPF_MOV uses reserved fields\n\"))"];
"1000221" [label="(Call,err = check_reg_arg(env, insn->dst_reg, SRC_OP))"];
"1000251" [label="(Call,check_reg_arg(env, insn->dst_reg, DST_OP))"];
"1000137" [label="(Block,)"];
"1000259" [label="(Return,return err;)"];
"1000329" [label="(Call,check_reg_arg(env, insn->dst_reg, DST_OP))"];
"1000249" [label="(Call,err = check_reg_arg(env, insn->dst_reg, DST_OP))"];
"1000258" [label="(Identifier,err)"];
"1000233" [label="(ControlStructure,if (is_pointer_value(env, insn->dst_reg)))"];
"1000240" [label="(Call,verbose(env, \"R%d pointer arithmetic prohibited\n\",\n\t\t\t\tinsn->dst_reg))"];
"1000228" [label="(Identifier,SRC_OP)"];
"1000113" [label="(MethodParameterIn,struct bpf_verifier_env *env)"];
"1000449" [label="(Call,verbose(env, \"invalid BPF_ALU opcode %x\n\", opcode))"];
"1000241" [label="(Identifier,env)"];
"1000288" [label="(Call,verbose(env, \"BPF_MOV uses reserved fields\n\"))"];
"1000253" [label="(Call,insn->dst_reg)"];
"1000169" [label="(Call,verbose(env, \"BPF_NEG uses reserved fields\n\"))"];
"1000257" [label="(ControlStructure,if (err))"];
"1000256" [label="(Identifier,DST_OP)"];
"1000119" [label="(Call,cur_regs(env))"];
"1000224" [label="(Identifier,env)"];
"1000120" [label="(Identifier,env)"];
"1000236" [label="(Call,insn->dst_reg)"];
"1000479" [label="(Call,verbose(env, \"BPF_ALU uses reserved fields\n\"))"];
"1000296" [label="(Call,check_reg_arg(env, insn->src_reg, SRC_OP))"];
"1000487" [label="(Call,check_reg_arg(env, insn->src_reg, SRC_OP))"];
"1000223" [label="(Call,check_reg_arg(env, insn->dst_reg, SRC_OP))"];
"1000215" [label="(Call,verbose(env, \"BPF_END uses reserved fields\n\"))"];
"1000378" [label="(Call,is_pointer_value(env, insn->src_reg))"];
"1000225" [label="(Call,insn->dst_reg)"];
"1000252" [label="(Identifier,env)"];
"1000250" [label="(Identifier,err)"];
"1000630" [label="(MethodReturn,static int)"];
"1000393" [label="(Call,mark_reg_unknown(env, regs, insn->dst_reg))"];
"1000512" [label="(Call,verbose(env, \"BPF_ALU uses reserved fields\n\"))"];
"1000520" [label="(Call,check_reg_arg(env, insn->dst_reg, SRC_OP))"];
"1000260" [label="(Identifier,err)"];
"1000234" [label="(Call,is_pointer_value(env, insn->dst_reg))"];
"1000384" [label="(Call,verbose(env,\n\t\t\t\t\t\t\"R%d partial copy of pointer\n\",\n\t\t\t\t\t\tinsn->src_reg))"];
"1000614" [label="(Call,check_reg_arg(env, insn->dst_reg, DST_OP_NO_MARK))"];
"1000251" -> "1000249"  [label="AST: "];
"1000251" -> "1000256"  [label="CFG: "];
"1000252" -> "1000251"  [label="AST: "];
"1000253" -> "1000251"  [label="AST: "];
"1000256" -> "1000251"  [label="AST: "];
"1000249" -> "1000251"  [label="CFG: "];
"1000251" -> "1000630"  [label="DDG: insn->dst_reg"];
"1000251" -> "1000630"  [label="DDG: env"];
"1000251" -> "1000630"  [label="DDG: DST_OP"];
"1000251" -> "1000249"  [label="DDG: env"];
"1000251" -> "1000249"  [label="DDG: insn->dst_reg"];
"1000251" -> "1000249"  [label="DDG: DST_OP"];
"1000234" -> "1000251"  [label="DDG: env"];
"1000234" -> "1000251"  [label="DDG: insn->dst_reg"];
"1000113" -> "1000251"  [label="DDG: env"];
"1000234" -> "1000233"  [label="AST: "];
"1000234" -> "1000236"  [label="CFG: "];
"1000235" -> "1000234"  [label="AST: "];
"1000236" -> "1000234"  [label="AST: "];
"1000241" -> "1000234"  [label="CFG: "];
"1000250" -> "1000234"  [label="CFG: "];
"1000234" -> "1000630"  [label="DDG: is_pointer_value(env, insn->dst_reg)"];
"1000223" -> "1000234"  [label="DDG: env"];
"1000223" -> "1000234"  [label="DDG: insn->dst_reg"];
"1000113" -> "1000234"  [label="DDG: env"];
"1000234" -> "1000240"  [label="DDG: env"];
"1000234" -> "1000240"  [label="DDG: insn->dst_reg"];
"1000223" -> "1000221"  [label="AST: "];
"1000223" -> "1000228"  [label="CFG: "];
"1000224" -> "1000223"  [label="AST: "];
"1000225" -> "1000223"  [label="AST: "];
"1000228" -> "1000223"  [label="AST: "];
"1000221" -> "1000223"  [label="CFG: "];
"1000223" -> "1000630"  [label="DDG: insn->dst_reg"];
"1000223" -> "1000630"  [label="DDG: SRC_OP"];
"1000223" -> "1000630"  [label="DDG: env"];
"1000223" -> "1000221"  [label="DDG: env"];
"1000223" -> "1000221"  [label="DDG: insn->dst_reg"];
"1000223" -> "1000221"  [label="DDG: SRC_OP"];
"1000119" -> "1000223"  [label="DDG: env"];
"1000113" -> "1000223"  [label="DDG: env"];
"1000119" -> "1000117"  [label="AST: "];
"1000119" -> "1000120"  [label="CFG: "];
"1000120" -> "1000119"  [label="AST: "];
"1000117" -> "1000119"  [label="CFG: "];
"1000119" -> "1000117"  [label="DDG: env"];
"1000113" -> "1000119"  [label="DDG: env"];
"1000119" -> "1000169"  [label="DDG: env"];
"1000119" -> "1000215"  [label="DDG: env"];
"1000119" -> "1000288"  [label="DDG: env"];
"1000119" -> "1000296"  [label="DDG: env"];
"1000119" -> "1000321"  [label="DDG: env"];
"1000119" -> "1000329"  [label="DDG: env"];
"1000119" -> "1000449"  [label="DDG: env"];
"1000119" -> "1000479"  [label="DDG: env"];
"1000119" -> "1000487"  [label="DDG: env"];
"1000119" -> "1000512"  [label="DDG: env"];
"1000119" -> "1000520"  [label="DDG: env"];
"1000113" -> "1000112"  [label="AST: "];
"1000113" -> "1000630"  [label="DDG: env"];
"1000113" -> "1000169"  [label="DDG: env"];
"1000113" -> "1000215"  [label="DDG: env"];
"1000113" -> "1000240"  [label="DDG: env"];
"1000113" -> "1000288"  [label="DDG: env"];
"1000113" -> "1000296"  [label="DDG: env"];
"1000113" -> "1000321"  [label="DDG: env"];
"1000113" -> "1000329"  [label="DDG: env"];
"1000113" -> "1000378"  [label="DDG: env"];
"1000113" -> "1000384"  [label="DDG: env"];
"1000113" -> "1000393"  [label="DDG: env"];
"1000113" -> "1000449"  [label="DDG: env"];
"1000113" -> "1000479"  [label="DDG: env"];
"1000113" -> "1000487"  [label="DDG: env"];
"1000113" -> "1000512"  [label="DDG: env"];
"1000113" -> "1000520"  [label="DDG: env"];
"1000113" -> "1000552"  [label="DDG: env"];
"1000113" -> "1000603"  [label="DDG: env"];
"1000113" -> "1000614"  [label="DDG: env"];
"1000113" -> "1000625"  [label="DDG: env"];
"1000249" -> "1000137"  [label="AST: "];
"1000250" -> "1000249"  [label="AST: "];
"1000258" -> "1000249"  [label="CFG: "];
"1000249" -> "1000630"  [label="DDG: check_reg_arg(env, insn->dst_reg, DST_OP)"];
"1000249" -> "1000630"  [label="DDG: err"];
"1000249" -> "1000259"  [label="DDG: err"];
"1000259" -> "1000257"  [label="AST: "];
"1000259" -> "1000260"  [label="CFG: "];
"1000260" -> "1000259"  [label="AST: "];
"1000630" -> "1000259"  [label="CFG: "];
"1000259" -> "1000630"  [label="DDG: <RET>"];
"1000260" -> "1000259"  [label="DDG: err"];
}
