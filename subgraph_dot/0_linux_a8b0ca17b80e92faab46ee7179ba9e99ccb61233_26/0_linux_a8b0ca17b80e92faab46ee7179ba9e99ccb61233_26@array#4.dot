digraph "0_linux_a8b0ca17b80e92faab46ee7179ba9e99ccb61233_26@array" {
"1000260" [label="(Call,misaligned_kernel_word_load(address, do_sign_extend, &regs->regs[destreg]))"];
"1000129" [label="(Call,perf_sw_event(PERF_COUNT_SW_ALIGNMENT_FAULTS, 1, regs, address))"];
"1000115" [label="(Call,generate_and_check_address(regs, opcode,\n\t\t\tdisplacement_not_indexed, width_shift, &address))"];
"1000104" [label="(MethodParameterIn,struct pt_regs *regs)"];
"1000105" [label="(MethodParameterIn,__u32 opcode)"];
"1000106" [label="(MethodParameterIn,int displacement_not_indexed)"];
"1000107" [label="(MethodParameterIn,int width_shift)"];
"1000108" [label="(MethodParameterIn,int do_sign_extend)"];
"1000135" [label="(Identifier,destreg)"];
"1000119" [label="(Identifier,width_shift)"];
"1000263" [label="(Call,&regs->regs[destreg])"];
"1000104" [label="(MethodParameterIn,struct pt_regs *regs)"];
"1000150" [label="(Call,(unsigned long) address)"];
"1000129" [label="(Call,perf_sw_event(PERF_COUNT_SW_ALIGNMENT_FAULTS, 1, regs, address))"];
"1000269" [label="(ControlStructure,break;)"];
"1000261" [label="(Identifier,address)"];
"1000116" [label="(Identifier,regs)"];
"1000243" [label="(Call,printk(\"Unexpected width_shift %d in misaligned_load, PC=%08lx\n\",\n\t\t\t\twidth_shift, (unsigned long) regs->pc))"];
"1000115" [label="(Call,generate_and_check_address(regs, opcode,\n\t\t\tdisplacement_not_indexed, width_shift, &address))"];
"1000142" [label="(Call,user_mode(regs))"];
"1000132" [label="(Identifier,regs)"];
"1000130" [label="(Identifier,PERF_COUNT_SW_ALIGNMENT_FAULTS)"];
"1000108" [label="(MethodParameterIn,int do_sign_extend)"];
"1000109" [label="(Block,)"];
"1000107" [label="(MethodParameterIn,int width_shift)"];
"1000170" [label="(Call,1 << width_shift)"];
"1000304" [label="(MethodReturn,static int)"];
"1000262" [label="(Identifier,do_sign_extend)"];
"1000131" [label="(Literal,1)"];
"1000258" [label="(Block,)"];
"1000133" [label="(Identifier,address)"];
"1000260" [label="(Call,misaligned_kernel_word_load(address, do_sign_extend, &regs->regs[destreg]))"];
"1000113" [label="(Call,error = generate_and_check_address(regs, opcode,\n\t\t\tdisplacement_not_indexed, width_shift, &address))"];
"1000153" [label="(Call,1UL<<width_shift)"];
"1000105" [label="(MethodParameterIn,__u32 opcode)"];
"1000120" [label="(Call,&address)"];
"1000106" [label="(MethodParameterIn,int displacement_not_indexed)"];
"1000118" [label="(Identifier,displacement_not_indexed)"];
"1000137" [label="(Call,opcode >> 4)"];
"1000293" [label="(Call,printk(\"Unexpected width_shift %d in misaligned_load, PC=%08lx\n\",\n\t\t\t\twidth_shift, (unsigned long) regs->pc))"];
"1000117" [label="(Identifier,opcode)"];
"1000260" -> "1000258"  [label="AST: "];
"1000260" -> "1000263"  [label="CFG: "];
"1000261" -> "1000260"  [label="AST: "];
"1000262" -> "1000260"  [label="AST: "];
"1000263" -> "1000260"  [label="AST: "];
"1000269" -> "1000260"  [label="CFG: "];
"1000260" -> "1000304"  [label="DDG: do_sign_extend"];
"1000260" -> "1000304"  [label="DDG: misaligned_kernel_word_load(address, do_sign_extend, &regs->regs[destreg])"];
"1000260" -> "1000304"  [label="DDG: &regs->regs[destreg]"];
"1000260" -> "1000304"  [label="DDG: address"];
"1000129" -> "1000260"  [label="DDG: address"];
"1000108" -> "1000260"  [label="DDG: do_sign_extend"];
"1000129" -> "1000109"  [label="AST: "];
"1000129" -> "1000133"  [label="CFG: "];
"1000130" -> "1000129"  [label="AST: "];
"1000131" -> "1000129"  [label="AST: "];
"1000132" -> "1000129"  [label="AST: "];
"1000133" -> "1000129"  [label="AST: "];
"1000135" -> "1000129"  [label="CFG: "];
"1000129" -> "1000304"  [label="DDG: address"];
"1000129" -> "1000304"  [label="DDG: PERF_COUNT_SW_ALIGNMENT_FAULTS"];
"1000129" -> "1000304"  [label="DDG: perf_sw_event(PERF_COUNT_SW_ALIGNMENT_FAULTS, 1, regs, address)"];
"1000115" -> "1000129"  [label="DDG: regs"];
"1000104" -> "1000129"  [label="DDG: regs"];
"1000129" -> "1000142"  [label="DDG: regs"];
"1000129" -> "1000150"  [label="DDG: address"];
"1000115" -> "1000113"  [label="AST: "];
"1000115" -> "1000120"  [label="CFG: "];
"1000116" -> "1000115"  [label="AST: "];
"1000117" -> "1000115"  [label="AST: "];
"1000118" -> "1000115"  [label="AST: "];
"1000119" -> "1000115"  [label="AST: "];
"1000120" -> "1000115"  [label="AST: "];
"1000113" -> "1000115"  [label="CFG: "];
"1000115" -> "1000304"  [label="DDG: opcode"];
"1000115" -> "1000304"  [label="DDG: displacement_not_indexed"];
"1000115" -> "1000304"  [label="DDG: &address"];
"1000115" -> "1000304"  [label="DDG: width_shift"];
"1000115" -> "1000304"  [label="DDG: regs"];
"1000115" -> "1000113"  [label="DDG: regs"];
"1000115" -> "1000113"  [label="DDG: &address"];
"1000115" -> "1000113"  [label="DDG: width_shift"];
"1000115" -> "1000113"  [label="DDG: displacement_not_indexed"];
"1000115" -> "1000113"  [label="DDG: opcode"];
"1000104" -> "1000115"  [label="DDG: regs"];
"1000105" -> "1000115"  [label="DDG: opcode"];
"1000106" -> "1000115"  [label="DDG: displacement_not_indexed"];
"1000107" -> "1000115"  [label="DDG: width_shift"];
"1000115" -> "1000137"  [label="DDG: opcode"];
"1000115" -> "1000153"  [label="DDG: width_shift"];
"1000115" -> "1000293"  [label="DDG: width_shift"];
"1000104" -> "1000103"  [label="AST: "];
"1000104" -> "1000304"  [label="DDG: regs"];
"1000104" -> "1000142"  [label="DDG: regs"];
"1000105" -> "1000103"  [label="AST: "];
"1000105" -> "1000304"  [label="DDG: opcode"];
"1000105" -> "1000137"  [label="DDG: opcode"];
"1000106" -> "1000103"  [label="AST: "];
"1000106" -> "1000304"  [label="DDG: displacement_not_indexed"];
"1000107" -> "1000103"  [label="AST: "];
"1000107" -> "1000304"  [label="DDG: width_shift"];
"1000107" -> "1000153"  [label="DDG: width_shift"];
"1000107" -> "1000170"  [label="DDG: width_shift"];
"1000107" -> "1000243"  [label="DDG: width_shift"];
"1000107" -> "1000293"  [label="DDG: width_shift"];
"1000108" -> "1000103"  [label="AST: "];
"1000108" -> "1000304"  [label="DDG: do_sign_extend"];
}
