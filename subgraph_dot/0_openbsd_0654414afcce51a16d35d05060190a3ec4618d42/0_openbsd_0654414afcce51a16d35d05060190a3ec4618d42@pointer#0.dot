digraph "0_openbsd_0654414afcce51a16d35d05060190a3ec4618d42@pointer" {
"1000130" [label="(Call,mode == SET_HOST && id->hosts)"];
"1000131" [label="(Call,mode == SET_HOST)"];
"1000103" [label="(MethodParameterIn,int mode)"];
"1000138" [label="(Call,string_stack_free(id->hosts))"];
"1000170" [label="(Call,id->hosts == NULL)"];
"1000169" [label="(Call,id->hosts == NULL &&\n\t    (id->hosts = sk_OPENSSL_STRING_new_null()) == NULL)"];
"1000175" [label="(Call,(id->hosts = sk_OPENSSL_STRING_new_null()) == NULL)"];
"1000209" [label="(Call,id->hosts = NULL)"];
"1000189" [label="(Call,sk_OPENSSL_STRING_push(id->hosts, copy))"];
"1000188" [label="(Call,!sk_OPENSSL_STRING_push(id->hosts, copy))"];
"1000195" [label="(Call,free(copy))"];
"1000199" [label="(Call,sk_OPENSSL_STRING_num(id->hosts))"];
"1000198" [label="(Call,sk_OPENSSL_STRING_num(id->hosts) == 0)"];
"1000205" [label="(Call,sk_OPENSSL_STRING_free(id->hosts))"];
"1000205" [label="(Call,sk_OPENSSL_STRING_free(id->hosts))"];
"1000168" [label="(ControlStructure,if (id->hosts == NULL &&\n\t    (id->hosts = sk_OPENSSL_STRING_new_null()) == NULL))"];
"1000135" [label="(Identifier,id)"];
"1000142" [label="(Call,id->hosts = NULL)"];
"1000201" [label="(Identifier,id)"];
"1000189" [label="(Call,sk_OPENSSL_STRING_push(id->hosts, copy))"];
"1000195" [label="(Call,free(copy))"];
"1000138" [label="(Call,string_stack_free(id->hosts))"];
"1000190" [label="(Call,id->hosts)"];
"1000217" [label="(Literal,1)"];
"1000175" [label="(Call,(id->hosts = sk_OPENSSL_STRING_new_null()) == NULL)"];
"1000193" [label="(Identifier,copy)"];
"1000176" [label="(Call,id->hosts = sk_OPENSSL_STRING_new_null())"];
"1000163" [label="(Call,copy == NULL)"];
"1000203" [label="(Literal,0)"];
"1000196" [label="(Identifier,copy)"];
"1000169" [label="(Call,id->hosts == NULL &&\n\t    (id->hosts = sk_OPENSSL_STRING_new_null()) == NULL)"];
"1000211" [label="(Identifier,id)"];
"1000139" [label="(Call,id->hosts)"];
"1000218" [label="(MethodReturn,RET)"];
"1000174" [label="(Identifier,NULL)"];
"1000170" [label="(Call,id->hosts == NULL)"];
"1000171" [label="(Call,id->hosts)"];
"1000206" [label="(Call,id->hosts)"];
"1000140" [label="(Identifier,id)"];
"1000209" [label="(Call,id->hosts = NULL)"];
"1000187" [label="(ControlStructure,if (!sk_OPENSSL_STRING_push(id->hosts, copy)))"];
"1000200" [label="(Call,id->hosts)"];
"1000178" [label="(Identifier,id)"];
"1000181" [label="(Identifier,NULL)"];
"1000213" [label="(Identifier,NULL)"];
"1000131" [label="(Call,mode == SET_HOST)"];
"1000144" [label="(Identifier,id)"];
"1000204" [label="(Block,)"];
"1000150" [label="(Identifier,name)"];
"1000137" [label="(Block,)"];
"1000132" [label="(Identifier,mode)"];
"1000207" [label="(Identifier,id)"];
"1000215" [label="(Literal,0)"];
"1000199" [label="(Call,sk_OPENSSL_STRING_num(id->hosts))"];
"1000198" [label="(Call,sk_OPENSSL_STRING_num(id->hosts) == 0)"];
"1000194" [label="(Block,)"];
"1000133" [label="(Identifier,SET_HOST)"];
"1000184" [label="(Identifier,copy)"];
"1000103" [label="(MethodParameterIn,int mode)"];
"1000130" [label="(Call,mode == SET_HOST && id->hosts)"];
"1000191" [label="(Identifier,id)"];
"1000129" [label="(ControlStructure,if (mode == SET_HOST && id->hosts))"];
"1000210" [label="(Call,id->hosts)"];
"1000134" [label="(Call,id->hosts)"];
"1000188" [label="(Call,!sk_OPENSSL_STRING_push(id->hosts, copy))"];
"1000197" [label="(ControlStructure,if (sk_OPENSSL_STRING_num(id->hosts) == 0))"];
"1000130" -> "1000129"  [label="AST: "];
"1000130" -> "1000131"  [label="CFG: "];
"1000130" -> "1000134"  [label="CFG: "];
"1000131" -> "1000130"  [label="AST: "];
"1000134" -> "1000130"  [label="AST: "];
"1000140" -> "1000130"  [label="CFG: "];
"1000150" -> "1000130"  [label="CFG: "];
"1000130" -> "1000218"  [label="DDG: mode == SET_HOST && id->hosts"];
"1000130" -> "1000218"  [label="DDG: id->hosts"];
"1000130" -> "1000218"  [label="DDG: mode == SET_HOST"];
"1000131" -> "1000130"  [label="DDG: mode"];
"1000131" -> "1000130"  [label="DDG: SET_HOST"];
"1000130" -> "1000138"  [label="DDG: id->hosts"];
"1000130" -> "1000170"  [label="DDG: id->hosts"];
"1000131" -> "1000133"  [label="CFG: "];
"1000132" -> "1000131"  [label="AST: "];
"1000133" -> "1000131"  [label="AST: "];
"1000135" -> "1000131"  [label="CFG: "];
"1000131" -> "1000218"  [label="DDG: mode"];
"1000131" -> "1000218"  [label="DDG: SET_HOST"];
"1000103" -> "1000131"  [label="DDG: mode"];
"1000103" -> "1000101"  [label="AST: "];
"1000103" -> "1000218"  [label="DDG: mode"];
"1000138" -> "1000137"  [label="AST: "];
"1000138" -> "1000139"  [label="CFG: "];
"1000139" -> "1000138"  [label="AST: "];
"1000144" -> "1000138"  [label="CFG: "];
"1000138" -> "1000218"  [label="DDG: string_stack_free(id->hosts)"];
"1000170" -> "1000169"  [label="AST: "];
"1000170" -> "1000174"  [label="CFG: "];
"1000171" -> "1000170"  [label="AST: "];
"1000174" -> "1000170"  [label="AST: "];
"1000178" -> "1000170"  [label="CFG: "];
"1000169" -> "1000170"  [label="CFG: "];
"1000170" -> "1000218"  [label="DDG: id->hosts"];
"1000170" -> "1000218"  [label="DDG: NULL"];
"1000170" -> "1000169"  [label="DDG: id->hosts"];
"1000170" -> "1000169"  [label="DDG: NULL"];
"1000142" -> "1000170"  [label="DDG: id->hosts"];
"1000163" -> "1000170"  [label="DDG: NULL"];
"1000170" -> "1000175"  [label="DDG: NULL"];
"1000170" -> "1000189"  [label="DDG: id->hosts"];
"1000170" -> "1000209"  [label="DDG: NULL"];
"1000169" -> "1000168"  [label="AST: "];
"1000169" -> "1000175"  [label="CFG: "];
"1000175" -> "1000169"  [label="AST: "];
"1000184" -> "1000169"  [label="CFG: "];
"1000191" -> "1000169"  [label="CFG: "];
"1000169" -> "1000218"  [label="DDG: id->hosts == NULL &&\n\t    (id->hosts = sk_OPENSSL_STRING_new_null()) == NULL"];
"1000169" -> "1000218"  [label="DDG: id->hosts == NULL"];
"1000169" -> "1000218"  [label="DDG: (id->hosts = sk_OPENSSL_STRING_new_null()) == NULL"];
"1000175" -> "1000169"  [label="DDG: NULL"];
"1000175" -> "1000181"  [label="CFG: "];
"1000176" -> "1000175"  [label="AST: "];
"1000181" -> "1000175"  [label="AST: "];
"1000175" -> "1000218"  [label="DDG: NULL"];
"1000176" -> "1000175"  [label="DDG: id->hosts"];
"1000175" -> "1000209"  [label="DDG: NULL"];
"1000209" -> "1000204"  [label="AST: "];
"1000209" -> "1000213"  [label="CFG: "];
"1000210" -> "1000209"  [label="AST: "];
"1000213" -> "1000209"  [label="AST: "];
"1000215" -> "1000209"  [label="CFG: "];
"1000209" -> "1000218"  [label="DDG: id->hosts"];
"1000209" -> "1000218"  [label="DDG: NULL"];
"1000189" -> "1000188"  [label="AST: "];
"1000189" -> "1000193"  [label="CFG: "];
"1000190" -> "1000189"  [label="AST: "];
"1000193" -> "1000189"  [label="AST: "];
"1000188" -> "1000189"  [label="CFG: "];
"1000189" -> "1000218"  [label="DDG: id->hosts"];
"1000189" -> "1000218"  [label="DDG: copy"];
"1000189" -> "1000188"  [label="DDG: id->hosts"];
"1000189" -> "1000188"  [label="DDG: copy"];
"1000176" -> "1000189"  [label="DDG: id->hosts"];
"1000163" -> "1000189"  [label="DDG: copy"];
"1000189" -> "1000195"  [label="DDG: copy"];
"1000189" -> "1000199"  [label="DDG: id->hosts"];
"1000188" -> "1000187"  [label="AST: "];
"1000196" -> "1000188"  [label="CFG: "];
"1000217" -> "1000188"  [label="CFG: "];
"1000188" -> "1000218"  [label="DDG: !sk_OPENSSL_STRING_push(id->hosts, copy)"];
"1000188" -> "1000218"  [label="DDG: sk_OPENSSL_STRING_push(id->hosts, copy)"];
"1000195" -> "1000194"  [label="AST: "];
"1000195" -> "1000196"  [label="CFG: "];
"1000196" -> "1000195"  [label="AST: "];
"1000201" -> "1000195"  [label="CFG: "];
"1000195" -> "1000218"  [label="DDG: copy"];
"1000199" -> "1000198"  [label="AST: "];
"1000199" -> "1000200"  [label="CFG: "];
"1000200" -> "1000199"  [label="AST: "];
"1000203" -> "1000199"  [label="CFG: "];
"1000199" -> "1000218"  [label="DDG: id->hosts"];
"1000199" -> "1000198"  [label="DDG: id->hosts"];
"1000199" -> "1000205"  [label="DDG: id->hosts"];
"1000198" -> "1000197"  [label="AST: "];
"1000198" -> "1000203"  [label="CFG: "];
"1000203" -> "1000198"  [label="AST: "];
"1000207" -> "1000198"  [label="CFG: "];
"1000215" -> "1000198"  [label="CFG: "];
"1000198" -> "1000218"  [label="DDG: sk_OPENSSL_STRING_num(id->hosts)"];
"1000198" -> "1000218"  [label="DDG: sk_OPENSSL_STRING_num(id->hosts) == 0"];
"1000205" -> "1000204"  [label="AST: "];
"1000205" -> "1000206"  [label="CFG: "];
"1000206" -> "1000205"  [label="AST: "];
"1000211" -> "1000205"  [label="CFG: "];
"1000205" -> "1000218"  [label="DDG: sk_OPENSSL_STRING_free(id->hosts)"];
}
