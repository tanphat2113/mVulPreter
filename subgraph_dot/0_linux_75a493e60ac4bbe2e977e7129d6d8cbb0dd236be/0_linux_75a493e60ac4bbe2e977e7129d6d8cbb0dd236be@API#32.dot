digraph "0_linux_75a493e60ac4bbe2e977e7129d6d8cbb0dd236be@API" {
"1000579" [label="(Call,fragheaderlen = sizeof(struct ipv6hdr) + rt->rt6i_nfheader_len +\n\t\t\t(opt ? opt->opt_nflen : 0))"];
"1000520" [label="(Call,rt->dst.header_len - rt->rt6i_nfheader_len)"];
"1000123" [label="(MethodParameterIn,struct ipv6_txoptions *opt)"];
"1000598" [label="(Call,mtu - fragheaderlen)"];
"1000597" [label="(Call,(mtu - fragheaderlen) & ~7)"];
"1000594" [label="(Call,maxfraglen = ((mtu - fragheaderlen) & ~7) + fragheaderlen - sizeof(struct frag_hdr))"];
"1000735" [label="(Call,(cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - skb->len)"];
"1000733" [label="(Call,copy = (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - skb->len)"];
"1000755" [label="(Call,copy < length)"];
"1000766" [label="(Call,copy <= 0)"];
"1001119" [label="(Call,copy > length)"];
"1001122" [label="(Call,copy = length)"];
"1001147" [label="(Call,skb_put(skb, copy))"];
"1001145" [label="(Call,getfrag(from, skb_put(skb, copy),\n\t\t\t\t\t\toffset, copy, off, skb))"];
"1000791" [label="(Call,skb == NULL)"];
"1000790" [label="(Call,skb == NULL || skb_prev == NULL)"];
"1000794" [label="(Call,skb_prev == NULL)"];
"1000923" [label="(Call,skb = NULL)"];
"1000951" [label="(Call,skb == NULL)"];
"1000950" [label="(Call,unlikely(skb == NULL))"];
"1000964" [label="(Call,skb == NULL)"];
"1000978" [label="(Call,skb_reserve(skb, hh_len + sizeof(struct frag_hdr) +\n\t\t\t\t    dst_exthdrlen))"];
"1000994" [label="(Call,skb_shinfo(skb))"];
"1001000" [label="(Call,skb_put(skb, fraglen))"];
"1000998" [label="(Call,data = skb_put(skb, fraglen))"];
"1001006" [label="(Call,data += fragheaderlen)"];
"1001025" [label="(Call,skb_copy_and_csum_bits(\n\t\t\t\t\tskb_prev, maxfraglen,\n\t\t\t\t\tdata + transhdrlen, fraggap, 0))"];
"1001021" [label="(Call,skb->csum = skb_copy_and_csum_bits(\n\t\t\t\t\tskb_prev, maxfraglen,\n\t\t\t\t\tdata + transhdrlen, fraggap, 0))"];
"1001037" [label="(Call,csum_sub(skb_prev->csum,\n\t\t\t\t\t\t\t  skb->csum))"];
"1001033" [label="(Call,skb_prev->csum = csum_sub(skb_prev->csum,\n\t\t\t\t\t\t\t  skb->csum))"];
"1001044" [label="(Call,data += fraggap)"];
"1001076" [label="(Call,getfrag(from, data + transhdrlen, offset, copy, fraggap, skb))"];
"1001075" [label="(Call,getfrag(from, data + transhdrlen, offset, copy, fraggap, skb) < 0)"];
"1001071" [label="(Call,copy > 0 && getfrag(from, data + transhdrlen, offset, copy, fraggap, skb) < 0)"];
"1001091" [label="(Call,kfree_skb(skb))"];
"1001094" [label="(Call,offset += copy)"];
"1001244" [label="(Call,getfrag(from,\n\t\t\t\t    page_address(pfrag->page) + pfrag->offset,\n\t\t\t\t    offset, copy, skb->len, skb))"];
"1001243" [label="(Call,getfrag(from,\n\t\t\t\t    page_address(pfrag->page) + pfrag->offset,\n\t\t\t\t    offset, copy, skb->len, skb) < 0)"];
"1001262" [label="(Call,pfrag->offset += copy)"];
"1001190" [label="(Call,skb_can_coalesce(skb, i, pfrag->page,\n\t\t\t\t\t      pfrag->offset))"];
"1001189" [label="(Call,!skb_can_coalesce(skb, i, pfrag->page,\n\t\t\t\t\t      pfrag->offset))"];
"1001205" [label="(Call,i == MAX_SKB_FRAGS)"];
"1001209" [label="(Call,__skb_fill_page_desc(skb, i, pfrag->page,\n\t\t\t\t\t\t     pfrag->offset, 0))"];
"1001221" [label="(Call,skb_shinfo(skb))"];
"1001224" [label="(Call,++i)"];
"1001219" [label="(Call,skb_shinfo(skb)->nr_frags = ++i)"];
"1001167" [label="(Call,i = skb_shinfo(skb)->nr_frags)"];
"1001274" [label="(Call,i - 1)"];
"1001226" [label="(Call,get_page(pfrag->page))"];
"1001247" [label="(Call,page_address(pfrag->page))"];
"1001246" [label="(Call,page_address(pfrag->page) + pfrag->offset)"];
"1001235" [label="(Call,pfrag->size - pfrag->offset)"];
"1001232" [label="(Call,min_t(int, copy, pfrag->size - pfrag->offset))"];
"1001230" [label="(Call,copy = min_t(int, copy, pfrag->size - pfrag->offset))"];
"1001271" [label="(Call,skb_shinfo(skb))"];
"1001170" [label="(Call,skb_shinfo(skb))"];
"1001267" [label="(Call,skb_frag_size_add(&skb_shinfo(skb)->frags[i - 1], copy))"];
"1001278" [label="(Call,skb->len += copy)"];
"1001283" [label="(Call,skb->data_len += copy)"];
"1001288" [label="(Call,skb->truesize += copy)"];
"1001293" [label="(Call,atomic_add(copy, &sk->sk_wmem_alloc))"];
"1000928" [label="(Call,atomic_read(&sk->sk_wmem_alloc))"];
"1000927" [label="(Call,atomic_read(&sk->sk_wmem_alloc) <=\n\t\t\t\t    2 * sk->sk_sndbuf)"];
"1001299" [label="(Call,offset += copy)"];
"1001302" [label="(Call,length -= copy)"];
"1000729" [label="(Call,length > 0)"];
"1001099" [label="(Call,datalen - fraggap)"];
"1001097" [label="(Call,length -= datalen - fraggap)"];
"1001111" [label="(Call,__skb_queue_tail(&sk->sk_write_queue, skb))"];
"1001078" [label="(Call,data + transhdrlen)"];
"1001047" [label="(Call,pskb_trim_unique(skb_prev, maxfraglen))"];
"1000736" [label="(Call,cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen)"];
"1000760" [label="(Call,maxfraglen - skb->len)"];
"1000758" [label="(Call,copy = maxfraglen - skb->len)"];
"1000780" [label="(Call,skb->len - maxfraglen)"];
"1000778" [label="(Call,fraggap = skb->len - maxfraglen)"];
"1000813" [label="(Call,datalen = length + fraggap)"];
"1000819" [label="(Call,datalen > (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - fragheaderlen)"];
"1000868" [label="(Call,alloclen = datalen + fragheaderlen)"];
"1000873" [label="(Call,alloclen += dst_exthdrlen)"];
"1000890" [label="(Call,alloclen += rt->dst.trailer_len)"];
"1000902" [label="(Call,alloclen += sizeof(struct frag_hdr))"];
"1000911" [label="(Call,sock_alloc_send_skb(sk,\n\t\t\t\t\t\talloclen + hh_len,\n\t\t\t\t\t\t(flags & MSG_DONTWAIT), &err))"];
"1000909" [label="(Call,skb = sock_alloc_send_skb(sk,\n\t\t\t\t\t\talloclen + hh_len,\n\t\t\t\t\t\t(flags & MSG_DONTWAIT), &err))"];
"1000940" [label="(Call,sock_wmalloc(sk,\n\t\t\t\t\t\t\t   alloclen + hh_len, 1,\n\t\t\t\t\t\t\t   sk->sk_allocation))"];
"1000938" [label="(Call,skb = sock_wmalloc(sk,\n\t\t\t\t\t\t\t   alloclen + hh_len, 1,\n\t\t\t\t\t\t\t   sk->sk_allocation))"];
"1001176" [label="(Call,sk_page_frag(sk))"];
"1001174" [label="(Call,*pfrag = sk_page_frag(sk))"];
"1001184" [label="(Call,sk_page_frag_refill(sk, pfrag))"];
"1001183" [label="(Call,!sk_page_frag_refill(sk, pfrag))"];
"1001319" [label="(Call,sock_net(sk))"];
"1001318" [label="(Call,IP6_INC_STATS(sock_net(sk), rt->rt6i_idev, IPSTATS_MIB_OUTDISCARDS))"];
"1000913" [label="(Call,alloclen + hh_len)"];
"1000942" [label="(Call,alloclen + hh_len)"];
"1000870" [label="(Call,datalen + fragheaderlen)"];
"1000877" [label="(Call,datalen != length + fraggap)"];
"1000883" [label="(Call,datalen += rt->dst.trailer_len)"];
"1000897" [label="(Call,fraglen = datalen + fragheaderlen)"];
"1000899" [label="(Call,datalen + fragheaderlen)"];
"1001052" [label="(Call,datalen - transhdrlen - fraggap)"];
"1001050" [label="(Call,copy = datalen - transhdrlen - fraggap)"];
"1001058" [label="(Call,copy < 0)"];
"1001072" [label="(Call,copy > 0)"];
"1000815" [label="(Call,length + fraggap)"];
"1000879" [label="(Call,length + fraggap)"];
"1001054" [label="(Call,transhdrlen - fraggap)"];
"1000821" [label="(Call,(cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - fragheaderlen)"];
"1000797" [label="(Call,ip6_append_data_mtu(&mtu, &maxfraglen,\n\t\t\t\t\t\t    fragheaderlen, skb, rt,\n\t\t\t\t\t\t    np->pmtudisc ==\n\t\t\t\t\t\t    IPV6_PMTUDISC_PROBE))"];
"1000810" [label="(Call,skb_prev = skb)"];
"1000842" [label="(Call,fragheaderlen - rt->dst.trailer_len)"];
"1000840" [label="(Call,maxfraglen - fragheaderlen - rt->dst.trailer_len)"];
"1000838" [label="(Call,datalen = maxfraglen - fragheaderlen - rt->dst.trailer_len)"];
"1001009" [label="(Call,skb->transport_header = (skb->network_header +\n\t\t\t\t\t\t fragheaderlen))"];
"1001013" [label="(Call,skb->network_header +\n\t\t\t\t\t\t fragheaderlen)"];
"1000822" [label="(Call,cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen)"];
"1001138" [label="(Call,off = skb->len)"];
"1001028" [label="(Call,data + transhdrlen)"];
"1001003" [label="(Call,skb_set_network_header(skb, exthdrlen))"];
"1001066" [label="(Call,kfree_skb(skb))"];
"1001144" [label="(Call,getfrag(from, skb_put(skb, copy),\n\t\t\t\t\t\toffset, copy, off, skb) < 0)"];
"1001156" [label="(Call,__skb_trim(skb, off))"];
"1001313" [label="(Call,cork->length -= length)"];
"1000596" [label="(Call,((mtu - fragheaderlen) & ~7) + fragheaderlen - sizeof(struct frag_hdr))"];
"1000602" [label="(Call,fragheaderlen - sizeof(struct frag_hdr))"];
"1000624" [label="(Call,IPV6_MAXPLEN - fragheaderlen)"];
"1000615" [label="(Call,cork->length + length > sizeof(struct ipv6hdr) + IPV6_MAXPLEN - fragheaderlen)"];
"1000621" [label="(Call,sizeof(struct ipv6hdr) + IPV6_MAXPLEN - fragheaderlen)"];
"1000701" [label="(Call,ip6_ufo_append_data(sk, getfrag, from, length,\n\t\t\t\t\t\t  hh_len, fragheaderlen,\n\t\t\t\t\t\t  transhdrlen, mtu, flags, rt))"];
"1000699" [label="(Call,err = ip6_ufo_append_data(sk, getfrag, from, length,\n\t\t\t\t\t\t  hh_len, fragheaderlen,\n\t\t\t\t\t\t  transhdrlen, mtu, flags, rt))"];
"1001325" [label="(Return,return err;)"];
"1000607" [label="(Call,mtu <= sizeof(struct ipv6hdr) + IPV6_MAXPLEN)"];
"1000632" [label="(Call,mtu-exthdrlen)"];
"1000628" [label="(Call,ipv6_local_error(sk, EMSGSIZE, fl6, mtu-exthdrlen))"];
"1000636" [label="(Call,-EMSGSIZE)"];
"1000635" [label="(Return,return -EMSGSIZE;)"];
"1000654" [label="(Call,length > mtu)"];
"1000678" [label="(Call,mtu-exthdrlen)"];
"1000675" [label="(Call,ipv6_local_rxpmtu(sk, fl6, mtu-exthdrlen))"];
"1000738" [label="(Call,cork->length <= mtu)"];
"1000737" [label="(Call,cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG))"];
"1000823" [label="(Call,cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG))"];
"1000824" [label="(Call,cork->length <= mtu)"];
"1000864" [label="(Call,alloclen = mtu)"];
"1000775" [label="(JumpTarget,alloc_new_skb:)"];
"1001302" [label="(Call,length -= copy)"];
"1001033" [label="(Call,skb_prev->csum = csum_sub(skb_prev->csum,\n\t\t\t\t\t\t\t  skb->csum))"];
"1000836" [label="(Identifier,maxfraglen)"];
"1001184" [label="(Call,sk_page_frag_refill(sk, pfrag))"];
"1000604" [label="(Call,sizeof(struct frag_hdr))"];
"1000538" [label="(Call,fl6 = &inet->cork.fl.u.ip6)"];
"1001053" [label="(Identifier,datalen)"];
"1000786" [label="(Call,fraggap = 0)"];
"1000520" [label="(Call,rt->dst.header_len - rt->rt6i_nfheader_len)"];
"1000869" [label="(Identifier,alloclen)"];
"1001188" [label="(ControlStructure,if (!skb_can_coalesce(skb, i, pfrag->page,\n\t\t\t\t\t      pfrag->offset)))"];
"1001054" [label="(Call,transhdrlen - fraggap)"];
"1001000" [label="(Call,skb_put(skb, fraglen))"];
"1001112" [label="(Call,&sk->sk_write_queue)"];
"1000933" [label="(Call,2 * sk->sk_sndbuf)"];
"1001151" [label="(Identifier,copy)"];
"1001046" [label="(Identifier,fraggap)"];
"1001196" [label="(Call,pfrag->offset)"];
"1001254" [label="(Identifier,offset)"];
"1000601" [label="(Identifier,~7)"];
"1001293" [label="(Call,atomic_add(copy, &sk->sk_wmem_alloc))"];
"1000908" [label="(Block,)"];
"1000828" [label="(Identifier,mtu)"];
"1000964" [label="(Call,skb == NULL)"];
"1000821" [label="(Call,(cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - fragheaderlen)"];
"1000803" [label="(Identifier,skb)"];
"1001047" [label="(Call,pskb_trim_unique(skb_prev, maxfraglen))"];
"1000903" [label="(Identifier,alloclen)"];
"1001317" [label="(Identifier,length)"];
"1000702" [label="(Identifier,sk)"];
"1001008" [label="(Identifier,fragheaderlen)"];
"1001105" [label="(Call,exthdrlen = 0)"];
"1000621" [label="(Call,sizeof(struct ipv6hdr) + IPV6_MAXPLEN - fragheaderlen)"];
"1000796" [label="(Identifier,NULL)"];
"1000629" [label="(Identifier,sk)"];
"1000776" [label="(ControlStructure,if (skb))"];
"1000832" [label="(Identifier,cork)"];
"1001092" [label="(Identifier,skb)"];
"1001251" [label="(Call,pfrag->offset)"];
"1000731" [label="(Literal,0)"];
"1001044" [label="(Call,data += fraggap)"];
"1000810" [label="(Call,skb_prev = skb)"];
"1001220" [label="(Call,skb_shinfo(skb)->nr_frags)"];
"1001215" [label="(Call,pfrag->offset)"];
"1001260" [label="(Literal,0)"];
"1000755" [label="(Call,copy < length)"];
"1001052" [label="(Call,datalen - transhdrlen - fraggap)"];
"1001019" [label="(Identifier,fraggap)"];
"1000795" [label="(Identifier,skb_prev)"];
"1001006" [label="(Call,data += fragheaderlen)"];
"1001208" [label="(ControlStructure,goto error;)"];
"1000912" [label="(Identifier,sk)"];
"1001318" [label="(Call,IP6_INC_STATS(sock_net(sk), rt->rt6i_idev, IPSTATS_MIB_OUTDISCARDS))"];
"1000993" [label="(Call,skb_shinfo(skb)->tx_flags)"];
"1000703" [label="(Identifier,getfrag)"];
"1001255" [label="(Identifier,copy)"];
"1000630" [label="(Identifier,EMSGSIZE)"];
"1001041" [label="(Call,skb->csum)"];
"1000925" [label="(Identifier,NULL)"];
"1001147" [label="(Call,skb_put(skb, copy))"];
"1001048" [label="(Identifier,skb_prev)"];
"1000881" [label="(Identifier,fraggap)"];
"1001295" [label="(Call,&sk->sk_wmem_alloc)"];
"1000799" [label="(Identifier,mtu)"];
"1001231" [label="(Identifier,copy)"];
"1001098" [label="(Identifier,length)"];
"1001138" [label="(Call,off = skb->len)"];
"1001274" [label="(Call,i - 1)"];
"1000805" [label="(Call,np->pmtudisc ==\n\t\t\t\t\t\t    IPV6_PMTUDISC_PROBE)"];
"1001279" [label="(Call,skb->len)"];
"1001116" [label="(Identifier,skb)"];
"1001082" [label="(Identifier,copy)"];
"1001264" [label="(Identifier,pfrag)"];
"1000596" [label="(Call,((mtu - fragheaderlen) & ~7) + fragheaderlen - sizeof(struct frag_hdr))"];
"1000766" [label="(Call,copy <= 0)"];
"1000819" [label="(Call,datalen > (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - fragheaderlen)"];
"1000911" [label="(Call,sock_alloc_send_skb(sk,\n\t\t\t\t\t\talloclen + hh_len,\n\t\t\t\t\t\t(flags & MSG_DONTWAIT), &err))"];
"1000467" [label="(Call,np->frag_size < mtu)"];
"1000123" [label="(MethodParameterIn,struct ipv6_txoptions *opt)"];
"1000792" [label="(Identifier,skb)"];
"1001103" [label="(Identifier,transhdrlen)"];
"1000660" [label="(Identifier,proto)"];
"1000550" [label="(Call,opt = np->cork.opt)"];
"1001299" [label="(Call,offset += copy)"];
"1000995" [label="(Identifier,skb)"];
"1001314" [label="(Call,cork->length)"];
"1001061" [label="(Block,)"];
"1000890" [label="(Call,alloclen += rt->dst.trailer_len)"];
"1000926" [label="(ControlStructure,if (atomic_read(&sk->sk_wmem_alloc) <=\n\t\t\t\t    2 * sk->sk_sndbuf))"];
"1000940" [label="(Call,sock_wmalloc(sk,\n\t\t\t\t\t\t\t   alloclen + hh_len, 1,\n\t\t\t\t\t\t\t   sk->sk_allocation))"];
"1001075" [label="(Call,getfrag(from, data + transhdrlen, offset, copy, fraggap, skb) < 0)"];
"1000600" [label="(Identifier,fragheaderlen)"];
"1001091" [label="(Call,kfree_skb(skb))"];
"1001294" [label="(Identifier,copy)"];
"1000634" [label="(Identifier,exthdrlen)"];
"1000627" [label="(Block,)"];
"1000979" [label="(Identifier,skb)"];
"1001086" [label="(Block,)"];
"1001230" [label="(Call,copy = min_t(int, copy, pfrag->size - pfrag->offset))"];
"1000622" [label="(Call,sizeof(struct ipv6hdr))"];
"1001149" [label="(Identifier,copy)"];
"1001178" [label="(Call,err = -ENOMEM)"];
"1001192" [label="(Identifier,i)"];
"1001035" [label="(Identifier,skb_prev)"];
"1000927" [label="(Call,atomic_read(&sk->sk_wmem_alloc) <=\n\t\t\t\t    2 * sk->sk_sndbuf)"];
"1001301" [label="(Identifier,copy)"];
"1000784" [label="(Identifier,maxfraglen)"];
"1001145" [label="(Call,getfrag(from, skb_put(skb, copy),\n\t\t\t\t\t\toffset, copy, off, skb))"];
"1000618" [label="(Identifier,cork)"];
"1001232" [label="(Call,min_t(int, copy, pfrag->size - pfrag->offset))"];
"1001027" [label="(Identifier,maxfraglen)"];
"1000709" [label="(Identifier,mtu)"];
"1001108" [label="(Call,dst_exthdrlen = 0)"];
"1000790" [label="(Call,skb == NULL || skb_prev == NULL)"];
"1001263" [label="(Call,pfrag->offset)"];
"1000137" [label="(Call,inet6_sk(sk))"];
"1000719" [label="(Call,skb = skb_peek_tail(&sk->sk_write_queue))"];
"1000966" [label="(Identifier,NULL)"];
"1000922" [label="(Block,)"];
"1001013" [label="(Call,skb->network_header +\n\t\t\t\t\t\t fragheaderlen)"];
"1000880" [label="(Identifier,length)"];
"1000950" [label="(Call,unlikely(skb == NULL))"];
"1001204" [label="(ControlStructure,if (i == MAX_SKB_FRAGS))"];
"1001303" [label="(Identifier,length)"];
"1000506" [label="(Call,opt ? opt->opt_flen : 0)"];
"1000142" [label="(Call,*skb_prev = NULL)"];
"1001306" [label="(Literal,0)"];
"1000758" [label="(Call,copy = maxfraglen - skb->len)"];
"1000738" [label="(Call,cork->length <= mtu)"];
"1000840" [label="(Call,maxfraglen - fragheaderlen - rt->dst.trailer_len)"];
"1001057" [label="(ControlStructure,if (copy < 0))"];
"1001146" [label="(Identifier,from)"];
"1000603" [label="(Identifier,fragheaderlen)"];
"1001095" [label="(Identifier,offset)"];
"1001150" [label="(Identifier,offset)"];
"1001169" [label="(Call,skb_shinfo(skb)->nr_frags)"];
"1001121" [label="(Identifier,length)"];
"1001185" [label="(Identifier,sk)"];
"1001190" [label="(Call,skb_can_coalesce(skb, i, pfrag->page,\n\t\t\t\t\t      pfrag->offset))"];
"1000614" [label="(ControlStructure,if (cork->length + length > sizeof(struct ipv6hdr) + IPV6_MAXPLEN - fragheaderlen))"];
"1001256" [label="(Call,skb->len)"];
"1001055" [label="(Identifier,transhdrlen)"];
"1000701" [label="(Call,ip6_ufo_append_data(sk, getfrag, from, length,\n\t\t\t\t\t\t  hh_len, fragheaderlen,\n\t\t\t\t\t\t  transhdrlen, mtu, flags, rt))"];
"1000897" [label="(Call,fraglen = datalen + fragheaderlen)"];
"1001327" [label="(MethodReturn,int)"];
"1000521" [label="(Call,rt->dst.header_len)"];
"1001078" [label="(Call,data + transhdrlen)"];
"1000733" [label="(Call,copy = (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - skb->len)"];
"1000732" [label="(Block,)"];
"1000769" [label="(Block,)"];
"1000675" [label="(Call,ipv6_local_rxpmtu(sk, fl6, mtu-exthdrlen))"];
"1001158" [label="(Identifier,off)"];
"1000746" [label="(Identifier,cork)"];
"1000901" [label="(Identifier,fragheaderlen)"];
"1000823" [label="(Call,cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG))"];
"1000811" [label="(Identifier,skb_prev)"];
"1000924" [label="(Identifier,skb)"];
"1000804" [label="(Identifier,rt)"];
"1001271" [label="(Call,skb_shinfo(skb))"];
"1000743" [label="(Call,!(cork->flags & IPCORK_ALLFRAG))"];
"1000120" [label="(MethodParameterIn,int transhdrlen)"];
"1000597" [label="(Call,(mtu - fragheaderlen) & ~7)"];
"1000354" [label="(Call,ip6_rthdr_dup(opt->srcrt,\n\t\t\t\t\t\t\t    sk->sk_allocation))"];
"1000961" [label="(Identifier,tx_flags)"];
"1001155" [label="(Block,)"];
"1000989" [label="(Identifier,sk)"];
"1000754" [label="(ControlStructure,if (copy < length))"];
"1000477" [label="(Call,mtu = np->frag_size)"];
"1000907" [label="(Identifier,transhdrlen)"];
"1001313" [label="(Call,cork->length -= length)"];
"1000119" [label="(MethodParameterIn,int length)"];
"1001066" [label="(Call,kfree_skb(skb))"];
"1001272" [label="(Identifier,skb)"];
"1000602" [label="(Call,fragheaderlen - sizeof(struct frag_hdr))"];
"1001179" [label="(Identifier,err)"];
"1001030" [label="(Identifier,transhdrlen)"];
"1001122" [label="(Call,copy = length)"];
"1001021" [label="(Call,skb->csum = skb_copy_and_csum_bits(\n\t\t\t\t\tskb_prev, maxfraglen,\n\t\t\t\t\tdata + transhdrlen, fraggap, 0))"];
"1000644" [label="(Call,sock_tx_timestamp(sk, &tx_flags))"];
"1000563" [label="(Call,dst_exthdrlen = 0)"];
"1000797" [label="(Call,ip6_append_data_mtu(&mtu, &maxfraglen,\n\t\t\t\t\t\t    fragheaderlen, skb, rt,\n\t\t\t\t\t\t    np->pmtudisc ==\n\t\t\t\t\t\t    IPV6_PMTUDISC_PROBE))"];
"1001308" [label="(Call,err = -EFAULT)"];
"1001223" [label="(FieldIdentifier,nr_frags)"];
"1001288" [label="(Call,skb->truesize += copy)"];
"1000910" [label="(Identifier,skb)"];
"1001073" [label="(Identifier,copy)"];
"1001087" [label="(Call,err = -EFAULT)"];
"1000757" [label="(Identifier,length)"];
"1000126" [label="(MethodParameterIn,unsigned int flags)"];
"1001153" [label="(Identifier,skb)"];
"1000817" [label="(Identifier,fraggap)"];
"1001321" [label="(Call,rt->rt6i_idev)"];
"1000653" [label="(ControlStructure,if (length > mtu))"];
"1000633" [label="(Identifier,mtu)"];
"1001210" [label="(Identifier,skb)"];
"1000825" [label="(Call,cork->length)"];
"1000980" [label="(Call,hh_len + sizeof(struct frag_hdr) +\n\t\t\t\t    dst_exthdrlen)"];
"1001011" [label="(Identifier,skb)"];
"1000874" [label="(Identifier,alloclen)"];
"1000756" [label="(Identifier,copy)"];
"1001177" [label="(Identifier,sk)"];
"1000943" [label="(Identifier,alloclen)"];
"1001276" [label="(Literal,1)"];
"1000752" [label="(Identifier,skb)"];
"1000637" [label="(Identifier,EMSGSIZE)"];
"1001221" [label="(Call,skb_shinfo(skb))"];
"1001189" [label="(Call,!skb_can_coalesce(skb, i, pfrag->page,\n\t\t\t\t\t      pfrag->offset))"];
"1001225" [label="(Identifier,i)"];
"1000941" [label="(Identifier,sk)"];
"1001071" [label="(Call,copy > 0 && getfrag(from, data + transhdrlen, offset, copy, fraggap, skb) < 0)"];
"1000729" [label="(Call,length > 0)"];
"1000526" [label="(Call,rt->rt6i_nfheader_len)"];
"1000815" [label="(Call,length + fraggap)"];
"1001157" [label="(Identifier,skb)"];
"1001059" [label="(Identifier,copy)"];
"1001160" [label="(Identifier,err)"];
"1000594" [label="(Call,maxfraglen = ((mtu - fragheaderlen) & ~7) + fragheaderlen - sizeof(struct frag_hdr))"];
"1000571" [label="(Call,hh_len = LL_RESERVED_SPACE(rt->dst.dev))"];
"1000835" [label="(Identifier,mtu)"];
"1000923" [label="(Call,skb = NULL)"];
"1001102" [label="(Call,transhdrlen = 0)"];
"1000864" [label="(Call,alloclen = mtu)"];
"1001283" [label="(Call,skb->data_len += copy)"];
"1001175" [label="(Identifier,pfrag)"];
"1000624" [label="(Call,IPV6_MAXPLEN - fragheaderlen)"];
"1000124" [label="(MethodParameterIn,struct flowi6 *fl6)"];
"1001124" [label="(Identifier,length)"];
"1000883" [label="(Call,datalen += rt->dst.trailer_len)"];
"1001270" [label="(Call,skb_shinfo(skb)->frags)"];
"1000791" [label="(Call,skb == NULL)"];
"1000965" [label="(Identifier,skb)"];
"1001242" [label="(ControlStructure,if (getfrag(from,\n\t\t\t\t    page_address(pfrag->page) + pfrag->offset,\n\t\t\t\t    offset, copy, skb->len, skb) < 0))"];
"1000928" [label="(Call,atomic_read(&sk->sk_wmem_alloc))"];
"1001038" [label="(Call,skb_prev->csum)"];
"1000728" [label="(ControlStructure,while (length > 0))"];
"1000751" [label="(Call,skb->len)"];
"1001261" [label="(ControlStructure,goto error_efault;)"];
"1000162" [label="(Call,flags&MSG_PROBE)"];
"1000628" [label="(Call,ipv6_local_error(sk, EMSGSIZE, fl6, mtu-exthdrlen))"];
"1001099" [label="(Call,datalen - fraggap)"];
"1001170" [label="(Call,skb_shinfo(skb))"];
"1001148" [label="(Identifier,skb)"];
"1000812" [label="(Identifier,skb)"];
"1000655" [label="(Identifier,length)"];
"1001007" [label="(Identifier,data)"];
"1000125" [label="(MethodParameterIn,struct rt6_info *rt)"];
"1001247" [label="(Call,page_address(pfrag->page))"];
"1000515" [label="(Call,transhdrlen += exthdrlen)"];
"1001322" [label="(Identifier,rt)"];
"1000929" [label="(Call,&sk->sk_wmem_alloc)"];
"1000953" [label="(Identifier,NULL)"];
"1000794" [label="(Call,skb_prev == NULL)"];
"1000955" [label="(Identifier,err)"];
"1001234" [label="(Identifier,copy)"];
"1000844" [label="(Call,rt->dst.trailer_len)"];
"1000876" [label="(ControlStructure,if (datalen != length + fraggap))"];
"1000781" [label="(Call,skb->len)"];
"1001072" [label="(Call,copy > 0)"];
"1001268" [label="(Call,&skb_shinfo(skb)->frags[i - 1])"];
"1001100" [label="(Identifier,datalen)"];
"1001014" [label="(Call,skb->network_header)"];
"1000877" [label="(Call,datalen != length + fraggap)"];
"1000949" [label="(ControlStructure,if (unlikely(skb == NULL)))"];
"1000118" [label="(MethodParameterIn,void *from)"];
"1001233" [label="(Identifier,int)"];
"1001289" [label="(Call,skb->truesize)"];
"1000902" [label="(Call,alloclen += sizeof(struct frag_hdr))"];
"1000632" [label="(Call,mtu-exthdrlen)"];
"1001096" [label="(Identifier,copy)"];
"1000891" [label="(Identifier,alloclen)"];
"1001168" [label="(Identifier,i)"];
"1001025" [label="(Call,skb_copy_and_csum_bits(\n\t\t\t\t\tskb_prev, maxfraglen,\n\t\t\t\t\tdata + transhdrlen, fraggap, 0))"];
"1000606" [label="(ControlStructure,if (mtu <= sizeof(struct ipv6hdr) + IPV6_MAXPLEN))"];
"1000566" [label="(Call,mtu = cork->fragsize)"];
"1000829" [label="(Call,!(cork->flags & IPCORK_ALLFRAG))"];
"1001269" [label="(Call,skb_shinfo(skb)->frags[i - 1])"];
"1001267" [label="(Call,skb_frag_size_add(&skb_shinfo(skb)->frags[i - 1], copy))"];
"1001020" [label="(Block,)"];
"1000951" [label="(Call,skb == NULL)"];
"1001218" [label="(Literal,0)"];
"1001156" [label="(Call,__skb_trim(skb, off))"];
"1001326" [label="(Identifier,err)"];
"1000882" [label="(Block,)"];
"1000765" [label="(ControlStructure,if (copy <= 0))"];
"1000866" [label="(Identifier,mtu)"];
"1001117" [label="(ControlStructure,continue;)"];
"1000818" [label="(ControlStructure,if (datalen > (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - fragheaderlen))"];
"1000518" [label="(Call,dst_exthdrlen = rt->dst.header_len - rt->rt6i_nfheader_len)"];
"1001005" [label="(Identifier,exthdrlen)"];
"1001049" [label="(Identifier,maxfraglen)"];
"1000677" [label="(Identifier,fl6)"];
"1000739" [label="(Call,cork->length)"];
"1001228" [label="(Identifier,pfrag)"];
"1000735" [label="(Call,(cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - skb->len)"];
"1000915" [label="(Identifier,hh_len)"];
"1000512" [label="(Call,length += exthdrlen)"];
"1000730" [label="(Identifier,length)"];
"1001248" [label="(Call,pfrag->page)"];
"1000707" [label="(Identifier,fragheaderlen)"];
"1001028" [label="(Call,data + transhdrlen)"];
"1000967" [label="(ControlStructure,goto error;)"];
"1000759" [label="(Identifier,copy)"];
"1000917" [label="(Identifier,flags)"];
"1001045" [label="(Identifier,data)"];
"1000898" [label="(Identifier,fraglen)"];
"1001050" [label="(Call,copy = datalen - transhdrlen - fraggap)"];
"1000598" [label="(Call,mtu - fragheaderlen)"];
"1000581" [label="(Call,sizeof(struct ipv6hdr) + rt->rt6i_nfheader_len +\n\t\t\t(opt ? opt->opt_nflen : 0))"];
"1000838" [label="(Call,datalen = maxfraglen - fragheaderlen - rt->dst.trailer_len)"];
"1000994" [label="(Call,skb_shinfo(skb))"];
"1000938" [label="(Call,skb = sock_wmalloc(sk,\n\t\t\t\t\t\t\t   alloclen + hh_len, 1,\n\t\t\t\t\t\t\t   sk->sk_allocation))"];
"1001222" [label="(Identifier,skb)"];
"1001176" [label="(Call,sk_page_frag(sk))"];
"1001139" [label="(Identifier,off)"];
"1001079" [label="(Identifier,data)"];
"1000721" [label="(Call,skb_peek_tail(&sk->sk_write_queue))"];
"1001143" [label="(ControlStructure,if (getfrag(from, skb_put(skb, copy),\n\t\t\t\t\t\toffset, copy, off, skb) < 0))"];
"1001207" [label="(Identifier,MAX_SKB_FRAGS)"];
"1001212" [label="(Call,pfrag->page)"];
"1001101" [label="(Identifier,fraggap)"];
"1000698" [label="(Block,)"];
"1001319" [label="(Call,sock_net(sk))"];
"1000779" [label="(Identifier,fraggap)"];
"1000900" [label="(Identifier,datalen)"];
"1001123" [label="(Identifier,copy)"];
"1001051" [label="(Identifier,copy)"];
"1001236" [label="(Call,pfrag->size)"];
"1001290" [label="(Identifier,skb)"];
"1000626" [label="(Identifier,fragheaderlen)"];
"1000879" [label="(Call,length + fraggap)"];
"1000760" [label="(Call,maxfraglen - skb->len)"];
"1000683" [label="(Identifier,EMSGSIZE)"];
"1001244" [label="(Call,getfrag(from,\n\t\t\t\t    page_address(pfrag->page) + pfrag->offset,\n\t\t\t\t    offset, copy, skb->len, skb))"];
"1000996" [label="(FieldIdentifier,tx_flags)"];
"1001062" [label="(Call,err = -EINVAL)"];
"1001243" [label="(Call,getfrag(from,\n\t\t\t\t    page_address(pfrag->page) + pfrag->offset,\n\t\t\t\t    offset, copy, skb->len, skb) < 0)"];
"1000904" [label="(Call,sizeof(struct frag_hdr))"];
"1000584" [label="(Call,rt->rt6i_nfheader_len +\n\t\t\t(opt ? opt->opt_nflen : 0))"];
"1000778" [label="(Call,fraggap = skb->len - maxfraglen)"];
"1001182" [label="(ControlStructure,if (!sk_page_frag_refill(sk, pfrag)))"];
"1001304" [label="(Identifier,copy)"];
"1000676" [label="(Identifier,sk)"];
"1001219" [label="(Call,skb_shinfo(skb)->nr_frags = ++i)"];
"1000875" [label="(Identifier,dst_exthdrlen)"];
"1000884" [label="(Identifier,datalen)"];
"1001034" [label="(Call,skb_prev->csum)"];
"1001262" [label="(Call,pfrag->offset += copy)"];
"1000843" [label="(Identifier,fragheaderlen)"];
"1001111" [label="(Call,__skb_queue_tail(&sk->sk_write_queue, skb))"];
"1001278" [label="(Call,skb->len += copy)"];
"1000767" [label="(Identifier,copy)"];
"1001085" [label="(Literal,0)"];
"1001191" [label="(Identifier,skb)"];
"1000899" [label="(Call,datalen + fragheaderlen)"];
"1000913" [label="(Call,alloclen + hh_len)"];
"1000824" [label="(Call,cork->length <= mtu)"];
"1000768" [label="(Literal,0)"];
"1000909" [label="(Call,skb = sock_alloc_send_skb(sk,\n\t\t\t\t\t\talloclen + hh_len,\n\t\t\t\t\t\t(flags & MSG_DONTWAIT), &err))"];
"1000793" [label="(Identifier,NULL)"];
"1001284" [label="(Call,skb->data_len)"];
"1000705" [label="(Identifier,length)"];
"1001093" [label="(ControlStructure,goto error;)"];
"1000780" [label="(Call,skb->len - maxfraglen)"];
"1001004" [label="(Identifier,skb)"];
"1000648" [label="(Call,cork->length += length)"];
"1000934" [label="(Literal,2)"];
"1000870" [label="(Call,datalen + fragheaderlen)"];
"1000800" [label="(Call,&maxfraglen)"];
"1001266" [label="(Identifier,copy)"];
"1000599" [label="(Identifier,mtu)"];
"1001144" [label="(Call,getfrag(from, skb_put(skb, copy),\n\t\t\t\t\t\toffset, copy, off, skb) < 0)"];
"1001094" [label="(Call,offset += copy)"];
"1000873" [label="(Call,alloclen += dst_exthdrlen)"];
"1001032" [label="(Literal,0)"];
"1000679" [label="(Identifier,mtu)"];
"1001097" [label="(Call,length -= datalen - fraggap)"];
"1000944" [label="(Identifier,hh_len)"];
"1001239" [label="(Call,pfrag->offset)"];
"1000867" [label="(ControlStructure,else)"];
"1000842" [label="(Call,fragheaderlen - rt->dst.trailer_len)"];
"1000820" [label="(Identifier,datalen)"];
"1000656" [label="(Identifier,mtu)"];
"1000813" [label="(Call,datalen = length + fraggap)"];
"1001165" [label="(Block,)"];
"1001227" [label="(Call,pfrag->page)"];
"1000798" [label="(Call,&mtu)"];
"1000713" [label="(Identifier,err)"];
"1000837" [label="(Identifier,fragheaderlen)"];
"1000919" [label="(Call,&err)"];
"1001056" [label="(Identifier,fraggap)"];
"1001017" [label="(Identifier,fragheaderlen)"];
"1001273" [label="(FieldIdentifier,frags)"];
"1000710" [label="(Identifier,flags)"];
"1000931" [label="(Identifier,sk)"];
"1001252" [label="(Identifier,pfrag)"];
"1000970" [label="(Identifier,skb)"];
"1001280" [label="(Identifier,skb)"];
"1000814" [label="(Identifier,datalen)"];
"1001070" [label="(ControlStructure,if (copy > 0 && getfrag(from, data + transhdrlen, offset, copy, fraggap, skb) < 0))"];
"1000736" [label="(Call,cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen)"];
"1001199" [label="(Block,)"];
"1001067" [label="(Identifier,skb)"];
"1001183" [label="(Call,!sk_page_frag_refill(sk, pfrag))"];
"1001136" [label="(Block,)"];
"1000615" [label="(Call,cork->length + length > sizeof(struct ipv6hdr) + IPV6_MAXPLEN - fragheaderlen)"];
"1000742" [label="(Identifier,mtu)"];
"1001022" [label="(Call,skb->csum)"];
"1000852" [label="(Identifier,flags)"];
"1001200" [label="(Call,err = -EMSGSIZE)"];
"1001245" [label="(Identifier,from)"];
"1001003" [label="(Call,skb_set_network_header(skb, exthdrlen))"];
"1001275" [label="(Identifier,i)"];
"1001224" [label="(Call,++i)"];
"1000939" [label="(Identifier,skb)"];
"1000588" [label="(Call,opt ? opt->opt_nflen : 0)"];
"1001285" [label="(Identifier,skb)"];
"1000720" [label="(Identifier,skb)"];
"1001186" [label="(Identifier,pfrag)"];
"1000849" [label="(ControlStructure,if ((flags & MSG_MORE) &&\n\t\t\t    !(rt->dst.dev->features&NETIF_F_SG)))"];
"1000734" [label="(Identifier,copy)"];
"1001159" [label="(Call,err = -EFAULT)"];
"1000999" [label="(Identifier,data)"];
"1000557" [label="(Call,transhdrlen = 0)"];
"1000128" [label="(Block,)"];
"1001119" [label="(Call,copy > length)"];
"1001088" [label="(Identifier,err)"];
"1000762" [label="(Call,skb->len)"];
"1001083" [label="(Identifier,fraggap)"];
"1001226" [label="(Call,get_page(pfrag->page))"];
"1000579" [label="(Call,fragheaderlen = sizeof(struct ipv6hdr) + rt->rt6i_nfheader_len +\n\t\t\t(opt ? opt->opt_nflen : 0))"];
"1000885" [label="(Call,rt->dst.trailer_len)"];
"1000872" [label="(Identifier,fragheaderlen)"];
"1001076" [label="(Call,getfrag(from, data + transhdrlen, offset, copy, fraggap, skb))"];
"1001154" [label="(Literal,0)"];
"1000789" [label="(ControlStructure,if (skb == NULL || skb_prev == NULL))"];
"1000878" [label="(Identifier,datalen)"];
"1001300" [label="(Identifier,offset)"];
"1001080" [label="(Identifier,transhdrlen)"];
"1001010" [label="(Call,skb->transport_header)"];
"1000654" [label="(Call,length > mtu)"];
"1001060" [label="(Literal,0)"];
"1000978" [label="(Call,skb_reserve(skb, hh_len + sizeof(struct frag_hdr) +\n\t\t\t\t    dst_exthdrlen))"];
"1000116" [label="(MethodParameterIn,struct sock *sk)"];
"1001201" [label="(Identifier,err)"];
"1000942" [label="(Call,alloclen + hh_len)"];
"1001320" [label="(Identifier,sk)"];
"1000802" [label="(Identifier,fragheaderlen)"];
"1001118" [label="(ControlStructure,if (copy > length))"];
"1001131" [label="(Identifier,rt)"];
"1000154" [label="(Call,offset = 0)"];
"1001152" [label="(Identifier,off)"];
"1001246" [label="(Call,page_address(pfrag->page) + pfrag->offset)"];
"1001292" [label="(Identifier,copy)"];
"1000704" [label="(Identifier,from)"];
"1000952" [label="(Identifier,skb)"];
"1000945" [label="(Literal,1)"];
"1000871" [label="(Identifier,datalen)"];
"1000504" [label="(Call,exthdrlen = (opt ? opt->opt_flen : 0))"];
"1001235" [label="(Call,pfrag->size - pfrag->offset)"];
"1001206" [label="(Identifier,i)"];
"1001063" [label="(Identifier,err)"];
"1001084" [label="(Identifier,skb)"];
"1000749" [label="(Identifier,mtu)"];
"1000868" [label="(Call,alloclen = datalen + fragheaderlen)"];
"1001172" [label="(FieldIdentifier,nr_frags)"];
"1000641" [label="(Identifier,sk)"];
"1000608" [label="(Identifier,mtu)"];
"1001205" [label="(Call,i == MAX_SKB_FRAGS)"];
"1001001" [label="(Identifier,skb)"];
"1001081" [label="(Identifier,offset)"];
"1001259" [label="(Identifier,skb)"];
"1001037" [label="(Call,csum_sub(skb_prev->csum,\n\t\t\t\t\t\t\t  skb->csum))"];
"1001282" [label="(Identifier,copy)"];
"1001031" [label="(Identifier,fraggap)"];
"1000706" [label="(Identifier,hh_len)"];
"1000761" [label="(Identifier,maxfraglen)"];
"1000841" [label="(Identifier,maxfraglen)"];
"1000595" [label="(Identifier,maxfraglen)"];
"1000963" [label="(ControlStructure,if (skb == NULL))"];
"1001077" [label="(Identifier,from)"];
"1000560" [label="(Call,exthdrlen = 0)"];
"1000674" [label="(Block,)"];
"1001277" [label="(Identifier,copy)"];
"1001068" [label="(ControlStructure,goto error;)"];
"1000609" [label="(Call,sizeof(struct ipv6hdr) + IPV6_MAXPLEN)"];
"1000678" [label="(Call,mtu-exthdrlen)"];
"1000737" [label="(Call,cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG))"];
"1000699" [label="(Call,err = ip6_ufo_append_data(sk, getfrag, from, length,\n\t\t\t\t\t\t  hh_len, fragheaderlen,\n\t\t\t\t\t\t  transhdrlen, mtu, flags, rt))"];
"1000954" [label="(Call,err = -ENOBUFS)"];
"1000531" [label="(Call,rt = (struct rt6_info *)cork->dst)"];
"1000625" [label="(Identifier,IPV6_MAXPLEN)"];
"1000711" [label="(Identifier,rt)"];
"1000946" [label="(Call,sk->sk_allocation)"];
"1000117" [label="(MethodParameterIn,int getfrag(void *from, char *to,\n\tint offset, int len, int odd, struct sk_buff *skb))"];
"1001002" [label="(Identifier,fraglen)"];
"1001324" [label="(Identifier,IPSTATS_MIB_OUTDISCARDS)"];
"1001058" [label="(Call,copy < 0)"];
"1001074" [label="(Literal,0)"];
"1001009" [label="(Call,skb->transport_header = (skb->network_header +\n\t\t\t\t\t\t fragheaderlen))"];
"1000580" [label="(Identifier,fragheaderlen)"];
"1001193" [label="(Call,pfrag->page)"];
"1001029" [label="(Identifier,data)"];
"1000865" [label="(Identifier,alloclen)"];
"1001140" [label="(Call,skb->len)"];
"1000750" [label="(Identifier,maxfraglen)"];
"1001167" [label="(Call,i = skb_shinfo(skb)->nr_frags)"];
"1001026" [label="(Identifier,skb_prev)"];
"1000631" [label="(Identifier,fl6)"];
"1000892" [label="(Call,rt->dst.trailer_len)"];
"1001211" [label="(Identifier,i)"];
"1000636" [label="(Call,-EMSGSIZE)"];
"1001171" [label="(Identifier,skb)"];
"1000499" [label="(Call,cork->length = 0)"];
"1000607" [label="(Call,mtu <= sizeof(struct ipv6hdr) + IPV6_MAXPLEN)"];
"1000700" [label="(Identifier,err)"];
"1000708" [label="(Identifier,transhdrlen)"];
"1000616" [label="(Call,cork->length + length)"];
"1000718" [label="(Call,(skb = skb_peek_tail(&sk->sk_write_queue)) == NULL)"];
"1001325" [label="(Return,return err;)"];
"1000916" [label="(Call,flags & MSG_DONTWAIT)"];
"1000816" [label="(Identifier,length)"];
"1000635" [label="(Return,return -EMSGSIZE;)"];
"1001187" [label="(ControlStructure,goto error;)"];
"1000680" [label="(Identifier,exthdrlen)"];
"1000822" [label="(Call,cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen)"];
"1000839" [label="(Identifier,datalen)"];
"1000914" [label="(Identifier,alloclen)"];
"1001174" [label="(Call,*pfrag = sk_page_frag(sk))"];
"1001120" [label="(Identifier,copy)"];
"1001287" [label="(Identifier,copy)"];
"1001209" [label="(Call,__skb_fill_page_desc(skb, i, pfrag->page,\n\t\t\t\t\t\t     pfrag->offset, 0))"];
"1000998" [label="(Call,data = skb_put(skb, fraglen))"];
"1000579" -> "1000128"  [label="AST: "];
"1000579" -> "1000581"  [label="CFG: "];
"1000580" -> "1000579"  [label="AST: "];
"1000581" -> "1000579"  [label="AST: "];
"1000595" -> "1000579"  [label="CFG: "];
"1000579" -> "1001327"  [label="DDG: sizeof(struct ipv6hdr) + rt->rt6i_nfheader_len +\n\t\t\t(opt ? opt->opt_nflen : 0)"];
"1000520" -> "1000579"  [label="DDG: rt->rt6i_nfheader_len"];
"1000123" -> "1000579"  [label="DDG: opt"];
"1000579" -> "1000598"  [label="DDG: fragheaderlen"];
"1000520" -> "1000518"  [label="AST: "];
"1000520" -> "1000526"  [label="CFG: "];
"1000521" -> "1000520"  [label="AST: "];
"1000526" -> "1000520"  [label="AST: "];
"1000518" -> "1000520"  [label="CFG: "];
"1000520" -> "1001327"  [label="DDG: rt->dst.header_len"];
"1000520" -> "1000518"  [label="DDG: rt->dst.header_len"];
"1000520" -> "1000518"  [label="DDG: rt->rt6i_nfheader_len"];
"1000520" -> "1000581"  [label="DDG: rt->rt6i_nfheader_len"];
"1000520" -> "1000584"  [label="DDG: rt->rt6i_nfheader_len"];
"1000123" -> "1000115"  [label="AST: "];
"1000123" -> "1001327"  [label="DDG: opt"];
"1000123" -> "1000504"  [label="DDG: opt"];
"1000123" -> "1000506"  [label="DDG: opt"];
"1000123" -> "1000550"  [label="DDG: opt"];
"1000123" -> "1000581"  [label="DDG: opt"];
"1000123" -> "1000584"  [label="DDG: opt"];
"1000123" -> "1000588"  [label="DDG: opt"];
"1000598" -> "1000597"  [label="AST: "];
"1000598" -> "1000600"  [label="CFG: "];
"1000599" -> "1000598"  [label="AST: "];
"1000600" -> "1000598"  [label="AST: "];
"1000601" -> "1000598"  [label="CFG: "];
"1000598" -> "1000597"  [label="DDG: mtu"];
"1000598" -> "1000597"  [label="DDG: fragheaderlen"];
"1000566" -> "1000598"  [label="DDG: mtu"];
"1000467" -> "1000598"  [label="DDG: mtu"];
"1000477" -> "1000598"  [label="DDG: mtu"];
"1000598" -> "1000602"  [label="DDG: fragheaderlen"];
"1000598" -> "1000607"  [label="DDG: mtu"];
"1000597" -> "1000596"  [label="AST: "];
"1000597" -> "1000601"  [label="CFG: "];
"1000601" -> "1000597"  [label="AST: "];
"1000603" -> "1000597"  [label="CFG: "];
"1000597" -> "1001327"  [label="DDG: mtu - fragheaderlen"];
"1000597" -> "1001327"  [label="DDG: ~7"];
"1000597" -> "1000594"  [label="DDG: mtu - fragheaderlen"];
"1000597" -> "1000594"  [label="DDG: ~7"];
"1000597" -> "1000596"  [label="DDG: mtu - fragheaderlen"];
"1000597" -> "1000596"  [label="DDG: ~7"];
"1000594" -> "1000128"  [label="AST: "];
"1000594" -> "1000596"  [label="CFG: "];
"1000595" -> "1000594"  [label="AST: "];
"1000596" -> "1000594"  [label="AST: "];
"1000608" -> "1000594"  [label="CFG: "];
"1000594" -> "1001327"  [label="DDG: maxfraglen"];
"1000594" -> "1001327"  [label="DDG: ((mtu - fragheaderlen) & ~7) + fragheaderlen - sizeof(struct frag_hdr)"];
"1000602" -> "1000594"  [label="DDG: fragheaderlen"];
"1000594" -> "1000735"  [label="DDG: maxfraglen"];
"1000594" -> "1000736"  [label="DDG: maxfraglen"];
"1000594" -> "1000760"  [label="DDG: maxfraglen"];
"1000594" -> "1000780"  [label="DDG: maxfraglen"];
"1000594" -> "1000821"  [label="DDG: maxfraglen"];
"1000594" -> "1000822"  [label="DDG: maxfraglen"];
"1000594" -> "1000840"  [label="DDG: maxfraglen"];
"1000594" -> "1001025"  [label="DDG: maxfraglen"];
"1000735" -> "1000733"  [label="AST: "];
"1000735" -> "1000751"  [label="CFG: "];
"1000736" -> "1000735"  [label="AST: "];
"1000751" -> "1000735"  [label="AST: "];
"1000733" -> "1000735"  [label="CFG: "];
"1000735" -> "1001327"  [label="DDG: skb->len"];
"1000735" -> "1001327"  [label="DDG: cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen"];
"1000735" -> "1000733"  [label="DDG: cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen"];
"1000735" -> "1000733"  [label="DDG: skb->len"];
"1000738" -> "1000735"  [label="DDG: mtu"];
"1001047" -> "1000735"  [label="DDG: maxfraglen"];
"1000760" -> "1000735"  [label="DDG: maxfraglen"];
"1000760" -> "1000735"  [label="DDG: skb->len"];
"1000840" -> "1000735"  [label="DDG: maxfraglen"];
"1000780" -> "1000735"  [label="DDG: maxfraglen"];
"1000780" -> "1000735"  [label="DDG: skb->len"];
"1001278" -> "1000735"  [label="DDG: skb->len"];
"1000735" -> "1000760"  [label="DDG: skb->len"];
"1000735" -> "1000780"  [label="DDG: skb->len"];
"1000735" -> "1001138"  [label="DDG: skb->len"];
"1000735" -> "1001244"  [label="DDG: skb->len"];
"1000733" -> "1000732"  [label="AST: "];
"1000734" -> "1000733"  [label="AST: "];
"1000756" -> "1000733"  [label="CFG: "];
"1000733" -> "1001327"  [label="DDG: (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - skb->len"];
"1000733" -> "1000755"  [label="DDG: copy"];
"1000755" -> "1000754"  [label="AST: "];
"1000755" -> "1000757"  [label="CFG: "];
"1000756" -> "1000755"  [label="AST: "];
"1000757" -> "1000755"  [label="AST: "];
"1000759" -> "1000755"  [label="CFG: "];
"1000767" -> "1000755"  [label="CFG: "];
"1000755" -> "1001327"  [label="DDG: copy < length"];
"1000729" -> "1000755"  [label="DDG: length"];
"1000119" -> "1000755"  [label="DDG: length"];
"1000755" -> "1000766"  [label="DDG: copy"];
"1000755" -> "1000813"  [label="DDG: length"];
"1000755" -> "1000815"  [label="DDG: length"];
"1000755" -> "1000877"  [label="DDG: length"];
"1000755" -> "1000879"  [label="DDG: length"];
"1000755" -> "1001097"  [label="DDG: length"];
"1000755" -> "1001119"  [label="DDG: length"];
"1000755" -> "1001313"  [label="DDG: length"];
"1000766" -> "1000765"  [label="AST: "];
"1000766" -> "1000768"  [label="CFG: "];
"1000767" -> "1000766"  [label="AST: "];
"1000768" -> "1000766"  [label="AST: "];
"1000775" -> "1000766"  [label="CFG: "];
"1001120" -> "1000766"  [label="CFG: "];
"1000766" -> "1001327"  [label="DDG: copy"];
"1000766" -> "1001327"  [label="DDG: copy <= 0"];
"1000758" -> "1000766"  [label="DDG: copy"];
"1000766" -> "1001119"  [label="DDG: copy"];
"1001119" -> "1001118"  [label="AST: "];
"1001119" -> "1001121"  [label="CFG: "];
"1001120" -> "1001119"  [label="AST: "];
"1001121" -> "1001119"  [label="AST: "];
"1001123" -> "1001119"  [label="CFG: "];
"1001131" -> "1001119"  [label="CFG: "];
"1001119" -> "1001327"  [label="DDG: copy > length"];
"1001119" -> "1001327"  [label="DDG: copy"];
"1000119" -> "1001119"  [label="DDG: length"];
"1001119" -> "1001122"  [label="DDG: length"];
"1001119" -> "1001147"  [label="DDG: copy"];
"1001119" -> "1001232"  [label="DDG: copy"];
"1001119" -> "1001302"  [label="DDG: length"];
"1001119" -> "1001313"  [label="DDG: length"];
"1001122" -> "1001118"  [label="AST: "];
"1001122" -> "1001124"  [label="CFG: "];
"1001123" -> "1001122"  [label="AST: "];
"1001124" -> "1001122"  [label="AST: "];
"1001131" -> "1001122"  [label="CFG: "];
"1001122" -> "1001327"  [label="DDG: copy"];
"1000119" -> "1001122"  [label="DDG: length"];
"1001122" -> "1001147"  [label="DDG: copy"];
"1001122" -> "1001232"  [label="DDG: copy"];
"1001147" -> "1001145"  [label="AST: "];
"1001147" -> "1001149"  [label="CFG: "];
"1001148" -> "1001147"  [label="AST: "];
"1001149" -> "1001147"  [label="AST: "];
"1001150" -> "1001147"  [label="CFG: "];
"1001147" -> "1001145"  [label="DDG: skb"];
"1001147" -> "1001145"  [label="DDG: copy"];
"1001271" -> "1001147"  [label="DDG: skb"];
"1001111" -> "1001147"  [label="DDG: skb"];
"1000719" -> "1001147"  [label="DDG: skb"];
"1001145" -> "1001147"  [label="DDG: skb"];
"1001145" -> "1001144"  [label="AST: "];
"1001145" -> "1001153"  [label="CFG: "];
"1001146" -> "1001145"  [label="AST: "];
"1001150" -> "1001145"  [label="AST: "];
"1001151" -> "1001145"  [label="AST: "];
"1001152" -> "1001145"  [label="AST: "];
"1001153" -> "1001145"  [label="AST: "];
"1001154" -> "1001145"  [label="CFG: "];
"1001145" -> "1001327"  [label="DDG: copy"];
"1001145" -> "1001327"  [label="DDG: from"];
"1001145" -> "1001327"  [label="DDG: offset"];
"1001145" -> "1001327"  [label="DDG: off"];
"1001145" -> "1001327"  [label="DDG: skb"];
"1001145" -> "1001327"  [label="DDG: skb_put(skb, copy)"];
"1001145" -> "1000791"  [label="DDG: skb"];
"1001145" -> "1001076"  [label="DDG: from"];
"1001145" -> "1001144"  [label="DDG: off"];
"1001145" -> "1001144"  [label="DDG: skb"];
"1001145" -> "1001144"  [label="DDG: copy"];
"1001145" -> "1001144"  [label="DDG: from"];
"1001145" -> "1001144"  [label="DDG: skb_put(skb, copy)"];
"1001145" -> "1001144"  [label="DDG: offset"];
"1001244" -> "1001145"  [label="DDG: from"];
"1001076" -> "1001145"  [label="DDG: from"];
"1000118" -> "1001145"  [label="DDG: from"];
"1000154" -> "1001145"  [label="DDG: offset"];
"1001299" -> "1001145"  [label="DDG: offset"];
"1001094" -> "1001145"  [label="DDG: offset"];
"1001138" -> "1001145"  [label="DDG: off"];
"1001145" -> "1001156"  [label="DDG: skb"];
"1001145" -> "1001156"  [label="DDG: off"];
"1001145" -> "1001170"  [label="DDG: skb"];
"1001145" -> "1001244"  [label="DDG: from"];
"1001145" -> "1001299"  [label="DDG: copy"];
"1001145" -> "1001299"  [label="DDG: offset"];
"1001145" -> "1001302"  [label="DDG: copy"];
"1000791" -> "1000790"  [label="AST: "];
"1000791" -> "1000793"  [label="CFG: "];
"1000792" -> "1000791"  [label="AST: "];
"1000793" -> "1000791"  [label="AST: "];
"1000795" -> "1000791"  [label="CFG: "];
"1000790" -> "1000791"  [label="CFG: "];
"1000791" -> "1000790"  [label="DDG: skb"];
"1000791" -> "1000790"  [label="DDG: NULL"];
"1001271" -> "1000791"  [label="DDG: skb"];
"1001111" -> "1000791"  [label="DDG: skb"];
"1000719" -> "1000791"  [label="DDG: skb"];
"1000964" -> "1000791"  [label="DDG: NULL"];
"1000718" -> "1000791"  [label="DDG: NULL"];
"1000791" -> "1000794"  [label="DDG: NULL"];
"1000791" -> "1000797"  [label="DDG: skb"];
"1000791" -> "1000810"  [label="DDG: skb"];
"1000791" -> "1000923"  [label="DDG: NULL"];
"1000791" -> "1000951"  [label="DDG: NULL"];
"1000791" -> "1000964"  [label="DDG: NULL"];
"1000790" -> "1000789"  [label="AST: "];
"1000790" -> "1000794"  [label="CFG: "];
"1000794" -> "1000790"  [label="AST: "];
"1000799" -> "1000790"  [label="CFG: "];
"1000811" -> "1000790"  [label="CFG: "];
"1000790" -> "1001327"  [label="DDG: skb == NULL || skb_prev == NULL"];
"1000790" -> "1001327"  [label="DDG: skb_prev == NULL"];
"1000794" -> "1000790"  [label="DDG: skb_prev"];
"1000794" -> "1000790"  [label="DDG: NULL"];
"1000794" -> "1000796"  [label="CFG: "];
"1000795" -> "1000794"  [label="AST: "];
"1000796" -> "1000794"  [label="AST: "];
"1001047" -> "1000794"  [label="DDG: skb_prev"];
"1000810" -> "1000794"  [label="DDG: skb_prev"];
"1000142" -> "1000794"  [label="DDG: skb_prev"];
"1000794" -> "1000923"  [label="DDG: NULL"];
"1000794" -> "1000951"  [label="DDG: NULL"];
"1000794" -> "1000964"  [label="DDG: NULL"];
"1000923" -> "1000922"  [label="AST: "];
"1000923" -> "1000925"  [label="CFG: "];
"1000924" -> "1000923"  [label="AST: "];
"1000925" -> "1000923"  [label="AST: "];
"1000931" -> "1000923"  [label="CFG: "];
"1000923" -> "1000951"  [label="DDG: skb"];
"1000951" -> "1000950"  [label="AST: "];
"1000951" -> "1000953"  [label="CFG: "];
"1000952" -> "1000951"  [label="AST: "];
"1000953" -> "1000951"  [label="AST: "];
"1000950" -> "1000951"  [label="CFG: "];
"1000951" -> "1000950"  [label="DDG: skb"];
"1000951" -> "1000950"  [label="DDG: NULL"];
"1000938" -> "1000951"  [label="DDG: skb"];
"1000951" -> "1000964"  [label="DDG: skb"];
"1000951" -> "1000964"  [label="DDG: NULL"];
"1000950" -> "1000949"  [label="AST: "];
"1000955" -> "1000950"  [label="CFG: "];
"1000961" -> "1000950"  [label="CFG: "];
"1000950" -> "1001327"  [label="DDG: unlikely(skb == NULL)"];
"1000964" -> "1000963"  [label="AST: "];
"1000964" -> "1000966"  [label="CFG: "];
"1000965" -> "1000964"  [label="AST: "];
"1000966" -> "1000964"  [label="AST: "];
"1000967" -> "1000964"  [label="CFG: "];
"1000970" -> "1000964"  [label="CFG: "];
"1000964" -> "1001327"  [label="DDG: skb"];
"1000964" -> "1001327"  [label="DDG: skb == NULL"];
"1000964" -> "1001327"  [label="DDG: NULL"];
"1000909" -> "1000964"  [label="DDG: skb"];
"1000964" -> "1000978"  [label="DDG: skb"];
"1000978" -> "1000769"  [label="AST: "];
"1000978" -> "1000980"  [label="CFG: "];
"1000979" -> "1000978"  [label="AST: "];
"1000980" -> "1000978"  [label="AST: "];
"1000989" -> "1000978"  [label="CFG: "];
"1000978" -> "1001327"  [label="DDG: hh_len + sizeof(struct frag_hdr) +\n\t\t\t\t    dst_exthdrlen"];
"1000978" -> "1001327"  [label="DDG: skb_reserve(skb, hh_len + sizeof(struct frag_hdr) +\n\t\t\t\t    dst_exthdrlen)"];
"1000571" -> "1000978"  [label="DDG: hh_len"];
"1001108" -> "1000978"  [label="DDG: dst_exthdrlen"];
"1000518" -> "1000978"  [label="DDG: dst_exthdrlen"];
"1000563" -> "1000978"  [label="DDG: dst_exthdrlen"];
"1000978" -> "1000994"  [label="DDG: skb"];
"1000978" -> "1001000"  [label="DDG: skb"];
"1000994" -> "1000993"  [label="AST: "];
"1000994" -> "1000995"  [label="CFG: "];
"1000995" -> "1000994"  [label="AST: "];
"1000996" -> "1000994"  [label="CFG: "];
"1000994" -> "1001000"  [label="DDG: skb"];
"1001000" -> "1000998"  [label="AST: "];
"1001000" -> "1001002"  [label="CFG: "];
"1001001" -> "1001000"  [label="AST: "];
"1001002" -> "1001000"  [label="AST: "];
"1000998" -> "1001000"  [label="CFG: "];
"1001000" -> "1001327"  [label="DDG: fraglen"];
"1001000" -> "1000998"  [label="DDG: skb"];
"1001000" -> "1000998"  [label="DDG: fraglen"];
"1000897" -> "1001000"  [label="DDG: fraglen"];
"1001000" -> "1001003"  [label="DDG: skb"];
"1000998" -> "1000769"  [label="AST: "];
"1000999" -> "1000998"  [label="AST: "];
"1001004" -> "1000998"  [label="CFG: "];
"1000998" -> "1001327"  [label="DDG: skb_put(skb, fraglen)"];
"1000998" -> "1001006"  [label="DDG: data"];
"1001006" -> "1000769"  [label="AST: "];
"1001006" -> "1001008"  [label="CFG: "];
"1001007" -> "1001006"  [label="AST: "];
"1001008" -> "1001006"  [label="AST: "];
"1001011" -> "1001006"  [label="CFG: "];
"1001006" -> "1001327"  [label="DDG: data"];
"1000842" -> "1001006"  [label="DDG: fragheaderlen"];
"1000821" -> "1001006"  [label="DDG: fragheaderlen"];
"1001006" -> "1001025"  [label="DDG: data"];
"1001006" -> "1001028"  [label="DDG: data"];
"1001006" -> "1001044"  [label="DDG: data"];
"1001006" -> "1001076"  [label="DDG: data"];
"1001006" -> "1001078"  [label="DDG: data"];
"1001025" -> "1001021"  [label="AST: "];
"1001025" -> "1001032"  [label="CFG: "];
"1001026" -> "1001025"  [label="AST: "];
"1001027" -> "1001025"  [label="AST: "];
"1001028" -> "1001025"  [label="AST: "];
"1001031" -> "1001025"  [label="AST: "];
"1001032" -> "1001025"  [label="AST: "];
"1001021" -> "1001025"  [label="CFG: "];
"1001025" -> "1001327"  [label="DDG: data + transhdrlen"];
"1001025" -> "1001021"  [label="DDG: 0"];
"1001025" -> "1001021"  [label="DDG: maxfraglen"];
"1001025" -> "1001021"  [label="DDG: fraggap"];
"1001025" -> "1001021"  [label="DDG: skb_prev"];
"1001025" -> "1001021"  [label="DDG: data + transhdrlen"];
"1000810" -> "1001025"  [label="DDG: skb_prev"];
"1000840" -> "1001025"  [label="DDG: maxfraglen"];
"1000780" -> "1001025"  [label="DDG: maxfraglen"];
"1000760" -> "1001025"  [label="DDG: maxfraglen"];
"1001102" -> "1001025"  [label="DDG: transhdrlen"];
"1000515" -> "1001025"  [label="DDG: transhdrlen"];
"1000557" -> "1001025"  [label="DDG: transhdrlen"];
"1000120" -> "1001025"  [label="DDG: transhdrlen"];
"1000786" -> "1001025"  [label="DDG: fraggap"];
"1000778" -> "1001025"  [label="DDG: fraggap"];
"1001025" -> "1001044"  [label="DDG: fraggap"];
"1001025" -> "1001047"  [label="DDG: skb_prev"];
"1001025" -> "1001047"  [label="DDG: maxfraglen"];
"1001025" -> "1001054"  [label="DDG: fraggap"];
"1001021" -> "1001020"  [label="AST: "];
"1001022" -> "1001021"  [label="AST: "];
"1001035" -> "1001021"  [label="CFG: "];
"1001021" -> "1001327"  [label="DDG: skb_copy_and_csum_bits(\n\t\t\t\t\tskb_prev, maxfraglen,\n\t\t\t\t\tdata + transhdrlen, fraggap, 0)"];
"1001021" -> "1001037"  [label="DDG: skb->csum"];
"1001037" -> "1001033"  [label="AST: "];
"1001037" -> "1001041"  [label="CFG: "];
"1001038" -> "1001037"  [label="AST: "];
"1001041" -> "1001037"  [label="AST: "];
"1001033" -> "1001037"  [label="CFG: "];
"1001037" -> "1001327"  [label="DDG: skb->csum"];
"1001037" -> "1001033"  [label="DDG: skb_prev->csum"];
"1001037" -> "1001033"  [label="DDG: skb->csum"];
"1001033" -> "1001037"  [label="DDG: skb_prev->csum"];
"1001033" -> "1001020"  [label="AST: "];
"1001034" -> "1001033"  [label="AST: "];
"1001045" -> "1001033"  [label="CFG: "];
"1001033" -> "1001327"  [label="DDG: csum_sub(skb_prev->csum,\n\t\t\t\t\t\t\t  skb->csum)"];
"1001033" -> "1001327"  [label="DDG: skb_prev->csum"];
"1001044" -> "1001020"  [label="AST: "];
"1001044" -> "1001046"  [label="CFG: "];
"1001045" -> "1001044"  [label="AST: "];
"1001046" -> "1001044"  [label="AST: "];
"1001048" -> "1001044"  [label="CFG: "];
"1001044" -> "1001327"  [label="DDG: data"];
"1001044" -> "1001076"  [label="DDG: data"];
"1001044" -> "1001078"  [label="DDG: data"];
"1001076" -> "1001075"  [label="AST: "];
"1001076" -> "1001084"  [label="CFG: "];
"1001077" -> "1001076"  [label="AST: "];
"1001078" -> "1001076"  [label="AST: "];
"1001081" -> "1001076"  [label="AST: "];
"1001082" -> "1001076"  [label="AST: "];
"1001083" -> "1001076"  [label="AST: "];
"1001084" -> "1001076"  [label="AST: "];
"1001085" -> "1001076"  [label="CFG: "];
"1001076" -> "1001327"  [label="DDG: data + transhdrlen"];
"1001076" -> "1001327"  [label="DDG: from"];
"1001076" -> "1001327"  [label="DDG: offset"];
"1001076" -> "1001327"  [label="DDG: fraggap"];
"1001076" -> "1001327"  [label="DDG: copy"];
"1001076" -> "1001075"  [label="DDG: offset"];
"1001076" -> "1001075"  [label="DDG: copy"];
"1001076" -> "1001075"  [label="DDG: skb"];
"1001076" -> "1001075"  [label="DDG: data + transhdrlen"];
"1001076" -> "1001075"  [label="DDG: from"];
"1001076" -> "1001075"  [label="DDG: fraggap"];
"1001244" -> "1001076"  [label="DDG: from"];
"1000118" -> "1001076"  [label="DDG: from"];
"1001054" -> "1001076"  [label="DDG: transhdrlen"];
"1001054" -> "1001076"  [label="DDG: fraggap"];
"1000120" -> "1001076"  [label="DDG: transhdrlen"];
"1000154" -> "1001076"  [label="DDG: offset"];
"1001299" -> "1001076"  [label="DDG: offset"];
"1001094" -> "1001076"  [label="DDG: offset"];
"1001072" -> "1001076"  [label="DDG: copy"];
"1001003" -> "1001076"  [label="DDG: skb"];
"1001076" -> "1001091"  [label="DDG: skb"];
"1001076" -> "1001094"  [label="DDG: copy"];
"1001076" -> "1001094"  [label="DDG: offset"];
"1001076" -> "1001099"  [label="DDG: fraggap"];
"1001076" -> "1001111"  [label="DDG: skb"];
"1001076" -> "1001244"  [label="DDG: from"];
"1001075" -> "1001071"  [label="AST: "];
"1001075" -> "1001085"  [label="CFG: "];
"1001085" -> "1001075"  [label="AST: "];
"1001071" -> "1001075"  [label="CFG: "];
"1001075" -> "1001327"  [label="DDG: getfrag(from, data + transhdrlen, offset, copy, fraggap, skb)"];
"1001075" -> "1001071"  [label="DDG: getfrag(from, data + transhdrlen, offset, copy, fraggap, skb)"];
"1001075" -> "1001071"  [label="DDG: 0"];
"1001071" -> "1001070"  [label="AST: "];
"1001071" -> "1001072"  [label="CFG: "];
"1001072" -> "1001071"  [label="AST: "];
"1001088" -> "1001071"  [label="CFG: "];
"1001095" -> "1001071"  [label="CFG: "];
"1001071" -> "1001327"  [label="DDG: getfrag(from, data + transhdrlen, offset, copy, fraggap, skb) < 0"];
"1001071" -> "1001327"  [label="DDG: copy > 0"];
"1001071" -> "1001327"  [label="DDG: copy > 0 && getfrag(from, data + transhdrlen, offset, copy, fraggap, skb) < 0"];
"1001072" -> "1001071"  [label="DDG: copy"];
"1001072" -> "1001071"  [label="DDG: 0"];
"1001091" -> "1001086"  [label="AST: "];
"1001091" -> "1001092"  [label="CFG: "];
"1001092" -> "1001091"  [label="AST: "];
"1001093" -> "1001091"  [label="CFG: "];
"1001091" -> "1001327"  [label="DDG: kfree_skb(skb)"];
"1001091" -> "1001327"  [label="DDG: skb"];
"1001003" -> "1001091"  [label="DDG: skb"];
"1001094" -> "1000769"  [label="AST: "];
"1001094" -> "1001096"  [label="CFG: "];
"1001095" -> "1001094"  [label="AST: "];
"1001096" -> "1001094"  [label="AST: "];
"1001098" -> "1001094"  [label="CFG: "];
"1001094" -> "1001327"  [label="DDG: copy"];
"1001094" -> "1001327"  [label="DDG: offset"];
"1001072" -> "1001094"  [label="DDG: copy"];
"1000154" -> "1001094"  [label="DDG: offset"];
"1001299" -> "1001094"  [label="DDG: offset"];
"1001094" -> "1001244"  [label="DDG: offset"];
"1001244" -> "1001243"  [label="AST: "];
"1001244" -> "1001259"  [label="CFG: "];
"1001245" -> "1001244"  [label="AST: "];
"1001246" -> "1001244"  [label="AST: "];
"1001254" -> "1001244"  [label="AST: "];
"1001255" -> "1001244"  [label="AST: "];
"1001256" -> "1001244"  [label="AST: "];
"1001259" -> "1001244"  [label="AST: "];
"1001260" -> "1001244"  [label="CFG: "];
"1001244" -> "1001327"  [label="DDG: offset"];
"1001244" -> "1001327"  [label="DDG: copy"];
"1001244" -> "1001327"  [label="DDG: skb->len"];
"1001244" -> "1001327"  [label="DDG: page_address(pfrag->page) + pfrag->offset"];
"1001244" -> "1001327"  [label="DDG: skb"];
"1001244" -> "1001327"  [label="DDG: from"];
"1001244" -> "1001243"  [label="DDG: copy"];
"1001244" -> "1001243"  [label="DDG: offset"];
"1001244" -> "1001243"  [label="DDG: page_address(pfrag->page) + pfrag->offset"];
"1001244" -> "1001243"  [label="DDG: skb"];
"1001244" -> "1001243"  [label="DDG: skb->len"];
"1001244" -> "1001243"  [label="DDG: from"];
"1000118" -> "1001244"  [label="DDG: from"];
"1001247" -> "1001244"  [label="DDG: pfrag->page"];
"1001235" -> "1001244"  [label="DDG: pfrag->offset"];
"1000154" -> "1001244"  [label="DDG: offset"];
"1001299" -> "1001244"  [label="DDG: offset"];
"1001230" -> "1001244"  [label="DDG: copy"];
"1000760" -> "1001244"  [label="DDG: skb->len"];
"1001190" -> "1001244"  [label="DDG: skb"];
"1001221" -> "1001244"  [label="DDG: skb"];
"1001244" -> "1001262"  [label="DDG: copy"];
"1001244" -> "1001271"  [label="DDG: skb"];
"1001244" -> "1001267"  [label="DDG: copy"];
"1001244" -> "1001278"  [label="DDG: skb->len"];
"1001244" -> "1001299"  [label="DDG: offset"];
"1001243" -> "1001242"  [label="AST: "];
"1001243" -> "1001260"  [label="CFG: "];
"1001260" -> "1001243"  [label="AST: "];
"1001261" -> "1001243"  [label="CFG: "];
"1001264" -> "1001243"  [label="CFG: "];
"1001243" -> "1001327"  [label="DDG: getfrag(from,\n\t\t\t\t    page_address(pfrag->page) + pfrag->offset,\n\t\t\t\t    offset, copy, skb->len, skb) < 0"];
"1001243" -> "1001327"  [label="DDG: getfrag(from,\n\t\t\t\t    page_address(pfrag->page) + pfrag->offset,\n\t\t\t\t    offset, copy, skb->len, skb)"];
"1001262" -> "1001165"  [label="AST: "];
"1001262" -> "1001266"  [label="CFG: "];
"1001263" -> "1001262"  [label="AST: "];
"1001266" -> "1001262"  [label="AST: "];
"1001272" -> "1001262"  [label="CFG: "];
"1001262" -> "1001327"  [label="DDG: pfrag->offset"];
"1001262" -> "1001190"  [label="DDG: pfrag->offset"];
"1001235" -> "1001262"  [label="DDG: pfrag->offset"];
"1001190" -> "1001189"  [label="AST: "];
"1001190" -> "1001196"  [label="CFG: "];
"1001191" -> "1001190"  [label="AST: "];
"1001192" -> "1001190"  [label="AST: "];
"1001193" -> "1001190"  [label="AST: "];
"1001196" -> "1001190"  [label="AST: "];
"1001189" -> "1001190"  [label="CFG: "];
"1001190" -> "1001327"  [label="DDG: i"];
"1001190" -> "1001327"  [label="DDG: skb"];
"1001190" -> "1001327"  [label="DDG: pfrag->offset"];
"1001190" -> "1001327"  [label="DDG: pfrag->page"];
"1001190" -> "1001189"  [label="DDG: skb"];
"1001190" -> "1001189"  [label="DDG: i"];
"1001190" -> "1001189"  [label="DDG: pfrag->page"];
"1001190" -> "1001189"  [label="DDG: pfrag->offset"];
"1001170" -> "1001190"  [label="DDG: skb"];
"1001167" -> "1001190"  [label="DDG: i"];
"1001247" -> "1001190"  [label="DDG: pfrag->page"];
"1001190" -> "1001205"  [label="DDG: i"];
"1001190" -> "1001209"  [label="DDG: skb"];
"1001190" -> "1001209"  [label="DDG: pfrag->page"];
"1001190" -> "1001209"  [label="DDG: pfrag->offset"];
"1001190" -> "1001235"  [label="DDG: pfrag->offset"];
"1001190" -> "1001247"  [label="DDG: pfrag->page"];
"1001190" -> "1001274"  [label="DDG: i"];
"1001189" -> "1001188"  [label="AST: "];
"1001201" -> "1001189"  [label="CFG: "];
"1001231" -> "1001189"  [label="CFG: "];
"1001189" -> "1001327"  [label="DDG: !skb_can_coalesce(skb, i, pfrag->page,\n\t\t\t\t\t      pfrag->offset)"];
"1001189" -> "1001327"  [label="DDG: skb_can_coalesce(skb, i, pfrag->page,\n\t\t\t\t\t      pfrag->offset)"];
"1001205" -> "1001204"  [label="AST: "];
"1001205" -> "1001207"  [label="CFG: "];
"1001206" -> "1001205"  [label="AST: "];
"1001207" -> "1001205"  [label="AST: "];
"1001208" -> "1001205"  [label="CFG: "];
"1001210" -> "1001205"  [label="CFG: "];
"1001205" -> "1001327"  [label="DDG: i == MAX_SKB_FRAGS"];
"1001205" -> "1001327"  [label="DDG: i"];
"1001205" -> "1001327"  [label="DDG: MAX_SKB_FRAGS"];
"1001205" -> "1001209"  [label="DDG: i"];
"1001209" -> "1001199"  [label="AST: "];
"1001209" -> "1001218"  [label="CFG: "];
"1001210" -> "1001209"  [label="AST: "];
"1001211" -> "1001209"  [label="AST: "];
"1001212" -> "1001209"  [label="AST: "];
"1001215" -> "1001209"  [label="AST: "];
"1001218" -> "1001209"  [label="AST: "];
"1001222" -> "1001209"  [label="CFG: "];
"1001209" -> "1001327"  [label="DDG: __skb_fill_page_desc(skb, i, pfrag->page,\n\t\t\t\t\t\t     pfrag->offset, 0)"];
"1001209" -> "1001221"  [label="DDG: skb"];
"1001209" -> "1001224"  [label="DDG: i"];
"1001209" -> "1001226"  [label="DDG: pfrag->page"];
"1001209" -> "1001235"  [label="DDG: pfrag->offset"];
"1001221" -> "1001220"  [label="AST: "];
"1001221" -> "1001222"  [label="CFG: "];
"1001222" -> "1001221"  [label="AST: "];
"1001223" -> "1001221"  [label="CFG: "];
"1001224" -> "1001219"  [label="AST: "];
"1001224" -> "1001225"  [label="CFG: "];
"1001225" -> "1001224"  [label="AST: "];
"1001219" -> "1001224"  [label="CFG: "];
"1001224" -> "1001327"  [label="DDG: i"];
"1001224" -> "1001219"  [label="DDG: i"];
"1001224" -> "1001274"  [label="DDG: i"];
"1001219" -> "1001199"  [label="AST: "];
"1001220" -> "1001219"  [label="AST: "];
"1001228" -> "1001219"  [label="CFG: "];
"1001219" -> "1001327"  [label="DDG: skb_shinfo(skb)->nr_frags"];
"1001219" -> "1001167"  [label="DDG: skb_shinfo(skb)->nr_frags"];
"1001167" -> "1001165"  [label="AST: "];
"1001167" -> "1001169"  [label="CFG: "];
"1001168" -> "1001167"  [label="AST: "];
"1001169" -> "1001167"  [label="AST: "];
"1001175" -> "1001167"  [label="CFG: "];
"1001167" -> "1001327"  [label="DDG: skb_shinfo(skb)->nr_frags"];
"1001167" -> "1001327"  [label="DDG: i"];
"1001274" -> "1001269"  [label="AST: "];
"1001274" -> "1001276"  [label="CFG: "];
"1001275" -> "1001274"  [label="AST: "];
"1001276" -> "1001274"  [label="AST: "];
"1001269" -> "1001274"  [label="CFG: "];
"1001274" -> "1001327"  [label="DDG: i"];
"1001226" -> "1001199"  [label="AST: "];
"1001226" -> "1001227"  [label="CFG: "];
"1001227" -> "1001226"  [label="AST: "];
"1001231" -> "1001226"  [label="CFG: "];
"1001226" -> "1001327"  [label="DDG: get_page(pfrag->page)"];
"1001226" -> "1001247"  [label="DDG: pfrag->page"];
"1001247" -> "1001246"  [label="AST: "];
"1001247" -> "1001248"  [label="CFG: "];
"1001248" -> "1001247"  [label="AST: "];
"1001252" -> "1001247"  [label="CFG: "];
"1001247" -> "1001327"  [label="DDG: pfrag->page"];
"1001247" -> "1001246"  [label="DDG: pfrag->page"];
"1001246" -> "1001251"  [label="CFG: "];
"1001251" -> "1001246"  [label="AST: "];
"1001254" -> "1001246"  [label="CFG: "];
"1001246" -> "1001327"  [label="DDG: pfrag->offset"];
"1001246" -> "1001327"  [label="DDG: page_address(pfrag->page)"];
"1001235" -> "1001246"  [label="DDG: pfrag->offset"];
"1001235" -> "1001232"  [label="AST: "];
"1001235" -> "1001239"  [label="CFG: "];
"1001236" -> "1001235"  [label="AST: "];
"1001239" -> "1001235"  [label="AST: "];
"1001232" -> "1001235"  [label="CFG: "];
"1001235" -> "1001327"  [label="DDG: pfrag->size"];
"1001235" -> "1001232"  [label="DDG: pfrag->size"];
"1001235" -> "1001232"  [label="DDG: pfrag->offset"];
"1001232" -> "1001230"  [label="AST: "];
"1001233" -> "1001232"  [label="AST: "];
"1001234" -> "1001232"  [label="AST: "];
"1001230" -> "1001232"  [label="CFG: "];
"1001232" -> "1001327"  [label="DDG: int"];
"1001232" -> "1001327"  [label="DDG: pfrag->size - pfrag->offset"];
"1001232" -> "1001230"  [label="DDG: int"];
"1001232" -> "1001230"  [label="DDG: copy"];
"1001232" -> "1001230"  [label="DDG: pfrag->size - pfrag->offset"];
"1001230" -> "1001165"  [label="AST: "];
"1001231" -> "1001230"  [label="AST: "];
"1001245" -> "1001230"  [label="CFG: "];
"1001230" -> "1001327"  [label="DDG: min_t(int, copy, pfrag->size - pfrag->offset)"];
"1001271" -> "1001270"  [label="AST: "];
"1001271" -> "1001272"  [label="CFG: "];
"1001272" -> "1001271"  [label="AST: "];
"1001273" -> "1001271"  [label="CFG: "];
"1001271" -> "1001327"  [label="DDG: skb"];
"1001271" -> "1001170"  [label="DDG: skb"];
"1001170" -> "1001169"  [label="AST: "];
"1001170" -> "1001171"  [label="CFG: "];
"1001171" -> "1001170"  [label="AST: "];
"1001172" -> "1001170"  [label="CFG: "];
"1001170" -> "1001327"  [label="DDG: skb"];
"1001111" -> "1001170"  [label="DDG: skb"];
"1000719" -> "1001170"  [label="DDG: skb"];
"1001267" -> "1001165"  [label="AST: "];
"1001267" -> "1001277"  [label="CFG: "];
"1001268" -> "1001267"  [label="AST: "];
"1001277" -> "1001267"  [label="AST: "];
"1001280" -> "1001267"  [label="CFG: "];
"1001267" -> "1001327"  [label="DDG: skb_frag_size_add(&skb_shinfo(skb)->frags[i - 1], copy)"];
"1001267" -> "1001327"  [label="DDG: &skb_shinfo(skb)->frags[i - 1]"];
"1001267" -> "1001278"  [label="DDG: copy"];
"1001267" -> "1001283"  [label="DDG: copy"];
"1001267" -> "1001288"  [label="DDG: copy"];
"1001267" -> "1001293"  [label="DDG: copy"];
"1001278" -> "1001165"  [label="AST: "];
"1001278" -> "1001282"  [label="CFG: "];
"1001279" -> "1001278"  [label="AST: "];
"1001282" -> "1001278"  [label="AST: "];
"1001285" -> "1001278"  [label="CFG: "];
"1001278" -> "1001327"  [label="DDG: skb->len"];
"1001283" -> "1001165"  [label="AST: "];
"1001283" -> "1001287"  [label="CFG: "];
"1001284" -> "1001283"  [label="AST: "];
"1001287" -> "1001283"  [label="AST: "];
"1001290" -> "1001283"  [label="CFG: "];
"1001283" -> "1001327"  [label="DDG: skb->data_len"];
"1001288" -> "1001165"  [label="AST: "];
"1001288" -> "1001292"  [label="CFG: "];
"1001289" -> "1001288"  [label="AST: "];
"1001292" -> "1001288"  [label="AST: "];
"1001294" -> "1001288"  [label="CFG: "];
"1001288" -> "1001327"  [label="DDG: skb->truesize"];
"1001293" -> "1001165"  [label="AST: "];
"1001293" -> "1001295"  [label="CFG: "];
"1001294" -> "1001293"  [label="AST: "];
"1001295" -> "1001293"  [label="AST: "];
"1001300" -> "1001293"  [label="CFG: "];
"1001293" -> "1001327"  [label="DDG: &sk->sk_wmem_alloc"];
"1001293" -> "1001327"  [label="DDG: atomic_add(copy, &sk->sk_wmem_alloc)"];
"1001293" -> "1000928"  [label="DDG: &sk->sk_wmem_alloc"];
"1000928" -> "1001293"  [label="DDG: &sk->sk_wmem_alloc"];
"1001293" -> "1001299"  [label="DDG: copy"];
"1001293" -> "1001302"  [label="DDG: copy"];
"1000928" -> "1000927"  [label="AST: "];
"1000928" -> "1000929"  [label="CFG: "];
"1000929" -> "1000928"  [label="AST: "];
"1000934" -> "1000928"  [label="CFG: "];
"1000928" -> "1001327"  [label="DDG: &sk->sk_wmem_alloc"];
"1000928" -> "1000927"  [label="DDG: &sk->sk_wmem_alloc"];
"1000927" -> "1000926"  [label="AST: "];
"1000927" -> "1000933"  [label="CFG: "];
"1000933" -> "1000927"  [label="AST: "];
"1000939" -> "1000927"  [label="CFG: "];
"1000952" -> "1000927"  [label="CFG: "];
"1000927" -> "1001327"  [label="DDG: atomic_read(&sk->sk_wmem_alloc) <=\n\t\t\t\t    2 * sk->sk_sndbuf"];
"1000927" -> "1001327"  [label="DDG: 2 * sk->sk_sndbuf"];
"1000927" -> "1001327"  [label="DDG: atomic_read(&sk->sk_wmem_alloc)"];
"1000933" -> "1000927"  [label="DDG: 2"];
"1000933" -> "1000927"  [label="DDG: sk->sk_sndbuf"];
"1001299" -> "1000732"  [label="AST: "];
"1001299" -> "1001301"  [label="CFG: "];
"1001300" -> "1001299"  [label="AST: "];
"1001301" -> "1001299"  [label="AST: "];
"1001303" -> "1001299"  [label="CFG: "];
"1001299" -> "1001327"  [label="DDG: offset"];
"1001302" -> "1000732"  [label="AST: "];
"1001302" -> "1001304"  [label="CFG: "];
"1001303" -> "1001302"  [label="AST: "];
"1001304" -> "1001302"  [label="AST: "];
"1000730" -> "1001302"  [label="CFG: "];
"1001302" -> "1001327"  [label="DDG: copy"];
"1001302" -> "1000729"  [label="DDG: length"];
"1000119" -> "1001302"  [label="DDG: length"];
"1000729" -> "1000728"  [label="AST: "];
"1000729" -> "1000731"  [label="CFG: "];
"1000730" -> "1000729"  [label="AST: "];
"1000731" -> "1000729"  [label="AST: "];
"1000734" -> "1000729"  [label="CFG: "];
"1001306" -> "1000729"  [label="CFG: "];
"1000729" -> "1001327"  [label="DDG: length"];
"1000729" -> "1001327"  [label="DDG: length > 0"];
"1000654" -> "1000729"  [label="DDG: length"];
"1001097" -> "1000729"  [label="DDG: length"];
"1000119" -> "1000729"  [label="DDG: length"];
"1001099" -> "1001097"  [label="AST: "];
"1001099" -> "1001101"  [label="CFG: "];
"1001100" -> "1001099"  [label="AST: "];
"1001101" -> "1001099"  [label="AST: "];
"1001097" -> "1001099"  [label="CFG: "];
"1001099" -> "1001327"  [label="DDG: datalen"];
"1001099" -> "1001327"  [label="DDG: fraggap"];
"1001099" -> "1001097"  [label="DDG: datalen"];
"1001099" -> "1001097"  [label="DDG: fraggap"];
"1001052" -> "1001099"  [label="DDG: datalen"];
"1001054" -> "1001099"  [label="DDG: fraggap"];
"1001097" -> "1000769"  [label="AST: "];
"1001098" -> "1001097"  [label="AST: "];
"1001103" -> "1001097"  [label="CFG: "];
"1001097" -> "1001327"  [label="DDG: datalen - fraggap"];
"1000119" -> "1001097"  [label="DDG: length"];
"1000654" -> "1001097"  [label="DDG: length"];
"1001111" -> "1000769"  [label="AST: "];
"1001111" -> "1001116"  [label="CFG: "];
"1001112" -> "1001111"  [label="AST: "];
"1001116" -> "1001111"  [label="AST: "];
"1001117" -> "1001111"  [label="CFG: "];
"1001111" -> "1001327"  [label="DDG: skb"];
"1001111" -> "1001327"  [label="DDG: __skb_queue_tail(&sk->sk_write_queue, skb)"];
"1001111" -> "1001327"  [label="DDG: &sk->sk_write_queue"];
"1000721" -> "1001111"  [label="DDG: &sk->sk_write_queue"];
"1001003" -> "1001111"  [label="DDG: skb"];
"1001078" -> "1001080"  [label="CFG: "];
"1001079" -> "1001078"  [label="AST: "];
"1001080" -> "1001078"  [label="AST: "];
"1001081" -> "1001078"  [label="CFG: "];
"1001078" -> "1001327"  [label="DDG: transhdrlen"];
"1001078" -> "1001327"  [label="DDG: data"];
"1001054" -> "1001078"  [label="DDG: transhdrlen"];
"1000120" -> "1001078"  [label="DDG: transhdrlen"];
"1001047" -> "1001020"  [label="AST: "];
"1001047" -> "1001049"  [label="CFG: "];
"1001048" -> "1001047"  [label="AST: "];
"1001049" -> "1001047"  [label="AST: "];
"1001051" -> "1001047"  [label="CFG: "];
"1001047" -> "1001327"  [label="DDG: maxfraglen"];
"1001047" -> "1001327"  [label="DDG: pskb_trim_unique(skb_prev, maxfraglen)"];
"1001047" -> "1001327"  [label="DDG: skb_prev"];
"1001047" -> "1000736"  [label="DDG: maxfraglen"];
"1001047" -> "1000760"  [label="DDG: maxfraglen"];
"1001047" -> "1000780"  [label="DDG: maxfraglen"];
"1000736" -> "1000749"  [label="CFG: "];
"1000736" -> "1000750"  [label="CFG: "];
"1000737" -> "1000736"  [label="AST: "];
"1000749" -> "1000736"  [label="AST: "];
"1000750" -> "1000736"  [label="AST: "];
"1000752" -> "1000736"  [label="CFG: "];
"1000736" -> "1001327"  [label="DDG: maxfraglen"];
"1000736" -> "1001327"  [label="DDG: mtu"];
"1000736" -> "1001327"  [label="DDG: cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG)"];
"1000738" -> "1000736"  [label="DDG: mtu"];
"1000760" -> "1000736"  [label="DDG: maxfraglen"];
"1000840" -> "1000736"  [label="DDG: maxfraglen"];
"1000780" -> "1000736"  [label="DDG: maxfraglen"];
"1000760" -> "1000758"  [label="AST: "];
"1000760" -> "1000762"  [label="CFG: "];
"1000761" -> "1000760"  [label="AST: "];
"1000762" -> "1000760"  [label="AST: "];
"1000758" -> "1000760"  [label="CFG: "];
"1000760" -> "1001327"  [label="DDG: skb->len"];
"1000760" -> "1001327"  [label="DDG: maxfraglen"];
"1000760" -> "1000758"  [label="DDG: maxfraglen"];
"1000760" -> "1000758"  [label="DDG: skb->len"];
"1000840" -> "1000760"  [label="DDG: maxfraglen"];
"1000780" -> "1000760"  [label="DDG: maxfraglen"];
"1000760" -> "1000780"  [label="DDG: skb->len"];
"1000760" -> "1000780"  [label="DDG: maxfraglen"];
"1000760" -> "1000821"  [label="DDG: maxfraglen"];
"1000760" -> "1000822"  [label="DDG: maxfraglen"];
"1000760" -> "1000840"  [label="DDG: maxfraglen"];
"1000760" -> "1001138"  [label="DDG: skb->len"];
"1000758" -> "1000754"  [label="AST: "];
"1000759" -> "1000758"  [label="AST: "];
"1000767" -> "1000758"  [label="CFG: "];
"1000758" -> "1001327"  [label="DDG: maxfraglen - skb->len"];
"1000780" -> "1000778"  [label="AST: "];
"1000780" -> "1000784"  [label="CFG: "];
"1000781" -> "1000780"  [label="AST: "];
"1000784" -> "1000780"  [label="AST: "];
"1000778" -> "1000780"  [label="CFG: "];
"1000780" -> "1001327"  [label="DDG: skb->len"];
"1000780" -> "1000778"  [label="DDG: skb->len"];
"1000780" -> "1000778"  [label="DDG: maxfraglen"];
"1000840" -> "1000780"  [label="DDG: maxfraglen"];
"1000780" -> "1000821"  [label="DDG: maxfraglen"];
"1000780" -> "1000822"  [label="DDG: maxfraglen"];
"1000780" -> "1000840"  [label="DDG: maxfraglen"];
"1000778" -> "1000776"  [label="AST: "];
"1000779" -> "1000778"  [label="AST: "];
"1000792" -> "1000778"  [label="CFG: "];
"1000778" -> "1001327"  [label="DDG: skb->len - maxfraglen"];
"1000778" -> "1000813"  [label="DDG: fraggap"];
"1000778" -> "1000815"  [label="DDG: fraggap"];
"1000778" -> "1000877"  [label="DDG: fraggap"];
"1000778" -> "1000879"  [label="DDG: fraggap"];
"1000778" -> "1001054"  [label="DDG: fraggap"];
"1000813" -> "1000769"  [label="AST: "];
"1000813" -> "1000815"  [label="CFG: "];
"1000814" -> "1000813"  [label="AST: "];
"1000815" -> "1000813"  [label="AST: "];
"1000820" -> "1000813"  [label="CFG: "];
"1000654" -> "1000813"  [label="DDG: length"];
"1000119" -> "1000813"  [label="DDG: length"];
"1000786" -> "1000813"  [label="DDG: fraggap"];
"1000813" -> "1000819"  [label="DDG: datalen"];
"1000819" -> "1000818"  [label="AST: "];
"1000819" -> "1000821"  [label="CFG: "];
"1000820" -> "1000819"  [label="AST: "];
"1000821" -> "1000819"  [label="AST: "];
"1000839" -> "1000819"  [label="CFG: "];
"1000852" -> "1000819"  [label="CFG: "];
"1000819" -> "1001327"  [label="DDG: datalen > (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - fragheaderlen"];
"1000819" -> "1001327"  [label="DDG: (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - fragheaderlen"];
"1000821" -> "1000819"  [label="DDG: cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen"];
"1000821" -> "1000819"  [label="DDG: fragheaderlen"];
"1000819" -> "1000868"  [label="DDG: datalen"];
"1000819" -> "1000870"  [label="DDG: datalen"];
"1000819" -> "1000877"  [label="DDG: datalen"];
"1000868" -> "1000867"  [label="AST: "];
"1000868" -> "1000870"  [label="CFG: "];
"1000869" -> "1000868"  [label="AST: "];
"1000870" -> "1000868"  [label="AST: "];
"1000874" -> "1000868"  [label="CFG: "];
"1000838" -> "1000868"  [label="DDG: datalen"];
"1000842" -> "1000868"  [label="DDG: fragheaderlen"];
"1000821" -> "1000868"  [label="DDG: fragheaderlen"];
"1000868" -> "1000873"  [label="DDG: alloclen"];
"1000873" -> "1000769"  [label="AST: "];
"1000873" -> "1000875"  [label="CFG: "];
"1000874" -> "1000873"  [label="AST: "];
"1000875" -> "1000873"  [label="AST: "];
"1000878" -> "1000873"  [label="CFG: "];
"1000873" -> "1001327"  [label="DDG: dst_exthdrlen"];
"1001108" -> "1000873"  [label="DDG: dst_exthdrlen"];
"1000518" -> "1000873"  [label="DDG: dst_exthdrlen"];
"1000563" -> "1000873"  [label="DDG: dst_exthdrlen"];
"1000864" -> "1000873"  [label="DDG: alloclen"];
"1000873" -> "1000890"  [label="DDG: alloclen"];
"1000890" -> "1000769"  [label="AST: "];
"1000890" -> "1000892"  [label="CFG: "];
"1000891" -> "1000890"  [label="AST: "];
"1000892" -> "1000890"  [label="AST: "];
"1000898" -> "1000890"  [label="CFG: "];
"1000890" -> "1001327"  [label="DDG: rt->dst.trailer_len"];
"1000842" -> "1000890"  [label="DDG: rt->dst.trailer_len"];
"1000890" -> "1000902"  [label="DDG: alloclen"];
"1000902" -> "1000769"  [label="AST: "];
"1000902" -> "1000904"  [label="CFG: "];
"1000903" -> "1000902"  [label="AST: "];
"1000904" -> "1000902"  [label="AST: "];
"1000907" -> "1000902"  [label="CFG: "];
"1000902" -> "1001327"  [label="DDG: alloclen"];
"1000902" -> "1000911"  [label="DDG: alloclen"];
"1000902" -> "1000913"  [label="DDG: alloclen"];
"1000902" -> "1000940"  [label="DDG: alloclen"];
"1000902" -> "1000942"  [label="DDG: alloclen"];
"1000911" -> "1000909"  [label="AST: "];
"1000911" -> "1000919"  [label="CFG: "];
"1000912" -> "1000911"  [label="AST: "];
"1000913" -> "1000911"  [label="AST: "];
"1000916" -> "1000911"  [label="AST: "];
"1000919" -> "1000911"  [label="AST: "];
"1000909" -> "1000911"  [label="CFG: "];
"1000911" -> "1001327"  [label="DDG: &err"];
"1000911" -> "1001327"  [label="DDG: flags & MSG_DONTWAIT"];
"1000911" -> "1001327"  [label="DDG: sk"];
"1000911" -> "1001327"  [label="DDG: alloclen + hh_len"];
"1000911" -> "1000909"  [label="DDG: sk"];
"1000911" -> "1000909"  [label="DDG: alloclen + hh_len"];
"1000911" -> "1000909"  [label="DDG: flags & MSG_DONTWAIT"];
"1000911" -> "1000909"  [label="DDG: &err"];
"1001184" -> "1000911"  [label="DDG: sk"];
"1000940" -> "1000911"  [label="DDG: sk"];
"1000644" -> "1000911"  [label="DDG: sk"];
"1000137" -> "1000911"  [label="DDG: sk"];
"1000116" -> "1000911"  [label="DDG: sk"];
"1000571" -> "1000911"  [label="DDG: hh_len"];
"1000916" -> "1000911"  [label="DDG: flags"];
"1000916" -> "1000911"  [label="DDG: MSG_DONTWAIT"];
"1000911" -> "1000940"  [label="DDG: sk"];
"1000911" -> "1001176"  [label="DDG: sk"];
"1000911" -> "1001319"  [label="DDG: sk"];
"1000909" -> "1000908"  [label="AST: "];
"1000910" -> "1000909"  [label="AST: "];
"1000965" -> "1000909"  [label="CFG: "];
"1000909" -> "1001327"  [label="DDG: sock_alloc_send_skb(sk,\n\t\t\t\t\t\talloclen + hh_len,\n\t\t\t\t\t\t(flags & MSG_DONTWAIT), &err)"];
"1000940" -> "1000938"  [label="AST: "];
"1000940" -> "1000946"  [label="CFG: "];
"1000941" -> "1000940"  [label="AST: "];
"1000942" -> "1000940"  [label="AST: "];
"1000945" -> "1000940"  [label="AST: "];
"1000946" -> "1000940"  [label="AST: "];
"1000938" -> "1000940"  [label="CFG: "];
"1000940" -> "1001327"  [label="DDG: alloclen + hh_len"];
"1000940" -> "1001327"  [label="DDG: sk->sk_allocation"];
"1000940" -> "1001327"  [label="DDG: sk"];
"1000940" -> "1000938"  [label="DDG: sk"];
"1000940" -> "1000938"  [label="DDG: alloclen + hh_len"];
"1000940" -> "1000938"  [label="DDG: 1"];
"1000940" -> "1000938"  [label="DDG: sk->sk_allocation"];
"1001184" -> "1000940"  [label="DDG: sk"];
"1000644" -> "1000940"  [label="DDG: sk"];
"1000137" -> "1000940"  [label="DDG: sk"];
"1000116" -> "1000940"  [label="DDG: sk"];
"1000571" -> "1000940"  [label="DDG: hh_len"];
"1000354" -> "1000940"  [label="DDG: sk->sk_allocation"];
"1000940" -> "1001176"  [label="DDG: sk"];
"1000940" -> "1001319"  [label="DDG: sk"];
"1000938" -> "1000926"  [label="AST: "];
"1000939" -> "1000938"  [label="AST: "];
"1000952" -> "1000938"  [label="CFG: "];
"1000938" -> "1001327"  [label="DDG: sock_wmalloc(sk,\n\t\t\t\t\t\t\t   alloclen + hh_len, 1,\n\t\t\t\t\t\t\t   sk->sk_allocation)"];
"1001176" -> "1001174"  [label="AST: "];
"1001176" -> "1001177"  [label="CFG: "];
"1001177" -> "1001176"  [label="AST: "];
"1001174" -> "1001176"  [label="CFG: "];
"1001176" -> "1001174"  [label="DDG: sk"];
"1001184" -> "1001176"  [label="DDG: sk"];
"1000644" -> "1001176"  [label="DDG: sk"];
"1000137" -> "1001176"  [label="DDG: sk"];
"1000116" -> "1001176"  [label="DDG: sk"];
"1001176" -> "1001184"  [label="DDG: sk"];
"1001174" -> "1001165"  [label="AST: "];
"1001175" -> "1001174"  [label="AST: "];
"1001179" -> "1001174"  [label="CFG: "];
"1001174" -> "1001327"  [label="DDG: sk_page_frag(sk)"];
"1001174" -> "1001184"  [label="DDG: pfrag"];
"1001184" -> "1001183"  [label="AST: "];
"1001184" -> "1001186"  [label="CFG: "];
"1001185" -> "1001184"  [label="AST: "];
"1001186" -> "1001184"  [label="AST: "];
"1001183" -> "1001184"  [label="CFG: "];
"1001184" -> "1001327"  [label="DDG: pfrag"];
"1001184" -> "1001327"  [label="DDG: sk"];
"1001184" -> "1001183"  [label="DDG: sk"];
"1001184" -> "1001183"  [label="DDG: pfrag"];
"1000116" -> "1001184"  [label="DDG: sk"];
"1001184" -> "1001319"  [label="DDG: sk"];
"1001183" -> "1001182"  [label="AST: "];
"1001187" -> "1001183"  [label="CFG: "];
"1001191" -> "1001183"  [label="CFG: "];
"1001183" -> "1001327"  [label="DDG: sk_page_frag_refill(sk, pfrag)"];
"1001183" -> "1001327"  [label="DDG: !sk_page_frag_refill(sk, pfrag)"];
"1001319" -> "1001318"  [label="AST: "];
"1001319" -> "1001320"  [label="CFG: "];
"1001320" -> "1001319"  [label="AST: "];
"1001322" -> "1001319"  [label="CFG: "];
"1001319" -> "1001327"  [label="DDG: sk"];
"1001319" -> "1001318"  [label="DDG: sk"];
"1000701" -> "1001319"  [label="DDG: sk"];
"1000644" -> "1001319"  [label="DDG: sk"];
"1000137" -> "1001319"  [label="DDG: sk"];
"1000116" -> "1001319"  [label="DDG: sk"];
"1001318" -> "1000128"  [label="AST: "];
"1001318" -> "1001324"  [label="CFG: "];
"1001321" -> "1001318"  [label="AST: "];
"1001324" -> "1001318"  [label="AST: "];
"1001326" -> "1001318"  [label="CFG: "];
"1001318" -> "1001327"  [label="DDG: IP6_INC_STATS(sock_net(sk), rt->rt6i_idev, IPSTATS_MIB_OUTDISCARDS)"];
"1001318" -> "1001327"  [label="DDG: rt->rt6i_idev"];
"1001318" -> "1001327"  [label="DDG: sock_net(sk)"];
"1001318" -> "1001327"  [label="DDG: IPSTATS_MIB_OUTDISCARDS"];
"1000913" -> "1000915"  [label="CFG: "];
"1000914" -> "1000913"  [label="AST: "];
"1000915" -> "1000913"  [label="AST: "];
"1000917" -> "1000913"  [label="CFG: "];
"1000913" -> "1001327"  [label="DDG: alloclen"];
"1000913" -> "1001327"  [label="DDG: hh_len"];
"1000571" -> "1000913"  [label="DDG: hh_len"];
"1000942" -> "1000944"  [label="CFG: "];
"1000943" -> "1000942"  [label="AST: "];
"1000944" -> "1000942"  [label="AST: "];
"1000945" -> "1000942"  [label="CFG: "];
"1000942" -> "1001327"  [label="DDG: alloclen"];
"1000942" -> "1001327"  [label="DDG: hh_len"];
"1000571" -> "1000942"  [label="DDG: hh_len"];
"1000870" -> "1000872"  [label="CFG: "];
"1000871" -> "1000870"  [label="AST: "];
"1000872" -> "1000870"  [label="AST: "];
"1000838" -> "1000870"  [label="DDG: datalen"];
"1000842" -> "1000870"  [label="DDG: fragheaderlen"];
"1000821" -> "1000870"  [label="DDG: fragheaderlen"];
"1000877" -> "1000876"  [label="AST: "];
"1000877" -> "1000879"  [label="CFG: "];
"1000878" -> "1000877"  [label="AST: "];
"1000879" -> "1000877"  [label="AST: "];
"1000884" -> "1000877"  [label="CFG: "];
"1000891" -> "1000877"  [label="CFG: "];
"1000877" -> "1001327"  [label="DDG: length + fraggap"];
"1000877" -> "1001327"  [label="DDG: datalen != length + fraggap"];
"1000838" -> "1000877"  [label="DDG: datalen"];
"1000119" -> "1000877"  [label="DDG: length"];
"1000654" -> "1000877"  [label="DDG: length"];
"1000786" -> "1000877"  [label="DDG: fraggap"];
"1000877" -> "1000883"  [label="DDG: datalen"];
"1000877" -> "1000897"  [label="DDG: datalen"];
"1000877" -> "1000899"  [label="DDG: datalen"];
"1000877" -> "1001052"  [label="DDG: datalen"];
"1000883" -> "1000882"  [label="AST: "];
"1000883" -> "1000885"  [label="CFG: "];
"1000884" -> "1000883"  [label="AST: "];
"1000885" -> "1000883"  [label="AST: "];
"1000891" -> "1000883"  [label="CFG: "];
"1000842" -> "1000883"  [label="DDG: rt->dst.trailer_len"];
"1000883" -> "1000897"  [label="DDG: datalen"];
"1000883" -> "1000899"  [label="DDG: datalen"];
"1000883" -> "1001052"  [label="DDG: datalen"];
"1000897" -> "1000769"  [label="AST: "];
"1000897" -> "1000899"  [label="CFG: "];
"1000898" -> "1000897"  [label="AST: "];
"1000899" -> "1000897"  [label="AST: "];
"1000903" -> "1000897"  [label="CFG: "];
"1000897" -> "1001327"  [label="DDG: datalen + fragheaderlen"];
"1000897" -> "1001327"  [label="DDG: fraglen"];
"1000842" -> "1000897"  [label="DDG: fragheaderlen"];
"1000821" -> "1000897"  [label="DDG: fragheaderlen"];
"1000899" -> "1000901"  [label="CFG: "];
"1000900" -> "1000899"  [label="AST: "];
"1000901" -> "1000899"  [label="AST: "];
"1000899" -> "1001327"  [label="DDG: datalen"];
"1000899" -> "1001327"  [label="DDG: fragheaderlen"];
"1000842" -> "1000899"  [label="DDG: fragheaderlen"];
"1000821" -> "1000899"  [label="DDG: fragheaderlen"];
"1001052" -> "1001050"  [label="AST: "];
"1001052" -> "1001054"  [label="CFG: "];
"1001053" -> "1001052"  [label="AST: "];
"1001054" -> "1001052"  [label="AST: "];
"1001050" -> "1001052"  [label="CFG: "];
"1001052" -> "1001327"  [label="DDG: transhdrlen - fraggap"];
"1001052" -> "1001327"  [label="DDG: datalen"];
"1001052" -> "1001050"  [label="DDG: datalen"];
"1001052" -> "1001050"  [label="DDG: transhdrlen - fraggap"];
"1001054" -> "1001052"  [label="DDG: transhdrlen"];
"1001054" -> "1001052"  [label="DDG: fraggap"];
"1001050" -> "1000769"  [label="AST: "];
"1001051" -> "1001050"  [label="AST: "];
"1001059" -> "1001050"  [label="CFG: "];
"1001050" -> "1001327"  [label="DDG: datalen - transhdrlen - fraggap"];
"1001050" -> "1001058"  [label="DDG: copy"];
"1001058" -> "1001057"  [label="AST: "];
"1001058" -> "1001060"  [label="CFG: "];
"1001059" -> "1001058"  [label="AST: "];
"1001060" -> "1001058"  [label="AST: "];
"1001063" -> "1001058"  [label="CFG: "];
"1001073" -> "1001058"  [label="CFG: "];
"1001058" -> "1001327"  [label="DDG: copy < 0"];
"1001058" -> "1001327"  [label="DDG: copy"];
"1001058" -> "1001072"  [label="DDG: copy"];
"1001072" -> "1001074"  [label="CFG: "];
"1001073" -> "1001072"  [label="AST: "];
"1001074" -> "1001072"  [label="AST: "];
"1001077" -> "1001072"  [label="CFG: "];
"1001072" -> "1001327"  [label="DDG: copy"];
"1000815" -> "1000817"  [label="CFG: "];
"1000816" -> "1000815"  [label="AST: "];
"1000817" -> "1000815"  [label="AST: "];
"1000654" -> "1000815"  [label="DDG: length"];
"1000119" -> "1000815"  [label="DDG: length"];
"1000786" -> "1000815"  [label="DDG: fraggap"];
"1000879" -> "1000881"  [label="CFG: "];
"1000880" -> "1000879"  [label="AST: "];
"1000881" -> "1000879"  [label="AST: "];
"1000879" -> "1001327"  [label="DDG: fraggap"];
"1000119" -> "1000879"  [label="DDG: length"];
"1000654" -> "1000879"  [label="DDG: length"];
"1000786" -> "1000879"  [label="DDG: fraggap"];
"1001054" -> "1001056"  [label="CFG: "];
"1001055" -> "1001054"  [label="AST: "];
"1001056" -> "1001054"  [label="AST: "];
"1001054" -> "1001327"  [label="DDG: transhdrlen"];
"1001054" -> "1001327"  [label="DDG: fraggap"];
"1001102" -> "1001054"  [label="DDG: transhdrlen"];
"1000515" -> "1001054"  [label="DDG: transhdrlen"];
"1000557" -> "1001054"  [label="DDG: transhdrlen"];
"1000120" -> "1001054"  [label="DDG: transhdrlen"];
"1000786" -> "1001054"  [label="DDG: fraggap"];
"1000821" -> "1000837"  [label="CFG: "];
"1000822" -> "1000821"  [label="AST: "];
"1000837" -> "1000821"  [label="AST: "];
"1000821" -> "1001327"  [label="DDG: cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen"];
"1000821" -> "1000797"  [label="DDG: fragheaderlen"];
"1000824" -> "1000821"  [label="DDG: mtu"];
"1000624" -> "1000821"  [label="DDG: fragheaderlen"];
"1000797" -> "1000821"  [label="DDG: fragheaderlen"];
"1000602" -> "1000821"  [label="DDG: fragheaderlen"];
"1000842" -> "1000821"  [label="DDG: fragheaderlen"];
"1000821" -> "1000842"  [label="DDG: fragheaderlen"];
"1000821" -> "1001009"  [label="DDG: fragheaderlen"];
"1000821" -> "1001013"  [label="DDG: fragheaderlen"];
"1000797" -> "1000789"  [label="AST: "];
"1000797" -> "1000805"  [label="CFG: "];
"1000798" -> "1000797"  [label="AST: "];
"1000800" -> "1000797"  [label="AST: "];
"1000802" -> "1000797"  [label="AST: "];
"1000803" -> "1000797"  [label="AST: "];
"1000804" -> "1000797"  [label="AST: "];
"1000805" -> "1000797"  [label="AST: "];
"1000811" -> "1000797"  [label="CFG: "];
"1000797" -> "1001327"  [label="DDG: np->pmtudisc ==\n\t\t\t\t\t\t    IPV6_PMTUDISC_PROBE"];
"1000797" -> "1001327"  [label="DDG: &maxfraglen"];
"1000797" -> "1001327"  [label="DDG: rt"];
"1000797" -> "1001327"  [label="DDG: &mtu"];
"1000797" -> "1001327"  [label="DDG: ip6_append_data_mtu(&mtu, &maxfraglen,\n\t\t\t\t\t\t    fragheaderlen, skb, rt,\n\t\t\t\t\t\t    np->pmtudisc ==\n\t\t\t\t\t\t    IPV6_PMTUDISC_PROBE)"];
"1000624" -> "1000797"  [label="DDG: fragheaderlen"];
"1000602" -> "1000797"  [label="DDG: fragheaderlen"];
"1000842" -> "1000797"  [label="DDG: fragheaderlen"];
"1000531" -> "1000797"  [label="DDG: rt"];
"1000125" -> "1000797"  [label="DDG: rt"];
"1000805" -> "1000797"  [label="DDG: np->pmtudisc"];
"1000805" -> "1000797"  [label="DDG: IPV6_PMTUDISC_PROBE"];
"1000797" -> "1000810"  [label="DDG: skb"];
"1000810" -> "1000769"  [label="AST: "];
"1000810" -> "1000812"  [label="CFG: "];
"1000811" -> "1000810"  [label="AST: "];
"1000812" -> "1000810"  [label="AST: "];
"1000814" -> "1000810"  [label="CFG: "];
"1000810" -> "1001327"  [label="DDG: skb_prev"];
"1000842" -> "1000840"  [label="AST: "];
"1000842" -> "1000844"  [label="CFG: "];
"1000843" -> "1000842"  [label="AST: "];
"1000844" -> "1000842"  [label="AST: "];
"1000840" -> "1000842"  [label="CFG: "];
"1000842" -> "1000840"  [label="DDG: fragheaderlen"];
"1000842" -> "1000840"  [label="DDG: rt->dst.trailer_len"];
"1000842" -> "1001009"  [label="DDG: fragheaderlen"];
"1000842" -> "1001013"  [label="DDG: fragheaderlen"];
"1000840" -> "1000838"  [label="AST: "];
"1000841" -> "1000840"  [label="AST: "];
"1000838" -> "1000840"  [label="CFG: "];
"1000840" -> "1001327"  [label="DDG: fragheaderlen - rt->dst.trailer_len"];
"1000840" -> "1001327"  [label="DDG: maxfraglen"];
"1000840" -> "1000838"  [label="DDG: maxfraglen"];
"1000840" -> "1000838"  [label="DDG: fragheaderlen - rt->dst.trailer_len"];
"1000838" -> "1000818"  [label="AST: "];
"1000839" -> "1000838"  [label="AST: "];
"1000852" -> "1000838"  [label="CFG: "];
"1000838" -> "1001327"  [label="DDG: maxfraglen - fragheaderlen - rt->dst.trailer_len"];
"1001009" -> "1000769"  [label="AST: "];
"1001009" -> "1001013"  [label="CFG: "];
"1001010" -> "1001009"  [label="AST: "];
"1001013" -> "1001009"  [label="AST: "];
"1001019" -> "1001009"  [label="CFG: "];
"1001009" -> "1001327"  [label="DDG: skb->network_header +\n\t\t\t\t\t\t fragheaderlen"];
"1001009" -> "1001327"  [label="DDG: skb->transport_header"];
"1001013" -> "1001017"  [label="CFG: "];
"1001014" -> "1001013"  [label="AST: "];
"1001017" -> "1001013"  [label="AST: "];
"1001013" -> "1001327"  [label="DDG: skb->network_header"];
"1001013" -> "1001327"  [label="DDG: fragheaderlen"];
"1000822" -> "1000835"  [label="CFG: "];
"1000822" -> "1000836"  [label="CFG: "];
"1000823" -> "1000822"  [label="AST: "];
"1000835" -> "1000822"  [label="AST: "];
"1000836" -> "1000822"  [label="AST: "];
"1000837" -> "1000822"  [label="CFG: "];
"1000822" -> "1001327"  [label="DDG: cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG)"];
"1000822" -> "1001327"  [label="DDG: mtu"];
"1000822" -> "1001327"  [label="DDG: maxfraglen"];
"1000824" -> "1000822"  [label="DDG: mtu"];
"1001138" -> "1001136"  [label="AST: "];
"1001138" -> "1001140"  [label="CFG: "];
"1001139" -> "1001138"  [label="AST: "];
"1001140" -> "1001138"  [label="AST: "];
"1001146" -> "1001138"  [label="CFG: "];
"1001138" -> "1001327"  [label="DDG: skb->len"];
"1001028" -> "1001030"  [label="CFG: "];
"1001029" -> "1001028"  [label="AST: "];
"1001030" -> "1001028"  [label="AST: "];
"1001031" -> "1001028"  [label="CFG: "];
"1001102" -> "1001028"  [label="DDG: transhdrlen"];
"1000515" -> "1001028"  [label="DDG: transhdrlen"];
"1000557" -> "1001028"  [label="DDG: transhdrlen"];
"1000120" -> "1001028"  [label="DDG: transhdrlen"];
"1001003" -> "1000769"  [label="AST: "];
"1001003" -> "1001005"  [label="CFG: "];
"1001004" -> "1001003"  [label="AST: "];
"1001005" -> "1001003"  [label="AST: "];
"1001007" -> "1001003"  [label="CFG: "];
"1001003" -> "1001327"  [label="DDG: skb_set_network_header(skb, exthdrlen)"];
"1001003" -> "1001327"  [label="DDG: exthdrlen"];
"1001105" -> "1001003"  [label="DDG: exthdrlen"];
"1000560" -> "1001003"  [label="DDG: exthdrlen"];
"1000504" -> "1001003"  [label="DDG: exthdrlen"];
"1001003" -> "1001066"  [label="DDG: skb"];
"1001066" -> "1001061"  [label="AST: "];
"1001066" -> "1001067"  [label="CFG: "];
"1001067" -> "1001066"  [label="AST: "];
"1001068" -> "1001066"  [label="CFG: "];
"1001066" -> "1001327"  [label="DDG: kfree_skb(skb)"];
"1001066" -> "1001327"  [label="DDG: skb"];
"1001144" -> "1001143"  [label="AST: "];
"1001144" -> "1001154"  [label="CFG: "];
"1001154" -> "1001144"  [label="AST: "];
"1001157" -> "1001144"  [label="CFG: "];
"1001300" -> "1001144"  [label="CFG: "];
"1001144" -> "1001327"  [label="DDG: getfrag(from, skb_put(skb, copy),\n\t\t\t\t\t\toffset, copy, off, skb)"];
"1001144" -> "1001327"  [label="DDG: getfrag(from, skb_put(skb, copy),\n\t\t\t\t\t\toffset, copy, off, skb) < 0"];
"1001156" -> "1001155"  [label="AST: "];
"1001156" -> "1001158"  [label="CFG: "];
"1001157" -> "1001156"  [label="AST: "];
"1001158" -> "1001156"  [label="AST: "];
"1001160" -> "1001156"  [label="CFG: "];
"1001156" -> "1001327"  [label="DDG: __skb_trim(skb, off)"];
"1001156" -> "1001327"  [label="DDG: off"];
"1001156" -> "1001327"  [label="DDG: skb"];
"1001313" -> "1000128"  [label="AST: "];
"1001313" -> "1001317"  [label="CFG: "];
"1001314" -> "1001313"  [label="AST: "];
"1001317" -> "1001313"  [label="AST: "];
"1001320" -> "1001313"  [label="CFG: "];
"1001313" -> "1001327"  [label="DDG: length"];
"1001313" -> "1001327"  [label="DDG: cork->length"];
"1000701" -> "1001313"  [label="DDG: length"];
"1000119" -> "1001313"  [label="DDG: length"];
"1000654" -> "1001313"  [label="DDG: length"];
"1000738" -> "1001313"  [label="DDG: cork->length"];
"1000648" -> "1001313"  [label="DDG: cork->length"];
"1000824" -> "1001313"  [label="DDG: cork->length"];
"1000596" -> "1000602"  [label="CFG: "];
"1000602" -> "1000596"  [label="AST: "];
"1000596" -> "1001327"  [label="DDG: (mtu - fragheaderlen) & ~7"];
"1000596" -> "1001327"  [label="DDG: fragheaderlen - sizeof(struct frag_hdr)"];
"1000602" -> "1000596"  [label="DDG: fragheaderlen"];
"1000602" -> "1000604"  [label="CFG: "];
"1000603" -> "1000602"  [label="AST: "];
"1000604" -> "1000602"  [label="AST: "];
"1000602" -> "1001327"  [label="DDG: fragheaderlen"];
"1000602" -> "1000624"  [label="DDG: fragheaderlen"];
"1000602" -> "1000701"  [label="DDG: fragheaderlen"];
"1000624" -> "1000621"  [label="AST: "];
"1000624" -> "1000626"  [label="CFG: "];
"1000625" -> "1000624"  [label="AST: "];
"1000626" -> "1000624"  [label="AST: "];
"1000621" -> "1000624"  [label="CFG: "];
"1000624" -> "1001327"  [label="DDG: fragheaderlen"];
"1000624" -> "1001327"  [label="DDG: IPV6_MAXPLEN"];
"1000624" -> "1000615"  [label="DDG: IPV6_MAXPLEN"];
"1000624" -> "1000615"  [label="DDG: fragheaderlen"];
"1000624" -> "1000621"  [label="DDG: IPV6_MAXPLEN"];
"1000624" -> "1000621"  [label="DDG: fragheaderlen"];
"1000624" -> "1000701"  [label="DDG: fragheaderlen"];
"1000615" -> "1000614"  [label="AST: "];
"1000615" -> "1000621"  [label="CFG: "];
"1000616" -> "1000615"  [label="AST: "];
"1000621" -> "1000615"  [label="AST: "];
"1000629" -> "1000615"  [label="CFG: "];
"1000641" -> "1000615"  [label="CFG: "];
"1000615" -> "1001327"  [label="DDG: sizeof(struct ipv6hdr) + IPV6_MAXPLEN - fragheaderlen"];
"1000615" -> "1001327"  [label="DDG: cork->length + length"];
"1000615" -> "1001327"  [label="DDG: cork->length + length > sizeof(struct ipv6hdr) + IPV6_MAXPLEN - fragheaderlen"];
"1000499" -> "1000615"  [label="DDG: cork->length"];
"1000512" -> "1000615"  [label="DDG: length"];
"1000119" -> "1000615"  [label="DDG: length"];
"1000622" -> "1000621"  [label="AST: "];
"1000621" -> "1001327"  [label="DDG: IPV6_MAXPLEN - fragheaderlen"];
"1000701" -> "1000699"  [label="AST: "];
"1000701" -> "1000711"  [label="CFG: "];
"1000702" -> "1000701"  [label="AST: "];
"1000703" -> "1000701"  [label="AST: "];
"1000704" -> "1000701"  [label="AST: "];
"1000705" -> "1000701"  [label="AST: "];
"1000706" -> "1000701"  [label="AST: "];
"1000707" -> "1000701"  [label="AST: "];
"1000708" -> "1000701"  [label="AST: "];
"1000709" -> "1000701"  [label="AST: "];
"1000710" -> "1000701"  [label="AST: "];
"1000711" -> "1000701"  [label="AST: "];
"1000699" -> "1000701"  [label="CFG: "];
"1000701" -> "1001327"  [label="DDG: mtu"];
"1000701" -> "1001327"  [label="DDG: rt"];
"1000701" -> "1001327"  [label="DDG: transhdrlen"];
"1000701" -> "1001327"  [label="DDG: flags"];
"1000701" -> "1001327"  [label="DDG: length"];
"1000701" -> "1001327"  [label="DDG: hh_len"];
"1000701" -> "1001327"  [label="DDG: sk"];
"1000701" -> "1001327"  [label="DDG: getfrag"];
"1000701" -> "1001327"  [label="DDG: fragheaderlen"];
"1000701" -> "1001327"  [label="DDG: from"];
"1000701" -> "1000699"  [label="DDG: rt"];
"1000701" -> "1000699"  [label="DDG: fragheaderlen"];
"1000701" -> "1000699"  [label="DDG: from"];
"1000701" -> "1000699"  [label="DDG: getfrag"];
"1000701" -> "1000699"  [label="DDG: hh_len"];
"1000701" -> "1000699"  [label="DDG: flags"];
"1000701" -> "1000699"  [label="DDG: sk"];
"1000701" -> "1000699"  [label="DDG: mtu"];
"1000701" -> "1000699"  [label="DDG: length"];
"1000701" -> "1000699"  [label="DDG: transhdrlen"];
"1000644" -> "1000701"  [label="DDG: sk"];
"1000137" -> "1000701"  [label="DDG: sk"];
"1000116" -> "1000701"  [label="DDG: sk"];
"1000117" -> "1000701"  [label="DDG: getfrag"];
"1000118" -> "1000701"  [label="DDG: from"];
"1000654" -> "1000701"  [label="DDG: length"];
"1000654" -> "1000701"  [label="DDG: mtu"];
"1000119" -> "1000701"  [label="DDG: length"];
"1000571" -> "1000701"  [label="DDG: hh_len"];
"1000515" -> "1000701"  [label="DDG: transhdrlen"];
"1000557" -> "1000701"  [label="DDG: transhdrlen"];
"1000120" -> "1000701"  [label="DDG: transhdrlen"];
"1000162" -> "1000701"  [label="DDG: flags"];
"1000126" -> "1000701"  [label="DDG: flags"];
"1000531" -> "1000701"  [label="DDG: rt"];
"1000125" -> "1000701"  [label="DDG: rt"];
"1000699" -> "1000698"  [label="AST: "];
"1000700" -> "1000699"  [label="AST: "];
"1000713" -> "1000699"  [label="CFG: "];
"1000699" -> "1001327"  [label="DDG: err"];
"1000699" -> "1001327"  [label="DDG: ip6_ufo_append_data(sk, getfrag, from, length,\n\t\t\t\t\t\t  hh_len, fragheaderlen,\n\t\t\t\t\t\t  transhdrlen, mtu, flags, rt)"];
"1000699" -> "1001325"  [label="DDG: err"];
"1001325" -> "1000128"  [label="AST: "];
"1001325" -> "1001326"  [label="CFG: "];
"1001326" -> "1001325"  [label="AST: "];
"1001327" -> "1001325"  [label="CFG: "];
"1001325" -> "1001327"  [label="DDG: <RET>"];
"1001326" -> "1001325"  [label="DDG: err"];
"1001178" -> "1001325"  [label="DDG: err"];
"1001087" -> "1001325"  [label="DDG: err"];
"1001308" -> "1001325"  [label="DDG: err"];
"1001062" -> "1001325"  [label="DDG: err"];
"1001159" -> "1001325"  [label="DDG: err"];
"1000954" -> "1001325"  [label="DDG: err"];
"1001200" -> "1001325"  [label="DDG: err"];
"1000607" -> "1000606"  [label="AST: "];
"1000607" -> "1000609"  [label="CFG: "];
"1000608" -> "1000607"  [label="AST: "];
"1000609" -> "1000607"  [label="AST: "];
"1000618" -> "1000607"  [label="CFG: "];
"1000641" -> "1000607"  [label="CFG: "];
"1000607" -> "1001327"  [label="DDG: mtu <= sizeof(struct ipv6hdr) + IPV6_MAXPLEN"];
"1000607" -> "1001327"  [label="DDG: sizeof(struct ipv6hdr) + IPV6_MAXPLEN"];
"1000607" -> "1000632"  [label="DDG: mtu"];
"1000607" -> "1000654"  [label="DDG: mtu"];
"1000632" -> "1000628"  [label="AST: "];
"1000632" -> "1000634"  [label="CFG: "];
"1000633" -> "1000632"  [label="AST: "];
"1000634" -> "1000632"  [label="AST: "];
"1000628" -> "1000632"  [label="CFG: "];
"1000632" -> "1001327"  [label="DDG: mtu"];
"1000632" -> "1001327"  [label="DDG: exthdrlen"];
"1000632" -> "1000628"  [label="DDG: mtu"];
"1000632" -> "1000628"  [label="DDG: exthdrlen"];
"1000560" -> "1000632"  [label="DDG: exthdrlen"];
"1000504" -> "1000632"  [label="DDG: exthdrlen"];
"1000628" -> "1000627"  [label="AST: "];
"1000629" -> "1000628"  [label="AST: "];
"1000630" -> "1000628"  [label="AST: "];
"1000631" -> "1000628"  [label="AST: "];
"1000637" -> "1000628"  [label="CFG: "];
"1000628" -> "1001327"  [label="DDG: sk"];
"1000628" -> "1001327"  [label="DDG: mtu-exthdrlen"];
"1000628" -> "1001327"  [label="DDG: fl6"];
"1000628" -> "1001327"  [label="DDG: ipv6_local_error(sk, EMSGSIZE, fl6, mtu-exthdrlen)"];
"1000137" -> "1000628"  [label="DDG: sk"];
"1000116" -> "1000628"  [label="DDG: sk"];
"1000538" -> "1000628"  [label="DDG: fl6"];
"1000124" -> "1000628"  [label="DDG: fl6"];
"1000628" -> "1000636"  [label="DDG: EMSGSIZE"];
"1000636" -> "1000635"  [label="AST: "];
"1000636" -> "1000637"  [label="CFG: "];
"1000637" -> "1000636"  [label="AST: "];
"1000635" -> "1000636"  [label="CFG: "];
"1000636" -> "1001327"  [label="DDG: EMSGSIZE"];
"1000636" -> "1001327"  [label="DDG: -EMSGSIZE"];
"1000636" -> "1000635"  [label="DDG: -EMSGSIZE"];
"1000635" -> "1000627"  [label="AST: "];
"1001327" -> "1000635"  [label="CFG: "];
"1000635" -> "1001327"  [label="DDG: <RET>"];
"1000654" -> "1000653"  [label="AST: "];
"1000654" -> "1000656"  [label="CFG: "];
"1000655" -> "1000654"  [label="AST: "];
"1000656" -> "1000654"  [label="AST: "];
"1000660" -> "1000654"  [label="CFG: "];
"1000720" -> "1000654"  [label="CFG: "];
"1000654" -> "1001327"  [label="DDG: mtu"];
"1000654" -> "1001327"  [label="DDG: length"];
"1000654" -> "1001327"  [label="DDG: length > mtu"];
"1000119" -> "1000654"  [label="DDG: length"];
"1000512" -> "1000654"  [label="DDG: length"];
"1000654" -> "1000678"  [label="DDG: mtu"];
"1000654" -> "1000738"  [label="DDG: mtu"];
"1000654" -> "1000824"  [label="DDG: mtu"];
"1000678" -> "1000675"  [label="AST: "];
"1000678" -> "1000680"  [label="CFG: "];
"1000679" -> "1000678"  [label="AST: "];
"1000680" -> "1000678"  [label="AST: "];
"1000675" -> "1000678"  [label="CFG: "];
"1000678" -> "1001327"  [label="DDG: exthdrlen"];
"1000678" -> "1001327"  [label="DDG: mtu"];
"1000678" -> "1000675"  [label="DDG: mtu"];
"1000678" -> "1000675"  [label="DDG: exthdrlen"];
"1000560" -> "1000678"  [label="DDG: exthdrlen"];
"1000504" -> "1000678"  [label="DDG: exthdrlen"];
"1000675" -> "1000674"  [label="AST: "];
"1000676" -> "1000675"  [label="AST: "];
"1000677" -> "1000675"  [label="AST: "];
"1000683" -> "1000675"  [label="CFG: "];
"1000675" -> "1001327"  [label="DDG: mtu-exthdrlen"];
"1000675" -> "1001327"  [label="DDG: sk"];
"1000675" -> "1001327"  [label="DDG: fl6"];
"1000675" -> "1001327"  [label="DDG: ipv6_local_rxpmtu(sk, fl6, mtu-exthdrlen)"];
"1000644" -> "1000675"  [label="DDG: sk"];
"1000137" -> "1000675"  [label="DDG: sk"];
"1000116" -> "1000675"  [label="DDG: sk"];
"1000538" -> "1000675"  [label="DDG: fl6"];
"1000124" -> "1000675"  [label="DDG: fl6"];
"1000738" -> "1000737"  [label="AST: "];
"1000738" -> "1000742"  [label="CFG: "];
"1000739" -> "1000738"  [label="AST: "];
"1000742" -> "1000738"  [label="AST: "];
"1000746" -> "1000738"  [label="CFG: "];
"1000737" -> "1000738"  [label="CFG: "];
"1000738" -> "1001327"  [label="DDG: cork->length"];
"1000738" -> "1000737"  [label="DDG: cork->length"];
"1000738" -> "1000737"  [label="DDG: mtu"];
"1000648" -> "1000738"  [label="DDG: cork->length"];
"1000824" -> "1000738"  [label="DDG: cork->length"];
"1000824" -> "1000738"  [label="DDG: mtu"];
"1000738" -> "1000824"  [label="DDG: cork->length"];
"1000738" -> "1000824"  [label="DDG: mtu"];
"1000737" -> "1000743"  [label="CFG: "];
"1000743" -> "1000737"  [label="AST: "];
"1000749" -> "1000737"  [label="CFG: "];
"1000750" -> "1000737"  [label="CFG: "];
"1000737" -> "1001327"  [label="DDG: cork->length <= mtu"];
"1000737" -> "1001327"  [label="DDG: !(cork->flags & IPCORK_ALLFRAG)"];
"1000743" -> "1000737"  [label="DDG: cork->flags & IPCORK_ALLFRAG"];
"1000823" -> "1000737"  [label="DDG: !(cork->flags & IPCORK_ALLFRAG)"];
"1000737" -> "1000823"  [label="DDG: !(cork->flags & IPCORK_ALLFRAG)"];
"1000823" -> "1000824"  [label="CFG: "];
"1000823" -> "1000829"  [label="CFG: "];
"1000824" -> "1000823"  [label="AST: "];
"1000829" -> "1000823"  [label="AST: "];
"1000835" -> "1000823"  [label="CFG: "];
"1000836" -> "1000823"  [label="CFG: "];
"1000823" -> "1001327"  [label="DDG: !(cork->flags & IPCORK_ALLFRAG)"];
"1000823" -> "1001327"  [label="DDG: cork->length <= mtu"];
"1000824" -> "1000823"  [label="DDG: cork->length"];
"1000824" -> "1000823"  [label="DDG: mtu"];
"1000829" -> "1000823"  [label="DDG: cork->flags & IPCORK_ALLFRAG"];
"1000824" -> "1000828"  [label="CFG: "];
"1000825" -> "1000824"  [label="AST: "];
"1000828" -> "1000824"  [label="AST: "];
"1000832" -> "1000824"  [label="CFG: "];
"1000824" -> "1001327"  [label="DDG: cork->length"];
"1000648" -> "1000824"  [label="DDG: cork->length"];
"1000824" -> "1000864"  [label="DDG: mtu"];
"1000864" -> "1000849"  [label="AST: "];
"1000864" -> "1000866"  [label="CFG: "];
"1000865" -> "1000864"  [label="AST: "];
"1000866" -> "1000864"  [label="AST: "];
"1000874" -> "1000864"  [label="CFG: "];
"1000864" -> "1001327"  [label="DDG: mtu"];
}
