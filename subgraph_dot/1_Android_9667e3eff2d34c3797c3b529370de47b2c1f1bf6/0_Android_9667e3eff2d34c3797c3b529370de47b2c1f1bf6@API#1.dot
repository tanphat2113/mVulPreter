digraph "0_Android_9667e3eff2d34c3797c3b529370de47b2c1f1bf6@API" {
"1000369" [label="(Call,reply->writeInt32(err))"];
"1000361" [label="(Call,err = decrypt(inData, size, streamCTR, inputCTR, outData))"];
"1000363" [label="(Call,decrypt(inData, size, streamCTR, inputCTR, outData))"];
"1000349" [label="(Call,data.read(inData, size))"];
"1000345" [label="(Call,(uint8_t *)inData)"];
"1000333" [label="(Call,inData == NULL)"];
"1000328" [label="(Call,inData = malloc(bufSize))"];
"1000330" [label="(Call,malloc(bufSize))"];
"1000324" [label="(Call,bufSize > size)"];
"1000314" [label="(Call,bufSize = 2 * size)"];
"1000316" [label="(Call,2 * size)"];
"1000310" [label="(Call,size = data.readInt32())"];
"1000320" [label="(Call,*inData = NULL)"];
"1000353" [label="(Call,streamCTR = data.readInt32())"];
"1000357" [label="(Call,inputCTR = data.readInt64())"];
"1000342" [label="(Call,*outData = (uint8_t *)inData + size)"];
"1000372" [label="(Call,err == OK)"];
"1000386" [label="(Return,return OK;)"];
"1000353" [label="(Call,streamCTR = data.readInt32())"];
"1000334" [label="(Identifier,inData)"];
"1000367" [label="(Identifier,inputCTR)"];
"1000335" [label="(Identifier,NULL)"];
"1000386" [label="(Return,return OK;)"];
"1000369" [label="(Call,reply->writeInt32(err))"];
"1000314" [label="(Call,bufSize = 2 * size)"];
"1000350" [label="(Identifier,inData)"];
"1000322" [label="(Identifier,NULL)"];
"1000321" [label="(Identifier,inData)"];
"1000359" [label="(Call,data.readInt64())"];
"1000310" [label="(Call,size = data.readInt32())"];
"1000311" [label="(Identifier,size)"];
"1000323" [label="(ControlStructure,if (bufSize > size))"];
"1000317" [label="(Literal,2)"];
"1000381" [label="(Call,inData = outData = NULL)"];
"1000325" [label="(Identifier,bufSize)"];
"1000374" [label="(Identifier,OK)"];
"1000349" [label="(Call,data.read(inData, size))"];
"1000320" [label="(Call,*inData = NULL)"];
"1000387" [label="(Identifier,OK)"];
"1000368" [label="(Identifier,outData)"];
"1000345" [label="(Call,(uint8_t *)inData)"];
"1000333" [label="(Call,inData == NULL)"];
"1000379" [label="(Call,free(inData))"];
"1000328" [label="(Call,inData = malloc(bufSize))"];
"1000366" [label="(Identifier,streamCTR)"];
"1000358" [label="(Identifier,inputCTR)"];
"1000363" [label="(Call,decrypt(inData, size, streamCTR, inputCTR, outData))"];
"1000395" [label="(MethodReturn,status_t)"];
"1000364" [label="(Identifier,inData)"];
"1000324" [label="(Call,bufSize > size)"];
"1000312" [label="(Call,data.readInt32())"];
"1000326" [label="(Identifier,size)"];
"1000371" [label="(ControlStructure,if (err == OK))"];
"1000380" [label="(Identifier,inData)"];
"1000315" [label="(Identifier,bufSize)"];
"1000308" [label="(Block,)"];
"1000370" [label="(Identifier,err)"];
"1000354" [label="(Identifier,streamCTR)"];
"1000355" [label="(Call,data.readInt32())"];
"1000373" [label="(Identifier,err)"];
"1000383" [label="(Call,outData = NULL)"];
"1000376" [label="(Call,reply->write(outData, size))"];
"1000332" [label="(ControlStructure,if (inData == NULL))"];
"1000344" [label="(Call,(uint8_t *)inData + size)"];
"1000316" [label="(Call,2 * size)"];
"1000329" [label="(Identifier,inData)"];
"1000365" [label="(Identifier,size)"];
"1000372" [label="(Call,err == OK)"];
"1000327" [label="(Block,)"];
"1000330" [label="(Call,malloc(bufSize))"];
"1000318" [label="(Identifier,size)"];
"1000348" [label="(Identifier,size)"];
"1000361" [label="(Call,err = decrypt(inData, size, streamCTR, inputCTR, outData))"];
"1000342" [label="(Call,*outData = (uint8_t *)inData + size)"];
"1000351" [label="(Identifier,size)"];
"1000343" [label="(Identifier,outData)"];
"1000331" [label="(Identifier,bufSize)"];
"1000338" [label="(Identifier,ERROR_OUT_OF_RANGE)"];
"1000377" [label="(Identifier,outData)"];
"1000347" [label="(Identifier,inData)"];
"1000362" [label="(Identifier,err)"];
"1000357" [label="(Call,inputCTR = data.readInt64())"];
"1000369" -> "1000308"  [label="AST: "];
"1000369" -> "1000370"  [label="CFG: "];
"1000370" -> "1000369"  [label="AST: "];
"1000373" -> "1000369"  [label="CFG: "];
"1000369" -> "1000395"  [label="DDG: reply->writeInt32(err)"];
"1000361" -> "1000369"  [label="DDG: err"];
"1000369" -> "1000372"  [label="DDG: err"];
"1000361" -> "1000308"  [label="AST: "];
"1000361" -> "1000363"  [label="CFG: "];
"1000362" -> "1000361"  [label="AST: "];
"1000363" -> "1000361"  [label="AST: "];
"1000370" -> "1000361"  [label="CFG: "];
"1000361" -> "1000395"  [label="DDG: decrypt(inData, size, streamCTR, inputCTR, outData)"];
"1000363" -> "1000361"  [label="DDG: streamCTR"];
"1000363" -> "1000361"  [label="DDG: inputCTR"];
"1000363" -> "1000361"  [label="DDG: inData"];
"1000363" -> "1000361"  [label="DDG: size"];
"1000363" -> "1000361"  [label="DDG: outData"];
"1000363" -> "1000368"  [label="CFG: "];
"1000364" -> "1000363"  [label="AST: "];
"1000365" -> "1000363"  [label="AST: "];
"1000366" -> "1000363"  [label="AST: "];
"1000367" -> "1000363"  [label="AST: "];
"1000368" -> "1000363"  [label="AST: "];
"1000363" -> "1000395"  [label="DDG: size"];
"1000363" -> "1000395"  [label="DDG: inputCTR"];
"1000363" -> "1000395"  [label="DDG: streamCTR"];
"1000349" -> "1000363"  [label="DDG: inData"];
"1000349" -> "1000363"  [label="DDG: size"];
"1000353" -> "1000363"  [label="DDG: streamCTR"];
"1000357" -> "1000363"  [label="DDG: inputCTR"];
"1000342" -> "1000363"  [label="DDG: outData"];
"1000363" -> "1000376"  [label="DDG: outData"];
"1000363" -> "1000376"  [label="DDG: size"];
"1000363" -> "1000379"  [label="DDG: inData"];
"1000349" -> "1000308"  [label="AST: "];
"1000349" -> "1000351"  [label="CFG: "];
"1000350" -> "1000349"  [label="AST: "];
"1000351" -> "1000349"  [label="AST: "];
"1000354" -> "1000349"  [label="CFG: "];
"1000349" -> "1000395"  [label="DDG: data.read(inData, size)"];
"1000345" -> "1000349"  [label="DDG: inData"];
"1000324" -> "1000349"  [label="DDG: size"];
"1000345" -> "1000344"  [label="AST: "];
"1000345" -> "1000347"  [label="CFG: "];
"1000346" -> "1000345"  [label="AST: "];
"1000347" -> "1000345"  [label="AST: "];
"1000348" -> "1000345"  [label="CFG: "];
"1000345" -> "1000342"  [label="DDG: inData"];
"1000345" -> "1000344"  [label="DDG: inData"];
"1000333" -> "1000345"  [label="DDG: inData"];
"1000333" -> "1000332"  [label="AST: "];
"1000333" -> "1000335"  [label="CFG: "];
"1000334" -> "1000333"  [label="AST: "];
"1000335" -> "1000333"  [label="AST: "];
"1000338" -> "1000333"  [label="CFG: "];
"1000343" -> "1000333"  [label="CFG: "];
"1000333" -> "1000395"  [label="DDG: inData"];
"1000333" -> "1000395"  [label="DDG: inData == NULL"];
"1000333" -> "1000395"  [label="DDG: NULL"];
"1000328" -> "1000333"  [label="DDG: inData"];
"1000320" -> "1000333"  [label="DDG: inData"];
"1000333" -> "1000381"  [label="DDG: NULL"];
"1000333" -> "1000383"  [label="DDG: NULL"];
"1000328" -> "1000327"  [label="AST: "];
"1000328" -> "1000330"  [label="CFG: "];
"1000329" -> "1000328"  [label="AST: "];
"1000330" -> "1000328"  [label="AST: "];
"1000334" -> "1000328"  [label="CFG: "];
"1000328" -> "1000395"  [label="DDG: malloc(bufSize)"];
"1000330" -> "1000328"  [label="DDG: bufSize"];
"1000330" -> "1000331"  [label="CFG: "];
"1000331" -> "1000330"  [label="AST: "];
"1000330" -> "1000395"  [label="DDG: bufSize"];
"1000324" -> "1000330"  [label="DDG: bufSize"];
"1000324" -> "1000323"  [label="AST: "];
"1000324" -> "1000326"  [label="CFG: "];
"1000325" -> "1000324"  [label="AST: "];
"1000326" -> "1000324"  [label="AST: "];
"1000329" -> "1000324"  [label="CFG: "];
"1000334" -> "1000324"  [label="CFG: "];
"1000324" -> "1000395"  [label="DDG: size"];
"1000324" -> "1000395"  [label="DDG: bufSize > size"];
"1000324" -> "1000395"  [label="DDG: bufSize"];
"1000314" -> "1000324"  [label="DDG: bufSize"];
"1000316" -> "1000324"  [label="DDG: size"];
"1000324" -> "1000342"  [label="DDG: size"];
"1000324" -> "1000344"  [label="DDG: size"];
"1000314" -> "1000308"  [label="AST: "];
"1000314" -> "1000316"  [label="CFG: "];
"1000315" -> "1000314"  [label="AST: "];
"1000316" -> "1000314"  [label="AST: "];
"1000321" -> "1000314"  [label="CFG: "];
"1000314" -> "1000395"  [label="DDG: 2 * size"];
"1000316" -> "1000314"  [label="DDG: 2"];
"1000316" -> "1000314"  [label="DDG: size"];
"1000316" -> "1000318"  [label="CFG: "];
"1000317" -> "1000316"  [label="AST: "];
"1000318" -> "1000316"  [label="AST: "];
"1000310" -> "1000316"  [label="DDG: size"];
"1000310" -> "1000308"  [label="AST: "];
"1000310" -> "1000312"  [label="CFG: "];
"1000311" -> "1000310"  [label="AST: "];
"1000312" -> "1000310"  [label="AST: "];
"1000315" -> "1000310"  [label="CFG: "];
"1000310" -> "1000395"  [label="DDG: data.readInt32()"];
"1000320" -> "1000308"  [label="AST: "];
"1000320" -> "1000322"  [label="CFG: "];
"1000321" -> "1000320"  [label="AST: "];
"1000322" -> "1000320"  [label="AST: "];
"1000325" -> "1000320"  [label="CFG: "];
"1000353" -> "1000308"  [label="AST: "];
"1000353" -> "1000355"  [label="CFG: "];
"1000354" -> "1000353"  [label="AST: "];
"1000355" -> "1000353"  [label="AST: "];
"1000358" -> "1000353"  [label="CFG: "];
"1000353" -> "1000395"  [label="DDG: data.readInt32()"];
"1000357" -> "1000308"  [label="AST: "];
"1000357" -> "1000359"  [label="CFG: "];
"1000358" -> "1000357"  [label="AST: "];
"1000359" -> "1000357"  [label="AST: "];
"1000362" -> "1000357"  [label="CFG: "];
"1000357" -> "1000395"  [label="DDG: data.readInt64()"];
"1000342" -> "1000308"  [label="AST: "];
"1000342" -> "1000344"  [label="CFG: "];
"1000343" -> "1000342"  [label="AST: "];
"1000344" -> "1000342"  [label="AST: "];
"1000350" -> "1000342"  [label="CFG: "];
"1000342" -> "1000395"  [label="DDG: (uint8_t *)inData + size"];
"1000372" -> "1000371"  [label="AST: "];
"1000372" -> "1000374"  [label="CFG: "];
"1000373" -> "1000372"  [label="AST: "];
"1000374" -> "1000372"  [label="AST: "];
"1000377" -> "1000372"  [label="CFG: "];
"1000380" -> "1000372"  [label="CFG: "];
"1000372" -> "1000395"  [label="DDG: err"];
"1000372" -> "1000395"  [label="DDG: err == OK"];
"1000372" -> "1000395"  [label="DDG: OK"];
"1000372" -> "1000386"  [label="DDG: OK"];
"1000386" -> "1000308"  [label="AST: "];
"1000386" -> "1000387"  [label="CFG: "];
"1000387" -> "1000386"  [label="AST: "];
"1000395" -> "1000386"  [label="CFG: "];
"1000386" -> "1000395"  [label="DDG: <RET>"];
"1000387" -> "1000386"  [label="DDG: OK"];
}
