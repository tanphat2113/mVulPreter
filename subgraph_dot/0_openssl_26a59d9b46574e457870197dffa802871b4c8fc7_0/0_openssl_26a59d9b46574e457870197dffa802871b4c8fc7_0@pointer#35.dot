digraph "0_openssl_26a59d9b46574e457870197dffa802871b4c8fc7_0@pointer" {
"1000354" [label="(Call,s->version=TLS1_VERSION)"];
"1000687" [label="(Call,s->version <= TLS_MAX_VERSION)"];
"1000686" [label="(Call,OPENSSL_assert(s->version <= TLS_MAX_VERSION))"];
"1000695" [label="(Call,s->version < TLS1_VERSION)"];
"1000693" [label="(Call,FIPS_mode() && (s->version < TLS1_VERSION))"];
"1001078" [label="(Call,ssl23_get_server_method(s->version))"];
"1001074" [label="(Call,s->method = ssl23_get_server_method(s->version))"];
"1001083" [label="(Call,s->method == NULL)"];
"1001105" [label="(Call,s->s3->rbuf.buf == NULL)"];
"1001119" [label="(Call,s->packet= &(s->s3->rbuf.buf[0]))"];
"1001133" [label="(Call,memcpy(s->packet,buf,n))"];
"1001139" [label="(Call,s->s3->rbuf.left=n)"];
"1001183" [label="(Call,s->version == TLS1_2_VERSION)"];
"1001195" [label="(Call,s->version == TLS1_1_VERSION)"];
"1001207" [label="(Call,s->version == TLS1_VERSION)"];
"1000165" [label="(Call,n=0)"];
"1001187" [label="(Identifier,TLS1_2_VERSION)"];
"1001073" [label="(Block,)"];
"1001078" [label="(Call,ssl23_get_server_method(s->version))"];
"1001211" [label="(Identifier,TLS1_VERSION)"];
"1001083" [label="(Call,s->method == NULL)"];
"1001082" [label="(ControlStructure,if (s->method == NULL))"];
"1000686" [label="(Call,OPENSSL_assert(s->version <= TLS_MAX_VERSION))"];
"1000373" [label="(Call,s->version=SSL3_VERSION)"];
"1001087" [label="(Identifier,NULL)"];
"1000688" [label="(Call,s->version)"];
"1000310" [label="(Call,s->version=TLS1_2_VERSION)"];
"1000586" [label="(Call,s->version=SSL3_VERSION)"];
"1000355" [label="(Call,s->version)"];
"1001105" [label="(Call,s->s3->rbuf.buf == NULL)"];
"1001138" [label="(Identifier,n)"];
"1001152" [label="(Identifier,s)"];
"1001106" [label="(Call,s->s3->rbuf.buf)"];
"1001182" [label="(ControlStructure,if (s->version == TLS1_2_VERSION))"];
"1001085" [label="(Identifier,s)"];
"1001206" [label="(ControlStructure,if (s->version == TLS1_VERSION))"];
"1000687" [label="(Call,s->version <= TLS_MAX_VERSION)"];
"1000529" [label="(Call,s->version=TLS1_2_VERSION)"];
"1000693" [label="(Call,FIPS_mode() && (s->version < TLS1_VERSION))"];
"1001143" [label="(Identifier,s)"];
"1001140" [label="(Call,s->s3->rbuf.left)"];
"1001137" [label="(Identifier,buf)"];
"1001208" [label="(Call,s->version)"];
"1000147" [label="(Block,)"];
"1001252" [label="(MethodReturn,int)"];
"1000213" [label="(Call,memcpy(buf,p,n))"];
"1001079" [label="(Call,s->version)"];
"1001195" [label="(Call,s->version == TLS1_1_VERSION)"];
"1001135" [label="(Identifier,s)"];
"1000569" [label="(Call,s->version=TLS1_VERSION)"];
"1000361" [label="(Identifier,s)"];
"1001184" [label="(Call,s->version)"];
"1001090" [label="(Identifier,SSL_F_SSL23_GET_CLIENT_HELLO)"];
"1001216" [label="(Identifier,s)"];
"1000354" [label="(Call,s->version=TLS1_VERSION)"];
"1000404" [label="(Call,s->version=SSL3_VERSION)"];
"1001075" [label="(Call,s->method)"];
"1000335" [label="(Call,s->version=TLS1_1_VERSION)"];
"1001207" [label="(Call,s->version == TLS1_VERSION)"];
"1001096" [label="(Identifier,s)"];
"1001120" [label="(Call,s->packet)"];
"1001133" [label="(Call,memcpy(s->packet,buf,n))"];
"1000150" [label="(Call,*buf= &(buf_space[0]))"];
"1001139" [label="(Call,s->s3->rbuf.left=n)"];
"1001190" [label="(Identifier,s)"];
"1001194" [label="(ControlStructure,if (s->version == TLS1_1_VERSION))"];
"1000692" [label="(ControlStructure,if (FIPS_mode() && (s->version < TLS1_VERSION)))"];
"1001123" [label="(Call,&(s->s3->rbuf.buf[0]))"];
"1000621" [label="(Call,s->version=TLS1_VERSION)"];
"1000691" [label="(Identifier,TLS_MAX_VERSION)"];
"1000358" [label="(Identifier,TLS1_VERSION)"];
"1001202" [label="(Identifier,s)"];
"1001117" [label="(Identifier,s)"];
"1001074" [label="(Call,s->method = ssl23_get_server_method(s->version))"];
"1001134" [label="(Call,s->packet)"];
"1001183" [label="(Call,s->version == TLS1_2_VERSION)"];
"1000552" [label="(Call,s->version=TLS1_1_VERSION)"];
"1001121" [label="(Identifier,s)"];
"1000695" [label="(Call,s->version < TLS1_VERSION)"];
"1000694" [label="(Call,FIPS_mode())"];
"1001147" [label="(Identifier,n)"];
"1001196" [label="(Call,s->version)"];
"1001225" [label="(Identifier,s)"];
"1001104" [label="(ControlStructure,if (s->s3->rbuf.buf == NULL))"];
"1000353" [label="(Block,)"];
"1001199" [label="(Identifier,TLS1_1_VERSION)"];
"1000699" [label="(Identifier,TLS1_VERSION)"];
"1001209" [label="(Identifier,s)"];
"1001084" [label="(Call,s->method)"];
"1001197" [label="(Identifier,s)"];
"1000604" [label="(Call,s->version=SSL3_VERSION)"];
"1000696" [label="(Call,s->version)"];
"1000702" [label="(Identifier,SSL_F_SSL23_GET_CLIENT_HELLO)"];
"1000708" [label="(Identifier,s)"];
"1000759" [label="(Call,n < 9)"];
"1001113" [label="(Identifier,NULL)"];
"1001119" [label="(Call,s->packet= &(s->s3->rbuf.buf[0]))"];
"1000354" -> "1000353"  [label="AST: "];
"1000354" -> "1000358"  [label="CFG: "];
"1000355" -> "1000354"  [label="AST: "];
"1000358" -> "1000354"  [label="AST: "];
"1000361" -> "1000354"  [label="CFG: "];
"1000354" -> "1001252"  [label="DDG: TLS1_VERSION"];
"1000354" -> "1000687"  [label="DDG: s->version"];
"1000687" -> "1000686"  [label="AST: "];
"1000687" -> "1000691"  [label="CFG: "];
"1000688" -> "1000687"  [label="AST: "];
"1000691" -> "1000687"  [label="AST: "];
"1000686" -> "1000687"  [label="CFG: "];
"1000687" -> "1001252"  [label="DDG: s->version"];
"1000687" -> "1001252"  [label="DDG: TLS_MAX_VERSION"];
"1000687" -> "1000686"  [label="DDG: s->version"];
"1000687" -> "1000686"  [label="DDG: TLS_MAX_VERSION"];
"1000335" -> "1000687"  [label="DDG: s->version"];
"1000404" -> "1000687"  [label="DDG: s->version"];
"1000310" -> "1000687"  [label="DDG: s->version"];
"1000586" -> "1000687"  [label="DDG: s->version"];
"1000529" -> "1000687"  [label="DDG: s->version"];
"1000604" -> "1000687"  [label="DDG: s->version"];
"1000569" -> "1000687"  [label="DDG: s->version"];
"1000373" -> "1000687"  [label="DDG: s->version"];
"1000552" -> "1000687"  [label="DDG: s->version"];
"1000621" -> "1000687"  [label="DDG: s->version"];
"1000687" -> "1000695"  [label="DDG: s->version"];
"1000687" -> "1001078"  [label="DDG: s->version"];
"1000687" -> "1001183"  [label="DDG: s->version"];
"1000686" -> "1000147"  [label="AST: "];
"1000694" -> "1000686"  [label="CFG: "];
"1000686" -> "1001252"  [label="DDG: s->version <= TLS_MAX_VERSION"];
"1000686" -> "1001252"  [label="DDG: OPENSSL_assert(s->version <= TLS_MAX_VERSION)"];
"1000695" -> "1000693"  [label="AST: "];
"1000695" -> "1000699"  [label="CFG: "];
"1000696" -> "1000695"  [label="AST: "];
"1000699" -> "1000695"  [label="AST: "];
"1000693" -> "1000695"  [label="CFG: "];
"1000695" -> "1001252"  [label="DDG: s->version"];
"1000695" -> "1001252"  [label="DDG: TLS1_VERSION"];
"1000695" -> "1000693"  [label="DDG: s->version"];
"1000695" -> "1000693"  [label="DDG: TLS1_VERSION"];
"1000695" -> "1001078"  [label="DDG: s->version"];
"1000695" -> "1001183"  [label="DDG: s->version"];
"1000695" -> "1001207"  [label="DDG: TLS1_VERSION"];
"1000693" -> "1000692"  [label="AST: "];
"1000693" -> "1000694"  [label="CFG: "];
"1000694" -> "1000693"  [label="AST: "];
"1000702" -> "1000693"  [label="CFG: "];
"1000708" -> "1000693"  [label="CFG: "];
"1000693" -> "1001252"  [label="DDG: FIPS_mode() && (s->version < TLS1_VERSION)"];
"1000693" -> "1001252"  [label="DDG: s->version < TLS1_VERSION"];
"1000693" -> "1001252"  [label="DDG: FIPS_mode()"];
"1001078" -> "1001074"  [label="AST: "];
"1001078" -> "1001079"  [label="CFG: "];
"1001079" -> "1001078"  [label="AST: "];
"1001074" -> "1001078"  [label="CFG: "];
"1001078" -> "1001074"  [label="DDG: s->version"];
"1001078" -> "1001183"  [label="DDG: s->version"];
"1001074" -> "1001073"  [label="AST: "];
"1001075" -> "1001074"  [label="AST: "];
"1001085" -> "1001074"  [label="CFG: "];
"1001074" -> "1001252"  [label="DDG: ssl23_get_server_method(s->version)"];
"1001074" -> "1001083"  [label="DDG: s->method"];
"1001083" -> "1001082"  [label="AST: "];
"1001083" -> "1001087"  [label="CFG: "];
"1001084" -> "1001083"  [label="AST: "];
"1001087" -> "1001083"  [label="AST: "];
"1001090" -> "1001083"  [label="CFG: "];
"1001096" -> "1001083"  [label="CFG: "];
"1001083" -> "1001252"  [label="DDG: s->method"];
"1001083" -> "1001252"  [label="DDG: s->method == NULL"];
"1001083" -> "1001105"  [label="DDG: NULL"];
"1001105" -> "1001104"  [label="AST: "];
"1001105" -> "1001113"  [label="CFG: "];
"1001106" -> "1001105"  [label="AST: "];
"1001113" -> "1001105"  [label="AST: "];
"1001117" -> "1001105"  [label="CFG: "];
"1001121" -> "1001105"  [label="CFG: "];
"1001105" -> "1001252"  [label="DDG: NULL"];
"1001105" -> "1001252"  [label="DDG: s->s3->rbuf.buf == NULL"];
"1001105" -> "1001252"  [label="DDG: s->s3->rbuf.buf"];
"1001105" -> "1001119"  [label="DDG: s->s3->rbuf.buf"];
"1001119" -> "1001073"  [label="AST: "];
"1001119" -> "1001123"  [label="CFG: "];
"1001120" -> "1001119"  [label="AST: "];
"1001123" -> "1001119"  [label="AST: "];
"1001135" -> "1001119"  [label="CFG: "];
"1001119" -> "1001252"  [label="DDG: &(s->s3->rbuf.buf[0])"];
"1001119" -> "1001133"  [label="DDG: s->packet"];
"1001133" -> "1001073"  [label="AST: "];
"1001133" -> "1001138"  [label="CFG: "];
"1001134" -> "1001133"  [label="AST: "];
"1001137" -> "1001133"  [label="AST: "];
"1001138" -> "1001133"  [label="AST: "];
"1001143" -> "1001133"  [label="CFG: "];
"1001133" -> "1001252"  [label="DDG: s->packet"];
"1001133" -> "1001252"  [label="DDG: buf"];
"1001133" -> "1001252"  [label="DDG: memcpy(s->packet,buf,n)"];
"1000150" -> "1001133"  [label="DDG: buf"];
"1000213" -> "1001133"  [label="DDG: buf"];
"1000213" -> "1001133"  [label="DDG: n"];
"1000165" -> "1001133"  [label="DDG: n"];
"1000759" -> "1001133"  [label="DDG: n"];
"1001133" -> "1001139"  [label="DDG: n"];
"1001139" -> "1001073"  [label="AST: "];
"1001139" -> "1001147"  [label="CFG: "];
"1001140" -> "1001139"  [label="AST: "];
"1001147" -> "1001139"  [label="AST: "];
"1001152" -> "1001139"  [label="CFG: "];
"1001139" -> "1001252"  [label="DDG: s->s3->rbuf.left"];
"1001139" -> "1001252"  [label="DDG: n"];
"1001183" -> "1001182"  [label="AST: "];
"1001183" -> "1001187"  [label="CFG: "];
"1001184" -> "1001183"  [label="AST: "];
"1001187" -> "1001183"  [label="AST: "];
"1001190" -> "1001183"  [label="CFG: "];
"1001197" -> "1001183"  [label="CFG: "];
"1001183" -> "1001252"  [label="DDG: s->version"];
"1001183" -> "1001252"  [label="DDG: s->version == TLS1_2_VERSION"];
"1001183" -> "1001252"  [label="DDG: TLS1_2_VERSION"];
"1001183" -> "1001195"  [label="DDG: s->version"];
"1001195" -> "1001194"  [label="AST: "];
"1001195" -> "1001199"  [label="CFG: "];
"1001196" -> "1001195"  [label="AST: "];
"1001199" -> "1001195"  [label="AST: "];
"1001202" -> "1001195"  [label="CFG: "];
"1001209" -> "1001195"  [label="CFG: "];
"1001195" -> "1001252"  [label="DDG: TLS1_1_VERSION"];
"1001195" -> "1001252"  [label="DDG: s->version"];
"1001195" -> "1001252"  [label="DDG: s->version == TLS1_1_VERSION"];
"1001195" -> "1001207"  [label="DDG: s->version"];
"1001207" -> "1001206"  [label="AST: "];
"1001207" -> "1001211"  [label="CFG: "];
"1001208" -> "1001207"  [label="AST: "];
"1001211" -> "1001207"  [label="AST: "];
"1001216" -> "1001207"  [label="CFG: "];
"1001225" -> "1001207"  [label="CFG: "];
"1001207" -> "1001252"  [label="DDG: s->version"];
"1001207" -> "1001252"  [label="DDG: TLS1_VERSION"];
"1001207" -> "1001252"  [label="DDG: s->version == TLS1_VERSION"];
}
