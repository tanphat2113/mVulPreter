digraph "0_memcached_d9cd01ede97f4145af9781d448c62a3318952719@pointer" {
"1000188" [label="(Call,c->protocol == binary_prot)"];
"1000158" [label="(Call,c->protocol = binary_prot)"];
"1000134" [label="(Call,c->protocol == negotiating_prot)"];
"1000165" [label="(Call,c->protocol = ascii_prot)"];
"1000183" [label="(Call,prot_text(c->protocol))"];
"1000189" [label="(Call,c->protocol)"];
"1000184" [label="(Call,c->protocol)"];
"1000138" [label="(Identifier,negotiating_prot)"];
"1000477" [label="(Identifier,c)"];
"1000157" [label="(Block,)"];
"1000197" [label="(Identifier,c)"];
"1000166" [label="(Call,c->protocol)"];
"1000603" [label="(MethodReturn,static int)"];
"1000133" [label="(Call,c->protocol == negotiating_prot || c->transport == udp_transport)"];
"1000141" [label="(Identifier,c)"];
"1000135" [label="(Call,c->protocol)"];
"1000173" [label="(Identifier,settings)"];
"1000187" [label="(ControlStructure,if (c->protocol == binary_prot))"];
"1000159" [label="(Call,c->protocol)"];
"1000165" [label="(Call,c->protocol = ascii_prot)"];
"1000192" [label="(Identifier,binary_prot)"];
"1000183" [label="(Call,prot_text(c->protocol))"];
"1000158" [label="(Call,c->protocol = binary_prot)"];
"1000134" [label="(Call,c->protocol == negotiating_prot)"];
"1000177" [label="(Call,fprintf(stderr, \"%d: Client using the %s protocol\n\", c->sfd,\n                    prot_text(c->protocol)))"];
"1000169" [label="(Identifier,ascii_prot)"];
"1000164" [label="(Block,)"];
"1000162" [label="(Identifier,binary_prot)"];
"1000188" [label="(Call,c->protocol == binary_prot)"];
"1000188" -> "1000187"  [label="AST: "];
"1000188" -> "1000192"  [label="CFG: "];
"1000189" -> "1000188"  [label="AST: "];
"1000192" -> "1000188"  [label="AST: "];
"1000197" -> "1000188"  [label="CFG: "];
"1000477" -> "1000188"  [label="CFG: "];
"1000188" -> "1000603"  [label="DDG: c->protocol == binary_prot"];
"1000188" -> "1000603"  [label="DDG: c->protocol"];
"1000188" -> "1000603"  [label="DDG: binary_prot"];
"1000158" -> "1000188"  [label="DDG: c->protocol"];
"1000134" -> "1000188"  [label="DDG: c->protocol"];
"1000165" -> "1000188"  [label="DDG: c->protocol"];
"1000183" -> "1000188"  [label="DDG: c->protocol"];
"1000158" -> "1000157"  [label="AST: "];
"1000158" -> "1000162"  [label="CFG: "];
"1000159" -> "1000158"  [label="AST: "];
"1000162" -> "1000158"  [label="AST: "];
"1000173" -> "1000158"  [label="CFG: "];
"1000158" -> "1000183"  [label="DDG: c->protocol"];
"1000134" -> "1000133"  [label="AST: "];
"1000134" -> "1000138"  [label="CFG: "];
"1000135" -> "1000134"  [label="AST: "];
"1000138" -> "1000134"  [label="AST: "];
"1000141" -> "1000134"  [label="CFG: "];
"1000133" -> "1000134"  [label="CFG: "];
"1000134" -> "1000603"  [label="DDG: negotiating_prot"];
"1000134" -> "1000133"  [label="DDG: c->protocol"];
"1000134" -> "1000133"  [label="DDG: negotiating_prot"];
"1000165" -> "1000164"  [label="AST: "];
"1000165" -> "1000169"  [label="CFG: "];
"1000166" -> "1000165"  [label="AST: "];
"1000169" -> "1000165"  [label="AST: "];
"1000173" -> "1000165"  [label="CFG: "];
"1000165" -> "1000603"  [label="DDG: ascii_prot"];
"1000165" -> "1000183"  [label="DDG: c->protocol"];
"1000183" -> "1000177"  [label="AST: "];
"1000183" -> "1000184"  [label="CFG: "];
"1000184" -> "1000183"  [label="AST: "];
"1000177" -> "1000183"  [label="CFG: "];
"1000183" -> "1000177"  [label="DDG: c->protocol"];
}
