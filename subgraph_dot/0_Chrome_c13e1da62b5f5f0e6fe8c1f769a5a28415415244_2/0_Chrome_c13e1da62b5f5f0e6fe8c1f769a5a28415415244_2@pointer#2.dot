digraph "0_Chrome_c13e1da62b5f5f0e6fe8c1f769a5a28415415244_2@pointer" {
"1000327" [label="(Call,src != end)"];
"1000339" [label="(Call,src++)"];
"1000327" [label="(Call,src != end)"];
"1000309" [label="(Call,* src = reinterpret_cast<const int32 *>(\n          info->buffer()->GetRange(info->offset(), size)))"];
"1000311" [label="(Call,reinterpret_cast<const int32 *>(\n          info->buffer()->GetRange(info->offset(), size)))"];
"1000313" [label="(Call,info->buffer()->GetRange(info->offset(), size))"];
"1000302" [label="(Call,size = num_elements * num_vertices)"];
"1000304" [label="(Call,num_elements * num_vertices)"];
"1000296" [label="(Call,num_elements = info->size() * kSizeOfFloat)"];
"1000298" [label="(Call,info->size() * kSizeOfFloat)"];
"1000216" [label="(Call,SafeMultiply(elements_needed, kSizeOfFloat, &size_needed))"];
"1000193" [label="(Call,SafeAdd(elements_needed, elements_used, &elements_needed))"];
"1000140" [label="(Call,elements_needed = 0)"];
"1000179" [label="(Call,elements_used = 0)"];
"1000205" [label="(Call,kSizeOfFloat = sizeof(float))"];
"1000185" [label="(Call,SafeMultiply(num_vertices,\n                        static_cast<GLuint>(info->size()), &elements_used))"];
"1000130" [label="(Call,num_vertices == 0)"];
"1000124" [label="(Call,num_vertices = max_vertex_accessed + 1)"];
"1000102" [label="(MethodParameterIn,GLuint max_vertex_accessed)"];
"1000187" [label="(Call,static_cast<GLuint>(info->size()))"];
"1000317" [label="(Call,* end = src + num_elements)"];
"1000294" [label="(Block,)"];
"1000190" [label="(Call,&elements_used)"];
"1000299" [label="(Call,info->size())"];
"1000124" [label="(Call,num_vertices = max_vertex_accessed + 1)"];
"1000338" [label="(Call,*src++)"];
"1000194" [label="(Identifier,elements_needed)"];
"1000177" [label="(Block,)"];
"1000192" [label="(Call,!SafeAdd(elements_needed, elements_used, &elements_needed))"];
"1000289" [label="(Call,info->CanAccess(max_vertex_accessed))"];
"1000329" [label="(Identifier,end)"];
"1000141" [label="(Identifier,elements_needed)"];
"1000313" [label="(Call,info->buffer()->GetRange(info->offset(), size))"];
"1000218" [label="(Identifier,kSizeOfFloat)"];
"1000186" [label="(Identifier,num_vertices)"];
"1000184" [label="(Call,!SafeMultiply(num_vertices,\n                        static_cast<GLuint>(info->size()), &elements_used))"];
"1000324" [label="(Identifier,dst)"];
"1000309" [label="(Call,* src = reinterpret_cast<const int32 *>(\n          info->buffer()->GetRange(info->offset(), size)))"];
"1000343" [label="(Identifier,GL_ARRAY_BUFFER)"];
"1000342" [label="(Call,glBufferSubData(GL_ARRAY_BUFFER, offset, size, data.get()))"];
"1000296" [label="(Call,num_elements = info->size() * kSizeOfFloat)"];
"1000195" [label="(Identifier,elements_used)"];
"1000314" [label="(Call,info->offset())"];
"1000125" [label="(Identifier,num_vertices)"];
"1000191" [label="(Identifier,elements_used)"];
"1000140" [label="(Call,elements_needed = 0)"];
"1000142" [label="(Literal,0)"];
"1000219" [label="(Call,&size_needed)"];
"1000315" [label="(Identifier,size)"];
"1000145" [label="(Identifier,infos)"];
"1000327" [label="(Call,src != end)"];
"1000217" [label="(Identifier,elements_needed)"];
"1000311" [label="(Call,reinterpret_cast<const int32 *>(\n          info->buffer()->GetRange(info->offset(), size)))"];
"1000211" [label="(Identifier,size_needed)"];
"1000187" [label="(Call,static_cast<GLuint>(info->size()))"];
"1000129" [label="(ControlStructure,if (num_vertices == 0))"];
"1000126" [label="(Call,max_vertex_accessed + 1)"];
"1000130" [label="(Call,num_vertices == 0)"];
"1000205" [label="(Call,kSizeOfFloat = sizeof(float))"];
"1000328" [label="(Identifier,src)"];
"1000318" [label="(Identifier,end)"];
"1000302" [label="(Call,size = num_elements * num_vertices)"];
"1000189" [label="(Call,info->size())"];
"1000135" [label="(Identifier,GL_OUT_OF_MEMORY)"];
"1000306" [label="(Identifier,num_vertices)"];
"1000326" [label="(ControlStructure,while (src != end))"];
"1000215" [label="(Call,!SafeMultiply(elements_needed, kSizeOfFloat, &size_needed))"];
"1000206" [label="(Identifier,kSizeOfFloat)"];
"1000319" [label="(Call,src + num_elements)"];
"1000298" [label="(Call,info->size() * kSizeOfFloat)"];
"1000196" [label="(Call,&elements_needed)"];
"1000180" [label="(Identifier,elements_used)"];
"1000102" [label="(MethodParameterIn,GLuint max_vertex_accessed)"];
"1000297" [label="(Identifier,num_elements)"];
"1000300" [label="(Identifier,kSizeOfFloat)"];
"1000303" [label="(Identifier,size)"];
"1000132" [label="(Literal,0)"];
"1000340" [label="(Identifier,src)"];
"1000304" [label="(Call,num_elements * num_vertices)"];
"1000365" [label="(MethodReturn,bool)"];
"1000104" [label="(Block,)"];
"1000317" [label="(Call,* end = src + num_elements)"];
"1000334" [label="(Identifier,dst)"];
"1000305" [label="(Identifier,num_elements)"];
"1000216" [label="(Call,SafeMultiply(elements_needed, kSizeOfFloat, &size_needed))"];
"1000172" [label="(Call,info->CanAccess(max_vertex_accessed))"];
"1000179" [label="(Call,elements_used = 0)"];
"1000193" [label="(Call,SafeAdd(elements_needed, elements_used, &elements_needed))"];
"1000181" [label="(Literal,0)"];
"1000131" [label="(Identifier,num_vertices)"];
"1000339" [label="(Call,src++)"];
"1000185" [label="(Call,SafeMultiply(num_vertices,\n                        static_cast<GLuint>(info->size()), &elements_used))"];
"1000207" [label="(Call,sizeof(float))"];
"1000310" [label="(Identifier,src)"];
"1000327" -> "1000326"  [label="AST: "];
"1000327" -> "1000329"  [label="CFG: "];
"1000328" -> "1000327"  [label="AST: "];
"1000329" -> "1000327"  [label="AST: "];
"1000334" -> "1000327"  [label="CFG: "];
"1000343" -> "1000327"  [label="CFG: "];
"1000327" -> "1000365"  [label="DDG: src"];
"1000327" -> "1000365"  [label="DDG: end"];
"1000327" -> "1000365"  [label="DDG: src != end"];
"1000339" -> "1000327"  [label="DDG: src"];
"1000309" -> "1000327"  [label="DDG: src"];
"1000317" -> "1000327"  [label="DDG: end"];
"1000327" -> "1000339"  [label="DDG: src"];
"1000339" -> "1000338"  [label="AST: "];
"1000339" -> "1000340"  [label="CFG: "];
"1000340" -> "1000339"  [label="AST: "];
"1000338" -> "1000339"  [label="CFG: "];
"1000309" -> "1000294"  [label="AST: "];
"1000309" -> "1000311"  [label="CFG: "];
"1000310" -> "1000309"  [label="AST: "];
"1000311" -> "1000309"  [label="AST: "];
"1000318" -> "1000309"  [label="CFG: "];
"1000309" -> "1000365"  [label="DDG: reinterpret_cast<const int32 *>(\n          info->buffer()->GetRange(info->offset(), size))"];
"1000311" -> "1000309"  [label="DDG: info->buffer()->GetRange(info->offset(), size)"];
"1000309" -> "1000317"  [label="DDG: src"];
"1000309" -> "1000319"  [label="DDG: src"];
"1000311" -> "1000313"  [label="CFG: "];
"1000312" -> "1000311"  [label="AST: "];
"1000313" -> "1000311"  [label="AST: "];
"1000311" -> "1000365"  [label="DDG: info->buffer()->GetRange(info->offset(), size)"];
"1000313" -> "1000311"  [label="DDG: info->offset()"];
"1000313" -> "1000311"  [label="DDG: size"];
"1000313" -> "1000315"  [label="CFG: "];
"1000314" -> "1000313"  [label="AST: "];
"1000315" -> "1000313"  [label="AST: "];
"1000313" -> "1000365"  [label="DDG: info->offset()"];
"1000302" -> "1000313"  [label="DDG: size"];
"1000313" -> "1000342"  [label="DDG: size"];
"1000302" -> "1000294"  [label="AST: "];
"1000302" -> "1000304"  [label="CFG: "];
"1000303" -> "1000302"  [label="AST: "];
"1000304" -> "1000302"  [label="AST: "];
"1000310" -> "1000302"  [label="CFG: "];
"1000302" -> "1000365"  [label="DDG: num_elements * num_vertices"];
"1000304" -> "1000302"  [label="DDG: num_elements"];
"1000304" -> "1000302"  [label="DDG: num_vertices"];
"1000304" -> "1000306"  [label="CFG: "];
"1000305" -> "1000304"  [label="AST: "];
"1000306" -> "1000304"  [label="AST: "];
"1000304" -> "1000365"  [label="DDG: num_vertices"];
"1000296" -> "1000304"  [label="DDG: num_elements"];
"1000185" -> "1000304"  [label="DDG: num_vertices"];
"1000130" -> "1000304"  [label="DDG: num_vertices"];
"1000304" -> "1000317"  [label="DDG: num_elements"];
"1000304" -> "1000319"  [label="DDG: num_elements"];
"1000296" -> "1000294"  [label="AST: "];
"1000296" -> "1000298"  [label="CFG: "];
"1000297" -> "1000296"  [label="AST: "];
"1000298" -> "1000296"  [label="AST: "];
"1000303" -> "1000296"  [label="CFG: "];
"1000296" -> "1000365"  [label="DDG: info->size() * kSizeOfFloat"];
"1000298" -> "1000296"  [label="DDG: info->size()"];
"1000298" -> "1000296"  [label="DDG: kSizeOfFloat"];
"1000298" -> "1000300"  [label="CFG: "];
"1000299" -> "1000298"  [label="AST: "];
"1000300" -> "1000298"  [label="AST: "];
"1000298" -> "1000365"  [label="DDG: kSizeOfFloat"];
"1000216" -> "1000298"  [label="DDG: kSizeOfFloat"];
"1000216" -> "1000215"  [label="AST: "];
"1000216" -> "1000219"  [label="CFG: "];
"1000217" -> "1000216"  [label="AST: "];
"1000218" -> "1000216"  [label="AST: "];
"1000219" -> "1000216"  [label="AST: "];
"1000215" -> "1000216"  [label="CFG: "];
"1000216" -> "1000365"  [label="DDG: &size_needed"];
"1000216" -> "1000365"  [label="DDG: elements_needed"];
"1000216" -> "1000365"  [label="DDG: kSizeOfFloat"];
"1000216" -> "1000215"  [label="DDG: elements_needed"];
"1000216" -> "1000215"  [label="DDG: kSizeOfFloat"];
"1000216" -> "1000215"  [label="DDG: &size_needed"];
"1000193" -> "1000216"  [label="DDG: elements_needed"];
"1000140" -> "1000216"  [label="DDG: elements_needed"];
"1000205" -> "1000216"  [label="DDG: kSizeOfFloat"];
"1000193" -> "1000192"  [label="AST: "];
"1000193" -> "1000196"  [label="CFG: "];
"1000194" -> "1000193"  [label="AST: "];
"1000195" -> "1000193"  [label="AST: "];
"1000196" -> "1000193"  [label="AST: "];
"1000192" -> "1000193"  [label="CFG: "];
"1000193" -> "1000365"  [label="DDG: elements_needed"];
"1000193" -> "1000365"  [label="DDG: elements_used"];
"1000193" -> "1000365"  [label="DDG: &elements_needed"];
"1000193" -> "1000192"  [label="DDG: elements_needed"];
"1000193" -> "1000192"  [label="DDG: elements_used"];
"1000193" -> "1000192"  [label="DDG: &elements_needed"];
"1000140" -> "1000193"  [label="DDG: elements_needed"];
"1000179" -> "1000193"  [label="DDG: elements_used"];
"1000140" -> "1000104"  [label="AST: "];
"1000140" -> "1000142"  [label="CFG: "];
"1000141" -> "1000140"  [label="AST: "];
"1000142" -> "1000140"  [label="AST: "];
"1000145" -> "1000140"  [label="CFG: "];
"1000140" -> "1000365"  [label="DDG: elements_needed"];
"1000179" -> "1000177"  [label="AST: "];
"1000179" -> "1000181"  [label="CFG: "];
"1000180" -> "1000179"  [label="AST: "];
"1000181" -> "1000179"  [label="AST: "];
"1000186" -> "1000179"  [label="CFG: "];
"1000179" -> "1000365"  [label="DDG: elements_used"];
"1000205" -> "1000104"  [label="AST: "];
"1000205" -> "1000207"  [label="CFG: "];
"1000206" -> "1000205"  [label="AST: "];
"1000207" -> "1000205"  [label="AST: "];
"1000211" -> "1000205"  [label="CFG: "];
"1000185" -> "1000184"  [label="AST: "];
"1000185" -> "1000190"  [label="CFG: "];
"1000186" -> "1000185"  [label="AST: "];
"1000187" -> "1000185"  [label="AST: "];
"1000190" -> "1000185"  [label="AST: "];
"1000184" -> "1000185"  [label="CFG: "];
"1000185" -> "1000365"  [label="DDG: num_vertices"];
"1000185" -> "1000365"  [label="DDG: static_cast<GLuint>(info->size())"];
"1000185" -> "1000365"  [label="DDG: &elements_used"];
"1000185" -> "1000184"  [label="DDG: num_vertices"];
"1000185" -> "1000184"  [label="DDG: static_cast<GLuint>(info->size())"];
"1000185" -> "1000184"  [label="DDG: &elements_used"];
"1000130" -> "1000185"  [label="DDG: num_vertices"];
"1000187" -> "1000185"  [label="DDG: info->size()"];
"1000130" -> "1000129"  [label="AST: "];
"1000130" -> "1000132"  [label="CFG: "];
"1000131" -> "1000130"  [label="AST: "];
"1000132" -> "1000130"  [label="AST: "];
"1000135" -> "1000130"  [label="CFG: "];
"1000141" -> "1000130"  [label="CFG: "];
"1000130" -> "1000365"  [label="DDG: num_vertices == 0"];
"1000130" -> "1000365"  [label="DDG: num_vertices"];
"1000124" -> "1000130"  [label="DDG: num_vertices"];
"1000124" -> "1000104"  [label="AST: "];
"1000124" -> "1000126"  [label="CFG: "];
"1000125" -> "1000124"  [label="AST: "];
"1000126" -> "1000124"  [label="AST: "];
"1000131" -> "1000124"  [label="CFG: "];
"1000124" -> "1000365"  [label="DDG: max_vertex_accessed + 1"];
"1000102" -> "1000124"  [label="DDG: max_vertex_accessed"];
"1000102" -> "1000101"  [label="AST: "];
"1000102" -> "1000365"  [label="DDG: max_vertex_accessed"];
"1000102" -> "1000126"  [label="DDG: max_vertex_accessed"];
"1000102" -> "1000172"  [label="DDG: max_vertex_accessed"];
"1000102" -> "1000289"  [label="DDG: max_vertex_accessed"];
"1000187" -> "1000189"  [label="CFG: "];
"1000188" -> "1000187"  [label="AST: "];
"1000189" -> "1000187"  [label="AST: "];
"1000191" -> "1000187"  [label="CFG: "];
"1000187" -> "1000365"  [label="DDG: info->size()"];
"1000317" -> "1000294"  [label="AST: "];
"1000317" -> "1000319"  [label="CFG: "];
"1000318" -> "1000317"  [label="AST: "];
"1000319" -> "1000317"  [label="AST: "];
"1000324" -> "1000317"  [label="CFG: "];
"1000317" -> "1000365"  [label="DDG: src + num_elements"];
}
