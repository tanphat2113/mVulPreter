digraph "0_linux_da99466ac243f15fbba65bd261bfc75ffa1532b6@pointer" {
"1000125" [label="(Call,(int)g->head)"];
"1000124" [label="(Call,(int)g->head <= 0)"];
"1000123" [label="(Call,(int)g->head <= 0 ||\n\t    /* check for overflow in max_sector */\n\t    (int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000115" [label="(Call,(int)g->sect <= 0 ||\n\t    (int)g->head <= 0 ||\n\t    /* check for overflow in max_sector */\n\t    (int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000135" [label="(Call,g->sect * g->head)"];
"1000133" [label="(Call,(int)(g->sect * g->head))"];
"1000132" [label="(Call,(int)(g->sect * g->head) <= 0)"];
"1000131" [label="(Call,(int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000148" [label="(Call,g->sect << 2)"];
"1000147" [label="(Call,(g->sect << 2) >> FD_SIZECODE(g))"];
"1000145" [label="(Call,(unsigned char)((g->sect << 2) >> FD_SIZECODE(g)))"];
"1000144" [label="(Call,(unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0)"];
"1000143" [label="(Call,(unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000403" [label="(MethodReturn,static int)"];
"1000124" [label="(Call,(int)g->head <= 0)"];
"1000149" [label="(Call,g->sect)"];
"1000147" [label="(Call,(g->sect << 2) >> FD_SIZECODE(g))"];
"1000153" [label="(Call,FD_SIZECODE(g))"];
"1000156" [label="(Call,g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000127" [label="(Call,g->head)"];
"1000189" [label="(Identifier,type)"];
"1000152" [label="(Literal,2)"];
"1000139" [label="(Call,g->head)"];
"1000125" [label="(Call,(int)g->head)"];
"1000114" [label="(ControlStructure,if ((int)g->sect <= 0 ||\n\t    (int)g->head <= 0 ||\n\t    /* check for overflow in max_sector */\n\t    (int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0))"];
"1000159" [label="(Identifier,g)"];
"1000143" [label="(Call,(unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000115" [label="(Call,(int)g->sect <= 0 ||\n\t    (int)g->head <= 0 ||\n\t    /* check for overflow in max_sector */\n\t    (int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000136" [label="(Call,g->sect)"];
"1000131" [label="(Call,(int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000132" [label="(Call,(int)(g->sect * g->head) <= 0)"];
"1000187" [label="(Identifier,EINVAL)"];
"1000148" [label="(Call,g->sect << 2)"];
"1000116" [label="(Call,(int)g->sect <= 0)"];
"1000123" [label="(Call,(int)g->head <= 0 ||\n\t    /* check for overflow in max_sector */\n\t    (int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000133" [label="(Call,(int)(g->sect * g->head))"];
"1000155" [label="(Literal,0)"];
"1000145" [label="(Call,(unsigned char)((g->sect << 2) >> FD_SIZECODE(g)))"];
"1000154" [label="(Identifier,g)"];
"1000142" [label="(Literal,0)"];
"1000135" [label="(Call,g->sect * g->head)"];
"1000117" [label="(Call,(int)g->sect)"];
"1000144" [label="(Call,(unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0)"];
"1000130" [label="(Literal,0)"];
"1000125" -> "1000124"  [label="AST: "];
"1000125" -> "1000127"  [label="CFG: "];
"1000126" -> "1000125"  [label="AST: "];
"1000127" -> "1000125"  [label="AST: "];
"1000130" -> "1000125"  [label="CFG: "];
"1000125" -> "1000403"  [label="DDG: g->head"];
"1000125" -> "1000124"  [label="DDG: g->head"];
"1000125" -> "1000135"  [label="DDG: g->head"];
"1000124" -> "1000123"  [label="AST: "];
"1000124" -> "1000130"  [label="CFG: "];
"1000130" -> "1000124"  [label="AST: "];
"1000134" -> "1000124"  [label="CFG: "];
"1000123" -> "1000124"  [label="CFG: "];
"1000124" -> "1000403"  [label="DDG: (int)g->head"];
"1000124" -> "1000123"  [label="DDG: (int)g->head"];
"1000124" -> "1000123"  [label="DDG: 0"];
"1000123" -> "1000115"  [label="AST: "];
"1000123" -> "1000131"  [label="CFG: "];
"1000131" -> "1000123"  [label="AST: "];
"1000115" -> "1000123"  [label="CFG: "];
"1000123" -> "1000403"  [label="DDG: (int)g->head <= 0"];
"1000123" -> "1000403"  [label="DDG: (int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000123" -> "1000115"  [label="DDG: (int)g->head <= 0"];
"1000123" -> "1000115"  [label="DDG: (int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000131" -> "1000123"  [label="DDG: (int)(g->sect * g->head) <= 0"];
"1000131" -> "1000123"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000115" -> "1000114"  [label="AST: "];
"1000115" -> "1000116"  [label="CFG: "];
"1000116" -> "1000115"  [label="AST: "];
"1000187" -> "1000115"  [label="CFG: "];
"1000189" -> "1000115"  [label="CFG: "];
"1000115" -> "1000403"  [label="DDG: (int)g->head <= 0 ||\n\t    /* check for overflow in max_sector */\n\t    (int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000115" -> "1000403"  [label="DDG: (int)g->sect <= 0 ||\n\t    (int)g->head <= 0 ||\n\t    /* check for overflow in max_sector */\n\t    (int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000115" -> "1000403"  [label="DDG: (int)g->sect <= 0"];
"1000116" -> "1000115"  [label="DDG: (int)g->sect"];
"1000116" -> "1000115"  [label="DDG: 0"];
"1000135" -> "1000133"  [label="AST: "];
"1000135" -> "1000139"  [label="CFG: "];
"1000136" -> "1000135"  [label="AST: "];
"1000139" -> "1000135"  [label="AST: "];
"1000133" -> "1000135"  [label="CFG: "];
"1000135" -> "1000403"  [label="DDG: g->head"];
"1000135" -> "1000403"  [label="DDG: g->sect"];
"1000135" -> "1000133"  [label="DDG: g->sect"];
"1000135" -> "1000133"  [label="DDG: g->head"];
"1000117" -> "1000135"  [label="DDG: g->sect"];
"1000135" -> "1000148"  [label="DDG: g->sect"];
"1000133" -> "1000132"  [label="AST: "];
"1000134" -> "1000133"  [label="AST: "];
"1000142" -> "1000133"  [label="CFG: "];
"1000133" -> "1000403"  [label="DDG: g->sect * g->head"];
"1000133" -> "1000132"  [label="DDG: g->sect * g->head"];
"1000132" -> "1000131"  [label="AST: "];
"1000132" -> "1000142"  [label="CFG: "];
"1000142" -> "1000132"  [label="AST: "];
"1000146" -> "1000132"  [label="CFG: "];
"1000131" -> "1000132"  [label="CFG: "];
"1000132" -> "1000403"  [label="DDG: (int)(g->sect * g->head)"];
"1000132" -> "1000131"  [label="DDG: (int)(g->sect * g->head)"];
"1000132" -> "1000131"  [label="DDG: 0"];
"1000131" -> "1000143"  [label="CFG: "];
"1000143" -> "1000131"  [label="AST: "];
"1000131" -> "1000403"  [label="DDG: (int)(g->sect * g->head) <= 0"];
"1000131" -> "1000403"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000143" -> "1000131"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0"];
"1000143" -> "1000131"  [label="DDG: g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000148" -> "1000147"  [label="AST: "];
"1000148" -> "1000152"  [label="CFG: "];
"1000149" -> "1000148"  [label="AST: "];
"1000152" -> "1000148"  [label="AST: "];
"1000154" -> "1000148"  [label="CFG: "];
"1000148" -> "1000403"  [label="DDG: g->sect"];
"1000148" -> "1000147"  [label="DDG: g->sect"];
"1000148" -> "1000147"  [label="DDG: 2"];
"1000147" -> "1000145"  [label="AST: "];
"1000147" -> "1000153"  [label="CFG: "];
"1000153" -> "1000147"  [label="AST: "];
"1000145" -> "1000147"  [label="CFG: "];
"1000147" -> "1000403"  [label="DDG: g->sect << 2"];
"1000147" -> "1000403"  [label="DDG: FD_SIZECODE(g)"];
"1000147" -> "1000145"  [label="DDG: g->sect << 2"];
"1000147" -> "1000145"  [label="DDG: FD_SIZECODE(g)"];
"1000153" -> "1000147"  [label="DDG: g"];
"1000145" -> "1000144"  [label="AST: "];
"1000146" -> "1000145"  [label="AST: "];
"1000155" -> "1000145"  [label="CFG: "];
"1000145" -> "1000403"  [label="DDG: (g->sect << 2) >> FD_SIZECODE(g)"];
"1000145" -> "1000144"  [label="DDG: (g->sect << 2) >> FD_SIZECODE(g)"];
"1000144" -> "1000143"  [label="AST: "];
"1000144" -> "1000155"  [label="CFG: "];
"1000155" -> "1000144"  [label="AST: "];
"1000159" -> "1000144"  [label="CFG: "];
"1000143" -> "1000144"  [label="CFG: "];
"1000144" -> "1000403"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g))"];
"1000144" -> "1000143"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g))"];
"1000144" -> "1000143"  [label="DDG: 0"];
"1000143" -> "1000156"  [label="CFG: "];
"1000156" -> "1000143"  [label="AST: "];
"1000143" -> "1000403"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0"];
"1000143" -> "1000403"  [label="DDG: g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000156" -> "1000143"  [label="DDG: g->track <= 0"];
"1000156" -> "1000143"  [label="DDG: g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
}
