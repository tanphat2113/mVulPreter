digraph "0_linux_da99466ac243f15fbba65bd261bfc75ffa1532b6@pointer" {
"1000174" [label="(Call,g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK))"];
"1000178" [label="(Call,~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK))"];
"1000179" [label="(Call,FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000181" [label="(Call,FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000173" [label="(Call,(g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000162" [label="(Call,g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000156" [label="(Call,g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000143" [label="(Call,(unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000131" [label="(Call,(int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000123" [label="(Call,(int)g->head <= 0 ||\n\t    /* check for overflow in max_sector */\n\t    (int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000115" [label="(Call,(int)g->sect <= 0 ||\n\t    (int)g->head <= 0 ||\n\t    /* check for overflow in max_sector */\n\t    (int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000316" [label="(Call,oldStretch = g->stretch)"];
"1000387" [label="(Call,user_params[drive].sect ^ oldStretch)"];
"1000386" [label="(Call,(user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK))"];
"1000382" [label="(Call,DRS->maxtrack ||\n\t\t    ((user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK)))"];
"1000372" [label="(Call,DRS->maxblock > user_params[drive].sect ||\n\t\t    DRS->maxtrack ||\n\t\t    ((user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK)))"];
"1000403" [label="(MethodReturn,static int)"];
"1000124" [label="(Call,(int)g->head <= 0)"];
"1000318" [label="(Call,g->stretch)"];
"1000316" [label="(Call,oldStretch = g->stretch)"];
"1000372" [label="(Call,DRS->maxblock > user_params[drive].sect ||\n\t\t    DRS->maxtrack ||\n\t\t    ((user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK)))"];
"1000162" [label="(Call,g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000394" [label="(Call,FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000156" [label="(Call,g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000387" [label="(Call,user_params[drive].sect ^ oldStretch)"];
"1000323" [label="(Identifier,user_params)"];
"1000184" [label="(Literal,0)"];
"1000317" [label="(Identifier,oldStretch)"];
"1000400" [label="(Call,process_fd_request())"];
"1000383" [label="(Call,DRS->maxtrack)"];
"1000180" [label="(Identifier,FD_STRETCH)"];
"1000189" [label="(Identifier,type)"];
"1000373" [label="(Call,DRS->maxblock > user_params[drive].sect)"];
"1000175" [label="(Call,g->stretch)"];
"1000178" [label="(Call,~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK))"];
"1000393" [label="(Identifier,oldStretch)"];
"1000157" [label="(Call,g->track <= 0)"];
"1000182" [label="(Identifier,FD_SWAPSIDES)"];
"1000388" [label="(Call,user_params[drive].sect)"];
"1000114" [label="(ControlStructure,if ((int)g->sect <= 0 ||\n\t    (int)g->head <= 0 ||\n\t    /* check for overflow in max_sector */\n\t    (int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0))"];
"1000395" [label="(Identifier,FD_SWAPSIDES)"];
"1000163" [label="(Call,g->track > UDP->tracks >> STRETCH(g))"];
"1000143" [label="(Call,(unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000174" [label="(Call,g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK))"];
"1000115" [label="(Call,(int)g->sect <= 0 ||\n\t    (int)g->head <= 0 ||\n\t    /* check for overflow in max_sector */\n\t    (int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000371" [label="(ControlStructure,if (DRS->maxblock > user_params[drive].sect ||\n\t\t    DRS->maxtrack ||\n\t\t    ((user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK))))"];
"1000131" [label="(Call,(int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000132" [label="(Call,(int)(g->sect * g->head) <= 0)"];
"1000293" [label="(Block,)"];
"1000187" [label="(Identifier,EINVAL)"];
"1000123" [label="(Call,(int)g->head <= 0 ||\n\t    /* check for overflow in max_sector */\n\t    (int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000173" [label="(Call,(g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000183" [label="(Identifier,FD_SECTBASEMASK)"];
"1000116" [label="(Call,(int)g->sect <= 0)"];
"1000179" [label="(Call,FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000398" [label="(Identifier,bdev)"];
"1000386" [label="(Call,(user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK))"];
"1000382" [label="(Call,DRS->maxtrack ||\n\t\t    ((user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK)))"];
"1000181" [label="(Call,FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000144" [label="(Call,(unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0)"];
"1000174" -> "1000173"  [label="AST: "];
"1000174" -> "1000178"  [label="CFG: "];
"1000175" -> "1000174"  [label="AST: "];
"1000178" -> "1000174"  [label="AST: "];
"1000184" -> "1000174"  [label="CFG: "];
"1000174" -> "1000403"  [label="DDG: ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000174" -> "1000403"  [label="DDG: g->stretch"];
"1000174" -> "1000173"  [label="DDG: g->stretch"];
"1000174" -> "1000173"  [label="DDG: ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000178" -> "1000174"  [label="DDG: FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK"];
"1000174" -> "1000316"  [label="DDG: g->stretch"];
"1000178" -> "1000179"  [label="CFG: "];
"1000179" -> "1000178"  [label="AST: "];
"1000178" -> "1000403"  [label="DDG: FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK"];
"1000179" -> "1000178"  [label="DDG: FD_STRETCH"];
"1000179" -> "1000178"  [label="DDG: FD_SWAPSIDES | FD_SECTBASEMASK"];
"1000179" -> "1000181"  [label="CFG: "];
"1000180" -> "1000179"  [label="AST: "];
"1000181" -> "1000179"  [label="AST: "];
"1000179" -> "1000403"  [label="DDG: FD_SWAPSIDES | FD_SECTBASEMASK"];
"1000179" -> "1000403"  [label="DDG: FD_STRETCH"];
"1000181" -> "1000179"  [label="DDG: FD_SWAPSIDES"];
"1000181" -> "1000179"  [label="DDG: FD_SECTBASEMASK"];
"1000181" -> "1000183"  [label="CFG: "];
"1000182" -> "1000181"  [label="AST: "];
"1000183" -> "1000181"  [label="AST: "];
"1000181" -> "1000403"  [label="DDG: FD_SWAPSIDES"];
"1000181" -> "1000403"  [label="DDG: FD_SECTBASEMASK"];
"1000181" -> "1000394"  [label="DDG: FD_SWAPSIDES"];
"1000181" -> "1000394"  [label="DDG: FD_SECTBASEMASK"];
"1000173" -> "1000162"  [label="AST: "];
"1000173" -> "1000184"  [label="CFG: "];
"1000184" -> "1000173"  [label="AST: "];
"1000162" -> "1000173"  [label="CFG: "];
"1000173" -> "1000403"  [label="DDG: g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000173" -> "1000162"  [label="DDG: g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000173" -> "1000162"  [label="DDG: 0"];
"1000162" -> "1000156"  [label="AST: "];
"1000162" -> "1000163"  [label="CFG: "];
"1000163" -> "1000162"  [label="AST: "];
"1000156" -> "1000162"  [label="CFG: "];
"1000162" -> "1000403"  [label="DDG: (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000162" -> "1000403"  [label="DDG: g->track > UDP->tracks >> STRETCH(g)"];
"1000162" -> "1000156"  [label="DDG: g->track > UDP->tracks >> STRETCH(g)"];
"1000162" -> "1000156"  [label="DDG: (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000163" -> "1000162"  [label="DDG: g->track"];
"1000163" -> "1000162"  [label="DDG: UDP->tracks >> STRETCH(g)"];
"1000156" -> "1000143"  [label="AST: "];
"1000156" -> "1000157"  [label="CFG: "];
"1000157" -> "1000156"  [label="AST: "];
"1000143" -> "1000156"  [label="CFG: "];
"1000156" -> "1000403"  [label="DDG: g->track <= 0"];
"1000156" -> "1000403"  [label="DDG: g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000156" -> "1000143"  [label="DDG: g->track <= 0"];
"1000156" -> "1000143"  [label="DDG: g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000157" -> "1000156"  [label="DDG: g->track"];
"1000157" -> "1000156"  [label="DDG: 0"];
"1000143" -> "1000131"  [label="AST: "];
"1000143" -> "1000144"  [label="CFG: "];
"1000144" -> "1000143"  [label="AST: "];
"1000131" -> "1000143"  [label="CFG: "];
"1000143" -> "1000403"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0"];
"1000143" -> "1000403"  [label="DDG: g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000143" -> "1000131"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0"];
"1000143" -> "1000131"  [label="DDG: g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000144" -> "1000143"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g))"];
"1000144" -> "1000143"  [label="DDG: 0"];
"1000131" -> "1000123"  [label="AST: "];
"1000131" -> "1000132"  [label="CFG: "];
"1000132" -> "1000131"  [label="AST: "];
"1000123" -> "1000131"  [label="CFG: "];
"1000131" -> "1000403"  [label="DDG: (int)(g->sect * g->head) <= 0"];
"1000131" -> "1000403"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000131" -> "1000123"  [label="DDG: (int)(g->sect * g->head) <= 0"];
"1000131" -> "1000123"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000132" -> "1000131"  [label="DDG: (int)(g->sect * g->head)"];
"1000132" -> "1000131"  [label="DDG: 0"];
"1000123" -> "1000115"  [label="AST: "];
"1000123" -> "1000124"  [label="CFG: "];
"1000124" -> "1000123"  [label="AST: "];
"1000115" -> "1000123"  [label="CFG: "];
"1000123" -> "1000403"  [label="DDG: (int)g->head <= 0"];
"1000123" -> "1000403"  [label="DDG: (int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000123" -> "1000115"  [label="DDG: (int)g->head <= 0"];
"1000123" -> "1000115"  [label="DDG: (int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000124" -> "1000123"  [label="DDG: (int)g->head"];
"1000124" -> "1000123"  [label="DDG: 0"];
"1000115" -> "1000114"  [label="AST: "];
"1000115" -> "1000116"  [label="CFG: "];
"1000116" -> "1000115"  [label="AST: "];
"1000187" -> "1000115"  [label="CFG: "];
"1000189" -> "1000115"  [label="CFG: "];
"1000115" -> "1000403"  [label="DDG: (int)g->head <= 0 ||\n\t    /* check for overflow in max_sector */\n\t    (int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000115" -> "1000403"  [label="DDG: (int)g->sect <= 0 ||\n\t    (int)g->head <= 0 ||\n\t    /* check for overflow in max_sector */\n\t    (int)(g->sect * g->head) <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000115" -> "1000403"  [label="DDG: (int)g->sect <= 0"];
"1000116" -> "1000115"  [label="DDG: (int)g->sect"];
"1000116" -> "1000115"  [label="DDG: 0"];
"1000316" -> "1000293"  [label="AST: "];
"1000316" -> "1000318"  [label="CFG: "];
"1000317" -> "1000316"  [label="AST: "];
"1000318" -> "1000316"  [label="AST: "];
"1000323" -> "1000316"  [label="CFG: "];
"1000316" -> "1000403"  [label="DDG: g->stretch"];
"1000316" -> "1000403"  [label="DDG: oldStretch"];
"1000316" -> "1000387"  [label="DDG: oldStretch"];
"1000387" -> "1000386"  [label="AST: "];
"1000387" -> "1000393"  [label="CFG: "];
"1000388" -> "1000387"  [label="AST: "];
"1000393" -> "1000387"  [label="AST: "];
"1000395" -> "1000387"  [label="CFG: "];
"1000387" -> "1000403"  [label="DDG: oldStretch"];
"1000387" -> "1000403"  [label="DDG: user_params[drive].sect"];
"1000387" -> "1000386"  [label="DDG: user_params[drive].sect"];
"1000387" -> "1000386"  [label="DDG: oldStretch"];
"1000373" -> "1000387"  [label="DDG: user_params[drive].sect"];
"1000386" -> "1000382"  [label="AST: "];
"1000386" -> "1000394"  [label="CFG: "];
"1000394" -> "1000386"  [label="AST: "];
"1000382" -> "1000386"  [label="CFG: "];
"1000386" -> "1000403"  [label="DDG: FD_SWAPSIDES | FD_SECTBASEMASK"];
"1000386" -> "1000403"  [label="DDG: user_params[drive].sect ^ oldStretch"];
"1000386" -> "1000382"  [label="DDG: user_params[drive].sect ^ oldStretch"];
"1000386" -> "1000382"  [label="DDG: FD_SWAPSIDES | FD_SECTBASEMASK"];
"1000394" -> "1000386"  [label="DDG: FD_SWAPSIDES"];
"1000394" -> "1000386"  [label="DDG: FD_SECTBASEMASK"];
"1000382" -> "1000372"  [label="AST: "];
"1000382" -> "1000383"  [label="CFG: "];
"1000383" -> "1000382"  [label="AST: "];
"1000372" -> "1000382"  [label="CFG: "];
"1000382" -> "1000403"  [label="DDG: DRS->maxtrack"];
"1000382" -> "1000403"  [label="DDG: (user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000382" -> "1000372"  [label="DDG: DRS->maxtrack"];
"1000382" -> "1000372"  [label="DDG: (user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000372" -> "1000371"  [label="AST: "];
"1000372" -> "1000373"  [label="CFG: "];
"1000373" -> "1000372"  [label="AST: "];
"1000398" -> "1000372"  [label="CFG: "];
"1000400" -> "1000372"  [label="CFG: "];
"1000372" -> "1000403"  [label="DDG: DRS->maxblock > user_params[drive].sect"];
"1000372" -> "1000403"  [label="DDG: DRS->maxtrack ||\n\t\t    ((user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK))"];
"1000372" -> "1000403"  [label="DDG: DRS->maxblock > user_params[drive].sect ||\n\t\t    DRS->maxtrack ||\n\t\t    ((user_params[drive].sect ^ oldStretch) &\n\t\t     (FD_SWAPSIDES | FD_SECTBASEMASK))"];
"1000373" -> "1000372"  [label="DDG: DRS->maxblock"];
"1000373" -> "1000372"  [label="DDG: user_params[drive].sect"];
}
