digraph "0_linux_e0c9c0afd2fc958ffa34b697972721d81df8a56f_0@pointer" {
"1000122" [label="(Call,p = next_mnt(p, mnt))"];
"1000124" [label="(Call,next_mnt(p, mnt))"];
"1000122" [label="(Call,p = next_mnt(p, mnt))"];
"1000118" [label="(Call,p = mnt)"];
"1000115" [label="(Call,propagate_mount_unlock(mnt))"];
"1000105" [label="(MethodParameterIn,struct mount *mnt)"];
"1000201" [label="(Call,mnt_has_parent(p))"];
"1000200" [label="(Call,mnt_has_parent(p) &&\n\t\t\t\t(p->mnt_parent->mnt.mnt_flags & MNT_UMOUNT))"];
"1000196" [label="(Call,(how & UMOUNT_CONNECTED) &&\n\t\t\t\tmnt_has_parent(p) &&\n\t\t\t\t(p->mnt_parent->mnt.mnt_flags & MNT_UMOUNT))"];
"1000195" [label="(Call,((how & UMOUNT_CONNECTED) &&\n\t\t\t\tmnt_has_parent(p) &&\n\t\t\t\t(p->mnt_parent->mnt.mnt_flags & MNT_UMOUNT)) ||\n\t\t\t       IS_MNT_LOCKED_AND_LAZY(p))"];
"1000194" [label="(Call,!(((how & UMOUNT_CONNECTED) &&\n\t\t\t\tmnt_has_parent(p) &&\n\t\t\t\t(p->mnt_parent->mnt.mnt_flags & MNT_UMOUNT)) ||\n\t\t\t       IS_MNT_LOCKED_AND_LAZY(p)))"];
"1000192" [label="(Call,disconnect = !(((how & UMOUNT_CONNECTED) &&\n\t\t\t\tmnt_has_parent(p) &&\n\t\t\t\t(p->mnt_parent->mnt.mnt_flags & MNT_UMOUNT)) ||\n\t\t\t       IS_MNT_LOCKED_AND_LAZY(p)))"];
"1000212" [label="(Call,IS_MNT_LOCKED_AND_LAZY(p))"];
"1000231" [label="(Call,mnt_has_parent(p))"];
"1000257" [label="(Call,umount_mnt(p))"];
"1000259" [label="(Call,change_mnt_propagation(p, MS_PRIVATE))"];
"1000122" [label="(Call,p = next_mnt(p, mnt))"];
"1000117" [label="(ControlStructure,for (p = mnt; p; p = next_mnt(p, mnt)))"];
"1000236" [label="(Identifier,p)"];
"1000230" [label="(ControlStructure,if (mnt_has_parent(p)))"];
"1000116" [label="(Identifier,mnt)"];
"1000118" [label="(Call,p = mnt)"];
"1000105" [label="(MethodParameterIn,struct mount *mnt)"];
"1000217" [label="(Identifier,p)"];
"1000119" [label="(Identifier,p)"];
"1000160" [label="(Block,)"];
"1000159" [label="(Identifier,tmp_list)"];
"1000231" [label="(Call,mnt_has_parent(p))"];
"1000121" [label="(Identifier,p)"];
"1000194" [label="(Call,!(((how & UMOUNT_CONNECTED) &&\n\t\t\t\tmnt_has_parent(p) &&\n\t\t\t\t(p->mnt_parent->mnt.mnt_flags & MNT_UMOUNT)) ||\n\t\t\t       IS_MNT_LOCKED_AND_LAZY(p)))"];
"1000120" [label="(Identifier,mnt)"];
"1000213" [label="(Identifier,p)"];
"1000260" [label="(Identifier,p)"];
"1000256" [label="(Block,)"];
"1000258" [label="(Identifier,p)"];
"1000111" [label="(ControlStructure,if (how & UMOUNT_PROPAGATE))"];
"1000203" [label="(Call,p->mnt_parent->mnt.mnt_flags & MNT_UMOUNT)"];
"1000193" [label="(Identifier,disconnect)"];
"1000212" [label="(Call,IS_MNT_LOCKED_AND_LAZY(p))"];
"1000125" [label="(Identifier,p)"];
"1000257" [label="(Call,umount_mnt(p))"];
"1000200" [label="(Call,mnt_has_parent(p) &&\n\t\t\t\t(p->mnt_parent->mnt.mnt_flags & MNT_UMOUNT))"];
"1000197" [label="(Call,how & UMOUNT_CONNECTED)"];
"1000207" [label="(Identifier,p)"];
"1000262" [label="(MethodReturn,static void)"];
"1000195" [label="(Call,((how & UMOUNT_CONNECTED) &&\n\t\t\t\tmnt_has_parent(p) &&\n\t\t\t\t(p->mnt_parent->mnt.mnt_flags & MNT_UMOUNT)) ||\n\t\t\t       IS_MNT_LOCKED_AND_LAZY(p))"];
"1000192" [label="(Call,disconnect = !(((how & UMOUNT_CONNECTED) &&\n\t\t\t\tmnt_has_parent(p) &&\n\t\t\t\t(p->mnt_parent->mnt.mnt_flags & MNT_UMOUNT)) ||\n\t\t\t       IS_MNT_LOCKED_AND_LAZY(p)))"];
"1000126" [label="(Identifier,mnt)"];
"1000123" [label="(Identifier,p)"];
"1000196" [label="(Call,(how & UMOUNT_CONNECTED) &&\n\t\t\t\tmnt_has_parent(p) &&\n\t\t\t\t(p->mnt_parent->mnt.mnt_flags & MNT_UMOUNT))"];
"1000232" [label="(Identifier,p)"];
"1000115" [label="(Call,propagate_mount_unlock(mnt))"];
"1000124" [label="(Call,next_mnt(p, mnt))"];
"1000259" [label="(Call,change_mnt_propagation(p, MS_PRIVATE))"];
"1000202" [label="(Identifier,p)"];
"1000201" [label="(Call,mnt_has_parent(p))"];
"1000261" [label="(Identifier,MS_PRIVATE)"];
"1000122" -> "1000117"  [label="AST: "];
"1000122" -> "1000124"  [label="CFG: "];
"1000123" -> "1000122"  [label="AST: "];
"1000124" -> "1000122"  [label="AST: "];
"1000121" -> "1000122"  [label="CFG: "];
"1000122" -> "1000262"  [label="DDG: p"];
"1000122" -> "1000262"  [label="DDG: next_mnt(p, mnt)"];
"1000124" -> "1000122"  [label="DDG: p"];
"1000124" -> "1000122"  [label="DDG: mnt"];
"1000122" -> "1000124"  [label="DDG: p"];
"1000122" -> "1000201"  [label="DDG: p"];
"1000122" -> "1000212"  [label="DDG: p"];
"1000122" -> "1000231"  [label="DDG: p"];
"1000124" -> "1000126"  [label="CFG: "];
"1000125" -> "1000124"  [label="AST: "];
"1000126" -> "1000124"  [label="AST: "];
"1000124" -> "1000262"  [label="DDG: mnt"];
"1000118" -> "1000124"  [label="DDG: p"];
"1000105" -> "1000124"  [label="DDG: mnt"];
"1000115" -> "1000124"  [label="DDG: mnt"];
"1000118" -> "1000117"  [label="AST: "];
"1000118" -> "1000120"  [label="CFG: "];
"1000119" -> "1000118"  [label="AST: "];
"1000120" -> "1000118"  [label="AST: "];
"1000121" -> "1000118"  [label="CFG: "];
"1000118" -> "1000262"  [label="DDG: mnt"];
"1000118" -> "1000262"  [label="DDG: p"];
"1000115" -> "1000118"  [label="DDG: mnt"];
"1000105" -> "1000118"  [label="DDG: mnt"];
"1000118" -> "1000201"  [label="DDG: p"];
"1000118" -> "1000212"  [label="DDG: p"];
"1000118" -> "1000231"  [label="DDG: p"];
"1000115" -> "1000111"  [label="AST: "];
"1000115" -> "1000116"  [label="CFG: "];
"1000116" -> "1000115"  [label="AST: "];
"1000119" -> "1000115"  [label="CFG: "];
"1000115" -> "1000262"  [label="DDG: propagate_mount_unlock(mnt)"];
"1000105" -> "1000115"  [label="DDG: mnt"];
"1000105" -> "1000104"  [label="AST: "];
"1000105" -> "1000262"  [label="DDG: mnt"];
"1000201" -> "1000200"  [label="AST: "];
"1000201" -> "1000202"  [label="CFG: "];
"1000202" -> "1000201"  [label="AST: "];
"1000207" -> "1000201"  [label="CFG: "];
"1000200" -> "1000201"  [label="CFG: "];
"1000201" -> "1000200"  [label="DDG: p"];
"1000259" -> "1000201"  [label="DDG: p"];
"1000201" -> "1000212"  [label="DDG: p"];
"1000201" -> "1000231"  [label="DDG: p"];
"1000200" -> "1000196"  [label="AST: "];
"1000200" -> "1000203"  [label="CFG: "];
"1000203" -> "1000200"  [label="AST: "];
"1000196" -> "1000200"  [label="CFG: "];
"1000200" -> "1000262"  [label="DDG: p->mnt_parent->mnt.mnt_flags & MNT_UMOUNT"];
"1000200" -> "1000196"  [label="DDG: mnt_has_parent(p)"];
"1000200" -> "1000196"  [label="DDG: p->mnt_parent->mnt.mnt_flags & MNT_UMOUNT"];
"1000203" -> "1000200"  [label="DDG: p->mnt_parent->mnt.mnt_flags"];
"1000203" -> "1000200"  [label="DDG: MNT_UMOUNT"];
"1000196" -> "1000195"  [label="AST: "];
"1000196" -> "1000197"  [label="CFG: "];
"1000197" -> "1000196"  [label="AST: "];
"1000213" -> "1000196"  [label="CFG: "];
"1000195" -> "1000196"  [label="CFG: "];
"1000196" -> "1000262"  [label="DDG: mnt_has_parent(p) &&\n\t\t\t\t(p->mnt_parent->mnt.mnt_flags & MNT_UMOUNT)"];
"1000196" -> "1000262"  [label="DDG: how & UMOUNT_CONNECTED"];
"1000196" -> "1000195"  [label="DDG: how & UMOUNT_CONNECTED"];
"1000196" -> "1000195"  [label="DDG: mnt_has_parent(p) &&\n\t\t\t\t(p->mnt_parent->mnt.mnt_flags & MNT_UMOUNT)"];
"1000197" -> "1000196"  [label="DDG: how"];
"1000197" -> "1000196"  [label="DDG: UMOUNT_CONNECTED"];
"1000195" -> "1000194"  [label="AST: "];
"1000195" -> "1000212"  [label="CFG: "];
"1000212" -> "1000195"  [label="AST: "];
"1000194" -> "1000195"  [label="CFG: "];
"1000195" -> "1000262"  [label="DDG: IS_MNT_LOCKED_AND_LAZY(p)"];
"1000195" -> "1000262"  [label="DDG: (how & UMOUNT_CONNECTED) &&\n\t\t\t\tmnt_has_parent(p) &&\n\t\t\t\t(p->mnt_parent->mnt.mnt_flags & MNT_UMOUNT)"];
"1000195" -> "1000194"  [label="DDG: (how & UMOUNT_CONNECTED) &&\n\t\t\t\tmnt_has_parent(p) &&\n\t\t\t\t(p->mnt_parent->mnt.mnt_flags & MNT_UMOUNT)"];
"1000195" -> "1000194"  [label="DDG: IS_MNT_LOCKED_AND_LAZY(p)"];
"1000212" -> "1000195"  [label="DDG: p"];
"1000194" -> "1000192"  [label="AST: "];
"1000192" -> "1000194"  [label="CFG: "];
"1000194" -> "1000262"  [label="DDG: ((how & UMOUNT_CONNECTED) &&\n\t\t\t\tmnt_has_parent(p) &&\n\t\t\t\t(p->mnt_parent->mnt.mnt_flags & MNT_UMOUNT)) ||\n\t\t\t       IS_MNT_LOCKED_AND_LAZY(p)"];
"1000194" -> "1000192"  [label="DDG: ((how & UMOUNT_CONNECTED) &&\n\t\t\t\tmnt_has_parent(p) &&\n\t\t\t\t(p->mnt_parent->mnt.mnt_flags & MNT_UMOUNT)) ||\n\t\t\t       IS_MNT_LOCKED_AND_LAZY(p)"];
"1000192" -> "1000160"  [label="AST: "];
"1000193" -> "1000192"  [label="AST: "];
"1000217" -> "1000192"  [label="CFG: "];
"1000192" -> "1000262"  [label="DDG: !(((how & UMOUNT_CONNECTED) &&\n\t\t\t\tmnt_has_parent(p) &&\n\t\t\t\t(p->mnt_parent->mnt.mnt_flags & MNT_UMOUNT)) ||\n\t\t\t       IS_MNT_LOCKED_AND_LAZY(p))"];
"1000212" -> "1000213"  [label="CFG: "];
"1000213" -> "1000212"  [label="AST: "];
"1000259" -> "1000212"  [label="DDG: p"];
"1000212" -> "1000231"  [label="DDG: p"];
"1000231" -> "1000230"  [label="AST: "];
"1000231" -> "1000232"  [label="CFG: "];
"1000232" -> "1000231"  [label="AST: "];
"1000236" -> "1000231"  [label="CFG: "];
"1000260" -> "1000231"  [label="CFG: "];
"1000231" -> "1000262"  [label="DDG: mnt_has_parent(p)"];
"1000259" -> "1000231"  [label="DDG: p"];
"1000231" -> "1000257"  [label="DDG: p"];
"1000231" -> "1000259"  [label="DDG: p"];
"1000257" -> "1000256"  [label="AST: "];
"1000257" -> "1000258"  [label="CFG: "];
"1000258" -> "1000257"  [label="AST: "];
"1000260" -> "1000257"  [label="CFG: "];
"1000257" -> "1000262"  [label="DDG: umount_mnt(p)"];
"1000257" -> "1000259"  [label="DDG: p"];
"1000259" -> "1000160"  [label="AST: "];
"1000259" -> "1000261"  [label="CFG: "];
"1000260" -> "1000259"  [label="AST: "];
"1000261" -> "1000259"  [label="AST: "];
"1000159" -> "1000259"  [label="CFG: "];
"1000259" -> "1000262"  [label="DDG: change_mnt_propagation(p, MS_PRIVATE)"];
"1000259" -> "1000262"  [label="DDG: p"];
"1000259" -> "1000262"  [label="DDG: MS_PRIVATE"];
}
