digraph "0_redis_5ccb6f7a791bf3490357b00a898885759d98bab0_3@pointer" {
"1000127" [label="(Call,luaL_checklstring(L,1,&len))"];
"1000109" [label="(MethodParameterIn,lua_State *L)"];
"1000125" [label="(Call,s = luaL_checklstring(L,1,&len))"];
"1000166" [label="(Call,(const unsigned char *)s)"];
"1000162" [label="(Call,mp_cur_init(&c,(const unsigned char *)s+offset,len-offset))"];
"1000189" [label="(Call,mp_decode_to_lua_type(L,&c))"];
"1000201" [label="(Call,luaL_error(L,\"Missing bytes in input.\"))"];
"1000200" [label="(Return,return luaL_error(L,\"Missing bytes in input.\");)"];
"1000213" [label="(Call,luaL_error(L,\"Bad data format in input.\"))"];
"1000212" [label="(Return,return luaL_error(L,\"Bad data format in input.\");)"];
"1000228" [label="(Call,luaL_checkstack(L, 1, \"in function mp_unpack_full\"))"];
"1000232" [label="(Call,lua_pushinteger(L, c.left == 0 ? -1 : offset))"];
"1000243" [label="(Call,lua_insert(L, 2))"];
"1000165" [label="(Call,(const unsigned char *)s+offset)"];
"1000141" [label="(Call,luaL_error(L,\n            \"Invalid request to unpack with offset of %d and limit of %d.\",\n            offset, len))"];
"1000140" [label="(Return,return luaL_error(L,\n            \"Invalid request to unpack with offset of %d and limit of %d.\",\n            offset, len);)"];
"1000152" [label="(Call,luaL_error(L,\n            \"Start offset %d greater than input length %d.\", offset, len))"];
"1000151" [label="(Return,return luaL_error(L,\n            \"Start offset %d greater than input length %d.\", offset, len);)"];
"1000130" [label="(Call,&len)"];
"1000189" [label="(Call,mp_decode_to_lua_type(L,&c))"];
"1000109" [label="(MethodParameterIn,lua_State *L)"];
"1000142" [label="(Identifier,L)"];
"1000111" [label="(MethodParameterIn,int offset)"];
"1000247" [label="(Identifier,cnt)"];
"1000125" [label="(Call,s = luaL_checklstring(L,1,&len))"];
"1000219" [label="(Block,)"];
"1000244" [label="(Identifier,L)"];
"1000170" [label="(Call,len-offset)"];
"1000199" [label="(Block,)"];
"1000145" [label="(Identifier,len)"];
"1000243" [label="(Call,lua_insert(L, 2))"];
"1000163" [label="(Call,&c)"];
"1000221" [label="(Call,offset = len - c.left)"];
"1000132" [label="(ControlStructure,if (offset < 0 || limit < 0))"];
"1000232" [label="(Call,lua_pushinteger(L, c.left == 0 ? -1 : offset))"];
"1000151" [label="(Return,return luaL_error(L,\n            \"Start offset %d greater than input length %d.\", offset, len);)"];
"1000251" [label="(MethodReturn,int)"];
"1000144" [label="(Identifier,offset)"];
"1000166" [label="(Call,(const unsigned char *)s)"];
"1000196" [label="(Identifier,c)"];
"1000127" [label="(Call,luaL_checklstring(L,1,&len))"];
"1000212" [label="(Return,return luaL_error(L,\"Bad data format in input.\");)"];
"1000240" [label="(Call,-1)"];
"1000213" [label="(Call,luaL_error(L,\"Bad data format in input.\"))"];
"1000141" [label="(Call,luaL_error(L,\n            \"Invalid request to unpack with offset of %d and limit of %d.\",\n            offset, len))"];
"1000135" [label="(Identifier,offset)"];
"1000230" [label="(Literal,1)"];
"1000191" [label="(Call,&c)"];
"1000129" [label="(Literal,1)"];
"1000190" [label="(Identifier,L)"];
"1000147" [label="(ControlStructure,if (offset > len))"];
"1000168" [label="(Identifier,s)"];
"1000156" [label="(Identifier,len)"];
"1000152" [label="(Call,luaL_error(L,\n            \"Start offset %d greater than input length %d.\", offset, len))"];
"1000211" [label="(Block,)"];
"1000112" [label="(Block,)"];
"1000200" [label="(Return,return luaL_error(L,\"Missing bytes in input.\");)"];
"1000128" [label="(Identifier,L)"];
"1000165" [label="(Call,(const unsigned char *)s+offset)"];
"1000175" [label="(Identifier,cnt)"];
"1000231" [label="(Literal,\"in function mp_unpack_full\")"];
"1000228" [label="(Call,luaL_checkstack(L, 1, \"in function mp_unpack_full\"))"];
"1000214" [label="(Identifier,L)"];
"1000201" [label="(Call,luaL_error(L,\"Missing bytes in input.\"))"];
"1000203" [label="(Literal,\"Missing bytes in input.\")"];
"1000245" [label="(Literal,2)"];
"1000233" [label="(Identifier,L)"];
"1000234" [label="(Call,c.left == 0 ? -1 : offset)"];
"1000134" [label="(Call,offset < 0)"];
"1000148" [label="(Call,offset > len)"];
"1000202" [label="(Identifier,L)"];
"1000169" [label="(Identifier,offset)"];
"1000171" [label="(Identifier,len)"];
"1000162" [label="(Call,mp_cur_init(&c,(const unsigned char *)s+offset,len-offset))"];
"1000143" [label="(Literal,\"Invalid request to unpack with offset of %d and limit of %d.\")"];
"1000154" [label="(Literal,\"Start offset %d greater than input length %d.\")"];
"1000155" [label="(Identifier,offset)"];
"1000126" [label="(Identifier,s)"];
"1000215" [label="(Literal,\"Bad data format in input.\")"];
"1000229" [label="(Identifier,L)"];
"1000153" [label="(Identifier,L)"];
"1000140" [label="(Return,return luaL_error(L,\n            \"Invalid request to unpack with offset of %d and limit of %d.\",\n            offset, len);)"];
"1000188" [label="(Block,)"];
"1000127" -> "1000125"  [label="AST: "];
"1000127" -> "1000130"  [label="CFG: "];
"1000128" -> "1000127"  [label="AST: "];
"1000129" -> "1000127"  [label="AST: "];
"1000130" -> "1000127"  [label="AST: "];
"1000125" -> "1000127"  [label="CFG: "];
"1000127" -> "1000251"  [label="DDG: "];
"1000127" -> "1000251"  [label="DDG: "];
"1000127" -> "1000125"  [label="DDG: "];
"1000127" -> "1000125"  [label="DDG: "];
"1000127" -> "1000125"  [label="DDG: "];
"1000109" -> "1000127"  [label="DDG: "];
"1000127" -> "1000141"  [label="DDG: "];
"1000127" -> "1000152"  [label="DDG: "];
"1000127" -> "1000189"  [label="DDG: "];
"1000127" -> "1000228"  [label="DDG: "];
"1000109" -> "1000108"  [label="AST: "];
"1000109" -> "1000251"  [label="DDG: "];
"1000109" -> "1000141"  [label="DDG: "];
"1000109" -> "1000152"  [label="DDG: "];
"1000109" -> "1000189"  [label="DDG: "];
"1000109" -> "1000201"  [label="DDG: "];
"1000109" -> "1000213"  [label="DDG: "];
"1000109" -> "1000228"  [label="DDG: "];
"1000109" -> "1000232"  [label="DDG: "];
"1000109" -> "1000243"  [label="DDG: "];
"1000125" -> "1000112"  [label="AST: "];
"1000126" -> "1000125"  [label="AST: "];
"1000135" -> "1000125"  [label="CFG: "];
"1000125" -> "1000251"  [label="DDG: "];
"1000125" -> "1000251"  [label="DDG: "];
"1000125" -> "1000166"  [label="DDG: "];
"1000166" -> "1000165"  [label="AST: "];
"1000166" -> "1000168"  [label="CFG: "];
"1000167" -> "1000166"  [label="AST: "];
"1000168" -> "1000166"  [label="AST: "];
"1000169" -> "1000166"  [label="CFG: "];
"1000166" -> "1000251"  [label="DDG: "];
"1000166" -> "1000162"  [label="DDG: "];
"1000166" -> "1000165"  [label="DDG: "];
"1000162" -> "1000112"  [label="AST: "];
"1000162" -> "1000170"  [label="CFG: "];
"1000163" -> "1000162"  [label="AST: "];
"1000165" -> "1000162"  [label="AST: "];
"1000170" -> "1000162"  [label="AST: "];
"1000175" -> "1000162"  [label="CFG: "];
"1000162" -> "1000251"  [label="DDG: "];
"1000162" -> "1000251"  [label="DDG: "];
"1000162" -> "1000251"  [label="DDG: "];
"1000162" -> "1000251"  [label="DDG: "];
"1000148" -> "1000162"  [label="DDG: "];
"1000111" -> "1000162"  [label="DDG: "];
"1000170" -> "1000162"  [label="DDG: "];
"1000170" -> "1000162"  [label="DDG: "];
"1000162" -> "1000189"  [label="DDG: "];
"1000189" -> "1000188"  [label="AST: "];
"1000189" -> "1000191"  [label="CFG: "];
"1000190" -> "1000189"  [label="AST: "];
"1000191" -> "1000189"  [label="AST: "];
"1000196" -> "1000189"  [label="CFG: "];
"1000189" -> "1000251"  [label="DDG: "];
"1000189" -> "1000251"  [label="DDG: "];
"1000189" -> "1000251"  [label="DDG: "];
"1000189" -> "1000201"  [label="DDG: "];
"1000189" -> "1000213"  [label="DDG: "];
"1000189" -> "1000228"  [label="DDG: "];
"1000201" -> "1000200"  [label="AST: "];
"1000201" -> "1000203"  [label="CFG: "];
"1000202" -> "1000201"  [label="AST: "];
"1000203" -> "1000201"  [label="AST: "];
"1000200" -> "1000201"  [label="CFG: "];
"1000201" -> "1000251"  [label="DDG: "];
"1000201" -> "1000251"  [label="DDG: "];
"1000201" -> "1000200"  [label="DDG: "];
"1000200" -> "1000199"  [label="AST: "];
"1000251" -> "1000200"  [label="CFG: "];
"1000200" -> "1000251"  [label="DDG: "];
"1000213" -> "1000212"  [label="AST: "];
"1000213" -> "1000215"  [label="CFG: "];
"1000214" -> "1000213"  [label="AST: "];
"1000215" -> "1000213"  [label="AST: "];
"1000212" -> "1000213"  [label="CFG: "];
"1000213" -> "1000251"  [label="DDG: "];
"1000213" -> "1000251"  [label="DDG: "];
"1000213" -> "1000212"  [label="DDG: "];
"1000212" -> "1000211"  [label="AST: "];
"1000251" -> "1000212"  [label="CFG: "];
"1000212" -> "1000251"  [label="DDG: "];
"1000228" -> "1000219"  [label="AST: "];
"1000228" -> "1000231"  [label="CFG: "];
"1000229" -> "1000228"  [label="AST: "];
"1000230" -> "1000228"  [label="AST: "];
"1000231" -> "1000228"  [label="AST: "];
"1000233" -> "1000228"  [label="CFG: "];
"1000228" -> "1000251"  [label="DDG: "];
"1000228" -> "1000232"  [label="DDG: "];
"1000232" -> "1000219"  [label="AST: "];
"1000232" -> "1000234"  [label="CFG: "];
"1000233" -> "1000232"  [label="AST: "];
"1000234" -> "1000232"  [label="AST: "];
"1000244" -> "1000232"  [label="CFG: "];
"1000232" -> "1000251"  [label="DDG: "];
"1000232" -> "1000251"  [label="DDG: "];
"1000240" -> "1000232"  [label="DDG: "];
"1000221" -> "1000232"  [label="DDG: "];
"1000111" -> "1000232"  [label="DDG: "];
"1000232" -> "1000243"  [label="DDG: "];
"1000243" -> "1000219"  [label="AST: "];
"1000243" -> "1000245"  [label="CFG: "];
"1000244" -> "1000243"  [label="AST: "];
"1000245" -> "1000243"  [label="AST: "];
"1000247" -> "1000243"  [label="CFG: "];
"1000243" -> "1000251"  [label="DDG: "];
"1000243" -> "1000251"  [label="DDG: "];
"1000165" -> "1000169"  [label="CFG: "];
"1000169" -> "1000165"  [label="AST: "];
"1000171" -> "1000165"  [label="CFG: "];
"1000165" -> "1000251"  [label="DDG: "];
"1000148" -> "1000165"  [label="DDG: "];
"1000111" -> "1000165"  [label="DDG: "];
"1000141" -> "1000140"  [label="AST: "];
"1000141" -> "1000145"  [label="CFG: "];
"1000142" -> "1000141"  [label="AST: "];
"1000143" -> "1000141"  [label="AST: "];
"1000144" -> "1000141"  [label="AST: "];
"1000145" -> "1000141"  [label="AST: "];
"1000140" -> "1000141"  [label="CFG: "];
"1000141" -> "1000251"  [label="DDG: "];
"1000141" -> "1000251"  [label="DDG: "];
"1000141" -> "1000251"  [label="DDG: "];
"1000141" -> "1000251"  [label="DDG: "];
"1000141" -> "1000140"  [label="DDG: "];
"1000134" -> "1000141"  [label="DDG: "];
"1000111" -> "1000141"  [label="DDG: "];
"1000140" -> "1000132"  [label="AST: "];
"1000251" -> "1000140"  [label="CFG: "];
"1000140" -> "1000251"  [label="DDG: "];
"1000152" -> "1000151"  [label="AST: "];
"1000152" -> "1000156"  [label="CFG: "];
"1000153" -> "1000152"  [label="AST: "];
"1000154" -> "1000152"  [label="AST: "];
"1000155" -> "1000152"  [label="AST: "];
"1000156" -> "1000152"  [label="AST: "];
"1000151" -> "1000152"  [label="CFG: "];
"1000152" -> "1000251"  [label="DDG: "];
"1000152" -> "1000251"  [label="DDG: "];
"1000152" -> "1000251"  [label="DDG: "];
"1000152" -> "1000251"  [label="DDG: "];
"1000152" -> "1000151"  [label="DDG: "];
"1000148" -> "1000152"  [label="DDG: "];
"1000148" -> "1000152"  [label="DDG: "];
"1000111" -> "1000152"  [label="DDG: "];
"1000151" -> "1000147"  [label="AST: "];
"1000251" -> "1000151"  [label="CFG: "];
"1000151" -> "1000251"  [label="DDG: "];
}
