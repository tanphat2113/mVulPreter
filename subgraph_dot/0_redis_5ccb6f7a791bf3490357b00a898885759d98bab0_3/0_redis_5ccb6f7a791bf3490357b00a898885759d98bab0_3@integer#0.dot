digraph "0_redis_5ccb6f7a791bf3490357b00a898885759d98bab0_3@integer" {
"1000221" [label="(Call,offset = len - c.left)"];
"1000223" [label="(Call,len - c.left)"];
"1000170" [label="(Call,len-offset)"];
"1000148" [label="(Call,offset > len)"];
"1000134" [label="(Call,offset < 0)"];
"1000123" [label="(Call,!offset)"];
"1000111" [label="(MethodParameterIn,int offset)"];
"1000178" [label="(Call,c.left > 0)"];
"1000232" [label="(Call,lua_pushinteger(L, c.left == 0 ? -1 : offset))"];
"1000243" [label="(Call,lua_insert(L, 2))"];
"1000234" [label="(Call,c.left == 0 ? -1 : offset)"];
"1000184" [label="(Identifier,cnt)"];
"1000109" [label="(MethodParameterIn,lua_State *L)"];
"1000111" [label="(MethodParameterIn,int offset)"];
"1000247" [label="(Identifier,cnt)"];
"1000138" [label="(Identifier,limit)"];
"1000219" [label="(Block,)"];
"1000244" [label="(Identifier,L)"];
"1000170" [label="(Call,len-offset)"];
"1000182" [label="(Literal,0)"];
"1000179" [label="(Call,c.left)"];
"1000235" [label="(Call,c.left == 0)"];
"1000243" [label="(Call,lua_insert(L, 2))"];
"1000221" [label="(Call,offset = len - c.left)"];
"1000223" [label="(Call,len - c.left)"];
"1000232" [label="(Call,lua_pushinteger(L, c.left == 0 ? -1 : offset))"];
"1000242" [label="(Identifier,offset)"];
"1000136" [label="(Literal,0)"];
"1000251" [label="(MethodReturn,int)"];
"1000120" [label="(Call,!limit && !offset)"];
"1000225" [label="(Call,c.left)"];
"1000240" [label="(Call,-1)"];
"1000124" [label="(Identifier,offset)"];
"1000133" [label="(Call,offset < 0 || limit < 0)"];
"1000178" [label="(Call,c.left > 0)"];
"1000141" [label="(Call,luaL_error(L,\n            \"Invalid request to unpack with offset of %d and limit of %d.\",\n            offset, len))"];
"1000135" [label="(Identifier,offset)"];
"1000123" [label="(Call,!offset)"];
"1000147" [label="(ControlStructure,if (offset > len))"];
"1000150" [label="(Identifier,len)"];
"1000152" [label="(Call,luaL_error(L,\n            \"Start offset %d greater than input length %d.\", offset, len))"];
"1000165" [label="(Call,(const unsigned char *)s+offset)"];
"1000149" [label="(Identifier,offset)"];
"1000224" [label="(Identifier,len)"];
"1000222" [label="(Identifier,offset)"];
"1000172" [label="(Identifier,offset)"];
"1000158" [label="(Identifier,decode_all)"];
"1000228" [label="(Call,luaL_checkstack(L, 1, \"in function mp_unpack_full\"))"];
"1000134" [label="(Call,offset < 0)"];
"1000177" [label="(Call,c.left > 0 && cnt < limit)"];
"1000234" [label="(Call,c.left == 0 ? -1 : offset)"];
"1000233" [label="(Identifier,L)"];
"1000245" [label="(Literal,2)"];
"1000148" [label="(Call,offset > len)"];
"1000171" [label="(Identifier,len)"];
"1000162" [label="(Call,mp_cur_init(&c,(const unsigned char *)s+offset,len-offset))"];
"1000229" [label="(Identifier,L)"];
"1000153" [label="(Identifier,L)"];
"1000221" -> "1000219"  [label="AST: "];
"1000221" -> "1000223"  [label="CFG: "];
"1000222" -> "1000221"  [label="AST: "];
"1000223" -> "1000221"  [label="AST: "];
"1000229" -> "1000221"  [label="CFG: "];
"1000221" -> "1000251"  [label="DDG: len - c.left"];
"1000223" -> "1000221"  [label="DDG: len"];
"1000223" -> "1000221"  [label="DDG: c.left"];
"1000111" -> "1000221"  [label="DDG: offset"];
"1000221" -> "1000232"  [label="DDG: offset"];
"1000221" -> "1000234"  [label="DDG: offset"];
"1000223" -> "1000225"  [label="CFG: "];
"1000224" -> "1000223"  [label="AST: "];
"1000225" -> "1000223"  [label="AST: "];
"1000223" -> "1000251"  [label="DDG: len"];
"1000170" -> "1000223"  [label="DDG: len"];
"1000178" -> "1000223"  [label="DDG: c.left"];
"1000223" -> "1000235"  [label="DDG: c.left"];
"1000170" -> "1000162"  [label="AST: "];
"1000170" -> "1000172"  [label="CFG: "];
"1000171" -> "1000170"  [label="AST: "];
"1000172" -> "1000170"  [label="AST: "];
"1000162" -> "1000170"  [label="CFG: "];
"1000170" -> "1000251"  [label="DDG: offset"];
"1000170" -> "1000251"  [label="DDG: len"];
"1000170" -> "1000162"  [label="DDG: len"];
"1000170" -> "1000162"  [label="DDG: offset"];
"1000148" -> "1000170"  [label="DDG: len"];
"1000148" -> "1000170"  [label="DDG: offset"];
"1000111" -> "1000170"  [label="DDG: offset"];
"1000148" -> "1000147"  [label="AST: "];
"1000148" -> "1000150"  [label="CFG: "];
"1000149" -> "1000148"  [label="AST: "];
"1000150" -> "1000148"  [label="AST: "];
"1000153" -> "1000148"  [label="CFG: "];
"1000158" -> "1000148"  [label="CFG: "];
"1000148" -> "1000251"  [label="DDG: offset > len"];
"1000134" -> "1000148"  [label="DDG: offset"];
"1000111" -> "1000148"  [label="DDG: offset"];
"1000148" -> "1000152"  [label="DDG: offset"];
"1000148" -> "1000152"  [label="DDG: len"];
"1000148" -> "1000162"  [label="DDG: offset"];
"1000148" -> "1000165"  [label="DDG: offset"];
"1000134" -> "1000133"  [label="AST: "];
"1000134" -> "1000136"  [label="CFG: "];
"1000135" -> "1000134"  [label="AST: "];
"1000136" -> "1000134"  [label="AST: "];
"1000138" -> "1000134"  [label="CFG: "];
"1000133" -> "1000134"  [label="CFG: "];
"1000134" -> "1000133"  [label="DDG: offset"];
"1000134" -> "1000133"  [label="DDG: 0"];
"1000123" -> "1000134"  [label="DDG: offset"];
"1000111" -> "1000134"  [label="DDG: offset"];
"1000134" -> "1000141"  [label="DDG: offset"];
"1000123" -> "1000120"  [label="AST: "];
"1000123" -> "1000124"  [label="CFG: "];
"1000124" -> "1000123"  [label="AST: "];
"1000120" -> "1000123"  [label="CFG: "];
"1000123" -> "1000120"  [label="DDG: offset"];
"1000111" -> "1000123"  [label="DDG: offset"];
"1000111" -> "1000108"  [label="AST: "];
"1000111" -> "1000251"  [label="DDG: offset"];
"1000111" -> "1000141"  [label="DDG: offset"];
"1000111" -> "1000152"  [label="DDG: offset"];
"1000111" -> "1000162"  [label="DDG: offset"];
"1000111" -> "1000165"  [label="DDG: offset"];
"1000111" -> "1000232"  [label="DDG: offset"];
"1000111" -> "1000234"  [label="DDG: offset"];
"1000178" -> "1000177"  [label="AST: "];
"1000178" -> "1000182"  [label="CFG: "];
"1000179" -> "1000178"  [label="AST: "];
"1000182" -> "1000178"  [label="AST: "];
"1000184" -> "1000178"  [label="CFG: "];
"1000177" -> "1000178"  [label="CFG: "];
"1000178" -> "1000251"  [label="DDG: c.left"];
"1000178" -> "1000177"  [label="DDG: c.left"];
"1000178" -> "1000177"  [label="DDG: 0"];
"1000232" -> "1000219"  [label="AST: "];
"1000232" -> "1000234"  [label="CFG: "];
"1000233" -> "1000232"  [label="AST: "];
"1000234" -> "1000232"  [label="AST: "];
"1000244" -> "1000232"  [label="CFG: "];
"1000232" -> "1000251"  [label="DDG: lua_pushinteger(L, c.left == 0 ? -1 : offset)"];
"1000232" -> "1000251"  [label="DDG: c.left == 0 ? -1 : offset"];
"1000228" -> "1000232"  [label="DDG: L"];
"1000109" -> "1000232"  [label="DDG: L"];
"1000240" -> "1000232"  [label="DDG: 1"];
"1000232" -> "1000243"  [label="DDG: L"];
"1000243" -> "1000219"  [label="AST: "];
"1000243" -> "1000245"  [label="CFG: "];
"1000244" -> "1000243"  [label="AST: "];
"1000245" -> "1000243"  [label="AST: "];
"1000247" -> "1000243"  [label="CFG: "];
"1000243" -> "1000251"  [label="DDG: L"];
"1000243" -> "1000251"  [label="DDG: lua_insert(L, 2)"];
"1000109" -> "1000243"  [label="DDG: L"];
"1000234" -> "1000240"  [label="CFG: "];
"1000234" -> "1000242"  [label="CFG: "];
"1000235" -> "1000234"  [label="AST: "];
"1000240" -> "1000234"  [label="AST: "];
"1000242" -> "1000234"  [label="AST: "];
"1000234" -> "1000251"  [label="DDG: c.left == 0"];
"1000234" -> "1000251"  [label="DDG: -1"];
"1000234" -> "1000251"  [label="DDG: offset"];
"1000240" -> "1000234"  [label="DDG: 1"];
}
