digraph "0_file_6f737ddfadb596d7d4a993f7ed2141ffd664a81c@pointer" {
"1000142" [label="(Call,file_error(ms, 0, \"recursion nesting exceeded\"))"];
"1000103" [label="(MethodParameterIn,struct magic_set *ms)"];
"1001755" [label="(MethodReturn,RET)"];
"1001575" [label="(Call,file_pop_buffer(ms, pb))"];
"1001695" [label="(Call,match(ms, ml.magic, ml.nmagic, s, nbytes, offset + o,\n\t\t    mode, text, flip, recursion_level, printed_something,\n\t\t    need_separator, returnval))"];
"1001619" [label="(Call,file_printf(ms, \"%s\", rbuf))"];
"1000144" [label="(Literal,0)"];
"1000148" [label="(Literal,1)"];
"1001403" [label="(Call,mcopy(ms, p, m->type, 0, s, offset, nbytes, m))"];
"1001747" [label="(Call,mconvert(ms, m, flip))"];
"1001549" [label="(Call,file_softmagic(ms, s + offset, nbytes - offset,\n \t\t    recursion_level, BINTEST, text))"];
"1000103" [label="(MethodParameterIn,struct magic_set *ms)"];
"1000151" [label="(Call,mcopy(ms, p, m->type, m->flag & INDIR, s, (uint32_t)(offset + o),\n\t    (uint32_t)nbytes, m))"];
"1001728" [label="(Call,file_printf(ms, \"%s\", m->desc))"];
"1001602" [label="(Call,file_printf(ms, F(ms, m, \"%u\"), offset))"];
"1000143" [label="(Identifier,ms)"];
"1000142" [label="(Call,file_error(ms, 0, \"recursion nesting exceeded\"))"];
"1001604" [label="(Call,F(ms, m, \"%u\"))"];
"1001663" [label="(Call,file_magicfind(ms, rbuf, &ml))"];
"1001541" [label="(Call,file_push_buffer(ms))"];
"1000141" [label="(Block,)"];
"1001671" [label="(Call,file_error(ms, 0, \"cannot find entry `%s'\", rbuf))"];
"1000145" [label="(Literal,\"recursion nesting exceeded\")"];
"1000142" -> "1000141"  [label="AST: "];
"1000142" -> "1000145"  [label="CFG: "];
"1000143" -> "1000142"  [label="AST: "];
"1000144" -> "1000142"  [label="AST: "];
"1000145" -> "1000142"  [label="AST: "];
"1000148" -> "1000142"  [label="CFG: "];
"1000142" -> "1001755"  [label="DDG: "];
"1000142" -> "1001755"  [label="DDG: "];
"1000103" -> "1000142"  [label="DDG: "];
"1000103" -> "1000102"  [label="AST: "];
"1000103" -> "1001755"  [label="DDG: "];
"1000103" -> "1000151"  [label="DDG: "];
"1000103" -> "1001403"  [label="DDG: "];
"1000103" -> "1001541"  [label="DDG: "];
"1000103" -> "1001549"  [label="DDG: "];
"1000103" -> "1001575"  [label="DDG: "];
"1000103" -> "1001602"  [label="DDG: "];
"1000103" -> "1001604"  [label="DDG: "];
"1000103" -> "1001619"  [label="DDG: "];
"1000103" -> "1001663"  [label="DDG: "];
"1000103" -> "1001671"  [label="DDG: "];
"1000103" -> "1001695"  [label="DDG: "];
"1000103" -> "1001728"  [label="DDG: "];
"1000103" -> "1001747"  [label="DDG: "];
}
