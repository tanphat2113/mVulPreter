digraph "0_linux_73223e4e2e3867ebf033a5a8eb2e5df0158ccc99@pointer" {
"1000188" [label="(Call,!vma)"];
"1000179" [label="(Call,vma = find_vma_intersection(mm, addr, addr+1))"];
"1000181" [label="(Call,find_vma_intersection(mm, addr, addr+1))"];
"1000112" [label="(Call,*mm = current->mm)"];
"1000107" [label="(MethodParameterIn,unsigned long addr)"];
"1000211" [label="(Call,vma->vm_ops->get_policy(vma, addr))"];
"1000209" [label="(Call,pol = vma->vm_ops->get_policy(vma, addr))"];
"1000227" [label="(Call,!pol)"];
"1000259" [label="(Call,pol == current->mempolicy)"];
"1000258" [label="(Call,pol == current->mempolicy &&\n\t\t\t\tpol->mode == MPOL_INTERLEAVE)"];
"1000318" [label="(Call,mpol_store_user_nodemask(pol))"];
"1000333" [label="(Call,get_policy_nodemask(pol, nmask))"];
"1000339" [label="(Call,mpol_cond_put(pol))"];
"1000295" [label="(Call,pol == &default_policy)"];
"1000245" [label="(Call,lookup_node(addr))"];
"1000243" [label="(Call,err = lookup_node(addr))"];
"1000248" [label="(Call,err < 0)"];
"1000252" [label="(Call,*policy = err)"];
"1000350" [label="(Return,return err;)"];
"1000209" [label="(Call,pol = vma->vm_ops->get_policy(vma, addr))"];
"1000227" [label="(Call,!pol)"];
"1000173" [label="(Block,)"];
"1000258" [label="(Call,pol == current->mempolicy &&\n\t\t\t\tpol->mode == MPOL_INTERLEAVE)"];
"1000294" [label="(Call,pol == &default_policy ? MPOL_DEFAULT :\n\t\t\t\t\t\tpol->mode)"];
"1000330" [label="(Block,)"];
"1000299" [label="(Identifier,MPOL_DEFAULT)"];
"1000255" [label="(Identifier,err)"];
"1000194" [label="(Identifier,mm)"];
"1000226" [label="(ControlStructure,if (!pol))"];
"1000254" [label="(Identifier,policy)"];
"1000114" [label="(Call,current->mm)"];
"1000285" [label="(Identifier,err)"];
"1000339" [label="(Call,mpol_cond_put(pol))"];
"1000184" [label="(Call,addr+1)"];
"1000210" [label="(Identifier,pol)"];
"1000252" [label="(Call,*policy = err)"];
"1000295" [label="(Call,pol == &default_policy)"];
"1000342" [label="(Identifier,vma)"];
"1000264" [label="(Call,pol->mode == MPOL_INTERLEAVE)"];
"1000296" [label="(Identifier,pol)"];
"1000253" [label="(Call,*policy)"];
"1000247" [label="(ControlStructure,if (err < 0))"];
"1000212" [label="(Identifier,vma)"];
"1000333" [label="(Call,get_policy_nodemask(pol, nmask))"];
"1000182" [label="(Identifier,mm)"];
"1000119" [label="(Identifier,vma)"];
"1000230" [label="(Identifier,pol)"];
"1000257" [label="(ControlStructure,if (pol == current->mempolicy &&\n\t\t\t\tpol->mode == MPOL_INTERLEAVE))"];
"1000337" [label="(Identifier,current)"];
"1000261" [label="(Call,current->mempolicy)"];
"1000335" [label="(Identifier,nmask)"];
"1000251" [label="(ControlStructure,goto out;)"];
"1000187" [label="(ControlStructure,if (!vma))"];
"1000266" [label="(Identifier,pol)"];
"1000211" [label="(Call,vma->vm_ops->get_policy(vma, addr))"];
"1000272" [label="(Identifier,policy)"];
"1000250" [label="(Literal,0)"];
"1000311" [label="(Call,err = 0)"];
"1000183" [label="(Identifier,addr)"];
"1000229" [label="(Call,pol = &default_policy)"];
"1000248" [label="(Call,err < 0)"];
"1000259" [label="(Call,pol == current->mempolicy)"];
"1000318" [label="(Call,mpol_store_user_nodemask(pol))"];
"1000189" [label="(Identifier,vma)"];
"1000244" [label="(Identifier,err)"];
"1000213" [label="(Identifier,addr)"];
"1000249" [label="(Identifier,err)"];
"1000107" [label="(MethodParameterIn,unsigned long addr)"];
"1000301" [label="(Identifier,pol)"];
"1000106" [label="(MethodParameterIn,nodemask_t *nmask)"];
"1000112" [label="(Call,*mm = current->mm)"];
"1000351" [label="(Identifier,err)"];
"1000235" [label="(Identifier,flags)"];
"1000332" [label="(Identifier,current)"];
"1000260" [label="(Identifier,pol)"];
"1000245" [label="(Call,lookup_node(addr))"];
"1000352" [label="(MethodReturn,static long)"];
"1000215" [label="(Call,pol = vma->vm_policy)"];
"1000323" [label="(Identifier,nmask)"];
"1000242" [label="(Block,)"];
"1000319" [label="(Identifier,pol)"];
"1000284" [label="(Call,err = -EINVAL)"];
"1000180" [label="(Identifier,vma)"];
"1000228" [label="(Identifier,pol)"];
"1000113" [label="(Identifier,mm)"];
"1000297" [label="(Call,&default_policy)"];
"1000350" [label="(Return,return err;)"];
"1000109" [label="(Block,)"];
"1000243" [label="(Call,err = lookup_node(addr))"];
"1000340" [label="(Identifier,pol)"];
"1000312" [label="(Identifier,err)"];
"1000122" [label="(Call,*pol = current->mempolicy)"];
"1000317" [label="(ControlStructure,if (mpol_store_user_nodemask(pol)))"];
"1000334" [label="(Identifier,pol)"];
"1000188" [label="(Call,!vma)"];
"1000246" [label="(Identifier,addr)"];
"1000179" [label="(Call,vma = find_vma_intersection(mm, addr, addr+1))"];
"1000202" [label="(Identifier,vma)"];
"1000181" [label="(Call,find_vma_intersection(mm, addr, addr+1))"];
"1000199" [label="(ControlStructure,if (vma->vm_ops && vma->vm_ops->get_policy))"];
"1000188" -> "1000187"  [label="AST: "];
"1000188" -> "1000189"  [label="CFG: "];
"1000189" -> "1000188"  [label="AST: "];
"1000194" -> "1000188"  [label="CFG: "];
"1000202" -> "1000188"  [label="CFG: "];
"1000188" -> "1000352"  [label="DDG: !vma"];
"1000188" -> "1000352"  [label="DDG: vma"];
"1000179" -> "1000188"  [label="DDG: vma"];
"1000188" -> "1000211"  [label="DDG: vma"];
"1000179" -> "1000173"  [label="AST: "];
"1000179" -> "1000181"  [label="CFG: "];
"1000180" -> "1000179"  [label="AST: "];
"1000181" -> "1000179"  [label="AST: "];
"1000189" -> "1000179"  [label="CFG: "];
"1000179" -> "1000352"  [label="DDG: find_vma_intersection(mm, addr, addr+1)"];
"1000181" -> "1000179"  [label="DDG: mm"];
"1000181" -> "1000179"  [label="DDG: addr"];
"1000181" -> "1000179"  [label="DDG: addr+1"];
"1000181" -> "1000184"  [label="CFG: "];
"1000182" -> "1000181"  [label="AST: "];
"1000183" -> "1000181"  [label="AST: "];
"1000184" -> "1000181"  [label="AST: "];
"1000181" -> "1000352"  [label="DDG: mm"];
"1000181" -> "1000352"  [label="DDG: addr+1"];
"1000181" -> "1000352"  [label="DDG: addr"];
"1000112" -> "1000181"  [label="DDG: mm"];
"1000107" -> "1000181"  [label="DDG: addr"];
"1000181" -> "1000211"  [label="DDG: addr"];
"1000181" -> "1000245"  [label="DDG: addr"];
"1000112" -> "1000109"  [label="AST: "];
"1000112" -> "1000114"  [label="CFG: "];
"1000113" -> "1000112"  [label="AST: "];
"1000114" -> "1000112"  [label="AST: "];
"1000119" -> "1000112"  [label="CFG: "];
"1000112" -> "1000352"  [label="DDG: current->mm"];
"1000112" -> "1000352"  [label="DDG: mm"];
"1000107" -> "1000104"  [label="AST: "];
"1000107" -> "1000352"  [label="DDG: addr"];
"1000107" -> "1000184"  [label="DDG: addr"];
"1000107" -> "1000211"  [label="DDG: addr"];
"1000107" -> "1000245"  [label="DDG: addr"];
"1000211" -> "1000209"  [label="AST: "];
"1000211" -> "1000213"  [label="CFG: "];
"1000212" -> "1000211"  [label="AST: "];
"1000213" -> "1000211"  [label="AST: "];
"1000209" -> "1000211"  [label="CFG: "];
"1000211" -> "1000352"  [label="DDG: vma"];
"1000211" -> "1000352"  [label="DDG: addr"];
"1000211" -> "1000209"  [label="DDG: vma"];
"1000211" -> "1000209"  [label="DDG: addr"];
"1000211" -> "1000245"  [label="DDG: addr"];
"1000209" -> "1000199"  [label="AST: "];
"1000210" -> "1000209"  [label="AST: "];
"1000228" -> "1000209"  [label="CFG: "];
"1000209" -> "1000352"  [label="DDG: vma->vm_ops->get_policy(vma, addr)"];
"1000209" -> "1000227"  [label="DDG: pol"];
"1000227" -> "1000226"  [label="AST: "];
"1000227" -> "1000228"  [label="CFG: "];
"1000228" -> "1000227"  [label="AST: "];
"1000230" -> "1000227"  [label="CFG: "];
"1000235" -> "1000227"  [label="CFG: "];
"1000227" -> "1000352"  [label="DDG: !pol"];
"1000215" -> "1000227"  [label="DDG: pol"];
"1000122" -> "1000227"  [label="DDG: pol"];
"1000227" -> "1000259"  [label="DDG: pol"];
"1000227" -> "1000295"  [label="DDG: pol"];
"1000227" -> "1000318"  [label="DDG: pol"];
"1000227" -> "1000339"  [label="DDG: pol"];
"1000259" -> "1000258"  [label="AST: "];
"1000259" -> "1000261"  [label="CFG: "];
"1000260" -> "1000259"  [label="AST: "];
"1000261" -> "1000259"  [label="AST: "];
"1000266" -> "1000259"  [label="CFG: "];
"1000258" -> "1000259"  [label="CFG: "];
"1000259" -> "1000352"  [label="DDG: current->mempolicy"];
"1000259" -> "1000258"  [label="DDG: pol"];
"1000259" -> "1000258"  [label="DDG: current->mempolicy"];
"1000229" -> "1000259"  [label="DDG: pol"];
"1000259" -> "1000318"  [label="DDG: pol"];
"1000259" -> "1000339"  [label="DDG: pol"];
"1000258" -> "1000257"  [label="AST: "];
"1000258" -> "1000264"  [label="CFG: "];
"1000264" -> "1000258"  [label="AST: "];
"1000272" -> "1000258"  [label="CFG: "];
"1000285" -> "1000258"  [label="CFG: "];
"1000258" -> "1000352"  [label="DDG: pol == current->mempolicy"];
"1000258" -> "1000352"  [label="DDG: pol->mode == MPOL_INTERLEAVE"];
"1000258" -> "1000352"  [label="DDG: pol == current->mempolicy &&\n\t\t\t\tpol->mode == MPOL_INTERLEAVE"];
"1000264" -> "1000258"  [label="DDG: pol->mode"];
"1000264" -> "1000258"  [label="DDG: MPOL_INTERLEAVE"];
"1000318" -> "1000317"  [label="AST: "];
"1000318" -> "1000319"  [label="CFG: "];
"1000319" -> "1000318"  [label="AST: "];
"1000323" -> "1000318"  [label="CFG: "];
"1000332" -> "1000318"  [label="CFG: "];
"1000318" -> "1000352"  [label="DDG: mpol_store_user_nodemask(pol)"];
"1000295" -> "1000318"  [label="DDG: pol"];
"1000229" -> "1000318"  [label="DDG: pol"];
"1000318" -> "1000333"  [label="DDG: pol"];
"1000318" -> "1000339"  [label="DDG: pol"];
"1000333" -> "1000330"  [label="AST: "];
"1000333" -> "1000335"  [label="CFG: "];
"1000334" -> "1000333"  [label="AST: "];
"1000335" -> "1000333"  [label="AST: "];
"1000337" -> "1000333"  [label="CFG: "];
"1000333" -> "1000352"  [label="DDG: get_policy_nodemask(pol, nmask)"];
"1000333" -> "1000352"  [label="DDG: nmask"];
"1000106" -> "1000333"  [label="DDG: nmask"];
"1000333" -> "1000339"  [label="DDG: pol"];
"1000339" -> "1000109"  [label="AST: "];
"1000339" -> "1000340"  [label="CFG: "];
"1000340" -> "1000339"  [label="AST: "];
"1000342" -> "1000339"  [label="CFG: "];
"1000339" -> "1000352"  [label="DDG: mpol_cond_put(pol)"];
"1000339" -> "1000352"  [label="DDG: pol"];
"1000295" -> "1000339"  [label="DDG: pol"];
"1000229" -> "1000339"  [label="DDG: pol"];
"1000295" -> "1000294"  [label="AST: "];
"1000295" -> "1000297"  [label="CFG: "];
"1000296" -> "1000295"  [label="AST: "];
"1000297" -> "1000295"  [label="AST: "];
"1000299" -> "1000295"  [label="CFG: "];
"1000301" -> "1000295"  [label="CFG: "];
"1000295" -> "1000352"  [label="DDG: &default_policy"];
"1000229" -> "1000295"  [label="DDG: pol"];
"1000245" -> "1000243"  [label="AST: "];
"1000245" -> "1000246"  [label="CFG: "];
"1000246" -> "1000245"  [label="AST: "];
"1000243" -> "1000245"  [label="CFG: "];
"1000245" -> "1000352"  [label="DDG: addr"];
"1000245" -> "1000243"  [label="DDG: addr"];
"1000243" -> "1000242"  [label="AST: "];
"1000244" -> "1000243"  [label="AST: "];
"1000249" -> "1000243"  [label="CFG: "];
"1000243" -> "1000352"  [label="DDG: lookup_node(addr)"];
"1000243" -> "1000248"  [label="DDG: err"];
"1000248" -> "1000247"  [label="AST: "];
"1000248" -> "1000250"  [label="CFG: "];
"1000249" -> "1000248"  [label="AST: "];
"1000250" -> "1000248"  [label="AST: "];
"1000251" -> "1000248"  [label="CFG: "];
"1000254" -> "1000248"  [label="CFG: "];
"1000248" -> "1000352"  [label="DDG: err < 0"];
"1000248" -> "1000352"  [label="DDG: err"];
"1000248" -> "1000252"  [label="DDG: err"];
"1000248" -> "1000350"  [label="DDG: err"];
"1000252" -> "1000242"  [label="AST: "];
"1000252" -> "1000255"  [label="CFG: "];
"1000253" -> "1000252"  [label="AST: "];
"1000255" -> "1000252"  [label="AST: "];
"1000312" -> "1000252"  [label="CFG: "];
"1000252" -> "1000352"  [label="DDG: *policy"];
"1000350" -> "1000109"  [label="AST: "];
"1000350" -> "1000351"  [label="CFG: "];
"1000351" -> "1000350"  [label="AST: "];
"1000352" -> "1000350"  [label="CFG: "];
"1000350" -> "1000352"  [label="DDG: <RET>"];
"1000351" -> "1000350"  [label="DDG: err"];
"1000311" -> "1000350"  [label="DDG: err"];
"1000284" -> "1000350"  [label="DDG: err"];
}
