digraph "0_linux_73223e4e2e3867ebf033a5a8eb2e5df0158ccc99@pointer" {
"1000122" [label="(Call,*pol = current->mempolicy)"];
"1000227" [label="(Call,!pol)"];
"1000259" [label="(Call,pol == current->mempolicy)"];
"1000258" [label="(Call,pol == current->mempolicy &&\n\t\t\t\tpol->mode == MPOL_INTERLEAVE)"];
"1000318" [label="(Call,mpol_store_user_nodemask(pol))"];
"1000333" [label="(Call,get_policy_nodemask(pol, nmask))"];
"1000339" [label="(Call,mpol_cond_put(pol))"];
"1000295" [label="(Call,pol == &default_policy)"];
"1000209" [label="(Call,pol = vma->vm_ops->get_policy(vma, addr))"];
"1000227" [label="(Call,!pol)"];
"1000258" [label="(Call,pol == current->mempolicy &&\n\t\t\t\tpol->mode == MPOL_INTERLEAVE)"];
"1000294" [label="(Call,pol == &default_policy ? MPOL_DEFAULT :\n\t\t\t\t\t\tpol->mode)"];
"1000330" [label="(Block,)"];
"1000124" [label="(Call,current->mempolicy)"];
"1000299" [label="(Identifier,MPOL_DEFAULT)"];
"1000226" [label="(ControlStructure,if (!pol))"];
"1000285" [label="(Identifier,err)"];
"1000123" [label="(Identifier,pol)"];
"1000295" [label="(Call,pol == &default_policy)"];
"1000342" [label="(Identifier,vma)"];
"1000264" [label="(Call,pol->mode == MPOL_INTERLEAVE)"];
"1000296" [label="(Identifier,pol)"];
"1000333" [label="(Call,get_policy_nodemask(pol, nmask))"];
"1000230" [label="(Identifier,pol)"];
"1000257" [label="(ControlStructure,if (pol == current->mempolicy &&\n\t\t\t\tpol->mode == MPOL_INTERLEAVE))"];
"1000337" [label="(Identifier,current)"];
"1000261" [label="(Call,current->mempolicy)"];
"1000335" [label="(Identifier,nmask)"];
"1000266" [label="(Identifier,pol)"];
"1000129" [label="(Identifier,flags)"];
"1000272" [label="(Identifier,policy)"];
"1000229" [label="(Call,pol = &default_policy)"];
"1000259" [label="(Call,pol == current->mempolicy)"];
"1000318" [label="(Call,mpol_store_user_nodemask(pol))"];
"1000301" [label="(Identifier,pol)"];
"1000106" [label="(MethodParameterIn,nodemask_t *nmask)"];
"1000235" [label="(Identifier,flags)"];
"1000332" [label="(Identifier,current)"];
"1000260" [label="(Identifier,pol)"];
"1000352" [label="(MethodReturn,static long)"];
"1000323" [label="(Identifier,nmask)"];
"1000215" [label="(Call,pol = vma->vm_policy)"];
"1000319" [label="(Identifier,pol)"];
"1000228" [label="(Identifier,pol)"];
"1000297" [label="(Call,&default_policy)"];
"1000109" [label="(Block,)"];
"1000340" [label="(Identifier,pol)"];
"1000122" [label="(Call,*pol = current->mempolicy)"];
"1000317" [label="(ControlStructure,if (mpol_store_user_nodemask(pol)))"];
"1000334" [label="(Identifier,pol)"];
"1000339" [label="(Call,mpol_cond_put(pol))"];
"1000122" -> "1000109"  [label="AST: "];
"1000122" -> "1000124"  [label="CFG: "];
"1000123" -> "1000122"  [label="AST: "];
"1000124" -> "1000122"  [label="AST: "];
"1000129" -> "1000122"  [label="CFG: "];
"1000122" -> "1000352"  [label="DDG: pol"];
"1000122" -> "1000352"  [label="DDG: current->mempolicy"];
"1000122" -> "1000227"  [label="DDG: pol"];
"1000227" -> "1000226"  [label="AST: "];
"1000227" -> "1000228"  [label="CFG: "];
"1000228" -> "1000227"  [label="AST: "];
"1000230" -> "1000227"  [label="CFG: "];
"1000235" -> "1000227"  [label="CFG: "];
"1000227" -> "1000352"  [label="DDG: !pol"];
"1000209" -> "1000227"  [label="DDG: pol"];
"1000215" -> "1000227"  [label="DDG: pol"];
"1000227" -> "1000259"  [label="DDG: pol"];
"1000227" -> "1000295"  [label="DDG: pol"];
"1000227" -> "1000318"  [label="DDG: pol"];
"1000227" -> "1000339"  [label="DDG: pol"];
"1000259" -> "1000258"  [label="AST: "];
"1000259" -> "1000261"  [label="CFG: "];
"1000260" -> "1000259"  [label="AST: "];
"1000261" -> "1000259"  [label="AST: "];
"1000266" -> "1000259"  [label="CFG: "];
"1000258" -> "1000259"  [label="CFG: "];
"1000259" -> "1000352"  [label="DDG: current->mempolicy"];
"1000259" -> "1000258"  [label="DDG: pol"];
"1000259" -> "1000258"  [label="DDG: current->mempolicy"];
"1000229" -> "1000259"  [label="DDG: pol"];
"1000259" -> "1000318"  [label="DDG: pol"];
"1000259" -> "1000339"  [label="DDG: pol"];
"1000258" -> "1000257"  [label="AST: "];
"1000258" -> "1000264"  [label="CFG: "];
"1000264" -> "1000258"  [label="AST: "];
"1000272" -> "1000258"  [label="CFG: "];
"1000285" -> "1000258"  [label="CFG: "];
"1000258" -> "1000352"  [label="DDG: pol == current->mempolicy"];
"1000258" -> "1000352"  [label="DDG: pol->mode == MPOL_INTERLEAVE"];
"1000258" -> "1000352"  [label="DDG: pol == current->mempolicy &&\n\t\t\t\tpol->mode == MPOL_INTERLEAVE"];
"1000264" -> "1000258"  [label="DDG: pol->mode"];
"1000264" -> "1000258"  [label="DDG: MPOL_INTERLEAVE"];
"1000318" -> "1000317"  [label="AST: "];
"1000318" -> "1000319"  [label="CFG: "];
"1000319" -> "1000318"  [label="AST: "];
"1000323" -> "1000318"  [label="CFG: "];
"1000332" -> "1000318"  [label="CFG: "];
"1000318" -> "1000352"  [label="DDG: mpol_store_user_nodemask(pol)"];
"1000295" -> "1000318"  [label="DDG: pol"];
"1000229" -> "1000318"  [label="DDG: pol"];
"1000318" -> "1000333"  [label="DDG: pol"];
"1000318" -> "1000339"  [label="DDG: pol"];
"1000333" -> "1000330"  [label="AST: "];
"1000333" -> "1000335"  [label="CFG: "];
"1000334" -> "1000333"  [label="AST: "];
"1000335" -> "1000333"  [label="AST: "];
"1000337" -> "1000333"  [label="CFG: "];
"1000333" -> "1000352"  [label="DDG: get_policy_nodemask(pol, nmask)"];
"1000333" -> "1000352"  [label="DDG: nmask"];
"1000106" -> "1000333"  [label="DDG: nmask"];
"1000333" -> "1000339"  [label="DDG: pol"];
"1000339" -> "1000109"  [label="AST: "];
"1000339" -> "1000340"  [label="CFG: "];
"1000340" -> "1000339"  [label="AST: "];
"1000342" -> "1000339"  [label="CFG: "];
"1000339" -> "1000352"  [label="DDG: mpol_cond_put(pol)"];
"1000339" -> "1000352"  [label="DDG: pol"];
"1000295" -> "1000339"  [label="DDG: pol"];
"1000229" -> "1000339"  [label="DDG: pol"];
"1000295" -> "1000294"  [label="AST: "];
"1000295" -> "1000297"  [label="CFG: "];
"1000296" -> "1000295"  [label="AST: "];
"1000297" -> "1000295"  [label="AST: "];
"1000299" -> "1000295"  [label="CFG: "];
"1000301" -> "1000295"  [label="CFG: "];
"1000295" -> "1000352"  [label="DDG: &default_policy"];
"1000229" -> "1000295"  [label="DDG: pol"];
}
