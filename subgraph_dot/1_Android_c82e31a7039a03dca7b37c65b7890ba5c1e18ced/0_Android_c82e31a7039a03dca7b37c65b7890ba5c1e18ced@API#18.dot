digraph "0_Android_c82e31a7039a03dca7b37c65b7890ba5c1e18ced@API" {
"1000325" [label="(Call,decrypt(inData, size, streamCTR, inputCTR, outData))"];
"1000311" [label="(Call,data.read(inData, size))"];
"1000307" [label="(Call,(uint8_t *)inData)"];
"1000297" [label="(Call,*inData = malloc(2 * size))"];
"1000299" [label="(Call,malloc(2 * size))"];
"1000300" [label="(Call,2 * size)"];
"1000293" [label="(Call,size = data.readInt32())"];
"1000315" [label="(Call,streamCTR = data.readInt32())"];
"1000319" [label="(Call,inputCTR = data.readInt64())"];
"1000304" [label="(Call,*outData = (uint8_t *)inData + size)"];
"1000323" [label="(Call,err = decrypt(inData, size, streamCTR, inputCTR, outData))"];
"1000331" [label="(Call,reply->writeInt32(err))"];
"1000334" [label="(Call,err == OK)"];
"1000348" [label="(Return,return OK;)"];
"1000338" [label="(Call,reply->write(outData, size))"];
"1000341" [label="(Call,free(inData))"];
"1000310" [label="(Identifier,size)"];
"1000331" [label="(Call,reply->writeInt32(err))"];
"1000301" [label="(Literal,2)"];
"1000335" [label="(Identifier,err)"];
"1000320" [label="(Identifier,inputCTR)"];
"1000324" [label="(Identifier,err)"];
"1000342" [label="(Identifier,inData)"];
"1000337" [label="(Block,)"];
"1000298" [label="(Identifier,inData)"];
"1000297" [label="(Call,*inData = malloc(2 * size))"];
"1000344" [label="(Identifier,inData)"];
"1000311" [label="(Call,data.read(inData, size))"];
"1000317" [label="(Call,data.readInt32())"];
"1000319" [label="(Call,inputCTR = data.readInt64())"];
"1000315" [label="(Call,streamCTR = data.readInt32())"];
"1000295" [label="(Call,data.readInt32())"];
"1000336" [label="(Identifier,OK)"];
"1000291" [label="(Block,)"];
"1000325" [label="(Call,decrypt(inData, size, streamCTR, inputCTR, outData))"];
"1000348" [label="(Return,return OK;)"];
"1000329" [label="(Identifier,inputCTR)"];
"1000340" [label="(Identifier,size)"];
"1000309" [label="(Identifier,inData)"];
"1000357" [label="(MethodReturn,status_t)"];
"1000327" [label="(Identifier,size)"];
"1000293" [label="(Call,size = data.readInt32())"];
"1000339" [label="(Identifier,outData)"];
"1000307" [label="(Call,(uint8_t *)inData)"];
"1000306" [label="(Call,(uint8_t *)inData + size)"];
"1000321" [label="(Call,data.readInt64())"];
"1000300" [label="(Call,2 * size)"];
"1000334" [label="(Call,err == OK)"];
"1000349" [label="(Identifier,OK)"];
"1000323" [label="(Call,err = decrypt(inData, size, streamCTR, inputCTR, outData))"];
"1000304" [label="(Call,*outData = (uint8_t *)inData + size)"];
"1000341" [label="(Call,free(inData))"];
"1000312" [label="(Identifier,inData)"];
"1000326" [label="(Identifier,inData)"];
"1000313" [label="(Identifier,size)"];
"1000316" [label="(Identifier,streamCTR)"];
"1000299" [label="(Call,malloc(2 * size))"];
"1000338" [label="(Call,reply->write(outData, size))"];
"1000305" [label="(Identifier,outData)"];
"1000302" [label="(Identifier,size)"];
"1000294" [label="(Identifier,size)"];
"1000330" [label="(Identifier,outData)"];
"1000332" [label="(Identifier,err)"];
"1000333" [label="(ControlStructure,if (err == OK))"];
"1000328" [label="(Identifier,streamCTR)"];
"1000325" -> "1000323"  [label="AST: "];
"1000325" -> "1000330"  [label="CFG: "];
"1000326" -> "1000325"  [label="AST: "];
"1000327" -> "1000325"  [label="AST: "];
"1000328" -> "1000325"  [label="AST: "];
"1000329" -> "1000325"  [label="AST: "];
"1000330" -> "1000325"  [label="AST: "];
"1000323" -> "1000325"  [label="CFG: "];
"1000325" -> "1000357"  [label="DDG: streamCTR"];
"1000325" -> "1000357"  [label="DDG: inputCTR"];
"1000325" -> "1000357"  [label="DDG: size"];
"1000325" -> "1000323"  [label="DDG: inputCTR"];
"1000325" -> "1000323"  [label="DDG: size"];
"1000325" -> "1000323"  [label="DDG: outData"];
"1000325" -> "1000323"  [label="DDG: streamCTR"];
"1000325" -> "1000323"  [label="DDG: inData"];
"1000311" -> "1000325"  [label="DDG: inData"];
"1000311" -> "1000325"  [label="DDG: size"];
"1000315" -> "1000325"  [label="DDG: streamCTR"];
"1000319" -> "1000325"  [label="DDG: inputCTR"];
"1000304" -> "1000325"  [label="DDG: outData"];
"1000325" -> "1000338"  [label="DDG: outData"];
"1000325" -> "1000338"  [label="DDG: size"];
"1000325" -> "1000341"  [label="DDG: inData"];
"1000311" -> "1000291"  [label="AST: "];
"1000311" -> "1000313"  [label="CFG: "];
"1000312" -> "1000311"  [label="AST: "];
"1000313" -> "1000311"  [label="AST: "];
"1000316" -> "1000311"  [label="CFG: "];
"1000311" -> "1000357"  [label="DDG: data.read(inData, size)"];
"1000307" -> "1000311"  [label="DDG: inData"];
"1000300" -> "1000311"  [label="DDG: size"];
"1000307" -> "1000306"  [label="AST: "];
"1000307" -> "1000309"  [label="CFG: "];
"1000308" -> "1000307"  [label="AST: "];
"1000309" -> "1000307"  [label="AST: "];
"1000310" -> "1000307"  [label="CFG: "];
"1000307" -> "1000304"  [label="DDG: inData"];
"1000307" -> "1000306"  [label="DDG: inData"];
"1000297" -> "1000307"  [label="DDG: inData"];
"1000297" -> "1000291"  [label="AST: "];
"1000297" -> "1000299"  [label="CFG: "];
"1000298" -> "1000297"  [label="AST: "];
"1000299" -> "1000297"  [label="AST: "];
"1000305" -> "1000297"  [label="CFG: "];
"1000297" -> "1000357"  [label="DDG: malloc(2 * size)"];
"1000299" -> "1000297"  [label="DDG: 2 * size"];
"1000299" -> "1000300"  [label="CFG: "];
"1000300" -> "1000299"  [label="AST: "];
"1000299" -> "1000357"  [label="DDG: 2 * size"];
"1000300" -> "1000299"  [label="DDG: 2"];
"1000300" -> "1000299"  [label="DDG: size"];
"1000300" -> "1000302"  [label="CFG: "];
"1000301" -> "1000300"  [label="AST: "];
"1000302" -> "1000300"  [label="AST: "];
"1000293" -> "1000300"  [label="DDG: size"];
"1000300" -> "1000304"  [label="DDG: size"];
"1000300" -> "1000306"  [label="DDG: size"];
"1000293" -> "1000291"  [label="AST: "];
"1000293" -> "1000295"  [label="CFG: "];
"1000294" -> "1000293"  [label="AST: "];
"1000295" -> "1000293"  [label="AST: "];
"1000298" -> "1000293"  [label="CFG: "];
"1000315" -> "1000291"  [label="AST: "];
"1000315" -> "1000317"  [label="CFG: "];
"1000316" -> "1000315"  [label="AST: "];
"1000317" -> "1000315"  [label="AST: "];
"1000320" -> "1000315"  [label="CFG: "];
"1000315" -> "1000357"  [label="DDG: data.readInt32()"];
"1000319" -> "1000291"  [label="AST: "];
"1000319" -> "1000321"  [label="CFG: "];
"1000320" -> "1000319"  [label="AST: "];
"1000321" -> "1000319"  [label="AST: "];
"1000324" -> "1000319"  [label="CFG: "];
"1000319" -> "1000357"  [label="DDG: data.readInt64()"];
"1000304" -> "1000291"  [label="AST: "];
"1000304" -> "1000306"  [label="CFG: "];
"1000305" -> "1000304"  [label="AST: "];
"1000306" -> "1000304"  [label="AST: "];
"1000312" -> "1000304"  [label="CFG: "];
"1000304" -> "1000357"  [label="DDG: (uint8_t *)inData + size"];
"1000323" -> "1000291"  [label="AST: "];
"1000324" -> "1000323"  [label="AST: "];
"1000332" -> "1000323"  [label="CFG: "];
"1000323" -> "1000357"  [label="DDG: decrypt(inData, size, streamCTR, inputCTR, outData)"];
"1000323" -> "1000331"  [label="DDG: err"];
"1000331" -> "1000291"  [label="AST: "];
"1000331" -> "1000332"  [label="CFG: "];
"1000332" -> "1000331"  [label="AST: "];
"1000335" -> "1000331"  [label="CFG: "];
"1000331" -> "1000357"  [label="DDG: reply->writeInt32(err)"];
"1000331" -> "1000334"  [label="DDG: err"];
"1000334" -> "1000333"  [label="AST: "];
"1000334" -> "1000336"  [label="CFG: "];
"1000335" -> "1000334"  [label="AST: "];
"1000336" -> "1000334"  [label="AST: "];
"1000339" -> "1000334"  [label="CFG: "];
"1000342" -> "1000334"  [label="CFG: "];
"1000334" -> "1000357"  [label="DDG: err == OK"];
"1000334" -> "1000357"  [label="DDG: OK"];
"1000334" -> "1000357"  [label="DDG: err"];
"1000334" -> "1000348"  [label="DDG: OK"];
"1000348" -> "1000291"  [label="AST: "];
"1000348" -> "1000349"  [label="CFG: "];
"1000349" -> "1000348"  [label="AST: "];
"1000357" -> "1000348"  [label="CFG: "];
"1000348" -> "1000357"  [label="DDG: <RET>"];
"1000349" -> "1000348"  [label="DDG: OK"];
"1000338" -> "1000337"  [label="AST: "];
"1000338" -> "1000340"  [label="CFG: "];
"1000339" -> "1000338"  [label="AST: "];
"1000340" -> "1000338"  [label="AST: "];
"1000342" -> "1000338"  [label="CFG: "];
"1000338" -> "1000357"  [label="DDG: reply->write(outData, size)"];
"1000338" -> "1000357"  [label="DDG: size"];
"1000341" -> "1000291"  [label="AST: "];
"1000341" -> "1000342"  [label="CFG: "];
"1000342" -> "1000341"  [label="AST: "];
"1000344" -> "1000341"  [label="CFG: "];
}
