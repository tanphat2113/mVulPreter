digraph "0_Android_9667e3eff2d34c3797c3b529370de47b2c1f1bf6@integer" {
"1000198" [label="(Call,*outData = (uint8_t *)inData + size)"];
"1000201" [label="(Call,(uint8_t *)inData)"];
"1000189" [label="(Call,inData == NULL)"];
"1000182" [label="(Call,inData = malloc(2 * size))"];
"1000184" [label="(Call,malloc(2 * size))"];
"1000185" [label="(Call,2 * size)"];
"1000176" [label="(Call,size <= SIZE_MAX / 2)"];
"1000172" [label="(Call,size = data.readInt32())"];
"1000178" [label="(Call,SIZE_MAX / 2)"];
"1000229" [label="(Call,encrypt(inData, size, streamCTR, &inputCTR, outData))"];
"1000227" [label="(Call,err = encrypt(inData, size, streamCTR, &inputCTR, outData))"];
"1000236" [label="(Call,reply->writeInt32(err))"];
"1000239" [label="(Call,err == OK)"];
"1000255" [label="(Return,return OK;)"];
"1000245" [label="(Call,reply->write(outData, size))"];
"1000248" [label="(Call,free(inData))"];
"1000188" [label="(ControlStructure,if (inData == NULL))"];
"1000187" [label="(Identifier,size)"];
"1000177" [label="(Identifier,size)"];
"1000239" [label="(Call,err == OK)"];
"1000212" [label="(Call,err != OK)"];
"1000235" [label="(Identifier,outData)"];
"1000203" [label="(Identifier,inData)"];
"1000248" [label="(Call,free(inData))"];
"1000251" [label="(Identifier,inData)"];
"1000208" [label="(Call,data.read(inData, size))"];
"1000181" [label="(Block,)"];
"1000175" [label="(ControlStructure,if (size <= SIZE_MAX / 2))"];
"1000242" [label="(Block,)"];
"1000244" [label="(Identifier,inputCTR)"];
"1000249" [label="(Identifier,inData)"];
"1000190" [label="(Identifier,inData)"];
"1000237" [label="(Identifier,err)"];
"1000246" [label="(Identifier,outData)"];
"1000233" [label="(Call,&inputCTR)"];
"1000240" [label="(Identifier,err)"];
"1000173" [label="(Identifier,size)"];
"1000228" [label="(Identifier,err)"];
"1000179" [label="(Identifier,SIZE_MAX)"];
"1000230" [label="(Identifier,inData)"];
"1000172" [label="(Call,size = data.readInt32())"];
"1000229" [label="(Call,encrypt(inData, size, streamCTR, &inputCTR, outData))"];
"1000241" [label="(Identifier,OK)"];
"1000189" [label="(Call,inData == NULL)"];
"1000227" [label="(Call,err = encrypt(inData, size, streamCTR, &inputCTR, outData))"];
"1000232" [label="(Identifier,streamCTR)"];
"1000201" [label="(Call,(uint8_t *)inData)"];
"1000207" [label="(Identifier,err)"];
"1000182" [label="(Call,inData = malloc(2 * size))"];
"1000183" [label="(Identifier,inData)"];
"1000200" [label="(Call,(uint8_t *)inData + size)"];
"1000194" [label="(Identifier,ERROR_OUT_OF_RANGE)"];
"1000184" [label="(Call,malloc(2 * size))"];
"1000170" [label="(Block,)"];
"1000238" [label="(ControlStructure,if (err == OK))"];
"1000199" [label="(Identifier,outData)"];
"1000256" [label="(Identifier,OK)"];
"1000407" [label="(MethodReturn,status_t)"];
"1000245" [label="(Call,reply->write(outData, size))"];
"1000255" [label="(Return,return OK;)"];
"1000176" [label="(Call,size <= SIZE_MAX / 2)"];
"1000204" [label="(Identifier,size)"];
"1000231" [label="(Identifier,size)"];
"1000236" [label="(Call,reply->writeInt32(err))"];
"1000174" [label="(Call,data.readInt32())"];
"1000223" [label="(Call,streamCTR = data.readInt32())"];
"1000186" [label="(Literal,2)"];
"1000252" [label="(Call,outData = NULL)"];
"1000178" [label="(Call,SIZE_MAX / 2)"];
"1000250" [label="(Call,inData = outData = NULL)"];
"1000247" [label="(Identifier,size)"];
"1000180" [label="(Literal,2)"];
"1000185" [label="(Call,2 * size)"];
"1000198" [label="(Call,*outData = (uint8_t *)inData + size)"];
"1000191" [label="(Identifier,NULL)"];
"1000198" -> "1000170"  [label="AST: "];
"1000198" -> "1000200"  [label="CFG: "];
"1000199" -> "1000198"  [label="AST: "];
"1000200" -> "1000198"  [label="AST: "];
"1000207" -> "1000198"  [label="CFG: "];
"1000198" -> "1000407"  [label="DDG: (uint8_t *)inData + size"];
"1000198" -> "1000407"  [label="DDG: outData"];
"1000201" -> "1000198"  [label="DDG: inData"];
"1000185" -> "1000198"  [label="DDG: size"];
"1000176" -> "1000198"  [label="DDG: size"];
"1000198" -> "1000229"  [label="DDG: outData"];
"1000201" -> "1000200"  [label="AST: "];
"1000201" -> "1000203"  [label="CFG: "];
"1000202" -> "1000201"  [label="AST: "];
"1000203" -> "1000201"  [label="AST: "];
"1000204" -> "1000201"  [label="CFG: "];
"1000201" -> "1000200"  [label="DDG: inData"];
"1000189" -> "1000201"  [label="DDG: inData"];
"1000201" -> "1000208"  [label="DDG: inData"];
"1000189" -> "1000188"  [label="AST: "];
"1000189" -> "1000191"  [label="CFG: "];
"1000190" -> "1000189"  [label="AST: "];
"1000191" -> "1000189"  [label="AST: "];
"1000194" -> "1000189"  [label="CFG: "];
"1000199" -> "1000189"  [label="CFG: "];
"1000189" -> "1000407"  [label="DDG: inData"];
"1000189" -> "1000407"  [label="DDG: inData == NULL"];
"1000189" -> "1000407"  [label="DDG: NULL"];
"1000182" -> "1000189"  [label="DDG: inData"];
"1000189" -> "1000250"  [label="DDG: NULL"];
"1000189" -> "1000252"  [label="DDG: NULL"];
"1000182" -> "1000181"  [label="AST: "];
"1000182" -> "1000184"  [label="CFG: "];
"1000183" -> "1000182"  [label="AST: "];
"1000184" -> "1000182"  [label="AST: "];
"1000190" -> "1000182"  [label="CFG: "];
"1000182" -> "1000407"  [label="DDG: malloc(2 * size)"];
"1000184" -> "1000182"  [label="DDG: 2 * size"];
"1000184" -> "1000185"  [label="CFG: "];
"1000185" -> "1000184"  [label="AST: "];
"1000184" -> "1000407"  [label="DDG: 2 * size"];
"1000185" -> "1000184"  [label="DDG: 2"];
"1000185" -> "1000184"  [label="DDG: size"];
"1000185" -> "1000187"  [label="CFG: "];
"1000186" -> "1000185"  [label="AST: "];
"1000187" -> "1000185"  [label="AST: "];
"1000185" -> "1000407"  [label="DDG: size"];
"1000176" -> "1000185"  [label="DDG: size"];
"1000185" -> "1000200"  [label="DDG: size"];
"1000185" -> "1000208"  [label="DDG: size"];
"1000176" -> "1000175"  [label="AST: "];
"1000176" -> "1000178"  [label="CFG: "];
"1000177" -> "1000176"  [label="AST: "];
"1000178" -> "1000176"  [label="AST: "];
"1000183" -> "1000176"  [label="CFG: "];
"1000190" -> "1000176"  [label="CFG: "];
"1000176" -> "1000407"  [label="DDG: SIZE_MAX / 2"];
"1000176" -> "1000407"  [label="DDG: size <= SIZE_MAX / 2"];
"1000176" -> "1000407"  [label="DDG: size"];
"1000172" -> "1000176"  [label="DDG: size"];
"1000178" -> "1000176"  [label="DDG: SIZE_MAX"];
"1000178" -> "1000176"  [label="DDG: 2"];
"1000176" -> "1000200"  [label="DDG: size"];
"1000176" -> "1000208"  [label="DDG: size"];
"1000172" -> "1000170"  [label="AST: "];
"1000172" -> "1000174"  [label="CFG: "];
"1000173" -> "1000172"  [label="AST: "];
"1000174" -> "1000172"  [label="AST: "];
"1000177" -> "1000172"  [label="CFG: "];
"1000172" -> "1000407"  [label="DDG: data.readInt32()"];
"1000178" -> "1000180"  [label="CFG: "];
"1000179" -> "1000178"  [label="AST: "];
"1000180" -> "1000178"  [label="AST: "];
"1000178" -> "1000407"  [label="DDG: SIZE_MAX"];
"1000229" -> "1000227"  [label="AST: "];
"1000229" -> "1000235"  [label="CFG: "];
"1000230" -> "1000229"  [label="AST: "];
"1000231" -> "1000229"  [label="AST: "];
"1000232" -> "1000229"  [label="AST: "];
"1000233" -> "1000229"  [label="AST: "];
"1000235" -> "1000229"  [label="AST: "];
"1000227" -> "1000229"  [label="CFG: "];
"1000229" -> "1000407"  [label="DDG: &inputCTR"];
"1000229" -> "1000407"  [label="DDG: size"];
"1000229" -> "1000407"  [label="DDG: streamCTR"];
"1000229" -> "1000227"  [label="DDG: &inputCTR"];
"1000229" -> "1000227"  [label="DDG: inData"];
"1000229" -> "1000227"  [label="DDG: outData"];
"1000229" -> "1000227"  [label="DDG: streamCTR"];
"1000229" -> "1000227"  [label="DDG: size"];
"1000208" -> "1000229"  [label="DDG: inData"];
"1000208" -> "1000229"  [label="DDG: size"];
"1000223" -> "1000229"  [label="DDG: streamCTR"];
"1000229" -> "1000245"  [label="DDG: outData"];
"1000229" -> "1000245"  [label="DDG: size"];
"1000229" -> "1000248"  [label="DDG: inData"];
"1000227" -> "1000170"  [label="AST: "];
"1000228" -> "1000227"  [label="AST: "];
"1000237" -> "1000227"  [label="CFG: "];
"1000227" -> "1000407"  [label="DDG: encrypt(inData, size, streamCTR, &inputCTR, outData)"];
"1000227" -> "1000236"  [label="DDG: err"];
"1000236" -> "1000170"  [label="AST: "];
"1000236" -> "1000237"  [label="CFG: "];
"1000237" -> "1000236"  [label="AST: "];
"1000240" -> "1000236"  [label="CFG: "];
"1000236" -> "1000407"  [label="DDG: reply->writeInt32(err)"];
"1000236" -> "1000239"  [label="DDG: err"];
"1000239" -> "1000238"  [label="AST: "];
"1000239" -> "1000241"  [label="CFG: "];
"1000240" -> "1000239"  [label="AST: "];
"1000241" -> "1000239"  [label="AST: "];
"1000244" -> "1000239"  [label="CFG: "];
"1000249" -> "1000239"  [label="CFG: "];
"1000239" -> "1000407"  [label="DDG: err == OK"];
"1000239" -> "1000407"  [label="DDG: err"];
"1000239" -> "1000407"  [label="DDG: OK"];
"1000212" -> "1000239"  [label="DDG: OK"];
"1000239" -> "1000255"  [label="DDG: OK"];
"1000255" -> "1000170"  [label="AST: "];
"1000255" -> "1000256"  [label="CFG: "];
"1000256" -> "1000255"  [label="AST: "];
"1000407" -> "1000255"  [label="CFG: "];
"1000255" -> "1000407"  [label="DDG: <RET>"];
"1000256" -> "1000255"  [label="DDG: OK"];
"1000245" -> "1000242"  [label="AST: "];
"1000245" -> "1000247"  [label="CFG: "];
"1000246" -> "1000245"  [label="AST: "];
"1000247" -> "1000245"  [label="AST: "];
"1000249" -> "1000245"  [label="CFG: "];
"1000245" -> "1000407"  [label="DDG: reply->write(outData, size)"];
"1000245" -> "1000407"  [label="DDG: size"];
"1000248" -> "1000170"  [label="AST: "];
"1000248" -> "1000249"  [label="CFG: "];
"1000249" -> "1000248"  [label="AST: "];
"1000251" -> "1000248"  [label="CFG: "];
}
