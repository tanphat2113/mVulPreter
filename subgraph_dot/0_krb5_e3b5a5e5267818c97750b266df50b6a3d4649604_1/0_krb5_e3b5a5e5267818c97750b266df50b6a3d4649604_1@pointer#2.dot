digraph "0_krb5_e3b5a5e5267818c97750b266df50b6a3d4649604_1@pointer" {
"1000233" [label="(Call,(*respond)(arg, EINVAL, NULL, NULL, NULL))"];
"1000118" [label="(MethodParameterIn,void *arg)"];
"1000229" [label="(Call,plgctx == NULL)"];
"1000220" [label="(Call,plgctx = pkinit_find_realm_context(context, moddata, request->server))"];
"1000222" [label="(Call,pkinit_find_realm_context(context, moddata, request->server))"];
"1000109" [label="(MethodParameterIn,krb5_context context)"];
"1000209" [label="(Call,moddata == NULL)"];
"1000116" [label="(MethodParameterIn,krb5_kdcpreauth_moddata moddata)"];
"1000186" [label="(Call,data == NULL)"];
"1000113" [label="(MethodParameterIn,krb5_pa_data * data)"];
"1000195" [label="(Call,data->contents == NULL)"];
"1000187" [label="(Identifier,data)"];
"1000113" [label="(MethodParameterIn,krb5_pa_data * data)"];
"1000242" [label="(Identifier,data)"];
"1000460" [label="(Call,verify_client_san(context, plgctx, reqctx, request->client,\n                                   &valid_san))"];
"1000192" [label="(Identifier,data)"];
"1000185" [label="(Call,data == NULL || data->length <= 0 || data->contents == NULL)"];
"1000232" [label="(Block,)"];
"1000209" [label="(Call,moddata == NULL)"];
"1000561" [label="(Call,krb5_check_clockskew(context,\n                                      auth_pack->pkAuthenticator.ctime))"];
"1000240" [label="(Call,print_buffer_bin(data->contents, data->length, \"/tmp/kdc_as_req\"))"];
"1000812" [label="(Call,auth_pack9->clientPublicValue != NULL)"];
"1000119" [label="(Block,)"];
"1000186" [label="(Call,data == NULL)"];
"1000235" [label="(Identifier,EINVAL)"];
"1000224" [label="(Identifier,moddata)"];
"1000937" [label="(Call,pkinit_fini_kdc_req_context(context, reqctx))"];
"1000222" [label="(Call,pkinit_find_realm_context(context, moddata, request->server))"];
"1000189" [label="(Call,data->length <= 0 || data->contents == NULL)"];
"1000233" [label="(Call,(*respond)(arg, EINVAL, NULL, NULL, NULL))"];
"1000236" [label="(Identifier,NULL)"];
"1000237" [label="(Identifier,NULL)"];
"1000234" [label="(Identifier,arg)"];
"1000221" [label="(Identifier,plgctx)"];
"1000943" [label="(Call,free_krb5_auth_pack_draft9(context, &auth_pack9))"];
"1000199" [label="(Identifier,NULL)"];
"1000196" [label="(Call,data->contents)"];
"1000953" [label="(MethodReturn,RET)"];
"1000947" [label="(Call,(*respond)(arg, retval, modreq, e_data, NULL))"];
"1000572" [label="(Call,auth_pack->clientPublicValue != NULL)"];
"1000250" [label="(Call,pkinit_init_kdc_req_context(context, &reqctx))"];
"1000305" [label="(Call,cms_signeddata_verify(context, plgctx->cryptoctx,\n                                       reqctx->cryptoctx, plgctx->idctx, CMS_SIGN_CLIENT,\n                                       plgctx->opts->require_crl_checking,\n                                       (unsigned char *)\n                                       reqp->signedAuthPack.data, reqp->signedAuthPack.length,\n                                       (unsigned char **)&authp_data.data,\n                                       &authp_data.length,\n                                       (unsigned char **)&krb5_authz.data,\n                                       &krb5_authz.length, &is_signed))"];
"1000485" [label="(Call,verify_client_eku(context, plgctx, reqctx, &valid_eku))"];
"1000754" [label="(Call,pkinit_check_kdc_pkid(context, plgctx->cryptoctx,\n                                           reqctx->cryptoctx, plgctx->idctx,\n                                           (unsigned char *)reqp->kdcPkId.data,\n                                           reqp->kdcPkId.length, &valid_kdcPkId))"];
"1000388" [label="(Call,cms_signeddata_verify(context, plgctx->cryptoctx,\n                                       reqctx->cryptoctx, plgctx->idctx, CMS_SIGN_DRAFT9,\n                                       plgctx->opts->require_crl_checking,\n                                       (unsigned char *)\n                                       reqp9->signedAuthPack.data, reqp9->signedAuthPack.length,\n                                       (unsigned char **)&authp_data.data,\n                                       &authp_data.length,\n                                       (unsigned char **)&krb5_authz.data,\n                                       &krb5_authz.length, NULL))"];
"1000869" [label="(Call,reqctx = NULL)"];
"1000230" [label="(Identifier,plgctx)"];
"1000116" [label="(MethodParameterIn,krb5_kdcpreauth_moddata moddata)"];
"1000509" [label="(Call,krb5_principal_compare(context, request->client,\n                                    krb5_anonymous_principal()))"];
"1000580" [label="(Call,server_check_dh(context, plgctx->cryptoctx,\n                                     reqctx->cryptoctx, plgctx->idctx,\n                                     &auth_pack->clientPublicValue->algorithm.parameters,\n                                     plgctx->opts->dh_min_bits))"];
"1000631" [label="(Call,krb5_c_make_checksum(context, CKSUMTYPE_NIST_SHA, NULL,\n                                      0, der_req, &cksum))"];
"1000214" [label="(Identifier,arg)"];
"1000626" [label="(Call,cb->request_body(context, rock))"];
"1000934" [label="(Call,reqctx != NULL)"];
"1000618" [label="(Call,krb5_set_error_message(context, retval,\n                                   _(\"Anonymous pkinit without DH public \"\n                                     \"value not supported.\")))"];
"1000195" [label="(Call,data->contents == NULL)"];
"1000229" [label="(Call,plgctx == NULL)"];
"1000220" [label="(Call,plgctx = pkinit_find_realm_context(context, moddata, request->server))"];
"1000225" [label="(Call,request->server)"];
"1000223" [label="(Identifier,context)"];
"1000109" [label="(MethodParameterIn,krb5_context context)"];
"1000519" [label="(Call,krb5_set_error_message(context, retval,\n                                   _(\"Pkinit request not signed, but client \"\n                                     \"not anonymous.\")))"];
"1000885" [label="(Call,pkinit_create_edata(context, plgctx->cryptoctx, reqctx->cryptoctx,\n                                plgctx->idctx, plgctx->opts, retval, &e_data))"];
"1000208" [label="(ControlStructure,if (moddata == NULL))"];
"1000188" [label="(Identifier,NULL)"];
"1000820" [label="(Call,server_check_dh(context, plgctx->cryptoctx,\n                                     reqctx->cryptoctx, plgctx->idctx,\n                                     &auth_pack9->clientPublicValue->algorithm.parameters,\n                                     plgctx->opts->dh_min_bits))"];
"1000211" [label="(Identifier,NULL)"];
"1000238" [label="(Identifier,NULL)"];
"1000231" [label="(Identifier,NULL)"];
"1000213" [label="(Call,(*respond)(arg, EINVAL, NULL, NULL, NULL))"];
"1000239" [label="(Return,return;)"];
"1000264" [label="(Call,PADATA_TO_KRB5DATA(data, &k5data))"];
"1000201" [label="(Call,(*respond)(arg, EINVAL, NULL, NULL, NULL))"];
"1000118" [label="(MethodParameterIn,void *arg)"];
"1000210" [label="(Identifier,moddata)"];
"1000228" [label="(ControlStructure,if (plgctx == NULL))"];
"1000233" -> "1000232"  [label="AST: "];
"1000233" -> "1000238"  [label="CFG: "];
"1000234" -> "1000233"  [label="AST: "];
"1000235" -> "1000233"  [label="AST: "];
"1000236" -> "1000233"  [label="AST: "];
"1000237" -> "1000233"  [label="AST: "];
"1000238" -> "1000233"  [label="AST: "];
"1000239" -> "1000233"  [label="CFG: "];
"1000233" -> "1000953"  [label="DDG: NULL"];
"1000233" -> "1000953"  [label="DDG: (*respond)(arg, EINVAL, NULL, NULL, NULL)"];
"1000233" -> "1000953"  [label="DDG: EINVAL"];
"1000233" -> "1000953"  [label="DDG: arg"];
"1000118" -> "1000233"  [label="DDG: arg"];
"1000229" -> "1000233"  [label="DDG: NULL"];
"1000118" -> "1000108"  [label="AST: "];
"1000118" -> "1000953"  [label="DDG: arg"];
"1000118" -> "1000201"  [label="DDG: arg"];
"1000118" -> "1000213"  [label="DDG: arg"];
"1000118" -> "1000947"  [label="DDG: arg"];
"1000229" -> "1000228"  [label="AST: "];
"1000229" -> "1000231"  [label="CFG: "];
"1000230" -> "1000229"  [label="AST: "];
"1000231" -> "1000229"  [label="AST: "];
"1000234" -> "1000229"  [label="CFG: "];
"1000242" -> "1000229"  [label="CFG: "];
"1000229" -> "1000953"  [label="DDG: plgctx == NULL"];
"1000229" -> "1000953"  [label="DDG: plgctx"];
"1000220" -> "1000229"  [label="DDG: plgctx"];
"1000209" -> "1000229"  [label="DDG: NULL"];
"1000229" -> "1000388"  [label="DDG: NULL"];
"1000229" -> "1000460"  [label="DDG: plgctx"];
"1000229" -> "1000572"  [label="DDG: NULL"];
"1000229" -> "1000812"  [label="DDG: NULL"];
"1000229" -> "1000869"  [label="DDG: NULL"];
"1000229" -> "1000934"  [label="DDG: NULL"];
"1000220" -> "1000119"  [label="AST: "];
"1000220" -> "1000222"  [label="CFG: "];
"1000221" -> "1000220"  [label="AST: "];
"1000222" -> "1000220"  [label="AST: "];
"1000230" -> "1000220"  [label="CFG: "];
"1000220" -> "1000953"  [label="DDG: pkinit_find_realm_context(context, moddata, request->server)"];
"1000222" -> "1000220"  [label="DDG: context"];
"1000222" -> "1000220"  [label="DDG: moddata"];
"1000222" -> "1000220"  [label="DDG: request->server"];
"1000222" -> "1000225"  [label="CFG: "];
"1000223" -> "1000222"  [label="AST: "];
"1000224" -> "1000222"  [label="AST: "];
"1000225" -> "1000222"  [label="AST: "];
"1000222" -> "1000953"  [label="DDG: request->server"];
"1000222" -> "1000953"  [label="DDG: context"];
"1000222" -> "1000953"  [label="DDG: moddata"];
"1000109" -> "1000222"  [label="DDG: context"];
"1000209" -> "1000222"  [label="DDG: moddata"];
"1000116" -> "1000222"  [label="DDG: moddata"];
"1000222" -> "1000250"  [label="DDG: context"];
"1000109" -> "1000108"  [label="AST: "];
"1000109" -> "1000953"  [label="DDG: context"];
"1000109" -> "1000250"  [label="DDG: context"];
"1000109" -> "1000305"  [label="DDG: context"];
"1000109" -> "1000388"  [label="DDG: context"];
"1000109" -> "1000460"  [label="DDG: context"];
"1000109" -> "1000485"  [label="DDG: context"];
"1000109" -> "1000509"  [label="DDG: context"];
"1000109" -> "1000519"  [label="DDG: context"];
"1000109" -> "1000561"  [label="DDG: context"];
"1000109" -> "1000580"  [label="DDG: context"];
"1000109" -> "1000618"  [label="DDG: context"];
"1000109" -> "1000626"  [label="DDG: context"];
"1000109" -> "1000631"  [label="DDG: context"];
"1000109" -> "1000754"  [label="DDG: context"];
"1000109" -> "1000820"  [label="DDG: context"];
"1000109" -> "1000885"  [label="DDG: context"];
"1000109" -> "1000937"  [label="DDG: context"];
"1000109" -> "1000943"  [label="DDG: context"];
"1000209" -> "1000208"  [label="AST: "];
"1000209" -> "1000211"  [label="CFG: "];
"1000210" -> "1000209"  [label="AST: "];
"1000211" -> "1000209"  [label="AST: "];
"1000214" -> "1000209"  [label="CFG: "];
"1000221" -> "1000209"  [label="CFG: "];
"1000209" -> "1000953"  [label="DDG: moddata == NULL"];
"1000209" -> "1000953"  [label="DDG: moddata"];
"1000116" -> "1000209"  [label="DDG: moddata"];
"1000186" -> "1000209"  [label="DDG: NULL"];
"1000195" -> "1000209"  [label="DDG: NULL"];
"1000209" -> "1000213"  [label="DDG: NULL"];
"1000116" -> "1000108"  [label="AST: "];
"1000116" -> "1000953"  [label="DDG: moddata"];
"1000186" -> "1000185"  [label="AST: "];
"1000186" -> "1000188"  [label="CFG: "];
"1000187" -> "1000186"  [label="AST: "];
"1000188" -> "1000186"  [label="AST: "];
"1000192" -> "1000186"  [label="CFG: "];
"1000185" -> "1000186"  [label="CFG: "];
"1000186" -> "1000953"  [label="DDG: data"];
"1000186" -> "1000185"  [label="DDG: data"];
"1000186" -> "1000185"  [label="DDG: NULL"];
"1000113" -> "1000186"  [label="DDG: data"];
"1000186" -> "1000195"  [label="DDG: NULL"];
"1000186" -> "1000201"  [label="DDG: NULL"];
"1000186" -> "1000264"  [label="DDG: data"];
"1000113" -> "1000108"  [label="AST: "];
"1000113" -> "1000953"  [label="DDG: data"];
"1000113" -> "1000264"  [label="DDG: data"];
"1000195" -> "1000189"  [label="AST: "];
"1000195" -> "1000199"  [label="CFG: "];
"1000196" -> "1000195"  [label="AST: "];
"1000199" -> "1000195"  [label="AST: "];
"1000189" -> "1000195"  [label="CFG: "];
"1000195" -> "1000953"  [label="DDG: data->contents"];
"1000195" -> "1000189"  [label="DDG: data->contents"];
"1000195" -> "1000189"  [label="DDG: NULL"];
"1000195" -> "1000201"  [label="DDG: NULL"];
"1000195" -> "1000240"  [label="DDG: data->contents"];
}
