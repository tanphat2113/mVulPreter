digraph "0_Android_28a566f7731b4cb76d2a9ba16d997ac5aeb07dad@API" {
"1000194" [label="(Call,range_count * sizeof(MappedRange))"];
"1000185" [label="(Call,range_count * sizeof(MappedRange))"];
"1000189" [label="(Call,memset(pMap->ranges, 0, range_count * sizeof(MappedRange)))"];
"1000231" [label="(Call,range_count-1)"];
"1000242" [label="(Call,range_count-1)"];
"1000276" [label="(Call,i < range_count)"];
"1000279" [label="(Call,++i)"];
"1000295" [label="(Call,LOGW(\"failed to parse range %d in block map\n\", i))"];
"1000326" [label="(Call,LOGW(\"failed to map block %d: %s\n\", i, strerror(errno)))"];
"1000375" [label="(Call,LOGI(\"mmapped %d ranges\n\", range_count))"];
"1000187" [label="(Call,sizeof(MappedRange))"];
"1000272" [label="(ControlStructure,for (i = 0; i < range_count; ++i))"];
"1000278" [label="(Identifier,range_count)"];
"1000280" [label="(Identifier,i)"];
"1000294" [label="(Block,)"];
"1000287" [label="(Identifier,mapf)"];
"1000242" [label="(Call,range_count-1)"];
"1000244" [label="(Literal,1)"];
"1000329" [label="(Call,strerror(errno))"];
"1000190" [label="(Call,pMap->ranges)"];
"1000377" [label="(Identifier,range_count)"];
"1000233" [label="(Literal,1)"];
"1000276" [label="(Call,i < range_count)"];
"1000325" [label="(Block,)"];
"1000380" [label="(MethodReturn,static int)"];
"1000279" [label="(Call,++i)"];
"1000189" [label="(Call,memset(pMap->ranges, 0, range_count * sizeof(MappedRange)))"];
"1000232" [label="(Identifier,range_count)"];
"1000227" [label="(Call,pMap->ranges[range_count-1])"];
"1000367" [label="(Identifier,pMap)"];
"1000375" [label="(Call,LOGI(\"mmapped %d ranges\n\", range_count))"];
"1000196" [label="(Call,sizeof(MappedRange))"];
"1000243" [label="(Identifier,range_count)"];
"1000200" [label="(Identifier,reserve)"];
"1000379" [label="(Literal,0)"];
"1000194" [label="(Call,range_count * sizeof(MappedRange))"];
"1000184" [label="(Call,malloc(range_count * sizeof(MappedRange)))"];
"1000277" [label="(Identifier,i)"];
"1000238" [label="(Call,pMap->ranges[range_count-1])"];
"1000326" [label="(Call,LOGW(\"failed to map block %d: %s\n\", i, strerror(errno)))"];
"1000273" [label="(Call,i = 0)"];
"1000195" [label="(Identifier,range_count)"];
"1000103" [label="(Block,)"];
"1000231" [label="(Call,range_count-1)"];
"1000376" [label="(Literal,\"mmapped %d ranges\n\")"];
"1000333" [label="(Literal,1)"];
"1000296" [label="(Literal,\"failed to parse range %d in block map\n\")"];
"1000295" [label="(Call,LOGW(\"failed to parse range %d in block map\n\", i))"];
"1000186" [label="(Identifier,range_count)"];
"1000297" [label="(Identifier,i)"];
"1000180" [label="(Call,pMap->ranges = malloc(range_count * sizeof(MappedRange)))"];
"1000185" [label="(Call,range_count * sizeof(MappedRange))"];
"1000328" [label="(Identifier,i)"];
"1000327" [label="(Literal,\"failed to map block %d: %s\n\")"];
"1000300" [label="(Literal,1)"];
"1000193" [label="(Literal,0)"];
"1000194" -> "1000189"  [label="AST: "];
"1000194" -> "1000196"  [label="CFG: "];
"1000195" -> "1000194"  [label="AST: "];
"1000196" -> "1000194"  [label="AST: "];
"1000189" -> "1000194"  [label="CFG: "];
"1000194" -> "1000380"  [label="DDG: "];
"1000194" -> "1000189"  [label="DDG: "];
"1000185" -> "1000194"  [label="DDG: "];
"1000194" -> "1000231"  [label="DDG: "];
"1000185" -> "1000184"  [label="AST: "];
"1000185" -> "1000187"  [label="CFG: "];
"1000186" -> "1000185"  [label="AST: "];
"1000187" -> "1000185"  [label="AST: "];
"1000184" -> "1000185"  [label="CFG: "];
"1000185" -> "1000184"  [label="DDG: "];
"1000189" -> "1000103"  [label="AST: "];
"1000190" -> "1000189"  [label="AST: "];
"1000193" -> "1000189"  [label="AST: "];
"1000200" -> "1000189"  [label="CFG: "];
"1000189" -> "1000380"  [label="DDG: "];
"1000189" -> "1000380"  [label="DDG: "];
"1000189" -> "1000380"  [label="DDG: "];
"1000180" -> "1000189"  [label="DDG: "];
"1000231" -> "1000227"  [label="AST: "];
"1000231" -> "1000233"  [label="CFG: "];
"1000232" -> "1000231"  [label="AST: "];
"1000233" -> "1000231"  [label="AST: "];
"1000227" -> "1000231"  [label="CFG: "];
"1000231" -> "1000242"  [label="DDG: "];
"1000242" -> "1000238"  [label="AST: "];
"1000242" -> "1000244"  [label="CFG: "];
"1000243" -> "1000242"  [label="AST: "];
"1000244" -> "1000242"  [label="AST: "];
"1000238" -> "1000242"  [label="CFG: "];
"1000242" -> "1000380"  [label="DDG: "];
"1000242" -> "1000276"  [label="DDG: "];
"1000276" -> "1000272"  [label="AST: "];
"1000276" -> "1000278"  [label="CFG: "];
"1000277" -> "1000276"  [label="AST: "];
"1000278" -> "1000276"  [label="AST: "];
"1000287" -> "1000276"  [label="CFG: "];
"1000367" -> "1000276"  [label="CFG: "];
"1000276" -> "1000380"  [label="DDG: "];
"1000276" -> "1000380"  [label="DDG: "];
"1000276" -> "1000380"  [label="DDG: "];
"1000279" -> "1000276"  [label="DDG: "];
"1000273" -> "1000276"  [label="DDG: "];
"1000276" -> "1000279"  [label="DDG: "];
"1000276" -> "1000295"  [label="DDG: "];
"1000276" -> "1000326"  [label="DDG: "];
"1000276" -> "1000375"  [label="DDG: "];
"1000279" -> "1000272"  [label="AST: "];
"1000279" -> "1000280"  [label="CFG: "];
"1000280" -> "1000279"  [label="AST: "];
"1000277" -> "1000279"  [label="CFG: "];
"1000295" -> "1000294"  [label="AST: "];
"1000295" -> "1000297"  [label="CFG: "];
"1000296" -> "1000295"  [label="AST: "];
"1000297" -> "1000295"  [label="AST: "];
"1000300" -> "1000295"  [label="CFG: "];
"1000295" -> "1000380"  [label="DDG: "];
"1000295" -> "1000380"  [label="DDG: "];
"1000326" -> "1000325"  [label="AST: "];
"1000326" -> "1000329"  [label="CFG: "];
"1000327" -> "1000326"  [label="AST: "];
"1000328" -> "1000326"  [label="AST: "];
"1000329" -> "1000326"  [label="AST: "];
"1000333" -> "1000326"  [label="CFG: "];
"1000326" -> "1000380"  [label="DDG: "];
"1000326" -> "1000380"  [label="DDG: "];
"1000326" -> "1000380"  [label="DDG: "];
"1000329" -> "1000326"  [label="DDG: "];
"1000375" -> "1000103"  [label="AST: "];
"1000375" -> "1000377"  [label="CFG: "];
"1000376" -> "1000375"  [label="AST: "];
"1000377" -> "1000375"  [label="AST: "];
"1000379" -> "1000375"  [label="CFG: "];
"1000375" -> "1000380"  [label="DDG: "];
"1000375" -> "1000380"  [label="DDG: "];
}
