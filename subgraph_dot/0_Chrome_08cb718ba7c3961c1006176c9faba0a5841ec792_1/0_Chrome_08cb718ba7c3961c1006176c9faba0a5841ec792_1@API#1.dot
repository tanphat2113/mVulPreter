digraph "0_Chrome_08cb718ba7c3961c1006176c9faba0a5841ec792_1@API" {
"1000124" [label="(Call,memcmp(comp, kIdnPrefix, sizeof(kIdnPrefix)))"];
"1000101" [label="(MethodParameterIn,const base::char16* comp)"];
"1000123" [label="(Call,!memcmp(comp, kIdnPrefix, sizeof(kIdnPrefix)))"];
"1000118" [label="(Call,(comp_len > arraysize(kIdnPrefix)) &&\n      !memcmp(comp, kIdnPrefix, sizeof(kIdnPrefix)))"];
"1000164" [label="(Call,uidna_labelToUnicode(\n          uidna, comp, static_cast<int32_t>(comp_len), &(*out)[original_length],\n          output_length, &info, &status))"];
"1000162" [label="(Call,output_length = uidna_labelToUnicode(\n          uidna, comp, static_cast<int32_t>(comp_len), &(*out)[original_length],\n          output_length, &info, &status))"];
"1000155" [label="(Call,out->resize(original_length + output_length))"];
"1000156" [label="(Call,original_length + output_length)"];
"1000199" [label="(Call,out->resize(original_length + output_length))"];
"1000200" [label="(Call,original_length + output_length)"];
"1000211" [label="(Call,size_t>(output_length))"];
"1000209" [label="(Call,base::checked_cast<size_t>(output_length))"];
"1000205" [label="(Call,base::StringPiece16(out->data() + original_length,\n                                  base::checked_cast<size_t>(output_length)))"];
"1000204" [label="(Call,IsIDNComponentSafe(\n              base::StringPiece16(out->data() + original_length,\n                                  base::checked_cast<size_t>(output_length)),\n              is_tld_ascii))"];
"1000219" [label="(Call,out->append(comp, comp_len))"];
"1000158" [label="(Identifier,output_length)"];
"1000221" [label="(Identifier,comp_len)"];
"1000198" [label="(Block,)"];
"1000209" [label="(Call,base::checked_cast<size_t>(output_length))"];
"1000163" [label="(Identifier,output_length)"];
"1000199" [label="(Call,out->resize(original_length + output_length))"];
"1000212" [label="(Identifier,size_t)"];
"1000175" [label="(Identifier,output_length)"];
"1000126" [label="(Identifier,kIdnPrefix)"];
"1000160" [label="(Identifier,status)"];
"1000218" [label="(Identifier,original_length)"];
"1000178" [label="(Call,&status)"];
"1000211" [label="(Call,size_t>(output_length))"];
"1000200" [label="(Call,original_length + output_length)"];
"1000205" [label="(Call,base::StringPiece16(out->data() + original_length,\n                                  base::checked_cast<size_t>(output_length)))"];
"1000123" [label="(Call,!memcmp(comp, kIdnPrefix, sizeof(kIdnPrefix)))"];
"1000182" [label="(Identifier,status)"];
"1000219" [label="(Call,out->append(comp, comp_len))"];
"1000156" [label="(Call,original_length + output_length)"];
"1000118" [label="(Call,(comp_len > arraysize(kIdnPrefix)) &&\n      !memcmp(comp, kIdnPrefix, sizeof(kIdnPrefix)))"];
"1000141" [label="(Call,original_length = out->length())"];
"1000214" [label="(Identifier,is_tld_ascii)"];
"1000155" [label="(Call,out->resize(original_length + output_length))"];
"1000216" [label="(Identifier,true)"];
"1000162" [label="(Call,output_length = uidna_labelToUnicode(\n          uidna, comp, static_cast<int32_t>(comp_len), &(*out)[original_length],\n          output_length, &info, &status))"];
"1000102" [label="(MethodParameterIn,size_t comp_len)"];
"1000165" [label="(Identifier,uidna)"];
"1000213" [label="(Identifier,output_length)"];
"1000137" [label="(Call,uidna != NULL)"];
"1000202" [label="(Identifier,output_length)"];
"1000201" [label="(Identifier,original_length)"];
"1000223" [label="(Identifier,false)"];
"1000125" [label="(Identifier,comp)"];
"1000105" [label="(Block,)"];
"1000206" [label="(Call,out->data() + original_length)"];
"1000224" [label="(MethodReturn,bool)"];
"1000170" [label="(Call,&(*out)[original_length])"];
"1000103" [label="(MethodParameterIn,bool is_tld_ascii)"];
"1000166" [label="(Identifier,comp)"];
"1000124" [label="(Call,memcmp(comp, kIdnPrefix, sizeof(kIdnPrefix)))"];
"1000164" [label="(Call,uidna_labelToUnicode(\n          uidna, comp, static_cast<int32_t>(comp_len), &(*out)[original_length],\n          output_length, &info, &status))"];
"1000117" [label="(ControlStructure,if ((comp_len > arraysize(kIdnPrefix)) &&\n      !memcmp(comp, kIdnPrefix, sizeof(kIdnPrefix))))"];
"1000176" [label="(Call,&info)"];
"1000157" [label="(Identifier,original_length)"];
"1000119" [label="(Call,comp_len > arraysize(kIdnPrefix))"];
"1000145" [label="(Call,output_length = 64)"];
"1000220" [label="(Identifier,comp)"];
"1000127" [label="(Call,sizeof(kIdnPrefix))"];
"1000207" [label="(Call,out->data())"];
"1000101" [label="(MethodParameterIn,const base::char16* comp)"];
"1000132" [label="(Identifier,uidna)"];
"1000204" [label="(Call,IsIDNComponentSafe(\n              base::StringPiece16(out->data() + original_length,\n                                  base::checked_cast<size_t>(output_length)),\n              is_tld_ascii))"];
"1000203" [label="(ControlStructure,if (IsIDNComponentSafe(\n              base::StringPiece16(out->data() + original_length,\n                                  base::checked_cast<size_t>(output_length)),\n              is_tld_ascii)))"];
"1000154" [label="(Block,)"];
"1000167" [label="(Call,static_cast<int32_t>(comp_len))"];
"1000210" [label="(Identifier,base::checked_cast)"];
"1000124" -> "1000123"  [label="AST: "];
"1000124" -> "1000127"  [label="CFG: "];
"1000125" -> "1000124"  [label="AST: "];
"1000126" -> "1000124"  [label="AST: "];
"1000127" -> "1000124"  [label="AST: "];
"1000123" -> "1000124"  [label="CFG: "];
"1000124" -> "1000224"  [label="DDG: kIdnPrefix"];
"1000124" -> "1000123"  [label="DDG: comp"];
"1000124" -> "1000123"  [label="DDG: kIdnPrefix"];
"1000101" -> "1000124"  [label="DDG: comp"];
"1000124" -> "1000164"  [label="DDG: comp"];
"1000124" -> "1000219"  [label="DDG: comp"];
"1000101" -> "1000100"  [label="AST: "];
"1000101" -> "1000224"  [label="DDG: comp"];
"1000101" -> "1000164"  [label="DDG: comp"];
"1000101" -> "1000219"  [label="DDG: comp"];
"1000123" -> "1000118"  [label="AST: "];
"1000118" -> "1000123"  [label="CFG: "];
"1000123" -> "1000224"  [label="DDG: memcmp(comp, kIdnPrefix, sizeof(kIdnPrefix))"];
"1000123" -> "1000118"  [label="DDG: memcmp(comp, kIdnPrefix, sizeof(kIdnPrefix))"];
"1000118" -> "1000117"  [label="AST: "];
"1000118" -> "1000119"  [label="CFG: "];
"1000119" -> "1000118"  [label="AST: "];
"1000132" -> "1000118"  [label="CFG: "];
"1000220" -> "1000118"  [label="CFG: "];
"1000118" -> "1000224"  [label="DDG: (comp_len > arraysize(kIdnPrefix)) &&\n      !memcmp(comp, kIdnPrefix, sizeof(kIdnPrefix))"];
"1000118" -> "1000224"  [label="DDG: !memcmp(comp, kIdnPrefix, sizeof(kIdnPrefix))"];
"1000118" -> "1000224"  [label="DDG: comp_len > arraysize(kIdnPrefix)"];
"1000119" -> "1000118"  [label="DDG: comp_len"];
"1000119" -> "1000118"  [label="DDG: arraysize(kIdnPrefix)"];
"1000164" -> "1000162"  [label="AST: "];
"1000164" -> "1000178"  [label="CFG: "];
"1000165" -> "1000164"  [label="AST: "];
"1000166" -> "1000164"  [label="AST: "];
"1000167" -> "1000164"  [label="AST: "];
"1000170" -> "1000164"  [label="AST: "];
"1000175" -> "1000164"  [label="AST: "];
"1000176" -> "1000164"  [label="AST: "];
"1000178" -> "1000164"  [label="AST: "];
"1000162" -> "1000164"  [label="CFG: "];
"1000164" -> "1000224"  [label="DDG: comp"];
"1000164" -> "1000224"  [label="DDG: &status"];
"1000164" -> "1000224"  [label="DDG: static_cast<int32_t>(comp_len)"];
"1000164" -> "1000224"  [label="DDG: &info"];
"1000164" -> "1000224"  [label="DDG: &(*out)[original_length]"];
"1000164" -> "1000224"  [label="DDG: uidna"];
"1000164" -> "1000162"  [label="DDG: &status"];
"1000164" -> "1000162"  [label="DDG: &(*out)[original_length]"];
"1000164" -> "1000162"  [label="DDG: &info"];
"1000164" -> "1000162"  [label="DDG: uidna"];
"1000164" -> "1000162"  [label="DDG: static_cast<int32_t>(comp_len)"];
"1000164" -> "1000162"  [label="DDG: comp"];
"1000164" -> "1000162"  [label="DDG: output_length"];
"1000137" -> "1000164"  [label="DDG: uidna"];
"1000167" -> "1000164"  [label="DDG: comp_len"];
"1000162" -> "1000164"  [label="DDG: output_length"];
"1000145" -> "1000164"  [label="DDG: output_length"];
"1000164" -> "1000219"  [label="DDG: comp"];
"1000162" -> "1000154"  [label="AST: "];
"1000163" -> "1000162"  [label="AST: "];
"1000182" -> "1000162"  [label="CFG: "];
"1000162" -> "1000224"  [label="DDG: uidna_labelToUnicode(\n          uidna, comp, static_cast<int32_t>(comp_len), &(*out)[original_length],\n          output_length, &info, &status)"];
"1000162" -> "1000224"  [label="DDG: output_length"];
"1000162" -> "1000155"  [label="DDG: output_length"];
"1000162" -> "1000156"  [label="DDG: output_length"];
"1000162" -> "1000199"  [label="DDG: output_length"];
"1000162" -> "1000200"  [label="DDG: output_length"];
"1000162" -> "1000211"  [label="DDG: output_length"];
"1000155" -> "1000154"  [label="AST: "];
"1000155" -> "1000156"  [label="CFG: "];
"1000156" -> "1000155"  [label="AST: "];
"1000160" -> "1000155"  [label="CFG: "];
"1000155" -> "1000224"  [label="DDG: original_length + output_length"];
"1000155" -> "1000224"  [label="DDG: out->resize(original_length + output_length)"];
"1000141" -> "1000155"  [label="DDG: original_length"];
"1000145" -> "1000155"  [label="DDG: output_length"];
"1000156" -> "1000158"  [label="CFG: "];
"1000157" -> "1000156"  [label="AST: "];
"1000158" -> "1000156"  [label="AST: "];
"1000141" -> "1000156"  [label="DDG: original_length"];
"1000145" -> "1000156"  [label="DDG: output_length"];
"1000199" -> "1000198"  [label="AST: "];
"1000199" -> "1000200"  [label="CFG: "];
"1000200" -> "1000199"  [label="AST: "];
"1000207" -> "1000199"  [label="CFG: "];
"1000199" -> "1000224"  [label="DDG: original_length + output_length"];
"1000199" -> "1000224"  [label="DDG: out->resize(original_length + output_length)"];
"1000141" -> "1000199"  [label="DDG: original_length"];
"1000200" -> "1000202"  [label="CFG: "];
"1000201" -> "1000200"  [label="AST: "];
"1000202" -> "1000200"  [label="AST: "];
"1000141" -> "1000200"  [label="DDG: original_length"];
"1000211" -> "1000209"  [label="AST: "];
"1000211" -> "1000213"  [label="CFG: "];
"1000212" -> "1000211"  [label="AST: "];
"1000213" -> "1000211"  [label="AST: "];
"1000209" -> "1000211"  [label="CFG: "];
"1000211" -> "1000224"  [label="DDG: size_t"];
"1000211" -> "1000224"  [label="DDG: output_length"];
"1000211" -> "1000209"  [label="DDG: size_t"];
"1000211" -> "1000209"  [label="DDG: output_length"];
"1000209" -> "1000205"  [label="AST: "];
"1000210" -> "1000209"  [label="AST: "];
"1000205" -> "1000209"  [label="CFG: "];
"1000209" -> "1000224"  [label="DDG: base::checked_cast"];
"1000209" -> "1000224"  [label="DDG: size_t>(output_length)"];
"1000209" -> "1000205"  [label="DDG: base::checked_cast"];
"1000209" -> "1000205"  [label="DDG: size_t>(output_length)"];
"1000205" -> "1000204"  [label="AST: "];
"1000206" -> "1000205"  [label="AST: "];
"1000214" -> "1000205"  [label="CFG: "];
"1000205" -> "1000224"  [label="DDG: base::checked_cast<size_t>(output_length)"];
"1000205" -> "1000224"  [label="DDG: out->data() + original_length"];
"1000205" -> "1000204"  [label="DDG: out->data() + original_length"];
"1000205" -> "1000204"  [label="DDG: base::checked_cast<size_t>(output_length)"];
"1000141" -> "1000205"  [label="DDG: original_length"];
"1000204" -> "1000203"  [label="AST: "];
"1000204" -> "1000214"  [label="CFG: "];
"1000214" -> "1000204"  [label="AST: "];
"1000216" -> "1000204"  [label="CFG: "];
"1000218" -> "1000204"  [label="CFG: "];
"1000204" -> "1000224"  [label="DDG: is_tld_ascii"];
"1000204" -> "1000224"  [label="DDG: base::StringPiece16(out->data() + original_length,\n                                  base::checked_cast<size_t>(output_length))"];
"1000204" -> "1000224"  [label="DDG: IsIDNComponentSafe(\n              base::StringPiece16(out->data() + original_length,\n                                  base::checked_cast<size_t>(output_length)),\n              is_tld_ascii)"];
"1000103" -> "1000204"  [label="DDG: is_tld_ascii"];
"1000219" -> "1000105"  [label="AST: "];
"1000219" -> "1000221"  [label="CFG: "];
"1000220" -> "1000219"  [label="AST: "];
"1000221" -> "1000219"  [label="AST: "];
"1000223" -> "1000219"  [label="CFG: "];
"1000219" -> "1000224"  [label="DDG: out->append(comp, comp_len)"];
"1000219" -> "1000224"  [label="DDG: comp_len"];
"1000219" -> "1000224"  [label="DDG: comp"];
"1000167" -> "1000219"  [label="DDG: comp_len"];
"1000119" -> "1000219"  [label="DDG: comp_len"];
"1000102" -> "1000219"  [label="DDG: comp_len"];
}
