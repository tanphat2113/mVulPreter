digraph "0_atheme_c597156adc60a45b5f827793cd420945f47bc03b_1@pointer" {
"1000162" [label="(Call,command_fail(si, fault_nosuch_target, _(\"Channel \2%s\2 is not registered.\"), channel))"];
"1000107" [label="(MethodParameterIn,sourceinfo_t *si)"];
"1000165" [label="(Call,_(\"Channel \2%s\2 is not registered.\"))"];
"1000156" [label="(Call,mychan_find(channel))"];
"1000114" [label="(Call,*channel = parv[0])"];
"1000109" [label="(MethodParameterIn,char *parv[])"];
"1000285" [label="(Call,logcommand(si, CMDLOG_DO, \"CLEAR:FLAGS: \2%s\2\", mc->name))"];
"1000292" [label="(Call,command_success_nodata(si, _(\"Cleared flags in \2%s\2.\"), mc->name))"];
"1000348" [label="(Call,strdup(parv[2]))"];
"1000166" [label="(Literal,\"Channel \2%s\2 is not registered.\")"];
"1000922" [label="(Call,command_fail(si, fault_badparams, _(\"You may not set founder status on a hostmask.\")))"];
"1000326" [label="(Call,command_fail(si, fault_needmoreparams, _(\"Syntax: FLAGS <#channel> MODIFY [target] <flags>\")))"];
"1000779" [label="(Call,command_fail(si, fault_toomany, _(\"\2%s\2 cannot take foundership of a channel.\"), mt->name))"];
"1000721" [label="(Call,command_fail(si, fault_noprivs, _(\"You may not remove the last founder.\")))"];
"1000321" [label="(Call,command_fail(si, fault_needmoreparams, STR_INSUFFICIENT_PARAMS, \"FLAGS\"))"];
"1000763" [label="(Call,command_fail(si, fault_toomany, _(\"\2%s\2 has too many channels registered.\"), mt->name))"];
"1000122" [label="(Call,sstrdup(parv[1]))"];
"1000334" [label="(Call,strchr(parv[2], ' '))"];
"1000177" [label="(Call,has_priv(si, PRIV_CHAN_AUSPEX))"];
"1000143" [label="(Call,command_fail(si, fault_needmoreparams, STR_INSUFFICIENT_PARAMS, \"FLAGS\"))"];
"1000360" [label="(Call,command_fail(si, fault_noprivs, _(\"You are not logged in.\")))"];
"1000167" [label="(Identifier,channel)"];
"1000215" [label="(Call,do_list(si, mc, flags))"];
"1001036" [label="(Call,logcommand(si, CMDLOG_SET, \"FLAGS: \2%s\2 \2%s\2 \2%s\2\", mc->name, target, flagstr))"];
"1000157" [label="(Identifier,channel)"];
"1000109" [label="(MethodParameterIn,char *parv[])"];
"1000165" [label="(Call,_(\"Channel \2%s\2 is not registered.\"))"];
"1000110" [label="(Block,)"];
"1000949" [label="(Call,command_fail(si, fault_toomany, _(\"Channel %s access list is full.\"), mc->name))"];
"1000161" [label="(Block,)"];
"1000156" [label="(Call,mychan_find(channel))"];
"1000164" [label="(Identifier,fault_nosuch_target)"];
"1000468" [label="(Call,chanacs_source_flags(mc, si))"];
"1000457" [label="(Call,logcommand(si, CMDLOG_GET, \"FLAGS: \2%s\2 on \2%s\2\", mc->name, target))"];
"1001029" [label="(Call,command_success_nodata(si, _(\"Flags \2%s\2 were set on \2%s\2 in \2%s\2.\"), flagstr, target, channel))"];
"1000148" [label="(Call,command_fail(si, fault_needmoreparams, _(\"Syntax: FLAGS <channel> [target] [flags]\")))"];
"1000747" [label="(Call,command_fail(si, fault_noprivs, _(\"Only %d founders allowed per channel.\"), chansvs.maxfounders))"];
"1000264" [label="(Call,command_fail(si, fault_noprivs, \"You are not authorized to perform this operation.\"))"];
"1000441" [label="(Call,command_success_string(si, str1, _(\"Flags for \2%s\2 in \2%s\2 are \2%s\2.\"),\n\t\t\t\t\t\ttarget, channel,\n\t\t\t\t\t\tstr1))"];
"1000611" [label="(Call,command_fail(si, fault_badparams, _(\"Usage: FLAGS %s [target] [flags]\"), mc->name))"];
"1000853" [label="(Call,command_fail(si, fault_toomany, _(\"Channel %s access list is full.\"), mc->name))"];
"1000107" [label="(MethodParameterIn,sourceinfo_t *si)"];
"1000567" [label="(Call,command_fail(si, fault_badparams, _(\"No valid flags given, use /%s%s HELP FLAGS for a list\"), ircd->uses_rcommand ? \"\" : \"msg \", chansvs.me->disp))"];
"1000162" [label="(Call,command_fail(si, fault_nosuch_target, _(\"Channel \2%s\2 is not registered.\"), channel))"];
"1000699" [label="(Call,command_fail(si, fault_noprivs, _(\"You may not remove a founder's +f access.\")))"];
"1000127" [label="(Call,*flagstr = parv[2])"];
"1000168" [label="(Return,return;)"];
"1000163" [label="(Identifier,si)"];
"1000982" [label="(Call,command_fail(si, fault_noprivs, _(\"You are not allowed to set \2%s\2 on \2%s\2 in \2%s\2.\"), bitmask_to_flags2(addflags, removeflags), target, mc->name))"];
"1001016" [label="(Call,command_fail(si, fault_nochange, _(\"Channel access to \2%s\2 for \2%s\2 unchanged.\"), channel, target))"];
"1001048" [label="(Call,get_source_name(si))"];
"1000116" [label="(Call,parv[0])"];
"1000620" [label="(Call,command_fail(si, fault_badparams, _(\"Invalid template name given, use /%s%s TEMPLATE %s for a list\"), ircd->uses_rcommand ? \"\" : \"msg \", chansvs.me->disp, mc->name))"];
"1000154" [label="(Call,mc = mychan_find(channel))"];
"1000115" [label="(Identifier,channel)"];
"1000450" [label="(Call,command_success_string(si, \"\", _(\"No flags for \2%s\2 in \2%s\2.\"),\n\t\t\t\t\t\ttarget, channel))"];
"1000408" [label="(Call,command_fail(si, fault_nosuch_target, _(\"\2%s\2 is not registered.\"), target))"];
"1000510" [label="(Call,command_fail(si, fault_noprivs, _(\"You are not authorized to execute this command.\")))"];
"1000114" [label="(Call,*channel = parv[0])"];
"1001054" [label="(MethodReturn,static void)"];
"1000657" [label="(Call,command_fail(si, fault_nosuch_target, _(\"\2%s\2 is not registered.\"), target))"];
"1000832" [label="(Call,command_fail(si, fault_noprivs, _(\"\2%s\2 does not wish to be added to channel access lists (NEVEROP set).\"), mt->name))"];
"1000234" [label="(Call,do_list(si, mc, 0))"];
"1000259" [label="(Call,chanacs_source_has_flag(mc, si, CA_FOUNDER))"];
"1000379" [label="(Call,chanacs_source_has_flag(mc, si, CA_ACLVIEW))"];
"1000886" [label="(Call,command_fail(si, fault_noprivs, _(\"You are not allowed to set \2%s\2 on \2%s\2 in \2%s\2.\"), bitmask_to_flags2(addflags, removeflags), mt->name, mc->name))"];
"1000121" [label="(Identifier,target)"];
"1000384" [label="(Call,command_fail(si, fault_noprivs, _(\"You are not authorized to execute this command.\")))"];
"1000181" [label="(Call,command_fail(si, fault_noprivs, _(\"\2%s\2 is closed.\"), channel))"];
"1000162" -> "1000161"  [label="AST: "];
"1000162" -> "1000167"  [label="CFG: "];
"1000163" -> "1000162"  [label="AST: "];
"1000164" -> "1000162"  [label="AST: "];
"1000165" -> "1000162"  [label="AST: "];
"1000167" -> "1000162"  [label="AST: "];
"1000168" -> "1000162"  [label="CFG: "];
"1000162" -> "1001054"  [label="DDG: "];
"1000162" -> "1001054"  [label="DDG: "];
"1000162" -> "1001054"  [label="DDG: "];
"1000162" -> "1001054"  [label="DDG: "];
"1000162" -> "1001054"  [label="DDG: "];
"1000107" -> "1000162"  [label="DDG: "];
"1000165" -> "1000162"  [label="DDG: "];
"1000156" -> "1000162"  [label="DDG: "];
"1000107" -> "1000106"  [label="AST: "];
"1000107" -> "1001054"  [label="DDG: "];
"1000107" -> "1000143"  [label="DDG: "];
"1000107" -> "1000148"  [label="DDG: "];
"1000107" -> "1000177"  [label="DDG: "];
"1000107" -> "1000181"  [label="DDG: "];
"1000107" -> "1000215"  [label="DDG: "];
"1000107" -> "1000234"  [label="DDG: "];
"1000107" -> "1000259"  [label="DDG: "];
"1000107" -> "1000264"  [label="DDG: "];
"1000107" -> "1000285"  [label="DDG: "];
"1000107" -> "1000292"  [label="DDG: "];
"1000107" -> "1000321"  [label="DDG: "];
"1000107" -> "1000326"  [label="DDG: "];
"1000107" -> "1000360"  [label="DDG: "];
"1000107" -> "1000379"  [label="DDG: "];
"1000107" -> "1000384"  [label="DDG: "];
"1000107" -> "1000408"  [label="DDG: "];
"1000107" -> "1000441"  [label="DDG: "];
"1000107" -> "1000450"  [label="DDG: "];
"1000107" -> "1000457"  [label="DDG: "];
"1000107" -> "1000468"  [label="DDG: "];
"1000107" -> "1000510"  [label="DDG: "];
"1000107" -> "1000567"  [label="DDG: "];
"1000107" -> "1000611"  [label="DDG: "];
"1000107" -> "1000620"  [label="DDG: "];
"1000107" -> "1000657"  [label="DDG: "];
"1000107" -> "1000699"  [label="DDG: "];
"1000107" -> "1000721"  [label="DDG: "];
"1000107" -> "1000747"  [label="DDG: "];
"1000107" -> "1000763"  [label="DDG: "];
"1000107" -> "1000779"  [label="DDG: "];
"1000107" -> "1000832"  [label="DDG: "];
"1000107" -> "1000853"  [label="DDG: "];
"1000107" -> "1000886"  [label="DDG: "];
"1000107" -> "1000922"  [label="DDG: "];
"1000107" -> "1000949"  [label="DDG: "];
"1000107" -> "1000982"  [label="DDG: "];
"1000107" -> "1001016"  [label="DDG: "];
"1000107" -> "1001029"  [label="DDG: "];
"1000107" -> "1001036"  [label="DDG: "];
"1000107" -> "1001048"  [label="DDG: "];
"1000165" -> "1000166"  [label="CFG: "];
"1000166" -> "1000165"  [label="AST: "];
"1000167" -> "1000165"  [label="CFG: "];
"1000156" -> "1000154"  [label="AST: "];
"1000156" -> "1000157"  [label="CFG: "];
"1000157" -> "1000156"  [label="AST: "];
"1000154" -> "1000156"  [label="CFG: "];
"1000156" -> "1001054"  [label="DDG: "];
"1000156" -> "1000154"  [label="DDG: "];
"1000114" -> "1000156"  [label="DDG: "];
"1000156" -> "1000181"  [label="DDG: "];
"1000156" -> "1000441"  [label="DDG: "];
"1000156" -> "1000450"  [label="DDG: "];
"1000156" -> "1001016"  [label="DDG: "];
"1000156" -> "1001029"  [label="DDG: "];
"1000114" -> "1000110"  [label="AST: "];
"1000114" -> "1000116"  [label="CFG: "];
"1000115" -> "1000114"  [label="AST: "];
"1000116" -> "1000114"  [label="AST: "];
"1000121" -> "1000114"  [label="CFG: "];
"1000114" -> "1001054"  [label="DDG: "];
"1000114" -> "1001054"  [label="DDG: "];
"1000109" -> "1000114"  [label="DDG: "];
"1000109" -> "1000106"  [label="AST: "];
"1000109" -> "1001054"  [label="DDG: "];
"1000109" -> "1000122"  [label="DDG: "];
"1000109" -> "1000127"  [label="DDG: "];
"1000109" -> "1000334"  [label="DDG: "];
"1000109" -> "1000348"  [label="DDG: "];
}
