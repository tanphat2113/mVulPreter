digraph "0_atheme_c597156adc60a45b5f827793cd420945f47bc03b_1@pointer" {
"1000666" [label="(Call,target = sstrdup(mt->name))"];
"1000668" [label="(Call,sstrdup(mt->name))"];
"1001016" [label="(Call,command_fail(si, fault_nochange, _(\"Channel access to \2%s\2 for \2%s\2 unchanged.\"), channel, target))"];
"1001029" [label="(Call,command_success_nodata(si, _(\"Flags \2%s\2 were set on \2%s\2 in \2%s\2.\"), flagstr, target, channel))"];
"1001036" [label="(Call,logcommand(si, CMDLOG_SET, \"FLAGS: \2%s\2 \2%s\2 \2%s\2\", mc->name, target, flagstr))"];
"1001048" [label="(Call,get_source_name(si))"];
"1001045" [label="(Call,verbose(mc, \"\2%s\2 set flags \2%s\2 on \2%s\2\", get_source_name(si), flagstr, target))"];
"1001052" [label="(Call,free(target))"];
"1000667" [label="(Identifier,target)"];
"1001047" [label="(Literal,\"\2%s\2 set flags \2%s\2 on \2%s\2\")"];
"1001037" [label="(Identifier,si)"];
"1000674" [label="(Call,chanacs_open(mc, mt, NULL, true, entity(si->smu)))"];
"1000779" [label="(Call,command_fail(si, fault_toomany, _(\"\2%s\2 cannot take foundership of a channel.\"), mt->name))"];
"1000717" [label="(Call,mychan_num_founders(mc))"];
"1001017" [label="(Identifier,si)"];
"1000649" [label="(Block,)"];
"1000763" [label="(Call,command_fail(si, fault_toomany, _(\"\2%s\2 has too many channels registered.\"), mt->name))"];
"1000930" [label="(Call,chanacs_open(mc, NULL, target, true, entity(si->smu)))"];
"1001033" [label="(Identifier,flagstr)"];
"1000741" [label="(Call,mychan_num_founders(mc))"];
"1001034" [label="(Identifier,target)"];
"1000666" [label="(Call,target = sstrdup(mt->name))"];
"1001021" [label="(Identifier,channel)"];
"1001036" [label="(Call,logcommand(si, CMDLOG_SET, \"FLAGS: \2%s\2 \2%s\2 \2%s\2\", mc->name, target, flagstr))"];
"1001040" [label="(Call,mc->name)"];
"1001050" [label="(Identifier,flagstr)"];
"1001053" [label="(Identifier,target)"];
"1000110" [label="(Block,)"];
"1001022" [label="(Identifier,target)"];
"1000156" [label="(Call,mychan_find(channel))"];
"1000468" [label="(Call,chanacs_source_flags(mc, si))"];
"1001029" [label="(Call,command_success_nodata(si, _(\"Flags \2%s\2 were set on \2%s\2 in \2%s\2.\"), flagstr, target, channel))"];
"1001045" [label="(Call,verbose(mc, \"\2%s\2 set flags \2%s\2 on \2%s\2\", get_source_name(si), flagstr, target))"];
"1001052" [label="(Call,free(target))"];
"1001049" [label="(Identifier,si)"];
"1001023" [label="(Return,return;)"];
"1000107" [label="(MethodParameterIn,sourceinfo_t *si)"];
"1001039" [label="(Literal,\"FLAGS: \2%s\2 \2%s\2 \2%s\2\")"];
"1001015" [label="(Block,)"];
"1001051" [label="(Identifier,target)"];
"1001043" [label="(Identifier,target)"];
"1001016" [label="(Call,command_fail(si, fault_nochange, _(\"Channel access to \2%s\2 for \2%s\2 unchanged.\"), channel, target))"];
"1001048" [label="(Call,get_source_name(si))"];
"1001019" [label="(Call,_(\"Channel access to \2%s\2 for \2%s\2 unchanged.\"))"];
"1000195" [label="(Call,target[0] == '+')"];
"1001018" [label="(Identifier,fault_nochange)"];
"1001030" [label="(Identifier,si)"];
"1001031" [label="(Call,_(\"Flags \2%s\2 were set on \2%s\2 in \2%s\2.\"))"];
"1001054" [label="(MethodReturn,static void)"];
"1000832" [label="(Call,command_fail(si, fault_noprivs, _(\"\2%s\2 does not wish to be added to channel access lists (NEVEROP set).\"), mt->name))"];
"1000669" [label="(Call,mt->name)"];
"1000673" [label="(Identifier,ca)"];
"1001035" [label="(Identifier,channel)"];
"1000668" [label="(Call,sstrdup(mt->name))"];
"1001044" [label="(Identifier,flagstr)"];
"1000886" [label="(Call,command_fail(si, fault_noprivs, _(\"You are not allowed to set \2%s\2 on \2%s\2 in \2%s\2.\"), bitmask_to_flags2(addflags, removeflags), mt->name, mc->name))"];
"1000352" [label="(Block,)"];
"1001046" [label="(Identifier,mc)"];
"1001038" [label="(Identifier,CMDLOG_SET)"];
"1001024" [label="(Call,flagstr = bitmask_to_flags2(addflags, removeflags))"];
"1000666" -> "1000649"  [label="AST: "];
"1000666" -> "1000668"  [label="CFG: "];
"1000667" -> "1000666"  [label="AST: "];
"1000668" -> "1000666"  [label="AST: "];
"1000673" -> "1000666"  [label="CFG: "];
"1000666" -> "1001054"  [label="DDG: "];
"1000666" -> "1001054"  [label="DDG: "];
"1000668" -> "1000666"  [label="DDG: "];
"1000666" -> "1001016"  [label="DDG: "];
"1000666" -> "1001029"  [label="DDG: "];
"1000668" -> "1000669"  [label="CFG: "];
"1000669" -> "1000668"  [label="AST: "];
"1000668" -> "1001054"  [label="DDG: "];
"1000668" -> "1000763"  [label="DDG: "];
"1000668" -> "1000779"  [label="DDG: "];
"1000668" -> "1000832"  [label="DDG: "];
"1000668" -> "1000886"  [label="DDG: "];
"1001016" -> "1001015"  [label="AST: "];
"1001016" -> "1001022"  [label="CFG: "];
"1001017" -> "1001016"  [label="AST: "];
"1001018" -> "1001016"  [label="AST: "];
"1001019" -> "1001016"  [label="AST: "];
"1001021" -> "1001016"  [label="AST: "];
"1001022" -> "1001016"  [label="AST: "];
"1001023" -> "1001016"  [label="CFG: "];
"1001016" -> "1001054"  [label="DDG: "];
"1001016" -> "1001054"  [label="DDG: "];
"1001016" -> "1001054"  [label="DDG: "];
"1001016" -> "1001054"  [label="DDG: "];
"1001016" -> "1001054"  [label="DDG: "];
"1001016" -> "1001054"  [label="DDG: "];
"1000468" -> "1001016"  [label="DDG: "];
"1000107" -> "1001016"  [label="DDG: "];
"1001019" -> "1001016"  [label="DDG: "];
"1000156" -> "1001016"  [label="DDG: "];
"1000930" -> "1001016"  [label="DDG: "];
"1000195" -> "1001016"  [label="DDG: "];
"1001029" -> "1000352"  [label="AST: "];
"1001029" -> "1001035"  [label="CFG: "];
"1001030" -> "1001029"  [label="AST: "];
"1001031" -> "1001029"  [label="AST: "];
"1001033" -> "1001029"  [label="AST: "];
"1001034" -> "1001029"  [label="AST: "];
"1001035" -> "1001029"  [label="AST: "];
"1001037" -> "1001029"  [label="CFG: "];
"1001029" -> "1001054"  [label="DDG: "];
"1001029" -> "1001054"  [label="DDG: "];
"1001029" -> "1001054"  [label="DDG: "];
"1000468" -> "1001029"  [label="DDG: "];
"1000107" -> "1001029"  [label="DDG: "];
"1001031" -> "1001029"  [label="DDG: "];
"1001024" -> "1001029"  [label="DDG: "];
"1000930" -> "1001029"  [label="DDG: "];
"1000195" -> "1001029"  [label="DDG: "];
"1000156" -> "1001029"  [label="DDG: "];
"1001029" -> "1001036"  [label="DDG: "];
"1001029" -> "1001036"  [label="DDG: "];
"1001029" -> "1001036"  [label="DDG: "];
"1001036" -> "1000352"  [label="AST: "];
"1001036" -> "1001044"  [label="CFG: "];
"1001037" -> "1001036"  [label="AST: "];
"1001038" -> "1001036"  [label="AST: "];
"1001039" -> "1001036"  [label="AST: "];
"1001040" -> "1001036"  [label="AST: "];
"1001043" -> "1001036"  [label="AST: "];
"1001044" -> "1001036"  [label="AST: "];
"1001046" -> "1001036"  [label="CFG: "];
"1001036" -> "1001054"  [label="DDG: "];
"1001036" -> "1001054"  [label="DDG: "];
"1001036" -> "1001054"  [label="DDG: "];
"1000107" -> "1001036"  [label="DDG: "];
"1000195" -> "1001036"  [label="DDG: "];
"1001036" -> "1001048"  [label="DDG: "];
"1001036" -> "1001045"  [label="DDG: "];
"1001036" -> "1001045"  [label="DDG: "];
"1001048" -> "1001045"  [label="AST: "];
"1001048" -> "1001049"  [label="CFG: "];
"1001049" -> "1001048"  [label="AST: "];
"1001050" -> "1001048"  [label="CFG: "];
"1001048" -> "1001054"  [label="DDG: "];
"1001048" -> "1001045"  [label="DDG: "];
"1000107" -> "1001048"  [label="DDG: "];
"1001045" -> "1000352"  [label="AST: "];
"1001045" -> "1001051"  [label="CFG: "];
"1001046" -> "1001045"  [label="AST: "];
"1001047" -> "1001045"  [label="AST: "];
"1001050" -> "1001045"  [label="AST: "];
"1001051" -> "1001045"  [label="AST: "];
"1001053" -> "1001045"  [label="CFG: "];
"1001045" -> "1001054"  [label="DDG: "];
"1001045" -> "1001054"  [label="DDG: "];
"1001045" -> "1001054"  [label="DDG: "];
"1001045" -> "1001054"  [label="DDG: "];
"1000741" -> "1001045"  [label="DDG: "];
"1000674" -> "1001045"  [label="DDG: "];
"1000717" -> "1001045"  [label="DDG: "];
"1000930" -> "1001045"  [label="DDG: "];
"1000195" -> "1001045"  [label="DDG: "];
"1001045" -> "1001052"  [label="DDG: "];
"1001052" -> "1000110"  [label="AST: "];
"1001052" -> "1001053"  [label="CFG: "];
"1001053" -> "1001052"  [label="AST: "];
"1001054" -> "1001052"  [label="CFG: "];
"1001052" -> "1001054"  [label="DDG: "];
"1000195" -> "1001052"  [label="DDG: "];
}
