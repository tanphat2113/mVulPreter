digraph "0_openssl_3c66a669dfc7b3792f7af0758ea26fe8502ce70c@pointer" {
"1001155" [label="(Call,s->client_version >> 8)"];
"1001151" [label="(Call,pms[0] == (s->client_version >> 8))"];
"1001150" [label="(Call,(pms[0] == (s->client_version >> 8))\n              && (pms[1] == (s->client_version & 0xff)))"];
"1001149" [label="(Call,!((pms[0] == (s->client_version >> 8))\n              && (pms[1] == (s->client_version & 0xff))))"];
"1001194" [label="(Call,s->method->ssl3_enc->generate_master_secret(s,\n                                                        s->\n                                                        session->master_key,\n                                                        pms, outl))"];
"1001188" [label="(Call,s->session->master_key_length =\n            s->method->ssl3_enc->generate_master_secret(s,\n                                                        s->\n                                                        session->master_key,\n                                                        pms, outl))"];
"1001238" [label="(Call,OPENSSL_cleanse(pms, sizeof(pms)))"];
"1001164" [label="(Call,s->client_version & 0xff)"];
"1001160" [label="(Call,pms[1] == (s->client_version & 0xff))"];
"1001187" [label="(Identifier,ciph_ctx)"];
"1001205" [label="(Identifier,kssl_ctx)"];
"1001156" [label="(Call,s->client_version)"];
"1001152" [label="(Call,pms[0])"];
"1001238" [label="(Call,OPENSSL_cleanse(pms, sizeof(pms)))"];
"1001188" [label="(Call,s->session->master_key_length =\n            s->method->ssl3_enc->generate_master_secret(s,\n                                                        s->\n                                                        session->master_key,\n                                                        pms, outl))"];
"1001159" [label="(Literal,8)"];
"1000809" [label="(Block,)"];
"1001161" [label="(Call,pms[1])"];
"1001243" [label="(Identifier,kerr)"];
"1001137" [label="(Call,outl > SSL_MAX_MASTER_KEY_LENGTH)"];
"1001195" [label="(Identifier,s)"];
"1001151" [label="(Call,pms[0] == (s->client_version >> 8))"];
"1002163" [label="(MethodReturn,int)"];
"1001155" [label="(Call,s->client_version >> 8)"];
"1001148" [label="(ControlStructure,if (!((pms[0] == (s->client_version >> 8))\n              && (pms[1] == (s->client_version & 0xff)))))"];
"1000186" [label="(Call,s->method->ssl_get_message(s,\n                                   SSL3_ST_SR_KEY_EXCH_A,\n                                   SSL3_ST_SR_KEY_EXCH_B,\n                                   SSL3_MT_CLIENT_KEY_EXCHANGE, 2048, &ok))"];
"1001080" [label="(Call,EVP_DecryptUpdate(&ciph_ctx, pms, &outl,\n                               (unsigned char *)enc_pms.data, enc_pms.length))"];
"1001194" [label="(Call,s->method->ssl3_enc->generate_master_secret(s,\n                                                        s->\n                                                        session->master_key,\n                                                        pms, outl))"];
"1001162" [label="(Identifier,pms)"];
"1001239" [label="(Identifier,pms)"];
"1001202" [label="(Identifier,outl)"];
"1001189" [label="(Call,s->session->master_key_length)"];
"1001164" [label="(Call,s->client_version & 0xff)"];
"1000142" [label="(MethodParameterIn,SSL *s)"];
"1001196" [label="(Call,s->\n                                                        session->master_key)"];
"1001240" [label="(Call,sizeof(pms))"];
"1001174" [label="(Identifier,s)"];
"1001149" [label="(Call,!((pms[0] == (s->client_version >> 8))\n              && (pms[1] == (s->client_version & 0xff))))"];
"1001150" [label="(Call,(pms[0] == (s->client_version >> 8))\n              && (pms[1] == (s->client_version & 0xff)))"];
"1001160" [label="(Call,pms[1] == (s->client_version & 0xff))"];
"1001201" [label="(Identifier,pms)"];
"1001168" [label="(Literal,0xff)"];
"1001165" [label="(Call,s->client_version)"];
"1001155" -> "1001151"  [label="AST: "];
"1001155" -> "1001159"  [label="CFG: "];
"1001156" -> "1001155"  [label="AST: "];
"1001159" -> "1001155"  [label="AST: "];
"1001151" -> "1001155"  [label="CFG: "];
"1001155" -> "1002163"  [label="DDG: s->client_version"];
"1001155" -> "1001151"  [label="DDG: s->client_version"];
"1001155" -> "1001151"  [label="DDG: 8"];
"1001155" -> "1001164"  [label="DDG: s->client_version"];
"1001151" -> "1001150"  [label="AST: "];
"1001152" -> "1001151"  [label="AST: "];
"1001162" -> "1001151"  [label="CFG: "];
"1001150" -> "1001151"  [label="CFG: "];
"1001151" -> "1002163"  [label="DDG: s->client_version >> 8"];
"1001151" -> "1002163"  [label="DDG: pms[0]"];
"1001151" -> "1001150"  [label="DDG: pms[0]"];
"1001151" -> "1001150"  [label="DDG: s->client_version >> 8"];
"1001080" -> "1001151"  [label="DDG: pms"];
"1001151" -> "1001194"  [label="DDG: pms[0]"];
"1001151" -> "1001238"  [label="DDG: pms[0]"];
"1001150" -> "1001149"  [label="AST: "];
"1001150" -> "1001160"  [label="CFG: "];
"1001160" -> "1001150"  [label="AST: "];
"1001149" -> "1001150"  [label="CFG: "];
"1001150" -> "1002163"  [label="DDG: pms[0] == (s->client_version >> 8)"];
"1001150" -> "1002163"  [label="DDG: pms[1] == (s->client_version & 0xff)"];
"1001150" -> "1001149"  [label="DDG: pms[0] == (s->client_version >> 8)"];
"1001150" -> "1001149"  [label="DDG: pms[1] == (s->client_version & 0xff)"];
"1001160" -> "1001150"  [label="DDG: pms[1]"];
"1001160" -> "1001150"  [label="DDG: s->client_version & 0xff"];
"1001149" -> "1001148"  [label="AST: "];
"1001174" -> "1001149"  [label="CFG: "];
"1001187" -> "1001149"  [label="CFG: "];
"1001149" -> "1002163"  [label="DDG: (pms[0] == (s->client_version >> 8))\n              && (pms[1] == (s->client_version & 0xff))"];
"1001149" -> "1002163"  [label="DDG: !((pms[0] == (s->client_version >> 8))\n              && (pms[1] == (s->client_version & 0xff)))"];
"1001194" -> "1001188"  [label="AST: "];
"1001194" -> "1001202"  [label="CFG: "];
"1001195" -> "1001194"  [label="AST: "];
"1001196" -> "1001194"  [label="AST: "];
"1001201" -> "1001194"  [label="AST: "];
"1001202" -> "1001194"  [label="AST: "];
"1001188" -> "1001194"  [label="CFG: "];
"1001194" -> "1002163"  [label="DDG: outl"];
"1001194" -> "1002163"  [label="DDG: s->\n                                                        session->master_key"];
"1001194" -> "1002163"  [label="DDG: s"];
"1001194" -> "1001188"  [label="DDG: s"];
"1001194" -> "1001188"  [label="DDG: s->\n                                                        session->master_key"];
"1001194" -> "1001188"  [label="DDG: pms"];
"1001194" -> "1001188"  [label="DDG: outl"];
"1000186" -> "1001194"  [label="DDG: s"];
"1000142" -> "1001194"  [label="DDG: s"];
"1001160" -> "1001194"  [label="DDG: pms[1]"];
"1001080" -> "1001194"  [label="DDG: pms"];
"1001137" -> "1001194"  [label="DDG: outl"];
"1001188" -> "1000809"  [label="AST: "];
"1001189" -> "1001188"  [label="AST: "];
"1001205" -> "1001188"  [label="CFG: "];
"1001188" -> "1002163"  [label="DDG: s->session->master_key_length"];
"1001188" -> "1002163"  [label="DDG: s->method->ssl3_enc->generate_master_secret(s,\n                                                        s->\n                                                        session->master_key,\n                                                        pms, outl)"];
"1001238" -> "1000809"  [label="AST: "];
"1001238" -> "1001240"  [label="CFG: "];
"1001239" -> "1001238"  [label="AST: "];
"1001240" -> "1001238"  [label="AST: "];
"1001243" -> "1001238"  [label="CFG: "];
"1001238" -> "1002163"  [label="DDG: pms"];
"1001238" -> "1002163"  [label="DDG: OPENSSL_cleanse(pms, sizeof(pms))"];
"1001160" -> "1001238"  [label="DDG: pms[1]"];
"1001164" -> "1001160"  [label="AST: "];
"1001164" -> "1001168"  [label="CFG: "];
"1001165" -> "1001164"  [label="AST: "];
"1001168" -> "1001164"  [label="AST: "];
"1001160" -> "1001164"  [label="CFG: "];
"1001164" -> "1002163"  [label="DDG: s->client_version"];
"1001164" -> "1001160"  [label="DDG: s->client_version"];
"1001164" -> "1001160"  [label="DDG: 0xff"];
"1001161" -> "1001160"  [label="AST: "];
"1001160" -> "1002163"  [label="DDG: s->client_version & 0xff"];
"1001160" -> "1002163"  [label="DDG: pms[1]"];
"1001080" -> "1001160"  [label="DDG: pms"];
}
