digraph "0_openssl_3c66a669dfc7b3792f7af0758ea26fe8502ce70c@pointer" {
"1000407" [label="(Call,s->client_version >> 8)"];
"1000405" [label="(Call,(unsigned)(s->client_version >> 8))"];
"1000401" [label="(Call,constant_time_eq_8(p[0], (unsigned)(s->client_version >> 8)))"];
"1000399" [label="(Call,version_good =\n            constant_time_eq_8(p[0], (unsigned)(s->client_version >> 8)))"];
"1000412" [label="(Call,version_good &=\n            constant_time_eq_8(p[1], (unsigned)(s->client_version & 0xff)))"];
"1000459" [label="(Call,version_good |= workaround_good)"];
"1000462" [label="(Call,decrypt_good &= version_good)"];
"1000480" [label="(Call,constant_time_select_8(decrypt_good, p[j],\n                                          rand_premaster_secret[j]))"];
"1000476" [label="(Call,p[j] = constant_time_select_8(decrypt_good, p[j],\n                                          rand_premaster_secret[j]))"];
"1000494" [label="(Call,s->method->ssl3_enc->generate_master_secret(s,\n                                                        s->\n                                                        session->master_key,\n                                                        p,\n                                                        sizeof\n                                                        (rand_premaster_secret)))"];
"1000488" [label="(Call,s->session->master_key_length =\n            s->method->ssl3_enc->generate_master_secret(s,\n                                                        s->\n                                                        session->master_key,\n                                                        p,\n                                                        sizeof\n                                                        (rand_premaster_secret)))"];
"1000504" [label="(Call,OPENSSL_cleanse(p, sizeof(rand_premaster_secret)))"];
"1000435" [label="(Call,constant_time_eq_8(p[0], (unsigned)(s->version >> 8)))"];
"1000433" [label="(Call,workaround_good =\n                constant_time_eq_8(p[0], (unsigned)(s->version >> 8)))"];
"1000446" [label="(Call,workaround_good &=\n                constant_time_eq_8(p[1], (unsigned)(s->version & 0xff)))"];
"1000420" [label="(Call,s->client_version & 0xff)"];
"1000418" [label="(Call,(unsigned)(s->client_version & 0xff))"];
"1000414" [label="(Call,constant_time_eq_8(p[1], (unsigned)(s->client_version & 0xff)))"];
"1000448" [label="(Call,constant_time_eq_8(p[1], (unsigned)(s->version & 0xff)))"];
"1000428" [label="(Identifier,s)"];
"1000401" [label="(Call,constant_time_eq_8(p[0], (unsigned)(s->client_version >> 8)))"];
"1000394" [label="(Call,decrypt_good =\n            constant_time_eq_int_8(decrypt_len, SSL_MAX_MASTER_KEY_LENGTH))"];
"1000223" [label="(Block,)"];
"1000505" [label="(Identifier,p)"];
"1000436" [label="(Call,p[0])"];
"1002136" [label="(Literal,1)"];
"1000482" [label="(Call,p[j])"];
"1000435" [label="(Call,constant_time_eq_8(p[0], (unsigned)(s->version >> 8)))"];
"1000494" [label="(Call,s->method->ssl3_enc->generate_master_secret(s,\n                                                        s->\n                                                        session->master_key,\n                                                        p,\n                                                        sizeof\n                                                        (rand_premaster_secret)))"];
"1000474" [label="(Identifier,j)"];
"1000414" [label="(Call,constant_time_eq_8(p[1], (unsigned)(s->client_version & 0xff)))"];
"1000415" [label="(Call,p[1])"];
"1000452" [label="(Call,(unsigned)(s->version & 0xff))"];
"1000485" [label="(Call,rand_premaster_secret[j])"];
"1000448" [label="(Call,constant_time_eq_8(p[1], (unsigned)(s->version & 0xff)))"];
"1000446" [label="(Call,workaround_good &=\n                constant_time_eq_8(p[1], (unsigned)(s->version & 0xff)))"];
"1000501" [label="(Identifier,p)"];
"1000488" [label="(Call,s->session->master_key_length =\n            s->method->ssl3_enc->generate_master_secret(s,\n                                                        s->\n                                                        session->master_key,\n                                                        p,\n                                                        sizeof\n                                                        (rand_premaster_secret)))"];
"1000481" [label="(Identifier,decrypt_good)"];
"1000480" [label="(Call,constant_time_select_8(decrypt_good, p[j],\n                                          rand_premaster_secret[j]))"];
"1000496" [label="(Call,s->\n                                                        session->master_key)"];
"1000464" [label="(Identifier,version_good)"];
"1000385" [label="(Call,RSA_private_decrypt((int)n, p, p, rsa, RSA_PKCS1_PADDING))"];
"1000495" [label="(Identifier,s)"];
"1000407" [label="(Call,s->client_version >> 8)"];
"1002163" [label="(MethodReturn,int)"];
"1000408" [label="(Call,s->client_version)"];
"1000502" [label="(Call,sizeof\n                                                        (rand_premaster_secret))"];
"1000489" [label="(Call,s->session->master_key_length)"];
"1000461" [label="(Identifier,workaround_good)"];
"1000434" [label="(Identifier,workaround_good)"];
"1000418" [label="(Call,(unsigned)(s->client_version & 0xff))"];
"1000186" [label="(Call,s->method->ssl_get_message(s,\n                                   SSL3_ST_SR_KEY_EXCH_A,\n                                   SSL3_ST_SR_KEY_EXCH_B,\n                                   SSL3_MT_CLIENT_KEY_EXCHANGE, 2048, &ok))"];
"1000447" [label="(Identifier,workaround_good)"];
"1000433" [label="(Call,workaround_good =\n                constant_time_eq_8(p[0], (unsigned)(s->version >> 8)))"];
"1000400" [label="(Identifier,version_good)"];
"1000463" [label="(Identifier,decrypt_good)"];
"1000476" [label="(Call,p[j] = constant_time_select_8(decrypt_good, p[j],\n                                          rand_premaster_secret[j]))"];
"1000411" [label="(Literal,8)"];
"1000413" [label="(Identifier,version_good)"];
"1000506" [label="(Call,sizeof(rand_premaster_secret))"];
"1000459" [label="(Call,version_good |= workaround_good)"];
"1000462" [label="(Call,decrypt_good &= version_good)"];
"1000477" [label="(Call,p[j])"];
"1000449" [label="(Call,p[1])"];
"1000467" [label="(Identifier,j)"];
"1000402" [label="(Call,p[0])"];
"1000142" [label="(MethodParameterIn,SSL *s)"];
"1000412" [label="(Call,version_good &=\n            constant_time_eq_8(p[1], (unsigned)(s->client_version & 0xff)))"];
"1000420" [label="(Call,s->client_version & 0xff)"];
"1000431" [label="(Block,)"];
"1000439" [label="(Call,(unsigned)(s->version >> 8))"];
"1000475" [label="(Block,)"];
"1000421" [label="(Call,s->client_version)"];
"1000405" [label="(Call,(unsigned)(s->client_version >> 8))"];
"1000399" [label="(Call,version_good =\n            constant_time_eq_8(p[0], (unsigned)(s->client_version >> 8)))"];
"1000504" [label="(Call,OPENSSL_cleanse(p, sizeof(rand_premaster_secret)))"];
"1000460" [label="(Identifier,version_good)"];
"1000424" [label="(Literal,0xff)"];
"1000407" -> "1000405"  [label="AST: "];
"1000407" -> "1000411"  [label="CFG: "];
"1000408" -> "1000407"  [label="AST: "];
"1000411" -> "1000407"  [label="AST: "];
"1000405" -> "1000407"  [label="CFG: "];
"1000407" -> "1000405"  [label="DDG: s->client_version"];
"1000407" -> "1000405"  [label="DDG: 8"];
"1000407" -> "1000420"  [label="DDG: s->client_version"];
"1000405" -> "1000401"  [label="AST: "];
"1000406" -> "1000405"  [label="AST: "];
"1000401" -> "1000405"  [label="CFG: "];
"1000405" -> "1002163"  [label="DDG: s->client_version >> 8"];
"1000405" -> "1000401"  [label="DDG: s->client_version >> 8"];
"1000401" -> "1000399"  [label="AST: "];
"1000402" -> "1000401"  [label="AST: "];
"1000399" -> "1000401"  [label="CFG: "];
"1000401" -> "1002163"  [label="DDG: (unsigned)(s->client_version >> 8)"];
"1000401" -> "1002163"  [label="DDG: p[0]"];
"1000401" -> "1000399"  [label="DDG: p[0]"];
"1000401" -> "1000399"  [label="DDG: (unsigned)(s->client_version >> 8)"];
"1000385" -> "1000401"  [label="DDG: p"];
"1000401" -> "1000435"  [label="DDG: p[0]"];
"1000401" -> "1000494"  [label="DDG: p[0]"];
"1000401" -> "1000504"  [label="DDG: p[0]"];
"1000399" -> "1000223"  [label="AST: "];
"1000400" -> "1000399"  [label="AST: "];
"1000413" -> "1000399"  [label="CFG: "];
"1000399" -> "1002163"  [label="DDG: constant_time_eq_8(p[0], (unsigned)(s->client_version >> 8))"];
"1000399" -> "1000412"  [label="DDG: version_good"];
"1000412" -> "1000223"  [label="AST: "];
"1000412" -> "1000414"  [label="CFG: "];
"1000413" -> "1000412"  [label="AST: "];
"1000414" -> "1000412"  [label="AST: "];
"1000428" -> "1000412"  [label="CFG: "];
"1000412" -> "1002163"  [label="DDG: version_good &=\n            constant_time_eq_8(p[1], (unsigned)(s->client_version & 0xff))"];
"1000412" -> "1002163"  [label="DDG: constant_time_eq_8(p[1], (unsigned)(s->client_version & 0xff))"];
"1000414" -> "1000412"  [label="DDG: p[1]"];
"1000414" -> "1000412"  [label="DDG: (unsigned)(s->client_version & 0xff)"];
"1000412" -> "1000459"  [label="DDG: version_good"];
"1000412" -> "1000462"  [label="DDG: version_good"];
"1000459" -> "1000431"  [label="AST: "];
"1000459" -> "1000461"  [label="CFG: "];
"1000460" -> "1000459"  [label="AST: "];
"1000461" -> "1000459"  [label="AST: "];
"1000463" -> "1000459"  [label="CFG: "];
"1000459" -> "1002163"  [label="DDG: workaround_good"];
"1000459" -> "1002163"  [label="DDG: version_good |= workaround_good"];
"1000446" -> "1000459"  [label="DDG: workaround_good"];
"1000459" -> "1000462"  [label="DDG: version_good"];
"1000462" -> "1000223"  [label="AST: "];
"1000462" -> "1000464"  [label="CFG: "];
"1000463" -> "1000462"  [label="AST: "];
"1000464" -> "1000462"  [label="AST: "];
"1000467" -> "1000462"  [label="CFG: "];
"1000462" -> "1002163"  [label="DDG: decrypt_good"];
"1000462" -> "1002163"  [label="DDG: version_good"];
"1000462" -> "1002163"  [label="DDG: decrypt_good &= version_good"];
"1000394" -> "1000462"  [label="DDG: decrypt_good"];
"1000462" -> "1000480"  [label="DDG: decrypt_good"];
"1000480" -> "1000476"  [label="AST: "];
"1000480" -> "1000485"  [label="CFG: "];
"1000481" -> "1000480"  [label="AST: "];
"1000482" -> "1000480"  [label="AST: "];
"1000485" -> "1000480"  [label="AST: "];
"1000476" -> "1000480"  [label="CFG: "];
"1000480" -> "1002163"  [label="DDG: decrypt_good"];
"1000480" -> "1002163"  [label="DDG: rand_premaster_secret[j]"];
"1000480" -> "1000476"  [label="DDG: decrypt_good"];
"1000480" -> "1000476"  [label="DDG: p[j]"];
"1000480" -> "1000476"  [label="DDG: rand_premaster_secret[j]"];
"1000385" -> "1000480"  [label="DDG: p"];
"1000476" -> "1000480"  [label="DDG: p[j]"];
"1000476" -> "1000475"  [label="AST: "];
"1000477" -> "1000476"  [label="AST: "];
"1000474" -> "1000476"  [label="CFG: "];
"1000476" -> "1002163"  [label="DDG: p[j]"];
"1000476" -> "1002163"  [label="DDG: constant_time_select_8(decrypt_good, p[j],\n                                          rand_premaster_secret[j])"];
"1000476" -> "1000494"  [label="DDG: p[j]"];
"1000476" -> "1000504"  [label="DDG: p[j]"];
"1000494" -> "1000488"  [label="AST: "];
"1000494" -> "1000502"  [label="CFG: "];
"1000495" -> "1000494"  [label="AST: "];
"1000496" -> "1000494"  [label="AST: "];
"1000501" -> "1000494"  [label="AST: "];
"1000502" -> "1000494"  [label="AST: "];
"1000488" -> "1000494"  [label="CFG: "];
"1000494" -> "1002163"  [label="DDG: s->\n                                                        session->master_key"];
"1000494" -> "1002163"  [label="DDG: s"];
"1000494" -> "1000488"  [label="DDG: s"];
"1000494" -> "1000488"  [label="DDG: s->\n                                                        session->master_key"];
"1000494" -> "1000488"  [label="DDG: p"];
"1000186" -> "1000494"  [label="DDG: s"];
"1000142" -> "1000494"  [label="DDG: s"];
"1000435" -> "1000494"  [label="DDG: p[0]"];
"1000385" -> "1000494"  [label="DDG: p"];
"1000414" -> "1000494"  [label="DDG: p[1]"];
"1000448" -> "1000494"  [label="DDG: p[1]"];
"1000494" -> "1000504"  [label="DDG: p"];
"1000488" -> "1000223"  [label="AST: "];
"1000489" -> "1000488"  [label="AST: "];
"1000505" -> "1000488"  [label="CFG: "];
"1000488" -> "1002163"  [label="DDG: s->session->master_key_length"];
"1000488" -> "1002163"  [label="DDG: s->method->ssl3_enc->generate_master_secret(s,\n                                                        s->\n                                                        session->master_key,\n                                                        p,\n                                                        sizeof\n                                                        (rand_premaster_secret))"];
"1000504" -> "1000223"  [label="AST: "];
"1000504" -> "1000506"  [label="CFG: "];
"1000505" -> "1000504"  [label="AST: "];
"1000506" -> "1000504"  [label="AST: "];
"1002136" -> "1000504"  [label="CFG: "];
"1000504" -> "1002163"  [label="DDG: p"];
"1000504" -> "1002163"  [label="DDG: OPENSSL_cleanse(p, sizeof(rand_premaster_secret))"];
"1000435" -> "1000504"  [label="DDG: p[0]"];
"1000414" -> "1000504"  [label="DDG: p[1]"];
"1000448" -> "1000504"  [label="DDG: p[1]"];
"1000435" -> "1000433"  [label="AST: "];
"1000435" -> "1000439"  [label="CFG: "];
"1000436" -> "1000435"  [label="AST: "];
"1000439" -> "1000435"  [label="AST: "];
"1000433" -> "1000435"  [label="CFG: "];
"1000435" -> "1002163"  [label="DDG: p[0]"];
"1000435" -> "1002163"  [label="DDG: (unsigned)(s->version >> 8)"];
"1000435" -> "1000433"  [label="DDG: p[0]"];
"1000435" -> "1000433"  [label="DDG: (unsigned)(s->version >> 8)"];
"1000385" -> "1000435"  [label="DDG: p"];
"1000439" -> "1000435"  [label="DDG: s->version >> 8"];
"1000433" -> "1000431"  [label="AST: "];
"1000434" -> "1000433"  [label="AST: "];
"1000447" -> "1000433"  [label="CFG: "];
"1000433" -> "1002163"  [label="DDG: constant_time_eq_8(p[0], (unsigned)(s->version >> 8))"];
"1000433" -> "1000446"  [label="DDG: workaround_good"];
"1000446" -> "1000431"  [label="AST: "];
"1000446" -> "1000448"  [label="CFG: "];
"1000447" -> "1000446"  [label="AST: "];
"1000448" -> "1000446"  [label="AST: "];
"1000460" -> "1000446"  [label="CFG: "];
"1000446" -> "1002163"  [label="DDG: workaround_good &=\n                constant_time_eq_8(p[1], (unsigned)(s->version & 0xff))"];
"1000446" -> "1002163"  [label="DDG: constant_time_eq_8(p[1], (unsigned)(s->version & 0xff))"];
"1000448" -> "1000446"  [label="DDG: p[1]"];
"1000448" -> "1000446"  [label="DDG: (unsigned)(s->version & 0xff)"];
"1000420" -> "1000418"  [label="AST: "];
"1000420" -> "1000424"  [label="CFG: "];
"1000421" -> "1000420"  [label="AST: "];
"1000424" -> "1000420"  [label="AST: "];
"1000418" -> "1000420"  [label="CFG: "];
"1000420" -> "1002163"  [label="DDG: s->client_version"];
"1000420" -> "1000418"  [label="DDG: s->client_version"];
"1000420" -> "1000418"  [label="DDG: 0xff"];
"1000418" -> "1000414"  [label="AST: "];
"1000419" -> "1000418"  [label="AST: "];
"1000414" -> "1000418"  [label="CFG: "];
"1000418" -> "1002163"  [label="DDG: s->client_version & 0xff"];
"1000418" -> "1000414"  [label="DDG: s->client_version & 0xff"];
"1000415" -> "1000414"  [label="AST: "];
"1000414" -> "1002163"  [label="DDG: (unsigned)(s->client_version & 0xff)"];
"1000414" -> "1002163"  [label="DDG: p[1]"];
"1000385" -> "1000414"  [label="DDG: p"];
"1000414" -> "1000448"  [label="DDG: p[1]"];
"1000448" -> "1000452"  [label="CFG: "];
"1000449" -> "1000448"  [label="AST: "];
"1000452" -> "1000448"  [label="AST: "];
"1000448" -> "1002163"  [label="DDG: (unsigned)(s->version & 0xff)"];
"1000448" -> "1002163"  [label="DDG: p[1]"];
"1000385" -> "1000448"  [label="DDG: p"];
"1000452" -> "1000448"  [label="DDG: s->version & 0xff"];
}
