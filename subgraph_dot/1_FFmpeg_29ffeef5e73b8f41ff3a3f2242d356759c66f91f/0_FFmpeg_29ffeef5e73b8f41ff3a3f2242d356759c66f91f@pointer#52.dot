digraph "0_FFmpeg_29ffeef5e73b8f41ff3a3f2242d356759c66f91f@pointer" {
"1000980" [label="(Call,h->dequant_coeff_pps != pps_id)"];
"1000306" [label="(Call,pps_id >= MAX_PPS_COUNT)"];
"1000298" [label="(Call,pps_id = get_ue_golomb(&h->gb))"];
"1000300" [label="(Call,get_ue_golomb(&h->gb))"];
"1000230" [label="(Call,get_ue_golomb_31(&h->gb))"];
"1000168" [label="(Call,get_ue_golomb_long(&h->gb))"];
"1000976" [label="(Call,h == h0 && h->dequant_coeff_pps != pps_id)"];
"1000986" [label="(Call,h->dequant_coeff_pps = pps_id)"];
"1003314" [label="(Call,av_log(h->avctx, AV_LOG_DEBUG,\n               \"slice:%d %s mb:%d %c%s%s pps:%u frame:%d poc:%d/%d ref:%d/%d qp:%d loop:%d:%d:%d weight:%d%s %s\n\",\n               h->slice_num,\n               (h->picture_structure == PICT_FRAME ? \"F\" : h->picture_structure == PICT_TOP_FIELD ? \"T\" : \"B\"),\n               first_mb_in_slice,\n               av_get_picture_type_char(h->slice_type),\n               h->slice_type_fixed ? \" fix\" : \"\",\n               h->nal_unit_type == NAL_IDR_SLICE ? \" IDR\" : \"\",\n               pps_id, h->frame_num,\n               h->cur_pic_ptr->field_poc[0],\n               h->cur_pic_ptr->field_poc[1],\n               h->ref_count[0], h->ref_count[1],\n               h->qscale,\n               h->deblocking_filter,\n               h->slice_alpha_c0_offset / 2 - 26, h->slice_beta_offset / 2 - 26,\n               h->use_weight,\n               h->use_weight == 1 && h->use_weight_chroma ? \"c\" : \"\",\n               h->slice_type == AV_PICTURE_TYPE_B ? (h->direct_spatial_mv_pred ? \"SPAT\" : \"TEMP\") : \"\"))"];
"1000977" [label="(Call,h == h0)"];
"1003319" [label="(Literal,\"slice:%d %s mb:%d %c%s%s pps:%u frame:%d poc:%d/%d ref:%d/%d qp:%d loop:%d:%d:%d weight:%d%s %s\n\")"];
"1003380" [label="(Call,h->ref_count[1])"];
"1003013" [label="(Call,h->slice_num & (MAX_SLICES - 1))"];
"1002097" [label="(Call,2 * h->frame_num)"];
"1003420" [label="(Call,h->slice_type == AV_PICTURE_TYPE_B ? (h->direct_spatial_mv_pred ? \"SPAT\" : \"TEMP\") : \"\")"];
"1000997" [label="(Call,get_bits(&h->gb, h->sps.log2_max_frame_num))"];
"1000310" [label="(Call,av_log(h->avctx, AV_LOG_ERROR, \"pps_id %d out of range\n\", pps_id))"];
"1003320" [label="(Call,h->slice_num)"];
"1000993" [label="(Call,h->frame_num = get_bits(&h->gb, h->sps.log2_max_frame_num))"];
"1000231" [label="(Call,&h->gb)"];
"1003435" [label="(MethodReturn,static int)"];
"1000228" [label="(Call,slice_type = get_ue_golomb_31(&h->gb))"];
"1000985" [label="(Block,)"];
"1003375" [label="(Call,h->ref_count[0])"];
"1000988" [label="(Identifier,h)"];
"1003391" [label="(Call,h->slice_alpha_c0_offset / 2 - 26)"];
"1003318" [label="(Identifier,AV_LOG_DEBUG)"];
"1003405" [label="(Call,h->use_weight)"];
"1001763" [label="(Call,h0->cur_pic_ptr->frame_num != h->frame_num)"];
"1000984" [label="(Identifier,pps_id)"];
"1000992" [label="(Identifier,h)"];
"1003315" [label="(Call,h->avctx)"];
"1001451" [label="(Call,h->frame_num != h->prev_frame_num)"];
"1002590" [label="(Call,get_chroma_qp(h, 1, h->qscale))"];
"1000305" [label="(ControlStructure,if (pps_id >= MAX_PPS_COUNT))"];
"1000990" [label="(Identifier,pps_id)"];
"1000987" [label="(Call,h->dequant_coeff_pps)"];
"1003358" [label="(Call,h->frame_num)"];
"1002832" [label="(Call,av_log(h->avctx, AV_LOG_INFO,\n                       \"Cannot parallelize deblocking type 1, decoding such frames in sequential order\n\"))"];
"1002951" [label="(Call,h->slice_num&(MAX_SLICES-1))"];
"1000887" [label="(Call,av_log(h->avctx, AV_LOG_INFO, \"Reinit context to %dx%d, \"\n               \"pix_fmt: %s\n\", h->width, h->height, av_get_pix_fmt_name(h->avctx->pix_fmt)))"];
"1003410" [label="(Call,h->use_weight == 1)"];
"1003323" [label="(Call,h->picture_structure == PICT_FRAME ? \"F\" : h->picture_structure == PICT_TOP_FIELD ? \"T\" : \"B\")"];
"1000986" [label="(Call,h->dequant_coeff_pps = pps_id)"];
"1003343" [label="(Call,h->slice_type_fixed ? \" fix\" : \"\")"];
"1000976" [label="(Call,h == h0 && h->dequant_coeff_pps != pps_id)"];
"1003313" [label="(Block,)"];
"1001469" [label="(Call,h->frame_num != (h->prev_frame_num + 1) % (1 << h->sps.log2_max_frame_num))"];
"1003357" [label="(Identifier,pps_id)"];
"1000127" [label="(Block,)"];
"1000299" [label="(Identifier,pps_id)"];
"1002968" [label="(Call,h->slice_num&(MAX_SLICES-1))"];
"1000312" [label="(Identifier,h)"];
"1000308" [label="(Identifier,MAX_PPS_COUNT)"];
"1000166" [label="(Call,first_mb_in_slice = get_ue_golomb_long(&h->gb))"];
"1003388" [label="(Call,h->deblocking_filter)"];
"1003314" [label="(Call,av_log(h->avctx, AV_LOG_DEBUG,\n               \"slice:%d %s mb:%d %c%s%s pps:%u frame:%d poc:%d/%d ref:%d/%d qp:%d loop:%d:%d:%d weight:%d%s %s\n\",\n               h->slice_num,\n               (h->picture_structure == PICT_FRAME ? \"F\" : h->picture_structure == PICT_TOP_FIELD ? \"T\" : \"B\"),\n               first_mb_in_slice,\n               av_get_picture_type_char(h->slice_type),\n               h->slice_type_fixed ? \" fix\" : \"\",\n               h->nal_unit_type == NAL_IDR_SLICE ? \" IDR\" : \"\",\n               pps_id, h->frame_num,\n               h->cur_pic_ptr->field_poc[0],\n               h->cur_pic_ptr->field_poc[1],\n               h->ref_count[0], h->ref_count[1],\n               h->qscale,\n               h->deblocking_filter,\n               h->slice_alpha_c0_offset / 2 - 26, h->slice_beta_offset / 2 - 26,\n               h->use_weight,\n               h->use_weight == 1 && h->use_weight_chroma ? \"c\" : \"\",\n               h->slice_type == AV_PICTURE_TYPE_B ? (h->direct_spatial_mv_pred ? \"SPAT\" : \"TEMP\") : \"\"))"];
"1000230" [label="(Call,get_ue_golomb_31(&h->gb))"];
"1003398" [label="(Call,h->slice_beta_offset / 2 - 26)"];
"1003408" [label="(Call,h->use_weight == 1 && h->use_weight_chroma ? \"c\" : \"\")"];
"1000327" [label="(Call,av_log(h->avctx, AV_LOG_ERROR,\n               \"non-existing PPS %u referenced\n\",\n               pps_id))"];
"1002031" [label="(Call,first_mb_in_slice / h->mb_width)"];
"1000981" [label="(Call,h->dequant_coeff_pps)"];
"1003361" [label="(Call,h->cur_pic_ptr->field_poc[0])"];
"1003385" [label="(Call,h->qscale)"];
"1002814" [label="(Call,h->deblocking_filter = 2)"];
"1000323" [label="(Identifier,h0)"];
"1000300" [label="(Call,get_ue_golomb(&h->gb))"];
"1000975" [label="(ControlStructure,if (h == h0 && h->dequant_coeff_pps != pps_id))"];
"1000168" [label="(Call,get_ue_golomb_long(&h->gb))"];
"1001500" [label="(Call,av_log(h->avctx, AV_LOG_DEBUG, \"Frame num gap %d %d\n\",\n                   h->frame_num, h->prev_frame_num))"];
"1003339" [label="(Call,av_get_picture_type_char(h->slice_type))"];
"1000301" [label="(Call,&h->gb)"];
"1003338" [label="(Identifier,first_mb_in_slice)"];
"1002978" [label="(Call,h->slice_num >= MAX_SLICES)"];
"1000980" [label="(Call,h->dequant_coeff_pps != pps_id)"];
"1000298" [label="(Call,pps_id = get_ue_golomb(&h->gb))"];
"1000307" [label="(Identifier,pps_id)"];
"1000306" [label="(Call,pps_id >= MAX_PPS_COUNT)"];
"1000169" [label="(Call,&h->gb)"];
"1003349" [label="(Call,h->nal_unit_type == NAL_IDR_SLICE ? \" IDR\" : \"\")"];
"1003368" [label="(Call,h->cur_pic_ptr->field_poc[1])"];
"1003434" [label="(Literal,0)"];
"1002984" [label="(Call,av_log(h->avctx, AV_LOG_WARNING, \"Possibly too many slices (%d >= %d), increase MAX_SLICES and recompile if there are artifacts\n\", h->slice_num, MAX_SLICES))"];
"1002794" [label="(Call,h->deblocking_filter == 1)"];
"1000995" [label="(Identifier,h)"];
"1000980" -> "1000976"  [label="AST: "];
"1000980" -> "1000984"  [label="CFG: "];
"1000981" -> "1000980"  [label="AST: "];
"1000984" -> "1000980"  [label="AST: "];
"1000976" -> "1000980"  [label="CFG: "];
"1000980" -> "1003435"  [label="DDG: "];
"1000980" -> "1003435"  [label="DDG: "];
"1000980" -> "1000976"  [label="DDG: "];
"1000980" -> "1000976"  [label="DDG: "];
"1000306" -> "1000980"  [label="DDG: "];
"1000980" -> "1000986"  [label="DDG: "];
"1000980" -> "1003314"  [label="DDG: "];
"1000306" -> "1000305"  [label="AST: "];
"1000306" -> "1000308"  [label="CFG: "];
"1000307" -> "1000306"  [label="AST: "];
"1000308" -> "1000306"  [label="AST: "];
"1000312" -> "1000306"  [label="CFG: "];
"1000323" -> "1000306"  [label="CFG: "];
"1000306" -> "1003435"  [label="DDG: "];
"1000306" -> "1003435"  [label="DDG: "];
"1000306" -> "1003435"  [label="DDG: "];
"1000298" -> "1000306"  [label="DDG: "];
"1000306" -> "1000310"  [label="DDG: "];
"1000306" -> "1000327"  [label="DDG: "];
"1000306" -> "1000986"  [label="DDG: "];
"1000306" -> "1003314"  [label="DDG: "];
"1000298" -> "1000127"  [label="AST: "];
"1000298" -> "1000300"  [label="CFG: "];
"1000299" -> "1000298"  [label="AST: "];
"1000300" -> "1000298"  [label="AST: "];
"1000307" -> "1000298"  [label="CFG: "];
"1000298" -> "1003435"  [label="DDG: "];
"1000300" -> "1000298"  [label="DDG: "];
"1000300" -> "1000301"  [label="CFG: "];
"1000301" -> "1000300"  [label="AST: "];
"1000300" -> "1003435"  [label="DDG: "];
"1000230" -> "1000300"  [label="DDG: "];
"1000300" -> "1000997"  [label="DDG: "];
"1000230" -> "1000228"  [label="AST: "];
"1000230" -> "1000231"  [label="CFG: "];
"1000231" -> "1000230"  [label="AST: "];
"1000228" -> "1000230"  [label="CFG: "];
"1000230" -> "1003435"  [label="DDG: "];
"1000230" -> "1000228"  [label="DDG: "];
"1000168" -> "1000230"  [label="DDG: "];
"1000168" -> "1000166"  [label="AST: "];
"1000168" -> "1000169"  [label="CFG: "];
"1000169" -> "1000168"  [label="AST: "];
"1000166" -> "1000168"  [label="CFG: "];
"1000168" -> "1000166"  [label="DDG: "];
"1000976" -> "1000975"  [label="AST: "];
"1000976" -> "1000977"  [label="CFG: "];
"1000977" -> "1000976"  [label="AST: "];
"1000988" -> "1000976"  [label="CFG: "];
"1000995" -> "1000976"  [label="CFG: "];
"1000976" -> "1003435"  [label="DDG: "];
"1000976" -> "1003435"  [label="DDG: "];
"1000976" -> "1003435"  [label="DDG: "];
"1000977" -> "1000976"  [label="DDG: "];
"1000977" -> "1000976"  [label="DDG: "];
"1000986" -> "1000985"  [label="AST: "];
"1000986" -> "1000990"  [label="CFG: "];
"1000987" -> "1000986"  [label="AST: "];
"1000990" -> "1000986"  [label="AST: "];
"1000992" -> "1000986"  [label="CFG: "];
"1000986" -> "1003435"  [label="DDG: "];
"1000986" -> "1003435"  [label="DDG: "];
"1003314" -> "1003313"  [label="AST: "];
"1003314" -> "1003420"  [label="CFG: "];
"1003315" -> "1003314"  [label="AST: "];
"1003318" -> "1003314"  [label="AST: "];
"1003319" -> "1003314"  [label="AST: "];
"1003320" -> "1003314"  [label="AST: "];
"1003323" -> "1003314"  [label="AST: "];
"1003338" -> "1003314"  [label="AST: "];
"1003339" -> "1003314"  [label="AST: "];
"1003343" -> "1003314"  [label="AST: "];
"1003349" -> "1003314"  [label="AST: "];
"1003357" -> "1003314"  [label="AST: "];
"1003358" -> "1003314"  [label="AST: "];
"1003361" -> "1003314"  [label="AST: "];
"1003368" -> "1003314"  [label="AST: "];
"1003375" -> "1003314"  [label="AST: "];
"1003380" -> "1003314"  [label="AST: "];
"1003385" -> "1003314"  [label="AST: "];
"1003388" -> "1003314"  [label="AST: "];
"1003391" -> "1003314"  [label="AST: "];
"1003398" -> "1003314"  [label="AST: "];
"1003405" -> "1003314"  [label="AST: "];
"1003408" -> "1003314"  [label="AST: "];
"1003420" -> "1003314"  [label="AST: "];
"1003434" -> "1003314"  [label="CFG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1003314" -> "1003435"  [label="DDG: "];
"1002984" -> "1003314"  [label="DDG: "];
"1002984" -> "1003314"  [label="DDG: "];
"1002832" -> "1003314"  [label="DDG: "];
"1000887" -> "1003314"  [label="DDG: "];
"1001500" -> "1003314"  [label="DDG: "];
"1001500" -> "1003314"  [label="DDG: "];
"1002968" -> "1003314"  [label="DDG: "];
"1002978" -> "1003314"  [label="DDG: "];
"1002951" -> "1003314"  [label="DDG: "];
"1003013" -> "1003314"  [label="DDG: "];
"1002031" -> "1003314"  [label="DDG: "];
"1003339" -> "1003314"  [label="DDG: "];
"1002097" -> "1003314"  [label="DDG: "];
"1001451" -> "1003314"  [label="DDG: "];
"1001763" -> "1003314"  [label="DDG: "];
"1000993" -> "1003314"  [label="DDG: "];
"1001469" -> "1003314"  [label="DDG: "];
"1002590" -> "1003314"  [label="DDG: "];
"1002814" -> "1003314"  [label="DDG: "];
"1002794" -> "1003314"  [label="DDG: "];
"1003391" -> "1003314"  [label="DDG: "];
"1003391" -> "1003314"  [label="DDG: "];
"1003398" -> "1003314"  [label="DDG: "];
"1003398" -> "1003314"  [label="DDG: "];
"1003410" -> "1003314"  [label="DDG: "];
}
