digraph "0_linux_54d83fc74aa9ec72794373cb47432c5f7fb1a309_1@API" {
"1000205" [label="(Call,e->target_offset == sizeof(struct arpt_entry) &&\n \t\t\t     (strcmp(t->target.u.user.name,\n \t\t\t\t     XT_STANDARD_TARGET) == 0) &&\n\t\t\t     t->verdict < 0 && unconditional(&e->arp))"];
"1000206" [label="(Call,e->target_offset == sizeof(struct arpt_entry))"];
"1000212" [label="(Call,(strcmp(t->target.u.user.name,\n \t\t\t\t     XT_STANDARD_TARGET) == 0) &&\n\t\t\t     t->verdict < 0 && unconditional(&e->arp))"];
"1000213" [label="(Call,strcmp(t->target.u.user.name,\n \t\t\t\t     XT_STANDARD_TARGET) == 0)"];
"1000226" [label="(Call,t->verdict < 0 && unconditional(&e->arp))"];
"1000227" [label="(Call,t->verdict < 0)"];
"1000256" [label="(Call,t->verdict < -NF_MAX_VERDICT - 1)"];
"1000260" [label="(Call,-NF_MAX_VERDICT - 1)"];
"1000261" [label="(Call,-NF_MAX_VERDICT)"];
"1000232" [label="(Call,unconditional(&e->arp))"];
"1000204" [label="(Call,(e->target_offset == sizeof(struct arpt_entry) &&\n \t\t\t     (strcmp(t->target.u.user.name,\n \t\t\t\t     XT_STANDARD_TARGET) == 0) &&\n\t\t\t     t->verdict < 0 && unconditional(&e->arp)) ||\n\t\t\t    visited)"];
"1000262" [label="(Identifier,NF_MAX_VERDICT)"];
"1000344" [label="(Call,newpos = t->verdict)"];
"1000233" [label="(Call,&e->arp)"];
"1000203" [label="(ControlStructure,if ((e->target_offset == sizeof(struct arpt_entry) &&\n \t\t\t     (strcmp(t->target.u.user.name,\n \t\t\t\t     XT_STANDARD_TARGET) == 0) &&\n\t\t\t     t->verdict < 0 && unconditional(&e->arp)) ||\n\t\t\t    visited))"];
"1000228" [label="(Call,t->verdict)"];
"1000237" [label="(Identifier,visited)"];
"1000265" [label="(Call,duprintf(\"mark_source_chains: bad \"\n\t\t\t\t\t\t\"negative verdict (%i)\n\",\n\t\t\t\t\t\t\t\tt->verdict))"];
"1000231" [label="(Literal,0)"];
"1000213" [label="(Call,strcmp(t->target.u.user.name,\n \t\t\t\t     XT_STANDARD_TARGET) == 0)"];
"1000260" [label="(Call,-NF_MAX_VERDICT - 1)"];
"1000249" [label="(Identifier,t)"];
"1000212" [label="(Call,(strcmp(t->target.u.user.name,\n \t\t\t\t     XT_STANDARD_TARGET) == 0) &&\n\t\t\t     t->verdict < 0 && unconditional(&e->arp))"];
"1000419" [label="(MethodReturn,static int)"];
"1000204" [label="(Call,(e->target_offset == sizeof(struct arpt_entry) &&\n \t\t\t     (strcmp(t->target.u.user.name,\n \t\t\t\t     XT_STANDARD_TARGET) == 0) &&\n\t\t\t     t->verdict < 0 && unconditional(&e->arp)) ||\n\t\t\t    visited)"];
"1000210" [label="(Call,sizeof(struct arpt_entry))"];
"1000256" [label="(Call,t->verdict < -NF_MAX_VERDICT - 1)"];
"1000263" [label="(Literal,1)"];
"1000242" [label="(Call,(strcmp(t->target.u.user.name,\n\t\t\t\t\t    XT_STANDARD_TARGET) == 0) &&\n\t\t\t\t    t->verdict < -NF_MAX_VERDICT - 1)"];
"1000257" [label="(Call,t->verdict)"];
"1000235" [label="(Identifier,e)"];
"1000165" [label="(Call,visited = e->comefrom & (1 << hook))"];
"1000225" [label="(Literal,0)"];
"1000219" [label="(Identifier,t)"];
"1000207" [label="(Call,e->target_offset)"];
"1000229" [label="(Identifier,t)"];
"1000214" [label="(Call,strcmp(t->target.u.user.name,\n \t\t\t\t     XT_STANDARD_TARGET))"];
"1000345" [label="(Identifier,newpos)"];
"1000206" [label="(Call,e->target_offset == sizeof(struct arpt_entry))"];
"1000205" [label="(Call,e->target_offset == sizeof(struct arpt_entry) &&\n \t\t\t     (strcmp(t->target.u.user.name,\n \t\t\t\t     XT_STANDARD_TARGET) == 0) &&\n\t\t\t     t->verdict < 0 && unconditional(&e->arp))"];
"1000226" [label="(Call,t->verdict < 0 && unconditional(&e->arp))"];
"1000227" [label="(Call,t->verdict < 0)"];
"1000232" [label="(Call,unconditional(&e->arp))"];
"1000261" [label="(Call,-NF_MAX_VERDICT)"];
"1000205" -> "1000204"  [label="AST: "];
"1000205" -> "1000206"  [label="CFG: "];
"1000205" -> "1000212"  [label="CFG: "];
"1000206" -> "1000205"  [label="AST: "];
"1000212" -> "1000205"  [label="AST: "];
"1000237" -> "1000205"  [label="CFG: "];
"1000204" -> "1000205"  [label="CFG: "];
"1000205" -> "1000419"  [label="DDG: e->target_offset == sizeof(struct arpt_entry)"];
"1000205" -> "1000419"  [label="DDG: (strcmp(t->target.u.user.name,\n \t\t\t\t     XT_STANDARD_TARGET) == 0) &&\n\t\t\t     t->verdict < 0 && unconditional(&e->arp)"];
"1000205" -> "1000204"  [label="DDG: e->target_offset == sizeof(struct arpt_entry)"];
"1000205" -> "1000204"  [label="DDG: (strcmp(t->target.u.user.name,\n \t\t\t\t     XT_STANDARD_TARGET) == 0) &&\n\t\t\t     t->verdict < 0 && unconditional(&e->arp)"];
"1000206" -> "1000205"  [label="DDG: e->target_offset"];
"1000212" -> "1000205"  [label="DDG: strcmp(t->target.u.user.name,\n \t\t\t\t     XT_STANDARD_TARGET) == 0"];
"1000212" -> "1000205"  [label="DDG: t->verdict < 0 && unconditional(&e->arp)"];
"1000206" -> "1000210"  [label="CFG: "];
"1000207" -> "1000206"  [label="AST: "];
"1000210" -> "1000206"  [label="AST: "];
"1000219" -> "1000206"  [label="CFG: "];
"1000206" -> "1000419"  [label="DDG: e->target_offset"];
"1000212" -> "1000213"  [label="CFG: "];
"1000212" -> "1000226"  [label="CFG: "];
"1000213" -> "1000212"  [label="AST: "];
"1000226" -> "1000212"  [label="AST: "];
"1000212" -> "1000419"  [label="DDG: t->verdict < 0 && unconditional(&e->arp)"];
"1000212" -> "1000419"  [label="DDG: strcmp(t->target.u.user.name,\n \t\t\t\t     XT_STANDARD_TARGET) == 0"];
"1000213" -> "1000212"  [label="DDG: strcmp(t->target.u.user.name,\n \t\t\t\t     XT_STANDARD_TARGET)"];
"1000213" -> "1000212"  [label="DDG: 0"];
"1000226" -> "1000212"  [label="DDG: t->verdict < 0"];
"1000226" -> "1000212"  [label="DDG: unconditional(&e->arp)"];
"1000213" -> "1000225"  [label="CFG: "];
"1000214" -> "1000213"  [label="AST: "];
"1000225" -> "1000213"  [label="AST: "];
"1000229" -> "1000213"  [label="CFG: "];
"1000213" -> "1000419"  [label="DDG: strcmp(t->target.u.user.name,\n \t\t\t\t     XT_STANDARD_TARGET)"];
"1000226" -> "1000227"  [label="CFG: "];
"1000226" -> "1000232"  [label="CFG: "];
"1000227" -> "1000226"  [label="AST: "];
"1000232" -> "1000226"  [label="AST: "];
"1000226" -> "1000419"  [label="DDG: t->verdict < 0"];
"1000226" -> "1000419"  [label="DDG: unconditional(&e->arp)"];
"1000227" -> "1000226"  [label="DDG: t->verdict"];
"1000227" -> "1000226"  [label="DDG: 0"];
"1000232" -> "1000226"  [label="DDG: &e->arp"];
"1000227" -> "1000231"  [label="CFG: "];
"1000228" -> "1000227"  [label="AST: "];
"1000231" -> "1000227"  [label="AST: "];
"1000235" -> "1000227"  [label="CFG: "];
"1000227" -> "1000419"  [label="DDG: t->verdict"];
"1000256" -> "1000227"  [label="DDG: t->verdict"];
"1000227" -> "1000256"  [label="DDG: t->verdict"];
"1000227" -> "1000265"  [label="DDG: t->verdict"];
"1000227" -> "1000344"  [label="DDG: t->verdict"];
"1000256" -> "1000242"  [label="AST: "];
"1000256" -> "1000260"  [label="CFG: "];
"1000257" -> "1000256"  [label="AST: "];
"1000260" -> "1000256"  [label="AST: "];
"1000242" -> "1000256"  [label="CFG: "];
"1000256" -> "1000419"  [label="DDG: -NF_MAX_VERDICT - 1"];
"1000256" -> "1000419"  [label="DDG: t->verdict"];
"1000256" -> "1000242"  [label="DDG: t->verdict"];
"1000256" -> "1000242"  [label="DDG: -NF_MAX_VERDICT - 1"];
"1000260" -> "1000256"  [label="DDG: -NF_MAX_VERDICT"];
"1000260" -> "1000256"  [label="DDG: 1"];
"1000256" -> "1000265"  [label="DDG: t->verdict"];
"1000256" -> "1000344"  [label="DDG: t->verdict"];
"1000260" -> "1000263"  [label="CFG: "];
"1000261" -> "1000260"  [label="AST: "];
"1000263" -> "1000260"  [label="AST: "];
"1000260" -> "1000419"  [label="DDG: -NF_MAX_VERDICT"];
"1000261" -> "1000260"  [label="DDG: NF_MAX_VERDICT"];
"1000261" -> "1000262"  [label="CFG: "];
"1000262" -> "1000261"  [label="AST: "];
"1000263" -> "1000261"  [label="CFG: "];
"1000261" -> "1000419"  [label="DDG: NF_MAX_VERDICT"];
"1000232" -> "1000233"  [label="CFG: "];
"1000233" -> "1000232"  [label="AST: "];
"1000232" -> "1000419"  [label="DDG: &e->arp"];
"1000204" -> "1000203"  [label="AST: "];
"1000204" -> "1000237"  [label="CFG: "];
"1000237" -> "1000204"  [label="AST: "];
"1000249" -> "1000204"  [label="CFG: "];
"1000345" -> "1000204"  [label="CFG: "];
"1000204" -> "1000419"  [label="DDG: visited"];
"1000204" -> "1000419"  [label="DDG: e->target_offset == sizeof(struct arpt_entry) &&\n \t\t\t     (strcmp(t->target.u.user.name,\n \t\t\t\t     XT_STANDARD_TARGET) == 0) &&\n\t\t\t     t->verdict < 0 && unconditional(&e->arp)"];
"1000204" -> "1000419"  [label="DDG: (e->target_offset == sizeof(struct arpt_entry) &&\n \t\t\t     (strcmp(t->target.u.user.name,\n \t\t\t\t     XT_STANDARD_TARGET) == 0) &&\n\t\t\t     t->verdict < 0 && unconditional(&e->arp)) ||\n\t\t\t    visited"];
"1000165" -> "1000204"  [label="DDG: visited"];
}
