digraph "0_oniguruma_c509265c5f6ae7264f7b8a8aae1cfa5fc59d108c@integer" {
"1000344" [label="(Call,jump_len = cond_len + then_len + SIZE_OP_ATOMIC_END + SIZE_OP_JUMP)"];
"1000320" [label="(Call,cond_len < 0)"];
"1000314" [label="(Call,cond_len = compile_length_tree(cond, reg))"];
"1000316" [label="(Call,compile_length_tree(cond, reg))"];
"1000283" [label="(Call,* cond = NODE_BAG_BODY(node))"];
"1000285" [label="(Call,NODE_BAG_BODY(node))"];
"1000101" [label="(MethodParameterIn,BagNode* node)"];
"1000305" [label="(Call,add_op(reg, OP_ATOMIC_START))"];
"1000102" [label="(MethodParameterIn,regex_t* reg)"];
"1000335" [label="(Call,then_len < 0)"];
"1000329" [label="(Call,then_len = compile_length_tree(Then, reg))"];
"1000331" [label="(Call,compile_length_tree(Then, reg))"];
"1000326" [label="(Call,IS_NOT_NULL(Then))"];
"1000288" [label="(Call,* Then = node->te.Then)"];
"1000341" [label="(Call,then_len = 0)"];
"1000364" [label="(Call,COP(reg)->push.addr = SIZE_INC_OP + jump_len)"];
"1000371" [label="(Call,SIZE_INC_OP + jump_len)"];
"1000317" [label="(Identifier,cond)"];
"1000339" [label="(Identifier,then_len)"];
"1000194" [label="(Call,compile_tree(NODE_QUANT_BODY(qn), reg, env))"];
"1000322" [label="(Literal,0)"];
"1000277" [label="(Block,)"];
"1000307" [label="(Identifier,OP_ATOMIC_START)"];
"1000290" [label="(Call,node->te.Then)"];
"1000346" [label="(Call,cond_len + then_len + SIZE_OP_ATOMIC_END + SIZE_OP_JUMP)"];
"1000123" [label="(Call,compile_option_node(node, reg, env))"];
"1000326" [label="(Call,IS_NOT_NULL(Then))"];
"1000286" [label="(Identifier,node)"];
"1000259" [label="(Call,compile_tree(NODE_BAG_BODY(node), reg, env))"];
"1000371" [label="(Call,SIZE_INC_OP + jump_len)"];
"1000306" [label="(Identifier,reg)"];
"1000343" [label="(Literal,0)"];
"1000367" [label="(Call,COP(reg))"];
"1000101" [label="(MethodParameterIn,BagNode* node)"];
"1000341" [label="(Call,then_len = 0)"];
"1000336" [label="(Identifier,then_len)"];
"1000434" [label="(Call,add_op(reg, OP_JUMP))"];
"1000388" [label="(Call,add_op(reg, OP_ATOMIC_END))"];
"1000472" [label="(Call,compile_tree(Else, reg, env))"];
"1000285" [label="(Call,NODE_BAG_BODY(node))"];
"1000446" [label="(Call,COP(reg))"];
"1000137" [label="(Call,NODE_BAG_BODY(node))"];
"1000375" [label="(Identifier,r)"];
"1000230" [label="(Call,COP(reg))"];
"1000303" [label="(Call,r = add_op(reg, OP_ATOMIC_START))"];
"1000272" [label="(Call,add_op(reg, OP_ATOMIC_END))"];
"1000323" [label="(Return,return cond_len;)"];
"1000344" [label="(Call,jump_len = cond_len + then_len + SIZE_OP_ATOMIC_END + SIZE_OP_JUMP)"];
"1000479" [label="(MethodReturn,RET)"];
"1000457" [label="(Call,add_op(reg, OP_ATOMIC_END))"];
"1000315" [label="(Identifier,cond_len)"];
"1000218" [label="(Call,add_op(reg, OP_JUMP))"];
"1000169" [label="(Call,add_op(reg, OP_PUSH))"];
"1000338" [label="(Return,return then_len;)"];
"1000419" [label="(Call,compile_length_tree(Else, reg))"];
"1000289" [label="(Identifier,Then)"];
"1000373" [label="(Identifier,jump_len)"];
"1000319" [label="(ControlStructure,if (cond_len < 0))"];
"1000332" [label="(Identifier,Then)"];
"1000327" [label="(Identifier,Then)"];
"1000318" [label="(Identifier,reg)"];
"1000141" [label="(Call,compile_tree_n_times(NODE_QUANT_BODY(qn), qn->lower, reg, env))"];
"1000130" [label="(Call,NODE_IS_STOP_BT_SIMPLE_REPEAT(node))"];
"1000329" [label="(Call,then_len = compile_length_tree(Then, reg))"];
"1000316" [label="(Call,compile_length_tree(cond, reg))"];
"1000102" [label="(MethodParameterIn,regex_t* reg)"];
"1000403" [label="(Call,compile_tree(Then, reg, env))"];
"1000288" [label="(Call,* Then = node->te.Then)"];
"1000328" [label="(Block,)"];
"1000331" [label="(Call,compile_length_tree(Then, reg))"];
"1000157" [label="(Call,compile_length_tree(NODE_QUANT_BODY(qn), reg))"];
"1000330" [label="(Identifier,then_len)"];
"1000297" [label="(Identifier,Else)"];
"1000376" [label="(Call,compile_tree(cond, reg, env))"];
"1000325" [label="(ControlStructure,if (IS_NOT_NULL(Then)))"];
"1000334" [label="(ControlStructure,if (then_len < 0))"];
"1000115" [label="(Call,compile_bag_memory_node(node, reg, env))"];
"1000355" [label="(Call,add_op(reg, OP_PUSH))"];
"1000324" [label="(Identifier,cond_len)"];
"1000333" [label="(Identifier,reg)"];
"1000398" [label="(Call,IS_NOT_NULL(Then))"];
"1000364" [label="(Call,COP(reg)->push.addr = SIZE_INC_OP + jump_len)"];
"1000354" [label="(Identifier,r)"];
"1000372" [label="(Identifier,SIZE_INC_OP)"];
"1000181" [label="(Call,COP(reg))"];
"1000348" [label="(Call,then_len + SIZE_OP_ATOMIC_END + SIZE_OP_JUMP)"];
"1000314" [label="(Call,cond_len = compile_length_tree(cond, reg))"];
"1000340" [label="(ControlStructure,else)"];
"1000283" [label="(Call,* cond = NODE_BAG_BODY(node))"];
"1000284" [label="(Identifier,cond)"];
"1000337" [label="(Literal,0)"];
"1000335" [label="(Call,then_len < 0)"];
"1000305" [label="(Call,add_op(reg, OP_ATOMIC_START))"];
"1000260" [label="(Call,NODE_BAG_BODY(node))"];
"1000345" [label="(Identifier,jump_len)"];
"1000320" [label="(Call,cond_len < 0)"];
"1000321" [label="(Identifier,cond_len)"];
"1000248" [label="(Call,add_op(reg, OP_ATOMIC_START))"];
"1000207" [label="(Call,add_op(reg, OP_POP_OUT))"];
"1000365" [label="(Call,COP(reg)->push.addr)"];
"1000342" [label="(Identifier,then_len)"];
"1000344" -> "1000277"  [label="AST: "];
"1000344" -> "1000346"  [label="CFG: "];
"1000345" -> "1000344"  [label="AST: "];
"1000346" -> "1000344"  [label="AST: "];
"1000354" -> "1000344"  [label="CFG: "];
"1000344" -> "1000479"  [label="DDG: cond_len + then_len + SIZE_OP_ATOMIC_END + SIZE_OP_JUMP"];
"1000344" -> "1000479"  [label="DDG: jump_len"];
"1000320" -> "1000344"  [label="DDG: cond_len"];
"1000335" -> "1000344"  [label="DDG: then_len"];
"1000341" -> "1000344"  [label="DDG: then_len"];
"1000344" -> "1000364"  [label="DDG: jump_len"];
"1000344" -> "1000371"  [label="DDG: jump_len"];
"1000320" -> "1000319"  [label="AST: "];
"1000320" -> "1000322"  [label="CFG: "];
"1000321" -> "1000320"  [label="AST: "];
"1000322" -> "1000320"  [label="AST: "];
"1000324" -> "1000320"  [label="CFG: "];
"1000327" -> "1000320"  [label="CFG: "];
"1000320" -> "1000479"  [label="DDG: cond_len"];
"1000320" -> "1000479"  [label="DDG: cond_len < 0"];
"1000314" -> "1000320"  [label="DDG: cond_len"];
"1000320" -> "1000323"  [label="DDG: cond_len"];
"1000320" -> "1000346"  [label="DDG: cond_len"];
"1000314" -> "1000277"  [label="AST: "];
"1000314" -> "1000316"  [label="CFG: "];
"1000315" -> "1000314"  [label="AST: "];
"1000316" -> "1000314"  [label="AST: "];
"1000321" -> "1000314"  [label="CFG: "];
"1000314" -> "1000479"  [label="DDG: compile_length_tree(cond, reg)"];
"1000316" -> "1000314"  [label="DDG: cond"];
"1000316" -> "1000314"  [label="DDG: reg"];
"1000316" -> "1000318"  [label="CFG: "];
"1000317" -> "1000316"  [label="AST: "];
"1000318" -> "1000316"  [label="AST: "];
"1000316" -> "1000479"  [label="DDG: reg"];
"1000316" -> "1000479"  [label="DDG: cond"];
"1000283" -> "1000316"  [label="DDG: cond"];
"1000305" -> "1000316"  [label="DDG: reg"];
"1000102" -> "1000316"  [label="DDG: reg"];
"1000316" -> "1000331"  [label="DDG: reg"];
"1000316" -> "1000355"  [label="DDG: reg"];
"1000316" -> "1000376"  [label="DDG: cond"];
"1000283" -> "1000277"  [label="AST: "];
"1000283" -> "1000285"  [label="CFG: "];
"1000284" -> "1000283"  [label="AST: "];
"1000285" -> "1000283"  [label="AST: "];
"1000289" -> "1000283"  [label="CFG: "];
"1000283" -> "1000479"  [label="DDG: NODE_BAG_BODY(node)"];
"1000283" -> "1000479"  [label="DDG: cond"];
"1000285" -> "1000283"  [label="DDG: node"];
"1000285" -> "1000286"  [label="CFG: "];
"1000286" -> "1000285"  [label="AST: "];
"1000285" -> "1000479"  [label="DDG: node"];
"1000101" -> "1000285"  [label="DDG: node"];
"1000101" -> "1000100"  [label="AST: "];
"1000101" -> "1000479"  [label="DDG: node"];
"1000101" -> "1000115"  [label="DDG: node"];
"1000101" -> "1000123"  [label="DDG: node"];
"1000101" -> "1000130"  [label="DDG: node"];
"1000101" -> "1000137"  [label="DDG: node"];
"1000101" -> "1000260"  [label="DDG: node"];
"1000305" -> "1000303"  [label="AST: "];
"1000305" -> "1000307"  [label="CFG: "];
"1000306" -> "1000305"  [label="AST: "];
"1000307" -> "1000305"  [label="AST: "];
"1000303" -> "1000305"  [label="CFG: "];
"1000305" -> "1000479"  [label="DDG: OP_ATOMIC_START"];
"1000305" -> "1000479"  [label="DDG: reg"];
"1000305" -> "1000303"  [label="DDG: reg"];
"1000305" -> "1000303"  [label="DDG: OP_ATOMIC_START"];
"1000102" -> "1000305"  [label="DDG: reg"];
"1000102" -> "1000100"  [label="AST: "];
"1000102" -> "1000479"  [label="DDG: reg"];
"1000102" -> "1000115"  [label="DDG: reg"];
"1000102" -> "1000123"  [label="DDG: reg"];
"1000102" -> "1000141"  [label="DDG: reg"];
"1000102" -> "1000157"  [label="DDG: reg"];
"1000102" -> "1000169"  [label="DDG: reg"];
"1000102" -> "1000181"  [label="DDG: reg"];
"1000102" -> "1000194"  [label="DDG: reg"];
"1000102" -> "1000207"  [label="DDG: reg"];
"1000102" -> "1000218"  [label="DDG: reg"];
"1000102" -> "1000230"  [label="DDG: reg"];
"1000102" -> "1000248"  [label="DDG: reg"];
"1000102" -> "1000259"  [label="DDG: reg"];
"1000102" -> "1000272"  [label="DDG: reg"];
"1000102" -> "1000331"  [label="DDG: reg"];
"1000102" -> "1000355"  [label="DDG: reg"];
"1000102" -> "1000367"  [label="DDG: reg"];
"1000102" -> "1000376"  [label="DDG: reg"];
"1000102" -> "1000388"  [label="DDG: reg"];
"1000102" -> "1000403"  [label="DDG: reg"];
"1000102" -> "1000419"  [label="DDG: reg"];
"1000102" -> "1000434"  [label="DDG: reg"];
"1000102" -> "1000446"  [label="DDG: reg"];
"1000102" -> "1000457"  [label="DDG: reg"];
"1000102" -> "1000472"  [label="DDG: reg"];
"1000335" -> "1000334"  [label="AST: "];
"1000335" -> "1000337"  [label="CFG: "];
"1000336" -> "1000335"  [label="AST: "];
"1000337" -> "1000335"  [label="AST: "];
"1000339" -> "1000335"  [label="CFG: "];
"1000345" -> "1000335"  [label="CFG: "];
"1000335" -> "1000479"  [label="DDG: then_len"];
"1000335" -> "1000479"  [label="DDG: then_len < 0"];
"1000329" -> "1000335"  [label="DDG: then_len"];
"1000335" -> "1000338"  [label="DDG: then_len"];
"1000335" -> "1000346"  [label="DDG: then_len"];
"1000335" -> "1000348"  [label="DDG: then_len"];
"1000329" -> "1000328"  [label="AST: "];
"1000329" -> "1000331"  [label="CFG: "];
"1000330" -> "1000329"  [label="AST: "];
"1000331" -> "1000329"  [label="AST: "];
"1000336" -> "1000329"  [label="CFG: "];
"1000329" -> "1000479"  [label="DDG: compile_length_tree(Then, reg)"];
"1000331" -> "1000329"  [label="DDG: Then"];
"1000331" -> "1000329"  [label="DDG: reg"];
"1000331" -> "1000333"  [label="CFG: "];
"1000332" -> "1000331"  [label="AST: "];
"1000333" -> "1000331"  [label="AST: "];
"1000331" -> "1000479"  [label="DDG: reg"];
"1000331" -> "1000479"  [label="DDG: Then"];
"1000326" -> "1000331"  [label="DDG: Then"];
"1000331" -> "1000355"  [label="DDG: reg"];
"1000331" -> "1000398"  [label="DDG: Then"];
"1000326" -> "1000325"  [label="AST: "];
"1000326" -> "1000327"  [label="CFG: "];
"1000327" -> "1000326"  [label="AST: "];
"1000330" -> "1000326"  [label="CFG: "];
"1000342" -> "1000326"  [label="CFG: "];
"1000326" -> "1000479"  [label="DDG: IS_NOT_NULL(Then)"];
"1000326" -> "1000479"  [label="DDG: Then"];
"1000288" -> "1000326"  [label="DDG: Then"];
"1000326" -> "1000398"  [label="DDG: Then"];
"1000288" -> "1000277"  [label="AST: "];
"1000288" -> "1000290"  [label="CFG: "];
"1000289" -> "1000288"  [label="AST: "];
"1000290" -> "1000288"  [label="AST: "];
"1000297" -> "1000288"  [label="CFG: "];
"1000288" -> "1000479"  [label="DDG: node->te.Then"];
"1000288" -> "1000479"  [label="DDG: Then"];
"1000341" -> "1000340"  [label="AST: "];
"1000341" -> "1000343"  [label="CFG: "];
"1000342" -> "1000341"  [label="AST: "];
"1000343" -> "1000341"  [label="AST: "];
"1000345" -> "1000341"  [label="CFG: "];
"1000341" -> "1000346"  [label="DDG: then_len"];
"1000341" -> "1000348"  [label="DDG: then_len"];
"1000364" -> "1000277"  [label="AST: "];
"1000364" -> "1000371"  [label="CFG: "];
"1000365" -> "1000364"  [label="AST: "];
"1000371" -> "1000364"  [label="AST: "];
"1000375" -> "1000364"  [label="CFG: "];
"1000364" -> "1000479"  [label="DDG: COP(reg)->push.addr"];
"1000364" -> "1000479"  [label="DDG: SIZE_INC_OP + jump_len"];
"1000371" -> "1000373"  [label="CFG: "];
"1000372" -> "1000371"  [label="AST: "];
"1000373" -> "1000371"  [label="AST: "];
"1000371" -> "1000479"  [label="DDG: jump_len"];
"1000371" -> "1000479"  [label="DDG: SIZE_INC_OP"];
}
