digraph "0_redis_c04082cf138f1f51cedf05ee9ad36fb6763cafc6@pointer" {
"1000315" [label="(Call,streamParseIDOrReply(c,c->argv[4],&id,0))"];
"1000143" [label="(Call,lookupKeyWriteOrReply(c,c->argv[2],shared.nokeyerr))"];
"1000106" [label="(MethodParameterIn,client *c)"];
"1000314" [label="(Call,streamParseIDOrReply(c,c->argv[4],&id,0) != C_OK)"];
"1000333" [label="(Call,addReply(c,shared.ok))"];
"1000335" [label="(Call,shared.ok)"];
"1000327" [label="(Return,return;)"];
"1000191" [label="(Call,addReplyErrorFormat(c, \"-NOGROUP No such consumer group '%s' \"\n                                   \"for key name '%s'\",\n                                   (char*)grpname, (char*)c->argv[2]->ptr))"];
"1000313" [label="(ControlStructure,if (streamParseIDOrReply(c,c->argv[4],&id,0) != C_OK))"];
"1000334" [label="(Identifier,c)"];
"1000145" [label="(Call,c->argv[2])"];
"1000316" [label="(Identifier,c)"];
"1000427" [label="(MethodReturn,void)"];
"1000314" [label="(Call,streamParseIDOrReply(c,c->argv[4],&id,0) != C_OK)"];
"1000240" [label="(Call,streamParseIDOrReply(c,c->argv[4],&id,0))"];
"1000373" [label="(Call,addReply(c,shared.czero))"];
"1000324" [label="(Literal,0)"];
"1000143" [label="(Call,lookupKeyWriteOrReply(c,c->argv[2],shared.nokeyerr))"];
"1000277" [label="(Call,addReplySds(c,\n                sdsnew(\"-BUSYGROUP Consumer Group name already exists\r\n\")))"];
"1000325" [label="(Identifier,C_OK)"];
"1000417" [label="(Call,addReplyHelp(c, help))"];
"1000322" [label="(Call,&id)"];
"1000366" [label="(Call,addReply(c,shared.cone))"];
"1000315" [label="(Call,streamParseIDOrReply(c,c->argv[4],&id,0))"];
"1000422" [label="(Call,addReply(c,shared.syntaxerr))"];
"1000106" [label="(MethodParameterIn,client *c)"];
"1000150" [label="(Call,shared.nokeyerr)"];
"1000144" [label="(Identifier,c)"];
"1000293" [label="(Block,)"];
"1000333" [label="(Call,addReply(c,shared.ok))"];
"1000317" [label="(Call,c->argv[4])"];
"1000266" [label="(Call,addReply(c,shared.ok))"];
"1000403" [label="(Call,addReplyLongLong(c,pending))"];
"1000330" [label="(Identifier,cg)"];
"1000141" [label="(Call,*o = lookupKeyWriteOrReply(c,c->argv[2],shared.nokeyerr))"];
"1000315" -> "1000314"  [label="AST: "];
"1000315" -> "1000324"  [label="CFG: "];
"1000316" -> "1000315"  [label="AST: "];
"1000317" -> "1000315"  [label="AST: "];
"1000322" -> "1000315"  [label="AST: "];
"1000324" -> "1000315"  [label="AST: "];
"1000325" -> "1000315"  [label="CFG: "];
"1000315" -> "1000427"  [label="DDG: c"];
"1000315" -> "1000427"  [label="DDG: &id"];
"1000315" -> "1000427"  [label="DDG: c->argv[4]"];
"1000315" -> "1000314"  [label="DDG: c"];
"1000315" -> "1000314"  [label="DDG: c->argv[4]"];
"1000315" -> "1000314"  [label="DDG: &id"];
"1000315" -> "1000314"  [label="DDG: 0"];
"1000143" -> "1000315"  [label="DDG: c"];
"1000106" -> "1000315"  [label="DDG: c"];
"1000315" -> "1000333"  [label="DDG: c"];
"1000143" -> "1000141"  [label="AST: "];
"1000143" -> "1000150"  [label="CFG: "];
"1000144" -> "1000143"  [label="AST: "];
"1000145" -> "1000143"  [label="AST: "];
"1000150" -> "1000143"  [label="AST: "];
"1000141" -> "1000143"  [label="CFG: "];
"1000143" -> "1000427"  [label="DDG: c"];
"1000143" -> "1000427"  [label="DDG: c->argv[2]"];
"1000143" -> "1000427"  [label="DDG: shared.nokeyerr"];
"1000143" -> "1000141"  [label="DDG: c"];
"1000143" -> "1000141"  [label="DDG: c->argv[2]"];
"1000143" -> "1000141"  [label="DDG: shared.nokeyerr"];
"1000106" -> "1000143"  [label="DDG: c"];
"1000143" -> "1000191"  [label="DDG: c"];
"1000143" -> "1000240"  [label="DDG: c"];
"1000143" -> "1000266"  [label="DDG: c"];
"1000143" -> "1000277"  [label="DDG: c"];
"1000143" -> "1000333"  [label="DDG: c"];
"1000143" -> "1000366"  [label="DDG: c"];
"1000143" -> "1000373"  [label="DDG: c"];
"1000143" -> "1000403"  [label="DDG: c"];
"1000143" -> "1000417"  [label="DDG: c"];
"1000143" -> "1000422"  [label="DDG: c"];
"1000106" -> "1000105"  [label="AST: "];
"1000106" -> "1000427"  [label="DDG: c"];
"1000106" -> "1000191"  [label="DDG: c"];
"1000106" -> "1000240"  [label="DDG: c"];
"1000106" -> "1000266"  [label="DDG: c"];
"1000106" -> "1000277"  [label="DDG: c"];
"1000106" -> "1000333"  [label="DDG: c"];
"1000106" -> "1000366"  [label="DDG: c"];
"1000106" -> "1000373"  [label="DDG: c"];
"1000106" -> "1000403"  [label="DDG: c"];
"1000106" -> "1000417"  [label="DDG: c"];
"1000106" -> "1000422"  [label="DDG: c"];
"1000314" -> "1000313"  [label="AST: "];
"1000314" -> "1000325"  [label="CFG: "];
"1000325" -> "1000314"  [label="AST: "];
"1000327" -> "1000314"  [label="CFG: "];
"1000330" -> "1000314"  [label="CFG: "];
"1000314" -> "1000427"  [label="DDG: streamParseIDOrReply(c,c->argv[4],&id,0)"];
"1000314" -> "1000427"  [label="DDG: C_OK"];
"1000314" -> "1000427"  [label="DDG: streamParseIDOrReply(c,c->argv[4],&id,0) != C_OK"];
"1000333" -> "1000293"  [label="AST: "];
"1000333" -> "1000335"  [label="CFG: "];
"1000334" -> "1000333"  [label="AST: "];
"1000335" -> "1000333"  [label="AST: "];
"1000427" -> "1000333"  [label="CFG: "];
"1000333" -> "1000427"  [label="DDG: c"];
"1000333" -> "1000427"  [label="DDG: addReply(c,shared.ok)"];
"1000333" -> "1000427"  [label="DDG: shared.ok"];
}
