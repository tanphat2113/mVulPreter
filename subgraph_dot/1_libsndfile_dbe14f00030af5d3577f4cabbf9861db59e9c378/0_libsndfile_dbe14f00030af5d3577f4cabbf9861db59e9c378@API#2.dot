digraph "0_libsndfile_dbe14f00030af5d3577f4cabbf9861db59e9c378@API" {
"1000156" [label="(Call,rsrc.need_to_free_rsrc_data = SF_TRUE)"];
"1000113" [label="(Call,psf_use_rsrc (psf, SF_TRUE))"];
"1000104" [label="(MethodParameterIn,SF_PRIVATE *psf)"];
"1000160" [label="(Identifier,SF_TRUE)"];
"1000104" [label="(MethodParameterIn,SF_PRIVATE *psf)"];
"1000349" [label="(Call,psf_log_printf (psf, \"Error : rsrc.data_length > len\n\"))"];
"1000126" [label="(Call,psf_get_filelen (psf))"];
"1000157" [label="(Call,rsrc.need_to_free_rsrc_data)"];
"1000610" [label="(Call,psf_use_rsrc (psf, SF_FALSE))"];
"1000114" [label="(Identifier,psf)"];
"1000113" [label="(Call,psf_use_rsrc (psf, SF_TRUE))"];
"1000415" [label="(Call,psf_log_printf (psf, \"Bad map offset (%d + 28 > %d).\n\", rsrc.map_offset, rsrc.rsrc_len))"];
"1000177" [label="(Identifier,rsrc)"];
"1000623" [label="(MethodReturn,RET)"];
"1000146" [label="(Block,)"];
"1000105" [label="(Block,)"];
"1000115" [label="(Identifier,SF_TRUE)"];
"1000365" [label="(Call,psf_log_printf (psf, \"Error : rsrc.map_length > len\n\"))"];
"1000175" [label="(Call,psf_fread (rsrc.rsrc_data, rsrc.rsrc_len, 1, psf))"];
"1000598" [label="(Call,parse_str_rsrc (psf, &rsrc))"];
"1000528" [label="(Call,psf_log_printf (psf, \"Bad item offset (%d).\n\", rsrc.item_offset))"];
"1000118" [label="(Identifier,rsrc)"];
"1000603" [label="(Call,psf_log_printf (psf, \"No 'STR ' resource.\n\"))"];
"1000156" [label="(Call,rsrc.need_to_free_rsrc_data = SF_TRUE)"];
"1000397" [label="(Call,psf_log_printf (psf, \"Error : This does not look like a MacOSX resource fork.\n\"))"];
"1000493" [label="(Call,psf_log_printf (psf, \"Bad type count.\n\"))"];
"1000311" [label="(Call,psf_log_printf (psf, \"Error : rsrc.data_offset (%d, 0x%x) > len\n\", rsrc.data_offset, rsrc.data_offset))"];
"1000240" [label="(Call,psf_log_printf (psf, \"Trying offset of 0x52 bytes.\n\"))"];
"1000287" [label="(Call,psf_log_printf (psf, \"  data offset : 0x%04X\n  map  offset : 0x%04X\n\"\n\t\t\t\t\"  data length : 0x%04X\n  map  length : 0x%04X\n\",\n\t\t\t\trsrc.data_offset, rsrc.map_offset, rsrc.data_length, rsrc.map_length))"];
"1000128" [label="(Call,psf_log_printf (psf, \"Resource length : %d (0x%04X)\n\", rsrc.rsrc_len, rsrc.rsrc_len))"];
"1000333" [label="(Call,psf_log_printf (psf, \"Error : rsrc.map_offset > len\n\"))"];
"1000453" [label="(Call,psf_log_printf (psf, \"Bad string offset (%d).\n\", rsrc.string_offset))"];
"1000156" -> "1000146"  [label="AST: "];
"1000156" -> "1000160"  [label="CFG: "];
"1000157" -> "1000156"  [label="AST: "];
"1000160" -> "1000156"  [label="AST: "];
"1000177" -> "1000156"  [label="CFG: "];
"1000156" -> "1000623"  [label="DDG: rsrc.need_to_free_rsrc_data"];
"1000156" -> "1000623"  [label="DDG: SF_TRUE"];
"1000113" -> "1000156"  [label="DDG: SF_TRUE"];
"1000113" -> "1000105"  [label="AST: "];
"1000113" -> "1000115"  [label="CFG: "];
"1000114" -> "1000113"  [label="AST: "];
"1000115" -> "1000113"  [label="AST: "];
"1000118" -> "1000113"  [label="CFG: "];
"1000113" -> "1000623"  [label="DDG: SF_TRUE"];
"1000113" -> "1000623"  [label="DDG: psf_use_rsrc (psf, SF_TRUE)"];
"1000104" -> "1000113"  [label="DDG: psf"];
"1000113" -> "1000126"  [label="DDG: psf"];
"1000104" -> "1000103"  [label="AST: "];
"1000104" -> "1000623"  [label="DDG: psf"];
"1000104" -> "1000126"  [label="DDG: psf"];
"1000104" -> "1000128"  [label="DDG: psf"];
"1000104" -> "1000175"  [label="DDG: psf"];
"1000104" -> "1000240"  [label="DDG: psf"];
"1000104" -> "1000287"  [label="DDG: psf"];
"1000104" -> "1000311"  [label="DDG: psf"];
"1000104" -> "1000333"  [label="DDG: psf"];
"1000104" -> "1000349"  [label="DDG: psf"];
"1000104" -> "1000365"  [label="DDG: psf"];
"1000104" -> "1000397"  [label="DDG: psf"];
"1000104" -> "1000415"  [label="DDG: psf"];
"1000104" -> "1000453"  [label="DDG: psf"];
"1000104" -> "1000493"  [label="DDG: psf"];
"1000104" -> "1000528"  [label="DDG: psf"];
"1000104" -> "1000598"  [label="DDG: psf"];
"1000104" -> "1000603"  [label="DDG: psf"];
"1000104" -> "1000610"  [label="DDG: psf"];
}
