digraph "0_Android_c677ee92595335233eb0e7b59809a1a94e7a678a_0@pointer" {
"1000252" [label="(Call,!p_cb->pairing_disabled)"];
"1000251" [label="(Call,!p_cb->pairing_disabled && (p_cb->cfg.pin_type == HCI_PIN_TYPE_FIXED))"];
"1000341" [label="(Call,p_cb->pairing_disabled\n || (p_cb->api.p_pin_callback == NULL)\n\n /* OR Microsoft keyboard can for some reason try to establish connection */\n /*  the only thing we can do here is to shut it up.  Normally we will be originator */\n /*  for keyboard bonding */\n || (!p_dev_rec->is_originator\n && ((p_dev_rec->dev_class[1] & BTM_COD_MAJOR_CLASS_MASK) == BTM_COD_MAJOR_PERIPHERAL)\n && (p_dev_rec->dev_class[2] & BTM_COD_MINOR_KEYBOARD)))"];
"1000376" [label="(Call,BTM_TRACE_WARNING(\"btm_sec_pin_code_request(): Pairing disabled:%d; PIN callback:%x, Dev Rec:%x!\",\n                           p_cb->pairing_disabled, p_cb->api.p_pin_callback, p_dev_rec))"];
"1000285" [label="(Identifier,p_bda)"];
"1000388" [label="(Identifier,p_bda)"];
"1000250" [label="(ControlStructure,if (!p_cb->pairing_disabled && (p_cb->cfg.pin_type == HCI_PIN_TYPE_FIXED)))"];
"1000490" [label="(MethodReturn,void)"];
"1000345" [label="(Call,(p_cb->api.p_pin_callback == NULL)\n\n /* OR Microsoft keyboard can for some reason try to establish connection */\n /*  the only thing we can do here is to shut it up.  Normally we will be originator */\n /*  for keyboard bonding */\n || (!p_dev_rec->is_originator\n && ((p_dev_rec->dev_class[1] & BTM_COD_MAJOR_CLASS_MASK) == BTM_COD_MAJOR_PERIPHERAL)\n && (p_dev_rec->dev_class[2] & BTM_COD_MINOR_KEYBOARD)))"];
"1000252" [label="(Call,!p_cb->pairing_disabled)"];
"1000256" [label="(Call,p_cb->cfg.pin_type == HCI_PIN_TYPE_FIXED)"];
"1000386" [label="(Identifier,p_dev_rec)"];
"1000381" [label="(Call,p_cb->api.p_pin_callback)"];
"1000251" [label="(Call,!p_cb->pairing_disabled && (p_cb->cfg.pin_type == HCI_PIN_TYPE_FIXED))"];
"1000340" [label="(ControlStructure,if (p_cb->pairing_disabled\n || (p_cb->api.p_pin_callback == NULL)\n\n /* OR Microsoft keyboard can for some reason try to establish connection */\n /*  the only thing we can do here is to shut it up.  Normally we will be originator */\n /*  for keyboard bonding */\n || (!p_dev_rec->is_originator\n && ((p_dev_rec->dev_class[1] & BTM_COD_MAJOR_CLASS_MASK) == BTM_COD_MAJOR_PERIPHERAL)\n && (p_dev_rec->dev_class[2] & BTM_COD_MINOR_KEYBOARD)) ))"];
"1000219" [label="(Call,p_dev_rec = btm_find_or_alloc_dev (p_bda))"];
"1000346" [label="(Call,p_cb->api.p_pin_callback == NULL)"];
"1000376" [label="(Call,BTM_TRACE_WARNING(\"btm_sec_pin_code_request(): Pairing disabled:%d; PIN callback:%x, Dev Rec:%x!\",\n                           p_cb->pairing_disabled, p_cb->api.p_pin_callback, p_dev_rec))"];
"1000375" [label="(Block,)"];
"1000341" [label="(Call,p_cb->pairing_disabled\n || (p_cb->api.p_pin_callback == NULL)\n\n /* OR Microsoft keyboard can for some reason try to establish connection */\n /*  the only thing we can do here is to shut it up.  Normally we will be originator */\n /*  for keyboard bonding */\n || (!p_dev_rec->is_originator\n && ((p_dev_rec->dev_class[1] & BTM_COD_MAJOR_CLASS_MASK) == BTM_COD_MAJOR_PERIPHERAL)\n && (p_dev_rec->dev_class[2] & BTM_COD_MINOR_KEYBOARD)))"];
"1000265" [label="(Literal,\"btm_sec_pin_code_request fixed pin replying\")"];
"1000377" [label="(Literal,\"btm_sec_pin_code_request(): Pairing disabled:%d; PIN callback:%x, Dev Rec:%x!\")"];
"1000253" [label="(Call,p_cb->pairing_disabled)"];
"1000259" [label="(Identifier,p_cb)"];
"1000378" [label="(Call,p_cb->pairing_disabled)"];
"1000342" [label="(Call,p_cb->pairing_disabled)"];
"1000392" [label="(Identifier,BTM_PAIR_STATE_WAIT_LOCAL_PIN)"];
"1000252" -> "1000251"  [label="AST: "];
"1000252" -> "1000253"  [label="CFG: "];
"1000253" -> "1000252"  [label="AST: "];
"1000259" -> "1000252"  [label="CFG: "];
"1000251" -> "1000252"  [label="CFG: "];
"1000252" -> "1000490"  [label="DDG: "];
"1000252" -> "1000251"  [label="DDG: "];
"1000252" -> "1000341"  [label="DDG: "];
"1000251" -> "1000250"  [label="AST: "];
"1000251" -> "1000256"  [label="CFG: "];
"1000256" -> "1000251"  [label="AST: "];
"1000265" -> "1000251"  [label="CFG: "];
"1000285" -> "1000251"  [label="CFG: "];
"1000251" -> "1000490"  [label="DDG: "];
"1000251" -> "1000490"  [label="DDG: "];
"1000251" -> "1000490"  [label="DDG: "];
"1000256" -> "1000251"  [label="DDG: "];
"1000256" -> "1000251"  [label="DDG: "];
"1000341" -> "1000340"  [label="AST: "];
"1000341" -> "1000342"  [label="CFG: "];
"1000341" -> "1000345"  [label="CFG: "];
"1000342" -> "1000341"  [label="AST: "];
"1000345" -> "1000341"  [label="AST: "];
"1000377" -> "1000341"  [label="CFG: "];
"1000392" -> "1000341"  [label="CFG: "];
"1000341" -> "1000490"  [label="DDG: "];
"1000341" -> "1000490"  [label="DDG: "];
"1000341" -> "1000490"  [label="DDG: "];
"1000345" -> "1000341"  [label="DDG: "];
"1000345" -> "1000341"  [label="DDG: "];
"1000341" -> "1000376"  [label="DDG: "];
"1000376" -> "1000375"  [label="AST: "];
"1000376" -> "1000386"  [label="CFG: "];
"1000377" -> "1000376"  [label="AST: "];
"1000378" -> "1000376"  [label="AST: "];
"1000381" -> "1000376"  [label="AST: "];
"1000386" -> "1000376"  [label="AST: "];
"1000388" -> "1000376"  [label="CFG: "];
"1000376" -> "1000490"  [label="DDG: "];
"1000376" -> "1000490"  [label="DDG: "];
"1000376" -> "1000490"  [label="DDG: "];
"1000376" -> "1000490"  [label="DDG: "];
"1000346" -> "1000376"  [label="DDG: "];
"1000219" -> "1000376"  [label="DDG: "];
}
