digraph "0_Chrome_03c2e97746a2c471ae136b0c669f8d0c033fe168@pointer" {
"1000120" [label="(Call,StatisticsRecorder::RegisterOrDeleteDuplicateRanges(created_ranges))"];
"1000114" [label="(Call,* created_ranges = CreateRanges())"];
"1000118" [label="(Call,* registered_ranges =\n        StatisticsRecorder::RegisterOrDeleteDuplicateRanges(created_ranges))"];
"1000156" [label="(Call,allocator->AllocateHistogram(\n          histogram_type_,\n          name_,\n          minimum_,\n          maximum_,\n          registered_ranges,\n          flags_,\n          &histogram_ref))"];
"1000154" [label="(Call,tentative_histogram = allocator->AllocateHistogram(\n          histogram_type_,\n          name_,\n          minimum_,\n          maximum_,\n          registered_ranges,\n          flags_,\n          &histogram_ref))"];
"1000166" [label="(Call,!tentative_histogram)"];
"1000175" [label="(Call,flags_ &= ~HistogramBase::kIsPersistent)"];
"1000182" [label="(Call,tentative_histogram->SetFlags(flags_))"];
"1000180" [label="(Call,HeapAlloc(registered_ranges))"];
"1000178" [label="(Call,tentative_histogram = HeapAlloc(registered_ranges))"];
"1000213" [label="(Call,DCHECK_EQ(histogram_type_, histogram->GetHistogramType()))"];
"1000212" [label="(Call,DCHECK_EQ(histogram_type_, histogram->GetHistogramType()) << name_)"];
"1000233" [label="(Call,name_ << \" has bad construction arguments\")"];
"1000231" [label="(Call,\"Histogram \" << name_ << \" has bad construction arguments\")"];
"1000228" [label="(Call,DLOG(ERROR) << \"Histogram \" << name_ << \" has bad construction arguments\")"];
"1000223" [label="(Call,histogram->HasConstructionArguments(minimum_, maximum_, bucket_count_))"];
"1000222" [label="(Call,!histogram->HasConstructionArguments(minimum_, maximum_, bucket_count_))"];
"1000218" [label="(Call,bucket_count_ != 0 &&\n       !histogram->HasConstructionArguments(minimum_, maximum_, bucket_count_))"];
"1000180" [label="(Call,HeapAlloc(registered_ranges))"];
"1000157" [label="(Identifier,histogram_type_)"];
"1000114" [label="(Call,* created_ranges = CreateRanges())"];
"1000232" [label="(Literal,\"Histogram \")"];
"1000160" [label="(Identifier,maximum_)"];
"1000166" [label="(Call,!tentative_histogram)"];
"1000136" [label="(Call,maximum_ = registered_ranges->range(bucket_count_ - 1))"];
"1000179" [label="(Identifier,tentative_histogram)"];
"1000213" [label="(Call,DCHECK_EQ(histogram_type_, histogram->GetHistogramType()))"];
"1000167" [label="(Identifier,tentative_histogram)"];
"1000214" [label="(Identifier,histogram_type_)"];
"1000227" [label="(Block,)"];
"1000228" [label="(Call,DLOG(ERROR) << \"Histogram \" << name_ << \" has bad construction arguments\")"];
"1000226" [label="(Identifier,bucket_count_)"];
"1000224" [label="(Identifier,minimum_)"];
"1000217" [label="(ControlStructure,if (bucket_count_ != 0 &&\n       !histogram->HasConstructionArguments(minimum_, maximum_, bucket_count_)))"];
"1000219" [label="(Call,bucket_count_ != 0)"];
"1000239" [label="(Identifier,histogram)"];
"1000216" [label="(Identifier,name_)"];
"1000107" [label="(Call,StatisticsRecorder::FindHistogram(name_))"];
"1000165" [label="(ControlStructure,if (!tentative_histogram))"];
"1000229" [label="(Call,DLOG(ERROR))"];
"1000116" [label="(Call,CreateRanges())"];
"1000178" [label="(Call,tentative_histogram = HeapAlloc(registered_ranges))"];
"1000240" [label="(MethodReturn,HistogramBase*)"];
"1000161" [label="(Identifier,registered_ranges)"];
"1000230" [label="(Identifier,ERROR)"];
"1000215" [label="(Call,histogram->GetHistogramType())"];
"1000132" [label="(Call,minimum_ = registered_ranges->range(1))"];
"1000120" [label="(Call,StatisticsRecorder::RegisterOrDeleteDuplicateRanges(created_ranges))"];
"1000177" [label="(Identifier,~HistogramBase::kIsPersistent)"];
"1000181" [label="(Identifier,registered_ranges)"];
"1000115" [label="(Identifier,created_ranges)"];
"1000212" [label="(Call,DCHECK_EQ(histogram_type_, histogram->GetHistogramType()) << name_)"];
"1000234" [label="(Identifier,name_)"];
"1000225" [label="(Identifier,maximum_)"];
"1000235" [label="(Literal,\" has bad construction arguments\")"];
"1000124" [label="(Identifier,bucket_count_)"];
"1000220" [label="(Identifier,bucket_count_)"];
"1000163" [label="(Call,&histogram_ref)"];
"1000231" [label="(Call,\"Histogram \" << name_ << \" has bad construction arguments\")"];
"1000112" [label="(Block,)"];
"1000159" [label="(Identifier,minimum_)"];
"1000103" [label="(Block,)"];
"1000237" [label="(Identifier,nullptr)"];
"1000156" [label="(Call,allocator->AllocateHistogram(\n          histogram_type_,\n          name_,\n          minimum_,\n          maximum_,\n          registered_ranges,\n          flags_,\n          &histogram_ref))"];
"1000185" [label="(Call,tentative_histogram.get())"];
"1000175" [label="(Call,flags_ &= ~HistogramBase::kIsPersistent)"];
"1000176" [label="(Identifier,flags_)"];
"1000118" [label="(Call,* registered_ranges =\n        StatisticsRecorder::RegisterOrDeleteDuplicateRanges(created_ranges))"];
"1000158" [label="(Identifier,name_)"];
"1000222" [label="(Call,!histogram->HasConstructionArguments(minimum_, maximum_, bucket_count_))"];
"1000182" [label="(Call,tentative_histogram->SetFlags(flags_))"];
"1000153" [label="(Block,)"];
"1000121" [label="(Identifier,created_ranges)"];
"1000119" [label="(Identifier,registered_ranges)"];
"1000171" [label="(Identifier,histogram_ref)"];
"1000168" [label="(Block,)"];
"1000223" [label="(Call,histogram->HasConstructionArguments(minimum_, maximum_, bucket_count_))"];
"1000155" [label="(Identifier,tentative_histogram)"];
"1000162" [label="(Identifier,flags_)"];
"1000183" [label="(Identifier,flags_)"];
"1000218" [label="(Call,bucket_count_ != 0 &&\n       !histogram->HasConstructionArguments(minimum_, maximum_, bucket_count_))"];
"1000154" [label="(Call,tentative_histogram = allocator->AllocateHistogram(\n          histogram_type_,\n          name_,\n          minimum_,\n          maximum_,\n          registered_ranges,\n          flags_,\n          &histogram_ref))"];
"1000233" [label="(Call,name_ << \" has bad construction arguments\")"];
"1000120" -> "1000118"  [label="AST: "];
"1000120" -> "1000121"  [label="CFG: "];
"1000121" -> "1000120"  [label="AST: "];
"1000118" -> "1000120"  [label="CFG: "];
"1000120" -> "1000240"  [label="DDG: "];
"1000120" -> "1000118"  [label="DDG: "];
"1000114" -> "1000120"  [label="DDG: "];
"1000114" -> "1000112"  [label="AST: "];
"1000114" -> "1000116"  [label="CFG: "];
"1000115" -> "1000114"  [label="AST: "];
"1000116" -> "1000114"  [label="AST: "];
"1000119" -> "1000114"  [label="CFG: "];
"1000114" -> "1000240"  [label="DDG: "];
"1000118" -> "1000112"  [label="AST: "];
"1000119" -> "1000118"  [label="AST: "];
"1000124" -> "1000118"  [label="CFG: "];
"1000118" -> "1000240"  [label="DDG: "];
"1000118" -> "1000240"  [label="DDG: "];
"1000118" -> "1000156"  [label="DDG: "];
"1000118" -> "1000180"  [label="DDG: "];
"1000156" -> "1000154"  [label="AST: "];
"1000156" -> "1000163"  [label="CFG: "];
"1000157" -> "1000156"  [label="AST: "];
"1000158" -> "1000156"  [label="AST: "];
"1000159" -> "1000156"  [label="AST: "];
"1000160" -> "1000156"  [label="AST: "];
"1000161" -> "1000156"  [label="AST: "];
"1000162" -> "1000156"  [label="AST: "];
"1000163" -> "1000156"  [label="AST: "];
"1000154" -> "1000156"  [label="CFG: "];
"1000156" -> "1000240"  [label="DDG: "];
"1000156" -> "1000240"  [label="DDG: "];
"1000156" -> "1000240"  [label="DDG: "];
"1000156" -> "1000240"  [label="DDG: "];
"1000156" -> "1000240"  [label="DDG: "];
"1000156" -> "1000154"  [label="DDG: "];
"1000156" -> "1000154"  [label="DDG: "];
"1000156" -> "1000154"  [label="DDG: "];
"1000156" -> "1000154"  [label="DDG: "];
"1000156" -> "1000154"  [label="DDG: "];
"1000156" -> "1000154"  [label="DDG: "];
"1000156" -> "1000154"  [label="DDG: "];
"1000107" -> "1000156"  [label="DDG: "];
"1000132" -> "1000156"  [label="DDG: "];
"1000136" -> "1000156"  [label="DDG: "];
"1000156" -> "1000175"  [label="DDG: "];
"1000156" -> "1000180"  [label="DDG: "];
"1000156" -> "1000213"  [label="DDG: "];
"1000156" -> "1000212"  [label="DDG: "];
"1000156" -> "1000223"  [label="DDG: "];
"1000156" -> "1000223"  [label="DDG: "];
"1000154" -> "1000153"  [label="AST: "];
"1000155" -> "1000154"  [label="AST: "];
"1000167" -> "1000154"  [label="CFG: "];
"1000154" -> "1000240"  [label="DDG: "];
"1000154" -> "1000166"  [label="DDG: "];
"1000166" -> "1000165"  [label="AST: "];
"1000166" -> "1000167"  [label="CFG: "];
"1000167" -> "1000166"  [label="AST: "];
"1000171" -> "1000166"  [label="CFG: "];
"1000185" -> "1000166"  [label="CFG: "];
"1000166" -> "1000240"  [label="DDG: "];
"1000166" -> "1000240"  [label="DDG: "];
"1000175" -> "1000168"  [label="AST: "];
"1000175" -> "1000177"  [label="CFG: "];
"1000176" -> "1000175"  [label="AST: "];
"1000177" -> "1000175"  [label="AST: "];
"1000179" -> "1000175"  [label="CFG: "];
"1000175" -> "1000240"  [label="DDG: "];
"1000175" -> "1000240"  [label="DDG: "];
"1000175" -> "1000182"  [label="DDG: "];
"1000182" -> "1000168"  [label="AST: "];
"1000182" -> "1000183"  [label="CFG: "];
"1000183" -> "1000182"  [label="AST: "];
"1000185" -> "1000182"  [label="CFG: "];
"1000182" -> "1000240"  [label="DDG: "];
"1000182" -> "1000240"  [label="DDG: "];
"1000180" -> "1000178"  [label="AST: "];
"1000180" -> "1000181"  [label="CFG: "];
"1000181" -> "1000180"  [label="AST: "];
"1000178" -> "1000180"  [label="CFG: "];
"1000180" -> "1000240"  [label="DDG: "];
"1000180" -> "1000178"  [label="DDG: "];
"1000178" -> "1000168"  [label="AST: "];
"1000179" -> "1000178"  [label="AST: "];
"1000183" -> "1000178"  [label="CFG: "];
"1000178" -> "1000240"  [label="DDG: "];
"1000178" -> "1000240"  [label="DDG: "];
"1000213" -> "1000212"  [label="AST: "];
"1000213" -> "1000215"  [label="CFG: "];
"1000214" -> "1000213"  [label="AST: "];
"1000215" -> "1000213"  [label="AST: "];
"1000216" -> "1000213"  [label="CFG: "];
"1000213" -> "1000240"  [label="DDG: "];
"1000213" -> "1000240"  [label="DDG: "];
"1000213" -> "1000212"  [label="DDG: "];
"1000213" -> "1000212"  [label="DDG: "];
"1000212" -> "1000103"  [label="AST: "];
"1000212" -> "1000216"  [label="CFG: "];
"1000216" -> "1000212"  [label="AST: "];
"1000220" -> "1000212"  [label="CFG: "];
"1000212" -> "1000240"  [label="DDG: "];
"1000212" -> "1000240"  [label="DDG: "];
"1000212" -> "1000240"  [label="DDG: "];
"1000107" -> "1000212"  [label="DDG: "];
"1000212" -> "1000233"  [label="DDG: "];
"1000233" -> "1000231"  [label="AST: "];
"1000233" -> "1000235"  [label="CFG: "];
"1000234" -> "1000233"  [label="AST: "];
"1000235" -> "1000233"  [label="AST: "];
"1000231" -> "1000233"  [label="CFG: "];
"1000233" -> "1000240"  [label="DDG: "];
"1000233" -> "1000231"  [label="DDG: "];
"1000233" -> "1000231"  [label="DDG: "];
"1000231" -> "1000228"  [label="AST: "];
"1000232" -> "1000231"  [label="AST: "];
"1000228" -> "1000231"  [label="CFG: "];
"1000231" -> "1000240"  [label="DDG: "];
"1000231" -> "1000228"  [label="DDG: "];
"1000231" -> "1000228"  [label="DDG: "];
"1000228" -> "1000227"  [label="AST: "];
"1000229" -> "1000228"  [label="AST: "];
"1000237" -> "1000228"  [label="CFG: "];
"1000228" -> "1000240"  [label="DDG: "];
"1000228" -> "1000240"  [label="DDG: "];
"1000228" -> "1000240"  [label="DDG: "];
"1000229" -> "1000228"  [label="DDG: "];
"1000223" -> "1000222"  [label="AST: "];
"1000223" -> "1000226"  [label="CFG: "];
"1000224" -> "1000223"  [label="AST: "];
"1000225" -> "1000223"  [label="AST: "];
"1000226" -> "1000223"  [label="AST: "];
"1000222" -> "1000223"  [label="CFG: "];
"1000223" -> "1000240"  [label="DDG: "];
"1000223" -> "1000240"  [label="DDG: "];
"1000223" -> "1000240"  [label="DDG: "];
"1000223" -> "1000222"  [label="DDG: "];
"1000223" -> "1000222"  [label="DDG: "];
"1000223" -> "1000222"  [label="DDG: "];
"1000132" -> "1000223"  [label="DDG: "];
"1000136" -> "1000223"  [label="DDG: "];
"1000219" -> "1000223"  [label="DDG: "];
"1000222" -> "1000218"  [label="AST: "];
"1000218" -> "1000222"  [label="CFG: "];
"1000222" -> "1000240"  [label="DDG: "];
"1000222" -> "1000218"  [label="DDG: "];
"1000218" -> "1000217"  [label="AST: "];
"1000218" -> "1000219"  [label="CFG: "];
"1000219" -> "1000218"  [label="AST: "];
"1000230" -> "1000218"  [label="CFG: "];
"1000239" -> "1000218"  [label="CFG: "];
"1000218" -> "1000240"  [label="DDG: "];
"1000218" -> "1000240"  [label="DDG: "];
"1000218" -> "1000240"  [label="DDG: "];
"1000219" -> "1000218"  [label="DDG: "];
"1000219" -> "1000218"  [label="DDG: "];
}
