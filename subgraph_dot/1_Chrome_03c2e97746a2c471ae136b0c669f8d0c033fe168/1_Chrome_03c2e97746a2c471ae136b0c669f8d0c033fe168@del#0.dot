digraph "1_Chrome_03c2e97746a2c471ae136b0c669f8d0c033fe168@del" {
"1000213" [label="(Call,DCHECK_EQ(histogram_type_, histogram->GetHistogramType()))"];
"1000156" [label="(Call,allocator->AllocateHistogram(\n          histogram_type_,\n          name_,\n          minimum_,\n          maximum_,\n          registered_ranges,\n          flags_,\n          &histogram_ref))"];
"1000107" [label="(Call,StatisticsRecorder::FindHistogram(name_))"];
"1000132" [label="(Call,minimum_ = registered_ranges->range(1))"];
"1000134" [label="(Call,registered_ranges->range(1))"];
"1000136" [label="(Call,maximum_ = registered_ranges->range(bucket_count_ - 1))"];
"1000138" [label="(Call,registered_ranges->range(bucket_count_ - 1))"];
"1000139" [label="(Call,bucket_count_ - 1)"];
"1000127" [label="(Call,bucket_count_ = static_cast<uint32_t>(registered_ranges->bucket_count()))"];
"1000129" [label="(Call,static_cast<uint32_t>(registered_ranges->bucket_count()))"];
"1000118" [label="(Call,* registered_ranges =\n        StatisticsRecorder::RegisterOrDeleteDuplicateRanges(created_ranges))"];
"1000120" [label="(Call,StatisticsRecorder::RegisterOrDeleteDuplicateRanges(created_ranges))"];
"1000114" [label="(Call,* created_ranges = CreateRanges())"];
"1000212" [label="(Call,DCHECK_EQ(histogram_type_, histogram->GetHistogramType()) << name_)"];
"1000233" [label="(Call,name_ << \" has bad construction arguments\")"];
"1000231" [label="(Call,\"Histogram \" << name_ << \" has bad construction arguments\")"];
"1000228" [label="(Call,DLOG(ERROR) << \"Histogram \" << name_ << \" has bad construction arguments\")"];
"1000229" [label="(Call,DLOG(ERROR))"];
"1000215" [label="(Call,histogram->GetHistogramType())"];
"1000131" [label="(Call,registered_ranges->bucket_count())"];
"1000112" [label="(Block,)"];
"1000115" [label="(Identifier,created_ranges)"];
"1000213" [label="(Call,DCHECK_EQ(histogram_type_, histogram->GetHistogramType()))"];
"1000235" [label="(Literal,\" has bad construction arguments\")"];
"1000163" [label="(Call,&histogram_ref)"];
"1000120" [label="(Call,StatisticsRecorder::RegisterOrDeleteDuplicateRanges(created_ranges))"];
"1000219" [label="(Call,bucket_count_ != 0)"];
"1000128" [label="(Identifier,bucket_count_)"];
"1000121" [label="(Identifier,created_ranges)"];
"1000162" [label="(Identifier,flags_)"];
"1000107" [label="(Call,StatisticsRecorder::FindHistogram(name_))"];
"1000132" [label="(Call,minimum_ = registered_ranges->range(1))"];
"1000138" [label="(Call,registered_ranges->range(bucket_count_ - 1))"];
"1000129" [label="(Call,static_cast<uint32_t>(registered_ranges->bucket_count()))"];
"1000227" [label="(Block,)"];
"1000223" [label="(Call,histogram->HasConstructionArguments(minimum_, maximum_, bucket_count_))"];
"1000231" [label="(Call,\"Histogram \" << name_ << \" has bad construction arguments\")"];
"1000214" [label="(Identifier,histogram_type_)"];
"1000175" [label="(Call,flags_ &= ~HistogramBase::kIsPersistent)"];
"1000144" [label="(Identifier,histogram_ref)"];
"1000119" [label="(Identifier,registered_ranges)"];
"1000160" [label="(Identifier,maximum_)"];
"1000124" [label="(Identifier,bucket_count_)"];
"1000114" [label="(Call,* created_ranges = CreateRanges())"];
"1000140" [label="(Identifier,bucket_count_)"];
"1000108" [label="(Identifier,name_)"];
"1000134" [label="(Call,registered_ranges->range(1))"];
"1000136" [label="(Call,maximum_ = registered_ranges->range(bucket_count_ - 1))"];
"1000161" [label="(Identifier,registered_ranges)"];
"1000156" [label="(Call,allocator->AllocateHistogram(\n          histogram_type_,\n          name_,\n          minimum_,\n          maximum_,\n          registered_ranges,\n          flags_,\n          &histogram_ref))"];
"1000240" [label="(MethodReturn,HistogramBase*)"];
"1000137" [label="(Identifier,maximum_)"];
"1000232" [label="(Literal,\"Histogram \")"];
"1000116" [label="(Call,CreateRanges())"];
"1000141" [label="(Literal,1)"];
"1000103" [label="(Block,)"];
"1000212" [label="(Call,DCHECK_EQ(histogram_type_, histogram->GetHistogramType()) << name_)"];
"1000154" [label="(Call,tentative_histogram = allocator->AllocateHistogram(\n          histogram_type_,\n          name_,\n          minimum_,\n          maximum_,\n          registered_ranges,\n          flags_,\n          &histogram_ref))"];
"1000180" [label="(Call,HeapAlloc(registered_ranges))"];
"1000237" [label="(Identifier,nullptr)"];
"1000133" [label="(Identifier,minimum_)"];
"1000118" [label="(Call,* registered_ranges =\n        StatisticsRecorder::RegisterOrDeleteDuplicateRanges(created_ranges))"];
"1000105" [label="(Call,* histogram = StatisticsRecorder::FindHistogram(name_))"];
"1000127" [label="(Call,bucket_count_ = static_cast<uint32_t>(registered_ranges->bucket_count()))"];
"1000139" [label="(Call,bucket_count_ - 1)"];
"1000135" [label="(Literal,1)"];
"1000126" [label="(Block,)"];
"1000228" [label="(Call,DLOG(ERROR) << \"Histogram \" << name_ << \" has bad construction arguments\")"];
"1000159" [label="(Identifier,minimum_)"];
"1000157" [label="(Identifier,histogram_type_)"];
"1000158" [label="(Identifier,name_)"];
"1000216" [label="(Identifier,name_)"];
"1000233" [label="(Call,name_ << \" has bad construction arguments\")"];
"1000220" [label="(Identifier,bucket_count_)"];
"1000234" [label="(Identifier,name_)"];
"1000213" -> "1000212"  [label="AST: "];
"1000213" -> "1000215"  [label="CFG: "];
"1000214" -> "1000213"  [label="AST: "];
"1000215" -> "1000213"  [label="AST: "];
"1000216" -> "1000213"  [label="CFG: "];
"1000213" -> "1000240"  [label="DDG: "];
"1000213" -> "1000240"  [label="DDG: "];
"1000213" -> "1000212"  [label="DDG: "];
"1000213" -> "1000212"  [label="DDG: "];
"1000156" -> "1000213"  [label="DDG: "];
"1000156" -> "1000154"  [label="AST: "];
"1000156" -> "1000163"  [label="CFG: "];
"1000157" -> "1000156"  [label="AST: "];
"1000158" -> "1000156"  [label="AST: "];
"1000159" -> "1000156"  [label="AST: "];
"1000160" -> "1000156"  [label="AST: "];
"1000161" -> "1000156"  [label="AST: "];
"1000162" -> "1000156"  [label="AST: "];
"1000163" -> "1000156"  [label="AST: "];
"1000154" -> "1000156"  [label="CFG: "];
"1000156" -> "1000240"  [label="DDG: "];
"1000156" -> "1000240"  [label="DDG: "];
"1000156" -> "1000240"  [label="DDG: "];
"1000156" -> "1000240"  [label="DDG: "];
"1000156" -> "1000240"  [label="DDG: "];
"1000156" -> "1000154"  [label="DDG: "];
"1000156" -> "1000154"  [label="DDG: "];
"1000156" -> "1000154"  [label="DDG: "];
"1000156" -> "1000154"  [label="DDG: "];
"1000156" -> "1000154"  [label="DDG: "];
"1000156" -> "1000154"  [label="DDG: "];
"1000156" -> "1000154"  [label="DDG: "];
"1000107" -> "1000156"  [label="DDG: "];
"1000132" -> "1000156"  [label="DDG: "];
"1000136" -> "1000156"  [label="DDG: "];
"1000118" -> "1000156"  [label="DDG: "];
"1000156" -> "1000175"  [label="DDG: "];
"1000156" -> "1000180"  [label="DDG: "];
"1000156" -> "1000212"  [label="DDG: "];
"1000156" -> "1000223"  [label="DDG: "];
"1000156" -> "1000223"  [label="DDG: "];
"1000107" -> "1000105"  [label="AST: "];
"1000107" -> "1000108"  [label="CFG: "];
"1000108" -> "1000107"  [label="AST: "];
"1000105" -> "1000107"  [label="CFG: "];
"1000107" -> "1000105"  [label="DDG: "];
"1000107" -> "1000212"  [label="DDG: "];
"1000132" -> "1000126"  [label="AST: "];
"1000132" -> "1000134"  [label="CFG: "];
"1000133" -> "1000132"  [label="AST: "];
"1000134" -> "1000132"  [label="AST: "];
"1000137" -> "1000132"  [label="CFG: "];
"1000132" -> "1000240"  [label="DDG: "];
"1000132" -> "1000240"  [label="DDG: "];
"1000134" -> "1000132"  [label="DDG: "];
"1000132" -> "1000223"  [label="DDG: "];
"1000134" -> "1000135"  [label="CFG: "];
"1000135" -> "1000134"  [label="AST: "];
"1000136" -> "1000126"  [label="AST: "];
"1000136" -> "1000138"  [label="CFG: "];
"1000137" -> "1000136"  [label="AST: "];
"1000138" -> "1000136"  [label="AST: "];
"1000144" -> "1000136"  [label="CFG: "];
"1000136" -> "1000240"  [label="DDG: "];
"1000136" -> "1000240"  [label="DDG: "];
"1000138" -> "1000136"  [label="DDG: "];
"1000136" -> "1000223"  [label="DDG: "];
"1000138" -> "1000139"  [label="CFG: "];
"1000139" -> "1000138"  [label="AST: "];
"1000138" -> "1000240"  [label="DDG: "];
"1000139" -> "1000138"  [label="DDG: "];
"1000139" -> "1000138"  [label="DDG: "];
"1000139" -> "1000141"  [label="CFG: "];
"1000140" -> "1000139"  [label="AST: "];
"1000141" -> "1000139"  [label="AST: "];
"1000127" -> "1000139"  [label="DDG: "];
"1000139" -> "1000219"  [label="DDG: "];
"1000127" -> "1000126"  [label="AST: "];
"1000127" -> "1000129"  [label="CFG: "];
"1000128" -> "1000127"  [label="AST: "];
"1000129" -> "1000127"  [label="AST: "];
"1000133" -> "1000127"  [label="CFG: "];
"1000127" -> "1000240"  [label="DDG: "];
"1000129" -> "1000127"  [label="DDG: "];
"1000129" -> "1000131"  [label="CFG: "];
"1000130" -> "1000129"  [label="AST: "];
"1000131" -> "1000129"  [label="AST: "];
"1000129" -> "1000240"  [label="DDG: "];
"1000118" -> "1000112"  [label="AST: "];
"1000118" -> "1000120"  [label="CFG: "];
"1000119" -> "1000118"  [label="AST: "];
"1000120" -> "1000118"  [label="AST: "];
"1000124" -> "1000118"  [label="CFG: "];
"1000118" -> "1000240"  [label="DDG: "];
"1000118" -> "1000240"  [label="DDG: "];
"1000120" -> "1000118"  [label="DDG: "];
"1000118" -> "1000180"  [label="DDG: "];
"1000120" -> "1000121"  [label="CFG: "];
"1000121" -> "1000120"  [label="AST: "];
"1000120" -> "1000240"  [label="DDG: "];
"1000114" -> "1000120"  [label="DDG: "];
"1000114" -> "1000112"  [label="AST: "];
"1000114" -> "1000116"  [label="CFG: "];
"1000115" -> "1000114"  [label="AST: "];
"1000116" -> "1000114"  [label="AST: "];
"1000119" -> "1000114"  [label="CFG: "];
"1000114" -> "1000240"  [label="DDG: "];
"1000212" -> "1000103"  [label="AST: "];
"1000212" -> "1000216"  [label="CFG: "];
"1000216" -> "1000212"  [label="AST: "];
"1000220" -> "1000212"  [label="CFG: "];
"1000212" -> "1000240"  [label="DDG: "];
"1000212" -> "1000240"  [label="DDG: "];
"1000212" -> "1000240"  [label="DDG: "];
"1000212" -> "1000233"  [label="DDG: "];
"1000233" -> "1000231"  [label="AST: "];
"1000233" -> "1000235"  [label="CFG: "];
"1000234" -> "1000233"  [label="AST: "];
"1000235" -> "1000233"  [label="AST: "];
"1000231" -> "1000233"  [label="CFG: "];
"1000233" -> "1000240"  [label="DDG: "];
"1000233" -> "1000231"  [label="DDG: "];
"1000233" -> "1000231"  [label="DDG: "];
"1000231" -> "1000228"  [label="AST: "];
"1000232" -> "1000231"  [label="AST: "];
"1000228" -> "1000231"  [label="CFG: "];
"1000231" -> "1000240"  [label="DDG: "];
"1000231" -> "1000228"  [label="DDG: "];
"1000231" -> "1000228"  [label="DDG: "];
"1000228" -> "1000227"  [label="AST: "];
"1000229" -> "1000228"  [label="AST: "];
"1000237" -> "1000228"  [label="CFG: "];
"1000228" -> "1000240"  [label="DDG: "];
"1000228" -> "1000240"  [label="DDG: "];
"1000228" -> "1000240"  [label="DDG: "];
"1000229" -> "1000228"  [label="DDG: "];
}
