digraph "0_radare2_f17bfd9f1da05f30f23a4dd05e9d2363e1406948@array" {
"1000556" [label="(Call,op->operands[0].dest_size & ALL_SIZE)"];
"1000555" [label="(Call,(op->operands[0].dest_size & ALL_SIZE) >> OPSIZE_SHIFT)"];
"1000553" [label="(Call,8 * ((op->operands[0].dest_size & ALL_SIZE) >> OPSIZE_SHIFT))"];
"1000551" [label="(Call,dest_bits = 8 * ((op->operands[0].dest_size & ALL_SIZE) >> OPSIZE_SHIFT))"];
"1000619" [label="(Call,dest_bits == 16)"];
"1000651" [label="(Call,dest_bits == 64)"];
"1000680" [label="(Call,dest_bits == 8)"];
"1001233" [label="(Call,byte < dest_bits)"];
"1001232" [label="(Call,byte < dest_bits && byte < 32)"];
"1001236" [label="(Call,byte < 32)"];
"1001248" [label="(Call,immediate >> byte)"];
"1001239" [label="(Call,byte += 8)"];
"1001243" [label="(Call,data[l++] = (immediate >> byte))"];
"1000571" [label="(Call,(op->operands[0].reg_size & ALL_SIZE) >> OPSIZE_SHIFT)"];
"1000569" [label="(Call,8 * ((op->operands[0].reg_size & ALL_SIZE) >> OPSIZE_SHIFT))"];
"1000567" [label="(Call,reg_bits = 8 * ((op->operands[0].reg_size & ALL_SIZE) >> OPSIZE_SHIFT))"];
"1000605" [label="(Call,reg_bits < a->bits)"];
"1000735" [label="(Call,reg_bits == 16)"];
"1001168" [label="(Call,reg_bits == 16)"];
"1001167" [label="(Call,reg_bits == 16 && mod == 2)"];
"1000572" [label="(Call,op->operands[0].reg_size & ALL_SIZE)"];
"1000569" [label="(Call,8 * ((op->operands[0].reg_size & ALL_SIZE) >> OPSIZE_SHIFT))"];
"1000554" [label="(Literal,8)"];
"1000690" [label="(Identifier,opcode)"];
"1000604" [label="(ControlStructure,if (reg_bits < a->bits))"];
"1000571" [label="(Call,(op->operands[0].reg_size & ALL_SIZE) >> OPSIZE_SHIFT)"];
"1000551" [label="(Call,dest_bits = 8 * ((op->operands[0].dest_size & ALL_SIZE) >> OPSIZE_SHIFT))"];
"1000506" [label="(Block,)"];
"1000656" [label="(Identifier,use_rex)"];
"1000612" [label="(Identifier,use_aso)"];
"1000736" [label="(Identifier,reg_bits)"];
"1001168" [label="(Call,reg_bits == 16)"];
"1001238" [label="(Literal,32)"];
"1001172" [label="(Identifier,mod)"];
"1000572" [label="(Call,op->operands[0].reg_size & ALL_SIZE)"];
"1000651" [label="(Call,dest_bits == 64)"];
"1001248" [label="(Call,immediate >> byte)"];
"1000104" [label="(MethodParameterIn,ut8 *data)"];
"1000564" [label="(Identifier,ALL_SIZE)"];
"1000652" [label="(Identifier,dest_bits)"];
"1001242" [label="(Block,)"];
"1001233" [label="(Call,byte < dest_bits)"];
"1000619" [label="(Call,dest_bits == 16)"];
"1000567" [label="(Call,reg_bits = 8 * ((op->operands[0].reg_size & ALL_SIZE) >> OPSIZE_SHIFT))"];
"1000653" [label="(Literal,64)"];
"1001169" [label="(Identifier,reg_bits)"];
"1001235" [label="(Identifier,dest_bits)"];
"1001240" [label="(Identifier,byte)"];
"1001166" [label="(ControlStructure,if (reg_bits == 16 && mod == 2))"];
"1000580" [label="(Identifier,ALL_SIZE)"];
"1000667" [label="(Identifier,op)"];
"1000570" [label="(Literal,8)"];
"1000628" [label="(Identifier,rip_rel)"];
"1000682" [label="(Literal,8)"];
"1001243" [label="(Call,data[l++] = (immediate >> byte))"];
"1000573" [label="(Call,op->operands[0].reg_size)"];
"1000552" [label="(Identifier,dest_bits)"];
"1001236" [label="(Call,byte < 32)"];
"1000581" [label="(Identifier,OPSIZE_SHIFT)"];
"1000966" [label="(Identifier,op)"];
"1000584" [label="(Identifier,offset)"];
"1000680" [label="(Call,dest_bits == 8)"];
"1001171" [label="(Call,mod == 2)"];
"1001245" [label="(Identifier,data)"];
"1000616" [label="(Identifier,use_oso)"];
"1001249" [label="(Identifier,immediate)"];
"1000618" [label="(ControlStructure,if (dest_bits == 16))"];
"1003220" [label="(MethodReturn,static int)"];
"1001234" [label="(Identifier,byte)"];
"1000565" [label="(Identifier,OPSIZE_SHIFT)"];
"1001229" [label="(Call,byte = 0)"];
"1001241" [label="(Literal,8)"];
"1000734" [label="(ControlStructure,if (reg_bits == 16))"];
"1001177" [label="(Identifier,data)"];
"1000557" [label="(Call,op->operands[0].dest_size)"];
"1000620" [label="(Identifier,dest_bits)"];
"1003219" [label="(Identifier,l)"];
"1000746" [label="(Identifier,op)"];
"1001193" [label="(Identifier,mod)"];
"1001237" [label="(Identifier,byte)"];
"1000605" [label="(Call,reg_bits < a->bits)"];
"1000568" [label="(Identifier,reg_bits)"];
"1000170" [label="(Call,immediate = op->operands[1].immediate * op->operands[1].sign)"];
"1001167" [label="(Call,reg_bits == 16 && mod == 2)"];
"1000556" [label="(Call,op->operands[0].dest_size & ALL_SIZE)"];
"1000681" [label="(Identifier,dest_bits)"];
"1001170" [label="(Literal,16)"];
"1000606" [label="(Identifier,reg_bits)"];
"1000679" [label="(ControlStructure,if (dest_bits == 8))"];
"1001228" [label="(ControlStructure,for (byte = 0; byte < dest_bits && byte < 32; byte += 8))"];
"1000607" [label="(Call,a->bits)"];
"1000553" [label="(Call,8 * ((op->operands[0].dest_size & ALL_SIZE) >> OPSIZE_SHIFT))"];
"1000650" [label="(ControlStructure,if (dest_bits == 64))"];
"1000735" [label="(Call,reg_bits == 16)"];
"1001239" [label="(Call,byte += 8)"];
"1000555" [label="(Call,(op->operands[0].dest_size & ALL_SIZE) >> OPSIZE_SHIFT)"];
"1000737" [label="(Literal,16)"];
"1000621" [label="(Literal,16)"];
"1000624" [label="(Identifier,use_oso)"];
"1001244" [label="(Call,data[l++])"];
"1001232" [label="(Call,byte < dest_bits && byte < 32)"];
"1000685" [label="(Identifier,opcode)"];
"1001250" [label="(Identifier,byte)"];
"1000556" -> "1000555"  [label="AST: "];
"1000556" -> "1000564"  [label="CFG: "];
"1000557" -> "1000556"  [label="AST: "];
"1000564" -> "1000556"  [label="AST: "];
"1000565" -> "1000556"  [label="CFG: "];
"1000556" -> "1003220"  [label="DDG: op->operands[0].dest_size"];
"1000556" -> "1000555"  [label="DDG: op->operands[0].dest_size"];
"1000556" -> "1000555"  [label="DDG: ALL_SIZE"];
"1000556" -> "1000572"  [label="DDG: ALL_SIZE"];
"1000555" -> "1000553"  [label="AST: "];
"1000555" -> "1000565"  [label="CFG: "];
"1000565" -> "1000555"  [label="AST: "];
"1000553" -> "1000555"  [label="CFG: "];
"1000555" -> "1003220"  [label="DDG: op->operands[0].dest_size & ALL_SIZE"];
"1000555" -> "1000553"  [label="DDG: op->operands[0].dest_size & ALL_SIZE"];
"1000555" -> "1000553"  [label="DDG: OPSIZE_SHIFT"];
"1000555" -> "1000571"  [label="DDG: OPSIZE_SHIFT"];
"1000553" -> "1000551"  [label="AST: "];
"1000554" -> "1000553"  [label="AST: "];
"1000551" -> "1000553"  [label="CFG: "];
"1000553" -> "1003220"  [label="DDG: (op->operands[0].dest_size & ALL_SIZE) >> OPSIZE_SHIFT"];
"1000553" -> "1000551"  [label="DDG: 8"];
"1000553" -> "1000551"  [label="DDG: (op->operands[0].dest_size & ALL_SIZE) >> OPSIZE_SHIFT"];
"1000551" -> "1000506"  [label="AST: "];
"1000552" -> "1000551"  [label="AST: "];
"1000568" -> "1000551"  [label="CFG: "];
"1000551" -> "1003220"  [label="DDG: 8 * ((op->operands[0].dest_size & ALL_SIZE) >> OPSIZE_SHIFT)"];
"1000551" -> "1000619"  [label="DDG: dest_bits"];
"1000619" -> "1000618"  [label="AST: "];
"1000619" -> "1000621"  [label="CFG: "];
"1000620" -> "1000619"  [label="AST: "];
"1000621" -> "1000619"  [label="AST: "];
"1000624" -> "1000619"  [label="CFG: "];
"1000628" -> "1000619"  [label="CFG: "];
"1000619" -> "1003220"  [label="DDG: dest_bits == 16"];
"1000619" -> "1000651"  [label="DDG: dest_bits"];
"1000651" -> "1000650"  [label="AST: "];
"1000651" -> "1000653"  [label="CFG: "];
"1000652" -> "1000651"  [label="AST: "];
"1000653" -> "1000651"  [label="AST: "];
"1000656" -> "1000651"  [label="CFG: "];
"1000667" -> "1000651"  [label="CFG: "];
"1000651" -> "1003220"  [label="DDG: dest_bits == 64"];
"1000651" -> "1000680"  [label="DDG: dest_bits"];
"1000680" -> "1000679"  [label="AST: "];
"1000680" -> "1000682"  [label="CFG: "];
"1000681" -> "1000680"  [label="AST: "];
"1000682" -> "1000680"  [label="AST: "];
"1000685" -> "1000680"  [label="CFG: "];
"1000690" -> "1000680"  [label="CFG: "];
"1000680" -> "1003220"  [label="DDG: dest_bits"];
"1000680" -> "1003220"  [label="DDG: dest_bits == 8"];
"1000680" -> "1001233"  [label="DDG: dest_bits"];
"1001233" -> "1001232"  [label="AST: "];
"1001233" -> "1001235"  [label="CFG: "];
"1001234" -> "1001233"  [label="AST: "];
"1001235" -> "1001233"  [label="AST: "];
"1001237" -> "1001233"  [label="CFG: "];
"1001232" -> "1001233"  [label="CFG: "];
"1001233" -> "1003220"  [label="DDG: dest_bits"];
"1001233" -> "1003220"  [label="DDG: byte"];
"1001233" -> "1001232"  [label="DDG: byte"];
"1001233" -> "1001232"  [label="DDG: dest_bits"];
"1001229" -> "1001233"  [label="DDG: byte"];
"1001239" -> "1001233"  [label="DDG: byte"];
"1001233" -> "1001236"  [label="DDG: byte"];
"1001233" -> "1001248"  [label="DDG: byte"];
"1001232" -> "1001228"  [label="AST: "];
"1001232" -> "1001236"  [label="CFG: "];
"1001236" -> "1001232"  [label="AST: "];
"1001245" -> "1001232"  [label="CFG: "];
"1003219" -> "1001232"  [label="CFG: "];
"1001232" -> "1003220"  [label="DDG: byte < dest_bits && byte < 32"];
"1001232" -> "1003220"  [label="DDG: byte < dest_bits"];
"1001232" -> "1003220"  [label="DDG: byte < 32"];
"1001236" -> "1001232"  [label="DDG: byte"];
"1001236" -> "1001232"  [label="DDG: 32"];
"1001236" -> "1001238"  [label="CFG: "];
"1001237" -> "1001236"  [label="AST: "];
"1001238" -> "1001236"  [label="AST: "];
"1001236" -> "1003220"  [label="DDG: byte"];
"1001236" -> "1001248"  [label="DDG: byte"];
"1001248" -> "1001243"  [label="AST: "];
"1001248" -> "1001250"  [label="CFG: "];
"1001249" -> "1001248"  [label="AST: "];
"1001250" -> "1001248"  [label="AST: "];
"1001243" -> "1001248"  [label="CFG: "];
"1001248" -> "1003220"  [label="DDG: immediate"];
"1001248" -> "1001239"  [label="DDG: byte"];
"1001248" -> "1001243"  [label="DDG: immediate"];
"1001248" -> "1001243"  [label="DDG: byte"];
"1000170" -> "1001248"  [label="DDG: immediate"];
"1001239" -> "1001228"  [label="AST: "];
"1001239" -> "1001241"  [label="CFG: "];
"1001240" -> "1001239"  [label="AST: "];
"1001241" -> "1001239"  [label="AST: "];
"1001234" -> "1001239"  [label="CFG: "];
"1001243" -> "1001242"  [label="AST: "];
"1001244" -> "1001243"  [label="AST: "];
"1001240" -> "1001243"  [label="CFG: "];
"1001243" -> "1003220"  [label="DDG: data[l++]"];
"1001243" -> "1003220"  [label="DDG: immediate >> byte"];
"1000104" -> "1001243"  [label="DDG: data"];
"1000571" -> "1000569"  [label="AST: "];
"1000571" -> "1000581"  [label="CFG: "];
"1000572" -> "1000571"  [label="AST: "];
"1000581" -> "1000571"  [label="AST: "];
"1000569" -> "1000571"  [label="CFG: "];
"1000571" -> "1003220"  [label="DDG: OPSIZE_SHIFT"];
"1000571" -> "1003220"  [label="DDG: op->operands[0].reg_size & ALL_SIZE"];
"1000571" -> "1000569"  [label="DDG: op->operands[0].reg_size & ALL_SIZE"];
"1000571" -> "1000569"  [label="DDG: OPSIZE_SHIFT"];
"1000572" -> "1000571"  [label="DDG: op->operands[0].reg_size"];
"1000572" -> "1000571"  [label="DDG: ALL_SIZE"];
"1000569" -> "1000567"  [label="AST: "];
"1000570" -> "1000569"  [label="AST: "];
"1000567" -> "1000569"  [label="CFG: "];
"1000569" -> "1003220"  [label="DDG: (op->operands[0].reg_size & ALL_SIZE) >> OPSIZE_SHIFT"];
"1000569" -> "1000567"  [label="DDG: 8"];
"1000569" -> "1000567"  [label="DDG: (op->operands[0].reg_size & ALL_SIZE) >> OPSIZE_SHIFT"];
"1000567" -> "1000506"  [label="AST: "];
"1000568" -> "1000567"  [label="AST: "];
"1000584" -> "1000567"  [label="CFG: "];
"1000567" -> "1003220"  [label="DDG: 8 * ((op->operands[0].reg_size & ALL_SIZE) >> OPSIZE_SHIFT)"];
"1000567" -> "1000605"  [label="DDG: reg_bits"];
"1000605" -> "1000604"  [label="AST: "];
"1000605" -> "1000607"  [label="CFG: "];
"1000606" -> "1000605"  [label="AST: "];
"1000607" -> "1000605"  [label="AST: "];
"1000612" -> "1000605"  [label="CFG: "];
"1000616" -> "1000605"  [label="CFG: "];
"1000605" -> "1003220"  [label="DDG: a->bits"];
"1000605" -> "1003220"  [label="DDG: reg_bits < a->bits"];
"1000605" -> "1000735"  [label="DDG: reg_bits"];
"1000735" -> "1000734"  [label="AST: "];
"1000735" -> "1000737"  [label="CFG: "];
"1000736" -> "1000735"  [label="AST: "];
"1000737" -> "1000735"  [label="AST: "];
"1000746" -> "1000735"  [label="CFG: "];
"1000966" -> "1000735"  [label="CFG: "];
"1000735" -> "1003220"  [label="DDG: reg_bits == 16"];
"1000735" -> "1003220"  [label="DDG: reg_bits"];
"1000735" -> "1001168"  [label="DDG: reg_bits"];
"1001168" -> "1001167"  [label="AST: "];
"1001168" -> "1001170"  [label="CFG: "];
"1001169" -> "1001168"  [label="AST: "];
"1001170" -> "1001168"  [label="AST: "];
"1001172" -> "1001168"  [label="CFG: "];
"1001167" -> "1001168"  [label="CFG: "];
"1001168" -> "1003220"  [label="DDG: reg_bits"];
"1001168" -> "1001167"  [label="DDG: reg_bits"];
"1001168" -> "1001167"  [label="DDG: 16"];
"1001167" -> "1001166"  [label="AST: "];
"1001167" -> "1001171"  [label="CFG: "];
"1001171" -> "1001167"  [label="AST: "];
"1001177" -> "1001167"  [label="CFG: "];
"1001193" -> "1001167"  [label="CFG: "];
"1001167" -> "1003220"  [label="DDG: reg_bits == 16 && mod == 2"];
"1001167" -> "1003220"  [label="DDG: reg_bits == 16"];
"1001167" -> "1003220"  [label="DDG: mod == 2"];
"1001171" -> "1001167"  [label="DDG: mod"];
"1001171" -> "1001167"  [label="DDG: 2"];
"1000572" -> "1000580"  [label="CFG: "];
"1000573" -> "1000572"  [label="AST: "];
"1000580" -> "1000572"  [label="AST: "];
"1000581" -> "1000572"  [label="CFG: "];
"1000572" -> "1003220"  [label="DDG: ALL_SIZE"];
"1000572" -> "1003220"  [label="DDG: op->operands[0].reg_size"];
}
