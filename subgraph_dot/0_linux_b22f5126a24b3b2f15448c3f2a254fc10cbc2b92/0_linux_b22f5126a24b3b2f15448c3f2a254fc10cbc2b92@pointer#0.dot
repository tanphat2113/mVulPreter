digraph "0_linux_b22f5126a24b3b2f15448c3f2a254fc10cbc2b92@pointer" {
"1000183" [label="(Call,msg = \"nf_ct_dccp: bad checksum coverage \")"];
"1000228" [label="(Call,nf_log_packet(net, pf, 0, skb, NULL, NULL, NULL, \"%s\", msg))"];
"1000241" [label="(MethodReturn,static int)"];
"1000206" [label="(Call,msg = \"nf_ct_dccp: bad checksum \")"];
"1000185" [label="(Literal,\"nf_ct_dccp: bad checksum coverage \")"];
"1000228" [label="(Call,nf_log_packet(net, pf, 0, skb, NULL, NULL, NULL, \"%s\", msg))"];
"1000236" [label="(Literal,\"%s\")"];
"1000157" [label="(Call,msg = \"nf_ct_dccp: truncated/malformed packet \")"];
"1000230" [label="(Identifier,pf)"];
"1000233" [label="(Identifier,NULL)"];
"1000225" [label="(Call,LOG_INVALID(net, IPPROTO_DCCP))"];
"1000183" [label="(Call,msg = \"nf_ct_dccp: bad checksum coverage \")"];
"1000231" [label="(Literal,0)"];
"1000232" [label="(Identifier,skb)"];
"1000234" [label="(Identifier,NULL)"];
"1000106" [label="(MethodParameterIn,u_int8_t pf)"];
"1000103" [label="(MethodParameterIn,struct sk_buff *skb)"];
"1000235" [label="(Identifier,NULL)"];
"1000198" [label="(Call,nf_checksum_partial(skb, hooknum, dataoff, cscov, IPPROTO_DCCP,\n\t\t\t\tpf))"];
"1000131" [label="(Call,dh == NULL)"];
"1000101" [label="(MethodParameterIn,struct net *net)"];
"1000135" [label="(Call,msg = \"nf_ct_dccp: short packet \")"];
"1000237" [label="(Identifier,msg)"];
"1000184" [label="(Identifier,msg)"];
"1000229" [label="(Identifier,net)"];
"1000217" [label="(Call,msg = \"nf_ct_dccp: reserved packet type \")"];
"1000224" [label="(ControlStructure,if (LOG_INVALID(net, IPPROTO_DCCP)))"];
"1000182" [label="(Block,)"];
"1000123" [label="(Call,skb_header_pointer(skb, dataoff, sizeof(_dh), &_dh))"];
"1000240" [label="(Identifier,NF_ACCEPT)"];
"1000186" [label="(ControlStructure,goto out_invalid;)"];
"1000183" -> "1000182"  [label="AST: "];
"1000183" -> "1000185"  [label="CFG: "];
"1000184" -> "1000183"  [label="AST: "];
"1000185" -> "1000183"  [label="AST: "];
"1000186" -> "1000183"  [label="CFG: "];
"1000183" -> "1000241"  [label="DDG: "];
"1000183" -> "1000228"  [label="DDG: "];
"1000228" -> "1000224"  [label="AST: "];
"1000228" -> "1000237"  [label="CFG: "];
"1000229" -> "1000228"  [label="AST: "];
"1000230" -> "1000228"  [label="AST: "];
"1000231" -> "1000228"  [label="AST: "];
"1000232" -> "1000228"  [label="AST: "];
"1000233" -> "1000228"  [label="AST: "];
"1000234" -> "1000228"  [label="AST: "];
"1000235" -> "1000228"  [label="AST: "];
"1000236" -> "1000228"  [label="AST: "];
"1000237" -> "1000228"  [label="AST: "];
"1000240" -> "1000228"  [label="CFG: "];
"1000228" -> "1000241"  [label="DDG: "];
"1000228" -> "1000241"  [label="DDG: "];
"1000228" -> "1000241"  [label="DDG: "];
"1000228" -> "1000241"  [label="DDG: "];
"1000228" -> "1000241"  [label="DDG: "];
"1000228" -> "1000241"  [label="DDG: "];
"1000225" -> "1000228"  [label="DDG: "];
"1000101" -> "1000228"  [label="DDG: "];
"1000198" -> "1000228"  [label="DDG: "];
"1000198" -> "1000228"  [label="DDG: "];
"1000106" -> "1000228"  [label="DDG: "];
"1000123" -> "1000228"  [label="DDG: "];
"1000103" -> "1000228"  [label="DDG: "];
"1000131" -> "1000228"  [label="DDG: "];
"1000157" -> "1000228"  [label="DDG: "];
"1000217" -> "1000228"  [label="DDG: "];
"1000206" -> "1000228"  [label="DDG: "];
"1000135" -> "1000228"  [label="DDG: "];
}
