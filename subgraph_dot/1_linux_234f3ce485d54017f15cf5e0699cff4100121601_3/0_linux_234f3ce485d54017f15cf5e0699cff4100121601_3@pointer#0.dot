digraph "0_linux_234f3ce485d54017f15cf5e0699cff4100121601_3@pointer" {
"1000120" [label="(Call,ctxt->b == 0xe2)"];
"1000119" [label="(Call,ctxt->b == 0xe2 || test_cc(ctxt->b ^ 0x5, ctxt->eflags))"];
"1000111" [label="(Call,(address_mask(ctxt, reg_read(ctxt, VCPU_REGS_RCX)) != 0) &&\n \t    (ctxt->b == 0xe2 || test_cc(ctxt->b ^ 0x5, ctxt->eflags)))"];
"1000126" [label="(Call,ctxt->b ^ 0x5)"];
"1000125" [label="(Call,test_cc(ctxt->b ^ 0x5, ctxt->eflags))"];
"1000131" [label="(Call,ctxt->eflags)"];
"1000125" [label="(Call,test_cc(ctxt->b ^ 0x5, ctxt->eflags))"];
"1000121" [label="(Call,ctxt->b)"];
"1000132" [label="(Identifier,ctxt)"];
"1000143" [label="(MethodReturn,static int)"];
"1000130" [label="(Literal,0x5)"];
"1000127" [label="(Call,ctxt->b)"];
"1000112" [label="(Call,address_mask(ctxt, reg_read(ctxt, VCPU_REGS_RCX)) != 0)"];
"1000110" [label="(ControlStructure,if ((address_mask(ctxt, reg_read(ctxt, VCPU_REGS_RCX)) != 0) &&\n \t    (ctxt->b == 0xe2 || test_cc(ctxt->b ^ 0x5, ctxt->eflags))))"];
"1000126" [label="(Call,ctxt->b ^ 0x5)"];
"1000119" [label="(Call,ctxt->b == 0xe2 || test_cc(ctxt->b ^ 0x5, ctxt->eflags))"];
"1000124" [label="(Literal,0xe2)"];
"1000128" [label="(Identifier,ctxt)"];
"1000111" [label="(Call,(address_mask(ctxt, reg_read(ctxt, VCPU_REGS_RCX)) != 0) &&\n \t    (ctxt->b == 0xe2 || test_cc(ctxt->b ^ 0x5, ctxt->eflags)))"];
"1000142" [label="(Identifier,X86EMUL_CONTINUE)"];
"1000135" [label="(Identifier,ctxt)"];
"1000120" [label="(Call,ctxt->b == 0xe2)"];
"1000120" -> "1000119"  [label="AST: "];
"1000120" -> "1000124"  [label="CFG: "];
"1000121" -> "1000120"  [label="AST: "];
"1000124" -> "1000120"  [label="AST: "];
"1000128" -> "1000120"  [label="CFG: "];
"1000119" -> "1000120"  [label="CFG: "];
"1000120" -> "1000143"  [label="DDG: ctxt->b"];
"1000120" -> "1000119"  [label="DDG: ctxt->b"];
"1000120" -> "1000119"  [label="DDG: 0xe2"];
"1000120" -> "1000126"  [label="DDG: ctxt->b"];
"1000119" -> "1000111"  [label="AST: "];
"1000119" -> "1000125"  [label="CFG: "];
"1000125" -> "1000119"  [label="AST: "];
"1000111" -> "1000119"  [label="CFG: "];
"1000119" -> "1000143"  [label="DDG: test_cc(ctxt->b ^ 0x5, ctxt->eflags)"];
"1000119" -> "1000143"  [label="DDG: ctxt->b == 0xe2"];
"1000119" -> "1000111"  [label="DDG: ctxt->b == 0xe2"];
"1000119" -> "1000111"  [label="DDG: test_cc(ctxt->b ^ 0x5, ctxt->eflags)"];
"1000125" -> "1000119"  [label="DDG: ctxt->b ^ 0x5"];
"1000125" -> "1000119"  [label="DDG: ctxt->eflags"];
"1000111" -> "1000110"  [label="AST: "];
"1000111" -> "1000112"  [label="CFG: "];
"1000112" -> "1000111"  [label="AST: "];
"1000135" -> "1000111"  [label="CFG: "];
"1000142" -> "1000111"  [label="CFG: "];
"1000111" -> "1000143"  [label="DDG: address_mask(ctxt, reg_read(ctxt, VCPU_REGS_RCX)) != 0"];
"1000111" -> "1000143"  [label="DDG: ctxt->b == 0xe2 || test_cc(ctxt->b ^ 0x5, ctxt->eflags)"];
"1000111" -> "1000143"  [label="DDG: (address_mask(ctxt, reg_read(ctxt, VCPU_REGS_RCX)) != 0) &&\n \t    (ctxt->b == 0xe2 || test_cc(ctxt->b ^ 0x5, ctxt->eflags))"];
"1000112" -> "1000111"  [label="DDG: address_mask(ctxt, reg_read(ctxt, VCPU_REGS_RCX))"];
"1000112" -> "1000111"  [label="DDG: 0"];
"1000126" -> "1000125"  [label="AST: "];
"1000126" -> "1000130"  [label="CFG: "];
"1000127" -> "1000126"  [label="AST: "];
"1000130" -> "1000126"  [label="AST: "];
"1000132" -> "1000126"  [label="CFG: "];
"1000126" -> "1000143"  [label="DDG: ctxt->b"];
"1000126" -> "1000125"  [label="DDG: ctxt->b"];
"1000126" -> "1000125"  [label="DDG: 0x5"];
"1000125" -> "1000131"  [label="CFG: "];
"1000131" -> "1000125"  [label="AST: "];
"1000125" -> "1000143"  [label="DDG: ctxt->b ^ 0x5"];
"1000125" -> "1000143"  [label="DDG: ctxt->eflags"];
}
