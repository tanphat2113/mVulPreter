digraph "0_miniupnp_140ee8d2204b383279f854802b27bdb41c1d5d1a@array" {
"1000996" [label="(Call,rbuf[0] = '\0')"];
"1001003" [label="(Call,write(req->socket, rbuf, 1))"];
"1001002" [label="(Call,write(req->socket, rbuf, 1) < 0)"];
"1001011" [label="(Call,syslog(LOG_ERR, \"(s=%d) write: %m\", req->socket))"];
"1001044" [label="(Call,close(req->socket))"];
"1000116" [label="(Block,)"];
"1001000" [label="(Literal,'\0')"];
"1001044" [label="(Call,close(req->socket))"];
"1001013" [label="(Literal,\"(s=%d) write: %m\")"];
"1001017" [label="(ControlStructure,goto error;)"];
"1001004" [label="(Call,req->socket)"];
"1000247" [label="(Block,)"];
"1000171" [label="(Call,syslog(LOG_ERR, \"(s=%d) processRequest(): read(): %m\", req->socket))"];
"1000997" [label="(Call,rbuf[0])"];
"1001055" [label="(MethodReturn,void)"];
"1000183" [label="(Call,syslog(LOG_INFO, \"(s=%d) request connection closed\", req->socket))"];
"1001005" [label="(Identifier,req)"];
"1001003" [label="(Call,write(req->socket, rbuf, 1))"];
"1001018" [label="(Return,return;)"];
"1000236" [label="(Call,syslog(LOG_INFO, \"(s=%d) request type=%d str='%.*s'\",\n\t       req->socket, type, l, p))"];
"1001009" [label="(Literal,0)"];
"1001012" [label="(Identifier,LOG_ERR)"];
"1000146" [label="(Call,read(req->socket, buf, sizeof(buf)))"];
"1001050" [label="(Identifier,req)"];
"1001008" [label="(Literal,1)"];
"1001011" [label="(Call,syslog(LOG_ERR, \"(s=%d) write: %m\", req->socket))"];
"1001014" [label="(Call,req->socket)"];
"1001007" [label="(Identifier,rbuf)"];
"1001045" [label="(Call,req->socket)"];
"1001002" [label="(Call,write(req->socket, rbuf, 1) < 0)"];
"1000996" [label="(Call,rbuf[0] = '\0')"];
"1001001" [label="(ControlStructure,if(write(req->socket, rbuf, 1) < 0))"];
"1000628" [label="(Call,syslog(LOG_ERR, \"(s=%d) write: %m\", req->socket))"];
"1001010" [label="(Block,)"];
"1000996" -> "1000247"  [label="AST: "];
"1000996" -> "1001000"  [label="CFG: "];
"1000997" -> "1000996"  [label="AST: "];
"1001000" -> "1000996"  [label="AST: "];
"1001005" -> "1000996"  [label="CFG: "];
"1000996" -> "1001055"  [label="DDG: "];
"1000996" -> "1001003"  [label="DDG: "];
"1001003" -> "1001002"  [label="AST: "];
"1001003" -> "1001008"  [label="CFG: "];
"1001004" -> "1001003"  [label="AST: "];
"1001007" -> "1001003"  [label="AST: "];
"1001008" -> "1001003"  [label="AST: "];
"1001009" -> "1001003"  [label="CFG: "];
"1001003" -> "1001055"  [label="DDG: "];
"1001003" -> "1001055"  [label="DDG: "];
"1001003" -> "1001002"  [label="DDG: "];
"1001003" -> "1001002"  [label="DDG: "];
"1001003" -> "1001002"  [label="DDG: "];
"1000236" -> "1001003"  [label="DDG: "];
"1001003" -> "1001011"  [label="DDG: "];
"1001002" -> "1001001"  [label="AST: "];
"1001002" -> "1001009"  [label="CFG: "];
"1001009" -> "1001002"  [label="AST: "];
"1001012" -> "1001002"  [label="CFG: "];
"1001018" -> "1001002"  [label="CFG: "];
"1001002" -> "1001055"  [label="DDG: "];
"1001002" -> "1001055"  [label="DDG: "];
"1001011" -> "1001010"  [label="AST: "];
"1001011" -> "1001014"  [label="CFG: "];
"1001012" -> "1001011"  [label="AST: "];
"1001013" -> "1001011"  [label="AST: "];
"1001014" -> "1001011"  [label="AST: "];
"1001017" -> "1001011"  [label="CFG: "];
"1001011" -> "1001055"  [label="DDG: "];
"1001011" -> "1001055"  [label="DDG: "];
"1001011" -> "1001044"  [label="DDG: "];
"1001044" -> "1000116"  [label="AST: "];
"1001044" -> "1001045"  [label="CFG: "];
"1001045" -> "1001044"  [label="AST: "];
"1001050" -> "1001044"  [label="CFG: "];
"1001044" -> "1001055"  [label="DDG: "];
"1000183" -> "1001044"  [label="DDG: "];
"1000236" -> "1001044"  [label="DDG: "];
"1000628" -> "1001044"  [label="DDG: "];
"1000146" -> "1001044"  [label="DDG: "];
"1000171" -> "1001044"  [label="DDG: "];
}
