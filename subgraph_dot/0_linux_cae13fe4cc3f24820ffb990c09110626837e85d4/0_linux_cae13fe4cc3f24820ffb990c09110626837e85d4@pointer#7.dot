digraph "0_linux_cae13fe4cc3f24820ffb990c09110626837e85d4@pointer" {
"1000179" [label="(Call,f = kmalloc (sizeof (*f) + size*num, GFP_KERNEL))"];
"1000181" [label="(Call,kmalloc (sizeof (*f) + size*num, GFP_KERNEL))"];
"1000186" [label="(Call,size*num)"];
"1000118" [label="(Call,size < 2 * VBLK_SIZE_HEAD)"];
"1000103" [label="(MethodParameterIn,int size)"];
"1000120" [label="(Call,2 * VBLK_SIZE_HEAD)"];
"1000161" [label="(Call,rec >= num)"];
"1000134" [label="(Call,rec   = get_unaligned_be16(data + 0x0C))"];
"1000136" [label="(Call,get_unaligned_be16(data + 0x0C))"];
"1000102" [label="(MethodParameterIn,const u8 *data)"];
"1000113" [label="(Call,!data)"];
"1000151" [label="(Call,num > 4)"];
"1000148" [label="(Call,num < 1)"];
"1000140" [label="(Call,num   = get_unaligned_be16(data + 0x0E))"];
"1000142" [label="(Call,get_unaligned_be16(data + 0x0E))"];
"1000191" [label="(Call,!f)"];
"1000121" [label="(Literal,2)"];
"1000160" [label="(ControlStructure,if (rec >= num))"];
"1000195" [label="(Literal,\"Out of memory.\")"];
"1000208" [label="(Call,f->rec   = rec)"];
"1000153" [label="(Literal,4)"];
"1000228" [label="(Call,rec >= f->num)"];
"1000151" [label="(Call,num > 4)"];
"1000187" [label="(Identifier,size)"];
"1000179" [label="(Call,f = kmalloc (sizeof (*f) + size*num, GFP_KERNEL))"];
"1000282" [label="(Call,size-VBLK_SIZE_HEAD)"];
"1000148" [label="(Call,num < 1)"];
"1000147" [label="(Call,(num < 1) || (num > 4))"];
"1000290" [label="(MethodReturn,static bool)"];
"1000114" [label="(Identifier,data)"];
"1000113" [label="(Call,!data)"];
"1000274" [label="(Call,memcpy (f->data+rec*(size-VBLK_SIZE_HEAD)+VBLK_SIZE_HEAD, data, size))"];
"1000130" [label="(Call,get_unaligned_be32(data + 0x08))"];
"1000103" [label="(MethodParameterIn,int size)"];
"1000105" [label="(Block,)"];
"1000180" [label="(Identifier,f)"];
"1000268" [label="(Call,data += VBLK_SIZE_HEAD)"];
"1000112" [label="(Call,!data || !frags)"];
"1000140" [label="(Call,num   = get_unaligned_be16(data + 0x0E))"];
"1000162" [label="(Identifier,rec)"];
"1000271" [label="(Call,size -= VBLK_SIZE_HEAD)"];
"1000129" [label="(Identifier,group)"];
"1000122" [label="(Identifier,VBLK_SIZE_HEAD)"];
"1000175" [label="(Identifier,f)"];
"1000131" [label="(Call,data + 0x08)"];
"1000161" [label="(Call,rec >= num)"];
"1000137" [label="(Call,data + 0x0C)"];
"1000118" [label="(Call,size < 2 * VBLK_SIZE_HEAD)"];
"1000135" [label="(Identifier,rec)"];
"1000150" [label="(Literal,1)"];
"1000200" [label="(Identifier,f)"];
"1000102" [label="(MethodParameterIn,const u8 *data)"];
"1000136" [label="(Call,get_unaligned_be16(data + 0x0C))"];
"1000188" [label="(Identifier,num)"];
"1000181" [label="(Call,kmalloc (sizeof (*f) + size*num, GFP_KERNEL))"];
"1000119" [label="(Identifier,size)"];
"1000149" [label="(Identifier,num)"];
"1000120" [label="(Call,2 * VBLK_SIZE_HEAD)"];
"1000142" [label="(Call,get_unaligned_be16(data + 0x0E))"];
"1000117" [label="(ControlStructure,if (size < 2 * VBLK_SIZE_HEAD))"];
"1000217" [label="(Call,0xFF << num)"];
"1000163" [label="(Identifier,num)"];
"1000155" [label="(Call,ldm_error (\"A VBLK claims to have %d parts.\", num))"];
"1000182" [label="(Call,sizeof (*f) + size*num)"];
"1000203" [label="(Call,f->num   = num)"];
"1000166" [label="(Literal,\"REC value (%d) exceeds NUM value (%d)\")"];
"1000141" [label="(Identifier,num)"];
"1000152" [label="(Identifier,num)"];
"1000165" [label="(Call,ldm_error(\"REC value (%d) exceeds NUM value (%d)\", rec, num))"];
"1000189" [label="(Identifier,GFP_KERNEL)"];
"1000191" [label="(Call,!f)"];
"1000125" [label="(Literal,\"Value of size is to small.\")"];
"1000143" [label="(Call,data + 0x0E)"];
"1000186" [label="(Call,size*num)"];
"1000190" [label="(ControlStructure,if (!f))"];
"1000192" [label="(Identifier,f)"];
"1000116" [label="(Identifier,frags)"];
"1000134" [label="(Call,rec   = get_unaligned_be16(data + 0x0C))"];
"1000179" -> "1000105"  [label="AST: "];
"1000179" -> "1000181"  [label="CFG: "];
"1000180" -> "1000179"  [label="AST: "];
"1000181" -> "1000179"  [label="AST: "];
"1000192" -> "1000179"  [label="CFG: "];
"1000179" -> "1000290"  [label="DDG: kmalloc (sizeof (*f) + size*num, GFP_KERNEL)"];
"1000181" -> "1000179"  [label="DDG: sizeof (*f) + size*num"];
"1000181" -> "1000179"  [label="DDG: GFP_KERNEL"];
"1000179" -> "1000191"  [label="DDG: f"];
"1000181" -> "1000189"  [label="CFG: "];
"1000182" -> "1000181"  [label="AST: "];
"1000189" -> "1000181"  [label="AST: "];
"1000181" -> "1000290"  [label="DDG: sizeof (*f) + size*num"];
"1000181" -> "1000290"  [label="DDG: GFP_KERNEL"];
"1000186" -> "1000181"  [label="DDG: size"];
"1000186" -> "1000181"  [label="DDG: num"];
"1000186" -> "1000182"  [label="AST: "];
"1000186" -> "1000188"  [label="CFG: "];
"1000187" -> "1000186"  [label="AST: "];
"1000188" -> "1000186"  [label="AST: "];
"1000182" -> "1000186"  [label="CFG: "];
"1000186" -> "1000290"  [label="DDG: num"];
"1000186" -> "1000290"  [label="DDG: size"];
"1000186" -> "1000182"  [label="DDG: size"];
"1000186" -> "1000182"  [label="DDG: num"];
"1000118" -> "1000186"  [label="DDG: size"];
"1000103" -> "1000186"  [label="DDG: size"];
"1000161" -> "1000186"  [label="DDG: num"];
"1000186" -> "1000203"  [label="DDG: num"];
"1000186" -> "1000217"  [label="DDG: num"];
"1000186" -> "1000271"  [label="DDG: size"];
"1000118" -> "1000117"  [label="AST: "];
"1000118" -> "1000120"  [label="CFG: "];
"1000119" -> "1000118"  [label="AST: "];
"1000120" -> "1000118"  [label="AST: "];
"1000125" -> "1000118"  [label="CFG: "];
"1000129" -> "1000118"  [label="CFG: "];
"1000118" -> "1000290"  [label="DDG: size < 2 * VBLK_SIZE_HEAD"];
"1000118" -> "1000290"  [label="DDG: size"];
"1000118" -> "1000290"  [label="DDG: 2 * VBLK_SIZE_HEAD"];
"1000103" -> "1000118"  [label="DDG: size"];
"1000120" -> "1000118"  [label="DDG: 2"];
"1000120" -> "1000118"  [label="DDG: VBLK_SIZE_HEAD"];
"1000118" -> "1000271"  [label="DDG: size"];
"1000103" -> "1000101"  [label="AST: "];
"1000103" -> "1000290"  [label="DDG: size"];
"1000103" -> "1000271"  [label="DDG: size"];
"1000103" -> "1000282"  [label="DDG: size"];
"1000103" -> "1000274"  [label="DDG: size"];
"1000120" -> "1000122"  [label="CFG: "];
"1000121" -> "1000120"  [label="AST: "];
"1000122" -> "1000120"  [label="AST: "];
"1000120" -> "1000290"  [label="DDG: VBLK_SIZE_HEAD"];
"1000120" -> "1000268"  [label="DDG: VBLK_SIZE_HEAD"];
"1000120" -> "1000271"  [label="DDG: VBLK_SIZE_HEAD"];
"1000120" -> "1000282"  [label="DDG: VBLK_SIZE_HEAD"];
"1000161" -> "1000160"  [label="AST: "];
"1000161" -> "1000163"  [label="CFG: "];
"1000162" -> "1000161"  [label="AST: "];
"1000163" -> "1000161"  [label="AST: "];
"1000166" -> "1000161"  [label="CFG: "];
"1000175" -> "1000161"  [label="CFG: "];
"1000161" -> "1000290"  [label="DDG: num"];
"1000161" -> "1000290"  [label="DDG: rec"];
"1000161" -> "1000290"  [label="DDG: rec >= num"];
"1000134" -> "1000161"  [label="DDG: rec"];
"1000151" -> "1000161"  [label="DDG: num"];
"1000148" -> "1000161"  [label="DDG: num"];
"1000161" -> "1000165"  [label="DDG: rec"];
"1000161" -> "1000165"  [label="DDG: num"];
"1000161" -> "1000208"  [label="DDG: rec"];
"1000161" -> "1000228"  [label="DDG: rec"];
"1000134" -> "1000105"  [label="AST: "];
"1000134" -> "1000136"  [label="CFG: "];
"1000135" -> "1000134"  [label="AST: "];
"1000136" -> "1000134"  [label="AST: "];
"1000141" -> "1000134"  [label="CFG: "];
"1000134" -> "1000290"  [label="DDG: rec"];
"1000134" -> "1000290"  [label="DDG: get_unaligned_be16(data + 0x0C)"];
"1000136" -> "1000134"  [label="DDG: data + 0x0C"];
"1000136" -> "1000137"  [label="CFG: "];
"1000137" -> "1000136"  [label="AST: "];
"1000136" -> "1000290"  [label="DDG: data + 0x0C"];
"1000102" -> "1000136"  [label="DDG: data"];
"1000113" -> "1000136"  [label="DDG: data"];
"1000102" -> "1000101"  [label="AST: "];
"1000102" -> "1000290"  [label="DDG: data"];
"1000102" -> "1000113"  [label="DDG: data"];
"1000102" -> "1000130"  [label="DDG: data"];
"1000102" -> "1000131"  [label="DDG: data"];
"1000102" -> "1000137"  [label="DDG: data"];
"1000102" -> "1000142"  [label="DDG: data"];
"1000102" -> "1000143"  [label="DDG: data"];
"1000102" -> "1000268"  [label="DDG: data"];
"1000102" -> "1000274"  [label="DDG: data"];
"1000113" -> "1000112"  [label="AST: "];
"1000113" -> "1000114"  [label="CFG: "];
"1000114" -> "1000113"  [label="AST: "];
"1000116" -> "1000113"  [label="CFG: "];
"1000112" -> "1000113"  [label="CFG: "];
"1000113" -> "1000290"  [label="DDG: data"];
"1000113" -> "1000112"  [label="DDG: data"];
"1000113" -> "1000130"  [label="DDG: data"];
"1000113" -> "1000131"  [label="DDG: data"];
"1000113" -> "1000137"  [label="DDG: data"];
"1000113" -> "1000142"  [label="DDG: data"];
"1000113" -> "1000143"  [label="DDG: data"];
"1000113" -> "1000268"  [label="DDG: data"];
"1000151" -> "1000147"  [label="AST: "];
"1000151" -> "1000153"  [label="CFG: "];
"1000152" -> "1000151"  [label="AST: "];
"1000153" -> "1000151"  [label="AST: "];
"1000147" -> "1000151"  [label="CFG: "];
"1000151" -> "1000147"  [label="DDG: num"];
"1000151" -> "1000147"  [label="DDG: 4"];
"1000148" -> "1000151"  [label="DDG: num"];
"1000151" -> "1000155"  [label="DDG: num"];
"1000148" -> "1000147"  [label="AST: "];
"1000148" -> "1000150"  [label="CFG: "];
"1000149" -> "1000148"  [label="AST: "];
"1000150" -> "1000148"  [label="AST: "];
"1000152" -> "1000148"  [label="CFG: "];
"1000147" -> "1000148"  [label="CFG: "];
"1000148" -> "1000147"  [label="DDG: num"];
"1000148" -> "1000147"  [label="DDG: 1"];
"1000140" -> "1000148"  [label="DDG: num"];
"1000148" -> "1000155"  [label="DDG: num"];
"1000140" -> "1000105"  [label="AST: "];
"1000140" -> "1000142"  [label="CFG: "];
"1000141" -> "1000140"  [label="AST: "];
"1000142" -> "1000140"  [label="AST: "];
"1000149" -> "1000140"  [label="CFG: "];
"1000140" -> "1000290"  [label="DDG: get_unaligned_be16(data + 0x0E)"];
"1000142" -> "1000140"  [label="DDG: data + 0x0E"];
"1000142" -> "1000143"  [label="CFG: "];
"1000143" -> "1000142"  [label="AST: "];
"1000142" -> "1000290"  [label="DDG: data + 0x0E"];
"1000191" -> "1000190"  [label="AST: "];
"1000191" -> "1000192"  [label="CFG: "];
"1000192" -> "1000191"  [label="AST: "];
"1000195" -> "1000191"  [label="CFG: "];
"1000200" -> "1000191"  [label="CFG: "];
"1000191" -> "1000290"  [label="DDG: !f"];
"1000191" -> "1000290"  [label="DDG: f"];
}
