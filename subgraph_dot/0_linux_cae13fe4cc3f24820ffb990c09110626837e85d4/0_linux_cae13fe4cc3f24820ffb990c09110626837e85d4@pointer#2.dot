digraph "0_linux_cae13fe4cc3f24820ffb990c09110626837e85d4@pointer" {
"1000173" [label="(Call,f->group == group)"];
"1000128" [label="(Call,group = get_unaligned_be32(data + 0x08))"];
"1000130" [label="(Call,get_unaligned_be32(data + 0x08))"];
"1000113" [label="(Call,!data)"];
"1000102" [label="(MethodParameterIn,const u8 *data)"];
"1000198" [label="(Call,f->group = group)"];
"1000172" [label="(ControlStructure,if (f->group == group))"];
"1000290" [label="(MethodReturn,static bool)"];
"1000114" [label="(Identifier,data)"];
"1000178" [label="(ControlStructure,goto found;)"];
"1000113" [label="(Call,!data)"];
"1000177" [label="(Identifier,group)"];
"1000130" [label="(Call,get_unaligned_be32(data + 0x08))"];
"1000112" [label="(Call,!data || !frags)"];
"1000105" [label="(Block,)"];
"1000180" [label="(Identifier,f)"];
"1000268" [label="(Call,data += VBLK_SIZE_HEAD)"];
"1000274" [label="(Call,memcpy (f->data+rec*(size-VBLK_SIZE_HEAD)+VBLK_SIZE_HEAD, data, size))"];
"1000202" [label="(Identifier,group)"];
"1000116" [label="(Identifier,frags)"];
"1000129" [label="(Identifier,group)"];
"1000131" [label="(Call,data + 0x08)"];
"1000198" [label="(Call,f->group = group)"];
"1000137" [label="(Call,data + 0x0C)"];
"1000135" [label="(Identifier,rec)"];
"1000199" [label="(Call,f->group)"];
"1000205" [label="(Identifier,f)"];
"1000102" [label="(MethodParameterIn,const u8 *data)"];
"1000174" [label="(Call,f->group)"];
"1000136" [label="(Call,get_unaligned_be16(data + 0x0C))"];
"1000142" [label="(Call,get_unaligned_be16(data + 0x0E))"];
"1000143" [label="(Call,data + 0x0E)"];
"1000173" [label="(Call,f->group == group)"];
"1000128" [label="(Call,group = get_unaligned_be32(data + 0x08))"];
"1000173" -> "1000172"  [label="AST: "];
"1000173" -> "1000177"  [label="CFG: "];
"1000174" -> "1000173"  [label="AST: "];
"1000177" -> "1000173"  [label="AST: "];
"1000178" -> "1000173"  [label="CFG: "];
"1000180" -> "1000173"  [label="CFG: "];
"1000173" -> "1000290"  [label="DDG: group"];
"1000173" -> "1000290"  [label="DDG: f->group == group"];
"1000173" -> "1000290"  [label="DDG: f->group"];
"1000128" -> "1000173"  [label="DDG: group"];
"1000173" -> "1000198"  [label="DDG: group"];
"1000128" -> "1000105"  [label="AST: "];
"1000128" -> "1000130"  [label="CFG: "];
"1000129" -> "1000128"  [label="AST: "];
"1000130" -> "1000128"  [label="AST: "];
"1000135" -> "1000128"  [label="CFG: "];
"1000128" -> "1000290"  [label="DDG: get_unaligned_be32(data + 0x08)"];
"1000128" -> "1000290"  [label="DDG: group"];
"1000130" -> "1000128"  [label="DDG: data + 0x08"];
"1000130" -> "1000131"  [label="CFG: "];
"1000131" -> "1000130"  [label="AST: "];
"1000130" -> "1000290"  [label="DDG: data + 0x08"];
"1000113" -> "1000130"  [label="DDG: data"];
"1000102" -> "1000130"  [label="DDG: data"];
"1000113" -> "1000112"  [label="AST: "];
"1000113" -> "1000114"  [label="CFG: "];
"1000114" -> "1000113"  [label="AST: "];
"1000116" -> "1000113"  [label="CFG: "];
"1000112" -> "1000113"  [label="CFG: "];
"1000113" -> "1000290"  [label="DDG: data"];
"1000113" -> "1000112"  [label="DDG: data"];
"1000102" -> "1000113"  [label="DDG: data"];
"1000113" -> "1000131"  [label="DDG: data"];
"1000113" -> "1000136"  [label="DDG: data"];
"1000113" -> "1000137"  [label="DDG: data"];
"1000113" -> "1000142"  [label="DDG: data"];
"1000113" -> "1000143"  [label="DDG: data"];
"1000113" -> "1000268"  [label="DDG: data"];
"1000102" -> "1000101"  [label="AST: "];
"1000102" -> "1000290"  [label="DDG: data"];
"1000102" -> "1000131"  [label="DDG: data"];
"1000102" -> "1000136"  [label="DDG: data"];
"1000102" -> "1000137"  [label="DDG: data"];
"1000102" -> "1000142"  [label="DDG: data"];
"1000102" -> "1000143"  [label="DDG: data"];
"1000102" -> "1000268"  [label="DDG: data"];
"1000102" -> "1000274"  [label="DDG: data"];
"1000198" -> "1000105"  [label="AST: "];
"1000198" -> "1000202"  [label="CFG: "];
"1000199" -> "1000198"  [label="AST: "];
"1000202" -> "1000198"  [label="AST: "];
"1000205" -> "1000198"  [label="CFG: "];
"1000198" -> "1000290"  [label="DDG: f->group"];
"1000198" -> "1000290"  [label="DDG: group"];
}
