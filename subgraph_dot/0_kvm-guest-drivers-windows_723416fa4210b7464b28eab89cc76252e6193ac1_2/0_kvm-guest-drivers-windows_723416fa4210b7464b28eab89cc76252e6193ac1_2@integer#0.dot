digraph "0_kvm-guest-drivers-windows_723416fa4210b7464b28eab89cc76252e6193ac1_2@integer" {
"1000180" [label="(Call,VHeader->hdr_len = (USHORT)(packetReview.XxpIpHeaderSize + IpHeaderOffset + PriorityHdrLen))"];
"1000184" [label="(Call,(USHORT)(packetReview.XxpIpHeaderSize + IpHeaderOffset + PriorityHdrLen))"];
"1000113" [label="(Call,packetReview = ParaNdis_CheckSumVerifyFlat(reinterpret_cast<IPv4Header*>(IpHeader), EthPayloadLength,\n                                                pcrIpChecksum | pcrFixIPChecksum | pcrTcpChecksum | pcrFixPHChecksum,\n                                               FALSE,\n                                                __FUNCTION__))"];
"1000115" [label="(Call,ParaNdis_CheckSumVerifyFlat(reinterpret_cast<IPv4Header*>(IpHeader), EthPayloadLength,\n                                                pcrIpChecksum | pcrFixIPChecksum | pcrTcpChecksum | pcrFixPHChecksum,\n                                               FALSE,\n                                                __FUNCTION__))"];
"1000116" [label="(Call,reinterpret_cast<IPv4Header*>(IpHeader))"];
"1000106" [label="(Call,reinterpret_cast<IPv4Header*>(IpHeader))"];
"1000102" [label="(MethodParameterIn,PVOID IpHeader)"];
"1000109" [label="(Call,static_cast<USHORT>(EthPayloadLength))"];
"1000103" [label="(MethodParameterIn,ULONG EthPayloadLength)"];
"1000120" [label="(Call,pcrIpChecksum | pcrFixIPChecksum | pcrTcpChecksum | pcrFixPHChecksum)"];
"1000122" [label="(Call,pcrFixIPChecksum | pcrTcpChecksum | pcrFixPHChecksum)"];
"1000124" [label="(Call,pcrTcpChecksum | pcrFixPHChecksum)"];
"1000141" [label="(Call,IpHeaderOffset = m_Context->Offload.ipHeaderOffset)"];
"1000155" [label="(Call,PriorityHdrLen = (m_ParentNBL->TCI() != 0) ? ETH_PRIORITY_HEADER_SIZE : 0)"];
"1000128" [label="(Identifier,__FUNCTION__)"];
"1000103" [label="(MethodParameterIn,ULONG EthPayloadLength)"];
"1000109" [label="(Call,static_cast<USHORT>(EthPayloadLength))"];
"1000181" [label="(Call,VHeader->hdr_len)"];
"1000139" [label="(Block,)"];
"1000126" [label="(Identifier,pcrFixPHChecksum)"];
"1000115" [label="(Call,ParaNdis_CheckSumVerifyFlat(reinterpret_cast<IPv4Header*>(IpHeader), EthPayloadLength,\n                                                pcrIpChecksum | pcrFixIPChecksum | pcrTcpChecksum | pcrFixPHChecksum,\n                                               FALSE,\n                                                __FUNCTION__))"];
"1000127" [label="(Identifier,FALSE)"];
"1000186" [label="(Call,packetReview.XxpIpHeaderSize + IpHeaderOffset + PriorityHdrLen)"];
"1000116" [label="(Call,reinterpret_cast<IPv4Header*>(IpHeader))"];
"1000114" [label="(Identifier,packetReview)"];
"1000113" [label="(Call,packetReview = ParaNdis_CheckSumVerifyFlat(reinterpret_cast<IPv4Header*>(IpHeader), EthPayloadLength,\n                                                pcrIpChecksum | pcrFixIPChecksum | pcrTcpChecksum | pcrFixPHChecksum,\n                                               FALSE,\n                                                __FUNCTION__))"];
"1000155" [label="(Call,PriorityHdrLen = (m_ParentNBL->TCI() != 0) ? ETH_PRIORITY_HEADER_SIZE : 0)"];
"1000104" [label="(Block,)"];
"1000118" [label="(Identifier,IpHeader)"];
"1000111" [label="(Identifier,EthPayloadLength)"];
"1000156" [label="(Identifier,PriorityHdrLen)"];
"1000121" [label="(Identifier,pcrIpChecksum)"];
"1000173" [label="(Call,packetReview.ipStatus == ppresIPV4)"];
"1000119" [label="(Identifier,EthPayloadLength)"];
"1000123" [label="(Identifier,pcrFixIPChecksum)"];
"1000122" [label="(Call,pcrFixIPChecksum | pcrTcpChecksum | pcrFixPHChecksum)"];
"1000206" [label="(Call,m_ParentNBL->TCPHeaderOffset() + PriorityHdrLen)"];
"1000141" [label="(Call,IpHeaderOffset = m_Context->Offload.ipHeaderOffset)"];
"1000120" [label="(Call,pcrIpChecksum | pcrFixIPChecksum | pcrTcpChecksum | pcrFixPHChecksum)"];
"1000157" [label="(Call,(m_ParentNBL->TCI() != 0) ? ETH_PRIORITY_HEADER_SIZE : 0)"];
"1000131" [label="(Call,packetReview.xxpCheckSum == ppresPCSOK)"];
"1000190" [label="(Call,IpHeaderOffset + PriorityHdrLen)"];
"1000130" [label="(Call,packetReview.xxpCheckSum == ppresPCSOK || packetReview.fixedXxpCS)"];
"1000105" [label="(Call,PopulateIPLength(reinterpret_cast<IPv4Header*>(IpHeader), static_cast<USHORT>(EthPayloadLength)))"];
"1000214" [label="(MethodReturn,void)"];
"1000195" [label="(Identifier,VHeader)"];
"1000142" [label="(Identifier,IpHeaderOffset)"];
"1000102" [label="(MethodParameterIn,PVOID IpHeader)"];
"1000143" [label="(Call,m_Context->Offload.ipHeaderOffset)"];
"1000180" [label="(Call,VHeader->hdr_len = (USHORT)(packetReview.XxpIpHeaderSize + IpHeaderOffset + PriorityHdrLen))"];
"1000106" [label="(Call,reinterpret_cast<IPv4Header*>(IpHeader))"];
"1000124" [label="(Call,pcrTcpChecksum | pcrFixPHChecksum)"];
"1000125" [label="(Identifier,pcrTcpChecksum)"];
"1000165" [label="(Identifier,VHeader)"];
"1000133" [label="(Identifier,packetReview)"];
"1000108" [label="(Identifier,IpHeader)"];
"1000150" [label="(Identifier,VHeader)"];
"1000204" [label="(Call,(USHORT)(m_ParentNBL->TCPHeaderOffset() + PriorityHdrLen))"];
"1000184" [label="(Call,(USHORT)(packetReview.XxpIpHeaderSize + IpHeaderOffset + PriorityHdrLen))"];
"1000180" -> "1000139"  [label="AST: "];
"1000180" -> "1000184"  [label="CFG: "];
"1000181" -> "1000180"  [label="AST: "];
"1000184" -> "1000180"  [label="AST: "];
"1000195" -> "1000180"  [label="CFG: "];
"1000180" -> "1000214"  [label="DDG: "];
"1000180" -> "1000214"  [label="DDG: "];
"1000184" -> "1000180"  [label="DDG: "];
"1000184" -> "1000186"  [label="CFG: "];
"1000185" -> "1000184"  [label="AST: "];
"1000186" -> "1000184"  [label="AST: "];
"1000184" -> "1000214"  [label="DDG: "];
"1000113" -> "1000184"  [label="DDG: "];
"1000141" -> "1000184"  [label="DDG: "];
"1000155" -> "1000184"  [label="DDG: "];
"1000113" -> "1000104"  [label="AST: "];
"1000113" -> "1000115"  [label="CFG: "];
"1000114" -> "1000113"  [label="AST: "];
"1000115" -> "1000113"  [label="AST: "];
"1000133" -> "1000113"  [label="CFG: "];
"1000113" -> "1000214"  [label="DDG: "];
"1000113" -> "1000214"  [label="DDG: "];
"1000115" -> "1000113"  [label="DDG: "];
"1000115" -> "1000113"  [label="DDG: "];
"1000115" -> "1000113"  [label="DDG: "];
"1000115" -> "1000113"  [label="DDG: "];
"1000115" -> "1000113"  [label="DDG: "];
"1000113" -> "1000131"  [label="DDG: "];
"1000113" -> "1000130"  [label="DDG: "];
"1000113" -> "1000173"  [label="DDG: "];
"1000113" -> "1000186"  [label="DDG: "];
"1000115" -> "1000128"  [label="CFG: "];
"1000116" -> "1000115"  [label="AST: "];
"1000119" -> "1000115"  [label="AST: "];
"1000120" -> "1000115"  [label="AST: "];
"1000127" -> "1000115"  [label="AST: "];
"1000128" -> "1000115"  [label="AST: "];
"1000115" -> "1000214"  [label="DDG: "];
"1000115" -> "1000214"  [label="DDG: "];
"1000115" -> "1000214"  [label="DDG: "];
"1000115" -> "1000214"  [label="DDG: "];
"1000115" -> "1000214"  [label="DDG: "];
"1000116" -> "1000115"  [label="DDG: "];
"1000109" -> "1000115"  [label="DDG: "];
"1000103" -> "1000115"  [label="DDG: "];
"1000120" -> "1000115"  [label="DDG: "];
"1000120" -> "1000115"  [label="DDG: "];
"1000116" -> "1000118"  [label="CFG: "];
"1000117" -> "1000116"  [label="AST: "];
"1000118" -> "1000116"  [label="AST: "];
"1000119" -> "1000116"  [label="CFG: "];
"1000116" -> "1000214"  [label="DDG: "];
"1000106" -> "1000116"  [label="DDG: "];
"1000102" -> "1000116"  [label="DDG: "];
"1000106" -> "1000105"  [label="AST: "];
"1000106" -> "1000108"  [label="CFG: "];
"1000107" -> "1000106"  [label="AST: "];
"1000108" -> "1000106"  [label="AST: "];
"1000110" -> "1000106"  [label="CFG: "];
"1000106" -> "1000105"  [label="DDG: "];
"1000102" -> "1000106"  [label="DDG: "];
"1000102" -> "1000100"  [label="AST: "];
"1000102" -> "1000214"  [label="DDG: "];
"1000109" -> "1000105"  [label="AST: "];
"1000109" -> "1000111"  [label="CFG: "];
"1000110" -> "1000109"  [label="AST: "];
"1000111" -> "1000109"  [label="AST: "];
"1000105" -> "1000109"  [label="CFG: "];
"1000109" -> "1000105"  [label="DDG: "];
"1000103" -> "1000109"  [label="DDG: "];
"1000103" -> "1000100"  [label="AST: "];
"1000103" -> "1000214"  [label="DDG: "];
"1000120" -> "1000122"  [label="CFG: "];
"1000121" -> "1000120"  [label="AST: "];
"1000122" -> "1000120"  [label="AST: "];
"1000127" -> "1000120"  [label="CFG: "];
"1000120" -> "1000214"  [label="DDG: "];
"1000120" -> "1000214"  [label="DDG: "];
"1000122" -> "1000120"  [label="DDG: "];
"1000122" -> "1000120"  [label="DDG: "];
"1000122" -> "1000124"  [label="CFG: "];
"1000123" -> "1000122"  [label="AST: "];
"1000124" -> "1000122"  [label="AST: "];
"1000122" -> "1000214"  [label="DDG: "];
"1000122" -> "1000214"  [label="DDG: "];
"1000124" -> "1000122"  [label="DDG: "];
"1000124" -> "1000122"  [label="DDG: "];
"1000124" -> "1000126"  [label="CFG: "];
"1000125" -> "1000124"  [label="AST: "];
"1000126" -> "1000124"  [label="AST: "];
"1000124" -> "1000214"  [label="DDG: "];
"1000124" -> "1000214"  [label="DDG: "];
"1000141" -> "1000139"  [label="AST: "];
"1000141" -> "1000143"  [label="CFG: "];
"1000142" -> "1000141"  [label="AST: "];
"1000143" -> "1000141"  [label="AST: "];
"1000150" -> "1000141"  [label="CFG: "];
"1000141" -> "1000214"  [label="DDG: "];
"1000141" -> "1000186"  [label="DDG: "];
"1000141" -> "1000190"  [label="DDG: "];
"1000155" -> "1000139"  [label="AST: "];
"1000155" -> "1000157"  [label="CFG: "];
"1000156" -> "1000155"  [label="AST: "];
"1000157" -> "1000155"  [label="AST: "];
"1000165" -> "1000155"  [label="CFG: "];
"1000155" -> "1000214"  [label="DDG: "];
"1000155" -> "1000186"  [label="DDG: "];
"1000155" -> "1000190"  [label="DDG: "];
"1000155" -> "1000204"  [label="DDG: "];
"1000155" -> "1000206"  [label="DDG: "];
}
