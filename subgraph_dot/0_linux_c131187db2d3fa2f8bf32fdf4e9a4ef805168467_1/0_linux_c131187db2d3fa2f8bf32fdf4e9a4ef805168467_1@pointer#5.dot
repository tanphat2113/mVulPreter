digraph "0_linux_c131187db2d3fa2f8bf32fdf4e9a4ef805168467_1@pointer" {
"1000252" [label="(Call,verbose(env, \"%d: safe\n\", insn_idx))"];
"1000181" [label="(Call,insn_idx >= insn_cnt)"];
"1000185" [label="(Call,verbose(env, \"invalid insn idx %d insn_cnt %d\n\",\n\t\t\t\tinsn_idx, insn_cnt))"];
"1000218" [label="(Call,is_state_visited(env, insn_idx))"];
"1000216" [label="(Call,err = is_state_visited(env, insn_idx))"];
"1000222" [label="(Call,err < 0)"];
"1000225" [label="(Return,return err;)"];
"1000808" [label="(Call,pop_stack(env, &prev_insn_idx, &insn_idx))"];
"1000209" [label="(Call,verbose(env,\n\t\t\t\t\"BPF program is too large. Processed %d insn\n\",\n\t\t\t\tinsn_processed))"];
"1000806" [label="(Call,err = pop_stack(env, &prev_insn_idx, &insn_idx))"];
"1000815" [label="(Call,err < 0)"];
"1000820" [label="(Call,err != -ENOENT)"];
"1000824" [label="(Return,return err;)"];
"1000908" [label="(Call,verbose(env, \"processed %d insns, stack depth %d\n\", insn_processed,\n\t\tenv->prog->aux->stack_depth))"];
"1000187" [label="(Literal,\"invalid insn idx %d insn_cnt %d\n\")"];
"1000256" [label="(ControlStructure,goto process_bpf_exit;)"];
"1000219" [label="(Identifier,env)"];
"1000113" [label="(MethodParameterIn,struct bpf_verifier_env *env)"];
"1000192" [label="(Identifier,EFAULT)"];
"1000806" [label="(Call,err = pop_stack(env, &prev_insn_idx, &insn_idx))"];
"1000908" [label="(Call,verbose(env, \"processed %d insns, stack depth %d\n\", insn_processed,\n\t\tenv->prog->aux->stack_depth))"];
"1000743" [label="(Block,)"];
"1000185" [label="(Call,verbose(env, \"invalid insn idx %d insn_cnt %d\n\",\n\t\t\t\tinsn_idx, insn_cnt))"];
"1000209" [label="(Call,verbose(env,\n\t\t\t\t\"BPF program is too large. Processed %d insn\n\",\n\t\t\t\tinsn_processed))"];
"1000812" [label="(Call,&insn_idx)"];
"1000183" [label="(Identifier,insn_cnt)"];
"1000186" [label="(Identifier,env)"];
"1000212" [label="(Identifier,insn_processed)"];
"1000615" [label="(Call,check_mem_access(env, insn_idx, insn->dst_reg, insn->off,\n\t\t\t\t\t       BPF_SIZE(insn->code), BPF_WRITE,\n\t\t\t\t\t       -1))"];
"1000189" [label="(Identifier,insn_cnt)"];
"1000730" [label="(Call,insn_idx += insn->off + 1)"];
"1000222" [label="(Call,err < 0)"];
"1000224" [label="(Literal,0)"];
"1000822" [label="(Call,-ENOENT)"];
"1000912" [label="(Call,env->prog->aux->stack_depth)"];
"1000221" [label="(ControlStructure,if (err < 0))"];
"1000830" [label="(Identifier,do_print_state)"];
"1000210" [label="(Identifier,env)"];
"1000817" [label="(Literal,0)"];
"1000920" [label="(Literal,0)"];
"1000163" [label="(Call,init_reg_state(env, state->regs))"];
"1000880" [label="(Call,check_ld_imm(env, insn))"];
"1000826" [label="(ControlStructure,break;)"];
"1000218" [label="(Call,is_state_visited(env, insn_idx))"];
"1000226" [label="(Identifier,err)"];
"1000177" [label="(Block,)"];
"1000114" [label="(Block,)"];
"1000126" [label="(Call,insn_cnt = env->prog->len)"];
"1000181" [label="(Call,insn_idx >= insn_cnt)"];
"1000180" [label="(ControlStructure,if (insn_idx >= insn_cnt))"];
"1000814" [label="(ControlStructure,if (err < 0))"];
"1000909" [label="(Identifier,env)"];
"1000253" [label="(Identifier,env)"];
"1000921" [label="(MethodReturn,static int)"];
"1000194" [label="(Identifier,insn)"];
"1000906" [label="(Call,insn_idx++)"];
"1000184" [label="(Block,)"];
"1000816" [label="(Identifier,err)"];
"1000821" [label="(Identifier,err)"];
"1000252" [label="(Call,verbose(env, \"%d: safe\n\", insn_idx))"];
"1000255" [label="(Identifier,insn_idx)"];
"1000220" [label="(Identifier,insn_idx)"];
"1000223" [label="(Identifier,err)"];
"1000225" [label="(Return,return err;)"];
"1000208" [label="(Block,)"];
"1000815" [label="(Call,err < 0)"];
"1000254" [label="(Literal,\"%d: safe\n\")"];
"1000188" [label="(Identifier,insn_idx)"];
"1000825" [label="(Identifier,err)"];
"1000865" [label="(Call,check_ld_abs(env, insn))"];
"1000809" [label="(Identifier,env)"];
"1000911" [label="(Identifier,insn_processed)"];
"1000211" [label="(Literal,\"BPF program is too large. Processed %d insn\n\")"];
"1000799" [label="(Call,check_return_code(env))"];
"1000820" [label="(Call,err != -ENOENT)"];
"1000231" [label="(Identifier,EINVAL)"];
"1000471" [label="(Call,check_xadd(env, insn_idx, insn))"];
"1000173" [label="(Call,insn_idx = 0)"];
"1000807" [label="(Identifier,err)"];
"1000251" [label="(ControlStructure,else)"];
"1000246" [label="(Call,verbose(env, \"\nfrom %d to %d: safe\n\",\n\t\t\t\t\t\tprev_insn_idx, insn_idx))"];
"1000215" [label="(Identifier,E2BIG)"];
"1000216" [label="(Call,err = is_state_visited(env, insn_idx))"];
"1000205" [label="(Call,++insn_processed)"];
"1000819" [label="(ControlStructure,if (err != -ENOENT))"];
"1000824" [label="(Return,return err;)"];
"1000479" [label="(Call,insn_idx++)"];
"1000810" [label="(Call,&prev_insn_idx)"];
"1000910" [label="(Literal,\"processed %d insns, stack depth %d\n\")"];
"1000808" [label="(Call,pop_stack(env, &prev_insn_idx, &insn_idx))"];
"1000217" [label="(Identifier,err)"];
"1000182" [label="(Identifier,insn_idx)"];
"1000252" -> "1000251"  [label="AST: "];
"1000252" -> "1000255"  [label="CFG: "];
"1000253" -> "1000252"  [label="AST: "];
"1000254" -> "1000252"  [label="AST: "];
"1000255" -> "1000252"  [label="AST: "];
"1000256" -> "1000252"  [label="CFG: "];
"1000252" -> "1000921"  [label="DDG: "];
"1000252" -> "1000921"  [label="DDG: "];
"1000252" -> "1000181"  [label="DDG: "];
"1000252" -> "1000808"  [label="DDG: "];
"1000181" -> "1000180"  [label="AST: "];
"1000181" -> "1000183"  [label="CFG: "];
"1000182" -> "1000181"  [label="AST: "];
"1000183" -> "1000181"  [label="AST: "];
"1000186" -> "1000181"  [label="CFG: "];
"1000194" -> "1000181"  [label="CFG: "];
"1000181" -> "1000921"  [label="DDG: "];
"1000181" -> "1000921"  [label="DDG: "];
"1000181" -> "1000921"  [label="DDG: "];
"1000615" -> "1000181"  [label="DDG: "];
"1000906" -> "1000181"  [label="DDG: "];
"1000479" -> "1000181"  [label="DDG: "];
"1000730" -> "1000181"  [label="DDG: "];
"1000246" -> "1000181"  [label="DDG: "];
"1000173" -> "1000181"  [label="DDG: "];
"1000126" -> "1000181"  [label="DDG: "];
"1000181" -> "1000185"  [label="DDG: "];
"1000181" -> "1000185"  [label="DDG: "];
"1000181" -> "1000218"  [label="DDG: "];
"1000185" -> "1000184"  [label="AST: "];
"1000185" -> "1000189"  [label="CFG: "];
"1000186" -> "1000185"  [label="AST: "];
"1000187" -> "1000185"  [label="AST: "];
"1000188" -> "1000185"  [label="AST: "];
"1000189" -> "1000185"  [label="AST: "];
"1000192" -> "1000185"  [label="CFG: "];
"1000185" -> "1000921"  [label="DDG: "];
"1000185" -> "1000921"  [label="DDG: "];
"1000185" -> "1000921"  [label="DDG: "];
"1000185" -> "1000921"  [label="DDG: "];
"1000163" -> "1000185"  [label="DDG: "];
"1000865" -> "1000185"  [label="DDG: "];
"1000880" -> "1000185"  [label="DDG: "];
"1000471" -> "1000185"  [label="DDG: "];
"1000615" -> "1000185"  [label="DDG: "];
"1000808" -> "1000185"  [label="DDG: "];
"1000113" -> "1000185"  [label="DDG: "];
"1000218" -> "1000216"  [label="AST: "];
"1000218" -> "1000220"  [label="CFG: "];
"1000219" -> "1000218"  [label="AST: "];
"1000220" -> "1000218"  [label="AST: "];
"1000216" -> "1000218"  [label="CFG: "];
"1000218" -> "1000921"  [label="DDG: "];
"1000218" -> "1000921"  [label="DDG: "];
"1000218" -> "1000216"  [label="DDG: "];
"1000218" -> "1000216"  [label="DDG: "];
"1000163" -> "1000218"  [label="DDG: "];
"1000865" -> "1000218"  [label="DDG: "];
"1000880" -> "1000218"  [label="DDG: "];
"1000471" -> "1000218"  [label="DDG: "];
"1000615" -> "1000218"  [label="DDG: "];
"1000808" -> "1000218"  [label="DDG: "];
"1000113" -> "1000218"  [label="DDG: "];
"1000216" -> "1000177"  [label="AST: "];
"1000217" -> "1000216"  [label="AST: "];
"1000223" -> "1000216"  [label="CFG: "];
"1000216" -> "1000921"  [label="DDG: "];
"1000216" -> "1000222"  [label="DDG: "];
"1000222" -> "1000221"  [label="AST: "];
"1000222" -> "1000224"  [label="CFG: "];
"1000223" -> "1000222"  [label="AST: "];
"1000224" -> "1000222"  [label="AST: "];
"1000226" -> "1000222"  [label="CFG: "];
"1000231" -> "1000222"  [label="CFG: "];
"1000222" -> "1000921"  [label="DDG: "];
"1000222" -> "1000921"  [label="DDG: "];
"1000222" -> "1000225"  [label="DDG: "];
"1000225" -> "1000221"  [label="AST: "];
"1000225" -> "1000226"  [label="CFG: "];
"1000226" -> "1000225"  [label="AST: "];
"1000921" -> "1000225"  [label="CFG: "];
"1000225" -> "1000921"  [label="DDG: "];
"1000226" -> "1000225"  [label="DDG: "];
"1000808" -> "1000806"  [label="AST: "];
"1000808" -> "1000812"  [label="CFG: "];
"1000809" -> "1000808"  [label="AST: "];
"1000810" -> "1000808"  [label="AST: "];
"1000812" -> "1000808"  [label="AST: "];
"1000806" -> "1000808"  [label="CFG: "];
"1000808" -> "1000921"  [label="DDG: "];
"1000808" -> "1000921"  [label="DDG: "];
"1000808" -> "1000921"  [label="DDG: "];
"1000808" -> "1000209"  [label="DDG: "];
"1000808" -> "1000806"  [label="DDG: "];
"1000808" -> "1000806"  [label="DDG: "];
"1000808" -> "1000806"  [label="DDG: "];
"1000799" -> "1000808"  [label="DDG: "];
"1000246" -> "1000808"  [label="DDG: "];
"1000808" -> "1000908"  [label="DDG: "];
"1000209" -> "1000208"  [label="AST: "];
"1000209" -> "1000212"  [label="CFG: "];
"1000210" -> "1000209"  [label="AST: "];
"1000211" -> "1000209"  [label="AST: "];
"1000212" -> "1000209"  [label="AST: "];
"1000215" -> "1000209"  [label="CFG: "];
"1000209" -> "1000921"  [label="DDG: "];
"1000209" -> "1000921"  [label="DDG: "];
"1000209" -> "1000921"  [label="DDG: "];
"1000163" -> "1000209"  [label="DDG: "];
"1000865" -> "1000209"  [label="DDG: "];
"1000880" -> "1000209"  [label="DDG: "];
"1000471" -> "1000209"  [label="DDG: "];
"1000615" -> "1000209"  [label="DDG: "];
"1000113" -> "1000209"  [label="DDG: "];
"1000205" -> "1000209"  [label="DDG: "];
"1000806" -> "1000743"  [label="AST: "];
"1000807" -> "1000806"  [label="AST: "];
"1000816" -> "1000806"  [label="CFG: "];
"1000806" -> "1000921"  [label="DDG: "];
"1000806" -> "1000815"  [label="DDG: "];
"1000815" -> "1000814"  [label="AST: "];
"1000815" -> "1000817"  [label="CFG: "];
"1000816" -> "1000815"  [label="AST: "];
"1000817" -> "1000815"  [label="AST: "];
"1000821" -> "1000815"  [label="CFG: "];
"1000830" -> "1000815"  [label="CFG: "];
"1000815" -> "1000921"  [label="DDG: "];
"1000815" -> "1000921"  [label="DDG: "];
"1000815" -> "1000820"  [label="DDG: "];
"1000820" -> "1000819"  [label="AST: "];
"1000820" -> "1000822"  [label="CFG: "];
"1000821" -> "1000820"  [label="AST: "];
"1000822" -> "1000820"  [label="AST: "];
"1000825" -> "1000820"  [label="CFG: "];
"1000826" -> "1000820"  [label="CFG: "];
"1000820" -> "1000921"  [label="DDG: "];
"1000820" -> "1000921"  [label="DDG: "];
"1000820" -> "1000921"  [label="DDG: "];
"1000822" -> "1000820"  [label="DDG: "];
"1000820" -> "1000824"  [label="DDG: "];
"1000824" -> "1000819"  [label="AST: "];
"1000824" -> "1000825"  [label="CFG: "];
"1000825" -> "1000824"  [label="AST: "];
"1000921" -> "1000824"  [label="CFG: "];
"1000824" -> "1000921"  [label="DDG: "];
"1000825" -> "1000824"  [label="DDG: "];
"1000908" -> "1000114"  [label="AST: "];
"1000908" -> "1000912"  [label="CFG: "];
"1000909" -> "1000908"  [label="AST: "];
"1000910" -> "1000908"  [label="AST: "];
"1000911" -> "1000908"  [label="AST: "];
"1000912" -> "1000908"  [label="AST: "];
"1000920" -> "1000908"  [label="CFG: "];
"1000908" -> "1000921"  [label="DDG: "];
"1000908" -> "1000921"  [label="DDG: "];
"1000908" -> "1000921"  [label="DDG: "];
"1000908" -> "1000921"  [label="DDG: "];
}
