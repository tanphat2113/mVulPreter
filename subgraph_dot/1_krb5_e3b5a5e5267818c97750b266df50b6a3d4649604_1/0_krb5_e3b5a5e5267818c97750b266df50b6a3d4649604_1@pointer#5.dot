digraph "0_krb5_e3b5a5e5267818c97750b266df50b6a3d4649604_1@pointer" {
"1000269" [label="(Call,(int)data->pa_type)"];
"1000440" [label="(Call,pkiDebug(\"unrecognized pa_type = %d\n\", data->pa_type))"];
"1000876" [label="(Call,data->pa_type == KRB5_PADATA_PK_AS_REQ)"];
"1000874" [label="(Call,retval && data->pa_type == KRB5_PADATA_PK_AS_REQ)"];
"1000885" [label="(Call,pkinit_create_edata(context, plgctx->cryptoctx, reqctx->cryptoctx,\n                                plgctx->idctx, plgctx->opts, retval, &e_data))"];
"1000937" [label="(Call,pkinit_fini_kdc_req_context(context, reqctx))"];
"1000943" [label="(Call,free_krb5_auth_pack_draft9(context, &auth_pack9))"];
"1000947" [label="(Call,(*respond)(arg, retval, modreq, e_data, NULL))"];
"1000905" [label="(Call,(int)data->pa_type)"];
"1000539" [label="(Call,(int)data->pa_type)"];
"1000274" [label="(Block,)"];
"1000501" [label="(Call,retval = KRB5KDC_ERR_INCONSISTENT_KEY_PURPOSE)"];
"1000357" [label="(JumpTarget,case KRB5_PADATA_PK_AS_REP_OLD:)"];
"1000546" [label="(Call,retval = k5int_decode_krb5_auth_pack(&k5data, &auth_pack))"];
"1000538" [label="(ControlStructure,switch ((int)data->pa_type))"];
"1000250" [label="(Call,pkinit_init_kdc_req_context(context, &reqctx))"];
"1000303" [label="(Call,retval = cms_signeddata_verify(context, plgctx->cryptoctx,\n                                       reqctx->cryptoctx, plgctx->idctx, CMS_SIGN_CLIENT,\n                                       plgctx->opts->require_crl_checking,\n                                       (unsigned char *)\n                                       reqp->signedAuthPack.data, reqp->signedAuthPack.length,\n                                       (unsigned char **)&authp_data.data,\n                                       &authp_data.length,\n                                       (unsigned char **)&krb5_authz.data,\n                                       &krb5_authz.length, &is_signed))"];
"1000618" [label="(Call,krb5_set_error_message(context, retval,\n                                   _(\"Anonymous pkinit without DH public \"\n                                     \"value not supported.\")))"];
"1000950" [label="(Identifier,modreq)"];
"1000179" [label="(Call,modreq = NULL)"];
"1000818" [label="(Call,retval = server_check_dh(context, plgctx->cryptoctx,\n                                     reqctx->cryptoctx, plgctx->idctx,\n                                     &auth_pack9->clientPublicValue->algorithm.parameters,\n                                     plgctx->opts->dh_min_bits))"];
"1000275" [label="(JumpTarget,case KRB5_PADATA_PK_AS_REQ:)"];
"1000899" [label="(Identifier,retval)"];
"1000875" [label="(Identifier,retval)"];
"1000937" [label="(Call,pkinit_fini_kdc_req_context(context, reqctx))"];
"1000939" [label="(Identifier,reqctx)"];
"1000439" [label="(JumpTarget,default:)"];
"1000440" [label="(Call,pkiDebug(\"unrecognized pa_type = %d\n\", data->pa_type))"];
"1000873" [label="(ControlStructure,if (retval && data->pa_type == KRB5_PADATA_PK_AS_REQ))"];
"1000887" [label="(Call,plgctx->cryptoctx)"];
"1000278" [label="(Call,retval = k5int_decode_krb5_pa_pk_as_req(&k5data, &reqp))"];
"1000903" [label="(Literal,\"pkinit_create_edata failed\n\")"];
"1000485" [label="(Call,verify_client_eku(context, plgctx, reqctx, &valid_eku))"];
"1000876" [label="(Call,data->pa_type == KRB5_PADATA_PK_AS_REQ)"];
"1000479" [label="(Call,retval = KRB5KDC_ERR_CLIENT_NAME_MISMATCH)"];
"1000118" [label="(MethodParameterIn,void *arg)"];
"1000361" [label="(Call,retval = k5int_decode_krb5_pa_pk_as_req_draft9(&k5data, &reqp9))"];
"1000580" [label="(Call,server_check_dh(context, plgctx->cryptoctx,\n                                     reqctx->cryptoctx, plgctx->idctx,\n                                     &auth_pack->clientPublicValue->algorithm.parameters,\n                                     plgctx->opts->dh_min_bits))"];
"1000820" [label="(Call,server_check_dh(context, plgctx->cryptoctx,\n                                     reqctx->cryptoctx, plgctx->idctx,\n                                     &auth_pack9->clientPublicValue->algorithm.parameters,\n                                     plgctx->opts->dh_min_bits))"];
"1000559" [label="(Call,retval = krb5_check_clockskew(context,\n                                      auth_pack->pkAuthenticator.ctime))"];
"1000904" [label="(ControlStructure,switch ((int)data->pa_type))"];
"1000944" [label="(Identifier,context)"];
"1000541" [label="(Call,data->pa_type)"];
"1000752" [label="(Call,retval = pkinit_check_kdc_pkid(context, plgctx->cryptoctx,\n                                           reqctx->cryptoctx, plgctx->idctx,\n                                           (unsigned char *)reqp->kdcPkId.data,\n                                           reqp->kdcPkId.length, &valid_kdcPkId))"];
"1000933" [label="(ControlStructure,if (reqctx != NULL))"];
"1000797" [label="(JumpTarget,case KRB5_PADATA_PK_AS_REQ_OLD:)"];
"1000905" [label="(Call,(int)data->pa_type)"];
"1000483" [label="(Call,retval = verify_client_eku(context, plgctx, reqctx, &valid_eku))"];
"1000890" [label="(Call,reqctx->cryptoctx)"];
"1000949" [label="(Identifier,retval)"];
"1000268" [label="(ControlStructure,switch ((int)data->pa_type))"];
"1000119" [label="(Block,)"];
"1000948" [label="(Identifier,arg)"];
"1000921" [label="(JumpTarget,case KRB5_PADATA_PK_AS_REQ_OLD:)"];
"1000934" [label="(Call,reqctx != NULL)"];
"1000947" [label="(Call,(*respond)(arg, retval, modreq, e_data, NULL))"];
"1000907" [label="(Call,data->pa_type)"];
"1000800" [label="(Call,k5int_decode_krb5_auth_pack_draft9(&k5data, &auth_pack9))"];
"1000798" [label="(Call,retval = k5int_decode_krb5_auth_pack_draft9(&k5data, &auth_pack9))"];
"1000109" [label="(MethodParameterIn,krb5_context context)"];
"1000942" [label="(Identifier,auth_pack)"];
"1000458" [label="(Call,retval = verify_client_san(context, plgctx, reqctx, request->client,\n                                   &valid_san))"];
"1000358" [label="(JumpTarget,case KRB5_PADATA_PK_AS_REQ_OLD:)"];
"1000445" [label="(Call,retval = EINVAL)"];
"1000938" [label="(Identifier,context)"];
"1000545" [label="(JumpTarget,case KRB5_PADATA_PK_AS_REQ:)"];
"1000861" [label="(Identifier,enc_tkt_reply)"];
"1000945" [label="(Call,&auth_pack9)"];
"1000519" [label="(Call,krb5_set_error_message(context, retval,\n                                   _(\"Pkinit request not signed, but client \"\n                                     \"not anonymous.\")))"];
"1000927" [label="(Identifier,authp_data)"];
"1000896" [label="(Call,plgctx->opts)"];
"1000796" [label="(JumpTarget,case KRB5_PADATA_PK_AS_REP_OLD:)"];
"1000900" [label="(Call,&e_data)"];
"1000446" [label="(Identifier,retval)"];
"1000509" [label="(Call,krb5_principal_compare(context, request->client,\n                                    krb5_anonymous_principal()))"];
"1000460" [label="(Call,verify_client_san(context, plgctx, reqctx, request->client,\n                                   &valid_san))"];
"1000578" [label="(Call,retval = server_check_dh(context, plgctx->cryptoctx,\n                                     reqctx->cryptoctx, plgctx->idctx,\n                                     &auth_pack->clientPublicValue->algorithm.parameters,\n                                     plgctx->opts->dh_min_bits))"];
"1000388" [label="(Call,cms_signeddata_verify(context, plgctx->cryptoctx,\n                                       reqctx->cryptoctx, plgctx->idctx, CMS_SIGN_DRAFT9,\n                                       plgctx->opts->require_crl_checking,\n                                       (unsigned char *)\n                                       reqp9->signedAuthPack.data, reqp9->signedAuthPack.length,\n                                       (unsigned char **)&authp_data.data,\n                                       &authp_data.length,\n                                       (unsigned char **)&krb5_authz.data,\n                                       &krb5_authz.length, NULL))"];
"1000248" [label="(Call,retval = pkinit_init_kdc_req_context(context, &reqctx))"];
"1000920" [label="(JumpTarget,case KRB5_PADATA_PK_AS_REP_OLD:)"];
"1000883" [label="(Literal,\"pkinit_verify_padata failed: creating e-data\n\")"];
"1000877" [label="(Call,data->pa_type)"];
"1000864" [label="(Call,modreq = (krb5_kdcpreauth_modreq)reqctx)"];
"1000953" [label="(MethodReturn,RET)"];
"1000269" [label="(Call,(int)data->pa_type)"];
"1000539" [label="(Call,(int)data->pa_type)"];
"1000911" [label="(JumpTarget,case KRB5_PADATA_PK_AS_REQ:)"];
"1000386" [label="(Call,retval = cms_signeddata_verify(context, plgctx->cryptoctx,\n                                       reqctx->cryptoctx, plgctx->idctx, CMS_SIGN_DRAFT9,\n                                       plgctx->opts->require_crl_checking,\n                                       (unsigned char *)\n                                       reqp9->signedAuthPack.data, reqp9->signedAuthPack.length,\n                                       (unsigned char **)&authp_data.data,\n                                       &authp_data.length,\n                                       (unsigned char **)&krb5_authz.data,\n                                       &krb5_authz.length, NULL))"];
"1000175" [label="(Call,**e_data = NULL)"];
"1000874" [label="(Call,retval && data->pa_type == KRB5_PADATA_PK_AS_REQ)"];
"1000271" [label="(Call,data->pa_type)"];
"1000880" [label="(Identifier,KRB5_PADATA_PK_AS_REQ)"];
"1000754" [label="(Call,pkinit_check_kdc_pkid(context, plgctx->cryptoctx,\n                                           reqctx->cryptoctx, plgctx->idctx,\n                                           (unsigned char *)reqp->kdcPkId.data,\n                                           reqp->kdcPkId.length, &valid_kdcPkId))"];
"1000884" [label="(ControlStructure,if (pkinit_create_edata(context, plgctx->cryptoctx, reqctx->cryptoctx,\n                                plgctx->idctx, plgctx->opts, retval, &e_data)))"];
"1000893" [label="(Call,plgctx->idctx)"];
"1000886" [label="(Identifier,context)"];
"1000943" [label="(Call,free_krb5_auth_pack_draft9(context, &auth_pack9))"];
"1000951" [label="(Identifier,e_data)"];
"1000305" [label="(Call,cms_signeddata_verify(context, plgctx->cryptoctx,\n                                       reqctx->cryptoctx, plgctx->idctx, CMS_SIGN_CLIENT,\n                                       plgctx->opts->require_crl_checking,\n                                       (unsigned char *)\n                                       reqp->signedAuthPack.data, reqp->signedAuthPack.length,\n                                       (unsigned char **)&authp_data.data,\n                                       &authp_data.length,\n                                       (unsigned char **)&krb5_authz.data,\n                                       &krb5_authz.length, &is_signed))"];
"1000885" [label="(Call,pkinit_create_edata(context, plgctx->cryptoctx, reqctx->cryptoctx,\n                                plgctx->idctx, plgctx->opts, retval, &e_data))"];
"1000631" [label="(Call,krb5_c_make_checksum(context, CKSUMTYPE_NIST_SHA, NULL,\n                                      0, der_req, &cksum))"];
"1000735" [label="(Call,retval = KRB5KDC_ERR_PA_CHECKSUM_MUST_BE_INCLUDED)"];
"1000952" [label="(Identifier,NULL)"];
"1000442" [label="(Call,data->pa_type)"];
"1000561" [label="(Call,krb5_check_clockskew(context,\n                                      auth_pack->pkAuthenticator.ctime))"];
"1000629" [label="(Call,retval = krb5_c_make_checksum(context, CKSUMTYPE_NIST_SHA, NULL,\n                                      0, der_req, &cksum))"];
"1000441" [label="(Literal,\"unrecognized pa_type = %d\n\")"];
"1000269" -> "1000268"  [label="AST: "];
"1000269" -> "1000271"  [label="CFG: "];
"1000270" -> "1000269"  [label="AST: "];
"1000271" -> "1000269"  [label="AST: "];
"1000275" -> "1000269"  [label="CFG: "];
"1000357" -> "1000269"  [label="CFG: "];
"1000358" -> "1000269"  [label="CFG: "];
"1000439" -> "1000269"  [label="CFG: "];
"1000269" -> "1000440"  [label="DDG: "];
"1000269" -> "1000539"  [label="DDG: "];
"1000269" -> "1000876"  [label="DDG: "];
"1000269" -> "1000905"  [label="DDG: "];
"1000440" -> "1000274"  [label="AST: "];
"1000440" -> "1000442"  [label="CFG: "];
"1000441" -> "1000440"  [label="AST: "];
"1000442" -> "1000440"  [label="AST: "];
"1000446" -> "1000440"  [label="CFG: "];
"1000440" -> "1000953"  [label="DDG: "];
"1000440" -> "1000876"  [label="DDG: "];
"1000440" -> "1000905"  [label="DDG: "];
"1000876" -> "1000874"  [label="AST: "];
"1000876" -> "1000880"  [label="CFG: "];
"1000877" -> "1000876"  [label="AST: "];
"1000880" -> "1000876"  [label="AST: "];
"1000874" -> "1000876"  [label="CFG: "];
"1000876" -> "1000953"  [label="DDG: "];
"1000876" -> "1000874"  [label="DDG: "];
"1000876" -> "1000874"  [label="DDG: "];
"1000539" -> "1000876"  [label="DDG: "];
"1000876" -> "1000905"  [label="DDG: "];
"1000874" -> "1000873"  [label="AST: "];
"1000874" -> "1000875"  [label="CFG: "];
"1000875" -> "1000874"  [label="AST: "];
"1000883" -> "1000874"  [label="CFG: "];
"1000906" -> "1000874"  [label="CFG: "];
"1000874" -> "1000953"  [label="DDG: "];
"1000874" -> "1000953"  [label="DDG: "];
"1000578" -> "1000874"  [label="DDG: "];
"1000629" -> "1000874"  [label="DDG: "];
"1000559" -> "1000874"  [label="DDG: "];
"1000458" -> "1000874"  [label="DDG: "];
"1000303" -> "1000874"  [label="DDG: "];
"1000752" -> "1000874"  [label="DDG: "];
"1000501" -> "1000874"  [label="DDG: "];
"1000519" -> "1000874"  [label="DDG: "];
"1000546" -> "1000874"  [label="DDG: "];
"1000735" -> "1000874"  [label="DDG: "];
"1000278" -> "1000874"  [label="DDG: "];
"1000483" -> "1000874"  [label="DDG: "];
"1000445" -> "1000874"  [label="DDG: "];
"1000798" -> "1000874"  [label="DDG: "];
"1000386" -> "1000874"  [label="DDG: "];
"1000479" -> "1000874"  [label="DDG: "];
"1000818" -> "1000874"  [label="DDG: "];
"1000361" -> "1000874"  [label="DDG: "];
"1000618" -> "1000874"  [label="DDG: "];
"1000248" -> "1000874"  [label="DDG: "];
"1000874" -> "1000885"  [label="DDG: "];
"1000874" -> "1000947"  [label="DDG: "];
"1000885" -> "1000884"  [label="AST: "];
"1000885" -> "1000900"  [label="CFG: "];
"1000886" -> "1000885"  [label="AST: "];
"1000887" -> "1000885"  [label="AST: "];
"1000890" -> "1000885"  [label="AST: "];
"1000893" -> "1000885"  [label="AST: "];
"1000896" -> "1000885"  [label="AST: "];
"1000899" -> "1000885"  [label="AST: "];
"1000900" -> "1000885"  [label="AST: "];
"1000903" -> "1000885"  [label="CFG: "];
"1000906" -> "1000885"  [label="CFG: "];
"1000885" -> "1000953"  [label="DDG: "];
"1000885" -> "1000953"  [label="DDG: "];
"1000885" -> "1000953"  [label="DDG: "];
"1000885" -> "1000953"  [label="DDG: "];
"1000885" -> "1000953"  [label="DDG: "];
"1000885" -> "1000953"  [label="DDG: "];
"1000485" -> "1000885"  [label="DDG: "];
"1000460" -> "1000885"  [label="DDG: "];
"1000250" -> "1000885"  [label="DDG: "];
"1000754" -> "1000885"  [label="DDG: "];
"1000754" -> "1000885"  [label="DDG: "];
"1000754" -> "1000885"  [label="DDG: "];
"1000754" -> "1000885"  [label="DDG: "];
"1000305" -> "1000885"  [label="DDG: "];
"1000305" -> "1000885"  [label="DDG: "];
"1000305" -> "1000885"  [label="DDG: "];
"1000305" -> "1000885"  [label="DDG: "];
"1000580" -> "1000885"  [label="DDG: "];
"1000580" -> "1000885"  [label="DDG: "];
"1000580" -> "1000885"  [label="DDG: "];
"1000580" -> "1000885"  [label="DDG: "];
"1000618" -> "1000885"  [label="DDG: "];
"1000509" -> "1000885"  [label="DDG: "];
"1000820" -> "1000885"  [label="DDG: "];
"1000820" -> "1000885"  [label="DDG: "];
"1000820" -> "1000885"  [label="DDG: "];
"1000820" -> "1000885"  [label="DDG: "];
"1000519" -> "1000885"  [label="DDG: "];
"1000388" -> "1000885"  [label="DDG: "];
"1000388" -> "1000885"  [label="DDG: "];
"1000388" -> "1000885"  [label="DDG: "];
"1000388" -> "1000885"  [label="DDG: "];
"1000561" -> "1000885"  [label="DDG: "];
"1000631" -> "1000885"  [label="DDG: "];
"1000109" -> "1000885"  [label="DDG: "];
"1000885" -> "1000937"  [label="DDG: "];
"1000885" -> "1000943"  [label="DDG: "];
"1000885" -> "1000947"  [label="DDG: "];
"1000937" -> "1000933"  [label="AST: "];
"1000937" -> "1000939"  [label="CFG: "];
"1000938" -> "1000937"  [label="AST: "];
"1000939" -> "1000937"  [label="AST: "];
"1000942" -> "1000937"  [label="CFG: "];
"1000937" -> "1000953"  [label="DDG: "];
"1000937" -> "1000953"  [label="DDG: "];
"1000485" -> "1000937"  [label="DDG: "];
"1000460" -> "1000937"  [label="DDG: "];
"1000250" -> "1000937"  [label="DDG: "];
"1000754" -> "1000937"  [label="DDG: "];
"1000305" -> "1000937"  [label="DDG: "];
"1000580" -> "1000937"  [label="DDG: "];
"1000618" -> "1000937"  [label="DDG: "];
"1000509" -> "1000937"  [label="DDG: "];
"1000820" -> "1000937"  [label="DDG: "];
"1000519" -> "1000937"  [label="DDG: "];
"1000388" -> "1000937"  [label="DDG: "];
"1000561" -> "1000937"  [label="DDG: "];
"1000631" -> "1000937"  [label="DDG: "];
"1000109" -> "1000937"  [label="DDG: "];
"1000934" -> "1000937"  [label="DDG: "];
"1000937" -> "1000943"  [label="DDG: "];
"1000943" -> "1000119"  [label="AST: "];
"1000943" -> "1000945"  [label="CFG: "];
"1000944" -> "1000943"  [label="AST: "];
"1000945" -> "1000943"  [label="AST: "];
"1000948" -> "1000943"  [label="CFG: "];
"1000943" -> "1000953"  [label="DDG: "];
"1000943" -> "1000953"  [label="DDG: "];
"1000943" -> "1000953"  [label="DDG: "];
"1000485" -> "1000943"  [label="DDG: "];
"1000460" -> "1000943"  [label="DDG: "];
"1000250" -> "1000943"  [label="DDG: "];
"1000754" -> "1000943"  [label="DDG: "];
"1000305" -> "1000943"  [label="DDG: "];
"1000580" -> "1000943"  [label="DDG: "];
"1000618" -> "1000943"  [label="DDG: "];
"1000509" -> "1000943"  [label="DDG: "];
"1000820" -> "1000943"  [label="DDG: "];
"1000519" -> "1000943"  [label="DDG: "];
"1000388" -> "1000943"  [label="DDG: "];
"1000561" -> "1000943"  [label="DDG: "];
"1000631" -> "1000943"  [label="DDG: "];
"1000109" -> "1000943"  [label="DDG: "];
"1000800" -> "1000943"  [label="DDG: "];
"1000947" -> "1000119"  [label="AST: "];
"1000947" -> "1000952"  [label="CFG: "];
"1000948" -> "1000947"  [label="AST: "];
"1000949" -> "1000947"  [label="AST: "];
"1000950" -> "1000947"  [label="AST: "];
"1000951" -> "1000947"  [label="AST: "];
"1000952" -> "1000947"  [label="AST: "];
"1000953" -> "1000947"  [label="CFG: "];
"1000947" -> "1000953"  [label="DDG: "];
"1000947" -> "1000953"  [label="DDG: "];
"1000947" -> "1000953"  [label="DDG: "];
"1000947" -> "1000953"  [label="DDG: "];
"1000947" -> "1000953"  [label="DDG: "];
"1000947" -> "1000953"  [label="DDG: "];
"1000118" -> "1000947"  [label="DDG: "];
"1000864" -> "1000947"  [label="DDG: "];
"1000179" -> "1000947"  [label="DDG: "];
"1000175" -> "1000947"  [label="DDG: "];
"1000934" -> "1000947"  [label="DDG: "];
"1000905" -> "1000904"  [label="AST: "];
"1000905" -> "1000907"  [label="CFG: "];
"1000906" -> "1000905"  [label="AST: "];
"1000907" -> "1000905"  [label="AST: "];
"1000911" -> "1000905"  [label="CFG: "];
"1000920" -> "1000905"  [label="CFG: "];
"1000921" -> "1000905"  [label="CFG: "];
"1000927" -> "1000905"  [label="CFG: "];
"1000905" -> "1000953"  [label="DDG: "];
"1000905" -> "1000953"  [label="DDG: "];
"1000539" -> "1000905"  [label="DDG: "];
"1000539" -> "1000538"  [label="AST: "];
"1000539" -> "1000541"  [label="CFG: "];
"1000540" -> "1000539"  [label="AST: "];
"1000541" -> "1000539"  [label="AST: "];
"1000545" -> "1000539"  [label="CFG: "];
"1000796" -> "1000539"  [label="CFG: "];
"1000797" -> "1000539"  [label="CFG: "];
"1000861" -> "1000539"  [label="CFG: "];
}
