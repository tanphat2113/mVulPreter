digraph "0_linux_0d62e9dd6da45bbf0f33a8617afc5fe774c8f45f@pointer" {
"1000919" [label="(Call,errmsg = \"Cons length error\")"];
"1000953" [label="(Call,pr_debug(\"\nASN1: %s [m=%zu d=%zu ot=%02x t=%02x l=%zu]\n\",\n\t\t errmsg, pc, dp, optag, tag, len))"];
"1000949" [label="(Call,errmsg = \"Long tag not supported\")"];
"1000678" [label="(Call,pr_debug(\"- end cons t=%zu dp=%zu l=%zu/%zu\n\",\n\t\t\t tdp, dp, len, datalen))"];
"1000921" [label="(Literal,\"Cons length error\")"];
"1000953" [label="(Call,pr_debug(\"\nASN1: %s [m=%zu d=%zu ot=%02x t=%02x l=%zu]\n\",\n\t\t errmsg, pc, dp, optag, tag, len))"];
"1000274" [label="(Call,tag & 0x1f)"];
"1000736" [label="(Call,len = dp - tdp - 2)"];
"1000269" [label="(Call,dp++)"];
"1000959" [label="(Identifier,tag)"];
"1000370" [label="(Call,datalen - dp)"];
"1000116" [label="(Block,)"];
"1000422" [label="(Call,datalen - dp)"];
"1000934" [label="(Call,errmsg = \"Unsupported length\")"];
"1000732" [label="(Call,dp++)"];
"1000492" [label="(Call,actions[machine[pc + 1]](context, hdr, tag, data + dp, len))"];
"1000352" [label="(Call,len == ASN1_INDEFINITE_LENGTH)"];
"1000960" [label="(Identifier,len)"];
"1000894" [label="(Call,errmsg = \"Machine overrun error\")"];
"1000954" [label="(Literal,\"\nASN1: %s [m=%zu d=%zu ot=%02x t=%02x l=%zu]\n\")"];
"1000957" [label="(Identifier,dp)"];
"1000777" [label="(Call,pr_debug(\"- cons len l=%zu d=%zu\n\", len, dp - tdp))"];
"1000924" [label="(Call,errmsg = \"Missing EOC in indefinite len cons\")"];
"1000565" [label="(Call,pr_debug(\"- LEAF: %zu\n\", len))"];
"1000747" [label="(Call,dp < len)"];
"1000170" [label="(Call,len = 0)"];
"1000904" [label="(Call,errmsg = \"Jump stack overflow\")"];
"1000944" [label="(Call,errmsg = \"Unexpected tag\")"];
"1000939" [label="(Call,errmsg = \"Indefinite len primitive not permitted\")"];
"1000899" [label="(Call,errmsg = \"Jump stack underflow\")"];
"1000200" [label="(Call,pc >= machlen)"];
"1000963" [label="(Identifier,EBADMSG)"];
"1000704" [label="(Call,dp++)"];
"1000472" [label="(Call,pr_debug(\"- TAG: %02x %zu%s\n\",\n\t\t\t tag, len, flags & FLAG_CONS ? \" CONS\" : \"\"))"];
"1000922" [label="(ControlStructure,goto error;)"];
"1000958" [label="(Identifier,optag)"];
"1000889" [label="(Call,errmsg = \"Data overrun error\")"];
"1000956" [label="(Identifier,pc)"];
"1000390" [label="(Call,dp >= datalen - n)"];
"1000312" [label="(Call,pr_debug(\"- match? %02x %02x %02x\n\", tag, optag, tmp))"];
"1000149" [label="(Call,optag = 0)"];
"1000810" [label="(Call,actions[act](context, hdr, 0, data + tdp, len))"];
"1000695" [label="(Call,datalen - dp)"];
"1000190" [label="(Call,pr_debug(\"next_op: pc=\e[32m%zu\e[m/%zu dp=\e[33m%zu\e[m/%zu C=%d J=%d\n\",\n\t\t pc, machlen, dp, datalen, csp, jsp))"];
"1000359" [label="(Call,tag & ASN1_CONS_BIT)"];
"1000929" [label="(Call,errmsg = \"Invalid length EOC\")"];
"1000346" [label="(Call,len > 0x7f)"];
"1000964" [label="(MethodReturn,int)"];
"1000284" [label="(Call,pr_debug(\"- any %02x\n\", tag))"];
"1000343" [label="(Call,dp++)"];
"1000909" [label="(Call,errmsg = \"Cons stack underflow\")"];
"1000259" [label="(Call,dp >= datalen - 1)"];
"1000770" [label="(Call,dp != len)"];
"1000512" [label="(Call,actions[machine[pc + 2]](context, hdr, tag, data + dp, len))"];
"1000379" [label="(Call,len - 0x80)"];
"1000840" [label="(Call,actions[machine[pc + 1]](context, hdr, tag, data + tdp, len))"];
"1000137" [label="(Call,tag = 0)"];
"1000420" [label="(Call,len > datalen - dp)"];
"1000919" [label="(Call,errmsg = \"Cons length error\")"];
"1000955" [label="(Identifier,errmsg)"];
"1000914" [label="(Call,errmsg = \"Cons stack overflow\")"];
"1000920" [label="(Identifier,errmsg)"];
"1000919" -> "1000116"  [label="AST: "];
"1000919" -> "1000921"  [label="CFG: "];
"1000920" -> "1000919"  [label="AST: "];
"1000921" -> "1000919"  [label="AST: "];
"1000922" -> "1000919"  [label="CFG: "];
"1000919" -> "1000953"  [label="DDG: "];
"1000953" -> "1000116"  [label="AST: "];
"1000953" -> "1000960"  [label="CFG: "];
"1000954" -> "1000953"  [label="AST: "];
"1000955" -> "1000953"  [label="AST: "];
"1000956" -> "1000953"  [label="AST: "];
"1000957" -> "1000953"  [label="AST: "];
"1000958" -> "1000953"  [label="AST: "];
"1000959" -> "1000953"  [label="AST: "];
"1000960" -> "1000953"  [label="AST: "];
"1000963" -> "1000953"  [label="CFG: "];
"1000953" -> "1000964"  [label="DDG: "];
"1000953" -> "1000964"  [label="DDG: "];
"1000953" -> "1000964"  [label="DDG: "];
"1000953" -> "1000964"  [label="DDG: "];
"1000953" -> "1000964"  [label="DDG: "];
"1000953" -> "1000964"  [label="DDG: "];
"1000953" -> "1000964"  [label="DDG: "];
"1000934" -> "1000953"  [label="DDG: "];
"1000904" -> "1000953"  [label="DDG: "];
"1000894" -> "1000953"  [label="DDG: "];
"1000924" -> "1000953"  [label="DDG: "];
"1000949" -> "1000953"  [label="DDG: "];
"1000889" -> "1000953"  [label="DDG: "];
"1000939" -> "1000953"  [label="DDG: "];
"1000944" -> "1000953"  [label="DDG: "];
"1000929" -> "1000953"  [label="DDG: "];
"1000914" -> "1000953"  [label="DDG: "];
"1000899" -> "1000953"  [label="DDG: "];
"1000909" -> "1000953"  [label="DDG: "];
"1000200" -> "1000953"  [label="DDG: "];
"1000259" -> "1000953"  [label="DDG: "];
"1000695" -> "1000953"  [label="DDG: "];
"1000370" -> "1000953"  [label="DDG: "];
"1000190" -> "1000953"  [label="DDG: "];
"1000343" -> "1000953"  [label="DDG: "];
"1000422" -> "1000953"  [label="DDG: "];
"1000704" -> "1000953"  [label="DDG: "];
"1000390" -> "1000953"  [label="DDG: "];
"1000269" -> "1000953"  [label="DDG: "];
"1000770" -> "1000953"  [label="DDG: "];
"1000770" -> "1000953"  [label="DDG: "];
"1000732" -> "1000953"  [label="DDG: "];
"1000312" -> "1000953"  [label="DDG: "];
"1000312" -> "1000953"  [label="DDG: "];
"1000149" -> "1000953"  [label="DDG: "];
"1000284" -> "1000953"  [label="DDG: "];
"1000840" -> "1000953"  [label="DDG: "];
"1000840" -> "1000953"  [label="DDG: "];
"1000274" -> "1000953"  [label="DDG: "];
"1000492" -> "1000953"  [label="DDG: "];
"1000492" -> "1000953"  [label="DDG: "];
"1000359" -> "1000953"  [label="DDG: "];
"1000137" -> "1000953"  [label="DDG: "];
"1000512" -> "1000953"  [label="DDG: "];
"1000512" -> "1000953"  [label="DDG: "];
"1000472" -> "1000953"  [label="DDG: "];
"1000472" -> "1000953"  [label="DDG: "];
"1000810" -> "1000953"  [label="DDG: "];
"1000352" -> "1000953"  [label="DDG: "];
"1000346" -> "1000953"  [label="DDG: "];
"1000379" -> "1000953"  [label="DDG: "];
"1000565" -> "1000953"  [label="DDG: "];
"1000420" -> "1000953"  [label="DDG: "];
"1000736" -> "1000953"  [label="DDG: "];
"1000170" -> "1000953"  [label="DDG: "];
"1000777" -> "1000953"  [label="DDG: "];
"1000678" -> "1000953"  [label="DDG: "];
"1000747" -> "1000953"  [label="DDG: "];
}
