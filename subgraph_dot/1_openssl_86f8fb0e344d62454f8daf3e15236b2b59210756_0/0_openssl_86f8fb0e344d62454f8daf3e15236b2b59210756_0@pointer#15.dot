digraph "0_openssl_86f8fb0e344d62454f8daf3e15236b2b59210756_0@pointer" {
"1000426" [label="(Call,s->s2->tmp.clear + s->s2->tmp.enc)"];
"1000328" [label="(Call,(unsigned long)s->s2->tmp.clear)"];
"1000239" [label="(Call,s->s2->tmp.clear = i)"];
"1000236" [label="(Call,n2s(p, i))"];
"1000233" [label="(Call,p += 3)"];
"1000210" [label="(Call,ssl2_get_cipher_by_char(p))"];
"1000183" [label="(Call,p++)"];
"1000129" [label="(Call,p = (unsigned char *)s->init_buf->data)"];
"1000131" [label="(Call,(unsigned char *)s->init_buf->data)"];
"1000163" [label="(Call,i < (10 - s->init_num))"];
"1000145" [label="(Call,i = ssl2_read(s, (char *)&(p[s->init_num]), 10 - s->init_num))"];
"1000147" [label="(Call,ssl2_read(s, (char *)&(p[s->init_num]), 10 - s->init_num))"];
"1000117" [label="(MethodParameterIn,SSL *s)"];
"1000149" [label="(Call,(char *)&(p[s->init_num]))"];
"1000157" [label="(Call,10 - s->init_num)"];
"1000165" [label="(Call,10 - s->init_num)"];
"1000338" [label="(Call,(unsigned long)s->s2->tmp.enc)"];
"1000251" [label="(Call,s->s2->tmp.enc = i)"];
"1000248" [label="(Call,n2s(p, i))"];
"1000233" [label="(Call,p += 3)"];
"1000129" [label="(Call,p = (unsigned char *)s->init_buf->data)"];
"1000327" [label="(Call,(unsigned long)s->s2->tmp.clear + (unsigned long)s->s2->tmp.enc +\n        (unsigned long)keya)"];
"1000166" [label="(Literal,10)"];
"1000427" [label="(Call,s->s2->tmp.clear)"];
"1000117" [label="(MethodParameterIn,SSL *s)"];
"1000164" [label="(Identifier,i)"];
"1000251" [label="(Call,s->s2->tmp.enc = i)"];
"1000434" [label="(Call,s->s2->tmp.enc)"];
"1000804" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000238" [label="(Identifier,i)"];
"1000261" [label="(Identifier,p)"];
"1000172" [label="(Identifier,s)"];
"1000162" [label="(ControlStructure,if (i < (10 - s->init_num)))"];
"1000249" [label="(Identifier,p)"];
"1000975" [label="(Call,ssl2_return_error(s, SSL2_PE_NO_CERTIFICATE))"];
"1000159" [label="(Call,s->init_num)"];
"1000323" [label="(Call,len =\n        10 + (unsigned long)s->s2->tmp.clear + (unsigned long)s->s2->tmp.enc +\n        (unsigned long)keya)"];
"1000337" [label="(Call,(unsigned long)s->s2->tmp.enc +\n        (unsigned long)keya)"];
"1000182" [label="(Call,*(p++))"];
"1000675" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000400" [label="(Call,s->msg_callback(0, s->version, 0, p, (size_t)len, s,\n                        s->msg_callback_arg))"];
"1001004" [label="(Call,ssl_bytes_to_cipher_list(s, p, s->s2->tmp.cipher_spec_length,\n                                      &s->session->ciphers))"];
"1000268" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000840" [label="(Call,ssl2_part_read(s, SSL_F_GET_CLIENT_HELLO, i))"];
"1000913" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000148" [label="(Identifier,s)"];
"1000328" [label="(Call,(unsigned long)s->s2->tmp.clear)"];
"1000234" [label="(Identifier,p)"];
"1000255" [label="(Identifier,s)"];
"1000424" [label="(Call,p[s->s2->tmp.clear + s->s2->tmp.enc])"];
"1000211" [label="(Identifier,p)"];
"1000248" [label="(Call,n2s(p, i))"];
"1001166" [label="(MethodReturn,static int)"];
"1000145" [label="(Call,i = ssl2_read(s, (char *)&(p[s->init_num]), 10 - s->init_num))"];
"1000643" [label="(Call,i += s->s2->tmp.clear)"];
"1000468" [label="(Call,ssl_rsa_private_decrypt(s->cert, s->s2->tmp.enc,\n                                &(p[s->s2->tmp.clear]),\n                                &(p[s->s2->tmp.clear]),\n                                (s->s2->ssl2_rollback) ? RSA_SSLV23_PADDING :\n                                RSA_PKCS1_PADDING))"];
"1000240" [label="(Call,s->s2->tmp.clear)"];
"1000144" [label="(Block,)"];
"1000355" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000157" [label="(Call,10 - s->init_num)"];
"1001135" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000259" [label="(Identifier,i)"];
"1000745" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000147" [label="(Call,ssl2_read(s, (char *)&(p[s->init_num]), 10 - s->init_num))"];
"1000236" [label="(Call,n2s(p, i))"];
"1000986" [label="(Call,ssl_get_new_session(s, 1))"];
"1000165" [label="(Call,10 - s->init_num)"];
"1000237" [label="(Identifier,p)"];
"1000260" [label="(Call,n2s(p, i))"];
"1000824" [label="(Call,ssl2_read(s, (char *)&(p[s->init_num]), n))"];
"1000960" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000130" [label="(Identifier,p)"];
"1000141" [label="(Identifier,s)"];
"1000146" [label="(Identifier,i)"];
"1000340" [label="(Call,s->s2->tmp.enc)"];
"1000426" [label="(Call,s->s2->tmp.clear + s->s2->tmp.enc)"];
"1000990" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000208" [label="(Call,cp = ssl2_get_cipher_by_char(p))"];
"1000375" [label="(Call,ssl2_read(s, (char *)&(p[s->init_num]), n))"];
"1000183" [label="(Call,p++)"];
"1000210" [label="(Call,ssl2_get_cipher_by_char(p))"];
"1000252" [label="(Call,s->s2->tmp.enc)"];
"1000338" [label="(Call,(unsigned long)s->s2->tmp.enc)"];
"1000849" [label="(Call,s->msg_callback(0, s->version, 0, p, (size_t)len, s,\n                        s->msg_callback_arg))"];
"1000195" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000163" [label="(Call,i < (10 - s->init_num))"];
"1000167" [label="(Call,s->init_num)"];
"1000235" [label="(Literal,3)"];
"1000151" [label="(Call,&(p[s->init_num]))"];
"1000133" [label="(Call,s->init_buf->data)"];
"1000377" [label="(Call,(char *)&(p[s->init_num]))"];
"1000250" [label="(Identifier,i)"];
"1000538" [label="(Call,ssl2_return_error(s, SSL2_PE_NO_CIPHER))"];
"1000325" [label="(Call,10 + (unsigned long)s->s2->tmp.clear + (unsigned long)s->s2->tmp.enc +\n        (unsigned long)keya)"];
"1000247" [label="(Identifier,i)"];
"1000307" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000217" [label="(Call,ssl2_return_error(s, SSL2_PE_NO_CIPHER))"];
"1000909" [label="(Call,ssl_get_new_session(s, 1))"];
"1000923" [label="(Call,ssl_get_prev_session(s, &(p[s->s2->tmp.cipher_spec_length]),\n                                 s->s2->tmp.session_id_length, NULL))"];
"1000243" [label="(Identifier,s)"];
"1000391" [label="(Call,ssl2_part_read(s, SSL_F_GET_CLIENT_MASTER_KEY, i))"];
"1000657" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000188" [label="(Call,p[-1] != SSL2_MT_ERROR)"];
"1001027" [label="(Call,SSL_get_ciphers(s))"];
"1000291" [label="(Call,(unsigned char *)s->init_buf->data)"];
"1000158" [label="(Literal,10)"];
"1000131" [label="(Call,(unsigned char *)s->init_buf->data)"];
"1000457" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000149" [label="(Call,(char *)&(p[s->init_num]))"];
"1000569" [label="(Call,s->s2->tmp.clear +\n                                          (unsigned int)i != (unsigned int)\n                                          EVP_CIPHER_key_length(c))"];
"1000177" [label="(Identifier,s)"];
"1000171" [label="(Call,ssl2_part_read(s, SSL_F_GET_CLIENT_MASTER_KEY, i))"];
"1000570" [label="(Call,s->s2->tmp.clear +\n                                          (unsigned int)i)"];
"1000330" [label="(Call,s->s2->tmp.clear)"];
"1000118" [label="(Block,)"];
"1000887" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000239" [label="(Call,s->s2->tmp.clear = i)"];
"1000184" [label="(Identifier,p)"];
"1000426" -> "1000424"  [label="AST: "];
"1000426" -> "1000434"  [label="CFG: "];
"1000427" -> "1000426"  [label="AST: "];
"1000434" -> "1000426"  [label="AST: "];
"1000424" -> "1000426"  [label="CFG: "];
"1000426" -> "1001166"  [label="DDG: s->s2->tmp.clear"];
"1000426" -> "1001166"  [label="DDG: s->s2->tmp.enc"];
"1000328" -> "1000426"  [label="DDG: s->s2->tmp.clear"];
"1000338" -> "1000426"  [label="DDG: s->s2->tmp.enc"];
"1000328" -> "1000327"  [label="AST: "];
"1000328" -> "1000330"  [label="CFG: "];
"1000329" -> "1000328"  [label="AST: "];
"1000330" -> "1000328"  [label="AST: "];
"1000339" -> "1000328"  [label="CFG: "];
"1000328" -> "1001166"  [label="DDG: s->s2->tmp.clear"];
"1000328" -> "1000323"  [label="DDG: s->s2->tmp.clear"];
"1000328" -> "1000325"  [label="DDG: s->s2->tmp.clear"];
"1000328" -> "1000327"  [label="DDG: s->s2->tmp.clear"];
"1000239" -> "1000328"  [label="DDG: s->s2->tmp.clear"];
"1000328" -> "1000569"  [label="DDG: s->s2->tmp.clear"];
"1000328" -> "1000570"  [label="DDG: s->s2->tmp.clear"];
"1000328" -> "1000643"  [label="DDG: s->s2->tmp.clear"];
"1000239" -> "1000144"  [label="AST: "];
"1000239" -> "1000247"  [label="CFG: "];
"1000240" -> "1000239"  [label="AST: "];
"1000247" -> "1000239"  [label="AST: "];
"1000249" -> "1000239"  [label="CFG: "];
"1000239" -> "1001166"  [label="DDG: s->s2->tmp.clear"];
"1000236" -> "1000239"  [label="DDG: i"];
"1000236" -> "1000144"  [label="AST: "];
"1000236" -> "1000238"  [label="CFG: "];
"1000237" -> "1000236"  [label="AST: "];
"1000238" -> "1000236"  [label="AST: "];
"1000243" -> "1000236"  [label="CFG: "];
"1000233" -> "1000236"  [label="DDG: p"];
"1000163" -> "1000236"  [label="DDG: i"];
"1000236" -> "1000248"  [label="DDG: p"];
"1000236" -> "1000248"  [label="DDG: i"];
"1000233" -> "1000144"  [label="AST: "];
"1000233" -> "1000235"  [label="CFG: "];
"1000234" -> "1000233"  [label="AST: "];
"1000235" -> "1000233"  [label="AST: "];
"1000237" -> "1000233"  [label="CFG: "];
"1000210" -> "1000233"  [label="DDG: p"];
"1000210" -> "1000208"  [label="AST: "];
"1000210" -> "1000211"  [label="CFG: "];
"1000211" -> "1000210"  [label="AST: "];
"1000208" -> "1000210"  [label="CFG: "];
"1000210" -> "1001166"  [label="DDG: p"];
"1000210" -> "1000208"  [label="DDG: p"];
"1000183" -> "1000210"  [label="DDG: p"];
"1000183" -> "1000182"  [label="AST: "];
"1000183" -> "1000184"  [label="CFG: "];
"1000184" -> "1000183"  [label="AST: "];
"1000182" -> "1000183"  [label="CFG: "];
"1000183" -> "1001166"  [label="DDG: p"];
"1000129" -> "1000183"  [label="DDG: p"];
"1000183" -> "1000188"  [label="DDG: p"];
"1000129" -> "1000118"  [label="AST: "];
"1000129" -> "1000131"  [label="CFG: "];
"1000130" -> "1000129"  [label="AST: "];
"1000131" -> "1000129"  [label="AST: "];
"1000141" -> "1000129"  [label="CFG: "];
"1000129" -> "1001166"  [label="DDG: p"];
"1000129" -> "1001166"  [label="DDG: (unsigned char *)s->init_buf->data"];
"1000131" -> "1000129"  [label="DDG: s->init_buf->data"];
"1000131" -> "1000133"  [label="CFG: "];
"1000132" -> "1000131"  [label="AST: "];
"1000133" -> "1000131"  [label="AST: "];
"1000131" -> "1001166"  [label="DDG: s->init_buf->data"];
"1000131" -> "1000291"  [label="DDG: s->init_buf->data"];
"1000163" -> "1000162"  [label="AST: "];
"1000163" -> "1000165"  [label="CFG: "];
"1000164" -> "1000163"  [label="AST: "];
"1000165" -> "1000163"  [label="AST: "];
"1000172" -> "1000163"  [label="CFG: "];
"1000177" -> "1000163"  [label="CFG: "];
"1000163" -> "1001166"  [label="DDG: i"];
"1000163" -> "1001166"  [label="DDG: i < (10 - s->init_num)"];
"1000163" -> "1001166"  [label="DDG: 10 - s->init_num"];
"1000145" -> "1000163"  [label="DDG: i"];
"1000165" -> "1000163"  [label="DDG: 10"];
"1000165" -> "1000163"  [label="DDG: s->init_num"];
"1000163" -> "1000171"  [label="DDG: i"];
"1000145" -> "1000144"  [label="AST: "];
"1000145" -> "1000147"  [label="CFG: "];
"1000146" -> "1000145"  [label="AST: "];
"1000147" -> "1000145"  [label="AST: "];
"1000164" -> "1000145"  [label="CFG: "];
"1000145" -> "1001166"  [label="DDG: ssl2_read(s, (char *)&(p[s->init_num]), 10 - s->init_num)"];
"1000147" -> "1000145"  [label="DDG: s"];
"1000147" -> "1000145"  [label="DDG: (char *)&(p[s->init_num])"];
"1000147" -> "1000145"  [label="DDG: 10 - s->init_num"];
"1000147" -> "1000157"  [label="CFG: "];
"1000148" -> "1000147"  [label="AST: "];
"1000149" -> "1000147"  [label="AST: "];
"1000157" -> "1000147"  [label="AST: "];
"1000147" -> "1001166"  [label="DDG: (char *)&(p[s->init_num])"];
"1000147" -> "1001166"  [label="DDG: s"];
"1000117" -> "1000147"  [label="DDG: s"];
"1000149" -> "1000147"  [label="DDG: &(p[s->init_num])"];
"1000157" -> "1000147"  [label="DDG: 10"];
"1000157" -> "1000147"  [label="DDG: s->init_num"];
"1000147" -> "1000171"  [label="DDG: s"];
"1000147" -> "1000195"  [label="DDG: s"];
"1000147" -> "1000217"  [label="DDG: s"];
"1000147" -> "1000268"  [label="DDG: s"];
"1000147" -> "1000307"  [label="DDG: s"];
"1000147" -> "1000355"  [label="DDG: s"];
"1000147" -> "1000375"  [label="DDG: s"];
"1000117" -> "1000116"  [label="AST: "];
"1000117" -> "1001166"  [label="DDG: s"];
"1000117" -> "1000171"  [label="DDG: s"];
"1000117" -> "1000195"  [label="DDG: s"];
"1000117" -> "1000217"  [label="DDG: s"];
"1000117" -> "1000268"  [label="DDG: s"];
"1000117" -> "1000307"  [label="DDG: s"];
"1000117" -> "1000355"  [label="DDG: s"];
"1000117" -> "1000375"  [label="DDG: s"];
"1000117" -> "1000391"  [label="DDG: s"];
"1000117" -> "1000400"  [label="DDG: s"];
"1000117" -> "1000457"  [label="DDG: s"];
"1000117" -> "1000538"  [label="DDG: s"];
"1000117" -> "1000657"  [label="DDG: s"];
"1000117" -> "1000675"  [label="DDG: s"];
"1000117" -> "1000745"  [label="DDG: s"];
"1000117" -> "1000804"  [label="DDG: s"];
"1000117" -> "1000824"  [label="DDG: s"];
"1000117" -> "1000840"  [label="DDG: s"];
"1000117" -> "1000849"  [label="DDG: s"];
"1000117" -> "1000887"  [label="DDG: s"];
"1000117" -> "1000909"  [label="DDG: s"];
"1000117" -> "1000913"  [label="DDG: s"];
"1000117" -> "1000923"  [label="DDG: s"];
"1000117" -> "1000960"  [label="DDG: s"];
"1000117" -> "1000975"  [label="DDG: s"];
"1000117" -> "1000986"  [label="DDG: s"];
"1000117" -> "1000990"  [label="DDG: s"];
"1000117" -> "1001004"  [label="DDG: s"];
"1000117" -> "1001027"  [label="DDG: s"];
"1000117" -> "1001135"  [label="DDG: s"];
"1000149" -> "1000151"  [label="CFG: "];
"1000150" -> "1000149"  [label="AST: "];
"1000151" -> "1000149"  [label="AST: "];
"1000158" -> "1000149"  [label="CFG: "];
"1000149" -> "1001166"  [label="DDG: &(p[s->init_num])"];
"1000149" -> "1000377"  [label="DDG: &(p[s->init_num])"];
"1000157" -> "1000159"  [label="CFG: "];
"1000158" -> "1000157"  [label="AST: "];
"1000159" -> "1000157"  [label="AST: "];
"1000157" -> "1000165"  [label="DDG: s->init_num"];
"1000165" -> "1000167"  [label="CFG: "];
"1000166" -> "1000165"  [label="AST: "];
"1000167" -> "1000165"  [label="AST: "];
"1000165" -> "1001166"  [label="DDG: s->init_num"];
"1000338" -> "1000337"  [label="AST: "];
"1000338" -> "1000340"  [label="CFG: "];
"1000339" -> "1000338"  [label="AST: "];
"1000340" -> "1000338"  [label="AST: "];
"1000348" -> "1000338"  [label="CFG: "];
"1000338" -> "1001166"  [label="DDG: s->s2->tmp.enc"];
"1000338" -> "1000323"  [label="DDG: s->s2->tmp.enc"];
"1000338" -> "1000325"  [label="DDG: s->s2->tmp.enc"];
"1000338" -> "1000327"  [label="DDG: s->s2->tmp.enc"];
"1000338" -> "1000337"  [label="DDG: s->s2->tmp.enc"];
"1000251" -> "1000338"  [label="DDG: s->s2->tmp.enc"];
"1000338" -> "1000468"  [label="DDG: s->s2->tmp.enc"];
"1000251" -> "1000144"  [label="AST: "];
"1000251" -> "1000259"  [label="CFG: "];
"1000252" -> "1000251"  [label="AST: "];
"1000259" -> "1000251"  [label="AST: "];
"1000261" -> "1000251"  [label="CFG: "];
"1000251" -> "1001166"  [label="DDG: s->s2->tmp.enc"];
"1000248" -> "1000251"  [label="DDG: i"];
"1000248" -> "1000144"  [label="AST: "];
"1000248" -> "1000250"  [label="CFG: "];
"1000249" -> "1000248"  [label="AST: "];
"1000250" -> "1000248"  [label="AST: "];
"1000255" -> "1000248"  [label="CFG: "];
"1000248" -> "1000260"  [label="DDG: p"];
"1000248" -> "1000260"  [label="DDG: i"];
}
