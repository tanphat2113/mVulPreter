digraph "0_linux_5f8cf712582617d523120df67d392059eaf2fc4b@array" {
"1000288" [label="(Call,vid[i] == USB_ID_VENDOR(id))"];
"1000282" [label="(Call,vid[i] == -1)"];
"1000288" [label="(Call,vid[i] == USB_ID_VENDOR(id))"];
"1000292" [label="(Call,USB_ID_VENDOR(id))"];
"1000190" [label="(Call,snd_usb_apply_boot_quirk(dev, intf, quirk, id))"];
"1000168" [label="(Call,get_alias_quirk(dev, id))"];
"1000162" [label="(Call,get_alias_id(dev, &id))"];
"1000114" [label="(Call,*dev = interface_to_usbdev(intf))"];
"1000116" [label="(Call,interface_to_usbdev(intf))"];
"1000110" [label="(MethodParameterIn,struct usb_interface *intf)"];
"1000146" [label="(Call,id = USB_ID(le16_to_cpu(dev->descriptor.idVendor),\n\t\t    le16_to_cpu(dev->descriptor.idProduct)))"];
"1000148" [label="(Call,USB_ID(le16_to_cpu(dev->descriptor.idVendor),\n\t\t    le16_to_cpu(dev->descriptor.idProduct)))"];
"1000149" [label="(Call,le16_to_cpu(dev->descriptor.idVendor))"];
"1000155" [label="(Call,le16_to_cpu(dev->descriptor.idProduct))"];
"1000172" [label="(Call,quirk && quirk->ifnum >= 0 && ifnum != quirk->ifnum)"];
"1000166" [label="(Call,quirk = get_alias_quirk(dev, id))"];
"1000119" [label="(Call,*quirk =\n\t\t(const struct snd_usb_audio_quirk *)usb_id->driver_info)"];
"1000121" [label="(Call,(const struct snd_usb_audio_quirk *)usb_id->driver_info)"];
"1000174" [label="(Call,quirk->ifnum >= 0 && ifnum != quirk->ifnum)"];
"1000175" [label="(Call,quirk->ifnum >= 0)"];
"1000180" [label="(Call,ifnum != quirk->ifnum)"];
"1000140" [label="(Call,ifnum = get_iface_desc(alts)->bInterfaceNumber)"];
"1000305" [label="(Call,USB_ID_PRODUCT(id))"];
"1000337" [label="(Call,vid[i] != -1)"];
"1000341" [label="(Call,-1)"];
"1000286" [label="(Call,-1)"];
"1000281" [label="(Call,vid[i] == -1 || vid[i] == USB_ID_VENDOR(id))"];
"1000280" [label="(Call,(vid[i] == -1 || vid[i] == USB_ID_VENDOR(id)) &&\n\t\t\t    (pid[i] == -1 || pid[i] == USB_ID_PRODUCT(id)))"];
"1000275" [label="(Call,!usb_chip[i] &&\n\t\t\t    (vid[i] == -1 || vid[i] == USB_ID_VENDOR(id)) &&\n\t\t\t    (pid[i] == -1 || pid[i] == USB_ID_PRODUCT(id)))"];
"1000336" [label="(Call,vid[i] != -1 || pid[i] != -1)"];
"1000142" [label="(Call,get_iface_desc(alts)->bInterfaceNumber)"];
"1000287" [label="(Literal,1)"];
"1000148" [label="(Call,USB_ID(le16_to_cpu(dev->descriptor.idVendor),\n\t\t    le16_to_cpu(dev->descriptor.idProduct)))"];
"1000315" [label="(Call,snd_usb_audio_create(intf, dev, i, quirk,\n\t\t\t\t\t\t\t\t   id, &chip))"];
"1000110" [label="(MethodParameterIn,struct usb_interface *intf)"];
"1000155" [label="(Call,le16_to_cpu(dev->descriptor.idProduct))"];
"1000169" [label="(Identifier,dev)"];
"1000294" [label="(Call,pid[i] == -1 || pid[i] == USB_ID_PRODUCT(id))"];
"1000345" [label="(Identifier,pid)"];
"1000293" [label="(Identifier,id)"];
"1000328" [label="(Call,chip->pm_intf = intf)"];
"1000161" [label="(ControlStructure,if (get_alias_id(dev, &id)))"];
"1000276" [label="(Call,!usb_chip[i])"];
"1000281" [label="(Call,vid[i] == -1 || vid[i] == USB_ID_VENDOR(id))"];
"1000305" [label="(Call,USB_ID_PRODUCT(id))"];
"1000290" [label="(Identifier,vid)"];
"1000114" [label="(Call,*dev = interface_to_usbdev(intf))"];
"1000273" [label="(Identifier,i)"];
"1000407" [label="(Call,quirk->ifnum != QUIRK_NO_INTERFACE)"];
"1000191" [label="(Identifier,dev)"];
"1000147" [label="(Identifier,id)"];
"1000167" [label="(Identifier,quirk)"];
"1000172" [label="(Call,quirk && quirk->ifnum >= 0 && ifnum != quirk->ifnum)"];
"1000336" [label="(Call,vid[i] != -1 || pid[i] != -1)"];
"1000190" [label="(Call,snd_usb_apply_boot_quirk(dev, intf, quirk, id))"];
"1000193" [label="(Identifier,quirk)"];
"1000176" [label="(Call,quirk->ifnum)"];
"1000182" [label="(Call,quirk->ifnum)"];
"1000342" [label="(Literal,1)"];
"1000120" [label="(Identifier,quirk)"];
"1000171" [label="(ControlStructure,if (quirk && quirk->ifnum >= 0 && ifnum != quirk->ifnum))"];
"1000433" [label="(Call,snd_usb_create_streams(chip, ifnum))"];
"1000353" [label="(Identifier,dev)"];
"1000510" [label="(MethodReturn,static int)"];
"1000162" [label="(Call,get_alias_id(dev, &id))"];
"1000187" [label="(Identifier,ENXIO)"];
"1000288" [label="(Call,vid[i] == USB_ID_VENDOR(id))"];
"1000337" [label="(Call,vid[i] != -1)"];
"1000150" [label="(Call,dev->descriptor.idVendor)"];
"1000164" [label="(Call,&id)"];
"1000222" [label="(Call,usb_chip[i]->dev == dev)"];
"1000341" [label="(Call,-1)"];
"1000146" [label="(Call,id = USB_ID(le16_to_cpu(dev->descriptor.idVendor),\n\t\t    le16_to_cpu(dev->descriptor.idProduct)))"];
"1000121" [label="(Call,(const struct snd_usb_audio_quirk *)usb_id->driver_info)"];
"1000194" [label="(Identifier,id)"];
"1000474" [label="(Call,usb_set_intfdata(intf, chip))"];
"1000415" [label="(Call,snd_usb_create_quirk(chip, intf, &usb_audio_driver, quirk))"];
"1000188" [label="(Call,err = snd_usb_apply_boot_quirk(dev, intf, quirk, id))"];
"1000168" [label="(Call,get_alias_quirk(dev, id))"];
"1000306" [label="(Identifier,id)"];
"1000274" [label="(ControlStructure,if (!usb_chip[i] &&\n\t\t\t    (vid[i] == -1 || vid[i] == USB_ID_VENDOR(id)) &&\n\t\t\t    (pid[i] == -1 || pid[i] == USB_ID_PRODUCT(id))))"];
"1000280" [label="(Call,(vid[i] == -1 || vid[i] == USB_ID_VENDOR(id)) &&\n\t\t\t    (pid[i] == -1 || pid[i] == USB_ID_PRODUCT(id)))"];
"1000119" [label="(Call,*quirk =\n\t\t(const struct snd_usb_audio_quirk *)usb_id->driver_info)"];
"1000301" [label="(Call,pid[i] == USB_ID_PRODUCT(id))"];
"1000170" [label="(Identifier,id)"];
"1000192" [label="(Identifier,intf)"];
"1000140" [label="(Call,ifnum = get_iface_desc(alts)->bInterfaceNumber)"];
"1000180" [label="(Call,ifnum != quirk->ifnum)"];
"1000181" [label="(Identifier,ifnum)"];
"1000335" [label="(ControlStructure,if (vid[i] != -1 || pid[i] != -1))"];
"1000116" [label="(Call,interface_to_usbdev(intf))"];
"1000356" [label="(Call,USB_ID_VENDOR(id))"];
"1000173" [label="(Identifier,quirk)"];
"1000115" [label="(Identifier,dev)"];
"1000343" [label="(Call,pid[i] != -1)"];
"1000286" [label="(Call,-1)"];
"1000338" [label="(Call,vid[i])"];
"1000158" [label="(Identifier,dev)"];
"1000297" [label="(Identifier,pid)"];
"1000282" [label="(Call,vid[i] == -1)"];
"1000189" [label="(Identifier,err)"];
"1000112" [label="(Block,)"];
"1000175" [label="(Call,quirk->ifnum >= 0)"];
"1000117" [label="(Identifier,intf)"];
"1000163" [label="(Identifier,dev)"];
"1000149" [label="(Call,le16_to_cpu(dev->descriptor.idVendor))"];
"1000275" [label="(Call,!usb_chip[i] &&\n\t\t\t    (vid[i] == -1 || vid[i] == USB_ID_VENDOR(id)) &&\n\t\t\t    (pid[i] == -1 || pid[i] == USB_ID_PRODUCT(id)))"];
"1000179" [label="(Literal,0)"];
"1000174" [label="(Call,quirk->ifnum >= 0 && ifnum != quirk->ifnum)"];
"1000166" [label="(Call,quirk = get_alias_quirk(dev, id))"];
"1000405" [label="(Call,quirk && quirk->ifnum != QUIRK_NO_INTERFACE)"];
"1000289" [label="(Call,vid[i])"];
"1000292" [label="(Call,USB_ID_VENDOR(id))"];
"1000141" [label="(Identifier,ifnum)"];
"1000310" [label="(Identifier,enable)"];
"1000156" [label="(Call,dev->descriptor.idProduct)"];
"1000283" [label="(Call,vid[i])"];
"1000123" [label="(Call,usb_id->driver_info)"];
"1000133" [label="(Identifier,alts)"];
"1000288" -> "1000281"  [label="AST: "];
"1000288" -> "1000292"  [label="CFG: "];
"1000289" -> "1000288"  [label="AST: "];
"1000292" -> "1000288"  [label="AST: "];
"1000281" -> "1000288"  [label="CFG: "];
"1000288" -> "1000510"  [label="DDG: USB_ID_VENDOR(id)"];
"1000288" -> "1000510"  [label="DDG: vid[i]"];
"1000288" -> "1000282"  [label="DDG: vid[i]"];
"1000288" -> "1000281"  [label="DDG: vid[i]"];
"1000288" -> "1000281"  [label="DDG: USB_ID_VENDOR(id)"];
"1000282" -> "1000288"  [label="DDG: vid[i]"];
"1000292" -> "1000288"  [label="DDG: id"];
"1000288" -> "1000337"  [label="DDG: vid[i]"];
"1000282" -> "1000281"  [label="AST: "];
"1000282" -> "1000286"  [label="CFG: "];
"1000283" -> "1000282"  [label="AST: "];
"1000286" -> "1000282"  [label="AST: "];
"1000290" -> "1000282"  [label="CFG: "];
"1000281" -> "1000282"  [label="CFG: "];
"1000282" -> "1000510"  [label="DDG: -1"];
"1000282" -> "1000510"  [label="DDG: vid[i]"];
"1000282" -> "1000281"  [label="DDG: vid[i]"];
"1000282" -> "1000281"  [label="DDG: -1"];
"1000337" -> "1000282"  [label="DDG: vid[i]"];
"1000286" -> "1000282"  [label="DDG: 1"];
"1000282" -> "1000337"  [label="DDG: vid[i]"];
"1000292" -> "1000293"  [label="CFG: "];
"1000293" -> "1000292"  [label="AST: "];
"1000292" -> "1000510"  [label="DDG: id"];
"1000190" -> "1000292"  [label="DDG: id"];
"1000305" -> "1000292"  [label="DDG: id"];
"1000292" -> "1000305"  [label="DDG: id"];
"1000292" -> "1000315"  [label="DDG: id"];
"1000292" -> "1000356"  [label="DDG: id"];
"1000190" -> "1000188"  [label="AST: "];
"1000190" -> "1000194"  [label="CFG: "];
"1000191" -> "1000190"  [label="AST: "];
"1000192" -> "1000190"  [label="AST: "];
"1000193" -> "1000190"  [label="AST: "];
"1000194" -> "1000190"  [label="AST: "];
"1000188" -> "1000190"  [label="CFG: "];
"1000190" -> "1000510"  [label="DDG: id"];
"1000190" -> "1000510"  [label="DDG: dev"];
"1000190" -> "1000510"  [label="DDG: quirk"];
"1000190" -> "1000510"  [label="DDG: intf"];
"1000190" -> "1000188"  [label="DDG: dev"];
"1000190" -> "1000188"  [label="DDG: intf"];
"1000190" -> "1000188"  [label="DDG: quirk"];
"1000190" -> "1000188"  [label="DDG: id"];
"1000168" -> "1000190"  [label="DDG: dev"];
"1000168" -> "1000190"  [label="DDG: id"];
"1000162" -> "1000190"  [label="DDG: dev"];
"1000116" -> "1000190"  [label="DDG: intf"];
"1000110" -> "1000190"  [label="DDG: intf"];
"1000172" -> "1000190"  [label="DDG: quirk"];
"1000146" -> "1000190"  [label="DDG: id"];
"1000190" -> "1000222"  [label="DDG: dev"];
"1000190" -> "1000305"  [label="DDG: id"];
"1000190" -> "1000315"  [label="DDG: intf"];
"1000190" -> "1000315"  [label="DDG: dev"];
"1000190" -> "1000315"  [label="DDG: quirk"];
"1000190" -> "1000315"  [label="DDG: id"];
"1000190" -> "1000356"  [label="DDG: id"];
"1000190" -> "1000405"  [label="DDG: quirk"];
"1000190" -> "1000415"  [label="DDG: intf"];
"1000190" -> "1000474"  [label="DDG: intf"];
"1000168" -> "1000166"  [label="AST: "];
"1000168" -> "1000170"  [label="CFG: "];
"1000169" -> "1000168"  [label="AST: "];
"1000170" -> "1000168"  [label="AST: "];
"1000166" -> "1000168"  [label="CFG: "];
"1000168" -> "1000510"  [label="DDG: dev"];
"1000168" -> "1000510"  [label="DDG: id"];
"1000168" -> "1000166"  [label="DDG: dev"];
"1000168" -> "1000166"  [label="DDG: id"];
"1000162" -> "1000168"  [label="DDG: dev"];
"1000146" -> "1000168"  [label="DDG: id"];
"1000162" -> "1000161"  [label="AST: "];
"1000162" -> "1000164"  [label="CFG: "];
"1000163" -> "1000162"  [label="AST: "];
"1000164" -> "1000162"  [label="AST: "];
"1000167" -> "1000162"  [label="CFG: "];
"1000173" -> "1000162"  [label="CFG: "];
"1000162" -> "1000510"  [label="DDG: &id"];
"1000162" -> "1000510"  [label="DDG: dev"];
"1000162" -> "1000510"  [label="DDG: get_alias_id(dev, &id)"];
"1000114" -> "1000162"  [label="DDG: dev"];
"1000114" -> "1000112"  [label="AST: "];
"1000114" -> "1000116"  [label="CFG: "];
"1000115" -> "1000114"  [label="AST: "];
"1000116" -> "1000114"  [label="AST: "];
"1000120" -> "1000114"  [label="CFG: "];
"1000114" -> "1000510"  [label="DDG: interface_to_usbdev(intf)"];
"1000116" -> "1000114"  [label="DDG: intf"];
"1000116" -> "1000117"  [label="CFG: "];
"1000117" -> "1000116"  [label="AST: "];
"1000116" -> "1000510"  [label="DDG: intf"];
"1000110" -> "1000116"  [label="DDG: intf"];
"1000110" -> "1000109"  [label="AST: "];
"1000110" -> "1000510"  [label="DDG: intf"];
"1000110" -> "1000315"  [label="DDG: intf"];
"1000110" -> "1000328"  [label="DDG: intf"];
"1000110" -> "1000415"  [label="DDG: intf"];
"1000110" -> "1000474"  [label="DDG: intf"];
"1000146" -> "1000112"  [label="AST: "];
"1000146" -> "1000148"  [label="CFG: "];
"1000147" -> "1000146"  [label="AST: "];
"1000148" -> "1000146"  [label="AST: "];
"1000163" -> "1000146"  [label="CFG: "];
"1000146" -> "1000510"  [label="DDG: USB_ID(le16_to_cpu(dev->descriptor.idVendor),\n\t\t    le16_to_cpu(dev->descriptor.idProduct))"];
"1000146" -> "1000510"  [label="DDG: id"];
"1000148" -> "1000146"  [label="DDG: le16_to_cpu(dev->descriptor.idVendor)"];
"1000148" -> "1000146"  [label="DDG: le16_to_cpu(dev->descriptor.idProduct)"];
"1000148" -> "1000155"  [label="CFG: "];
"1000149" -> "1000148"  [label="AST: "];
"1000155" -> "1000148"  [label="AST: "];
"1000148" -> "1000510"  [label="DDG: le16_to_cpu(dev->descriptor.idProduct)"];
"1000148" -> "1000510"  [label="DDG: le16_to_cpu(dev->descriptor.idVendor)"];
"1000149" -> "1000148"  [label="DDG: dev->descriptor.idVendor"];
"1000155" -> "1000148"  [label="DDG: dev->descriptor.idProduct"];
"1000149" -> "1000150"  [label="CFG: "];
"1000150" -> "1000149"  [label="AST: "];
"1000158" -> "1000149"  [label="CFG: "];
"1000149" -> "1000510"  [label="DDG: dev->descriptor.idVendor"];
"1000155" -> "1000156"  [label="CFG: "];
"1000156" -> "1000155"  [label="AST: "];
"1000155" -> "1000510"  [label="DDG: dev->descriptor.idProduct"];
"1000172" -> "1000171"  [label="AST: "];
"1000172" -> "1000173"  [label="CFG: "];
"1000172" -> "1000174"  [label="CFG: "];
"1000173" -> "1000172"  [label="AST: "];
"1000174" -> "1000172"  [label="AST: "];
"1000187" -> "1000172"  [label="CFG: "];
"1000189" -> "1000172"  [label="CFG: "];
"1000172" -> "1000510"  [label="DDG: quirk && quirk->ifnum >= 0 && ifnum != quirk->ifnum"];
"1000172" -> "1000510"  [label="DDG: quirk"];
"1000172" -> "1000510"  [label="DDG: quirk->ifnum >= 0 && ifnum != quirk->ifnum"];
"1000166" -> "1000172"  [label="DDG: quirk"];
"1000119" -> "1000172"  [label="DDG: quirk"];
"1000174" -> "1000172"  [label="DDG: quirk->ifnum >= 0"];
"1000174" -> "1000172"  [label="DDG: ifnum != quirk->ifnum"];
"1000166" -> "1000161"  [label="AST: "];
"1000167" -> "1000166"  [label="AST: "];
"1000173" -> "1000166"  [label="CFG: "];
"1000166" -> "1000510"  [label="DDG: get_alias_quirk(dev, id)"];
"1000119" -> "1000112"  [label="AST: "];
"1000119" -> "1000121"  [label="CFG: "];
"1000120" -> "1000119"  [label="AST: "];
"1000121" -> "1000119"  [label="AST: "];
"1000133" -> "1000119"  [label="CFG: "];
"1000119" -> "1000510"  [label="DDG: (const struct snd_usb_audio_quirk *)usb_id->driver_info"];
"1000121" -> "1000119"  [label="DDG: usb_id->driver_info"];
"1000121" -> "1000123"  [label="CFG: "];
"1000122" -> "1000121"  [label="AST: "];
"1000123" -> "1000121"  [label="AST: "];
"1000121" -> "1000510"  [label="DDG: usb_id->driver_info"];
"1000174" -> "1000175"  [label="CFG: "];
"1000174" -> "1000180"  [label="CFG: "];
"1000175" -> "1000174"  [label="AST: "];
"1000180" -> "1000174"  [label="AST: "];
"1000174" -> "1000510"  [label="DDG: ifnum != quirk->ifnum"];
"1000174" -> "1000510"  [label="DDG: quirk->ifnum >= 0"];
"1000175" -> "1000174"  [label="DDG: quirk->ifnum"];
"1000175" -> "1000174"  [label="DDG: 0"];
"1000180" -> "1000174"  [label="DDG: ifnum"];
"1000180" -> "1000174"  [label="DDG: quirk->ifnum"];
"1000175" -> "1000179"  [label="CFG: "];
"1000176" -> "1000175"  [label="AST: "];
"1000179" -> "1000175"  [label="AST: "];
"1000181" -> "1000175"  [label="CFG: "];
"1000175" -> "1000510"  [label="DDG: quirk->ifnum"];
"1000175" -> "1000180"  [label="DDG: quirk->ifnum"];
"1000175" -> "1000407"  [label="DDG: quirk->ifnum"];
"1000180" -> "1000182"  [label="CFG: "];
"1000181" -> "1000180"  [label="AST: "];
"1000182" -> "1000180"  [label="AST: "];
"1000180" -> "1000510"  [label="DDG: quirk->ifnum"];
"1000180" -> "1000510"  [label="DDG: ifnum"];
"1000140" -> "1000180"  [label="DDG: ifnum"];
"1000180" -> "1000407"  [label="DDG: quirk->ifnum"];
"1000180" -> "1000433"  [label="DDG: ifnum"];
"1000140" -> "1000112"  [label="AST: "];
"1000140" -> "1000142"  [label="CFG: "];
"1000141" -> "1000140"  [label="AST: "];
"1000142" -> "1000140"  [label="AST: "];
"1000147" -> "1000140"  [label="CFG: "];
"1000140" -> "1000510"  [label="DDG: get_iface_desc(alts)->bInterfaceNumber"];
"1000140" -> "1000510"  [label="DDG: ifnum"];
"1000140" -> "1000433"  [label="DDG: ifnum"];
"1000305" -> "1000301"  [label="AST: "];
"1000305" -> "1000306"  [label="CFG: "];
"1000306" -> "1000305"  [label="AST: "];
"1000301" -> "1000305"  [label="CFG: "];
"1000305" -> "1000510"  [label="DDG: id"];
"1000305" -> "1000301"  [label="DDG: id"];
"1000305" -> "1000315"  [label="DDG: id"];
"1000305" -> "1000356"  [label="DDG: id"];
"1000337" -> "1000336"  [label="AST: "];
"1000337" -> "1000341"  [label="CFG: "];
"1000338" -> "1000337"  [label="AST: "];
"1000341" -> "1000337"  [label="AST: "];
"1000345" -> "1000337"  [label="CFG: "];
"1000336" -> "1000337"  [label="CFG: "];
"1000337" -> "1000510"  [label="DDG: vid[i]"];
"1000337" -> "1000510"  [label="DDG: -1"];
"1000337" -> "1000336"  [label="DDG: vid[i]"];
"1000337" -> "1000336"  [label="DDG: -1"];
"1000341" -> "1000337"  [label="DDG: 1"];
"1000341" -> "1000342"  [label="CFG: "];
"1000342" -> "1000341"  [label="AST: "];
"1000286" -> "1000287"  [label="CFG: "];
"1000287" -> "1000286"  [label="AST: "];
"1000281" -> "1000280"  [label="AST: "];
"1000297" -> "1000281"  [label="CFG: "];
"1000280" -> "1000281"  [label="CFG: "];
"1000281" -> "1000510"  [label="DDG: vid[i] == -1"];
"1000281" -> "1000510"  [label="DDG: vid[i] == USB_ID_VENDOR(id)"];
"1000281" -> "1000280"  [label="DDG: vid[i] == -1"];
"1000281" -> "1000280"  [label="DDG: vid[i] == USB_ID_VENDOR(id)"];
"1000280" -> "1000275"  [label="AST: "];
"1000280" -> "1000294"  [label="CFG: "];
"1000294" -> "1000280"  [label="AST: "];
"1000275" -> "1000280"  [label="CFG: "];
"1000280" -> "1000510"  [label="DDG: pid[i] == -1 || pid[i] == USB_ID_PRODUCT(id)"];
"1000280" -> "1000510"  [label="DDG: vid[i] == -1 || vid[i] == USB_ID_VENDOR(id)"];
"1000280" -> "1000275"  [label="DDG: vid[i] == -1 || vid[i] == USB_ID_VENDOR(id)"];
"1000280" -> "1000275"  [label="DDG: pid[i] == -1 || pid[i] == USB_ID_PRODUCT(id)"];
"1000294" -> "1000280"  [label="DDG: pid[i] == -1"];
"1000294" -> "1000280"  [label="DDG: pid[i] == USB_ID_PRODUCT(id)"];
"1000275" -> "1000274"  [label="AST: "];
"1000275" -> "1000276"  [label="CFG: "];
"1000276" -> "1000275"  [label="AST: "];
"1000310" -> "1000275"  [label="CFG: "];
"1000273" -> "1000275"  [label="CFG: "];
"1000275" -> "1000510"  [label="DDG: !usb_chip[i] &&\n\t\t\t    (vid[i] == -1 || vid[i] == USB_ID_VENDOR(id)) &&\n\t\t\t    (pid[i] == -1 || pid[i] == USB_ID_PRODUCT(id))"];
"1000275" -> "1000510"  [label="DDG: (vid[i] == -1 || vid[i] == USB_ID_VENDOR(id)) &&\n\t\t\t    (pid[i] == -1 || pid[i] == USB_ID_PRODUCT(id))"];
"1000275" -> "1000510"  [label="DDG: !usb_chip[i]"];
"1000276" -> "1000275"  [label="DDG: usb_chip[i]"];
"1000336" -> "1000335"  [label="AST: "];
"1000336" -> "1000343"  [label="CFG: "];
"1000343" -> "1000336"  [label="AST: "];
"1000353" -> "1000336"  [label="CFG: "];
"1000273" -> "1000336"  [label="CFG: "];
"1000336" -> "1000510"  [label="DDG: vid[i] != -1 || pid[i] != -1"];
"1000336" -> "1000510"  [label="DDG: pid[i] != -1"];
"1000336" -> "1000510"  [label="DDG: vid[i] != -1"];
"1000343" -> "1000336"  [label="DDG: pid[i]"];
"1000343" -> "1000336"  [label="DDG: -1"];
}
