digraph "0_file_ce90e05774dd77d86cfc8dfa6da57b32816841c4_2@pointer" {
"1000205" [label="(Call,file_printf(ms, \", bad note description size 0x%lx\",\n\t\t(unsigned long)descsz))"];
"1000117" [label="(MethodParameterIn,struct magic_set *ms)"];
"1000208" [label="(Call,(unsigned long)descsz)"];
"1000199" [label="(Call,descsz & 0x80000000)"];
"1000172" [label="(Call,descsz == 0)"];
"1000164" [label="(Call,descsz = xnh_descsz)"];
"1000203" [label="(Call,(void)file_printf(ms, \", bad note description size 0x%lx\",\n\t\t(unsigned long)descsz))"];
"1000963" [label="(Call,file_printf(ms, \", %s-style\", os_style_names[os_style]))"];
"1000199" [label="(Call,descsz & 0x80000000)"];
"1000238" [label="(Call,doff + descsz > size)"];
"1000206" [label="(Identifier,ms)"];
"1000117" [label="(MethodParameterIn,struct magic_set *ms)"];
"1000509" [label="(Call,file_printf(ms, \"%02x\", desc[i]))"];
"1000680" [label="(Call,file_printf(ms, \", compiler model: %.*s\",\n\t\t\t    (int)descsz, (const char *)&nbuf[doff]))"];
"1000210" [label="(Identifier,descsz)"];
"1000736" [label="(Call,do_note_freebsd_version(ms, swap, &nbuf[doff]))"];
"1000465" [label="(Call,descsz == 16)"];
"1000239" [label="(Call,doff + descsz)"];
"1000660" [label="(Call,file_printf(ms, \", compiled for: %.*s\", (int)descsz,\n\t\t\t    (const char *)&nbuf[doff]))"];
"1000174" [label="(Literal,0)"];
"1000125" [label="(Block,)"];
"1000603" [label="(Call,file_printf(ms, \"%s%s\", did++ ? \",\" : \"\",\n \t\t\t    pax[i]))"];
"1000639" [label="(Call,descsz == 4)"];
"1000769" [label="(Call,descsz == 4)"];
"1000205" [label="(Call,file_printf(ms, \", bad note description size 0x%lx\",\n\t\t(unsigned long)descsz))"];
"1000233" [label="(Call,ELF_ALIGN(doff + descsz))"];
"1000396" [label="(Call,file_printf(ms, \"kNetBSD\"))"];
"1000198" [label="(ControlStructure,if (descsz & 0x80000000))"];
"1000208" [label="(Call,(unsigned long)descsz)"];
"1000374" [label="(Call,file_printf(ms, \"Solaris\"))"];
"1000173" [label="(Identifier,descsz)"];
"1000476" [label="(Call,file_printf(ms, \", BuildID[%s]=\", descsz == 16 ? \"md5/uuid\" :\n\t\t\"sha1\"))"];
"1000214" [label="(Identifier,noff)"];
"1000203" [label="(Call,(void)file_printf(ms, \", bad note description size 0x%lx\",\n\t\t(unsigned long)descsz))"];
"1000212" [label="(Literal,0)"];
"1000283" [label="(Call,descsz == 2)"];
"1000164" [label="(Call,descsz = xnh_descsz)"];
"1000385" [label="(Call,file_printf(ms, \"kFreeBSD\"))"];
"1000543" [label="(Call,descsz == 4)"];
"1001221" [label="(Call,file_printf(ms, \", from '%.*s'\",\n \t\t\t\t    (int)(cp - cname), cname))"];
"1000172" [label="(Call,descsz == 0)"];
"1001023" [label="(Call,file_printf(ms, \" (signal %u)\",\n \t\t\t    elf_getu32(swap, signo)))"];
"1000234" [label="(Call,doff + descsz)"];
"1000190" [label="(Call,file_printf(ms, \", bad note name size 0x%lx\",\n\t\t(unsigned long)namesz))"];
"1000989" [label="(Call,file_printf(ms, \", from '%.31s'\",\n \t\t\t    file_printable(sbuf, sizeof(sbuf),\n \t\t\t    (const char *)&nbuf[doff + 0x7c])))"];
"1001100" [label="(Call,reloffset >= descsz)"];
"1000363" [label="(Call,file_printf(ms, \"Hurd\"))"];
"1000663" [label="(Call,(int)descsz)"];
"1000480" [label="(Call,descsz == 16)"];
"1000808" [label="(Call,descsz == 4)"];
"1000170" [label="(Identifier,namesz)"];
"1000200" [label="(Identifier,descsz)"];
"1000775" [label="(Call,file_printf(ms, \", for OpenBSD\"))"];
"1000202" [label="(Block,)"];
"1000574" [label="(Call,file_printf(ms, \", PaX: \"))"];
"1000201" [label="(Literal,0x80000000)"];
"1000416" [label="(Call,file_printf(ms, \" %d.%d.%d\", elf_getu32(swap, desc[1]),\n \t\t    elf_getu32(swap, desc[2]), elf_getu32(swap, desc[3])))"];
"1000168" [label="(Call,(namesz == 0) && (descsz == 0))"];
"1000815" [label="(Call,file_printf(ms, \", for DragonFly\"))"];
"1000166" [label="(Identifier,xnh_descsz)"];
"1000643" [label="(Call,do_note_netbsd_version(ms, swap, &nbuf[doff]))"];
"1000840" [label="(Call,file_printf(ms, \" %d.%d.%d\", desc / 100000,\n\t\t    desc / 10000 % 10, desc % 10000))"];
"1000683" [label="(Call,(int)descsz)"];
"1000287" [label="(Call,file_printf(ms, \", for SuSE %d.%d\", nbuf[doff], nbuf[doff + 1]))"];
"1000335" [label="(Call,file_printf(ms, \", for GNU/\"))"];
"1000700" [label="(Call,file_printf(ms, \", note=%u\", xnh_type))"];
"1000407" [label="(Call,file_printf(ms, \"<unknown>\"))"];
"1000318" [label="(Call,descsz == 16)"];
"1000165" [label="(Identifier,descsz)"];
"1000732" [label="(Call,descsz == 4)"];
"1001244" [label="(MethodReturn,RET)"];
"1000352" [label="(Call,file_printf(ms, \"Linux\"))"];
"1000207" [label="(Literal,\", bad note description size 0x%lx\")"];
"1000205" -> "1000203"  [label="AST: "];
"1000205" -> "1000208"  [label="CFG: "];
"1000206" -> "1000205"  [label="AST: "];
"1000207" -> "1000205"  [label="AST: "];
"1000208" -> "1000205"  [label="AST: "];
"1000203" -> "1000205"  [label="CFG: "];
"1000205" -> "1001244"  [label="DDG: "];
"1000205" -> "1001244"  [label="DDG: "];
"1000205" -> "1000203"  [label="DDG: "];
"1000205" -> "1000203"  [label="DDG: "];
"1000205" -> "1000203"  [label="DDG: "];
"1000117" -> "1000205"  [label="DDG: "];
"1000208" -> "1000205"  [label="DDG: "];
"1000117" -> "1000116"  [label="AST: "];
"1000117" -> "1001244"  [label="DDG: "];
"1000117" -> "1000190"  [label="DDG: "];
"1000117" -> "1000287"  [label="DDG: "];
"1000117" -> "1000335"  [label="DDG: "];
"1000117" -> "1000352"  [label="DDG: "];
"1000117" -> "1000363"  [label="DDG: "];
"1000117" -> "1000374"  [label="DDG: "];
"1000117" -> "1000385"  [label="DDG: "];
"1000117" -> "1000396"  [label="DDG: "];
"1000117" -> "1000407"  [label="DDG: "];
"1000117" -> "1000416"  [label="DDG: "];
"1000117" -> "1000476"  [label="DDG: "];
"1000117" -> "1000509"  [label="DDG: "];
"1000117" -> "1000574"  [label="DDG: "];
"1000117" -> "1000603"  [label="DDG: "];
"1000117" -> "1000643"  [label="DDG: "];
"1000117" -> "1000660"  [label="DDG: "];
"1000117" -> "1000680"  [label="DDG: "];
"1000117" -> "1000700"  [label="DDG: "];
"1000117" -> "1000736"  [label="DDG: "];
"1000117" -> "1000775"  [label="DDG: "];
"1000117" -> "1000815"  [label="DDG: "];
"1000117" -> "1000840"  [label="DDG: "];
"1000117" -> "1000963"  [label="DDG: "];
"1000117" -> "1000989"  [label="DDG: "];
"1000117" -> "1001023"  [label="DDG: "];
"1000117" -> "1001221"  [label="DDG: "];
"1000208" -> "1000210"  [label="CFG: "];
"1000209" -> "1000208"  [label="AST: "];
"1000210" -> "1000208"  [label="AST: "];
"1000208" -> "1001244"  [label="DDG: "];
"1000199" -> "1000208"  [label="DDG: "];
"1000199" -> "1000198"  [label="AST: "];
"1000199" -> "1000201"  [label="CFG: "];
"1000200" -> "1000199"  [label="AST: "];
"1000201" -> "1000199"  [label="AST: "];
"1000204" -> "1000199"  [label="CFG: "];
"1000214" -> "1000199"  [label="CFG: "];
"1000199" -> "1001244"  [label="DDG: "];
"1000199" -> "1001244"  [label="DDG: "];
"1000172" -> "1000199"  [label="DDG: "];
"1000164" -> "1000199"  [label="DDG: "];
"1000199" -> "1000233"  [label="DDG: "];
"1000199" -> "1000234"  [label="DDG: "];
"1000199" -> "1000238"  [label="DDG: "];
"1000199" -> "1000239"  [label="DDG: "];
"1000199" -> "1000283"  [label="DDG: "];
"1000199" -> "1000318"  [label="DDG: "];
"1000199" -> "1000465"  [label="DDG: "];
"1000199" -> "1000480"  [label="DDG: "];
"1000199" -> "1000543"  [label="DDG: "];
"1000199" -> "1000639"  [label="DDG: "];
"1000199" -> "1000663"  [label="DDG: "];
"1000199" -> "1000683"  [label="DDG: "];
"1000199" -> "1000732"  [label="DDG: "];
"1000199" -> "1000769"  [label="DDG: "];
"1000199" -> "1000808"  [label="DDG: "];
"1000199" -> "1001100"  [label="DDG: "];
"1000172" -> "1000168"  [label="AST: "];
"1000172" -> "1000174"  [label="CFG: "];
"1000173" -> "1000172"  [label="AST: "];
"1000174" -> "1000172"  [label="AST: "];
"1000168" -> "1000172"  [label="CFG: "];
"1000172" -> "1001244"  [label="DDG: "];
"1000172" -> "1000168"  [label="DDG: "];
"1000172" -> "1000168"  [label="DDG: "];
"1000164" -> "1000172"  [label="DDG: "];
"1000164" -> "1000125"  [label="AST: "];
"1000164" -> "1000166"  [label="CFG: "];
"1000165" -> "1000164"  [label="AST: "];
"1000166" -> "1000164"  [label="AST: "];
"1000170" -> "1000164"  [label="CFG: "];
"1000164" -> "1001244"  [label="DDG: "];
"1000164" -> "1001244"  [label="DDG: "];
"1000203" -> "1000202"  [label="AST: "];
"1000204" -> "1000203"  [label="AST: "];
"1000212" -> "1000203"  [label="CFG: "];
"1000203" -> "1001244"  [label="DDG: "];
"1000203" -> "1001244"  [label="DDG: "];
}
