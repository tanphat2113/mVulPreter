digraph "0_file_ce90e05774dd77d86cfc8dfa6da57b32816841c4_2@pointer" {
"1000190" [label="(Call,file_printf(ms, \", bad note name size 0x%lx\",\n\t\t(unsigned long)namesz))"];
"1000117" [label="(MethodParameterIn,struct magic_set *ms)"];
"1000193" [label="(Call,(unsigned long)namesz)"];
"1000184" [label="(Call,namesz & 0x80000000)"];
"1000169" [label="(Call,namesz == 0)"];
"1000161" [label="(Call,namesz = xnh_namesz)"];
"1000188" [label="(Call,(void)file_printf(ms, \", bad note name size 0x%lx\",\n\t\t(unsigned long)namesz))"];
"1000195" [label="(Identifier,namesz)"];
"1000963" [label="(Call,file_printf(ms, \", %s-style\", os_style_names[os_style]))"];
"1000186" [label="(Literal,0x80000000)"];
"1000117" [label="(MethodParameterIn,struct magic_set *ms)"];
"1000509" [label="(Call,file_printf(ms, \"%02x\", desc[i]))"];
"1000680" [label="(Call,file_printf(ms, \", compiler model: %.*s\",\n\t\t\t    (int)descsz, (const char *)&nbuf[doff]))"];
"1000736" [label="(Call,do_note_freebsd_version(ms, swap, &nbuf[doff]))"];
"1000660" [label="(Call,file_printf(ms, \", compiled for: %.*s\", (int)descsz,\n\t\t\t    (const char *)&nbuf[doff]))"];
"1000868" [label="(Call,namesz == 4)"];
"1000125" [label="(Block,)"];
"1000603" [label="(Call,file_printf(ms, \"%s%s\", did++ ? \",\" : \"\",\n \t\t\t    pax[i]))"];
"1000205" [label="(Call,file_printf(ms, \", bad note description size 0x%lx\",\n\t\t(unsigned long)descsz))"];
"1000163" [label="(Identifier,xnh_namesz)"];
"1000396" [label="(Call,file_printf(ms, \"kNetBSD\"))"];
"1000191" [label="(Identifier,ms)"];
"1000374" [label="(Call,file_printf(ms, \"Solaris\"))"];
"1000173" [label="(Identifier,descsz)"];
"1000476" [label="(Call,file_printf(ms, \", BuildID[%s]=\", descsz == 16 ? \"md5/uuid\" :\n\t\t\"sha1\"))"];
"1000385" [label="(Call,file_printf(ms, \"kFreeBSD\"))"];
"1000187" [label="(Block,)"];
"1000218" [label="(Call,ELF_ALIGN(offset + namesz))"];
"1000197" [label="(Literal,0)"];
"1000193" [label="(Call,(unsigned long)namesz)"];
"1001221" [label="(Call,file_printf(ms, \", from '%.*s'\",\n \t\t\t\t    (int)(cp - cname), cname))"];
"1001023" [label="(Call,file_printf(ms, \" (signal %u)\",\n \t\t\t    elf_getu32(swap, signo)))"];
"1000190" [label="(Call,file_printf(ms, \", bad note name size 0x%lx\",\n\t\t(unsigned long)namesz))"];
"1000989" [label="(Call,file_printf(ms, \", from '%.31s'\",\n \t\t\t    file_printable(sbuf, sizeof(sbuf),\n \t\t\t    (const char *)&nbuf[doff + 0x7c])))"];
"1000223" [label="(Call,offset + namesz > size)"];
"1000363" [label="(Call,file_printf(ms, \"Hurd\"))"];
"1000170" [label="(Identifier,namesz)"];
"1000224" [label="(Call,offset + namesz)"];
"1000185" [label="(Identifier,namesz)"];
"1000200" [label="(Identifier,descsz)"];
"1000219" [label="(Call,offset + namesz)"];
"1000171" [label="(Literal,0)"];
"1000183" [label="(ControlStructure,if (namesz & 0x80000000))"];
"1000169" [label="(Call,namesz == 0)"];
"1000161" [label="(Call,namesz = xnh_namesz)"];
"1000775" [label="(Call,file_printf(ms, \", for OpenBSD\"))"];
"1000574" [label="(Call,file_printf(ms, \", PaX: \"))"];
"1000162" [label="(Identifier,namesz)"];
"1000416" [label="(Call,file_printf(ms, \" %d.%d.%d\", elf_getu32(swap, desc[1]),\n \t\t    elf_getu32(swap, desc[2]), elf_getu32(swap, desc[3])))"];
"1000168" [label="(Call,(namesz == 0) && (descsz == 0))"];
"1000815" [label="(Call,file_printf(ms, \", for DragonFly\"))"];
"1000184" [label="(Call,namesz & 0x80000000)"];
"1000192" [label="(Literal,\", bad note name size 0x%lx\")"];
"1000643" [label="(Call,do_note_netbsd_version(ms, swap, &nbuf[doff]))"];
"1000840" [label="(Call,file_printf(ms, \" %d.%d.%d\", desc / 100000,\n\t\t    desc / 10000 % 10, desc % 10000))"];
"1000287" [label="(Call,file_printf(ms, \", for SuSE %d.%d\", nbuf[doff], nbuf[doff + 1]))"];
"1000335" [label="(Call,file_printf(ms, \", for GNU/\"))"];
"1000700" [label="(Call,file_printf(ms, \", note=%u\", xnh_type))"];
"1000407" [label="(Call,file_printf(ms, \"<unknown>\"))"];
"1000165" [label="(Identifier,descsz)"];
"1000265" [label="(Call,namesz == 5)"];
"1000188" [label="(Call,(void)file_printf(ms, \", bad note name size 0x%lx\",\n\t\t(unsigned long)namesz))"];
"1001244" [label="(MethodReturn,RET)"];
"1000352" [label="(Call,file_printf(ms, \"Linux\"))"];
"1000190" -> "1000188"  [label="AST: "];
"1000190" -> "1000193"  [label="CFG: "];
"1000191" -> "1000190"  [label="AST: "];
"1000192" -> "1000190"  [label="AST: "];
"1000193" -> "1000190"  [label="AST: "];
"1000188" -> "1000190"  [label="CFG: "];
"1000190" -> "1001244"  [label="DDG: "];
"1000190" -> "1001244"  [label="DDG: "];
"1000190" -> "1000188"  [label="DDG: "];
"1000190" -> "1000188"  [label="DDG: "];
"1000190" -> "1000188"  [label="DDG: "];
"1000117" -> "1000190"  [label="DDG: "];
"1000193" -> "1000190"  [label="DDG: "];
"1000117" -> "1000116"  [label="AST: "];
"1000117" -> "1001244"  [label="DDG: "];
"1000117" -> "1000205"  [label="DDG: "];
"1000117" -> "1000287"  [label="DDG: "];
"1000117" -> "1000335"  [label="DDG: "];
"1000117" -> "1000352"  [label="DDG: "];
"1000117" -> "1000363"  [label="DDG: "];
"1000117" -> "1000374"  [label="DDG: "];
"1000117" -> "1000385"  [label="DDG: "];
"1000117" -> "1000396"  [label="DDG: "];
"1000117" -> "1000407"  [label="DDG: "];
"1000117" -> "1000416"  [label="DDG: "];
"1000117" -> "1000476"  [label="DDG: "];
"1000117" -> "1000509"  [label="DDG: "];
"1000117" -> "1000574"  [label="DDG: "];
"1000117" -> "1000603"  [label="DDG: "];
"1000117" -> "1000643"  [label="DDG: "];
"1000117" -> "1000660"  [label="DDG: "];
"1000117" -> "1000680"  [label="DDG: "];
"1000117" -> "1000700"  [label="DDG: "];
"1000117" -> "1000736"  [label="DDG: "];
"1000117" -> "1000775"  [label="DDG: "];
"1000117" -> "1000815"  [label="DDG: "];
"1000117" -> "1000840"  [label="DDG: "];
"1000117" -> "1000963"  [label="DDG: "];
"1000117" -> "1000989"  [label="DDG: "];
"1000117" -> "1001023"  [label="DDG: "];
"1000117" -> "1001221"  [label="DDG: "];
"1000193" -> "1000195"  [label="CFG: "];
"1000194" -> "1000193"  [label="AST: "];
"1000195" -> "1000193"  [label="AST: "];
"1000193" -> "1001244"  [label="DDG: "];
"1000184" -> "1000193"  [label="DDG: "];
"1000184" -> "1000183"  [label="AST: "];
"1000184" -> "1000186"  [label="CFG: "];
"1000185" -> "1000184"  [label="AST: "];
"1000186" -> "1000184"  [label="AST: "];
"1000189" -> "1000184"  [label="CFG: "];
"1000200" -> "1000184"  [label="CFG: "];
"1000184" -> "1001244"  [label="DDG: "];
"1000184" -> "1001244"  [label="DDG: "];
"1000169" -> "1000184"  [label="DDG: "];
"1000184" -> "1000218"  [label="DDG: "];
"1000184" -> "1000219"  [label="DDG: "];
"1000184" -> "1000223"  [label="DDG: "];
"1000184" -> "1000224"  [label="DDG: "];
"1000184" -> "1000265"  [label="DDG: "];
"1000184" -> "1000868"  [label="DDG: "];
"1000169" -> "1000168"  [label="AST: "];
"1000169" -> "1000171"  [label="CFG: "];
"1000170" -> "1000169"  [label="AST: "];
"1000171" -> "1000169"  [label="AST: "];
"1000173" -> "1000169"  [label="CFG: "];
"1000168" -> "1000169"  [label="CFG: "];
"1000169" -> "1001244"  [label="DDG: "];
"1000169" -> "1000168"  [label="DDG: "];
"1000169" -> "1000168"  [label="DDG: "];
"1000161" -> "1000169"  [label="DDG: "];
"1000161" -> "1000125"  [label="AST: "];
"1000161" -> "1000163"  [label="CFG: "];
"1000162" -> "1000161"  [label="AST: "];
"1000163" -> "1000161"  [label="AST: "];
"1000165" -> "1000161"  [label="CFG: "];
"1000161" -> "1001244"  [label="DDG: "];
"1000188" -> "1000187"  [label="AST: "];
"1000189" -> "1000188"  [label="AST: "];
"1000197" -> "1000188"  [label="CFG: "];
"1000188" -> "1001244"  [label="DDG: "];
"1000188" -> "1001244"  [label="DDG: "];
}
