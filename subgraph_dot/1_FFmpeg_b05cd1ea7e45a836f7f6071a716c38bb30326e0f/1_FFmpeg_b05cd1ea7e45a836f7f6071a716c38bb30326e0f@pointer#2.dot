digraph "1_FFmpeg_b05cd1ea7e45a836f7f6071a716c38bb30326e0f@pointer" {
"1001071" [label="(Call,fs->slice_x     /= f->num_h_slices)"];
"1001090" [label="(Call,fs->slice_width  / f->num_h_slices)"];
"1001035" [label="(Call,fs->slice_width  = (get_symbol(c, state, 0) + 1) * f->width  + fs->slice_x)"];
"1001040" [label="(Call,(get_symbol(c, state, 0) + 1) * f->width)"];
"1001042" [label="(Call,get_symbol(c, state, 0))"];
"1001028" [label="(Call,get_symbol(c, state, 0))"];
"1001016" [label="(Call,get_symbol(c, state, 0))"];
"1001060" [label="(Call,get_symbol(c, state, 0))"];
"1000254" [label="(Call,get_rac(c, state))"];
"1000248" [label="(Call,get_symbol(c, state, 0))"];
"1000242" [label="(Call,get_symbol(c, state, 0))"];
"1000237" [label="(Call,get_rac(c, state))"];
"1000215" [label="(Call,get_symbol(c, state, 0))"];
"1000202" [label="(Call,get_symbol(c, state, 1))"];
"1000175" [label="(Call,get_symbol(c, state, 0))"];
"1000142" [label="(Call,get_symbol(c, state, 0))"];
"1000113" [label="(Call,c = &f->slice_context[0]->c)"];
"1000123" [label="(Call,memset(state, 128, sizeof(state)))"];
"1000231" [label="(Call,get_symbol(c, state, 0))"];
"1001201" [label="(Call,get_symbol(c, state, 0))"];
"1000838" [label="(Call,read_quant_tables(c, f->quant_table))"];
"1000868" [label="(Call,get_symbol(c, state, 0))"];
"1001015" [label="(Call,get_symbol(c, state, 0)      * f->width)"];
"1001139" [label="(Call,(unsigned)fs->slice_x + (uint64_t)fs->slice_width  > f->width)"];
"1001141" [label="(Call,(unsigned)fs->slice_x)"];
"1001089" [label="(Call,fs->slice_width  / f->num_h_slices - fs->slice_x)"];
"1001071" [label="(Call,fs->slice_x     /= f->num_h_slices)"];
"1001011" [label="(Call,fs->slice_x      =  get_symbol(c, state, 0)      * f->width)"];
"1001146" [label="(Call,(uint64_t)fs->slice_width)"];
"1001118" [label="(Call,(unsigned)fs->slice_width)"];
"1001085" [label="(Call,fs->slice_width  = fs->slice_width  / f->num_h_slices - fs->slice_x)"];
"1001117" [label="(Call,(unsigned)fs->slice_width  > f->width)"];
"1001116" [label="(Call,(unsigned)fs->slice_width  > f->width ||\n                (unsigned)fs->slice_height > f->height)"];
"1001039" [label="(Call,(get_symbol(c, state, 0) + 1) * f->width  + fs->slice_x)"];
"1001138" [label="(Call,(unsigned)fs->slice_x + (uint64_t)fs->slice_width  > f->width\n                || (unsigned)fs->slice_y + (uint64_t)fs->slice_height > f->height)"];
"1001140" [label="(Call,(unsigned)fs->slice_x + (uint64_t)fs->slice_width)"];
"1000204" [label="(Identifier,state)"];
"1000124" [label="(Identifier,state)"];
"1000177" [label="(Identifier,state)"];
"1000870" [label="(Identifier,state)"];
"1001017" [label="(Identifier,c)"];
"1001058" [label="(Call,(get_symbol(c, state, 0) + 1) * f->height)"];
"1001116" [label="(Call,(unsigned)fs->slice_width  > f->width ||\n                (unsigned)fs->slice_height > f->height)"];
"1001080" [label="(Identifier,fs)"];
"1000252" [label="(Call,transparency   = get_rac(c, state))"];
"1001031" [label="(Literal,0)"];
"1001202" [label="(Identifier,c)"];
"1000203" [label="(Identifier,c)"];
"1001027" [label="(Call,get_symbol(c, state, 0)      * f->height)"];
"1001146" [label="(Call,(uint64_t)fs->slice_width)"];
"1000250" [label="(Identifier,state)"];
"1001123" [label="(Call,f->width)"];
"1000201" [label="(Call,get_symbol(c, state, 1) + c->one_state[i])"];
"1000233" [label="(Identifier,state)"];
"1000175" [label="(Call,get_symbol(c, state, 0))"];
"1001075" [label="(Call,f->num_h_slices)"];
"1001203" [label="(Identifier,state)"];
"1001148" [label="(Call,fs->slice_width)"];
"1000225" [label="(Call,f->avctx->bits_per_raw_sample = get_symbol(c, state, 0))"];
"1000836" [label="(Call,context_count = read_quant_tables(c, f->quant_table))"];
"1000869" [label="(Identifier,c)"];
"1001029" [label="(Identifier,c)"];
"1000246" [label="(Call,chroma_v_shift = get_symbol(c, state, 0))"];
"1000131" [label="(Identifier,f)"];
"1001140" [label="(Call,(unsigned)fs->slice_x + (uint64_t)fs->slice_width)"];
"1001102" [label="(Identifier,fs)"];
"1001010" [label="(Block,)"];
"1000165" [label="(Call,f->ac      = f->avctx->coder_type = get_symbol(c, state, 0))"];
"1001094" [label="(Call,f->num_h_slices)"];
"1001152" [label="(Identifier,f)"];
"1001019" [label="(Literal,0)"];
"1001015" [label="(Call,get_symbol(c, state, 0)      * f->width)"];
"1001097" [label="(Call,fs->slice_x)"];
"1001201" [label="(Call,get_symbol(c, state, 0))"];
"1000123" [label="(Call,memset(state, 128, sizeof(state)))"];
"1000115" [label="(Call,&f->slice_context[0]->c)"];
"1001021" [label="(Identifier,f)"];
"1001249" [label="(Call,memcpy(p->quant_table, f->quant_table, sizeof(p->quant_table)))"];
"1000140" [label="(Call,v= get_symbol(c, state, 0))"];
"1001060" [label="(Call,get_symbol(c, state, 0))"];
"1001062" [label="(Identifier,state)"];
"1000217" [label="(Identifier,state)"];
"1001055" [label="(Identifier,fs)"];
"1000144" [label="(Identifier,state)"];
"1001204" [label="(Literal,0)"];
"1001098" [label="(Identifier,fs)"];
"1000235" [label="(Call,chroma_planes  = get_rac(c, state))"];
"1000245" [label="(Literal,0)"];
"1001011" [label="(Call,fs->slice_x      =  get_symbol(c, state, 0)      * f->width)"];
"1000242" [label="(Call,get_symbol(c, state, 0))"];
"1001033" [label="(Identifier,f)"];
"1001085" [label="(Call,fs->slice_width  = fs->slice_width  / f->num_h_slices - fs->slice_x)"];
"1001170" [label="(Identifier,AVERROR_INVALIDDATA)"];
"1000232" [label="(Identifier,c)"];
"1001120" [label="(Call,fs->slice_width)"];
"1001047" [label="(Call,f->width)"];
"1001072" [label="(Call,fs->slice_x)"];
"1001137" [label="(ControlStructure,if (   (unsigned)fs->slice_x + (uint64_t)fs->slice_width  > f->width\n                || (unsigned)fs->slice_y + (uint64_t)fs->slice_height > f->height))"];
"1001036" [label="(Call,fs->slice_width)"];
"1000216" [label="(Identifier,c)"];
"1001138" [label="(Call,(unsigned)fs->slice_x + (uint64_t)fs->slice_width  > f->width\n                || (unsigned)fs->slice_y + (uint64_t)fs->slice_height > f->height)"];
"1001124" [label="(Identifier,f)"];
"1000104" [label="(Block,)"];
"1000169" [label="(Call,f->avctx->coder_type = get_symbol(c, state, 0))"];
"1001039" [label="(Call,(get_symbol(c, state, 0) + 1) * f->width  + fs->slice_x)"];
"1000143" [label="(Identifier,c)"];
"1001046" [label="(Literal,1)"];
"1001063" [label="(Literal,0)"];
"1000254" [label="(Call,get_rac(c, state))"];
"1000114" [label="(Identifier,c)"];
"1000864" [label="(Call,f->slice_count = get_symbol(c, state, 0))"];
"1001151" [label="(Call,f->width)"];
"1000195" [label="(Call,f->state_transition[i] = get_symbol(c, state, 1) + c->one_state[i])"];
"1001141" [label="(Call,(unsigned)fs->slice_x)"];
"1001051" [label="(Identifier,fs)"];
"1001061" [label="(Identifier,c)"];
"1001025" [label="(Identifier,fs)"];
"1000142" [label="(Call,get_symbol(c, state, 0))"];
"1001199" [label="(Call,idx = get_symbol(c, state, 0))"];
"1001091" [label="(Call,fs->slice_width)"];
"1000240" [label="(Call,chroma_h_shift = get_symbol(c, state, 0))"];
"1000211" [label="(Call,f->colorspace = get_symbol(c, state, 0))"];
"1000234" [label="(Literal,0)"];
"1000126" [label="(Call,sizeof(state))"];
"1001295" [label="(MethodReturn,static int)"];
"1001154" [label="(Call,(unsigned)fs->slice_y + (uint64_t)fs->slice_height > f->height)"];
"1000248" [label="(Call,get_symbol(c, state, 0))"];
"1000244" [label="(Identifier,state)"];
"1000176" [label="(Identifier,c)"];
"1001012" [label="(Call,fs->slice_x)"];
"1001071" [label="(Call,fs->slice_x     /= f->num_h_slices)"];
"1001045" [label="(Literal,0)"];
"1000238" [label="(Identifier,c)"];
"1001139" [label="(Call,(unsigned)fs->slice_x + (uint64_t)fs->slice_width  > f->width)"];
"1001086" [label="(Call,fs->slice_width)"];
"1001115" [label="(ControlStructure,if ((unsigned)fs->slice_width  > f->width ||\n                (unsigned)fs->slice_height > f->height))"];
"1001041" [label="(Call,get_symbol(c, state, 0) + 1)"];
"1001090" [label="(Call,fs->slice_width  / f->num_h_slices)"];
"1000255" [label="(Identifier,c)"];
"1001044" [label="(Identifier,state)"];
"1000239" [label="(Identifier,state)"];
"1001089" [label="(Call,fs->slice_width  / f->num_h_slices - fs->slice_x)"];
"1001064" [label="(Literal,1)"];
"1001042" [label="(Call,get_symbol(c, state, 0))"];
"1000218" [label="(Literal,0)"];
"1001117" [label="(Call,(unsigned)fs->slice_width  > f->width)"];
"1000840" [label="(Call,f->quant_table)"];
"1001143" [label="(Call,fs->slice_x)"];
"1000125" [label="(Literal,128)"];
"1001126" [label="(Call,(unsigned)fs->slice_height > f->height)"];
"1001028" [label="(Call,get_symbol(c, state, 0))"];
"1000251" [label="(Literal,0)"];
"1001043" [label="(Identifier,c)"];
"1000256" [label="(Identifier,state)"];
"1001040" [label="(Call,(get_symbol(c, state, 0) + 1) * f->width)"];
"1000868" [label="(Call,get_symbol(c, state, 0))"];
"1000145" [label="(Literal,0)"];
"1000839" [label="(Identifier,c)"];
"1000871" [label="(Literal,0)"];
"1000178" [label="(Literal,0)"];
"1001018" [label="(Identifier,state)"];
"1001059" [label="(Call,get_symbol(c, state, 0) + 1)"];
"1000205" [label="(Literal,1)"];
"1000249" [label="(Identifier,c)"];
"1001173" [label="(Identifier,i)"];
"1001050" [label="(Call,fs->slice_x)"];
"1000231" [label="(Call,get_symbol(c, state, 0))"];
"1000215" [label="(Call,get_symbol(c, state, 0))"];
"1000237" [label="(Call,get_rac(c, state))"];
"1001118" [label="(Call,(unsigned)fs->slice_width)"];
"1000113" [label="(Call,c = &f->slice_context[0]->c)"];
"1000243" [label="(Identifier,c)"];
"1001020" [label="(Call,f->width)"];
"1001136" [label="(Identifier,AVERROR_INVALIDDATA)"];
"1001030" [label="(Identifier,state)"];
"1000208" [label="(Identifier,c)"];
"1000838" [label="(Call,read_quant_tables(c, f->quant_table))"];
"1000202" [label="(Call,get_symbol(c, state, 1))"];
"1001035" [label="(Call,fs->slice_width  = (get_symbol(c, state, 0) + 1) * f->width  + fs->slice_x)"];
"1001016" [label="(Call,get_symbol(c, state, 0))"];
"1001071" -> "1001010"  [label="AST: "];
"1001071" -> "1001075"  [label="CFG: "];
"1001072" -> "1001071"  [label="AST: "];
"1001075" -> "1001071"  [label="AST: "];
"1001080" -> "1001071"  [label="CFG: "];
"1001090" -> "1001071"  [label="DDG: f->num_h_slices"];
"1001011" -> "1001071"  [label="DDG: fs->slice_x"];
"1001071" -> "1001089"  [label="DDG: fs->slice_x"];
"1001090" -> "1001089"  [label="AST: "];
"1001090" -> "1001094"  [label="CFG: "];
"1001091" -> "1001090"  [label="AST: "];
"1001094" -> "1001090"  [label="AST: "];
"1001098" -> "1001090"  [label="CFG: "];
"1001090" -> "1001295"  [label="DDG: f->num_h_slices"];
"1001090" -> "1001089"  [label="DDG: fs->slice_width"];
"1001090" -> "1001089"  [label="DDG: f->num_h_slices"];
"1001035" -> "1001090"  [label="DDG: fs->slice_width"];
"1001035" -> "1001010"  [label="AST: "];
"1001035" -> "1001039"  [label="CFG: "];
"1001036" -> "1001035"  [label="AST: "];
"1001039" -> "1001035"  [label="AST: "];
"1001055" -> "1001035"  [label="CFG: "];
"1001035" -> "1001295"  [label="DDG: (get_symbol(c, state, 0) + 1) * f->width  + fs->slice_x"];
"1001040" -> "1001035"  [label="DDG: get_symbol(c, state, 0) + 1"];
"1001040" -> "1001035"  [label="DDG: f->width"];
"1001011" -> "1001035"  [label="DDG: fs->slice_x"];
"1001040" -> "1001039"  [label="AST: "];
"1001040" -> "1001047"  [label="CFG: "];
"1001041" -> "1001040"  [label="AST: "];
"1001047" -> "1001040"  [label="AST: "];
"1001051" -> "1001040"  [label="CFG: "];
"1001040" -> "1001039"  [label="DDG: get_symbol(c, state, 0) + 1"];
"1001040" -> "1001039"  [label="DDG: f->width"];
"1001042" -> "1001040"  [label="DDG: c"];
"1001042" -> "1001040"  [label="DDG: state"];
"1001042" -> "1001040"  [label="DDG: 0"];
"1001015" -> "1001040"  [label="DDG: f->width"];
"1001040" -> "1001117"  [label="DDG: f->width"];
"1001042" -> "1001041"  [label="AST: "];
"1001042" -> "1001045"  [label="CFG: "];
"1001043" -> "1001042"  [label="AST: "];
"1001044" -> "1001042"  [label="AST: "];
"1001045" -> "1001042"  [label="AST: "];
"1001046" -> "1001042"  [label="CFG: "];
"1001042" -> "1001041"  [label="DDG: c"];
"1001042" -> "1001041"  [label="DDG: state"];
"1001042" -> "1001041"  [label="DDG: 0"];
"1001028" -> "1001042"  [label="DDG: c"];
"1001028" -> "1001042"  [label="DDG: state"];
"1001042" -> "1001060"  [label="DDG: c"];
"1001042" -> "1001060"  [label="DDG: state"];
"1001028" -> "1001027"  [label="AST: "];
"1001028" -> "1001031"  [label="CFG: "];
"1001029" -> "1001028"  [label="AST: "];
"1001030" -> "1001028"  [label="AST: "];
"1001031" -> "1001028"  [label="AST: "];
"1001033" -> "1001028"  [label="CFG: "];
"1001028" -> "1001027"  [label="DDG: c"];
"1001028" -> "1001027"  [label="DDG: state"];
"1001028" -> "1001027"  [label="DDG: 0"];
"1001016" -> "1001028"  [label="DDG: c"];
"1001016" -> "1001028"  [label="DDG: state"];
"1001016" -> "1001015"  [label="AST: "];
"1001016" -> "1001019"  [label="CFG: "];
"1001017" -> "1001016"  [label="AST: "];
"1001018" -> "1001016"  [label="AST: "];
"1001019" -> "1001016"  [label="AST: "];
"1001021" -> "1001016"  [label="CFG: "];
"1001016" -> "1001015"  [label="DDG: c"];
"1001016" -> "1001015"  [label="DDG: state"];
"1001016" -> "1001015"  [label="DDG: 0"];
"1001060" -> "1001016"  [label="DDG: c"];
"1001060" -> "1001016"  [label="DDG: state"];
"1000254" -> "1001016"  [label="DDG: c"];
"1000254" -> "1001016"  [label="DDG: state"];
"1000113" -> "1001016"  [label="DDG: c"];
"1001201" -> "1001016"  [label="DDG: c"];
"1001201" -> "1001016"  [label="DDG: state"];
"1000838" -> "1001016"  [label="DDG: c"];
"1000868" -> "1001016"  [label="DDG: c"];
"1000868" -> "1001016"  [label="DDG: state"];
"1000123" -> "1001016"  [label="DDG: state"];
"1001060" -> "1001059"  [label="AST: "];
"1001060" -> "1001063"  [label="CFG: "];
"1001061" -> "1001060"  [label="AST: "];
"1001062" -> "1001060"  [label="AST: "];
"1001063" -> "1001060"  [label="AST: "];
"1001064" -> "1001060"  [label="CFG: "];
"1001060" -> "1001295"  [label="DDG: state"];
"1001060" -> "1001295"  [label="DDG: c"];
"1001060" -> "1001058"  [label="DDG: c"];
"1001060" -> "1001058"  [label="DDG: state"];
"1001060" -> "1001058"  [label="DDG: 0"];
"1001060" -> "1001059"  [label="DDG: c"];
"1001060" -> "1001059"  [label="DDG: state"];
"1001060" -> "1001059"  [label="DDG: 0"];
"1001060" -> "1001201"  [label="DDG: c"];
"1001060" -> "1001201"  [label="DDG: state"];
"1000254" -> "1000252"  [label="AST: "];
"1000254" -> "1000256"  [label="CFG: "];
"1000255" -> "1000254"  [label="AST: "];
"1000256" -> "1000254"  [label="AST: "];
"1000252" -> "1000254"  [label="CFG: "];
"1000254" -> "1001295"  [label="DDG: c"];
"1000254" -> "1001295"  [label="DDG: state"];
"1000254" -> "1000252"  [label="DDG: c"];
"1000254" -> "1000252"  [label="DDG: state"];
"1000248" -> "1000254"  [label="DDG: c"];
"1000248" -> "1000254"  [label="DDG: state"];
"1000254" -> "1000838"  [label="DDG: c"];
"1000254" -> "1000868"  [label="DDG: c"];
"1000254" -> "1000868"  [label="DDG: state"];
"1000254" -> "1001201"  [label="DDG: c"];
"1000254" -> "1001201"  [label="DDG: state"];
"1000248" -> "1000246"  [label="AST: "];
"1000248" -> "1000251"  [label="CFG: "];
"1000249" -> "1000248"  [label="AST: "];
"1000250" -> "1000248"  [label="AST: "];
"1000251" -> "1000248"  [label="AST: "];
"1000246" -> "1000248"  [label="CFG: "];
"1000248" -> "1000246"  [label="DDG: c"];
"1000248" -> "1000246"  [label="DDG: state"];
"1000248" -> "1000246"  [label="DDG: 0"];
"1000242" -> "1000248"  [label="DDG: c"];
"1000242" -> "1000248"  [label="DDG: state"];
"1000242" -> "1000240"  [label="AST: "];
"1000242" -> "1000245"  [label="CFG: "];
"1000243" -> "1000242"  [label="AST: "];
"1000244" -> "1000242"  [label="AST: "];
"1000245" -> "1000242"  [label="AST: "];
"1000240" -> "1000242"  [label="CFG: "];
"1000242" -> "1000240"  [label="DDG: c"];
"1000242" -> "1000240"  [label="DDG: state"];
"1000242" -> "1000240"  [label="DDG: 0"];
"1000237" -> "1000242"  [label="DDG: c"];
"1000237" -> "1000242"  [label="DDG: state"];
"1000237" -> "1000235"  [label="AST: "];
"1000237" -> "1000239"  [label="CFG: "];
"1000238" -> "1000237"  [label="AST: "];
"1000239" -> "1000237"  [label="AST: "];
"1000235" -> "1000237"  [label="CFG: "];
"1000237" -> "1000235"  [label="DDG: c"];
"1000237" -> "1000235"  [label="DDG: state"];
"1000215" -> "1000237"  [label="DDG: c"];
"1000215" -> "1000237"  [label="DDG: state"];
"1000231" -> "1000237"  [label="DDG: c"];
"1000231" -> "1000237"  [label="DDG: state"];
"1000215" -> "1000211"  [label="AST: "];
"1000215" -> "1000218"  [label="CFG: "];
"1000216" -> "1000215"  [label="AST: "];
"1000217" -> "1000215"  [label="AST: "];
"1000218" -> "1000215"  [label="AST: "];
"1000211" -> "1000215"  [label="CFG: "];
"1000215" -> "1000211"  [label="DDG: c"];
"1000215" -> "1000211"  [label="DDG: state"];
"1000215" -> "1000211"  [label="DDG: 0"];
"1000202" -> "1000215"  [label="DDG: c"];
"1000202" -> "1000215"  [label="DDG: state"];
"1000175" -> "1000215"  [label="DDG: c"];
"1000175" -> "1000215"  [label="DDG: state"];
"1000215" -> "1000231"  [label="DDG: c"];
"1000215" -> "1000231"  [label="DDG: state"];
"1000202" -> "1000201"  [label="AST: "];
"1000202" -> "1000205"  [label="CFG: "];
"1000203" -> "1000202"  [label="AST: "];
"1000204" -> "1000202"  [label="AST: "];
"1000205" -> "1000202"  [label="AST: "];
"1000208" -> "1000202"  [label="CFG: "];
"1000202" -> "1000195"  [label="DDG: c"];
"1000202" -> "1000195"  [label="DDG: state"];
"1000202" -> "1000195"  [label="DDG: 1"];
"1000202" -> "1000201"  [label="DDG: c"];
"1000202" -> "1000201"  [label="DDG: state"];
"1000202" -> "1000201"  [label="DDG: 1"];
"1000175" -> "1000202"  [label="DDG: c"];
"1000175" -> "1000202"  [label="DDG: state"];
"1000175" -> "1000169"  [label="AST: "];
"1000175" -> "1000178"  [label="CFG: "];
"1000176" -> "1000175"  [label="AST: "];
"1000177" -> "1000175"  [label="AST: "];
"1000178" -> "1000175"  [label="AST: "];
"1000169" -> "1000175"  [label="CFG: "];
"1000175" -> "1000165"  [label="DDG: c"];
"1000175" -> "1000165"  [label="DDG: state"];
"1000175" -> "1000165"  [label="DDG: 0"];
"1000175" -> "1000169"  [label="DDG: c"];
"1000175" -> "1000169"  [label="DDG: state"];
"1000175" -> "1000169"  [label="DDG: 0"];
"1000142" -> "1000175"  [label="DDG: c"];
"1000142" -> "1000175"  [label="DDG: state"];
"1000142" -> "1000140"  [label="AST: "];
"1000142" -> "1000145"  [label="CFG: "];
"1000143" -> "1000142"  [label="AST: "];
"1000144" -> "1000142"  [label="AST: "];
"1000145" -> "1000142"  [label="AST: "];
"1000140" -> "1000142"  [label="CFG: "];
"1000142" -> "1001295"  [label="DDG: state"];
"1000142" -> "1001295"  [label="DDG: c"];
"1000142" -> "1000140"  [label="DDG: c"];
"1000142" -> "1000140"  [label="DDG: state"];
"1000142" -> "1000140"  [label="DDG: 0"];
"1000113" -> "1000142"  [label="DDG: c"];
"1000123" -> "1000142"  [label="DDG: state"];
"1000113" -> "1000104"  [label="AST: "];
"1000113" -> "1000115"  [label="CFG: "];
"1000114" -> "1000113"  [label="AST: "];
"1000115" -> "1000113"  [label="AST: "];
"1000124" -> "1000113"  [label="CFG: "];
"1000113" -> "1001295"  [label="DDG: c"];
"1000113" -> "1001295"  [label="DDG: &f->slice_context[0]->c"];
"1000113" -> "1000838"  [label="DDG: c"];
"1000113" -> "1000868"  [label="DDG: c"];
"1000113" -> "1001201"  [label="DDG: c"];
"1000123" -> "1000104"  [label="AST: "];
"1000123" -> "1000126"  [label="CFG: "];
"1000124" -> "1000123"  [label="AST: "];
"1000125" -> "1000123"  [label="AST: "];
"1000126" -> "1000123"  [label="AST: "];
"1000131" -> "1000123"  [label="CFG: "];
"1000123" -> "1001295"  [label="DDG: memset(state, 128, sizeof(state))"];
"1000123" -> "1001295"  [label="DDG: state"];
"1000123" -> "1000868"  [label="DDG: state"];
"1000123" -> "1001201"  [label="DDG: state"];
"1000231" -> "1000225"  [label="AST: "];
"1000231" -> "1000234"  [label="CFG: "];
"1000232" -> "1000231"  [label="AST: "];
"1000233" -> "1000231"  [label="AST: "];
"1000234" -> "1000231"  [label="AST: "];
"1000225" -> "1000231"  [label="CFG: "];
"1000231" -> "1000225"  [label="DDG: c"];
"1000231" -> "1000225"  [label="DDG: state"];
"1000231" -> "1000225"  [label="DDG: 0"];
"1001201" -> "1001199"  [label="AST: "];
"1001201" -> "1001204"  [label="CFG: "];
"1001202" -> "1001201"  [label="AST: "];
"1001203" -> "1001201"  [label="AST: "];
"1001204" -> "1001201"  [label="AST: "];
"1001199" -> "1001201"  [label="CFG: "];
"1001201" -> "1001295"  [label="DDG: c"];
"1001201" -> "1001295"  [label="DDG: state"];
"1001201" -> "1001199"  [label="DDG: c"];
"1001201" -> "1001199"  [label="DDG: state"];
"1001201" -> "1001199"  [label="DDG: 0"];
"1000838" -> "1001201"  [label="DDG: c"];
"1000868" -> "1001201"  [label="DDG: c"];
"1000868" -> "1001201"  [label="DDG: state"];
"1000838" -> "1000836"  [label="AST: "];
"1000838" -> "1000840"  [label="CFG: "];
"1000839" -> "1000838"  [label="AST: "];
"1000840" -> "1000838"  [label="AST: "];
"1000836" -> "1000838"  [label="CFG: "];
"1000838" -> "1001295"  [label="DDG: c"];
"1000838" -> "1001295"  [label="DDG: f->quant_table"];
"1000838" -> "1000836"  [label="DDG: c"];
"1000838" -> "1000836"  [label="DDG: f->quant_table"];
"1000838" -> "1001249"  [label="DDG: f->quant_table"];
"1000868" -> "1000864"  [label="AST: "];
"1000868" -> "1000871"  [label="CFG: "];
"1000869" -> "1000868"  [label="AST: "];
"1000870" -> "1000868"  [label="AST: "];
"1000871" -> "1000868"  [label="AST: "];
"1000864" -> "1000868"  [label="CFG: "];
"1000868" -> "1001295"  [label="DDG: state"];
"1000868" -> "1001295"  [label="DDG: c"];
"1000868" -> "1000864"  [label="DDG: c"];
"1000868" -> "1000864"  [label="DDG: state"];
"1000868" -> "1000864"  [label="DDG: 0"];
"1001015" -> "1001011"  [label="AST: "];
"1001015" -> "1001020"  [label="CFG: "];
"1001020" -> "1001015"  [label="AST: "];
"1001011" -> "1001015"  [label="CFG: "];
"1001015" -> "1001011"  [label="DDG: get_symbol(c, state, 0)"];
"1001015" -> "1001011"  [label="DDG: f->width"];
"1001139" -> "1001015"  [label="DDG: f->width"];
"1001139" -> "1001138"  [label="AST: "];
"1001139" -> "1001151"  [label="CFG: "];
"1001140" -> "1001139"  [label="AST: "];
"1001151" -> "1001139"  [label="AST: "];
"1001157" -> "1001139"  [label="CFG: "];
"1001138" -> "1001139"  [label="CFG: "];
"1001139" -> "1001295"  [label="DDG: (unsigned)fs->slice_x + (uint64_t)fs->slice_width"];
"1001139" -> "1001295"  [label="DDG: f->width"];
"1001139" -> "1001138"  [label="DDG: (unsigned)fs->slice_x + (uint64_t)fs->slice_width"];
"1001139" -> "1001138"  [label="DDG: f->width"];
"1001141" -> "1001139"  [label="DDG: fs->slice_x"];
"1001146" -> "1001139"  [label="DDG: fs->slice_width"];
"1001117" -> "1001139"  [label="DDG: f->width"];
"1001141" -> "1001140"  [label="AST: "];
"1001141" -> "1001143"  [label="CFG: "];
"1001142" -> "1001141"  [label="AST: "];
"1001143" -> "1001141"  [label="AST: "];
"1001147" -> "1001141"  [label="CFG: "];
"1001141" -> "1001295"  [label="DDG: fs->slice_x"];
"1001141" -> "1001140"  [label="DDG: fs->slice_x"];
"1001089" -> "1001141"  [label="DDG: fs->slice_x"];
"1001089" -> "1001085"  [label="AST: "];
"1001089" -> "1001097"  [label="CFG: "];
"1001097" -> "1001089"  [label="AST: "];
"1001085" -> "1001089"  [label="CFG: "];
"1001089" -> "1001295"  [label="DDG: fs->slice_x"];
"1001089" -> "1001295"  [label="DDG: fs->slice_width  / f->num_h_slices"];
"1001089" -> "1001085"  [label="DDG: fs->slice_width  / f->num_h_slices"];
"1001089" -> "1001085"  [label="DDG: fs->slice_x"];
"1001011" -> "1001010"  [label="AST: "];
"1001012" -> "1001011"  [label="AST: "];
"1001025" -> "1001011"  [label="CFG: "];
"1001011" -> "1001295"  [label="DDG: get_symbol(c, state, 0)      * f->width"];
"1001011" -> "1001039"  [label="DDG: fs->slice_x"];
"1001146" -> "1001140"  [label="AST: "];
"1001146" -> "1001148"  [label="CFG: "];
"1001147" -> "1001146"  [label="AST: "];
"1001148" -> "1001146"  [label="AST: "];
"1001140" -> "1001146"  [label="CFG: "];
"1001146" -> "1001295"  [label="DDG: fs->slice_width"];
"1001146" -> "1001140"  [label="DDG: fs->slice_width"];
"1001118" -> "1001146"  [label="DDG: fs->slice_width"];
"1001118" -> "1001117"  [label="AST: "];
"1001118" -> "1001120"  [label="CFG: "];
"1001119" -> "1001118"  [label="AST: "];
"1001120" -> "1001118"  [label="AST: "];
"1001124" -> "1001118"  [label="CFG: "];
"1001118" -> "1001295"  [label="DDG: fs->slice_width"];
"1001118" -> "1001117"  [label="DDG: fs->slice_width"];
"1001085" -> "1001118"  [label="DDG: fs->slice_width"];
"1001085" -> "1001010"  [label="AST: "];
"1001086" -> "1001085"  [label="AST: "];
"1001102" -> "1001085"  [label="CFG: "];
"1001085" -> "1001295"  [label="DDG: fs->slice_width  / f->num_h_slices - fs->slice_x"];
"1001117" -> "1001116"  [label="AST: "];
"1001117" -> "1001123"  [label="CFG: "];
"1001123" -> "1001117"  [label="AST: "];
"1001128" -> "1001117"  [label="CFG: "];
"1001116" -> "1001117"  [label="CFG: "];
"1001117" -> "1001295"  [label="DDG: f->width"];
"1001117" -> "1001295"  [label="DDG: (unsigned)fs->slice_width"];
"1001117" -> "1001116"  [label="DDG: (unsigned)fs->slice_width"];
"1001117" -> "1001116"  [label="DDG: f->width"];
"1001116" -> "1001115"  [label="AST: "];
"1001116" -> "1001126"  [label="CFG: "];
"1001126" -> "1001116"  [label="AST: "];
"1001136" -> "1001116"  [label="CFG: "];
"1001142" -> "1001116"  [label="CFG: "];
"1001116" -> "1001295"  [label="DDG: (unsigned)fs->slice_width  > f->width ||\n                (unsigned)fs->slice_height > f->height"];
"1001116" -> "1001295"  [label="DDG: (unsigned)fs->slice_height > f->height"];
"1001116" -> "1001295"  [label="DDG: (unsigned)fs->slice_width  > f->width"];
"1001126" -> "1001116"  [label="DDG: (unsigned)fs->slice_height"];
"1001126" -> "1001116"  [label="DDG: f->height"];
"1001039" -> "1001050"  [label="CFG: "];
"1001050" -> "1001039"  [label="AST: "];
"1001039" -> "1001295"  [label="DDG: (get_symbol(c, state, 0) + 1) * f->width"];
"1001138" -> "1001137"  [label="AST: "];
"1001138" -> "1001154"  [label="CFG: "];
"1001154" -> "1001138"  [label="AST: "];
"1001170" -> "1001138"  [label="CFG: "];
"1001173" -> "1001138"  [label="CFG: "];
"1001138" -> "1001295"  [label="DDG: (unsigned)fs->slice_y + (uint64_t)fs->slice_height > f->height"];
"1001138" -> "1001295"  [label="DDG: (unsigned)fs->slice_x + (uint64_t)fs->slice_width  > f->width"];
"1001138" -> "1001295"  [label="DDG: (unsigned)fs->slice_x + (uint64_t)fs->slice_width  > f->width\n                || (unsigned)fs->slice_y + (uint64_t)fs->slice_height > f->height"];
"1001154" -> "1001138"  [label="DDG: (unsigned)fs->slice_y + (uint64_t)fs->slice_height"];
"1001154" -> "1001138"  [label="DDG: f->height"];
"1001152" -> "1001140"  [label="CFG: "];
"1001140" -> "1001295"  [label="DDG: (uint64_t)fs->slice_width"];
"1001140" -> "1001295"  [label="DDG: (unsigned)fs->slice_x"];
}
