digraph "1_linux_9590232bb4f4cc824f3425a6e1349afbe6d6d2b7_2@API" {
"1000363" [label="(Call,ion_free(client, cleanup_handle))"];
"1000309" [label="(Call,ion_sync_for_device(client, data.fd.fd))"];
"1000106" [label="(Call,*client = filp->private_data)"];
"1000254" [label="(Call,ion_share_dma_buf_fd(client, handle))"];
"1000235" [label="(Call,ion_handle_get_by_id(client, data.handle.handle))"];
"1000243" [label="(Call,IS_ERR(handle))"];
"1000233" [label="(Call,handle = ion_handle_get_by_id(client, data.handle.handle))"];
"1000329" [label="(Call,dev->custom_ioctl(client, data.custom.cmd,\n\t\t\t\t\t\tdata.custom.arg))"];
"1000280" [label="(Call,ion_import_dma_buf_fd(client, data.fd.fd))"];
"1000223" [label="(Call,ion_free(client, handle))"];
"1000210" [label="(Call,ion_handle_get_by_id(client, data.handle.handle))"];
"1000218" [label="(Call,IS_ERR(handle))"];
"1000208" [label="(Call,handle = ion_handle_get_by_id(client, data.handle.handle))"];
"1000164" [label="(Call,ion_alloc(client, data.allocation.len,\n\t\t\t\t\t\tdata.allocation.align,\n\t\t\t\t\t\tdata.allocation.heap_id_mask,\n\t\t\t\t\t\tdata.allocation.flags))"];
"1000118" [label="(Call,*cleanup_handle = NULL)"];
"1000201" [label="(Call,cleanup_handle = handle)"];
"1000187" [label="(Call,IS_ERR(handle))"];
"1000162" [label="(Call,handle = ion_alloc(client, data.allocation.len,\n\t\t\t\t\t\tdata.allocation.align,\n\t\t\t\t\t\tdata.allocation.heap_id_mask,\n\t\t\t\t\t\tdata.allocation.flags))"];
"1000219" [label="(Identifier,handle)"];
"1000218" [label="(Call,IS_ERR(handle))"];
"1000255" [label="(Identifier,client)"];
"1000118" [label="(Call,*cleanup_handle = NULL)"];
"1000217" [label="(ControlStructure,if (IS_ERR(handle)))"];
"1000211" [label="(Identifier,client)"];
"1000246" [label="(Call,PTR_ERR(handle))"];
"1000113" [label="(Identifier,dev)"];
"1000251" [label="(Identifier,data)"];
"1000310" [label="(Identifier,client)"];
"1000311" [label="(Call,data.fd.fd)"];
"1000254" [label="(Call,ion_share_dma_buf_fd(client, handle))"];
"1000243" [label="(Call,IS_ERR(handle))"];
"1000336" [label="(Call,data.custom.arg)"];
"1000165" [label="(Identifier,client)"];
"1000119" [label="(Identifier,cleanup_handle)"];
"1000163" [label="(Identifier,handle)"];
"1000202" [label="(Identifier,cleanup_handle)"];
"1000282" [label="(Call,data.fd.fd)"];
"1000160" [label="(Block,)"];
"1000208" [label="(Call,handle = ion_handle_get_by_id(client, data.handle.handle))"];
"1000235" [label="(Call,ion_handle_get_by_id(client, data.handle.handle))"];
"1000307" [label="(Call,ret = ion_sync_for_device(client, data.fd.fd))"];
"1000106" [label="(Call,*client = filp->private_data)"];
"1000368" [label="(Identifier,EFAULT)"];
"1000244" [label="(Identifier,handle)"];
"1000212" [label="(Call,data.handle.handle)"];
"1000162" [label="(Call,handle = ion_alloc(client, data.allocation.len,\n\t\t\t\t\t\tdata.allocation.align,\n\t\t\t\t\t\tdata.allocation.heap_id_mask,\n\t\t\t\t\t\tdata.allocation.flags))"];
"1000203" [label="(Identifier,handle)"];
"1000120" [label="(Identifier,NULL)"];
"1000224" [label="(Identifier,client)"];
"1000201" [label="(Call,cleanup_handle = handle)"];
"1000363" [label="(Call,ion_free(client, cleanup_handle))"];
"1000364" [label="(Identifier,client)"];
"1000281" [label="(Identifier,client)"];
"1000210" [label="(Call,ion_handle_get_by_id(client, data.handle.handle))"];
"1000256" [label="(Identifier,handle)"];
"1000171" [label="(Call,data.allocation.align)"];
"1000104" [label="(Block,)"];
"1000371" [label="(MethodReturn,static long)"];
"1000247" [label="(Identifier,handle)"];
"1000206" [label="(Block,)"];
"1000237" [label="(Call,data.handle.handle)"];
"1000226" [label="(Call,ion_handle_put(handle))"];
"1000280" [label="(Call,ion_import_dma_buf_fd(client, data.fd.fd))"];
"1000186" [label="(ControlStructure,if (IS_ERR(handle)))"];
"1000176" [label="(Call,data.allocation.heap_id_mask)"];
"1000242" [label="(ControlStructure,if (IS_ERR(handle)))"];
"1000236" [label="(Identifier,client)"];
"1000181" [label="(Call,data.allocation.flags)"];
"1000248" [label="(Call,data.fd.fd = ion_share_dma_buf_fd(client, handle))"];
"1000233" [label="(Call,handle = ion_handle_get_by_id(client, data.handle.handle))"];
"1000222" [label="(Identifier,handle)"];
"1000209" [label="(Identifier,handle)"];
"1000166" [label="(Call,data.allocation.len)"];
"1000123" [label="(Identifier,ret)"];
"1000187" [label="(Call,IS_ERR(handle))"];
"1000107" [label="(Identifier,client)"];
"1000227" [label="(Identifier,handle)"];
"1000188" [label="(Identifier,handle)"];
"1000223" [label="(Call,ion_free(client, handle))"];
"1000191" [label="(Identifier,handle)"];
"1000329" [label="(Call,dev->custom_ioctl(client, data.custom.cmd,\n\t\t\t\t\t\tdata.custom.arg))"];
"1000365" [label="(Identifier,cleanup_handle)"];
"1000330" [label="(Identifier,client)"];
"1000327" [label="(Call,ret = dev->custom_ioctl(client, data.custom.cmd,\n\t\t\t\t\t\tdata.custom.arg))"];
"1000190" [label="(Call,PTR_ERR(handle))"];
"1000231" [label="(Block,)"];
"1000225" [label="(Identifier,handle)"];
"1000361" [label="(ControlStructure,if (cleanup_handle))"];
"1000164" [label="(Call,ion_alloc(client, data.allocation.len,\n\t\t\t\t\t\tdata.allocation.align,\n\t\t\t\t\t\tdata.allocation.heap_id_mask,\n\t\t\t\t\t\tdata.allocation.flags))"];
"1000331" [label="(Call,data.custom.cmd)"];
"1000257" [label="(Call,ion_handle_put(handle))"];
"1000278" [label="(Call,handle = ion_import_dma_buf_fd(client, data.fd.fd))"];
"1000204" [label="(ControlStructure,break;)"];
"1000234" [label="(Identifier,handle)"];
"1000195" [label="(Identifier,data)"];
"1000108" [label="(Call,filp->private_data)"];
"1000221" [label="(Call,PTR_ERR(handle))"];
"1000309" [label="(Call,ion_sync_for_device(client, data.fd.fd))"];
"1000363" -> "1000361"  [label="AST: "];
"1000363" -> "1000365"  [label="CFG: "];
"1000364" -> "1000363"  [label="AST: "];
"1000365" -> "1000363"  [label="AST: "];
"1000368" -> "1000363"  [label="CFG: "];
"1000363" -> "1000371"  [label="DDG: cleanup_handle"];
"1000363" -> "1000371"  [label="DDG: client"];
"1000363" -> "1000371"  [label="DDG: ion_free(client, cleanup_handle)"];
"1000309" -> "1000363"  [label="DDG: client"];
"1000254" -> "1000363"  [label="DDG: client"];
"1000329" -> "1000363"  [label="DDG: client"];
"1000280" -> "1000363"  [label="DDG: client"];
"1000223" -> "1000363"  [label="DDG: client"];
"1000164" -> "1000363"  [label="DDG: client"];
"1000118" -> "1000363"  [label="DDG: cleanup_handle"];
"1000201" -> "1000363"  [label="DDG: cleanup_handle"];
"1000309" -> "1000307"  [label="AST: "];
"1000309" -> "1000311"  [label="CFG: "];
"1000310" -> "1000309"  [label="AST: "];
"1000311" -> "1000309"  [label="AST: "];
"1000307" -> "1000309"  [label="CFG: "];
"1000309" -> "1000371"  [label="DDG: client"];
"1000309" -> "1000371"  [label="DDG: data.fd.fd"];
"1000309" -> "1000307"  [label="DDG: client"];
"1000309" -> "1000307"  [label="DDG: data.fd.fd"];
"1000106" -> "1000309"  [label="DDG: client"];
"1000106" -> "1000104"  [label="AST: "];
"1000106" -> "1000108"  [label="CFG: "];
"1000107" -> "1000106"  [label="AST: "];
"1000108" -> "1000106"  [label="AST: "];
"1000113" -> "1000106"  [label="CFG: "];
"1000106" -> "1000371"  [label="DDG: filp->private_data"];
"1000106" -> "1000371"  [label="DDG: client"];
"1000106" -> "1000164"  [label="DDG: client"];
"1000106" -> "1000210"  [label="DDG: client"];
"1000106" -> "1000235"  [label="DDG: client"];
"1000106" -> "1000280"  [label="DDG: client"];
"1000106" -> "1000329"  [label="DDG: client"];
"1000254" -> "1000248"  [label="AST: "];
"1000254" -> "1000256"  [label="CFG: "];
"1000255" -> "1000254"  [label="AST: "];
"1000256" -> "1000254"  [label="AST: "];
"1000248" -> "1000254"  [label="CFG: "];
"1000254" -> "1000371"  [label="DDG: client"];
"1000254" -> "1000248"  [label="DDG: client"];
"1000254" -> "1000248"  [label="DDG: handle"];
"1000235" -> "1000254"  [label="DDG: client"];
"1000243" -> "1000254"  [label="DDG: handle"];
"1000254" -> "1000257"  [label="DDG: handle"];
"1000235" -> "1000233"  [label="AST: "];
"1000235" -> "1000237"  [label="CFG: "];
"1000236" -> "1000235"  [label="AST: "];
"1000237" -> "1000235"  [label="AST: "];
"1000233" -> "1000235"  [label="CFG: "];
"1000235" -> "1000371"  [label="DDG: data.handle.handle"];
"1000235" -> "1000371"  [label="DDG: client"];
"1000235" -> "1000233"  [label="DDG: client"];
"1000235" -> "1000233"  [label="DDG: data.handle.handle"];
"1000243" -> "1000242"  [label="AST: "];
"1000243" -> "1000244"  [label="CFG: "];
"1000244" -> "1000243"  [label="AST: "];
"1000247" -> "1000243"  [label="CFG: "];
"1000251" -> "1000243"  [label="CFG: "];
"1000243" -> "1000371"  [label="DDG: IS_ERR(handle)"];
"1000233" -> "1000243"  [label="DDG: handle"];
"1000243" -> "1000246"  [label="DDG: handle"];
"1000233" -> "1000231"  [label="AST: "];
"1000234" -> "1000233"  [label="AST: "];
"1000244" -> "1000233"  [label="CFG: "];
"1000233" -> "1000371"  [label="DDG: ion_handle_get_by_id(client, data.handle.handle)"];
"1000329" -> "1000327"  [label="AST: "];
"1000329" -> "1000336"  [label="CFG: "];
"1000330" -> "1000329"  [label="AST: "];
"1000331" -> "1000329"  [label="AST: "];
"1000336" -> "1000329"  [label="AST: "];
"1000327" -> "1000329"  [label="CFG: "];
"1000329" -> "1000371"  [label="DDG: data.custom.cmd"];
"1000329" -> "1000371"  [label="DDG: data.custom.arg"];
"1000329" -> "1000371"  [label="DDG: client"];
"1000329" -> "1000327"  [label="DDG: client"];
"1000329" -> "1000327"  [label="DDG: data.custom.cmd"];
"1000329" -> "1000327"  [label="DDG: data.custom.arg"];
"1000280" -> "1000278"  [label="AST: "];
"1000280" -> "1000282"  [label="CFG: "];
"1000281" -> "1000280"  [label="AST: "];
"1000282" -> "1000280"  [label="AST: "];
"1000278" -> "1000280"  [label="CFG: "];
"1000280" -> "1000371"  [label="DDG: data.fd.fd"];
"1000280" -> "1000371"  [label="DDG: client"];
"1000280" -> "1000278"  [label="DDG: client"];
"1000280" -> "1000278"  [label="DDG: data.fd.fd"];
"1000223" -> "1000206"  [label="AST: "];
"1000223" -> "1000225"  [label="CFG: "];
"1000224" -> "1000223"  [label="AST: "];
"1000225" -> "1000223"  [label="AST: "];
"1000227" -> "1000223"  [label="CFG: "];
"1000223" -> "1000371"  [label="DDG: ion_free(client, handle)"];
"1000223" -> "1000371"  [label="DDG: client"];
"1000210" -> "1000223"  [label="DDG: client"];
"1000218" -> "1000223"  [label="DDG: handle"];
"1000223" -> "1000226"  [label="DDG: handle"];
"1000210" -> "1000208"  [label="AST: "];
"1000210" -> "1000212"  [label="CFG: "];
"1000211" -> "1000210"  [label="AST: "];
"1000212" -> "1000210"  [label="AST: "];
"1000208" -> "1000210"  [label="CFG: "];
"1000210" -> "1000371"  [label="DDG: data.handle.handle"];
"1000210" -> "1000371"  [label="DDG: client"];
"1000210" -> "1000208"  [label="DDG: client"];
"1000210" -> "1000208"  [label="DDG: data.handle.handle"];
"1000218" -> "1000217"  [label="AST: "];
"1000218" -> "1000219"  [label="CFG: "];
"1000219" -> "1000218"  [label="AST: "];
"1000222" -> "1000218"  [label="CFG: "];
"1000224" -> "1000218"  [label="CFG: "];
"1000218" -> "1000371"  [label="DDG: IS_ERR(handle)"];
"1000208" -> "1000218"  [label="DDG: handle"];
"1000218" -> "1000221"  [label="DDG: handle"];
"1000208" -> "1000206"  [label="AST: "];
"1000209" -> "1000208"  [label="AST: "];
"1000219" -> "1000208"  [label="CFG: "];
"1000208" -> "1000371"  [label="DDG: ion_handle_get_by_id(client, data.handle.handle)"];
"1000164" -> "1000162"  [label="AST: "];
"1000164" -> "1000181"  [label="CFG: "];
"1000165" -> "1000164"  [label="AST: "];
"1000166" -> "1000164"  [label="AST: "];
"1000171" -> "1000164"  [label="AST: "];
"1000176" -> "1000164"  [label="AST: "];
"1000181" -> "1000164"  [label="AST: "];
"1000162" -> "1000164"  [label="CFG: "];
"1000164" -> "1000371"  [label="DDG: data.allocation.len"];
"1000164" -> "1000371"  [label="DDG: data.allocation.flags"];
"1000164" -> "1000371"  [label="DDG: data.allocation.heap_id_mask"];
"1000164" -> "1000371"  [label="DDG: data.allocation.align"];
"1000164" -> "1000371"  [label="DDG: client"];
"1000164" -> "1000162"  [label="DDG: data.allocation.flags"];
"1000164" -> "1000162"  [label="DDG: data.allocation.len"];
"1000164" -> "1000162"  [label="DDG: data.allocation.heap_id_mask"];
"1000164" -> "1000162"  [label="DDG: client"];
"1000164" -> "1000162"  [label="DDG: data.allocation.align"];
"1000118" -> "1000104"  [label="AST: "];
"1000118" -> "1000120"  [label="CFG: "];
"1000119" -> "1000118"  [label="AST: "];
"1000120" -> "1000118"  [label="AST: "];
"1000123" -> "1000118"  [label="CFG: "];
"1000118" -> "1000371"  [label="DDG: NULL"];
"1000118" -> "1000371"  [label="DDG: cleanup_handle"];
"1000201" -> "1000160"  [label="AST: "];
"1000201" -> "1000203"  [label="CFG: "];
"1000202" -> "1000201"  [label="AST: "];
"1000203" -> "1000201"  [label="AST: "];
"1000204" -> "1000201"  [label="CFG: "];
"1000201" -> "1000371"  [label="DDG: handle"];
"1000201" -> "1000371"  [label="DDG: cleanup_handle"];
"1000187" -> "1000201"  [label="DDG: handle"];
"1000187" -> "1000186"  [label="AST: "];
"1000187" -> "1000188"  [label="CFG: "];
"1000188" -> "1000187"  [label="AST: "];
"1000191" -> "1000187"  [label="CFG: "];
"1000195" -> "1000187"  [label="CFG: "];
"1000187" -> "1000371"  [label="DDG: IS_ERR(handle)"];
"1000162" -> "1000187"  [label="DDG: handle"];
"1000187" -> "1000190"  [label="DDG: handle"];
"1000162" -> "1000160"  [label="AST: "];
"1000163" -> "1000162"  [label="AST: "];
"1000188" -> "1000162"  [label="CFG: "];
"1000162" -> "1000371"  [label="DDG: ion_alloc(client, data.allocation.len,\n\t\t\t\t\t\tdata.allocation.align,\n\t\t\t\t\t\tdata.allocation.heap_id_mask,\n\t\t\t\t\t\tdata.allocation.flags)"];
}
