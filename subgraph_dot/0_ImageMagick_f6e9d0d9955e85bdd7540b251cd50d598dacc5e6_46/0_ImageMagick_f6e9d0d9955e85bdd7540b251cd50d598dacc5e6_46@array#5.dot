digraph "0_ImageMagick_f6e9d0d9955e85bdd7540b251cd50d598dacc5e6_46@array" {
"1000247" [label="(Call,header_ole[0] == 0x50)"];
"1000220" [label="(Call,header_ole[0]=ReadBlobByte(image))"];
"1000224" [label="(Call,ReadBlobByte(image))"];
"1000192" [label="(Call,OpenBlob(image_info,image,ReadBinaryBlobMode,exception))"];
"1000188" [label="(Call,AcquireImage(image_info))"];
"1000148" [label="(Call,image_info != (const ImageInfo *) NULL)"];
"1000122" [label="(MethodParameterIn,const ImageInfo *image_info)"];
"1000150" [label="(Call,(const ImageInfo *) NULL)"];
"1000186" [label="(Call,image=AcquireImage(image_info))"];
"1000175" [label="(Call,exception != (ExceptionInfo *) NULL)"];
"1000123" [label="(MethodParameterIn,ExceptionInfo *exception)"];
"1000177" [label="(Call,(ExceptionInfo *) NULL)"];
"1000246" [label="(Call,(header_ole[0] == 0x50) && (header_ole[1] == 0x49) &&\n      (header_ole[2] == 0x43) && (header_ole[3] == 0x54))"];
"1000245" [label="(Call,!((header_ole[0] == 0x50) && (header_ole[1] == 0x49) &&\n      (header_ole[2] == 0x43) && (header_ole[3] == 0x54)))"];
"1000191" [label="(Identifier,status)"];
"1000271" [label="(Identifier,i)"];
"1000177" [label="(Call,(ExceptionInfo *) NULL)"];
"1001835" [label="(Call,(unsigned char *) NULL)"];
"1002186" [label="(Call,ReadImage(read_info,exception))"];
"1000122" [label="(MethodParameterIn,const ImageInfo *image_info)"];
"1000176" [label="(Identifier,exception)"];
"1000230" [label="(Call,ReadBlobByte(image))"];
"1000195" [label="(Identifier,ReadBinaryBlobMode)"];
"1000251" [label="(Literal,0x50)"];
"1000174" [label="(Call,assert(exception != (ExceptionInfo *) NULL))"];
"1000245" [label="(Call,!((header_ole[0] == 0x50) && (header_ole[1] == 0x49) &&\n      (header_ole[2] == 0x43) && (header_ole[3] == 0x54)))"];
"1000179" [label="(Identifier,NULL)"];
"1001896" [label="(Call,(const void *) NULL)"];
"1001459" [label="(Call,QueueAuthenticPixels(tile_image,0,y,tile_image->columns,1,\n                exception))"];
"1000194" [label="(Identifier,image)"];
"1000152" [label="(Identifier,NULL)"];
"1000148" [label="(Call,image_info != (const ImageInfo *) NULL)"];
"1000192" [label="(Call,OpenBlob(image_info,image,ReadBinaryBlobMode,exception))"];
"1001021" [label="(Call,(Image *) NULL)"];
"1000187" [label="(Identifier,image)"];
"1000248" [label="(Call,header_ole[0])"];
"1000996" [label="(Call,CloneImage(image,1UL*(frame.right-frame.left),\n              1UL*(frame.bottom-frame.top),MagickTrue,exception))"];
"1000147" [label="(Call,assert(image_info != (const ImageInfo *) NULL))"];
"1000207" [label="(Call,(Image *) NULL)"];
"1000252" [label="(Call,(header_ole[1] == 0x49) &&\n      (header_ole[2] == 0x43) && (header_ole[3] == 0x54))"];
"1000484" [label="(Call,InheritException(exception,&image->exception))"];
"1000225" [label="(Identifier,image)"];
"1000224" [label="(Call,ReadBlobByte(image))"];
"1000221" [label="(Call,header_ole[0])"];
"1000186" [label="(Call,image=AcquireImage(image_info))"];
"1000193" [label="(Identifier,image_info)"];
"1000244" [label="(ControlStructure,if (!((header_ole[0] == 0x50) && (header_ole[1] == 0x49) &&\n      (header_ole[2] == 0x43) && (header_ole[3] == 0x54))))"];
"1000150" [label="(Call,(const ImageInfo *) NULL)"];
"1000190" [label="(Call,status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception))"];
"1002087" [label="(Call,ThrowFileException(exception,FileOpenError,\n              \"UnableToCreateTemporaryFile\",image->filename))"];
"1002024" [label="(Call,(void *) NULL)"];
"1000246" [label="(Call,(header_ole[0] == 0x50) && (header_ole[1] == 0x49) &&\n      (header_ole[2] == 0x43) && (header_ole[3] == 0x54))"];
"1002366" [label="(MethodReturn,static Image *)"];
"1000149" [label="(Identifier,image_info)"];
"1000188" [label="(Call,AcquireImage(image_info))"];
"1001705" [label="(Call,SyncAuthenticPixels(tile_image,exception))"];
"1000123" [label="(MethodParameterIn,ExceptionInfo *exception)"];
"1000220" [label="(Call,header_ole[0]=ReadBlobByte(image))"];
"1000204" [label="(Call,DestroyImageList(image))"];
"1000228" [label="(Identifier,header_ole)"];
"1000247" [label="(Call,header_ole[0] == 0x50)"];
"1000196" [label="(Identifier,exception)"];
"1000189" [label="(Identifier,image_info)"];
"1000175" [label="(Call,exception != (ExceptionInfo *) NULL)"];
"1000255" [label="(Identifier,header_ole)"];
"1000124" [label="(Block,)"];
"1002020" [label="(Call,CloneImageInfo(image_info))"];
"1001861" [label="(Call,(const void *) NULL)"];
"1000247" -> "1000246"  [label="AST: "];
"1000247" -> "1000251"  [label="CFG: "];
"1000248" -> "1000247"  [label="AST: "];
"1000251" -> "1000247"  [label="AST: "];
"1000255" -> "1000247"  [label="CFG: "];
"1000246" -> "1000247"  [label="CFG: "];
"1000247" -> "1002366"  [label="DDG: header_ole[0]"];
"1000247" -> "1000246"  [label="DDG: header_ole[0]"];
"1000247" -> "1000246"  [label="DDG: 0x50"];
"1000220" -> "1000247"  [label="DDG: header_ole[0]"];
"1000220" -> "1000124"  [label="AST: "];
"1000220" -> "1000224"  [label="CFG: "];
"1000221" -> "1000220"  [label="AST: "];
"1000224" -> "1000220"  [label="AST: "];
"1000228" -> "1000220"  [label="CFG: "];
"1000224" -> "1000220"  [label="DDG: image"];
"1000224" -> "1000225"  [label="CFG: "];
"1000225" -> "1000224"  [label="AST: "];
"1000192" -> "1000224"  [label="DDG: image"];
"1000224" -> "1000230"  [label="DDG: image"];
"1000192" -> "1000190"  [label="AST: "];
"1000192" -> "1000196"  [label="CFG: "];
"1000193" -> "1000192"  [label="AST: "];
"1000194" -> "1000192"  [label="AST: "];
"1000195" -> "1000192"  [label="AST: "];
"1000196" -> "1000192"  [label="AST: "];
"1000190" -> "1000192"  [label="CFG: "];
"1000192" -> "1002366"  [label="DDG: ReadBinaryBlobMode"];
"1000192" -> "1002366"  [label="DDG: image_info"];
"1000192" -> "1002366"  [label="DDG: exception"];
"1000192" -> "1000190"  [label="DDG: image_info"];
"1000192" -> "1000190"  [label="DDG: image"];
"1000192" -> "1000190"  [label="DDG: ReadBinaryBlobMode"];
"1000192" -> "1000190"  [label="DDG: exception"];
"1000188" -> "1000192"  [label="DDG: image_info"];
"1000122" -> "1000192"  [label="DDG: image_info"];
"1000186" -> "1000192"  [label="DDG: image"];
"1000175" -> "1000192"  [label="DDG: exception"];
"1000123" -> "1000192"  [label="DDG: exception"];
"1000192" -> "1000204"  [label="DDG: image"];
"1000192" -> "1000484"  [label="DDG: exception"];
"1000192" -> "1000996"  [label="DDG: exception"];
"1000192" -> "1002020"  [label="DDG: image_info"];
"1000192" -> "1002087"  [label="DDG: exception"];
"1000192" -> "1002186"  [label="DDG: exception"];
"1000188" -> "1000186"  [label="AST: "];
"1000188" -> "1000189"  [label="CFG: "];
"1000189" -> "1000188"  [label="AST: "];
"1000186" -> "1000188"  [label="CFG: "];
"1000188" -> "1000186"  [label="DDG: image_info"];
"1000148" -> "1000188"  [label="DDG: image_info"];
"1000122" -> "1000188"  [label="DDG: image_info"];
"1000148" -> "1000147"  [label="AST: "];
"1000148" -> "1000150"  [label="CFG: "];
"1000149" -> "1000148"  [label="AST: "];
"1000150" -> "1000148"  [label="AST: "];
"1000147" -> "1000148"  [label="CFG: "];
"1000148" -> "1002366"  [label="DDG: (const ImageInfo *) NULL"];
"1000148" -> "1000147"  [label="DDG: image_info"];
"1000148" -> "1000147"  [label="DDG: (const ImageInfo *) NULL"];
"1000122" -> "1000148"  [label="DDG: image_info"];
"1000150" -> "1000148"  [label="DDG: NULL"];
"1000122" -> "1000121"  [label="AST: "];
"1000122" -> "1002366"  [label="DDG: image_info"];
"1000122" -> "1002020"  [label="DDG: image_info"];
"1000150" -> "1000152"  [label="CFG: "];
"1000151" -> "1000150"  [label="AST: "];
"1000152" -> "1000150"  [label="AST: "];
"1000150" -> "1000177"  [label="DDG: NULL"];
"1000186" -> "1000124"  [label="AST: "];
"1000187" -> "1000186"  [label="AST: "];
"1000191" -> "1000186"  [label="CFG: "];
"1000186" -> "1002366"  [label="DDG: AcquireImage(image_info)"];
"1000175" -> "1000174"  [label="AST: "];
"1000175" -> "1000177"  [label="CFG: "];
"1000176" -> "1000175"  [label="AST: "];
"1000177" -> "1000175"  [label="AST: "];
"1000174" -> "1000175"  [label="CFG: "];
"1000175" -> "1002366"  [label="DDG: (ExceptionInfo *) NULL"];
"1000175" -> "1000174"  [label="DDG: exception"];
"1000175" -> "1000174"  [label="DDG: (ExceptionInfo *) NULL"];
"1000123" -> "1000175"  [label="DDG: exception"];
"1000177" -> "1000175"  [label="DDG: NULL"];
"1000123" -> "1000121"  [label="AST: "];
"1000123" -> "1002366"  [label="DDG: exception"];
"1000123" -> "1000484"  [label="DDG: exception"];
"1000123" -> "1000996"  [label="DDG: exception"];
"1000123" -> "1001459"  [label="DDG: exception"];
"1000123" -> "1001705"  [label="DDG: exception"];
"1000123" -> "1002087"  [label="DDG: exception"];
"1000123" -> "1002186"  [label="DDG: exception"];
"1000177" -> "1000179"  [label="CFG: "];
"1000178" -> "1000177"  [label="AST: "];
"1000179" -> "1000177"  [label="AST: "];
"1000177" -> "1002366"  [label="DDG: NULL"];
"1000177" -> "1000207"  [label="DDG: NULL"];
"1000177" -> "1001021"  [label="DDG: NULL"];
"1000177" -> "1001835"  [label="DDG: NULL"];
"1000177" -> "1001861"  [label="DDG: NULL"];
"1000177" -> "1001896"  [label="DDG: NULL"];
"1000177" -> "1002024"  [label="DDG: NULL"];
"1000246" -> "1000245"  [label="AST: "];
"1000246" -> "1000252"  [label="CFG: "];
"1000252" -> "1000246"  [label="AST: "];
"1000245" -> "1000246"  [label="CFG: "];
"1000246" -> "1002366"  [label="DDG: (header_ole[1] == 0x49) &&\n      (header_ole[2] == 0x43) && (header_ole[3] == 0x54)"];
"1000246" -> "1002366"  [label="DDG: header_ole[0] == 0x50"];
"1000246" -> "1000245"  [label="DDG: header_ole[0] == 0x50"];
"1000246" -> "1000245"  [label="DDG: (header_ole[1] == 0x49) &&\n      (header_ole[2] == 0x43) && (header_ole[3] == 0x54)"];
"1000252" -> "1000246"  [label="DDG: header_ole[1] == 0x49"];
"1000252" -> "1000246"  [label="DDG: (header_ole[2] == 0x43) && (header_ole[3] == 0x54)"];
"1000245" -> "1000244"  [label="AST: "];
"1000271" -> "1000245"  [label="CFG: "];
"1000283" -> "1000245"  [label="CFG: "];
"1000245" -> "1002366"  [label="DDG: !((header_ole[0] == 0x50) && (header_ole[1] == 0x49) &&\n      (header_ole[2] == 0x43) && (header_ole[3] == 0x54))"];
"1000245" -> "1002366"  [label="DDG: (header_ole[0] == 0x50) && (header_ole[1] == 0x49) &&\n      (header_ole[2] == 0x43) && (header_ole[3] == 0x54)"];
}
