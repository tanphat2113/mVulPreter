digraph "0_linux_d9092f52d7e61dd1557f2db2400ddb430e85937e@pointer" {
"1000970" [label="(Call,decode_modrm(ctxt, &ctxt->memop))"];
"1000474" [label="(Call,insn_fetch(u8, ctxt))"];
"1000421" [label="(Call,insn_fetch(u8, ctxt))"];
"1000277" [label="(Call,insn_fetch(u8, ctxt))"];
"1000221" [label="(Call,__do_insn_fetch_bytes(ctxt, 1))"];
"1000130" [label="(MethodParameterIn,struct x86_emulate_ctxt *ctxt)"];
"1000447" [label="(Call,insn_fetch(u8, ctxt))"];
"1000968" [label="(Call,rc = decode_modrm(ctxt, &ctxt->memop))"];
"1001006" [label="(Call,rc != X86EMUL_CONTINUE)"];
"1001047" [label="(Call,rc != X86EMUL_CONTINUE)"];
"1001067" [label="(Call,rc != X86EMUL_CONTINUE)"];
"1001123" [label="(Call,rc != X86EMUL_CONTINUE)"];
"1001033" [label="(Call,decode_operand(ctxt, &ctxt->src, (ctxt->d >> SrcShift) & OpMask))"];
"1001031" [label="(Call,rc = decode_operand(ctxt, &ctxt->src, (ctxt->d >> SrcShift) & OpMask))"];
"1001053" [label="(Call,decode_operand(ctxt, &ctxt->src2, (ctxt->d >> Src2Shift) & OpMask))"];
"1001051" [label="(Call,rc = decode_operand(ctxt, &ctxt->src2, (ctxt->d >> Src2Shift) & OpMask))"];
"1001073" [label="(Call,decode_operand(ctxt, &ctxt->dst, (ctxt->d >> DstShift) & OpMask))"];
"1001071" [label="(Call,rc = decode_operand(ctxt, &ctxt->dst, (ctxt->d >> DstShift) & OpMask))"];
"1001105" [label="(Call,address_mask(ctxt,\n \t\t\t\t\tctxt->memopp->addr.mem.ea + ctxt->_eip))"];
"1001095" [label="(Call,ctxt->memopp->addr.mem.ea = address_mask(ctxt,\n \t\t\t\t\tctxt->memopp->addr.mem.ea + ctxt->_eip))"];
"1001096" [label="(Call,ctxt->memopp->addr.mem.ea)"];
"1001105" [label="(Call,address_mask(ctxt,\n \t\t\t\t\tctxt->memopp->addr.mem.ea + ctxt->_eip))"];
"1001006" [label="(Call,rc != X86EMUL_CONTINUE)"];
"1001128" [label="(MethodReturn,int)"];
"1001106" [label="(Identifier,ctxt)"];
"1001039" [label="(Call,(ctxt->d >> SrcShift) & OpMask)"];
"1000968" [label="(Call,rc = decode_modrm(ctxt, &ctxt->memop))"];
"1000997" [label="(Call,rc = decode_abs(ctxt, &ctxt->memop))"];
"1001069" [label="(Identifier,X86EMUL_CONTINUE)"];
"1001046" [label="(ControlStructure,if (rc != X86EMUL_CONTINUE))"];
"1000999" [label="(Call,decode_abs(ctxt, &ctxt->memop))"];
"1001053" [label="(Call,decode_operand(ctxt, &ctxt->src2, (ctxt->d >> Src2Shift) & OpMask))"];
"1001070" [label="(ControlStructure,goto done;)"];
"1000133" [label="(Block,)"];
"1001126" [label="(Identifier,EMULATION_FAILED)"];
"1000447" [label="(Call,insn_fetch(u8, ctxt))"];
"1001033" [label="(Call,decode_operand(ctxt, &ctxt->src, (ctxt->d >> SrcShift) & OpMask))"];
"1000422" [label="(Identifier,u8)"];
"1000219" [label="(Call,rc = __do_insn_fetch_bytes(ctxt, 1))"];
"1001034" [label="(Identifier,ctxt)"];
"1001012" [label="(Identifier,has_seg_override)"];
"1001122" [label="(Call,(rc != X86EMUL_CONTINUE) ? EMULATION_FAILED : EMULATION_OK)"];
"1001107" [label="(Call,ctxt->memopp->addr.mem.ea + ctxt->_eip)"];
"1000279" [label="(Identifier,ctxt)"];
"1001054" [label="(Identifier,ctxt)"];
"1001072" [label="(Identifier,rc)"];
"1000972" [label="(Call,&ctxt->memop)"];
"1001120" [label="(JumpTarget,done:)"];
"1000470" [label="(Call,ctxt->modrm = insn_fetch(u8, ctxt))"];
"1000278" [label="(Identifier,u8)"];
"1000225" [label="(Call,rc != X86EMUL_CONTINUE)"];
"1001123" [label="(Call,rc != X86EMUL_CONTINUE)"];
"1001050" [label="(ControlStructure,goto done;)"];
"1000969" [label="(Identifier,rc)"];
"1000423" [label="(Identifier,ctxt)"];
"1000222" [label="(Identifier,ctxt)"];
"1000971" [label="(Identifier,ctxt)"];
"1001051" [label="(Call,rc = decode_operand(ctxt, &ctxt->src2, (ctxt->d >> Src2Shift) & OpMask))"];
"1000475" [label="(Identifier,u8)"];
"1001067" [label="(Call,rc != X86EMUL_CONTINUE)"];
"1001074" [label="(Identifier,ctxt)"];
"1001095" [label="(Call,ctxt->memopp->addr.mem.ea = address_mask(ctxt,\n \t\t\t\t\tctxt->memopp->addr.mem.ea + ctxt->_eip))"];
"1000130" [label="(MethodParameterIn,struct x86_emulate_ctxt *ctxt)"];
"1001047" [label="(Call,rc != X86EMUL_CONTINUE)"];
"1001032" [label="(Identifier,rc)"];
"1001075" [label="(Call,&ctxt->dst)"];
"1001048" [label="(Identifier,rc)"];
"1000970" [label="(Call,decode_modrm(ctxt, &ctxt->memop))"];
"1000221" [label="(Call,__do_insn_fetch_bytes(ctxt, 1))"];
"1001079" [label="(Call,(ctxt->d >> DstShift) & OpMask)"];
"1001007" [label="(Identifier,rc)"];
"1000273" [label="(Call,ctxt->b = insn_fetch(u8, ctxt))"];
"1001066" [label="(ControlStructure,if (rc != X86EMUL_CONTINUE))"];
"1000277" [label="(Call,insn_fetch(u8, ctxt))"];
"1001005" [label="(ControlStructure,if (rc != X86EMUL_CONTINUE))"];
"1001055" [label="(Call,&ctxt->src2)"];
"1001127" [label="(Identifier,EMULATION_OK)"];
"1000967" [label="(Block,)"];
"1000417" [label="(Call,ctxt->b = insn_fetch(u8, ctxt))"];
"1001125" [label="(Identifier,X86EMUL_CONTINUE)"];
"1001071" [label="(Call,rc = decode_operand(ctxt, &ctxt->dst, (ctxt->d >> DstShift) & OpMask))"];
"1001031" [label="(Call,rc = decode_operand(ctxt, &ctxt->src, (ctxt->d >> SrcShift) & OpMask))"];
"1001089" [label="(Identifier,ctxt)"];
"1001059" [label="(Call,(ctxt->d >> Src2Shift) & OpMask)"];
"1001008" [label="(Identifier,X86EMUL_CONTINUE)"];
"1001086" [label="(ControlStructure,if (ctxt->rip_relative && likely(ctxt->memopp)))"];
"1001035" [label="(Call,&ctxt->src)"];
"1000135" [label="(Call,rc = X86EMUL_CONTINUE)"];
"1000421" [label="(Call,insn_fetch(u8, ctxt))"];
"1001052" [label="(Identifier,rc)"];
"1001073" [label="(Call,decode_operand(ctxt, &ctxt->dst, (ctxt->d >> DstShift) & OpMask))"];
"1000978" [label="(Identifier,has_seg_override)"];
"1001009" [label="(ControlStructure,goto done;)"];
"1000449" [label="(Identifier,ctxt)"];
"1001124" [label="(Identifier,rc)"];
"1000169" [label="(Call,ctxt->_eip = ctxt->eip)"];
"1000443" [label="(Call,ctxt->b = insn_fetch(u8, ctxt))"];
"1001068" [label="(Identifier,rc)"];
"1000223" [label="(Literal,1)"];
"1001049" [label="(Identifier,X86EMUL_CONTINUE)"];
"1000476" [label="(Identifier,ctxt)"];
"1000474" [label="(Call,insn_fetch(u8, ctxt))"];
"1000448" [label="(Identifier,u8)"];
"1000970" -> "1000968"  [label="AST: "];
"1000970" -> "1000972"  [label="CFG: "];
"1000971" -> "1000970"  [label="AST: "];
"1000972" -> "1000970"  [label="AST: "];
"1000968" -> "1000970"  [label="CFG: "];
"1000970" -> "1001128"  [label="DDG: &ctxt->memop"];
"1000970" -> "1001128"  [label="DDG: ctxt"];
"1000970" -> "1000968"  [label="DDG: ctxt"];
"1000970" -> "1000968"  [label="DDG: &ctxt->memop"];
"1000474" -> "1000970"  [label="DDG: ctxt"];
"1000421" -> "1000970"  [label="DDG: ctxt"];
"1000447" -> "1000970"  [label="DDG: ctxt"];
"1000277" -> "1000970"  [label="DDG: ctxt"];
"1000130" -> "1000970"  [label="DDG: ctxt"];
"1000970" -> "1001033"  [label="DDG: ctxt"];
"1000474" -> "1000470"  [label="AST: "];
"1000474" -> "1000476"  [label="CFG: "];
"1000475" -> "1000474"  [label="AST: "];
"1000476" -> "1000474"  [label="AST: "];
"1000470" -> "1000474"  [label="CFG: "];
"1000474" -> "1001128"  [label="DDG: ctxt"];
"1000474" -> "1001128"  [label="DDG: u8"];
"1000474" -> "1000470"  [label="DDG: u8"];
"1000474" -> "1000470"  [label="DDG: ctxt"];
"1000421" -> "1000474"  [label="DDG: u8"];
"1000421" -> "1000474"  [label="DDG: ctxt"];
"1000277" -> "1000474"  [label="DDG: u8"];
"1000277" -> "1000474"  [label="DDG: ctxt"];
"1000447" -> "1000474"  [label="DDG: u8"];
"1000447" -> "1000474"  [label="DDG: ctxt"];
"1000130" -> "1000474"  [label="DDG: ctxt"];
"1000474" -> "1000999"  [label="DDG: ctxt"];
"1000474" -> "1001033"  [label="DDG: ctxt"];
"1000421" -> "1000417"  [label="AST: "];
"1000421" -> "1000423"  [label="CFG: "];
"1000422" -> "1000421"  [label="AST: "];
"1000423" -> "1000421"  [label="AST: "];
"1000417" -> "1000421"  [label="CFG: "];
"1000421" -> "1001128"  [label="DDG: ctxt"];
"1000421" -> "1001128"  [label="DDG: u8"];
"1000421" -> "1000417"  [label="DDG: u8"];
"1000421" -> "1000417"  [label="DDG: ctxt"];
"1000277" -> "1000421"  [label="DDG: u8"];
"1000277" -> "1000421"  [label="DDG: ctxt"];
"1000130" -> "1000421"  [label="DDG: ctxt"];
"1000421" -> "1000447"  [label="DDG: u8"];
"1000421" -> "1000447"  [label="DDG: ctxt"];
"1000421" -> "1000999"  [label="DDG: ctxt"];
"1000421" -> "1001033"  [label="DDG: ctxt"];
"1000277" -> "1000273"  [label="AST: "];
"1000277" -> "1000279"  [label="CFG: "];
"1000278" -> "1000277"  [label="AST: "];
"1000279" -> "1000277"  [label="AST: "];
"1000273" -> "1000277"  [label="CFG: "];
"1000277" -> "1001128"  [label="DDG: u8"];
"1000277" -> "1001128"  [label="DDG: ctxt"];
"1000277" -> "1000273"  [label="DDG: u8"];
"1000277" -> "1000273"  [label="DDG: ctxt"];
"1000221" -> "1000277"  [label="DDG: ctxt"];
"1000130" -> "1000277"  [label="DDG: ctxt"];
"1000277" -> "1000999"  [label="DDG: ctxt"];
"1000277" -> "1001033"  [label="DDG: ctxt"];
"1000221" -> "1000219"  [label="AST: "];
"1000221" -> "1000223"  [label="CFG: "];
"1000222" -> "1000221"  [label="AST: "];
"1000223" -> "1000221"  [label="AST: "];
"1000219" -> "1000221"  [label="CFG: "];
"1000221" -> "1001128"  [label="DDG: ctxt"];
"1000221" -> "1000219"  [label="DDG: ctxt"];
"1000221" -> "1000219"  [label="DDG: 1"];
"1000130" -> "1000221"  [label="DDG: ctxt"];
"1000130" -> "1000129"  [label="AST: "];
"1000130" -> "1001128"  [label="DDG: ctxt"];
"1000130" -> "1000447"  [label="DDG: ctxt"];
"1000130" -> "1000999"  [label="DDG: ctxt"];
"1000130" -> "1001033"  [label="DDG: ctxt"];
"1000130" -> "1001053"  [label="DDG: ctxt"];
"1000130" -> "1001073"  [label="DDG: ctxt"];
"1000130" -> "1001105"  [label="DDG: ctxt"];
"1000447" -> "1000443"  [label="AST: "];
"1000447" -> "1000449"  [label="CFG: "];
"1000448" -> "1000447"  [label="AST: "];
"1000449" -> "1000447"  [label="AST: "];
"1000443" -> "1000447"  [label="CFG: "];
"1000447" -> "1001128"  [label="DDG: ctxt"];
"1000447" -> "1001128"  [label="DDG: u8"];
"1000447" -> "1000443"  [label="DDG: u8"];
"1000447" -> "1000443"  [label="DDG: ctxt"];
"1000447" -> "1000999"  [label="DDG: ctxt"];
"1000447" -> "1001033"  [label="DDG: ctxt"];
"1000968" -> "1000967"  [label="AST: "];
"1000969" -> "1000968"  [label="AST: "];
"1000978" -> "1000968"  [label="CFG: "];
"1000968" -> "1001128"  [label="DDG: decode_modrm(ctxt, &ctxt->memop)"];
"1000968" -> "1001006"  [label="DDG: rc"];
"1001006" -> "1001005"  [label="AST: "];
"1001006" -> "1001008"  [label="CFG: "];
"1001007" -> "1001006"  [label="AST: "];
"1001008" -> "1001006"  [label="AST: "];
"1001009" -> "1001006"  [label="CFG: "];
"1001012" -> "1001006"  [label="CFG: "];
"1000997" -> "1001006"  [label="DDG: rc"];
"1000225" -> "1001006"  [label="DDG: rc"];
"1000225" -> "1001006"  [label="DDG: X86EMUL_CONTINUE"];
"1000135" -> "1001006"  [label="DDG: rc"];
"1001006" -> "1001047"  [label="DDG: X86EMUL_CONTINUE"];
"1001006" -> "1001123"  [label="DDG: rc"];
"1001006" -> "1001123"  [label="DDG: X86EMUL_CONTINUE"];
"1001047" -> "1001046"  [label="AST: "];
"1001047" -> "1001049"  [label="CFG: "];
"1001048" -> "1001047"  [label="AST: "];
"1001049" -> "1001047"  [label="AST: "];
"1001050" -> "1001047"  [label="CFG: "];
"1001052" -> "1001047"  [label="CFG: "];
"1001031" -> "1001047"  [label="DDG: rc"];
"1001047" -> "1001067"  [label="DDG: X86EMUL_CONTINUE"];
"1001047" -> "1001123"  [label="DDG: rc"];
"1001047" -> "1001123"  [label="DDG: X86EMUL_CONTINUE"];
"1001067" -> "1001066"  [label="AST: "];
"1001067" -> "1001069"  [label="CFG: "];
"1001068" -> "1001067"  [label="AST: "];
"1001069" -> "1001067"  [label="AST: "];
"1001070" -> "1001067"  [label="CFG: "];
"1001072" -> "1001067"  [label="CFG: "];
"1001051" -> "1001067"  [label="DDG: rc"];
"1001067" -> "1001123"  [label="DDG: rc"];
"1001067" -> "1001123"  [label="DDG: X86EMUL_CONTINUE"];
"1001123" -> "1001122"  [label="AST: "];
"1001123" -> "1001125"  [label="CFG: "];
"1001124" -> "1001123"  [label="AST: "];
"1001125" -> "1001123"  [label="AST: "];
"1001126" -> "1001123"  [label="CFG: "];
"1001127" -> "1001123"  [label="CFG: "];
"1001123" -> "1001128"  [label="DDG: rc"];
"1001123" -> "1001128"  [label="DDG: X86EMUL_CONTINUE"];
"1001071" -> "1001123"  [label="DDG: rc"];
"1001033" -> "1001031"  [label="AST: "];
"1001033" -> "1001039"  [label="CFG: "];
"1001034" -> "1001033"  [label="AST: "];
"1001035" -> "1001033"  [label="AST: "];
"1001039" -> "1001033"  [label="AST: "];
"1001031" -> "1001033"  [label="CFG: "];
"1001033" -> "1001128"  [label="DDG: &ctxt->src"];
"1001033" -> "1001128"  [label="DDG: ctxt"];
"1001033" -> "1001128"  [label="DDG: (ctxt->d >> SrcShift) & OpMask"];
"1001033" -> "1001031"  [label="DDG: ctxt"];
"1001033" -> "1001031"  [label="DDG: &ctxt->src"];
"1001033" -> "1001031"  [label="DDG: (ctxt->d >> SrcShift) & OpMask"];
"1000999" -> "1001033"  [label="DDG: ctxt"];
"1001039" -> "1001033"  [label="DDG: ctxt->d >> SrcShift"];
"1001039" -> "1001033"  [label="DDG: OpMask"];
"1001033" -> "1001053"  [label="DDG: ctxt"];
"1001031" -> "1000133"  [label="AST: "];
"1001032" -> "1001031"  [label="AST: "];
"1001048" -> "1001031"  [label="CFG: "];
"1001031" -> "1001128"  [label="DDG: decode_operand(ctxt, &ctxt->src, (ctxt->d >> SrcShift) & OpMask)"];
"1001053" -> "1001051"  [label="AST: "];
"1001053" -> "1001059"  [label="CFG: "];
"1001054" -> "1001053"  [label="AST: "];
"1001055" -> "1001053"  [label="AST: "];
"1001059" -> "1001053"  [label="AST: "];
"1001051" -> "1001053"  [label="CFG: "];
"1001053" -> "1001128"  [label="DDG: &ctxt->src2"];
"1001053" -> "1001128"  [label="DDG: ctxt"];
"1001053" -> "1001128"  [label="DDG: (ctxt->d >> Src2Shift) & OpMask"];
"1001053" -> "1001051"  [label="DDG: ctxt"];
"1001053" -> "1001051"  [label="DDG: &ctxt->src2"];
"1001053" -> "1001051"  [label="DDG: (ctxt->d >> Src2Shift) & OpMask"];
"1001059" -> "1001053"  [label="DDG: ctxt->d >> Src2Shift"];
"1001059" -> "1001053"  [label="DDG: OpMask"];
"1001053" -> "1001073"  [label="DDG: ctxt"];
"1001051" -> "1000133"  [label="AST: "];
"1001052" -> "1001051"  [label="AST: "];
"1001068" -> "1001051"  [label="CFG: "];
"1001051" -> "1001128"  [label="DDG: decode_operand(ctxt, &ctxt->src2, (ctxt->d >> Src2Shift) & OpMask)"];
"1001073" -> "1001071"  [label="AST: "];
"1001073" -> "1001079"  [label="CFG: "];
"1001074" -> "1001073"  [label="AST: "];
"1001075" -> "1001073"  [label="AST: "];
"1001079" -> "1001073"  [label="AST: "];
"1001071" -> "1001073"  [label="CFG: "];
"1001073" -> "1001128"  [label="DDG: &ctxt->dst"];
"1001073" -> "1001128"  [label="DDG: ctxt"];
"1001073" -> "1001128"  [label="DDG: (ctxt->d >> DstShift) & OpMask"];
"1001073" -> "1001071"  [label="DDG: ctxt"];
"1001073" -> "1001071"  [label="DDG: &ctxt->dst"];
"1001073" -> "1001071"  [label="DDG: (ctxt->d >> DstShift) & OpMask"];
"1001079" -> "1001073"  [label="DDG: ctxt->d >> DstShift"];
"1001079" -> "1001073"  [label="DDG: OpMask"];
"1001073" -> "1001105"  [label="DDG: ctxt"];
"1001071" -> "1000133"  [label="AST: "];
"1001072" -> "1001071"  [label="AST: "];
"1001089" -> "1001071"  [label="CFG: "];
"1001071" -> "1001128"  [label="DDG: decode_operand(ctxt, &ctxt->dst, (ctxt->d >> DstShift) & OpMask)"];
"1001105" -> "1001095"  [label="AST: "];
"1001105" -> "1001107"  [label="CFG: "];
"1001106" -> "1001105"  [label="AST: "];
"1001107" -> "1001105"  [label="AST: "];
"1001095" -> "1001105"  [label="CFG: "];
"1001105" -> "1001128"  [label="DDG: ctxt->memopp->addr.mem.ea + ctxt->_eip"];
"1001105" -> "1001128"  [label="DDG: ctxt"];
"1001105" -> "1001095"  [label="DDG: ctxt"];
"1001105" -> "1001095"  [label="DDG: ctxt->memopp->addr.mem.ea + ctxt->_eip"];
"1000169" -> "1001105"  [label="DDG: ctxt->_eip"];
"1001095" -> "1001086"  [label="AST: "];
"1001096" -> "1001095"  [label="AST: "];
"1001120" -> "1001095"  [label="CFG: "];
"1001095" -> "1001128"  [label="DDG: address_mask(ctxt,\n \t\t\t\t\tctxt->memopp->addr.mem.ea + ctxt->_eip)"];
"1001095" -> "1001128"  [label="DDG: ctxt->memopp->addr.mem.ea"];
}
