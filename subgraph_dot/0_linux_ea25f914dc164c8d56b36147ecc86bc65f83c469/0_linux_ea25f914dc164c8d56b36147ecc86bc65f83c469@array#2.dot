digraph "0_linux_ea25f914dc164c8d56b36147ecc86bc65f83c469@array" {
"1000126" [label="(Call,regs[regno].type != PTR_TO_STACK)"];
"1000141" [label="(Call,register_is_null(regs[regno]))"];
"1000137" [label="(Call,access_size == 0 &&\n\t\t    register_is_null(regs[regno]))"];
"1000135" [label="(Call,zero_size_allowed && access_size == 0 &&\n\t\t    register_is_null(regs[regno]))"];
"1000127" [label="(Call,regs[regno].type)"];
"1000337" [label="(MethodReturn,static int)"];
"1000135" [label="(Call,zero_size_allowed && access_size == 0 &&\n\t\t    register_is_null(regs[regno]))"];
"1000134" [label="(ControlStructure,if (zero_size_allowed && access_size == 0 &&\n\t\t    register_is_null(regs[regno])))"];
"1000148" [label="(Identifier,env)"];
"1000141" [label="(Call,register_is_null(regs[regno]))"];
"1000146" [label="(Literal,0)"];
"1000142" [label="(Call,regs[regno])"];
"1000138" [label="(Call,access_size == 0)"];
"1000126" [label="(Call,regs[regno].type != PTR_TO_STACK)"];
"1000125" [label="(ControlStructure,if (regs[regno].type != PTR_TO_STACK))"];
"1000169" [label="(Identifier,regs)"];
"1000132" [label="(Identifier,PTR_TO_STACK)"];
"1000116" [label="(Call,*regs = state->regs)"];
"1000106" [label="(MethodParameterIn,bool zero_size_allowed)"];
"1000136" [label="(Identifier,zero_size_allowed)"];
"1000137" [label="(Call,access_size == 0 &&\n\t\t    register_is_null(regs[regno]))"];
"1000126" -> "1000125"  [label="AST: "];
"1000126" -> "1000132"  [label="CFG: "];
"1000127" -> "1000126"  [label="AST: "];
"1000132" -> "1000126"  [label="AST: "];
"1000136" -> "1000126"  [label="CFG: "];
"1000169" -> "1000126"  [label="CFG: "];
"1000126" -> "1000337"  [label="DDG: regs[regno].type != PTR_TO_STACK"];
"1000126" -> "1000337"  [label="DDG: PTR_TO_STACK"];
"1000126" -> "1000337"  [label="DDG: regs[regno].type"];
"1000126" -> "1000141"  [label="DDG: regs[regno].type"];
"1000141" -> "1000137"  [label="AST: "];
"1000141" -> "1000142"  [label="CFG: "];
"1000142" -> "1000141"  [label="AST: "];
"1000137" -> "1000141"  [label="CFG: "];
"1000141" -> "1000337"  [label="DDG: regs[regno]"];
"1000141" -> "1000137"  [label="DDG: regs[regno]"];
"1000116" -> "1000141"  [label="DDG: regs"];
"1000137" -> "1000135"  [label="AST: "];
"1000137" -> "1000138"  [label="CFG: "];
"1000138" -> "1000137"  [label="AST: "];
"1000135" -> "1000137"  [label="CFG: "];
"1000137" -> "1000337"  [label="DDG: register_is_null(regs[regno])"];
"1000137" -> "1000337"  [label="DDG: access_size == 0"];
"1000137" -> "1000135"  [label="DDG: access_size == 0"];
"1000137" -> "1000135"  [label="DDG: register_is_null(regs[regno])"];
"1000138" -> "1000137"  [label="DDG: access_size"];
"1000138" -> "1000137"  [label="DDG: 0"];
"1000135" -> "1000134"  [label="AST: "];
"1000135" -> "1000136"  [label="CFG: "];
"1000136" -> "1000135"  [label="AST: "];
"1000146" -> "1000135"  [label="CFG: "];
"1000148" -> "1000135"  [label="CFG: "];
"1000135" -> "1000337"  [label="DDG: zero_size_allowed && access_size == 0 &&\n\t\t    register_is_null(regs[regno])"];
"1000135" -> "1000337"  [label="DDG: zero_size_allowed"];
"1000135" -> "1000337"  [label="DDG: access_size == 0 &&\n\t\t    register_is_null(regs[regno])"];
"1000106" -> "1000135"  [label="DDG: zero_size_allowed"];
}
