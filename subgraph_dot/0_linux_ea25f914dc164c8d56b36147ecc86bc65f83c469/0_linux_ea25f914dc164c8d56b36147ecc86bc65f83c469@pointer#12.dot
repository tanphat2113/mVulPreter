digraph "0_linux_ea25f914dc164c8d56b36147ecc86bc65f83c469@pointer" {
"1000270" [label="(Call,meta->access_size = access_size)"];
"1000227" [label="(Call,access_size == 0)"];
"1000223" [label="(Call,access_size < 0)"];
"1000105" [label="(MethodParameterIn,int access_size)"];
"1000337" [label="(MethodReturn,static int)"];
"1000226" [label="(Call,access_size == 0 && !zero_size_allowed)"];
"1000228" [label="(Identifier,access_size)"];
"1000138" [label="(Call,access_size == 0)"];
"1000105" [label="(MethodParameterIn,int access_size)"];
"1000227" [label="(Call,access_size == 0)"];
"1000270" [label="(Call,meta->access_size = access_size)"];
"1000223" [label="(Call,access_size < 0)"];
"1000233" [label="(Call,verbose(env, \"invalid stack type R%d off=%d access_size=%d\n\",\n\t\t\tregno, off, access_size))"];
"1000222" [label="(Call,access_size < 0 || (access_size == 0 && !zero_size_allowed))"];
"1000229" [label="(Literal,0)"];
"1000274" [label="(Identifier,access_size)"];
"1000271" [label="(Call,meta->access_size)"];
"1000326" [label="(Call,verbose(env, \"invalid indirect read from stack off %d+%d size %d\n\",\n\t\t\t\toff, i, access_size))"];
"1000225" [label="(Literal,0)"];
"1000231" [label="(Identifier,zero_size_allowed)"];
"1000217" [label="(Call,off + access_size > 0)"];
"1000269" [label="(Block,)"];
"1000224" [label="(Identifier,access_size)"];
"1000286" [label="(Call,i < access_size)"];
"1000277" [label="(Identifier,meta)"];
"1000218" [label="(Call,off + access_size)"];
"1000270" -> "1000269"  [label="AST: "];
"1000270" -> "1000274"  [label="CFG: "];
"1000271" -> "1000270"  [label="AST: "];
"1000274" -> "1000270"  [label="AST: "];
"1000277" -> "1000270"  [label="CFG: "];
"1000270" -> "1000337"  [label="DDG: access_size"];
"1000270" -> "1000337"  [label="DDG: meta->access_size"];
"1000227" -> "1000270"  [label="DDG: access_size"];
"1000223" -> "1000270"  [label="DDG: access_size"];
"1000105" -> "1000270"  [label="DDG: access_size"];
"1000227" -> "1000226"  [label="AST: "];
"1000227" -> "1000229"  [label="CFG: "];
"1000228" -> "1000227"  [label="AST: "];
"1000229" -> "1000227"  [label="AST: "];
"1000231" -> "1000227"  [label="CFG: "];
"1000226" -> "1000227"  [label="CFG: "];
"1000227" -> "1000226"  [label="DDG: access_size"];
"1000227" -> "1000226"  [label="DDG: 0"];
"1000223" -> "1000227"  [label="DDG: access_size"];
"1000105" -> "1000227"  [label="DDG: access_size"];
"1000227" -> "1000233"  [label="DDG: access_size"];
"1000227" -> "1000286"  [label="DDG: access_size"];
"1000223" -> "1000222"  [label="AST: "];
"1000223" -> "1000225"  [label="CFG: "];
"1000224" -> "1000223"  [label="AST: "];
"1000225" -> "1000223"  [label="AST: "];
"1000228" -> "1000223"  [label="CFG: "];
"1000222" -> "1000223"  [label="CFG: "];
"1000223" -> "1000222"  [label="DDG: access_size"];
"1000223" -> "1000222"  [label="DDG: 0"];
"1000105" -> "1000223"  [label="DDG: access_size"];
"1000223" -> "1000233"  [label="DDG: access_size"];
"1000223" -> "1000286"  [label="DDG: access_size"];
"1000105" -> "1000102"  [label="AST: "];
"1000105" -> "1000337"  [label="DDG: access_size"];
"1000105" -> "1000138"  [label="DDG: access_size"];
"1000105" -> "1000217"  [label="DDG: access_size"];
"1000105" -> "1000218"  [label="DDG: access_size"];
"1000105" -> "1000233"  [label="DDG: access_size"];
"1000105" -> "1000286"  [label="DDG: access_size"];
"1000105" -> "1000326"  [label="DDG: access_size"];
}
