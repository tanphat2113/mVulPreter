digraph "0_linux_ea25f914dc164c8d56b36147ecc86bc65f83c469@API" {
"1000306" [label="(Call,state->allocated_stack <= slot ||\n\t\t    state->stack[spi].slot_type[slot % BPF_REG_SIZE] !=\n\t\t\tSTACK_MISC)"];
"1000307" [label="(Call,state->allocated_stack <= slot)"];
"1000302" [label="(Call,slot / BPF_REG_SIZE)"];
"1000292" [label="(Call,slot = -(off + i) - 1)"];
"1000294" [label="(Call,-(off + i) - 1)"];
"1000295" [label="(Call,-(off + i))"];
"1000251" [label="(Call,-off)"];
"1000208" [label="(Call,off >= 0)"];
"1000191" [label="(Call,off = regs[regno].off + regs[regno].var_off.value)"];
"1000212" [label="(Call,off < -MAX_BPF_STACK)"];
"1000214" [label="(Call,-MAX_BPF_STACK)"];
"1000261" [label="(Call,-off)"];
"1000286" [label="(Call,i < access_size)"];
"1000283" [label="(Call,i = 0)"];
"1000289" [label="(Call,i++)"];
"1000227" [label="(Call,access_size == 0)"];
"1000223" [label="(Call,access_size < 0)"];
"1000105" [label="(MethodParameterIn,int access_size)"];
"1000321" [label="(Call,slot % BPF_REG_SIZE)"];
"1000312" [label="(Call,state->stack[spi].slot_type[slot % BPF_REG_SIZE] !=\n\t\t\tSTACK_MISC)"];
"1000327" [label="(Identifier,env)"];
"1000337" [label="(MethodReturn,static int)"];
"1000336" [label="(Literal,0)"];
"1000226" [label="(Call,access_size == 0 && !zero_size_allowed)"];
"1000321" [label="(Call,slot % BPF_REG_SIZE)"];
"1000296" [label="(Call,off + i)"];
"1000228" [label="(Identifier,access_size)"];
"1000294" [label="(Call,-(off + i) - 1)"];
"1000282" [label="(ControlStructure,for (i = 0; i < access_size; i++))"];
"1000283" [label="(Call,i = 0)"];
"1000105" [label="(MethodParameterIn,int access_size)"];
"1000138" [label="(Call,access_size == 0)"];
"1000323" [label="(Identifier,BPF_REG_SIZE)"];
"1000108" [label="(Block,)"];
"1000227" [label="(Call,access_size == 0)"];
"1000251" [label="(Call,-off)"];
"1000261" [label="(Call,-off)"];
"1000312" [label="(Call,state->stack[spi].slot_type[slot % BPF_REG_SIZE] !=\n\t\t\tSTACK_MISC)"];
"1000300" [label="(Call,spi = slot / BPF_REG_SIZE)"];
"1000253" [label="(Call,env->prog->aux->stack_depth = -off)"];
"1000284" [label="(Identifier,i)"];
"1000301" [label="(Identifier,spi)"];
"1000270" [label="(Call,meta->access_size = access_size)"];
"1000308" [label="(Call,state->allocated_stack)"];
"1000223" [label="(Call,access_size < 0)"];
"1000317" [label="(Identifier,state)"];
"1000192" [label="(Identifier,off)"];
"1000233" [label="(Call,verbose(env, \"invalid stack type R%d off=%d access_size=%d\n\",\n\t\t\tregno, off, access_size))"];
"1000219" [label="(Identifier,off)"];
"1000311" [label="(Identifier,slot)"];
"1000209" [label="(Identifier,off)"];
"1000222" [label="(Call,access_size < 0 || (access_size == 0 && !zero_size_allowed))"];
"1000290" [label="(Identifier,i)"];
"1000229" [label="(Literal,0)"];
"1000252" [label="(Identifier,off)"];
"1000211" [label="(Call,off < -MAX_BPF_STACK || off + access_size > 0 ||\n\t    access_size < 0 || (access_size == 0 && !zero_size_allowed))"];
"1000287" [label="(Identifier,i)"];
"1000313" [label="(Call,state->stack[spi].slot_type[slot % BPF_REG_SIZE])"];
"1000305" [label="(ControlStructure,if (state->allocated_stack <= slot ||\n\t\t    state->stack[spi].slot_type[slot % BPF_REG_SIZE] !=\n\t\t\tSTACK_MISC))"];
"1000193" [label="(Call,regs[regno].off + regs[regno].var_off.value)"];
"1000326" [label="(Call,verbose(env, \"invalid indirect read from stack off %d+%d size %d\n\",\n\t\t\t\toff, i, access_size))"];
"1000292" [label="(Call,slot = -(off + i) - 1)"];
"1000207" [label="(Call,off >= 0 || off < -MAX_BPF_STACK || off + access_size > 0 ||\n\t    access_size < 0 || (access_size == 0 && !zero_size_allowed))"];
"1000324" [label="(Identifier,STACK_MISC)"];
"1000303" [label="(Identifier,slot)"];
"1000304" [label="(Identifier,BPF_REG_SIZE)"];
"1000225" [label="(Literal,0)"];
"1000231" [label="(Identifier,zero_size_allowed)"];
"1000306" [label="(Call,state->allocated_stack <= slot ||\n\t\t    state->stack[spi].slot_type[slot % BPF_REG_SIZE] !=\n\t\t\tSTACK_MISC)"];
"1000212" [label="(Call,off < -MAX_BPF_STACK)"];
"1000214" [label="(Call,-MAX_BPF_STACK)"];
"1000307" [label="(Call,state->allocated_stack <= slot)"];
"1000295" [label="(Call,-(off + i))"];
"1000217" [label="(Call,off + access_size > 0)"];
"1000191" [label="(Call,off = regs[regno].off + regs[regno].var_off.value)"];
"1000285" [label="(Literal,0)"];
"1000288" [label="(Identifier,access_size)"];
"1000286" [label="(Call,i < access_size)"];
"1000289" [label="(Call,i++)"];
"1000224" [label="(Identifier,access_size)"];
"1000322" [label="(Identifier,slot)"];
"1000243" [label="(Call,env->prog->aux->stack_depth < -off)"];
"1000302" [label="(Call,slot / BPF_REG_SIZE)"];
"1000299" [label="(Literal,1)"];
"1000208" [label="(Call,off >= 0)"];
"1000291" [label="(Block,)"];
"1000213" [label="(Identifier,off)"];
"1000218" [label="(Call,off + access_size)"];
"1000262" [label="(Identifier,off)"];
"1000210" [label="(Literal,0)"];
"1000293" [label="(Identifier,slot)"];
"1000215" [label="(Identifier,MAX_BPF_STACK)"];
"1000306" -> "1000305"  [label="AST: "];
"1000306" -> "1000307"  [label="CFG: "];
"1000306" -> "1000312"  [label="CFG: "];
"1000307" -> "1000306"  [label="AST: "];
"1000312" -> "1000306"  [label="AST: "];
"1000327" -> "1000306"  [label="CFG: "];
"1000290" -> "1000306"  [label="CFG: "];
"1000306" -> "1000337"  [label="DDG: state->stack[spi].slot_type[slot % BPF_REG_SIZE] !=\n\t\t\tSTACK_MISC"];
"1000306" -> "1000337"  [label="DDG: state->allocated_stack <= slot"];
"1000306" -> "1000337"  [label="DDG: state->allocated_stack <= slot ||\n\t\t    state->stack[spi].slot_type[slot % BPF_REG_SIZE] !=\n\t\t\tSTACK_MISC"];
"1000307" -> "1000306"  [label="DDG: state->allocated_stack"];
"1000307" -> "1000306"  [label="DDG: slot"];
"1000312" -> "1000306"  [label="DDG: state->stack[spi].slot_type[slot % BPF_REG_SIZE]"];
"1000312" -> "1000306"  [label="DDG: STACK_MISC"];
"1000307" -> "1000311"  [label="CFG: "];
"1000308" -> "1000307"  [label="AST: "];
"1000311" -> "1000307"  [label="AST: "];
"1000317" -> "1000307"  [label="CFG: "];
"1000307" -> "1000337"  [label="DDG: slot"];
"1000307" -> "1000337"  [label="DDG: state->allocated_stack"];
"1000302" -> "1000307"  [label="DDG: slot"];
"1000307" -> "1000321"  [label="DDG: slot"];
"1000302" -> "1000300"  [label="AST: "];
"1000302" -> "1000304"  [label="CFG: "];
"1000303" -> "1000302"  [label="AST: "];
"1000304" -> "1000302"  [label="AST: "];
"1000300" -> "1000302"  [label="CFG: "];
"1000302" -> "1000337"  [label="DDG: BPF_REG_SIZE"];
"1000302" -> "1000300"  [label="DDG: slot"];
"1000302" -> "1000300"  [label="DDG: BPF_REG_SIZE"];
"1000292" -> "1000302"  [label="DDG: slot"];
"1000321" -> "1000302"  [label="DDG: BPF_REG_SIZE"];
"1000302" -> "1000321"  [label="DDG: BPF_REG_SIZE"];
"1000292" -> "1000291"  [label="AST: "];
"1000292" -> "1000294"  [label="CFG: "];
"1000293" -> "1000292"  [label="AST: "];
"1000294" -> "1000292"  [label="AST: "];
"1000301" -> "1000292"  [label="CFG: "];
"1000292" -> "1000337"  [label="DDG: -(off + i) - 1"];
"1000294" -> "1000292"  [label="DDG: -(off + i)"];
"1000294" -> "1000292"  [label="DDG: 1"];
"1000294" -> "1000299"  [label="CFG: "];
"1000295" -> "1000294"  [label="AST: "];
"1000299" -> "1000294"  [label="AST: "];
"1000294" -> "1000337"  [label="DDG: -(off + i)"];
"1000295" -> "1000294"  [label="DDG: off + i"];
"1000295" -> "1000296"  [label="CFG: "];
"1000296" -> "1000295"  [label="AST: "];
"1000299" -> "1000295"  [label="CFG: "];
"1000295" -> "1000337"  [label="DDG: off + i"];
"1000251" -> "1000295"  [label="DDG: off"];
"1000261" -> "1000295"  [label="DDG: off"];
"1000286" -> "1000295"  [label="DDG: i"];
"1000251" -> "1000243"  [label="AST: "];
"1000251" -> "1000252"  [label="CFG: "];
"1000252" -> "1000251"  [label="AST: "];
"1000243" -> "1000251"  [label="CFG: "];
"1000251" -> "1000337"  [label="DDG: off"];
"1000251" -> "1000243"  [label="DDG: off"];
"1000208" -> "1000251"  [label="DDG: off"];
"1000212" -> "1000251"  [label="DDG: off"];
"1000251" -> "1000261"  [label="DDG: off"];
"1000251" -> "1000296"  [label="DDG: off"];
"1000251" -> "1000326"  [label="DDG: off"];
"1000208" -> "1000207"  [label="AST: "];
"1000208" -> "1000210"  [label="CFG: "];
"1000209" -> "1000208"  [label="AST: "];
"1000210" -> "1000208"  [label="AST: "];
"1000213" -> "1000208"  [label="CFG: "];
"1000207" -> "1000208"  [label="CFG: "];
"1000208" -> "1000207"  [label="DDG: off"];
"1000208" -> "1000207"  [label="DDG: 0"];
"1000191" -> "1000208"  [label="DDG: off"];
"1000208" -> "1000212"  [label="DDG: off"];
"1000208" -> "1000233"  [label="DDG: off"];
"1000191" -> "1000108"  [label="AST: "];
"1000191" -> "1000193"  [label="CFG: "];
"1000192" -> "1000191"  [label="AST: "];
"1000193" -> "1000191"  [label="AST: "];
"1000209" -> "1000191"  [label="CFG: "];
"1000191" -> "1000337"  [label="DDG: regs[regno].off + regs[regno].var_off.value"];
"1000212" -> "1000211"  [label="AST: "];
"1000212" -> "1000214"  [label="CFG: "];
"1000213" -> "1000212"  [label="AST: "];
"1000214" -> "1000212"  [label="AST: "];
"1000219" -> "1000212"  [label="CFG: "];
"1000211" -> "1000212"  [label="CFG: "];
"1000212" -> "1000337"  [label="DDG: -MAX_BPF_STACK"];
"1000212" -> "1000211"  [label="DDG: off"];
"1000212" -> "1000211"  [label="DDG: -MAX_BPF_STACK"];
"1000214" -> "1000212"  [label="DDG: MAX_BPF_STACK"];
"1000212" -> "1000217"  [label="DDG: off"];
"1000212" -> "1000218"  [label="DDG: off"];
"1000212" -> "1000233"  [label="DDG: off"];
"1000214" -> "1000215"  [label="CFG: "];
"1000215" -> "1000214"  [label="AST: "];
"1000214" -> "1000337"  [label="DDG: MAX_BPF_STACK"];
"1000261" -> "1000253"  [label="AST: "];
"1000261" -> "1000262"  [label="CFG: "];
"1000262" -> "1000261"  [label="AST: "];
"1000253" -> "1000261"  [label="CFG: "];
"1000261" -> "1000337"  [label="DDG: off"];
"1000261" -> "1000253"  [label="DDG: off"];
"1000261" -> "1000296"  [label="DDG: off"];
"1000261" -> "1000326"  [label="DDG: off"];
"1000286" -> "1000282"  [label="AST: "];
"1000286" -> "1000288"  [label="CFG: "];
"1000287" -> "1000286"  [label="AST: "];
"1000288" -> "1000286"  [label="AST: "];
"1000293" -> "1000286"  [label="CFG: "];
"1000336" -> "1000286"  [label="CFG: "];
"1000286" -> "1000337"  [label="DDG: i < access_size"];
"1000286" -> "1000337"  [label="DDG: i"];
"1000286" -> "1000337"  [label="DDG: access_size"];
"1000283" -> "1000286"  [label="DDG: i"];
"1000289" -> "1000286"  [label="DDG: i"];
"1000227" -> "1000286"  [label="DDG: access_size"];
"1000223" -> "1000286"  [label="DDG: access_size"];
"1000105" -> "1000286"  [label="DDG: access_size"];
"1000286" -> "1000289"  [label="DDG: i"];
"1000286" -> "1000296"  [label="DDG: i"];
"1000286" -> "1000326"  [label="DDG: i"];
"1000286" -> "1000326"  [label="DDG: access_size"];
"1000283" -> "1000282"  [label="AST: "];
"1000283" -> "1000285"  [label="CFG: "];
"1000284" -> "1000283"  [label="AST: "];
"1000285" -> "1000283"  [label="AST: "];
"1000287" -> "1000283"  [label="CFG: "];
"1000289" -> "1000282"  [label="AST: "];
"1000289" -> "1000290"  [label="CFG: "];
"1000290" -> "1000289"  [label="AST: "];
"1000287" -> "1000289"  [label="CFG: "];
"1000227" -> "1000226"  [label="AST: "];
"1000227" -> "1000229"  [label="CFG: "];
"1000228" -> "1000227"  [label="AST: "];
"1000229" -> "1000227"  [label="AST: "];
"1000231" -> "1000227"  [label="CFG: "];
"1000226" -> "1000227"  [label="CFG: "];
"1000227" -> "1000226"  [label="DDG: access_size"];
"1000227" -> "1000226"  [label="DDG: 0"];
"1000223" -> "1000227"  [label="DDG: access_size"];
"1000105" -> "1000227"  [label="DDG: access_size"];
"1000227" -> "1000233"  [label="DDG: access_size"];
"1000227" -> "1000270"  [label="DDG: access_size"];
"1000223" -> "1000222"  [label="AST: "];
"1000223" -> "1000225"  [label="CFG: "];
"1000224" -> "1000223"  [label="AST: "];
"1000225" -> "1000223"  [label="AST: "];
"1000228" -> "1000223"  [label="CFG: "];
"1000222" -> "1000223"  [label="CFG: "];
"1000223" -> "1000222"  [label="DDG: access_size"];
"1000223" -> "1000222"  [label="DDG: 0"];
"1000105" -> "1000223"  [label="DDG: access_size"];
"1000223" -> "1000233"  [label="DDG: access_size"];
"1000223" -> "1000270"  [label="DDG: access_size"];
"1000105" -> "1000102"  [label="AST: "];
"1000105" -> "1000337"  [label="DDG: access_size"];
"1000105" -> "1000138"  [label="DDG: access_size"];
"1000105" -> "1000217"  [label="DDG: access_size"];
"1000105" -> "1000218"  [label="DDG: access_size"];
"1000105" -> "1000233"  [label="DDG: access_size"];
"1000105" -> "1000270"  [label="DDG: access_size"];
"1000105" -> "1000326"  [label="DDG: access_size"];
"1000321" -> "1000313"  [label="AST: "];
"1000321" -> "1000323"  [label="CFG: "];
"1000322" -> "1000321"  [label="AST: "];
"1000323" -> "1000321"  [label="AST: "];
"1000313" -> "1000321"  [label="CFG: "];
"1000321" -> "1000337"  [label="DDG: slot"];
"1000321" -> "1000337"  [label="DDG: BPF_REG_SIZE"];
"1000312" -> "1000324"  [label="CFG: "];
"1000313" -> "1000312"  [label="AST: "];
"1000324" -> "1000312"  [label="AST: "];
"1000312" -> "1000337"  [label="DDG: state->stack[spi].slot_type[slot % BPF_REG_SIZE]"];
"1000312" -> "1000337"  [label="DDG: STACK_MISC"];
}
