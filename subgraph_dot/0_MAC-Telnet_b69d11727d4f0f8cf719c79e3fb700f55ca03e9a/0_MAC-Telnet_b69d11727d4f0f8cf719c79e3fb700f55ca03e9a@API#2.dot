digraph "0_MAC-Telnet_b69d11727d4f0f8cf719c79e3fb700f55ca03e9a@API" {
"1000230" [label="(Call,fprintf(stderr, _(\"Invalid salt length: %d (instead of 16) received from server %s\n\"), cpkt.length, ether_ntoa((struct ether_addr *)dstmac)))"];
"1000232" [label="(Call,_(\"Invalid salt length: %d (instead of 16) received from server %s\n\"))"];
"1000224" [label="(Call,cpkt.length != 16)"];
"1000258" [label="(Call,fwrite((const void *)cpkt.data, 1, cpkt.length, stdout))"];
"1000259" [label="(Call,(const void *)cpkt.data)"];
"1000241" [label="(Call,memcpy(pass_salt, cpkt.data, 16))"];
"1000230" [label="(Call,fprintf(stderr, _(\"Invalid salt length: %d (instead of 16) received from server %s\n\"), cpkt.length, ether_ntoa((struct ether_addr *)dstmac)))"];
"1000237" [label="(Call,ether_ntoa((struct ether_addr *)dstmac))"];
"1000238" [label="(Call,(struct ether_addr *)dstmac)"];
"1000159" [label="(Call,init_packet(&odata, MT_PTYPE_ACK, srcmac, dstmac, sessionkey, pkthdr.counter + (data_len - MT_HEADER_LEN)))"];
"1000137" [label="(Call,pkthdr.seskey != sessionkey)"];
"1000170" [label="(Call,data_len - MT_HEADER_LEN)"];
"1000125" [label="(Call,data_len < MT_HEADER_LEN)"];
"1000121" [label="(MethodParameterIn,int data_len)"];
"1000208" [label="(Call,data_len - MT_HEADER_LEN)"];
"1000242" [label="(Identifier,pass_salt)"];
"1000224" [label="(Call,cpkt.length != 16)"];
"1000363" [label="(MethodReturn,static int)"];
"1000230" [label="(Call,fprintf(stderr, _(\"Invalid salt length: %d (instead of 16) received from server %s\n\"), cpkt.length, ether_ntoa((struct ether_addr *)dstmac)))"];
"1000164" [label="(Identifier,dstmac)"];
"1000126" [label="(Identifier,data_len)"];
"1000237" [label="(Call,ether_ntoa((struct ether_addr *)dstmac))"];
"1000124" [label="(ControlStructure,if (data_len < MT_HEADER_LEN))"];
"1000163" [label="(Identifier,srcmac)"];
"1000171" [label="(Identifier,data_len)"];
"1000264" [label="(Literal,1)"];
"1000131" [label="(Literal,1)"];
"1000228" [label="(Literal,16)"];
"1000127" [label="(Identifier,MT_HEADER_LEN)"];
"1000232" [label="(Call,_(\"Invalid salt length: %d (instead of 16) received from server %s\n\"))"];
"1000222" [label="(Block,)"];
"1000225" [label="(Call,cpkt.length)"];
"1000223" [label="(ControlStructure,if (cpkt.length != 16))"];
"1000261" [label="(Call,cpkt.data)"];
"1000159" [label="(Call,init_packet(&odata, MT_PTYPE_ACK, srcmac, dstmac, sessionkey, pkthdr.counter + (data_len - MT_HEADER_LEN)))"];
"1000141" [label="(Identifier,sessionkey)"];
"1000138" [label="(Call,pkthdr.seskey)"];
"1000149" [label="(Identifier,pkthdr)"];
"1000233" [label="(Literal,\"Invalid salt length: %d (instead of 16) received from server %s\n\")"];
"1000318" [label="(Call,init_packet(&odata, MT_PTYPE_END, srcmac, dstmac, pkthdr.seskey, 0))"];
"1000265" [label="(Call,cpkt.length)"];
"1000204" [label="(Call,parse_control_packet(data + MT_HEADER_LEN, data_len - MT_HEADER_LEN, &cpkt))"];
"1000258" [label="(Call,fwrite((const void *)cpkt.data, 1, cpkt.length, stdout))"];
"1000125" [label="(Call,data_len < MT_HEADER_LEN)"];
"1000295" [label="(Identifier,success)"];
"1000205" [label="(Call,data + MT_HEADER_LEN)"];
"1000248" [label="(Identifier,username)"];
"1000166" [label="(Call,pkthdr.counter + (data_len - MT_HEADER_LEN))"];
"1000235" [label="(Identifier,cpkt)"];
"1000162" [label="(Identifier,MT_PTYPE_ACK)"];
"1000172" [label="(Identifier,MT_HEADER_LEN)"];
"1000229" [label="(Block,)"];
"1000165" [label="(Identifier,sessionkey)"];
"1000133" [label="(Identifier,data)"];
"1000243" [label="(Call,cpkt.data)"];
"1000145" [label="(Literal,1)"];
"1000170" [label="(Call,data_len - MT_HEADER_LEN)"];
"1000152" [label="(Block,)"];
"1000241" [label="(Call,memcpy(pass_salt, cpkt.data, 16))"];
"1000268" [label="(Identifier,stdout)"];
"1000238" [label="(Call,(struct ether_addr *)dstmac)"];
"1000240" [label="(Identifier,dstmac)"];
"1000246" [label="(Literal,16)"];
"1000234" [label="(Call,cpkt.length)"];
"1000173" [label="(Call,send_udp(&odata, 0))"];
"1000175" [label="(Identifier,odata)"];
"1000121" [label="(MethodParameterIn,int data_len)"];
"1000259" [label="(Call,(const void *)cpkt.data)"];
"1000257" [label="(Block,)"];
"1000137" [label="(Call,pkthdr.seskey != sessionkey)"];
"1000231" [label="(Identifier,stderr)"];
"1000136" [label="(ControlStructure,if (pkthdr.seskey != sessionkey))"];
"1000160" [label="(Call,&odata)"];
"1000230" -> "1000229"  [label="AST: "];
"1000230" -> "1000237"  [label="CFG: "];
"1000231" -> "1000230"  [label="AST: "];
"1000232" -> "1000230"  [label="AST: "];
"1000234" -> "1000230"  [label="AST: "];
"1000237" -> "1000230"  [label="AST: "];
"1000242" -> "1000230"  [label="CFG: "];
"1000230" -> "1000363"  [label="DDG: "];
"1000230" -> "1000363"  [label="DDG: "];
"1000230" -> "1000363"  [label="DDG: "];
"1000230" -> "1000363"  [label="DDG: "];
"1000230" -> "1000363"  [label="DDG: "];
"1000230" -> "1000224"  [label="DDG: "];
"1000232" -> "1000230"  [label="DDG: "];
"1000224" -> "1000230"  [label="DDG: "];
"1000237" -> "1000230"  [label="DDG: "];
"1000230" -> "1000258"  [label="DDG: "];
"1000232" -> "1000233"  [label="CFG: "];
"1000233" -> "1000232"  [label="AST: "];
"1000235" -> "1000232"  [label="CFG: "];
"1000224" -> "1000223"  [label="AST: "];
"1000224" -> "1000228"  [label="CFG: "];
"1000225" -> "1000224"  [label="AST: "];
"1000228" -> "1000224"  [label="AST: "];
"1000231" -> "1000224"  [label="CFG: "];
"1000242" -> "1000224"  [label="CFG: "];
"1000224" -> "1000363"  [label="DDG: "];
"1000224" -> "1000363"  [label="DDG: "];
"1000258" -> "1000224"  [label="DDG: "];
"1000224" -> "1000258"  [label="DDG: "];
"1000258" -> "1000257"  [label="AST: "];
"1000258" -> "1000268"  [label="CFG: "];
"1000259" -> "1000258"  [label="AST: "];
"1000264" -> "1000258"  [label="AST: "];
"1000265" -> "1000258"  [label="AST: "];
"1000268" -> "1000258"  [label="AST: "];
"1000295" -> "1000258"  [label="CFG: "];
"1000258" -> "1000363"  [label="DDG: "];
"1000258" -> "1000363"  [label="DDG: "];
"1000258" -> "1000363"  [label="DDG: "];
"1000258" -> "1000363"  [label="DDG: "];
"1000259" -> "1000258"  [label="DDG: "];
"1000259" -> "1000261"  [label="CFG: "];
"1000260" -> "1000259"  [label="AST: "];
"1000261" -> "1000259"  [label="AST: "];
"1000264" -> "1000259"  [label="CFG: "];
"1000259" -> "1000363"  [label="DDG: "];
"1000259" -> "1000241"  [label="DDG: "];
"1000241" -> "1000259"  [label="DDG: "];
"1000241" -> "1000222"  [label="AST: "];
"1000241" -> "1000246"  [label="CFG: "];
"1000242" -> "1000241"  [label="AST: "];
"1000243" -> "1000241"  [label="AST: "];
"1000246" -> "1000241"  [label="AST: "];
"1000248" -> "1000241"  [label="CFG: "];
"1000241" -> "1000363"  [label="DDG: "];
"1000241" -> "1000363"  [label="DDG: "];
"1000241" -> "1000363"  [label="DDG: "];
"1000237" -> "1000238"  [label="CFG: "];
"1000238" -> "1000237"  [label="AST: "];
"1000237" -> "1000363"  [label="DDG: "];
"1000238" -> "1000237"  [label="DDG: "];
"1000238" -> "1000240"  [label="CFG: "];
"1000239" -> "1000238"  [label="AST: "];
"1000240" -> "1000238"  [label="AST: "];
"1000238" -> "1000363"  [label="DDG: "];
"1000159" -> "1000238"  [label="DDG: "];
"1000159" -> "1000152"  [label="AST: "];
"1000159" -> "1000166"  [label="CFG: "];
"1000160" -> "1000159"  [label="AST: "];
"1000162" -> "1000159"  [label="AST: "];
"1000163" -> "1000159"  [label="AST: "];
"1000164" -> "1000159"  [label="AST: "];
"1000165" -> "1000159"  [label="AST: "];
"1000166" -> "1000159"  [label="AST: "];
"1000175" -> "1000159"  [label="CFG: "];
"1000159" -> "1000363"  [label="DDG: "];
"1000159" -> "1000363"  [label="DDG: "];
"1000159" -> "1000363"  [label="DDG: "];
"1000159" -> "1000363"  [label="DDG: "];
"1000159" -> "1000363"  [label="DDG: "];
"1000159" -> "1000363"  [label="DDG: "];
"1000137" -> "1000159"  [label="DDG: "];
"1000170" -> "1000159"  [label="DDG: "];
"1000170" -> "1000159"  [label="DDG: "];
"1000159" -> "1000173"  [label="DDG: "];
"1000137" -> "1000136"  [label="AST: "];
"1000137" -> "1000141"  [label="CFG: "];
"1000138" -> "1000137"  [label="AST: "];
"1000141" -> "1000137"  [label="AST: "];
"1000145" -> "1000137"  [label="CFG: "];
"1000149" -> "1000137"  [label="CFG: "];
"1000137" -> "1000363"  [label="DDG: "];
"1000137" -> "1000363"  [label="DDG: "];
"1000137" -> "1000363"  [label="DDG: "];
"1000137" -> "1000318"  [label="DDG: "];
"1000170" -> "1000166"  [label="AST: "];
"1000170" -> "1000172"  [label="CFG: "];
"1000171" -> "1000170"  [label="AST: "];
"1000172" -> "1000170"  [label="AST: "];
"1000166" -> "1000170"  [label="CFG: "];
"1000170" -> "1000363"  [label="DDG: "];
"1000170" -> "1000363"  [label="DDG: "];
"1000170" -> "1000166"  [label="DDG: "];
"1000170" -> "1000166"  [label="DDG: "];
"1000125" -> "1000170"  [label="DDG: "];
"1000125" -> "1000170"  [label="DDG: "];
"1000121" -> "1000170"  [label="DDG: "];
"1000170" -> "1000204"  [label="DDG: "];
"1000170" -> "1000205"  [label="DDG: "];
"1000170" -> "1000208"  [label="DDG: "];
"1000170" -> "1000208"  [label="DDG: "];
"1000125" -> "1000124"  [label="AST: "];
"1000125" -> "1000127"  [label="CFG: "];
"1000126" -> "1000125"  [label="AST: "];
"1000127" -> "1000125"  [label="AST: "];
"1000131" -> "1000125"  [label="CFG: "];
"1000133" -> "1000125"  [label="CFG: "];
"1000125" -> "1000363"  [label="DDG: "];
"1000125" -> "1000363"  [label="DDG: "];
"1000125" -> "1000363"  [label="DDG: "];
"1000121" -> "1000125"  [label="DDG: "];
"1000121" -> "1000119"  [label="AST: "];
"1000121" -> "1000363"  [label="DDG: "];
"1000121" -> "1000208"  [label="DDG: "];
}
