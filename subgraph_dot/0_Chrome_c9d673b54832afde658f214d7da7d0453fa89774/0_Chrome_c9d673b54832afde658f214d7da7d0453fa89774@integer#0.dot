digraph "0_Chrome_c9d673b54832afde658f214d7da7d0453fa89774@integer" {
"1000110" [label="(Call,target_size = std::max(0, max_size_ - kDefaultEvictionSize))"];
"1000112" [label="(Call,std::max(0, max_size_ - kDefaultEvictionSize))"];
"1000114" [label="(Call,max_size_ - kDefaultEvictionSize)"];
"1000105" [label="(Call,current_size_ <= max_size_)"];
"1000123" [label="(Call,current_size_ > target_size)"];
"1000122" [label="(Call,current_size_ > target_size && entry != lru_list_.end())"];
"1000116" [label="(Identifier,kDefaultEvictionSize)"];
"1000124" [label="(Identifier,current_size_)"];
"1000114" [label="(Call,max_size_ - kDefaultEvictionSize)"];
"1000150" [label="(MethodReturn,void)"];
"1000123" [label="(Call,current_size_ > target_size)"];
"1000125" [label="(Identifier,target_size)"];
"1000115" [label="(Identifier,max_size_)"];
"1000119" [label="(Identifier,entry)"];
"1000110" [label="(Call,target_size = std::max(0, max_size_ - kDefaultEvictionSize))"];
"1000105" [label="(Call,current_size_ <= max_size_)"];
"1000127" [label="(Identifier,entry)"];
"1000108" [label="(Return,return;)"];
"1000126" [label="(Call,entry != lru_list_.end())"];
"1000107" [label="(Identifier,max_size_)"];
"1000103" [label="(Block,)"];
"1000106" [label="(Identifier,current_size_)"];
"1000112" [label="(Call,std::max(0, max_size_ - kDefaultEvictionSize))"];
"1000111" [label="(Identifier,target_size)"];
"1000121" [label="(ControlStructure,while (current_size_ > target_size && entry != lru_list_.end()))"];
"1000139" [label="(Call,entry != lru_list_.end() && entry->value()->parent() == to_doom)"];
"1000113" [label="(Literal,0)"];
"1000132" [label="(Identifier,to_doom)"];
"1000122" [label="(Call,current_size_ > target_size && entry != lru_list_.end())"];
"1000104" [label="(ControlStructure,if (current_size_ <= max_size_))"];
"1000110" -> "1000103"  [label="AST: "];
"1000110" -> "1000112"  [label="CFG: "];
"1000111" -> "1000110"  [label="AST: "];
"1000112" -> "1000110"  [label="AST: "];
"1000119" -> "1000110"  [label="CFG: "];
"1000110" -> "1000150"  [label="DDG: std::max(0, max_size_ - kDefaultEvictionSize)"];
"1000112" -> "1000110"  [label="DDG: 0"];
"1000112" -> "1000110"  [label="DDG: max_size_ - kDefaultEvictionSize"];
"1000110" -> "1000123"  [label="DDG: target_size"];
"1000112" -> "1000114"  [label="CFG: "];
"1000113" -> "1000112"  [label="AST: "];
"1000114" -> "1000112"  [label="AST: "];
"1000112" -> "1000150"  [label="DDG: max_size_ - kDefaultEvictionSize"];
"1000114" -> "1000112"  [label="DDG: max_size_"];
"1000114" -> "1000112"  [label="DDG: kDefaultEvictionSize"];
"1000114" -> "1000116"  [label="CFG: "];
"1000115" -> "1000114"  [label="AST: "];
"1000116" -> "1000114"  [label="AST: "];
"1000114" -> "1000150"  [label="DDG: max_size_"];
"1000114" -> "1000150"  [label="DDG: kDefaultEvictionSize"];
"1000105" -> "1000114"  [label="DDG: max_size_"];
"1000105" -> "1000104"  [label="AST: "];
"1000105" -> "1000107"  [label="CFG: "];
"1000106" -> "1000105"  [label="AST: "];
"1000107" -> "1000105"  [label="AST: "];
"1000108" -> "1000105"  [label="CFG: "];
"1000111" -> "1000105"  [label="CFG: "];
"1000105" -> "1000150"  [label="DDG: max_size_"];
"1000105" -> "1000150"  [label="DDG: current_size_ <= max_size_"];
"1000105" -> "1000150"  [label="DDG: current_size_"];
"1000105" -> "1000123"  [label="DDG: current_size_"];
"1000123" -> "1000122"  [label="AST: "];
"1000123" -> "1000125"  [label="CFG: "];
"1000124" -> "1000123"  [label="AST: "];
"1000125" -> "1000123"  [label="AST: "];
"1000127" -> "1000123"  [label="CFG: "];
"1000122" -> "1000123"  [label="CFG: "];
"1000123" -> "1000150"  [label="DDG: target_size"];
"1000123" -> "1000150"  [label="DDG: current_size_"];
"1000123" -> "1000122"  [label="DDG: current_size_"];
"1000123" -> "1000122"  [label="DDG: target_size"];
"1000122" -> "1000121"  [label="AST: "];
"1000122" -> "1000126"  [label="CFG: "];
"1000126" -> "1000122"  [label="AST: "];
"1000132" -> "1000122"  [label="CFG: "];
"1000150" -> "1000122"  [label="CFG: "];
"1000122" -> "1000150"  [label="DDG: entry != lru_list_.end()"];
"1000122" -> "1000150"  [label="DDG: current_size_ > target_size"];
"1000122" -> "1000150"  [label="DDG: current_size_ > target_size && entry != lru_list_.end()"];
"1000139" -> "1000122"  [label="DDG: entry != lru_list_.end()"];
"1000126" -> "1000122"  [label="DDG: entry"];
"1000126" -> "1000122"  [label="DDG: lru_list_.end()"];
}
