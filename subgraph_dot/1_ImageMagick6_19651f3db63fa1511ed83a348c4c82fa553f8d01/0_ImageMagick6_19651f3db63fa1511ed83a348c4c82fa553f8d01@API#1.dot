digraph "0_ImageMagick6_19651f3db63fa1511ed83a348c4c82fa553f8d01@API" {
"1000352" [label="(Call,memset(hash_code,0,MaxHashTable*sizeof(*hash_code)))"];
"1000238" [label="(Call,hash_code=(short *) AcquireQuantumMemory(MaxHashTable,sizeof(*hash_code)))"];
"1000240" [label="(Call,(short *) AcquireQuantumMemory(MaxHashTable,sizeof(*hash_code)))"];
"1000242" [label="(Call,AcquireQuantumMemory(MaxHashTable,sizeof(*hash_code)))"];
"1000273" [label="(Call,hash_code == (short *) NULL)"];
"1000275" [label="(Call,(short *) NULL)"];
"1000269" [label="(Call,(unsigned char *) NULL)"];
"1000223" [label="(Call,(Image *) NULL)"];
"1000355" [label="(Call,MaxHashTable*sizeof(*hash_code))"];
"1000260" [label="(Call,AcquireQuantumMemory(MaxHashTable,\n    sizeof(*hash_suffix)))"];
"1000251" [label="(Call,AcquireQuantumMemory(MaxHashTable,sizeof(*hash_prefix)))"];
"1000350" [label="(Call,(void) memset(hash_code,0,MaxHashTable*sizeof(*hash_code)))"];
"1000543" [label="(Call,hash_code[k] > 0)"];
"1000564" [label="(Call,waiting_code=hash_code[k])"];
"1000518" [label="(Call,(ssize_t) (((size_t) index << (MaxGIFBits-8))+waiting_code))"];
"1000516" [label="(Call,k=(ssize_t) (((size_t) index << (MaxGIFBits-8))+waiting_code))"];
"1000530" [label="(Call,k >= MaxHashTable)"];
"1000533" [label="(Call,k-=MaxHashTable)"];
"1000571" [label="(Call,k != 0)"];
"1000576" [label="(Call,MaxHashTable-k)"];
"1000574" [label="(Call,displacement=MaxHashTable-k)"];
"1000581" [label="(Call,k-=displacement)"];
"1000585" [label="(Call,k < 0)"];
"1000588" [label="(Call,k+=MaxHashTable)"];
"1000660" [label="(Call,k < MaxHashTable)"];
"1000663" [label="(Call,k++)"];
"1000520" [label="(Call,((size_t) index << (MaxGIFBits-8))+waiting_code)"];
"1000551" [label="(Call,hash_prefix[k] == waiting_code)"];
"1000550" [label="(Call,(hash_prefix[k] == waiting_code) &&\n              (hash_suffix[k] == (unsigned char) index))"];
"1000599" [label="(Call,(hash_prefix[k] == waiting_code) &&\n                (hash_suffix[k] == (unsigned char) index))"];
"1000600" [label="(Call,hash_prefix[k] == waiting_code)"];
"1000627" [label="(Call,GIFOutputCode(waiting_code))"];
"1000642" [label="(Call,hash_prefix[k]=waiting_code)"];
"1000836" [label="(Call,RelinquishMagickMemory(hash_prefix))"];
"1000834" [label="(Call,(short *) RelinquishMagickMemory(hash_prefix))"];
"1000832" [label="(Call,hash_prefix=(short *) RelinquishMagickMemory(hash_prefix))"];
"1000768" [label="(Call,GIFOutputCode(waiting_code))"];
"1000592" [label="(Call,hash_code[k] == 0)"];
"1000613" [label="(Call,waiting_code=hash_code[k])"];
"1000842" [label="(Call,RelinquishMagickMemory(hash_code))"];
"1000840" [label="(Call,(short *) RelinquishMagickMemory(hash_code))"];
"1000838" [label="(Call,hash_code=(short *) RelinquishMagickMemory(hash_code))"];
"1000576" [label="(Call,MaxHashTable-k)"];
"1000660" [label="(Call,k < MaxHashTable)"];
"1000275" [label="(Call,(short *) NULL)"];
"1000277" [label="(Identifier,NULL)"];
"1000544" [label="(Call,hash_code[k])"];
"1000600" [label="(Call,hash_prefix[k] == waiting_code)"];
"1000573" [label="(Literal,0)"];
"1000597" [label="(ControlStructure,break;)"];
"1000252" [label="(Identifier,MaxHashTable)"];
"1000768" [label="(Call,GIFOutputCode(waiting_code))"];
"1000663" [label="(Call,k++)"];
"1000642" [label="(Call,hash_prefix[k]=waiting_code)"];
"1000552" [label="(Call,hash_prefix[k])"];
"1000357" [label="(Call,sizeof(*hash_code))"];
"1000604" [label="(Identifier,waiting_code)"];
"1000272" [label="(Call,(hash_code == (short *) NULL) ||\n      (hash_prefix == (short *) NULL) ||\n      (hash_suffix == (unsigned char *) NULL))"];
"1000547" [label="(Literal,0)"];
"1000615" [label="(Call,hash_code[k])"];
"1000375" [label="(Call,MaxHashTable*sizeof(*hash_suffix))"];
"1000260" [label="(Call,AcquireQuantumMemory(MaxHashTable,\n    sizeof(*hash_suffix)))"];
"1000553" [label="(Identifier,hash_prefix)"];
"1000473" [label="(Call,waiting_code=(short) (*indexes))"];
"1000362" [label="(Call,memset(hash_prefix,0,MaxHashTable*sizeof(*hash_prefix)))"];
"1000225" [label="(Identifier,NULL)"];
"1000836" [label="(Call,RelinquishMagickMemory(hash_prefix))"];
"1000355" [label="(Call,MaxHashTable*sizeof(*hash_code))"];
"1000664" [label="(Identifier,k)"];
"1000612" [label="(Block,)"];
"1000628" [label="(Identifier,waiting_code)"];
"1000594" [label="(Identifier,hash_code)"];
"1000423" [label="(Call,waiting_code=0)"];
"1000662" [label="(Identifier,MaxHashTable)"];
"1000460" [label="(Call,(const PixelPacket *) NULL)"];
"1000570" [label="(ControlStructure,if (k != 0))"];
"1000116" [label="(Block,)"];
"1000258" [label="(Call,(unsigned char *) AcquireQuantumMemory(MaxHashTable,\n    sizeof(*hash_suffix)))"];
"1000520" [label="(Call,((size_t) index << (MaxGIFBits-8))+waiting_code)"];
"1000834" [label="(Call,(short *) RelinquishMagickMemory(hash_prefix))"];
"1000596" [label="(Literal,0)"];
"1000649" [label="(Identifier,hash_suffix)"];
"1000564" [label="(Call,waiting_code=hash_code[k])"];
"1000769" [label="(Identifier,waiting_code)"];
"1000671" [label="(Identifier,free_code)"];
"1000592" [label="(Call,hash_code[k] == 0)"];
"1000517" [label="(Identifier,k)"];
"1000542" [label="(ControlStructure,if (hash_code[k] > 0))"];
"1000832" [label="(Call,hash_prefix=(short *) RelinquishMagickMemory(hash_prefix))"];
"1000253" [label="(Call,sizeof(*hash_prefix))"];
"1000565" [label="(Identifier,waiting_code)"];
"1000261" [label="(Identifier,MaxHashTable)"];
"1000537" [label="(Identifier,next_pixel)"];
"1000550" [label="(Call,(hash_prefix[k] == waiting_code) &&\n              (hash_suffix[k] == (unsigned char) index))"];
"1000588" [label="(Call,k+=MaxHashTable)"];
"1000571" [label="(Call,k != 0)"];
"1000577" [label="(Identifier,MaxHashTable)"];
"1000555" [label="(Identifier,waiting_code)"];
"1000352" [label="(Call,memset(hash_code,0,MaxHashTable*sizeof(*hash_code)))"];
"1000242" [label="(Call,AcquireQuantumMemory(MaxHashTable,sizeof(*hash_code)))"];
"1000843" [label="(Identifier,hash_code)"];
"1000530" [label="(Call,k >= MaxHashTable)"];
"1000350" [label="(Call,(void) memset(hash_code,0,MaxHashTable*sizeof(*hash_code)))"];
"1000303" [label="(Call,hash_code != (short *) NULL)"];
"1000656" [label="(ControlStructure,for (k=0; k < MaxHashTable; k++))"];
"1000543" [label="(Call,hash_code[k] > 0)"];
"1000549" [label="(ControlStructure,if ((hash_prefix[k] == waiting_code) &&\n              (hash_suffix[k] == (unsigned char) index)))"];
"1000634" [label="(Call,hash_code[k]=(short) free_code++)"];
"1000586" [label="(Identifier,k)"];
"1000643" [label="(Call,hash_prefix[k])"];
"1000582" [label="(Identifier,k)"];
"1000267" [label="(Call,packet == (unsigned char *) NULL)"];
"1000532" [label="(Identifier,MaxHashTable)"];
"1000613" [label="(Call,waiting_code=hash_code[k])"];
"1000535" [label="(Identifier,MaxHashTable)"];
"1000585" [label="(Call,k < 0)"];
"1000627" [label="(Call,GIFOutputCode(waiting_code))"];
"1000558" [label="(Identifier,hash_suffix)"];
"1000583" [label="(Identifier,displacement)"];
"1000569" [label="(ControlStructure,continue;)"];
"1000534" [label="(Identifier,k)"];
"1000521" [label="(Call,(size_t) index << (MaxGIFBits-8))"];
"1000269" [label="(Call,(unsigned char *) NULL)"];
"1000240" [label="(Call,(short *) AcquireQuantumMemory(MaxHashTable,sizeof(*hash_code)))"];
"1000531" [label="(Identifier,k)"];
"1000771" [label="(Identifier,end_of_information_code)"];
"1000248" [label="(Identifier,hash_prefix)"];
"1000587" [label="(Literal,0)"];
"1000244" [label="(Call,sizeof(*hash_code))"];
"1000837" [label="(Identifier,hash_prefix)"];
"1000614" [label="(Identifier,waiting_code)"];
"1000619" [label="(Identifier,next_pixel)"];
"1000516" [label="(Call,k=(ssize_t) (((size_t) index << (MaxGIFBits-8))+waiting_code))"];
"1000667" [label="(Identifier,hash_code)"];
"1000518" [label="(Call,(ssize_t) (((size_t) index << (MaxGIFBits-8))+waiting_code))"];
"1000607" [label="(Identifier,hash_suffix)"];
"1000271" [label="(Identifier,NULL)"];
"1000238" [label="(Call,hash_code=(short *) AcquireQuantumMemory(MaxHashTable,sizeof(*hash_code)))"];
"1000539" [label="(Call,displacement=1)"];
"1000293" [label="(Call,(unsigned char *) NULL)"];
"1000223" [label="(Call,(Image *) NULL)"];
"1000661" [label="(Identifier,k)"];
"1000365" [label="(Call,MaxHashTable*sizeof(*hash_prefix))"];
"1000665" [label="(Call,hash_code[k]=0)"];
"1000574" [label="(Call,displacement=MaxHashTable-k)"];
"1000633" [label="(Block,)"];
"1000572" [label="(Identifier,k)"];
"1000833" [label="(Identifier,hash_prefix)"];
"1000563" [label="(Block,)"];
"1000842" [label="(Call,RelinquishMagickMemory(hash_code))"];
"1000602" [label="(Identifier,hash_prefix)"];
"1000590" [label="(Identifier,MaxHashTable)"];
"1000684" [label="(Call,waiting_code=(short) index)"];
"1000591" [label="(ControlStructure,if (hash_code[k] == 0))"];
"1000262" [label="(Call,sizeof(*hash_suffix))"];
"1000605" [label="(Call,hash_suffix[k] == (unsigned char) index)"];
"1000529" [label="(ControlStructure,if (k >= MaxHashTable))"];
"1000580" [label="(Block,)"];
"1000646" [label="(Identifier,waiting_code)"];
"1000239" [label="(Identifier,hash_code)"];
"1000575" [label="(Identifier,displacement)"];
"1000280" [label="(Identifier,hash_prefix)"];
"1000599" [label="(Call,(hash_prefix[k] == waiting_code) &&\n                (hash_suffix[k] == (unsigned char) index))"];
"1000598" [label="(ControlStructure,if ((hash_prefix[k] == waiting_code) &&\n                (hash_suffix[k] == (unsigned char) index)))"];
"1000589" [label="(Identifier,k)"];
"1000584" [label="(ControlStructure,if (k < 0))"];
"1000581" [label="(Call,k-=displacement)"];
"1000840" [label="(Call,(short *) RelinquishMagickMemory(hash_code))"];
"1000354" [label="(Literal,0)"];
"1000578" [label="(Identifier,k)"];
"1000251" [label="(Call,AcquireQuantumMemory(MaxHashTable,sizeof(*hash_prefix)))"];
"1000852" [label="(MethodReturn,static MagickBooleanType)"];
"1000839" [label="(Identifier,hash_code)"];
"1000281" [label="(Call,(short *) NULL)"];
"1000601" [label="(Call,hash_prefix[k])"];
"1000566" [label="(Call,hash_code[k])"];
"1000501" [label="(Block,)"];
"1000249" [label="(Call,(short *) AcquireQuantumMemory(MaxHashTable,sizeof(*hash_prefix)))"];
"1000593" [label="(Call,hash_code[k])"];
"1000845" [label="(Identifier,packet)"];
"1000273" [label="(Call,hash_code == (short *) NULL)"];
"1000356" [label="(Identifier,MaxHashTable)"];
"1000528" [label="(Identifier,waiting_code)"];
"1000221" [label="(Call,image != (Image *) NULL)"];
"1000551" [label="(Call,hash_prefix[k] == waiting_code)"];
"1000556" [label="(Call,hash_suffix[k] == (unsigned char) index)"];
"1000243" [label="(Identifier,MaxHashTable)"];
"1000631" [label="(Identifier,free_code)"];
"1000838" [label="(Call,hash_code=(short *) RelinquishMagickMemory(hash_code))"];
"1000353" [label="(Identifier,hash_code)"];
"1000657" [label="(Call,k=0)"];
"1000274" [label="(Identifier,hash_code)"];
"1000533" [label="(Call,k-=MaxHashTable)"];
"1000352" -> "1000350"  [label="AST: "];
"1000352" -> "1000355"  [label="CFG: "];
"1000353" -> "1000352"  [label="AST: "];
"1000354" -> "1000352"  [label="AST: "];
"1000355" -> "1000352"  [label="AST: "];
"1000350" -> "1000352"  [label="CFG: "];
"1000352" -> "1000852"  [label="DDG: MaxHashTable*sizeof(*hash_code)"];
"1000352" -> "1000350"  [label="DDG: hash_code"];
"1000352" -> "1000350"  [label="DDG: 0"];
"1000352" -> "1000350"  [label="DDG: MaxHashTable*sizeof(*hash_code)"];
"1000238" -> "1000352"  [label="DDG: hash_code"];
"1000273" -> "1000352"  [label="DDG: hash_code"];
"1000355" -> "1000352"  [label="DDG: MaxHashTable"];
"1000352" -> "1000543"  [label="DDG: hash_code"];
"1000352" -> "1000564"  [label="DDG: hash_code"];
"1000352" -> "1000592"  [label="DDG: hash_code"];
"1000352" -> "1000613"  [label="DDG: hash_code"];
"1000352" -> "1000842"  [label="DDG: hash_code"];
"1000238" -> "1000116"  [label="AST: "];
"1000238" -> "1000240"  [label="CFG: "];
"1000239" -> "1000238"  [label="AST: "];
"1000240" -> "1000238"  [label="AST: "];
"1000248" -> "1000238"  [label="CFG: "];
"1000238" -> "1000852"  [label="DDG: (short *) AcquireQuantumMemory(MaxHashTable,sizeof(*hash_code))"];
"1000240" -> "1000238"  [label="DDG: AcquireQuantumMemory(MaxHashTable,sizeof(*hash_code))"];
"1000238" -> "1000273"  [label="DDG: hash_code"];
"1000238" -> "1000303"  [label="DDG: hash_code"];
"1000240" -> "1000242"  [label="CFG: "];
"1000241" -> "1000240"  [label="AST: "];
"1000242" -> "1000240"  [label="AST: "];
"1000240" -> "1000852"  [label="DDG: AcquireQuantumMemory(MaxHashTable,sizeof(*hash_code))"];
"1000242" -> "1000240"  [label="DDG: MaxHashTable"];
"1000242" -> "1000244"  [label="CFG: "];
"1000243" -> "1000242"  [label="AST: "];
"1000244" -> "1000242"  [label="AST: "];
"1000242" -> "1000251"  [label="DDG: MaxHashTable"];
"1000273" -> "1000272"  [label="AST: "];
"1000273" -> "1000275"  [label="CFG: "];
"1000274" -> "1000273"  [label="AST: "];
"1000275" -> "1000273"  [label="AST: "];
"1000280" -> "1000273"  [label="CFG: "];
"1000272" -> "1000273"  [label="CFG: "];
"1000273" -> "1000852"  [label="DDG: (short *) NULL"];
"1000273" -> "1000272"  [label="DDG: hash_code"];
"1000273" -> "1000272"  [label="DDG: (short *) NULL"];
"1000275" -> "1000273"  [label="DDG: NULL"];
"1000273" -> "1000303"  [label="DDG: hash_code"];
"1000275" -> "1000277"  [label="CFG: "];
"1000276" -> "1000275"  [label="AST: "];
"1000277" -> "1000275"  [label="AST: "];
"1000275" -> "1000852"  [label="DDG: NULL"];
"1000269" -> "1000275"  [label="DDG: NULL"];
"1000275" -> "1000281"  [label="DDG: NULL"];
"1000275" -> "1000293"  [label="DDG: NULL"];
"1000275" -> "1000460"  [label="DDG: NULL"];
"1000269" -> "1000267"  [label="AST: "];
"1000269" -> "1000271"  [label="CFG: "];
"1000270" -> "1000269"  [label="AST: "];
"1000271" -> "1000269"  [label="AST: "];
"1000267" -> "1000269"  [label="CFG: "];
"1000269" -> "1000852"  [label="DDG: NULL"];
"1000269" -> "1000267"  [label="DDG: NULL"];
"1000223" -> "1000269"  [label="DDG: NULL"];
"1000269" -> "1000293"  [label="DDG: NULL"];
"1000269" -> "1000460"  [label="DDG: NULL"];
"1000223" -> "1000221"  [label="AST: "];
"1000223" -> "1000225"  [label="CFG: "];
"1000224" -> "1000223"  [label="AST: "];
"1000225" -> "1000223"  [label="AST: "];
"1000221" -> "1000223"  [label="CFG: "];
"1000223" -> "1000221"  [label="DDG: NULL"];
"1000355" -> "1000357"  [label="CFG: "];
"1000356" -> "1000355"  [label="AST: "];
"1000357" -> "1000355"  [label="AST: "];
"1000260" -> "1000355"  [label="DDG: MaxHashTable"];
"1000355" -> "1000365"  [label="DDG: MaxHashTable"];
"1000260" -> "1000258"  [label="AST: "];
"1000260" -> "1000262"  [label="CFG: "];
"1000261" -> "1000260"  [label="AST: "];
"1000262" -> "1000260"  [label="AST: "];
"1000258" -> "1000260"  [label="CFG: "];
"1000260" -> "1000852"  [label="DDG: MaxHashTable"];
"1000260" -> "1000258"  [label="DDG: MaxHashTable"];
"1000251" -> "1000260"  [label="DDG: MaxHashTable"];
"1000251" -> "1000249"  [label="AST: "];
"1000251" -> "1000253"  [label="CFG: "];
"1000252" -> "1000251"  [label="AST: "];
"1000253" -> "1000251"  [label="AST: "];
"1000249" -> "1000251"  [label="CFG: "];
"1000251" -> "1000249"  [label="DDG: MaxHashTable"];
"1000350" -> "1000116"  [label="AST: "];
"1000351" -> "1000350"  [label="AST: "];
"1000361" -> "1000350"  [label="CFG: "];
"1000350" -> "1000852"  [label="DDG: (void) memset(hash_code,0,MaxHashTable*sizeof(*hash_code))"];
"1000350" -> "1000852"  [label="DDG: memset(hash_code,0,MaxHashTable*sizeof(*hash_code))"];
"1000543" -> "1000542"  [label="AST: "];
"1000543" -> "1000547"  [label="CFG: "];
"1000544" -> "1000543"  [label="AST: "];
"1000547" -> "1000543"  [label="AST: "];
"1000553" -> "1000543"  [label="CFG: "];
"1000628" -> "1000543"  [label="CFG: "];
"1000543" -> "1000852"  [label="DDG: hash_code[k] > 0"];
"1000543" -> "1000852"  [label="DDG: hash_code[k]"];
"1000634" -> "1000543"  [label="DDG: hash_code[k]"];
"1000665" -> "1000543"  [label="DDG: hash_code[k]"];
"1000592" -> "1000543"  [label="DDG: hash_code[k]"];
"1000543" -> "1000564"  [label="DDG: hash_code[k]"];
"1000543" -> "1000592"  [label="DDG: hash_code[k]"];
"1000543" -> "1000842"  [label="DDG: hash_code[k]"];
"1000564" -> "1000563"  [label="AST: "];
"1000564" -> "1000566"  [label="CFG: "];
"1000565" -> "1000564"  [label="AST: "];
"1000566" -> "1000564"  [label="AST: "];
"1000569" -> "1000564"  [label="CFG: "];
"1000564" -> "1000852"  [label="DDG: hash_code[k]"];
"1000564" -> "1000518"  [label="DDG: waiting_code"];
"1000564" -> "1000520"  [label="DDG: waiting_code"];
"1000564" -> "1000551"  [label="DDG: waiting_code"];
"1000564" -> "1000627"  [label="DDG: waiting_code"];
"1000564" -> "1000768"  [label="DDG: waiting_code"];
"1000518" -> "1000516"  [label="AST: "];
"1000518" -> "1000520"  [label="CFG: "];
"1000519" -> "1000518"  [label="AST: "];
"1000520" -> "1000518"  [label="AST: "];
"1000516" -> "1000518"  [label="CFG: "];
"1000518" -> "1000852"  [label="DDG: ((size_t) index << (MaxGIFBits-8))+waiting_code"];
"1000518" -> "1000516"  [label="DDG: ((size_t) index << (MaxGIFBits-8))+waiting_code"];
"1000521" -> "1000518"  [label="DDG: (size_t) index"];
"1000521" -> "1000518"  [label="DDG: MaxGIFBits-8"];
"1000613" -> "1000518"  [label="DDG: waiting_code"];
"1000684" -> "1000518"  [label="DDG: waiting_code"];
"1000551" -> "1000518"  [label="DDG: waiting_code"];
"1000473" -> "1000518"  [label="DDG: waiting_code"];
"1000600" -> "1000518"  [label="DDG: waiting_code"];
"1000423" -> "1000518"  [label="DDG: waiting_code"];
"1000516" -> "1000501"  [label="AST: "];
"1000517" -> "1000516"  [label="AST: "];
"1000531" -> "1000516"  [label="CFG: "];
"1000516" -> "1000852"  [label="DDG: (ssize_t) (((size_t) index << (MaxGIFBits-8))+waiting_code)"];
"1000516" -> "1000530"  [label="DDG: k"];
"1000530" -> "1000529"  [label="AST: "];
"1000530" -> "1000532"  [label="CFG: "];
"1000531" -> "1000530"  [label="AST: "];
"1000532" -> "1000530"  [label="AST: "];
"1000534" -> "1000530"  [label="CFG: "];
"1000537" -> "1000530"  [label="CFG: "];
"1000530" -> "1000852"  [label="DDG: k"];
"1000530" -> "1000852"  [label="DDG: k >= MaxHashTable"];
"1000530" -> "1000852"  [label="DDG: MaxHashTable"];
"1000375" -> "1000530"  [label="DDG: MaxHashTable"];
"1000660" -> "1000530"  [label="DDG: MaxHashTable"];
"1000576" -> "1000530"  [label="DDG: MaxHashTable"];
"1000530" -> "1000533"  [label="DDG: MaxHashTable"];
"1000530" -> "1000533"  [label="DDG: k"];
"1000530" -> "1000571"  [label="DDG: k"];
"1000530" -> "1000576"  [label="DDG: MaxHashTable"];
"1000530" -> "1000588"  [label="DDG: MaxHashTable"];
"1000530" -> "1000660"  [label="DDG: MaxHashTable"];
"1000533" -> "1000529"  [label="AST: "];
"1000533" -> "1000535"  [label="CFG: "];
"1000534" -> "1000533"  [label="AST: "];
"1000535" -> "1000533"  [label="AST: "];
"1000537" -> "1000533"  [label="CFG: "];
"1000533" -> "1000852"  [label="DDG: k"];
"1000533" -> "1000852"  [label="DDG: MaxHashTable"];
"1000533" -> "1000571"  [label="DDG: k"];
"1000571" -> "1000570"  [label="AST: "];
"1000571" -> "1000573"  [label="CFG: "];
"1000572" -> "1000571"  [label="AST: "];
"1000573" -> "1000571"  [label="AST: "];
"1000575" -> "1000571"  [label="CFG: "];
"1000582" -> "1000571"  [label="CFG: "];
"1000571" -> "1000852"  [label="DDG: k != 0"];
"1000571" -> "1000576"  [label="DDG: k"];
"1000571" -> "1000581"  [label="DDG: k"];
"1000576" -> "1000574"  [label="AST: "];
"1000576" -> "1000578"  [label="CFG: "];
"1000577" -> "1000576"  [label="AST: "];
"1000578" -> "1000576"  [label="AST: "];
"1000574" -> "1000576"  [label="CFG: "];
"1000576" -> "1000852"  [label="DDG: MaxHashTable"];
"1000576" -> "1000574"  [label="DDG: MaxHashTable"];
"1000576" -> "1000574"  [label="DDG: k"];
"1000576" -> "1000581"  [label="DDG: k"];
"1000576" -> "1000588"  [label="DDG: MaxHashTable"];
"1000576" -> "1000660"  [label="DDG: MaxHashTable"];
"1000574" -> "1000570"  [label="AST: "];
"1000575" -> "1000574"  [label="AST: "];
"1000582" -> "1000574"  [label="CFG: "];
"1000574" -> "1000852"  [label="DDG: MaxHashTable-k"];
"1000574" -> "1000581"  [label="DDG: displacement"];
"1000581" -> "1000580"  [label="AST: "];
"1000581" -> "1000583"  [label="CFG: "];
"1000582" -> "1000581"  [label="AST: "];
"1000583" -> "1000581"  [label="AST: "];
"1000586" -> "1000581"  [label="CFG: "];
"1000581" -> "1000852"  [label="DDG: displacement"];
"1000539" -> "1000581"  [label="DDG: displacement"];
"1000588" -> "1000581"  [label="DDG: k"];
"1000585" -> "1000581"  [label="DDG: k"];
"1000581" -> "1000585"  [label="DDG: k"];
"1000585" -> "1000584"  [label="AST: "];
"1000585" -> "1000587"  [label="CFG: "];
"1000586" -> "1000585"  [label="AST: "];
"1000587" -> "1000585"  [label="AST: "];
"1000589" -> "1000585"  [label="CFG: "];
"1000594" -> "1000585"  [label="CFG: "];
"1000585" -> "1000852"  [label="DDG: k"];
"1000585" -> "1000852"  [label="DDG: k < 0"];
"1000585" -> "1000588"  [label="DDG: k"];
"1000588" -> "1000584"  [label="AST: "];
"1000588" -> "1000590"  [label="CFG: "];
"1000589" -> "1000588"  [label="AST: "];
"1000590" -> "1000588"  [label="AST: "];
"1000594" -> "1000588"  [label="CFG: "];
"1000588" -> "1000852"  [label="DDG: k"];
"1000588" -> "1000852"  [label="DDG: MaxHashTable"];
"1000660" -> "1000656"  [label="AST: "];
"1000660" -> "1000662"  [label="CFG: "];
"1000661" -> "1000660"  [label="AST: "];
"1000662" -> "1000660"  [label="AST: "];
"1000667" -> "1000660"  [label="CFG: "];
"1000671" -> "1000660"  [label="CFG: "];
"1000660" -> "1000852"  [label="DDG: k < MaxHashTable"];
"1000660" -> "1000852"  [label="DDG: k"];
"1000660" -> "1000852"  [label="DDG: MaxHashTable"];
"1000663" -> "1000660"  [label="DDG: k"];
"1000657" -> "1000660"  [label="DDG: k"];
"1000660" -> "1000663"  [label="DDG: k"];
"1000663" -> "1000656"  [label="AST: "];
"1000663" -> "1000664"  [label="CFG: "];
"1000664" -> "1000663"  [label="AST: "];
"1000661" -> "1000663"  [label="CFG: "];
"1000520" -> "1000528"  [label="CFG: "];
"1000521" -> "1000520"  [label="AST: "];
"1000528" -> "1000520"  [label="AST: "];
"1000520" -> "1000852"  [label="DDG: (size_t) index << (MaxGIFBits-8)"];
"1000521" -> "1000520"  [label="DDG: (size_t) index"];
"1000521" -> "1000520"  [label="DDG: MaxGIFBits-8"];
"1000613" -> "1000520"  [label="DDG: waiting_code"];
"1000684" -> "1000520"  [label="DDG: waiting_code"];
"1000551" -> "1000520"  [label="DDG: waiting_code"];
"1000473" -> "1000520"  [label="DDG: waiting_code"];
"1000600" -> "1000520"  [label="DDG: waiting_code"];
"1000423" -> "1000520"  [label="DDG: waiting_code"];
"1000551" -> "1000550"  [label="AST: "];
"1000551" -> "1000555"  [label="CFG: "];
"1000552" -> "1000551"  [label="AST: "];
"1000555" -> "1000551"  [label="AST: "];
"1000558" -> "1000551"  [label="CFG: "];
"1000550" -> "1000551"  [label="CFG: "];
"1000551" -> "1000852"  [label="DDG: hash_prefix[k]"];
"1000551" -> "1000550"  [label="DDG: hash_prefix[k]"];
"1000551" -> "1000550"  [label="DDG: waiting_code"];
"1000642" -> "1000551"  [label="DDG: hash_prefix[k]"];
"1000600" -> "1000551"  [label="DDG: hash_prefix[k]"];
"1000600" -> "1000551"  [label="DDG: waiting_code"];
"1000362" -> "1000551"  [label="DDG: hash_prefix"];
"1000613" -> "1000551"  [label="DDG: waiting_code"];
"1000684" -> "1000551"  [label="DDG: waiting_code"];
"1000473" -> "1000551"  [label="DDG: waiting_code"];
"1000423" -> "1000551"  [label="DDG: waiting_code"];
"1000551" -> "1000600"  [label="DDG: hash_prefix[k]"];
"1000551" -> "1000600"  [label="DDG: waiting_code"];
"1000551" -> "1000627"  [label="DDG: waiting_code"];
"1000551" -> "1000768"  [label="DDG: waiting_code"];
"1000551" -> "1000836"  [label="DDG: hash_prefix[k]"];
"1000550" -> "1000549"  [label="AST: "];
"1000550" -> "1000556"  [label="CFG: "];
"1000556" -> "1000550"  [label="AST: "];
"1000565" -> "1000550"  [label="CFG: "];
"1000572" -> "1000550"  [label="CFG: "];
"1000550" -> "1000852"  [label="DDG: (hash_prefix[k] == waiting_code) &&\n              (hash_suffix[k] == (unsigned char) index)"];
"1000550" -> "1000852"  [label="DDG: hash_suffix[k] == (unsigned char) index"];
"1000550" -> "1000852"  [label="DDG: hash_prefix[k] == waiting_code"];
"1000599" -> "1000550"  [label="DDG: hash_suffix[k] == (unsigned char) index"];
"1000556" -> "1000550"  [label="DDG: hash_suffix[k]"];
"1000556" -> "1000550"  [label="DDG: (unsigned char) index"];
"1000550" -> "1000599"  [label="DDG: hash_suffix[k] == (unsigned char) index"];
"1000599" -> "1000598"  [label="AST: "];
"1000599" -> "1000600"  [label="CFG: "];
"1000599" -> "1000605"  [label="CFG: "];
"1000600" -> "1000599"  [label="AST: "];
"1000605" -> "1000599"  [label="AST: "];
"1000582" -> "1000599"  [label="CFG: "];
"1000614" -> "1000599"  [label="CFG: "];
"1000599" -> "1000852"  [label="DDG: (hash_prefix[k] == waiting_code) &&\n                (hash_suffix[k] == (unsigned char) index)"];
"1000599" -> "1000852"  [label="DDG: hash_prefix[k] == waiting_code"];
"1000599" -> "1000852"  [label="DDG: hash_suffix[k] == (unsigned char) index"];
"1000600" -> "1000599"  [label="DDG: hash_prefix[k]"];
"1000600" -> "1000599"  [label="DDG: waiting_code"];
"1000605" -> "1000599"  [label="DDG: hash_suffix[k]"];
"1000605" -> "1000599"  [label="DDG: (unsigned char) index"];
"1000600" -> "1000604"  [label="CFG: "];
"1000601" -> "1000600"  [label="AST: "];
"1000604" -> "1000600"  [label="AST: "];
"1000607" -> "1000600"  [label="CFG: "];
"1000600" -> "1000852"  [label="DDG: hash_prefix[k]"];
"1000362" -> "1000600"  [label="DDG: hash_prefix"];
"1000600" -> "1000627"  [label="DDG: waiting_code"];
"1000600" -> "1000768"  [label="DDG: waiting_code"];
"1000600" -> "1000836"  [label="DDG: hash_prefix[k]"];
"1000627" -> "1000501"  [label="AST: "];
"1000627" -> "1000628"  [label="CFG: "];
"1000628" -> "1000627"  [label="AST: "];
"1000631" -> "1000627"  [label="CFG: "];
"1000613" -> "1000627"  [label="DDG: waiting_code"];
"1000684" -> "1000627"  [label="DDG: waiting_code"];
"1000473" -> "1000627"  [label="DDG: waiting_code"];
"1000423" -> "1000627"  [label="DDG: waiting_code"];
"1000627" -> "1000642"  [label="DDG: waiting_code"];
"1000642" -> "1000633"  [label="AST: "];
"1000642" -> "1000646"  [label="CFG: "];
"1000643" -> "1000642"  [label="AST: "];
"1000646" -> "1000642"  [label="AST: "];
"1000649" -> "1000642"  [label="CFG: "];
"1000642" -> "1000852"  [label="DDG: hash_prefix[k]"];
"1000642" -> "1000836"  [label="DDG: hash_prefix[k]"];
"1000836" -> "1000834"  [label="AST: "];
"1000836" -> "1000837"  [label="CFG: "];
"1000837" -> "1000836"  [label="AST: "];
"1000834" -> "1000836"  [label="CFG: "];
"1000836" -> "1000834"  [label="DDG: hash_prefix"];
"1000362" -> "1000836"  [label="DDG: hash_prefix"];
"1000834" -> "1000832"  [label="AST: "];
"1000835" -> "1000834"  [label="AST: "];
"1000832" -> "1000834"  [label="CFG: "];
"1000834" -> "1000852"  [label="DDG: RelinquishMagickMemory(hash_prefix)"];
"1000834" -> "1000832"  [label="DDG: RelinquishMagickMemory(hash_prefix)"];
"1000832" -> "1000116"  [label="AST: "];
"1000833" -> "1000832"  [label="AST: "];
"1000839" -> "1000832"  [label="CFG: "];
"1000832" -> "1000852"  [label="DDG: (short *) RelinquishMagickMemory(hash_prefix)"];
"1000832" -> "1000852"  [label="DDG: hash_prefix"];
"1000768" -> "1000116"  [label="AST: "];
"1000768" -> "1000769"  [label="CFG: "];
"1000769" -> "1000768"  [label="AST: "];
"1000771" -> "1000768"  [label="CFG: "];
"1000768" -> "1000852"  [label="DDG: waiting_code"];
"1000768" -> "1000852"  [label="DDG: GIFOutputCode(waiting_code)"];
"1000613" -> "1000768"  [label="DDG: waiting_code"];
"1000684" -> "1000768"  [label="DDG: waiting_code"];
"1000473" -> "1000768"  [label="DDG: waiting_code"];
"1000423" -> "1000768"  [label="DDG: waiting_code"];
"1000592" -> "1000591"  [label="AST: "];
"1000592" -> "1000596"  [label="CFG: "];
"1000593" -> "1000592"  [label="AST: "];
"1000596" -> "1000592"  [label="AST: "];
"1000597" -> "1000592"  [label="CFG: "];
"1000602" -> "1000592"  [label="CFG: "];
"1000592" -> "1000852"  [label="DDG: hash_code[k] == 0"];
"1000592" -> "1000852"  [label="DDG: hash_code[k]"];
"1000592" -> "1000613"  [label="DDG: hash_code[k]"];
"1000592" -> "1000842"  [label="DDG: hash_code[k]"];
"1000613" -> "1000612"  [label="AST: "];
"1000613" -> "1000615"  [label="CFG: "];
"1000614" -> "1000613"  [label="AST: "];
"1000615" -> "1000613"  [label="AST: "];
"1000619" -> "1000613"  [label="CFG: "];
"1000613" -> "1000852"  [label="DDG: hash_code[k]"];
"1000842" -> "1000840"  [label="AST: "];
"1000842" -> "1000843"  [label="CFG: "];
"1000843" -> "1000842"  [label="AST: "];
"1000840" -> "1000842"  [label="CFG: "];
"1000842" -> "1000840"  [label="DDG: hash_code"];
"1000634" -> "1000842"  [label="DDG: hash_code[k]"];
"1000665" -> "1000842"  [label="DDG: hash_code[k]"];
"1000840" -> "1000838"  [label="AST: "];
"1000841" -> "1000840"  [label="AST: "];
"1000838" -> "1000840"  [label="CFG: "];
"1000840" -> "1000852"  [label="DDG: RelinquishMagickMemory(hash_code)"];
"1000840" -> "1000838"  [label="DDG: RelinquishMagickMemory(hash_code)"];
"1000838" -> "1000116"  [label="AST: "];
"1000839" -> "1000838"  [label="AST: "];
"1000845" -> "1000838"  [label="CFG: "];
"1000838" -> "1000852"  [label="DDG: hash_code"];
"1000838" -> "1000852"  [label="DDG: (short *) RelinquishMagickMemory(hash_code)"];
}
