digraph "0_file_445c8fb0ebff85195be94cd9f7e1df89cade5c7f_1@pointer" {
"1000152" [label="(Call,file_printf(ms, \", corrupted section header size\"))"];
"1000110" [label="(MethodParameterIn,struct magic_set *ms)"];
"1000151" [label="(Call,file_printf(ms, \", corrupted section header size\") == -1)"];
"1000159" [label="(Literal,1)"];
"1000156" [label="(Literal,1)"];
"1000110" [label="(MethodParameterIn,struct magic_set *ms)"];
"1000630" [label="(Call,file_printf(ms,\n\t\t\t\t    \" unknown hardware capability 0x%\"\n\t\t\t\t    INT64_T_FORMAT \"x\",\n\t\t\t\t    (unsigned long long)cap_hw1))"];
"1000176" [label="(Call,file_badread(ms))"];
"1000480" [label="(Call,file_printf(ms, \", unknown gnu\"\n\t\t\t\t\t\t\" capability tag %d\", tag))"];
"1000153" [label="(Identifier,ms)"];
"1000151" [label="(Call,file_printf(ms, \", corrupted section header size\") == -1)"];
"1000645" [label="(Call,file_printf(ms,\n\t\t\t    \" hardware capability 0x%\" INT64_T_FORMAT \"x\",\n\t\t\t    (unsigned long long)cap_hw1))"];
"1000699" [label="(MethodReturn,RET)"];
"1000150" [label="(ControlStructure,if (file_printf(ms, \", corrupted section header size\") == -1))"];
"1000608" [label="(Call,file_printf(ms,\n\t\t\t\t\t    \" %s\", cdp->cd_name))"];
"1000360" [label="(Call,file_badseek(ms))"];
"1000154" [label="(Literal,\", corrupted section header size\")"];
"1000313" [label="(Call,donote(ms, nbuf, (size_t)noff,\n\t\t\t\t    xsh_size, clazz, swap, 4, flags))"];
"1000234" [label="(Call,file_badread(ms))"];
"1000438" [label="(Call,file_printf(ms,\n\t\t\t\t\t\t\", unknown capability %.3s\", p))"];
"1000275" [label="(Call,file_error(ms, errno, \"Cannot allocate memory\"\n \t\t\t\t    \" for note\"))"];
"1000161" [label="(Literal,0)"];
"1000666" [label="(Call,file_printf(ms,\n\t\t\t    (cap_sf1 & SF1_SUNW_FPKNWN)\n\t\t\t    ? \", uses frame pointer\"\n\t\t\t    : \", not known to use frame pointer\"))"];
"1000686" [label="(Call,file_printf(ms,\n\t\t\t    \", with unknown software capability 0x%\"\n\t\t\t    INT64_T_FORMAT \"x\",\n\t\t\t    (unsigned long long)cap_sf1))"];
"1000543" [label="(Call,file_printf(ms, \", %sstripped\", stripped ? \"\" : \"not \"))"];
"1000152" [label="(Call,file_printf(ms, \", corrupted section header size\"))"];
"1000202" [label="(Call,file_badread(ms))"];
"1000155" [label="(Call,-1)"];
"1000394" [label="(Call,file_badread(ms))"];
"1000583" [label="(Call,file_printf(ms, \", uses\"))"];
"1000515" [label="(Call,file_printf(ms,\n\t\t\t\t\t    \", with unknown capability \"\n\t\t\t\t\t    \"0x%\" INT64_T_FORMAT \"x = 0x%\"\n\t\t\t\t\t    INT64_T_FORMAT \"x\",\n\t\t\t\t\t    (unsigned long long)xcap_tag,\n\t\t\t\t\t    (unsigned long long)xcap_val))"];
"1000292" [label="(Call,file_badread(ms))"];
"1000152" -> "1000151"  [label="AST: "];
"1000152" -> "1000154"  [label="CFG: "];
"1000153" -> "1000152"  [label="AST: "];
"1000154" -> "1000152"  [label="AST: "];
"1000156" -> "1000152"  [label="CFG: "];
"1000152" -> "1000699"  [label="DDG: "];
"1000152" -> "1000151"  [label="DDG: "];
"1000152" -> "1000151"  [label="DDG: "];
"1000110" -> "1000152"  [label="DDG: "];
"1000110" -> "1000109"  [label="AST: "];
"1000110" -> "1000699"  [label="DDG: "];
"1000110" -> "1000176"  [label="DDG: "];
"1000110" -> "1000202"  [label="DDG: "];
"1000110" -> "1000234"  [label="DDG: "];
"1000110" -> "1000275"  [label="DDG: "];
"1000110" -> "1000292"  [label="DDG: "];
"1000110" -> "1000313"  [label="DDG: "];
"1000110" -> "1000360"  [label="DDG: "];
"1000110" -> "1000394"  [label="DDG: "];
"1000110" -> "1000438"  [label="DDG: "];
"1000110" -> "1000480"  [label="DDG: "];
"1000110" -> "1000515"  [label="DDG: "];
"1000110" -> "1000543"  [label="DDG: "];
"1000110" -> "1000583"  [label="DDG: "];
"1000110" -> "1000608"  [label="DDG: "];
"1000110" -> "1000630"  [label="DDG: "];
"1000110" -> "1000645"  [label="DDG: "];
"1000110" -> "1000666"  [label="DDG: "];
"1000110" -> "1000686"  [label="DDG: "];
"1000151" -> "1000150"  [label="AST: "];
"1000151" -> "1000155"  [label="CFG: "];
"1000155" -> "1000151"  [label="AST: "];
"1000159" -> "1000151"  [label="CFG: "];
"1000161" -> "1000151"  [label="CFG: "];
"1000151" -> "1000699"  [label="DDG: "];
"1000151" -> "1000699"  [label="DDG: "];
"1000151" -> "1000699"  [label="DDG: "];
"1000155" -> "1000151"  [label="DDG: "];
}
