digraph "0_gstreamer_4cb1bcf1422bbcd79c0f683edb7ee85e3f7a31fe_0@pointer" {
"1000228" [label="(Call,GST_WARNING_OBJECT (dec, \"Bad bpp value: %d\", bpp))"];
"1000110" [label="(MethodParameterIn,GstVMncDec * dec)"];
"1000224" [label="(Call,bpp != 32)"];
"1000221" [label="(Call,bpp != 16)"];
"1000217" [label="(Call,bpp != 8)"];
"1000179" [label="(Call,bpp = data[0])"];
"1000153" [label="(Call,memcpy (dec->format.descriptor, data, 16))"];
"1000141" [label="(Call,memcmp (data, dec->format.descriptor, 13))"];
"1000112" [label="(MethodParameterIn,const guint8 * data)"];
"1000154" [label="(Call,dec->format.descriptor)"];
"1000220" [label="(Call,bpp != 16 && bpp != 32)"];
"1000306" [label="(Call,GST_DEBUG_OBJECT (dec, \"Red: mask %d, shift %d\",\n      RFB_GET_UINT16 (data + 4), data[10]))"];
"1000399" [label="(Call,GST_DEBUG_OBJECT (dec, \"From depth: %d bpp: %u endianess: %s redmask: %X \"\n      \"greenmask: %X bluemask: %X got format %s\",\n      dec->format.depth, bpp, endianness == G_BIG_ENDIAN ? \"BE\" : \"LE\",\n      GUINT32_FROM_BE (redmask), GUINT32_FROM_BE (greenmask),\n      GUINT32_FROM_BE (bluemask),\n      format == GST_VIDEO_FORMAT_UNKNOWN ? \"UNKOWN\" :\n      gst_video_format_to_string (format)))"];
"1000287" [label="(Call,RFB_GET_UINT16 (data + 6))"];
"1000336" [label="(Call,GST_DEBUG_OBJECT (dec, \"BPP: %d. endianness: %s\", bpp,\n      data[2] ? \"big\" : \"little\"))"];
"1000228" [label="(Call,GST_WARNING_OBJECT (dec, \"Bad bpp value: %d\", bpp))"];
"1000148" [label="(Literal,13)"];
"1000142" [label="(Identifier,data)"];
"1000227" [label="(Block,)"];
"1000217" [label="(Call,bpp != 8)"];
"1000316" [label="(Call,GST_DEBUG_OBJECT (dec, \"Green: mask %d, shift %d\",\n      RFB_GET_UINT16 (data + 6), data[11]))"];
"1000309" [label="(Call,RFB_GET_UINT16 (data + 4))"];
"1000110" [label="(MethodParameterIn,GstVMncDec * dec)"];
"1000112" [label="(MethodParameterIn,const guint8 * data)"];
"1000193" [label="(Call,dec->format.big_endian = data[2])"];
"1000340" [label="(Call,data[2] ? \"big\" : \"little\")"];
"1000275" [label="(Call,RFB_GET_UINT16 (data + 4))"];
"1000229" [label="(Identifier,dec)"];
"1000249" [label="(Call,bpp / 8)"];
"1000330" [label="(Call,data + 8)"];
"1000446" [label="(Call,GST_LOG_OBJECT (dec, \"Parsing, not setting caps\"))"];
"1000149" [label="(Literal,0)"];
"1000296" [label="(Call,(guint32) (RFB_GET_UINT16 (data + 8)) << data[12])"];
"1000216" [label="(Call,bpp != 8 && bpp != 16 && bpp != 32)"];
"1000320" [label="(Call,data + 6)"];
"1000179" [label="(Call,bpp = data[0])"];
"1000224" [label="(Call,bpp != 32)"];
"1000432" [label="(Call,GST_WARNING_OBJECT (dec, \"Video format unknown to GStreamer\"))"];
"1000174" [label="(Call,GST_WARNING_OBJECT (dec, \"Bad WMVi rect: wrong coordinates\"))"];
"1000226" [label="(Literal,32)"];
"1000218" [label="(Identifier,bpp)"];
"1000233" [label="(Identifier,ERROR_INVALID)"];
"1000225" [label="(Identifier,bpp)"];
"1000159" [label="(Identifier,data)"];
"1000140" [label="(Call,memcmp (data, dec->format.descriptor, 13) == 0)"];
"1000202" [label="(Call,dataendianness = data[2] ? G_BIG_ENDIAN : G_LITTLE_ENDIAN)"];
"1000187" [label="(Identifier,dec)"];
"1000454" [label="(Call,GST_VIDEO_DECODER (dec))"];
"1000284" [label="(Call,(guint32) (RFB_GET_UINT16 (data + 6)) << data[11])"];
"1000181" [label="(Call,data[0])"];
"1000219" [label="(Literal,8)"];
"1000180" [label="(Identifier,bpp)"];
"1000299" [label="(Call,RFB_GET_UINT16 (data + 8))"];
"1000276" [label="(Call,data + 4)"];
"1000288" [label="(Call,data + 6)"];
"1000272" [label="(Call,(guint32) (RFB_GET_UINT16 (data + 4)) << data[10])"];
"1000153" [label="(Call,memcpy (dec->format.descriptor, data, 16))"];
"1000494" [label="(Call,GST_DEBUG_OBJECT (dec, \"Allocated image data at %p\", dec->imagedata))"];
"1000143" [label="(Call,dec->format.descriptor)"];
"1000204" [label="(Call,data[2] ? G_BIG_ENDIAN : G_LITTLE_ENDIAN)"];
"1000160" [label="(Literal,16)"];
"1000326" [label="(Call,GST_DEBUG_OBJECT (dec, \"Blue: mask %d, shift %d\",\n      RFB_GET_UINT16 (data + 8), data[12]))"];
"1000329" [label="(Call,RFB_GET_UINT16 (data + 8))"];
"1000238" [label="(Call,GST_WARNING_OBJECT (dec, \"Paletted video not supported\"))"];
"1000222" [label="(Identifier,bpp)"];
"1000221" [label="(Call,bpp != 16)"];
"1000165" [label="(Identifier,rect)"];
"1000115" [label="(Block,)"];
"1000319" [label="(Call,RFB_GET_UINT16 (data + 6))"];
"1000141" [label="(Call,memcmp (data, dec->format.descriptor, 13))"];
"1000231" [label="(Identifier,bpp)"];
"1000310" [label="(Call,data + 4)"];
"1000230" [label="(Literal,\"Bad bpp value: %d\")"];
"1000184" [label="(Call,dec->format.depth = data[1])"];
"1000223" [label="(Literal,16)"];
"1000130" [label="(Call,GST_DEBUG_OBJECT (dec, \"Bad WMVi rect: too short\"))"];
"1000210" [label="(Call,tc = data[3])"];
"1000519" [label="(MethodReturn,RET)"];
"1000300" [label="(Call,data + 8)"];
"1000228" -> "1000227"  [label="AST: "];
"1000228" -> "1000231"  [label="CFG: "];
"1000229" -> "1000228"  [label="AST: "];
"1000230" -> "1000228"  [label="AST: "];
"1000231" -> "1000228"  [label="AST: "];
"1000233" -> "1000228"  [label="CFG: "];
"1000228" -> "1000519"  [label="DDG: "];
"1000228" -> "1000519"  [label="DDG: "];
"1000228" -> "1000519"  [label="DDG: "];
"1000110" -> "1000228"  [label="DDG: "];
"1000224" -> "1000228"  [label="DDG: "];
"1000217" -> "1000228"  [label="DDG: "];
"1000221" -> "1000228"  [label="DDG: "];
"1000110" -> "1000109"  [label="AST: "];
"1000110" -> "1000519"  [label="DDG: "];
"1000110" -> "1000130"  [label="DDG: "];
"1000110" -> "1000174"  [label="DDG: "];
"1000110" -> "1000238"  [label="DDG: "];
"1000110" -> "1000306"  [label="DDG: "];
"1000110" -> "1000316"  [label="DDG: "];
"1000110" -> "1000326"  [label="DDG: "];
"1000110" -> "1000336"  [label="DDG: "];
"1000110" -> "1000399"  [label="DDG: "];
"1000110" -> "1000432"  [label="DDG: "];
"1000110" -> "1000446"  [label="DDG: "];
"1000110" -> "1000454"  [label="DDG: "];
"1000110" -> "1000494"  [label="DDG: "];
"1000224" -> "1000220"  [label="AST: "];
"1000224" -> "1000226"  [label="CFG: "];
"1000225" -> "1000224"  [label="AST: "];
"1000226" -> "1000224"  [label="AST: "];
"1000220" -> "1000224"  [label="CFG: "];
"1000224" -> "1000519"  [label="DDG: "];
"1000224" -> "1000220"  [label="DDG: "];
"1000224" -> "1000220"  [label="DDG: "];
"1000221" -> "1000224"  [label="DDG: "];
"1000224" -> "1000249"  [label="DDG: "];
"1000221" -> "1000220"  [label="AST: "];
"1000221" -> "1000223"  [label="CFG: "];
"1000222" -> "1000221"  [label="AST: "];
"1000223" -> "1000221"  [label="AST: "];
"1000225" -> "1000221"  [label="CFG: "];
"1000220" -> "1000221"  [label="CFG: "];
"1000221" -> "1000519"  [label="DDG: "];
"1000221" -> "1000220"  [label="DDG: "];
"1000221" -> "1000220"  [label="DDG: "];
"1000217" -> "1000221"  [label="DDG: "];
"1000221" -> "1000249"  [label="DDG: "];
"1000217" -> "1000216"  [label="AST: "];
"1000217" -> "1000219"  [label="CFG: "];
"1000218" -> "1000217"  [label="AST: "];
"1000219" -> "1000217"  [label="AST: "];
"1000222" -> "1000217"  [label="CFG: "];
"1000216" -> "1000217"  [label="CFG: "];
"1000217" -> "1000519"  [label="DDG: "];
"1000217" -> "1000216"  [label="DDG: "];
"1000217" -> "1000216"  [label="DDG: "];
"1000179" -> "1000217"  [label="DDG: "];
"1000217" -> "1000249"  [label="DDG: "];
"1000179" -> "1000115"  [label="AST: "];
"1000179" -> "1000181"  [label="CFG: "];
"1000180" -> "1000179"  [label="AST: "];
"1000181" -> "1000179"  [label="AST: "];
"1000187" -> "1000179"  [label="CFG: "];
"1000179" -> "1000519"  [label="DDG: "];
"1000153" -> "1000179"  [label="DDG: "];
"1000112" -> "1000179"  [label="DDG: "];
"1000153" -> "1000115"  [label="AST: "];
"1000153" -> "1000160"  [label="CFG: "];
"1000154" -> "1000153"  [label="AST: "];
"1000159" -> "1000153"  [label="AST: "];
"1000160" -> "1000153"  [label="AST: "];
"1000165" -> "1000153"  [label="CFG: "];
"1000153" -> "1000519"  [label="DDG: "];
"1000153" -> "1000519"  [label="DDG: "];
"1000153" -> "1000519"  [label="DDG: "];
"1000141" -> "1000153"  [label="DDG: "];
"1000141" -> "1000153"  [label="DDG: "];
"1000112" -> "1000153"  [label="DDG: "];
"1000153" -> "1000184"  [label="DDG: "];
"1000153" -> "1000193"  [label="DDG: "];
"1000153" -> "1000210"  [label="DDG: "];
"1000153" -> "1000275"  [label="DDG: "];
"1000153" -> "1000276"  [label="DDG: "];
"1000153" -> "1000272"  [label="DDG: "];
"1000153" -> "1000287"  [label="DDG: "];
"1000153" -> "1000288"  [label="DDG: "];
"1000153" -> "1000284"  [label="DDG: "];
"1000153" -> "1000299"  [label="DDG: "];
"1000153" -> "1000300"  [label="DDG: "];
"1000153" -> "1000296"  [label="DDG: "];
"1000153" -> "1000309"  [label="DDG: "];
"1000153" -> "1000310"  [label="DDG: "];
"1000153" -> "1000306"  [label="DDG: "];
"1000153" -> "1000319"  [label="DDG: "];
"1000153" -> "1000320"  [label="DDG: "];
"1000153" -> "1000316"  [label="DDG: "];
"1000153" -> "1000329"  [label="DDG: "];
"1000153" -> "1000330"  [label="DDG: "];
"1000153" -> "1000326"  [label="DDG: "];
"1000141" -> "1000140"  [label="AST: "];
"1000141" -> "1000148"  [label="CFG: "];
"1000142" -> "1000141"  [label="AST: "];
"1000143" -> "1000141"  [label="AST: "];
"1000148" -> "1000141"  [label="AST: "];
"1000149" -> "1000141"  [label="CFG: "];
"1000141" -> "1000519"  [label="DDG: "];
"1000141" -> "1000519"  [label="DDG: "];
"1000141" -> "1000140"  [label="DDG: "];
"1000141" -> "1000140"  [label="DDG: "];
"1000141" -> "1000140"  [label="DDG: "];
"1000112" -> "1000141"  [label="DDG: "];
"1000112" -> "1000109"  [label="AST: "];
"1000112" -> "1000519"  [label="DDG: "];
"1000112" -> "1000184"  [label="DDG: "];
"1000112" -> "1000193"  [label="DDG: "];
"1000112" -> "1000202"  [label="DDG: "];
"1000112" -> "1000204"  [label="DDG: "];
"1000112" -> "1000210"  [label="DDG: "];
"1000112" -> "1000275"  [label="DDG: "];
"1000112" -> "1000276"  [label="DDG: "];
"1000112" -> "1000272"  [label="DDG: "];
"1000112" -> "1000287"  [label="DDG: "];
"1000112" -> "1000288"  [label="DDG: "];
"1000112" -> "1000284"  [label="DDG: "];
"1000112" -> "1000299"  [label="DDG: "];
"1000112" -> "1000300"  [label="DDG: "];
"1000112" -> "1000296"  [label="DDG: "];
"1000112" -> "1000309"  [label="DDG: "];
"1000112" -> "1000310"  [label="DDG: "];
"1000112" -> "1000306"  [label="DDG: "];
"1000112" -> "1000319"  [label="DDG: "];
"1000112" -> "1000320"  [label="DDG: "];
"1000112" -> "1000316"  [label="DDG: "];
"1000112" -> "1000329"  [label="DDG: "];
"1000112" -> "1000330"  [label="DDG: "];
"1000112" -> "1000326"  [label="DDG: "];
"1000112" -> "1000336"  [label="DDG: "];
"1000112" -> "1000340"  [label="DDG: "];
}
