digraph "0_radare2_bbb4af56003c1afdad67af0c4339267ca38b1017@pointer" {
"1001245" [label="(Call,r_strbuf_setf (&op->esil, \"1,pc,-,0xff,sp,+,=[2],0x%04x,pc,=,2,sp,-=\", op->jump))"];
"1000313" [label="(Call,r_strbuf_init (&op->esil))"];
"1001222" [label="(Call,op->jump = data[1] | data[2] << 8)"];
"1001226" [label="(Call,data[1] | data[2] << 8)"];
"1000267" [label="(MethodParameterIn,const ut8 *data)"];
"1001230" [label="(Call,data[2] << 8)"];
"1001415" [label="(Call,data[0] == 0xa9)"];
"1000662" [label="(Call,_6502_anal_esil_get_addr_pattern1 (op, data, addrbuf, buffsize))"];
"1000992" [label="(Call,_6502_anal_esil_inc_reg (op, data[0], \"-\"))"];
"1001310" [label="(Call,data[2] << 8)"];
"1001063" [label="(Call,data[0] == 0xe0)"];
"1000267" [label="(MethodParameterIn,const ut8 *data)"];
"1000839" [label="(Call,r_strbuf_set (&op->esil, \"1,a,<<,C,|,a,=,$c7,C,=,a,a,=\"))"];
"1001538" [label="(Call,r_strbuf_setf (&op->esil, \"a,%s,=[1]\", addrbuf))"];
"1000532" [label="(Call,r_strbuf_setf (&op->esil, \"%s,a,+=,C,NUM,$c7,C,=,a,+=,$c7,C,|=\", addrbuf))"];
"1001171" [label="(Call,addr + data[1] + op->size)"];
"1001377" [label="(Call,r_strbuf_set (&op->esil, \"0x101,sp,+,[1],flags,=,0x102,sp,+,[2],pc,=,3,sp,+=\"))"];
"1001018" [label="(Call,data[0] == 0xc9)"];
"1001251" [label="(Call,op->jump)"];
"1001223" [label="(Call,op->jump)"];
"1001576" [label="(Call,_6502_anal_esil_get_addr_pattern3 (op, data, addrbuf, buffsize, 'x'))"];
"1000789" [label="(Call,data[0] == 0x4a)"];
"1001076" [label="(Call,r_strbuf_setf (&op->esil, \"%s,[1],x,==\", addrbuf))"];
"1000306" [label="(Call,op->id = data[0])"];
"1000847" [label="(Call,_6502_anal_esil_get_addr_pattern2 (op, data, addrbuf, buffsize, 'x'))"];
"1000716" [label="(Call,r_strbuf_setf (&op->esil, \"%s,a,^=\", addrbuf))"];
"1001428" [label="(Call,r_strbuf_setf (&op->esil, \"%s,[1],a,=\", addrbuf))"];
"1000896" [label="(Call,r_strbuf_setf (&op->esil, \"C,N,=,1,%s,[1],&,C,=,1,%s,[1],>>,7,N,<<,|,%s,=[1]\", addrbuf, addrbuf, addrbuf))"];
"1001420" [label="(Call,r_strbuf_setf (&op->esil, \"%s,a,=\", addrbuf))"];
"1001245" [label="(Call,r_strbuf_setf (&op->esil, \"1,pc,-,0xff,sp,+,=[2],0x%04x,pc,=,2,sp,-=\", op->jump))"];
"1000918" [label="(Call,_6502_anal_esil_get_addr_pattern2 (op, data, addrbuf, buffsize, 'x'))"];
"1001502" [label="(Call,r_strbuf_setf (&op->esil, \"%s,y,=\", addrbuf))"];
"1000833" [label="(Call,data[0] == 0x2a)"];
"1000809" [label="(Call,r_strbuf_setf (&op->esil, \"1,%s,[1],&,C,=,1,%s,[1],>>,%s,=[1]\", addrbuf, addrbuf, addrbuf))"];
"1001560" [label="(Call,r_strbuf_setf (&op->esil, \"x,%s,=[1]\", addrbuf))"];
"1000746" [label="(Call,data[0] == 0x0a)"];
"1001162" [label="(Call,data[1] <= 127)"];
"1001533" [label="(Call,_6502_anal_esil_get_addr_pattern1 (op, data, addrbuf, buffsize))"];
"1000766" [label="(Call,r_strbuf_setf (&op->esil, \"1,%s,[1],<<,%s,=[1],$c7,C,=\", addrbuf, addrbuf))"];
"1001188" [label="(Call,256 - data[1])"];
"1000890" [label="(Call,_6502_anal_esil_get_addr_pattern2 (op, data, addrbuf, buffsize, 'x'))"];
"1001456" [label="(Call,data[0] == 0xa2)"];
"1001023" [label="(Call,r_strbuf_setf (&op->esil, \"%s,a,==\", addrbuf))"];
"1000876" [label="(Call,data[0] == 0x6a)"];
"1000853" [label="(Call,r_strbuf_setf (&op->esil, \"1,%s,[1],<<,C,|,%s,=[1],$c7,C,=\", addrbuf, addrbuf))"];
"1001113" [label="(Call,r_strbuf_setf (&op->esil, \"%s,y,==\", addrbuf))"];
"1001661" [label="(Call,_6502_anal_esil_mov (op, data[0]))"];
"1000455" [label="(Call,r_strbuf_set (&op->esil, \",1,I,=,0,D,=,flags,0x10,|,0x100,sp,+,=[1],pc,1,+,0xfe,sp,+,=[2],3,sp,-=,0xfffe,[2],pc,=\"))"];
"1000269" [label="(Block,)"];
"1000950" [label="(Call,r_strbuf_setf (&op->esil, \"%s,--=[1]\", addrbuf))"];
"1001226" [label="(Call,data[1] | data[2] << 8)"];
"1001068" [label="(Call,r_strbuf_setf (&op->esil, \"%s,x,==\", addrbuf))"];
"1001409" [label="(Call,_6502_anal_esil_get_addr_pattern1 (op, data, addrbuf, buffsize))"];
"1001234" [label="(Literal,8)"];
"1001222" [label="(Call,op->jump = data[1] | data[2] << 8)"];
"1000498" [label="(Call,r_strbuf_setf (&op->esil, \"a,%s,[1],&,0x80,&,!,!,N,=,a,%s,[1],&,0x40,&,!,!,V,=,a,%s,[1],&,0xff,&,!,Z,=\",addrbuf, addrbuf, addrbuf))"];
"1001510" [label="(Call,r_strbuf_setf (&op->esil, \"%s,[1],y,=\", addrbuf))"];
"1001343" [label="(Call,r_strbuf_set (&op->esil, \"0x101,sp,+,[2],pc,=,pc,++=,2,sp,+=\"))"];
"1000527" [label="(Call,data[0] == 0x69)"];
"1001012" [label="(Call,_6502_anal_esil_get_addr_pattern1 (op, data, addrbuf, buffsize))"];
"1000752" [label="(Call,r_strbuf_set (&op->esil, \"1,a,<<=,$c7,C,=,a,a,=\"))"];
"1001612" [label="(Call,_6502_anal_esil_push (op, data[0]))"];
"1001705" [label="(Call,_6502_anal_esil_mov (op, data[0]))"];
"1000630" [label="(Call,r_strbuf_setf (&op->esil, \"%s,a,|=\", addrbuf))"];
"1001582" [label="(Call,r_strbuf_setf (&op->esil, \"y,%s,=[1]\", addrbuf))"];
"1000479" [label="(Call,_6502_anal_esil_flags (op, data[0]))"];
"1001683" [label="(Call,_6502_anal_esil_mov (op, data[0]))"];
"1000576" [label="(Call,data[0] == 0xe9)"];
"1000625" [label="(Call,data[0] == 0x09)"];
"1000492" [label="(Call,_6502_anal_esil_get_addr_pattern3 (op, data, addrbuf, buffsize, 0))"];
"1000673" [label="(Call,r_strbuf_setf (&op->esil, \"%s,a,&=\", addrbuf))"];
"1001227" [label="(Call,data[1])"];
"1001554" [label="(Call,_6502_anal_esil_get_addr_pattern2 (op, data, addrbuf, buffsize, 'y'))"];
"1001254" [label="(ControlStructure,break;)"];
"1000619" [label="(Call,_6502_anal_esil_get_addr_pattern1 (op, data, addrbuf, buffsize))"];
"1001279" [label="(Call,r_strbuf_setf (&op->esil, \"0x%04x,pc,=\", op->jump))"];
"1001108" [label="(Call,data[0] == 0xc0)"];
"1000668" [label="(Call,data[0] == 0x29)"];
"1001641" [label="(Call,_6502_anal_esil_pop (op, data[0]))"];
"1000581" [label="(Call,r_strbuf_setf (&op->esil, \"C,!,%s,+,a,-=\", addrbuf))"];
"1001056" [label="(Call,_6502_anal_esil_get_addr_pattern3 (op, data, addrbuf, buffsize, 0))"];
"1000724" [label="(Call,r_strbuf_setf (&op->esil, \"%s,[1],a,^=\", addrbuf))"];
"1001101" [label="(Call,_6502_anal_esil_get_addr_pattern3 (op, data, addrbuf, buffsize, 0))"];
"1001497" [label="(Call,data[0] == 0xa0)"];
"1001230" [label="(Call,data[2] << 8)"];
"1000570" [label="(Call,_6502_anal_esil_get_addr_pattern1 (op, data, addrbuf, buffsize))"];
"1000540" [label="(Call,r_strbuf_setf (&op->esil, \"%s,[1],a,+=,C,NUM,$c7,C,=,a,+=,$c7,C,|=\", addrbuf))"];
"1000795" [label="(Call,r_strbuf_set (&op->esil, \"1,a,&,C,=,1,a,>>=\"))"];
"1001031" [label="(Call,r_strbuf_setf (&op->esil, \"%s,[1],a,==\", addrbuf))"];
"1001167" [label="(Call,op->jump = addr + data[1] + op->size)"];
"1001274" [label="(Call,data[2] << 8)"];
"1000973" [label="(Call,_6502_anal_esil_inc_reg (op, data[0], \"+\"))"];
"1001461" [label="(Call,r_strbuf_setf (&op->esil, \"%s,x,=\", addrbuf))"];
"1001246" [label="(Call,&op->esil)"];
"1000711" [label="(Call,data[0] == 0x49)"];
"1000320" [label="(Identifier,data)"];
"1001449" [label="(Call,_6502_anal_esil_get_addr_pattern2 (op, data, addrbuf, buffsize, 'y'))"];
"1000681" [label="(Call,r_strbuf_setf (&op->esil, \"%s,[1],a,&=\", addrbuf))"];
"1001300" [label="(Call,r_strbuf_setf (&op->esil, \"0x%04x,[2],pc,=\", data[1] | data[2] << 8))"];
"1000803" [label="(Call,_6502_anal_esil_get_addr_pattern2 (op, data, addrbuf, buffsize, 'x'))"];
"1000944" [label="(Call,_6502_anal_esil_get_addr_pattern2 (op, data, addrbuf, buffsize, 'x'))"];
"1001205" [label="(Call,_6502_anal_esil_ccall (op, data[0]))"];
"1001715" [label="(MethodReturn,static int)"];
"1000589" [label="(Call,r_strbuf_setf (&op->esil, \"C,!,%s,[1],+,a,-=\", addrbuf))"];
"1001237" [label="(Identifier,op)"];
"1001250" [label="(Literal,\"1,pc,-,0xff,sp,+,=[2],0x%04x,pc,=,2,sp,-=\")"];
"1001469" [label="(Call,r_strbuf_setf (&op->esil, \"%s,[1],x,=\", addrbuf))"];
"1000882" [label="(Call,r_strbuf_set (&op->esil, \"C,N,=,1,a,&,C,=,1,a,>>,7,N,<<,|,a,=\"))"];
"1000521" [label="(Call,_6502_anal_esil_get_addr_pattern1 (op, data, addrbuf, buffsize))"];
"1000924" [label="(Call,r_strbuf_setf (&op->esil, \"%s,++=[1]\", addrbuf))"];
"1001306" [label="(Call,data[1] | data[2] << 8)"];
"1001490" [label="(Call,_6502_anal_esil_get_addr_pattern3 (op, data, addrbuf, buffsize, 'x'))"];
"1001121" [label="(Call,r_strbuf_setf (&op->esil, \"%s,[1],y,==\", addrbuf))"];
"1001231" [label="(Call,data[2])"];
"1000760" [label="(Call,_6502_anal_esil_get_addr_pattern2 (op, data, addrbuf, buffsize, 'x'))"];
"1000705" [label="(Call,_6502_anal_esil_get_addr_pattern1 (op, data, addrbuf, buffsize))"];
"1000314" [label="(Call,&op->esil)"];
"1000322" [label="(Block,)"];
"1000313" [label="(Call,r_strbuf_init (&op->esil))"];
"1001173" [label="(Call,data[1] + op->size)"];
"1001270" [label="(Call,data[1] | data[2] << 8)"];
"1000638" [label="(Call,r_strbuf_setf (&op->esil, \"%s,[1],a,|=\", addrbuf))"];
"1001245" -> "1000322"  [label="AST: "];
"1001245" -> "1001251"  [label="CFG: "];
"1001246" -> "1001245"  [label="AST: "];
"1001250" -> "1001245"  [label="AST: "];
"1001251" -> "1001245"  [label="AST: "];
"1001254" -> "1001245"  [label="CFG: "];
"1001245" -> "1001715"  [label="DDG: "];
"1001245" -> "1001715"  [label="DDG: "];
"1001245" -> "1001715"  [label="DDG: "];
"1000313" -> "1001245"  [label="DDG: "];
"1001222" -> "1001245"  [label="DDG: "];
"1000313" -> "1000269"  [label="AST: "];
"1000313" -> "1000314"  [label="CFG: "];
"1000314" -> "1000313"  [label="AST: "];
"1000320" -> "1000313"  [label="CFG: "];
"1000313" -> "1001715"  [label="DDG: "];
"1000313" -> "1001715"  [label="DDG: "];
"1000313" -> "1000455"  [label="DDG: "];
"1000313" -> "1000498"  [label="DDG: "];
"1000313" -> "1000532"  [label="DDG: "];
"1000313" -> "1000540"  [label="DDG: "];
"1000313" -> "1000581"  [label="DDG: "];
"1000313" -> "1000589"  [label="DDG: "];
"1000313" -> "1000630"  [label="DDG: "];
"1000313" -> "1000638"  [label="DDG: "];
"1000313" -> "1000673"  [label="DDG: "];
"1000313" -> "1000681"  [label="DDG: "];
"1000313" -> "1000716"  [label="DDG: "];
"1000313" -> "1000724"  [label="DDG: "];
"1000313" -> "1000752"  [label="DDG: "];
"1000313" -> "1000766"  [label="DDG: "];
"1000313" -> "1000795"  [label="DDG: "];
"1000313" -> "1000809"  [label="DDG: "];
"1000313" -> "1000839"  [label="DDG: "];
"1000313" -> "1000853"  [label="DDG: "];
"1000313" -> "1000882"  [label="DDG: "];
"1000313" -> "1000896"  [label="DDG: "];
"1000313" -> "1000924"  [label="DDG: "];
"1000313" -> "1000950"  [label="DDG: "];
"1000313" -> "1001023"  [label="DDG: "];
"1000313" -> "1001031"  [label="DDG: "];
"1000313" -> "1001068"  [label="DDG: "];
"1000313" -> "1001076"  [label="DDG: "];
"1000313" -> "1001113"  [label="DDG: "];
"1000313" -> "1001121"  [label="DDG: "];
"1000313" -> "1001279"  [label="DDG: "];
"1000313" -> "1001300"  [label="DDG: "];
"1000313" -> "1001343"  [label="DDG: "];
"1000313" -> "1001377"  [label="DDG: "];
"1000313" -> "1001420"  [label="DDG: "];
"1000313" -> "1001428"  [label="DDG: "];
"1000313" -> "1001461"  [label="DDG: "];
"1000313" -> "1001469"  [label="DDG: "];
"1000313" -> "1001502"  [label="DDG: "];
"1000313" -> "1001510"  [label="DDG: "];
"1000313" -> "1001538"  [label="DDG: "];
"1000313" -> "1001560"  [label="DDG: "];
"1000313" -> "1001582"  [label="DDG: "];
"1001222" -> "1000322"  [label="AST: "];
"1001222" -> "1001226"  [label="CFG: "];
"1001223" -> "1001222"  [label="AST: "];
"1001226" -> "1001222"  [label="AST: "];
"1001237" -> "1001222"  [label="CFG: "];
"1001222" -> "1001715"  [label="DDG: "];
"1001226" -> "1001222"  [label="DDG: "];
"1001226" -> "1001222"  [label="DDG: "];
"1001226" -> "1001230"  [label="CFG: "];
"1001227" -> "1001226"  [label="AST: "];
"1001230" -> "1001226"  [label="AST: "];
"1001226" -> "1001715"  [label="DDG: "];
"1001226" -> "1001715"  [label="DDG: "];
"1000267" -> "1001226"  [label="DDG: "];
"1001230" -> "1001226"  [label="DDG: "];
"1001230" -> "1001226"  [label="DDG: "];
"1000267" -> "1000263"  [label="AST: "];
"1000267" -> "1001715"  [label="DDG: "];
"1000267" -> "1000306"  [label="DDG: "];
"1000267" -> "1000479"  [label="DDG: "];
"1000267" -> "1000492"  [label="DDG: "];
"1000267" -> "1000521"  [label="DDG: "];
"1000267" -> "1000527"  [label="DDG: "];
"1000267" -> "1000570"  [label="DDG: "];
"1000267" -> "1000576"  [label="DDG: "];
"1000267" -> "1000619"  [label="DDG: "];
"1000267" -> "1000625"  [label="DDG: "];
"1000267" -> "1000662"  [label="DDG: "];
"1000267" -> "1000668"  [label="DDG: "];
"1000267" -> "1000705"  [label="DDG: "];
"1000267" -> "1000711"  [label="DDG: "];
"1000267" -> "1000746"  [label="DDG: "];
"1000267" -> "1000760"  [label="DDG: "];
"1000267" -> "1000789"  [label="DDG: "];
"1000267" -> "1000803"  [label="DDG: "];
"1000267" -> "1000833"  [label="DDG: "];
"1000267" -> "1000847"  [label="DDG: "];
"1000267" -> "1000876"  [label="DDG: "];
"1000267" -> "1000890"  [label="DDG: "];
"1000267" -> "1000918"  [label="DDG: "];
"1000267" -> "1000944"  [label="DDG: "];
"1000267" -> "1000973"  [label="DDG: "];
"1000267" -> "1000992"  [label="DDG: "];
"1000267" -> "1001012"  [label="DDG: "];
"1000267" -> "1001018"  [label="DDG: "];
"1000267" -> "1001056"  [label="DDG: "];
"1000267" -> "1001063"  [label="DDG: "];
"1000267" -> "1001101"  [label="DDG: "];
"1000267" -> "1001108"  [label="DDG: "];
"1000267" -> "1001162"  [label="DDG: "];
"1000267" -> "1001167"  [label="DDG: "];
"1000267" -> "1001171"  [label="DDG: "];
"1000267" -> "1001173"  [label="DDG: "];
"1000267" -> "1001188"  [label="DDG: "];
"1000267" -> "1001205"  [label="DDG: "];
"1000267" -> "1001230"  [label="DDG: "];
"1000267" -> "1001270"  [label="DDG: "];
"1000267" -> "1001274"  [label="DDG: "];
"1000267" -> "1001306"  [label="DDG: "];
"1000267" -> "1001310"  [label="DDG: "];
"1000267" -> "1001409"  [label="DDG: "];
"1000267" -> "1001415"  [label="DDG: "];
"1000267" -> "1001449"  [label="DDG: "];
"1000267" -> "1001456"  [label="DDG: "];
"1000267" -> "1001490"  [label="DDG: "];
"1000267" -> "1001497"  [label="DDG: "];
"1000267" -> "1001533"  [label="DDG: "];
"1000267" -> "1001554"  [label="DDG: "];
"1000267" -> "1001576"  [label="DDG: "];
"1000267" -> "1001612"  [label="DDG: "];
"1000267" -> "1001641"  [label="DDG: "];
"1000267" -> "1001661"  [label="DDG: "];
"1000267" -> "1001683"  [label="DDG: "];
"1000267" -> "1001705"  [label="DDG: "];
"1001230" -> "1001234"  [label="CFG: "];
"1001231" -> "1001230"  [label="AST: "];
"1001234" -> "1001230"  [label="AST: "];
"1001230" -> "1001715"  [label="DDG: "];
}
