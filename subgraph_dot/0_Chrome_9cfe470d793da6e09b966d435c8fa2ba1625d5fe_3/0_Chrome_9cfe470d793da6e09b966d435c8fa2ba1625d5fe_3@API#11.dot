digraph "0_Chrome_9cfe470d793da6e09b966d435c8fa2ba1625d5fe_3@API" {
"1000153" [label="(Call,updated_target_info =\n        GenerateUpdatedTargetInfo(IsMicEnabled(), IsEpaEnabled(),\n                                  channel_bindings, spn, av_pairs, &timestamp))"];
"1000155" [label="(Call,GenerateUpdatedTargetInfo(IsMicEnabled(), IsEpaEnabled(),\n                                  channel_bindings, spn, av_pairs, &timestamp))"];
"1000105" [label="(MethodParameterIn,const std::string& channel_bindings)"];
"1000106" [label="(MethodParameterIn,const std::string& spn)"];
"1000186" [label="(Call,GenerateNtlmProofV2(v2_hash, server_challenge,\n                        base::make_span<kProofInputLenV2>(v2_proof_input),\n                         updated_target_info, v2_proof))"];
"1000196" [label="(Call,GenerateSessionBaseKeyV2(v2_hash, v2_proof, v2_session_key))"];
"1000303" [label="(Call,WriteResponsePayloadsV2(&authenticate_writer, lm_response, v2_proof,\n                                v2_proof_input, updated_target_info))"];
"1000301" [label="(Call,writer_result =\n        WriteResponsePayloadsV2(&authenticate_writer, lm_response, v2_proof,\n                                v2_proof_input, updated_target_info))"];
"1000329" [label="(Call,DCHECK(writer_result))"];
"1000338" [label="(Call,WriteStringPayloads(&authenticate_writer, is_unicode, domain,\n                                      username, hostname))"];
"1000336" [label="(Call,writer_result = WriteStringPayloads(&authenticate_writer, is_unicode, domain,\n                                      username, hostname))"];
"1000345" [label="(Call,DCHECK(writer_result))"];
"1000365" [label="(Call,GenerateMicV2(v2_session_key, negotiate_message_, server_challenge_message,\n                  auth_msg, mic))"];
"1000371" [label="(Return,return auth_msg;)"];
"1000160" [label="(Identifier,av_pairs)"];
"1000300" [label="(Block,)"];
"1000240" [label="(Call,CalculatePayloadLayout(is_unicode, domain, username, hostname,\n                         updated_target_info.size(), &lm_info, &ntlm_info,\n                         &domain_info, &username_info, &hostname_info,\n                         &session_key_info, &authenticate_message_len))"];
"1000324" [label="(Call,WriteResponsePayloads(&authenticate_writer, lm_response, ntlm_response))"];
"1000157" [label="(Call,IsEpaEnabled())"];
"1000219" [label="(Identifier,authenticate_flags)"];
"1000198" [label="(Identifier,v2_proof)"];
"1000104" [label="(MethodParameterIn,const std::string& hostname)"];
"1000197" [label="(Identifier,v2_hash)"];
"1000373" [label="(MethodReturn,std::vector<uint8_t>)"];
"1000370" [label="(Identifier,mic)"];
"1000156" [label="(Call,IsMicEnabled())"];
"1000158" [label="(Identifier,channel_bindings)"];
"1000163" [label="(Call,memset(lm_response, 0, kResponseLenV1))"];
"1000191" [label="(Call,kProofInputLenV2>(v2_proof_input))"];
"1000302" [label="(Identifier,writer_result)"];
"1000371" [label="(Return,return auth_msg;)"];
"1000187" [label="(Identifier,v2_hash)"];
"1000161" [label="(Call,&timestamp)"];
"1000365" [label="(Call,GenerateMicV2(v2_session_key, negotiate_message_, server_challenge_message,\n                  auth_msg, mic))"];
"1000155" [label="(Call,GenerateUpdatedTargetInfo(IsMicEnabled(), IsEpaEnabled(),\n                                  channel_bindings, spn, av_pairs, &timestamp))"];
"1000303" [label="(Call,WriteResponsePayloadsV2(&authenticate_writer, lm_response, v2_proof,\n                                v2_proof_input, updated_target_info))"];
"1000194" [label="(Identifier,updated_target_info)"];
"1000176" [label="(Call,GenerateNtlmHashV2(domain, username, password, v2_hash))"];
"1000199" [label="(Identifier,v2_session_key)"];
"1000204" [label="(Call,ParseChallengeMessage(server_challenge_message, &challenge_flags,\n                               server_challenge))"];
"1000189" [label="(Call,base::make_span<kProofInputLenV2>(v2_proof_input))"];
"1000211" [label="(Call,GenerateResponsesV1WithSessionSecurity(password, server_challenge,\n                                           client_challenge, lm_response,\n                                           ntlm_response))"];
"1000109" [label="(MethodParameterIn,base::span<const uint8_t> server_challenge_message)"];
"1000339" [label="(Call,&authenticate_writer)"];
"1000143" [label="(Call,ParseChallengeMessageV2(server_challenge_message, &challenge_flags,\n                                 server_challenge, &av_pairs))"];
"1000309" [label="(Identifier,updated_target_info)"];
"1000188" [label="(Identifier,server_challenge)"];
"1000358" [label="(Block,)"];
"1000367" [label="(Identifier,negotiate_message_)"];
"1000154" [label="(Identifier,updated_target_info)"];
"1000264" [label="(Call,WriteAuthenticateMessage(\n      &authenticate_writer, lm_info, ntlm_info, domain_info, username_info,\n      hostname_info, session_key_info, authenticate_flags))"];
"1000338" [label="(Call,WriteStringPayloads(&authenticate_writer, is_unicode, domain,\n                                      username, hostname))"];
"1000330" [label="(Identifier,writer_result)"];
"1000348" [label="(Call,authenticate_writer.IsEndOfBuffer())"];
"1000329" [label="(Call,DCHECK(writer_result))"];
"1000196" [label="(Call,GenerateSessionBaseKeyV2(v2_hash, v2_proof, v2_session_key))"];
"1000159" [label="(Identifier,spn)"];
"1000304" [label="(Call,&authenticate_writer)"];
"1000322" [label="(Call,writer_result =\n        WriteResponsePayloads(&authenticate_writer, lm_response, ntlm_response))"];
"1000345" [label="(Call,DCHECK(writer_result))"];
"1000110" [label="(Block,)"];
"1000366" [label="(Identifier,v2_session_key)"];
"1000102" [label="(MethodParameterIn,const base::string16& username)"];
"1000164" [label="(Identifier,lm_response)"];
"1000372" [label="(Identifier,auth_msg)"];
"1000307" [label="(Identifier,v2_proof)"];
"1000195" [label="(Identifier,v2_proof)"];
"1000341" [label="(Identifier,is_unicode)"];
"1000344" [label="(Identifier,hostname)"];
"1000346" [label="(Identifier,writer_result)"];
"1000369" [label="(Identifier,auth_msg)"];
"1000301" [label="(Call,writer_result =\n        WriteResponsePayloadsV2(&authenticate_writer, lm_response, v2_proof,\n                                v2_proof_input, updated_target_info))"];
"1000186" [label="(Call,GenerateNtlmProofV2(v2_hash, server_challenge,\n                        base::make_span<kProofInputLenV2>(v2_proof_input),\n                         updated_target_info, v2_proof))"];
"1000343" [label="(Identifier,username)"];
"1000153" [label="(Call,updated_target_info =\n        GenerateUpdatedTargetInfo(IsMicEnabled(), IsEpaEnabled(),\n                                  channel_bindings, spn, av_pairs, &timestamp))"];
"1000308" [label="(Identifier,v2_proof_input)"];
"1000337" [label="(Identifier,writer_result)"];
"1000105" [label="(MethodParameterIn,const std::string& channel_bindings)"];
"1000101" [label="(MethodParameterIn,const base::string16& domain)"];
"1000139" [label="(Block,)"];
"1000336" [label="(Call,writer_result = WriteStringPayloads(&authenticate_writer, is_unicode, domain,\n                                      username, hostname))"];
"1000332" [label="(Call,authenticate_writer.GetCursor())"];
"1000106" [label="(MethodParameterIn,const std::string& spn)"];
"1000353" [label="(Call,auth_msg = authenticate_writer.Pass())"];
"1000306" [label="(Identifier,lm_response)"];
"1000342" [label="(Identifier,domain)"];
"1000368" [label="(Identifier,server_challenge_message)"];
"1000153" -> "1000139"  [label="AST: "];
"1000153" -> "1000155"  [label="CFG: "];
"1000154" -> "1000153"  [label="AST: "];
"1000155" -> "1000153"  [label="AST: "];
"1000164" -> "1000153"  [label="CFG: "];
"1000153" -> "1000373"  [label="DDG: GenerateUpdatedTargetInfo(IsMicEnabled(), IsEpaEnabled(),\n                                  channel_bindings, spn, av_pairs, &timestamp)"];
"1000155" -> "1000153"  [label="DDG: channel_bindings"];
"1000155" -> "1000153"  [label="DDG: av_pairs"];
"1000155" -> "1000153"  [label="DDG: &timestamp"];
"1000155" -> "1000153"  [label="DDG: IsMicEnabled()"];
"1000155" -> "1000153"  [label="DDG: spn"];
"1000155" -> "1000153"  [label="DDG: IsEpaEnabled()"];
"1000153" -> "1000186"  [label="DDG: updated_target_info"];
"1000155" -> "1000161"  [label="CFG: "];
"1000156" -> "1000155"  [label="AST: "];
"1000157" -> "1000155"  [label="AST: "];
"1000158" -> "1000155"  [label="AST: "];
"1000159" -> "1000155"  [label="AST: "];
"1000160" -> "1000155"  [label="AST: "];
"1000161" -> "1000155"  [label="AST: "];
"1000155" -> "1000373"  [label="DDG: spn"];
"1000155" -> "1000373"  [label="DDG: IsEpaEnabled()"];
"1000155" -> "1000373"  [label="DDG: av_pairs"];
"1000155" -> "1000373"  [label="DDG: channel_bindings"];
"1000155" -> "1000373"  [label="DDG: &timestamp"];
"1000105" -> "1000155"  [label="DDG: channel_bindings"];
"1000106" -> "1000155"  [label="DDG: spn"];
"1000105" -> "1000100"  [label="AST: "];
"1000105" -> "1000373"  [label="DDG: channel_bindings"];
"1000106" -> "1000100"  [label="AST: "];
"1000106" -> "1000373"  [label="DDG: spn"];
"1000186" -> "1000139"  [label="AST: "];
"1000186" -> "1000195"  [label="CFG: "];
"1000187" -> "1000186"  [label="AST: "];
"1000188" -> "1000186"  [label="AST: "];
"1000189" -> "1000186"  [label="AST: "];
"1000194" -> "1000186"  [label="AST: "];
"1000195" -> "1000186"  [label="AST: "];
"1000197" -> "1000186"  [label="CFG: "];
"1000186" -> "1000373"  [label="DDG: server_challenge"];
"1000186" -> "1000373"  [label="DDG: GenerateNtlmProofV2(v2_hash, server_challenge,\n                        base::make_span<kProofInputLenV2>(v2_proof_input),\n                         updated_target_info, v2_proof)"];
"1000186" -> "1000373"  [label="DDG: updated_target_info"];
"1000186" -> "1000373"  [label="DDG: base::make_span<kProofInputLenV2>(v2_proof_input)"];
"1000176" -> "1000186"  [label="DDG: v2_hash"];
"1000143" -> "1000186"  [label="DDG: server_challenge"];
"1000189" -> "1000186"  [label="DDG: base::make_span"];
"1000189" -> "1000186"  [label="DDG: kProofInputLenV2>(v2_proof_input)"];
"1000186" -> "1000196"  [label="DDG: v2_hash"];
"1000186" -> "1000196"  [label="DDG: v2_proof"];
"1000186" -> "1000303"  [label="DDG: updated_target_info"];
"1000196" -> "1000139"  [label="AST: "];
"1000196" -> "1000199"  [label="CFG: "];
"1000197" -> "1000196"  [label="AST: "];
"1000198" -> "1000196"  [label="AST: "];
"1000199" -> "1000196"  [label="AST: "];
"1000219" -> "1000196"  [label="CFG: "];
"1000196" -> "1000373"  [label="DDG: v2_hash"];
"1000196" -> "1000373"  [label="DDG: v2_session_key"];
"1000196" -> "1000373"  [label="DDG: GenerateSessionBaseKeyV2(v2_hash, v2_proof, v2_session_key)"];
"1000196" -> "1000373"  [label="DDG: v2_proof"];
"1000196" -> "1000303"  [label="DDG: v2_proof"];
"1000196" -> "1000365"  [label="DDG: v2_session_key"];
"1000303" -> "1000301"  [label="AST: "];
"1000303" -> "1000309"  [label="CFG: "];
"1000304" -> "1000303"  [label="AST: "];
"1000306" -> "1000303"  [label="AST: "];
"1000307" -> "1000303"  [label="AST: "];
"1000308" -> "1000303"  [label="AST: "];
"1000309" -> "1000303"  [label="AST: "];
"1000301" -> "1000303"  [label="CFG: "];
"1000303" -> "1000373"  [label="DDG: updated_target_info"];
"1000303" -> "1000373"  [label="DDG: v2_proof"];
"1000303" -> "1000373"  [label="DDG: lm_response"];
"1000303" -> "1000373"  [label="DDG: v2_proof_input"];
"1000303" -> "1000301"  [label="DDG: updated_target_info"];
"1000303" -> "1000301"  [label="DDG: v2_proof_input"];
"1000303" -> "1000301"  [label="DDG: lm_response"];
"1000303" -> "1000301"  [label="DDG: v2_proof"];
"1000303" -> "1000301"  [label="DDG: &authenticate_writer"];
"1000264" -> "1000303"  [label="DDG: &authenticate_writer"];
"1000163" -> "1000303"  [label="DDG: lm_response"];
"1000211" -> "1000303"  [label="DDG: lm_response"];
"1000191" -> "1000303"  [label="DDG: v2_proof_input"];
"1000303" -> "1000338"  [label="DDG: &authenticate_writer"];
"1000301" -> "1000300"  [label="AST: "];
"1000302" -> "1000301"  [label="AST: "];
"1000330" -> "1000301"  [label="CFG: "];
"1000301" -> "1000373"  [label="DDG: WriteResponsePayloadsV2(&authenticate_writer, lm_response, v2_proof,\n                                v2_proof_input, updated_target_info)"];
"1000301" -> "1000329"  [label="DDG: writer_result"];
"1000329" -> "1000110"  [label="AST: "];
"1000329" -> "1000330"  [label="CFG: "];
"1000330" -> "1000329"  [label="AST: "];
"1000332" -> "1000329"  [label="CFG: "];
"1000322" -> "1000329"  [label="DDG: writer_result"];
"1000338" -> "1000336"  [label="AST: "];
"1000338" -> "1000344"  [label="CFG: "];
"1000339" -> "1000338"  [label="AST: "];
"1000341" -> "1000338"  [label="AST: "];
"1000342" -> "1000338"  [label="AST: "];
"1000343" -> "1000338"  [label="AST: "];
"1000344" -> "1000338"  [label="AST: "];
"1000336" -> "1000338"  [label="CFG: "];
"1000338" -> "1000373"  [label="DDG: &authenticate_writer"];
"1000338" -> "1000373"  [label="DDG: hostname"];
"1000338" -> "1000373"  [label="DDG: username"];
"1000338" -> "1000373"  [label="DDG: domain"];
"1000338" -> "1000373"  [label="DDG: is_unicode"];
"1000338" -> "1000336"  [label="DDG: username"];
"1000338" -> "1000336"  [label="DDG: &authenticate_writer"];
"1000338" -> "1000336"  [label="DDG: is_unicode"];
"1000338" -> "1000336"  [label="DDG: domain"];
"1000338" -> "1000336"  [label="DDG: hostname"];
"1000324" -> "1000338"  [label="DDG: &authenticate_writer"];
"1000240" -> "1000338"  [label="DDG: is_unicode"];
"1000240" -> "1000338"  [label="DDG: domain"];
"1000240" -> "1000338"  [label="DDG: username"];
"1000240" -> "1000338"  [label="DDG: hostname"];
"1000101" -> "1000338"  [label="DDG: domain"];
"1000102" -> "1000338"  [label="DDG: username"];
"1000104" -> "1000338"  [label="DDG: hostname"];
"1000336" -> "1000110"  [label="AST: "];
"1000337" -> "1000336"  [label="AST: "];
"1000346" -> "1000336"  [label="CFG: "];
"1000336" -> "1000373"  [label="DDG: WriteStringPayloads(&authenticate_writer, is_unicode, domain,\n                                      username, hostname)"];
"1000336" -> "1000345"  [label="DDG: writer_result"];
"1000345" -> "1000110"  [label="AST: "];
"1000345" -> "1000346"  [label="CFG: "];
"1000346" -> "1000345"  [label="AST: "];
"1000348" -> "1000345"  [label="CFG: "];
"1000345" -> "1000373"  [label="DDG: writer_result"];
"1000345" -> "1000373"  [label="DDG: DCHECK(writer_result)"];
"1000365" -> "1000358"  [label="AST: "];
"1000365" -> "1000370"  [label="CFG: "];
"1000366" -> "1000365"  [label="AST: "];
"1000367" -> "1000365"  [label="AST: "];
"1000368" -> "1000365"  [label="AST: "];
"1000369" -> "1000365"  [label="AST: "];
"1000370" -> "1000365"  [label="AST: "];
"1000372" -> "1000365"  [label="CFG: "];
"1000365" -> "1000373"  [label="DDG: auth_msg"];
"1000365" -> "1000373"  [label="DDG: GenerateMicV2(v2_session_key, negotiate_message_, server_challenge_message,\n                  auth_msg, mic)"];
"1000365" -> "1000373"  [label="DDG: mic"];
"1000365" -> "1000373"  [label="DDG: server_challenge_message"];
"1000365" -> "1000373"  [label="DDG: negotiate_message_"];
"1000365" -> "1000373"  [label="DDG: v2_session_key"];
"1000143" -> "1000365"  [label="DDG: server_challenge_message"];
"1000204" -> "1000365"  [label="DDG: server_challenge_message"];
"1000109" -> "1000365"  [label="DDG: server_challenge_message"];
"1000353" -> "1000365"  [label="DDG: auth_msg"];
"1000365" -> "1000371"  [label="DDG: auth_msg"];
"1000371" -> "1000110"  [label="AST: "];
"1000371" -> "1000372"  [label="CFG: "];
"1000372" -> "1000371"  [label="AST: "];
"1000373" -> "1000371"  [label="CFG: "];
"1000371" -> "1000373"  [label="DDG: <RET>"];
"1000372" -> "1000371"  [label="DDG: auth_msg"];
"1000353" -> "1000371"  [label="DDG: auth_msg"];
}
