digraph "0_openssl_6ce9687b5aba5391fc0de50e18779eb676d0e04d@pointer" {
"1000375" [label="(Call,s->version=SSL3_VERSION)"];
"1000689" [label="(Call,s->version <= TLS_MAX_VERSION)"];
"1000688" [label="(Call,OPENSSL_assert(s->version <= TLS_MAX_VERSION))"];
"1000697" [label="(Call,s->version < TLS1_VERSION)"];
"1000695" [label="(Call,FIPS_mode() && (s->version < TLS1_VERSION))"];
"1001071" [label="(Call,ssl23_get_server_method(s->version))"];
"1001067" [label="(Call,s->method = ssl23_get_server_method(s->version))"];
"1001076" [label="(Call,s->method == NULL)"];
"1001108" [label="(Call,s->s3->rbuf.buf == NULL)"];
"1001122" [label="(Call,s->packet= &(s->s3->rbuf.buf[0]))"];
"1001136" [label="(Call,memcpy(s->packet,buf,n))"];
"1001142" [label="(Call,s->s3->rbuf.left=n)"];
"1001226" [label="(Call,buf != buf_space)"];
"1001229" [label="(Call,OPENSSL_free(buf))"];
"1001236" [label="(Call,buf != buf_space)"];
"1001239" [label="(Call,OPENSSL_free(buf))"];
"1001107" [label="(ControlStructure,if (s->s3->rbuf.buf == NULL))"];
"1001240" [label="(Identifier,buf)"];
"1000704" [label="(Identifier,SSL_F_SSL23_GET_CLIENT_HELLO)"];
"1000375" [label="(Call,s->version=SSL3_VERSION)"];
"1000571" [label="(Call,s->version=TLS1_VERSION)"];
"1000695" [label="(Call,FIPS_mode() && (s->version < TLS1_VERSION))"];
"1001136" [label="(Call,memcpy(s->packet,buf,n))"];
"1000312" [label="(Call,s->version=TLS1_2_VERSION)"];
"1000337" [label="(Call,s->version=TLS1_1_VERSION)"];
"1001116" [label="(Identifier,NULL)"];
"1001122" [label="(Call,s->packet= &(s->s3->rbuf.buf[0]))"];
"1001126" [label="(Call,&(s->s3->rbuf.buf[0]))"];
"1001123" [label="(Call,s->packet)"];
"1001141" [label="(Identifier,n)"];
"1000623" [label="(Call,s->version=TLS1_VERSION)"];
"1001228" [label="(Identifier,buf_space)"];
"1001071" [label="(Call,ssl23_get_server_method(s->version))"];
"1001076" [label="(Call,s->method == NULL)"];
"1000688" [label="(Call,OPENSSL_assert(s->version <= TLS_MAX_VERSION))"];
"1001089" [label="(Identifier,s)"];
"1001243" [label="(Literal,1)"];
"1001075" [label="(ControlStructure,if (s->method == NULL))"];
"1000588" [label="(Call,s->version=SSL3_VERSION)"];
"1000698" [label="(Call,s->version)"];
"1001236" [label="(Call,buf != buf_space)"];
"1001226" [label="(Call,buf != buf_space)"];
"1000696" [label="(Call,FIPS_mode())"];
"1001225" [label="(ControlStructure,if (buf != buf_space))"];
"1000693" [label="(Identifier,TLS_MAX_VERSION)"];
"1001068" [label="(Call,s->method)"];
"1001083" [label="(Identifier,SSL_F_SSL23_GET_CLIENT_HELLO)"];
"1001244" [label="(MethodReturn,int)"];
"1001066" [label="(Block,)"];
"1000382" [label="(Identifier,s)"];
"1001124" [label="(Identifier,s)"];
"1001235" [label="(ControlStructure,if (buf != buf_space))"];
"1000694" [label="(ControlStructure,if (FIPS_mode() && (s->version < TLS1_VERSION)))"];
"1000379" [label="(Identifier,SSL3_VERSION)"];
"1001137" [label="(Call,s->packet)"];
"1001077" [label="(Call,s->method)"];
"1001237" [label="(Identifier,buf)"];
"1000710" [label="(Identifier,s)"];
"1001078" [label="(Identifier,s)"];
"1001155" [label="(Identifier,s)"];
"1001238" [label="(Identifier,buf_space)"];
"1000701" [label="(Identifier,TLS1_VERSION)"];
"1001120" [label="(Identifier,s)"];
"1000152" [label="(Call,*buf= &(buf_space[0]))"];
"1001142" [label="(Call,s->s3->rbuf.left=n)"];
"1001230" [label="(Identifier,buf)"];
"1001229" [label="(Call,OPENSSL_free(buf))"];
"1000215" [label="(Call,memcpy(buf,p,n))"];
"1001233" [label="(Identifier,s)"];
"1001146" [label="(Identifier,s)"];
"1001096" [label="(Block,)"];
"1000689" [label="(Call,s->version <= TLS_MAX_VERSION)"];
"1000606" [label="(Call,s->version=SSL3_VERSION)"];
"1000406" [label="(Call,s->version=SSL3_VERSION)"];
"1000554" [label="(Call,s->version=TLS1_1_VERSION)"];
"1001140" [label="(Identifier,buf)"];
"1001067" [label="(Call,s->method = ssl23_get_server_method(s->version))"];
"1001080" [label="(Identifier,NULL)"];
"1000761" [label="(Call,n < 9)"];
"1001143" [label="(Call,s->s3->rbuf.left)"];
"1001239" [label="(Call,OPENSSL_free(buf))"];
"1000167" [label="(Call,n=0)"];
"1000697" [label="(Call,s->version < TLS1_VERSION)"];
"1001109" [label="(Call,s->s3->rbuf.buf)"];
"1001138" [label="(Identifier,s)"];
"1001227" [label="(Identifier,buf)"];
"1000690" [label="(Call,s->version)"];
"1000356" [label="(Call,s->version=TLS1_VERSION)"];
"1000149" [label="(Block,)"];
"1001108" [label="(Call,s->s3->rbuf.buf == NULL)"];
"1000374" [label="(Block,)"];
"1000376" [label="(Call,s->version)"];
"1001150" [label="(Identifier,n)"];
"1001072" [label="(Call,s->version)"];
"1000531" [label="(Call,s->version=TLS1_2_VERSION)"];
"1000375" -> "1000374"  [label="AST: "];
"1000375" -> "1000379"  [label="CFG: "];
"1000376" -> "1000375"  [label="AST: "];
"1000379" -> "1000375"  [label="AST: "];
"1000382" -> "1000375"  [label="CFG: "];
"1000375" -> "1001244"  [label="DDG: SSL3_VERSION"];
"1000375" -> "1000689"  [label="DDG: s->version"];
"1000689" -> "1000688"  [label="AST: "];
"1000689" -> "1000693"  [label="CFG: "];
"1000690" -> "1000689"  [label="AST: "];
"1000693" -> "1000689"  [label="AST: "];
"1000688" -> "1000689"  [label="CFG: "];
"1000689" -> "1001244"  [label="DDG: TLS_MAX_VERSION"];
"1000689" -> "1001244"  [label="DDG: s->version"];
"1000689" -> "1000688"  [label="DDG: s->version"];
"1000689" -> "1000688"  [label="DDG: TLS_MAX_VERSION"];
"1000606" -> "1000689"  [label="DDG: s->version"];
"1000588" -> "1000689"  [label="DDG: s->version"];
"1000356" -> "1000689"  [label="DDG: s->version"];
"1000312" -> "1000689"  [label="DDG: s->version"];
"1000406" -> "1000689"  [label="DDG: s->version"];
"1000623" -> "1000689"  [label="DDG: s->version"];
"1000554" -> "1000689"  [label="DDG: s->version"];
"1000337" -> "1000689"  [label="DDG: s->version"];
"1000571" -> "1000689"  [label="DDG: s->version"];
"1000531" -> "1000689"  [label="DDG: s->version"];
"1000689" -> "1000697"  [label="DDG: s->version"];
"1000689" -> "1001071"  [label="DDG: s->version"];
"1000688" -> "1000149"  [label="AST: "];
"1000696" -> "1000688"  [label="CFG: "];
"1000688" -> "1001244"  [label="DDG: s->version <= TLS_MAX_VERSION"];
"1000688" -> "1001244"  [label="DDG: OPENSSL_assert(s->version <= TLS_MAX_VERSION)"];
"1000697" -> "1000695"  [label="AST: "];
"1000697" -> "1000701"  [label="CFG: "];
"1000698" -> "1000697"  [label="AST: "];
"1000701" -> "1000697"  [label="AST: "];
"1000695" -> "1000697"  [label="CFG: "];
"1000697" -> "1001244"  [label="DDG: TLS1_VERSION"];
"1000697" -> "1001244"  [label="DDG: s->version"];
"1000697" -> "1000695"  [label="DDG: s->version"];
"1000697" -> "1000695"  [label="DDG: TLS1_VERSION"];
"1000697" -> "1001071"  [label="DDG: s->version"];
"1000695" -> "1000694"  [label="AST: "];
"1000695" -> "1000696"  [label="CFG: "];
"1000696" -> "1000695"  [label="AST: "];
"1000704" -> "1000695"  [label="CFG: "];
"1000710" -> "1000695"  [label="CFG: "];
"1000695" -> "1001244"  [label="DDG: FIPS_mode() && (s->version < TLS1_VERSION)"];
"1000695" -> "1001244"  [label="DDG: FIPS_mode()"];
"1000695" -> "1001244"  [label="DDG: s->version < TLS1_VERSION"];
"1001071" -> "1001067"  [label="AST: "];
"1001071" -> "1001072"  [label="CFG: "];
"1001072" -> "1001071"  [label="AST: "];
"1001067" -> "1001071"  [label="CFG: "];
"1001071" -> "1001244"  [label="DDG: s->version"];
"1001071" -> "1001067"  [label="DDG: s->version"];
"1001067" -> "1001066"  [label="AST: "];
"1001068" -> "1001067"  [label="AST: "];
"1001078" -> "1001067"  [label="CFG: "];
"1001067" -> "1001244"  [label="DDG: ssl23_get_server_method(s->version)"];
"1001067" -> "1001076"  [label="DDG: s->method"];
"1001076" -> "1001075"  [label="AST: "];
"1001076" -> "1001080"  [label="CFG: "];
"1001077" -> "1001076"  [label="AST: "];
"1001080" -> "1001076"  [label="AST: "];
"1001083" -> "1001076"  [label="CFG: "];
"1001089" -> "1001076"  [label="CFG: "];
"1001076" -> "1001244"  [label="DDG: NULL"];
"1001076" -> "1001244"  [label="DDG: s->method"];
"1001076" -> "1001244"  [label="DDG: s->method == NULL"];
"1001076" -> "1001108"  [label="DDG: NULL"];
"1001108" -> "1001107"  [label="AST: "];
"1001108" -> "1001116"  [label="CFG: "];
"1001109" -> "1001108"  [label="AST: "];
"1001116" -> "1001108"  [label="AST: "];
"1001120" -> "1001108"  [label="CFG: "];
"1001124" -> "1001108"  [label="CFG: "];
"1001108" -> "1001244"  [label="DDG: s->s3->rbuf.buf == NULL"];
"1001108" -> "1001244"  [label="DDG: s->s3->rbuf.buf"];
"1001108" -> "1001244"  [label="DDG: NULL"];
"1001108" -> "1001122"  [label="DDG: s->s3->rbuf.buf"];
"1001122" -> "1001096"  [label="AST: "];
"1001122" -> "1001126"  [label="CFG: "];
"1001123" -> "1001122"  [label="AST: "];
"1001126" -> "1001122"  [label="AST: "];
"1001138" -> "1001122"  [label="CFG: "];
"1001122" -> "1001244"  [label="DDG: &(s->s3->rbuf.buf[0])"];
"1001122" -> "1001136"  [label="DDG: s->packet"];
"1001136" -> "1001096"  [label="AST: "];
"1001136" -> "1001141"  [label="CFG: "];
"1001137" -> "1001136"  [label="AST: "];
"1001140" -> "1001136"  [label="AST: "];
"1001141" -> "1001136"  [label="AST: "];
"1001146" -> "1001136"  [label="CFG: "];
"1001136" -> "1001244"  [label="DDG: s->packet"];
"1001136" -> "1001244"  [label="DDG: memcpy(s->packet,buf,n)"];
"1000215" -> "1001136"  [label="DDG: buf"];
"1000215" -> "1001136"  [label="DDG: n"];
"1000152" -> "1001136"  [label="DDG: buf"];
"1000167" -> "1001136"  [label="DDG: n"];
"1000761" -> "1001136"  [label="DDG: n"];
"1001136" -> "1001142"  [label="DDG: n"];
"1001136" -> "1001226"  [label="DDG: buf"];
"1001136" -> "1001236"  [label="DDG: buf"];
"1001142" -> "1001096"  [label="AST: "];
"1001142" -> "1001150"  [label="CFG: "];
"1001143" -> "1001142"  [label="AST: "];
"1001150" -> "1001142"  [label="AST: "];
"1001155" -> "1001142"  [label="CFG: "];
"1001142" -> "1001244"  [label="DDG: n"];
"1001142" -> "1001244"  [label="DDG: s->s3->rbuf.left"];
"1001226" -> "1001225"  [label="AST: "];
"1001226" -> "1001228"  [label="CFG: "];
"1001227" -> "1001226"  [label="AST: "];
"1001228" -> "1001226"  [label="AST: "];
"1001230" -> "1001226"  [label="CFG: "];
"1001233" -> "1001226"  [label="CFG: "];
"1001226" -> "1001244"  [label="DDG: buf_space"];
"1001226" -> "1001244"  [label="DDG: buf"];
"1001226" -> "1001244"  [label="DDG: buf != buf_space"];
"1000215" -> "1001226"  [label="DDG: buf"];
"1000152" -> "1001226"  [label="DDG: buf"];
"1001226" -> "1001229"  [label="DDG: buf"];
"1001229" -> "1001225"  [label="AST: "];
"1001229" -> "1001230"  [label="CFG: "];
"1001230" -> "1001229"  [label="AST: "];
"1001233" -> "1001229"  [label="CFG: "];
"1001229" -> "1001244"  [label="DDG: OPENSSL_free(buf)"];
"1001229" -> "1001244"  [label="DDG: buf"];
"1001236" -> "1001235"  [label="AST: "];
"1001236" -> "1001238"  [label="CFG: "];
"1001237" -> "1001236"  [label="AST: "];
"1001238" -> "1001236"  [label="AST: "];
"1001240" -> "1001236"  [label="CFG: "];
"1001243" -> "1001236"  [label="CFG: "];
"1001236" -> "1001244"  [label="DDG: buf_space"];
"1001236" -> "1001244"  [label="DDG: buf"];
"1001236" -> "1001244"  [label="DDG: buf != buf_space"];
"1000215" -> "1001236"  [label="DDG: buf"];
"1000152" -> "1001236"  [label="DDG: buf"];
"1001236" -> "1001239"  [label="DDG: buf"];
"1001239" -> "1001235"  [label="AST: "];
"1001239" -> "1001240"  [label="CFG: "];
"1001240" -> "1001239"  [label="AST: "];
"1001243" -> "1001239"  [label="CFG: "];
"1001239" -> "1001244"  [label="DDG: OPENSSL_free(buf)"];
"1001239" -> "1001244"  [label="DDG: buf"];
}
