digraph "1_linux_da99466ac243f15fbba65bd261bfc75ffa1532b6@del" {
"1000120" [label="(Call,g->head <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000121" [label="(Call,g->head <= 0)"];
"1000126" [label="(Call,(unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000127" [label="(Call,(unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0)"];
"1000128" [label="(Call,(unsigned char)((g->sect << 2) >> FD_SIZECODE(g)))"];
"1000130" [label="(Call,(g->sect << 2) >> FD_SIZECODE(g))"];
"1000131" [label="(Call,g->sect << 2)"];
"1000115" [label="(Call,g->sect <= 0)"];
"1000136" [label="(Call,FD_SIZECODE(g))"];
"1000107" [label="(MethodParameterIn,struct floppy_struct *g)"];
"1000139" [label="(Call,g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000140" [label="(Call,g->track <= 0)"];
"1000145" [label="(Call,g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000146" [label="(Call,g->track > UDP->tracks >> STRETCH(g))"];
"1000150" [label="(Call,UDP->tracks >> STRETCH(g))"];
"1000154" [label="(Call,STRETCH(g))"];
"1000156" [label="(Call,(g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000157" [label="(Call,g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK))"];
"1000161" [label="(Call,~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK))"];
"1000162" [label="(Call,FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000164" [label="(Call,FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000114" [label="(Call,g->sect <= 0 ||\n\t    g->head <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000145" [label="(Call,g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000131" [label="(Call,g->sect << 2)"];
"1000115" [label="(Call,g->sect <= 0)"];
"1000377" [label="(Call,FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000163" [label="(Identifier,FD_STRETCH)"];
"1000120" [label="(Call,g->head <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000128" [label="(Call,(unsigned char)((g->sect << 2) >> FD_SIZECODE(g)))"];
"1000130" [label="(Call,(g->sect << 2) >> FD_SIZECODE(g))"];
"1000170" [label="(Identifier,EINVAL)"];
"1000121" [label="(Call,g->head <= 0)"];
"1000162" [label="(Call,FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000138" [label="(Literal,0)"];
"1000132" [label="(Call,g->sect)"];
"1000123" [label="(Identifier,g)"];
"1000107" [label="(MethodParameterIn,struct floppy_struct *g)"];
"1000172" [label="(Identifier,type)"];
"1000150" [label="(Call,UDP->tracks >> STRETCH(g))"];
"1000114" [label="(Call,g->sect <= 0 ||\n\t    g->head <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000119" [label="(Literal,0)"];
"1000144" [label="(Literal,0)"];
"1000125" [label="(Literal,0)"];
"1000122" [label="(Call,g->head)"];
"1000140" [label="(Call,g->track <= 0)"];
"1000151" [label="(Call,UDP->tracks)"];
"1000147" [label="(Call,g->track)"];
"1000136" [label="(Call,FD_SIZECODE(g))"];
"1000161" [label="(Call,~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK))"];
"1000156" [label="(Call,(g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000299" [label="(Call,oldStretch = g->stretch)"];
"1000164" [label="(Call,FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000167" [label="(Literal,0)"];
"1000166" [label="(Identifier,FD_SECTBASEMASK)"];
"1000137" [label="(Identifier,g)"];
"1000116" [label="(Call,g->sect)"];
"1000141" [label="(Call,g->track)"];
"1000386" [label="(MethodReturn,static int)"];
"1000142" [label="(Identifier,g)"];
"1000154" [label="(Call,STRETCH(g))"];
"1000127" [label="(Call,(unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0)"];
"1000139" [label="(Call,g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000135" [label="(Literal,2)"];
"1000148" [label="(Identifier,g)"];
"1000126" [label="(Call,(unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000113" [label="(ControlStructure,if (g->sect <= 0 ||\n\t    g->head <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0))"];
"1000146" [label="(Call,g->track > UDP->tracks >> STRETCH(g))"];
"1000159" [label="(Identifier,g)"];
"1000157" [label="(Call,g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK))"];
"1000158" [label="(Call,g->stretch)"];
"1000155" [label="(Identifier,g)"];
"1000165" [label="(Identifier,FD_SWAPSIDES)"];
"1000120" -> "1000114"  [label="AST: "];
"1000120" -> "1000121"  [label="CFG: "];
"1000120" -> "1000126"  [label="CFG: "];
"1000121" -> "1000120"  [label="AST: "];
"1000126" -> "1000120"  [label="AST: "];
"1000114" -> "1000120"  [label="CFG: "];
"1000120" -> "1000386"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000120" -> "1000386"  [label="DDG: g->head <= 0"];
"1000120" -> "1000114"  [label="DDG: g->head <= 0"];
"1000120" -> "1000114"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000121" -> "1000120"  [label="DDG: g->head"];
"1000121" -> "1000120"  [label="DDG: 0"];
"1000126" -> "1000120"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0"];
"1000126" -> "1000120"  [label="DDG: g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000121" -> "1000125"  [label="CFG: "];
"1000122" -> "1000121"  [label="AST: "];
"1000125" -> "1000121"  [label="AST: "];
"1000129" -> "1000121"  [label="CFG: "];
"1000121" -> "1000386"  [label="DDG: g->head"];
"1000126" -> "1000127"  [label="CFG: "];
"1000126" -> "1000139"  [label="CFG: "];
"1000127" -> "1000126"  [label="AST: "];
"1000139" -> "1000126"  [label="AST: "];
"1000126" -> "1000386"  [label="DDG: g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000126" -> "1000386"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0"];
"1000127" -> "1000126"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g))"];
"1000127" -> "1000126"  [label="DDG: 0"];
"1000139" -> "1000126"  [label="DDG: g->track <= 0"];
"1000139" -> "1000126"  [label="DDG: g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000127" -> "1000138"  [label="CFG: "];
"1000128" -> "1000127"  [label="AST: "];
"1000138" -> "1000127"  [label="AST: "];
"1000142" -> "1000127"  [label="CFG: "];
"1000127" -> "1000386"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g))"];
"1000128" -> "1000127"  [label="DDG: (g->sect << 2) >> FD_SIZECODE(g)"];
"1000128" -> "1000130"  [label="CFG: "];
"1000129" -> "1000128"  [label="AST: "];
"1000130" -> "1000128"  [label="AST: "];
"1000138" -> "1000128"  [label="CFG: "];
"1000128" -> "1000386"  [label="DDG: (g->sect << 2) >> FD_SIZECODE(g)"];
"1000130" -> "1000128"  [label="DDG: g->sect << 2"];
"1000130" -> "1000128"  [label="DDG: FD_SIZECODE(g)"];
"1000130" -> "1000136"  [label="CFG: "];
"1000131" -> "1000130"  [label="AST: "];
"1000136" -> "1000130"  [label="AST: "];
"1000130" -> "1000386"  [label="DDG: FD_SIZECODE(g)"];
"1000130" -> "1000386"  [label="DDG: g->sect << 2"];
"1000131" -> "1000130"  [label="DDG: g->sect"];
"1000131" -> "1000130"  [label="DDG: 2"];
"1000136" -> "1000130"  [label="DDG: g"];
"1000131" -> "1000135"  [label="CFG: "];
"1000132" -> "1000131"  [label="AST: "];
"1000135" -> "1000131"  [label="AST: "];
"1000137" -> "1000131"  [label="CFG: "];
"1000131" -> "1000386"  [label="DDG: g->sect"];
"1000115" -> "1000131"  [label="DDG: g->sect"];
"1000115" -> "1000114"  [label="AST: "];
"1000115" -> "1000119"  [label="CFG: "];
"1000116" -> "1000115"  [label="AST: "];
"1000119" -> "1000115"  [label="AST: "];
"1000123" -> "1000115"  [label="CFG: "];
"1000114" -> "1000115"  [label="CFG: "];
"1000115" -> "1000386"  [label="DDG: g->sect"];
"1000115" -> "1000114"  [label="DDG: g->sect"];
"1000115" -> "1000114"  [label="DDG: 0"];
"1000136" -> "1000137"  [label="CFG: "];
"1000137" -> "1000136"  [label="AST: "];
"1000136" -> "1000386"  [label="DDG: g"];
"1000107" -> "1000136"  [label="DDG: g"];
"1000136" -> "1000154"  [label="DDG: g"];
"1000107" -> "1000105"  [label="AST: "];
"1000107" -> "1000386"  [label="DDG: g"];
"1000107" -> "1000154"  [label="DDG: g"];
"1000139" -> "1000140"  [label="CFG: "];
"1000139" -> "1000145"  [label="CFG: "];
"1000140" -> "1000139"  [label="AST: "];
"1000145" -> "1000139"  [label="AST: "];
"1000139" -> "1000386"  [label="DDG: g->track <= 0"];
"1000139" -> "1000386"  [label="DDG: g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000140" -> "1000139"  [label="DDG: g->track"];
"1000140" -> "1000139"  [label="DDG: 0"];
"1000145" -> "1000139"  [label="DDG: g->track > UDP->tracks >> STRETCH(g)"];
"1000145" -> "1000139"  [label="DDG: (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000140" -> "1000144"  [label="CFG: "];
"1000141" -> "1000140"  [label="AST: "];
"1000144" -> "1000140"  [label="AST: "];
"1000148" -> "1000140"  [label="CFG: "];
"1000140" -> "1000386"  [label="DDG: g->track"];
"1000140" -> "1000146"  [label="DDG: g->track"];
"1000145" -> "1000146"  [label="CFG: "];
"1000145" -> "1000156"  [label="CFG: "];
"1000146" -> "1000145"  [label="AST: "];
"1000156" -> "1000145"  [label="AST: "];
"1000145" -> "1000386"  [label="DDG: (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000145" -> "1000386"  [label="DDG: g->track > UDP->tracks >> STRETCH(g)"];
"1000146" -> "1000145"  [label="DDG: g->track"];
"1000146" -> "1000145"  [label="DDG: UDP->tracks >> STRETCH(g)"];
"1000156" -> "1000145"  [label="DDG: g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000156" -> "1000145"  [label="DDG: 0"];
"1000146" -> "1000150"  [label="CFG: "];
"1000147" -> "1000146"  [label="AST: "];
"1000150" -> "1000146"  [label="AST: "];
"1000159" -> "1000146"  [label="CFG: "];
"1000146" -> "1000386"  [label="DDG: UDP->tracks >> STRETCH(g)"];
"1000146" -> "1000386"  [label="DDG: g->track"];
"1000150" -> "1000146"  [label="DDG: UDP->tracks"];
"1000150" -> "1000146"  [label="DDG: STRETCH(g)"];
"1000150" -> "1000154"  [label="CFG: "];
"1000151" -> "1000150"  [label="AST: "];
"1000154" -> "1000150"  [label="AST: "];
"1000150" -> "1000386"  [label="DDG: UDP->tracks"];
"1000150" -> "1000386"  [label="DDG: STRETCH(g)"];
"1000154" -> "1000150"  [label="DDG: g"];
"1000154" -> "1000155"  [label="CFG: "];
"1000155" -> "1000154"  [label="AST: "];
"1000154" -> "1000386"  [label="DDG: g"];
"1000156" -> "1000167"  [label="CFG: "];
"1000157" -> "1000156"  [label="AST: "];
"1000167" -> "1000156"  [label="AST: "];
"1000156" -> "1000386"  [label="DDG: g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000157" -> "1000156"  [label="DDG: g->stretch"];
"1000157" -> "1000156"  [label="DDG: ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000157" -> "1000161"  [label="CFG: "];
"1000158" -> "1000157"  [label="AST: "];
"1000161" -> "1000157"  [label="AST: "];
"1000167" -> "1000157"  [label="CFG: "];
"1000157" -> "1000386"  [label="DDG: g->stretch"];
"1000157" -> "1000386"  [label="DDG: ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000161" -> "1000157"  [label="DDG: FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK"];
"1000157" -> "1000299"  [label="DDG: g->stretch"];
"1000161" -> "1000162"  [label="CFG: "];
"1000162" -> "1000161"  [label="AST: "];
"1000161" -> "1000386"  [label="DDG: FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK"];
"1000162" -> "1000161"  [label="DDG: FD_STRETCH"];
"1000162" -> "1000161"  [label="DDG: FD_SWAPSIDES | FD_SECTBASEMASK"];
"1000162" -> "1000164"  [label="CFG: "];
"1000163" -> "1000162"  [label="AST: "];
"1000164" -> "1000162"  [label="AST: "];
"1000162" -> "1000386"  [label="DDG: FD_SWAPSIDES | FD_SECTBASEMASK"];
"1000162" -> "1000386"  [label="DDG: FD_STRETCH"];
"1000164" -> "1000162"  [label="DDG: FD_SWAPSIDES"];
"1000164" -> "1000162"  [label="DDG: FD_SECTBASEMASK"];
"1000164" -> "1000166"  [label="CFG: "];
"1000165" -> "1000164"  [label="AST: "];
"1000166" -> "1000164"  [label="AST: "];
"1000164" -> "1000386"  [label="DDG: FD_SECTBASEMASK"];
"1000164" -> "1000386"  [label="DDG: FD_SWAPSIDES"];
"1000164" -> "1000377"  [label="DDG: FD_SWAPSIDES"];
"1000164" -> "1000377"  [label="DDG: FD_SECTBASEMASK"];
"1000114" -> "1000113"  [label="AST: "];
"1000170" -> "1000114"  [label="CFG: "];
"1000172" -> "1000114"  [label="CFG: "];
"1000114" -> "1000386"  [label="DDG: g->sect <= 0 ||\n\t    g->head <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000114" -> "1000386"  [label="DDG: g->sect <= 0"];
"1000114" -> "1000386"  [label="DDG: g->head <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
}
