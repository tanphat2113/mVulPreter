digraph "0_linux_da99466ac243f15fbba65bd261bfc75ffa1532b6@pointer" {
"1000140" [label="(Call,g->track <= 0)"];
"1000139" [label="(Call,g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000126" [label="(Call,(unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000120" [label="(Call,g->head <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000114" [label="(Call,g->sect <= 0 ||\n\t    g->head <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000146" [label="(Call,g->track > UDP->tracks >> STRETCH(g))"];
"1000145" [label="(Call,g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000113" [label="(ControlStructure,if (g->sect <= 0 ||\n\t    g->head <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0))"];
"1000146" [label="(Call,g->track > UDP->tracks >> STRETCH(g))"];
"1000145" [label="(Call,g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000386" [label="(MethodReturn,static int)"];
"1000172" [label="(Identifier,type)"];
"1000140" [label="(Call,g->track <= 0)"];
"1000115" [label="(Call,g->sect <= 0)"];
"1000170" [label="(Identifier,EINVAL)"];
"1000150" [label="(Call,UDP->tracks >> STRETCH(g))"];
"1000144" [label="(Literal,0)"];
"1000147" [label="(Call,g->track)"];
"1000114" [label="(Call,g->sect <= 0 ||\n\t    g->head <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000126" [label="(Call,(unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000127" [label="(Call,(unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0)"];
"1000148" [label="(Identifier,g)"];
"1000159" [label="(Identifier,g)"];
"1000120" [label="(Call,g->head <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000156" [label="(Call,(g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000141" [label="(Call,g->track)"];
"1000139" [label="(Call,g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0)"];
"1000121" [label="(Call,g->head <= 0)"];
"1000140" -> "1000139"  [label="AST: "];
"1000140" -> "1000144"  [label="CFG: "];
"1000141" -> "1000140"  [label="AST: "];
"1000144" -> "1000140"  [label="AST: "];
"1000148" -> "1000140"  [label="CFG: "];
"1000139" -> "1000140"  [label="CFG: "];
"1000140" -> "1000386"  [label="DDG: g->track"];
"1000140" -> "1000139"  [label="DDG: g->track"];
"1000140" -> "1000139"  [label="DDG: 0"];
"1000140" -> "1000146"  [label="DDG: g->track"];
"1000139" -> "1000126"  [label="AST: "];
"1000139" -> "1000145"  [label="CFG: "];
"1000145" -> "1000139"  [label="AST: "];
"1000126" -> "1000139"  [label="CFG: "];
"1000139" -> "1000386"  [label="DDG: g->track <= 0"];
"1000139" -> "1000386"  [label="DDG: g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000139" -> "1000126"  [label="DDG: g->track <= 0"];
"1000139" -> "1000126"  [label="DDG: g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000145" -> "1000139"  [label="DDG: g->track > UDP->tracks >> STRETCH(g)"];
"1000145" -> "1000139"  [label="DDG: (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000126" -> "1000120"  [label="AST: "];
"1000126" -> "1000127"  [label="CFG: "];
"1000127" -> "1000126"  [label="AST: "];
"1000120" -> "1000126"  [label="CFG: "];
"1000126" -> "1000386"  [label="DDG: g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000126" -> "1000386"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0"];
"1000126" -> "1000120"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0"];
"1000126" -> "1000120"  [label="DDG: g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000127" -> "1000126"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g))"];
"1000127" -> "1000126"  [label="DDG: 0"];
"1000120" -> "1000114"  [label="AST: "];
"1000120" -> "1000121"  [label="CFG: "];
"1000121" -> "1000120"  [label="AST: "];
"1000114" -> "1000120"  [label="CFG: "];
"1000120" -> "1000386"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000120" -> "1000386"  [label="DDG: g->head <= 0"];
"1000120" -> "1000114"  [label="DDG: g->head <= 0"];
"1000120" -> "1000114"  [label="DDG: (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000121" -> "1000120"  [label="DDG: g->head"];
"1000121" -> "1000120"  [label="DDG: 0"];
"1000114" -> "1000113"  [label="AST: "];
"1000114" -> "1000115"  [label="CFG: "];
"1000115" -> "1000114"  [label="AST: "];
"1000170" -> "1000114"  [label="CFG: "];
"1000172" -> "1000114"  [label="CFG: "];
"1000114" -> "1000386"  [label="DDG: g->sect <= 0 ||\n\t    g->head <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000114" -> "1000386"  [label="DDG: g->sect <= 0"];
"1000114" -> "1000386"  [label="DDG: g->head <= 0 ||\n \t    /* check for zero in F_SECT_PER_TRACK */\n \t    (unsigned char)((g->sect << 2) >> FD_SIZECODE(g)) == 0 ||\n \t    g->track <= 0 || g->track > UDP->tracks >> STRETCH(g) ||\n\t    /* check if reserved bits are set */\n\t    (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000115" -> "1000114"  [label="DDG: g->sect"];
"1000115" -> "1000114"  [label="DDG: 0"];
"1000146" -> "1000145"  [label="AST: "];
"1000146" -> "1000150"  [label="CFG: "];
"1000147" -> "1000146"  [label="AST: "];
"1000150" -> "1000146"  [label="AST: "];
"1000159" -> "1000146"  [label="CFG: "];
"1000145" -> "1000146"  [label="CFG: "];
"1000146" -> "1000386"  [label="DDG: UDP->tracks >> STRETCH(g)"];
"1000146" -> "1000386"  [label="DDG: g->track"];
"1000146" -> "1000145"  [label="DDG: g->track"];
"1000146" -> "1000145"  [label="DDG: UDP->tracks >> STRETCH(g)"];
"1000150" -> "1000146"  [label="DDG: UDP->tracks"];
"1000150" -> "1000146"  [label="DDG: STRETCH(g)"];
"1000145" -> "1000156"  [label="CFG: "];
"1000156" -> "1000145"  [label="AST: "];
"1000145" -> "1000386"  [label="DDG: (g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)) != 0"];
"1000145" -> "1000386"  [label="DDG: g->track > UDP->tracks >> STRETCH(g)"];
"1000156" -> "1000145"  [label="DDG: g->stretch & ~(FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK)"];
"1000156" -> "1000145"  [label="DDG: 0"];
}
