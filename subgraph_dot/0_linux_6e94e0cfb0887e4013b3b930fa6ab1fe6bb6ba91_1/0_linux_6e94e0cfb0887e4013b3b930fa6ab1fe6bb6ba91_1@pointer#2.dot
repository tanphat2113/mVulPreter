digraph "0_linux_6e94e0cfb0887e4013b3b930fa6ab1fe6bb6ba91_1@pointer" {
"1000251" [label="(Call,xt_compat_target_offset(target))"];
"1000223" [label="(Call,IS_ERR(target))"];
"1000204" [label="(Call,target = xt_request_find_target(NFPROTO_IPV4, t->u.user.name,\n\t\t\t\t\tt->u.user.revision))"];
"1000206" [label="(Call,xt_request_find_target(NFPROTO_IPV4, t->u.user.name,\n\t\t\t\t\tt->u.user.revision))"];
"1000249" [label="(Call,off += xt_compat_target_offset(target))"];
"1000253" [label="(Call,*size += off)"];
"1000259" [label="(Call,xt_compat_add_offset(AF_INET, entry_offset, off))"];
"1000257" [label="(Call,ret = xt_compat_add_offset(AF_INET, entry_offset, off))"];
"1000360" [label="(Return,return ret;)"];
"1000169" [label="(Call,entry_offset = (void *)e - (void *)base)"];
"1000264" [label="(Identifier,ret)"];
"1000227" [label="(Literal,\"check_compat_entry_size_and_hooks: `%s' not found\n\")"];
"1000194" [label="(Call,ret != 0)"];
"1000255" [label="(Identifier,size)"];
"1000257" [label="(Call,ret = xt_compat_add_offset(AF_INET, entry_offset, off))"];
"1000262" [label="(Identifier,off)"];
"1000256" [label="(Identifier,off)"];
"1000205" [label="(Identifier,target)"];
"1000361" [label="(Identifier,ret)"];
"1000226" [label="(Call,duprintf(\"check_compat_entry_size_and_hooks: `%s' not found\n\",\n\t\t\t t->u.user.name))"];
"1000222" [label="(ControlStructure,if (IS_ERR(target)))"];
"1000240" [label="(Call,t->u.kernel.target = target)"];
"1000261" [label="(Identifier,entry_offset)"];
"1000235" [label="(Call,ret = PTR_ERR(target))"];
"1000162" [label="(Call,off = sizeof(struct ipt_entry) - sizeof(struct compat_ipt_entry))"];
"1000251" [label="(Call,xt_compat_target_offset(target))"];
"1000254" [label="(Call,*size)"];
"1000259" [label="(Call,xt_compat_add_offset(AF_INET, entry_offset, off))"];
"1000237" [label="(Call,PTR_ERR(target))"];
"1000208" [label="(Call,t->u.user.name)"];
"1000253" [label="(Call,*size += off)"];
"1000223" [label="(Call,IS_ERR(target))"];
"1000252" [label="(Identifier,target)"];
"1000250" [label="(Identifier,off)"];
"1000362" [label="(MethodReturn,RET)"];
"1000206" [label="(Call,xt_request_find_target(NFPROTO_IPV4, t->u.user.name,\n\t\t\t\t\tt->u.user.revision))"];
"1000244" [label="(Identifier,t)"];
"1000224" [label="(Identifier,target)"];
"1000258" [label="(Identifier,ret)"];
"1000260" [label="(Identifier,AF_INET)"];
"1000207" [label="(Identifier,NFPROTO_IPV4)"];
"1000249" [label="(Call,off += xt_compat_target_offset(target))"];
"1000204" [label="(Call,target = xt_request_find_target(NFPROTO_IPV4, t->u.user.name,\n\t\t\t\t\tt->u.user.revision))"];
"1000215" [label="(Call,t->u.user.revision)"];
"1000112" [label="(Block,)"];
"1000360" [label="(Return,return ret;)"];
"1000251" -> "1000249"  [label="AST: "];
"1000251" -> "1000252"  [label="CFG: "];
"1000252" -> "1000251"  [label="AST: "];
"1000249" -> "1000251"  [label="CFG: "];
"1000251" -> "1000362"  [label="DDG: target"];
"1000251" -> "1000249"  [label="DDG: target"];
"1000223" -> "1000251"  [label="DDG: target"];
"1000223" -> "1000222"  [label="AST: "];
"1000223" -> "1000224"  [label="CFG: "];
"1000224" -> "1000223"  [label="AST: "];
"1000227" -> "1000223"  [label="CFG: "];
"1000244" -> "1000223"  [label="CFG: "];
"1000223" -> "1000362"  [label="DDG: IS_ERR(target)"];
"1000204" -> "1000223"  [label="DDG: target"];
"1000223" -> "1000237"  [label="DDG: target"];
"1000223" -> "1000240"  [label="DDG: target"];
"1000204" -> "1000112"  [label="AST: "];
"1000204" -> "1000206"  [label="CFG: "];
"1000205" -> "1000204"  [label="AST: "];
"1000206" -> "1000204"  [label="AST: "];
"1000224" -> "1000204"  [label="CFG: "];
"1000204" -> "1000362"  [label="DDG: xt_request_find_target(NFPROTO_IPV4, t->u.user.name,\n\t\t\t\t\tt->u.user.revision)"];
"1000206" -> "1000204"  [label="DDG: NFPROTO_IPV4"];
"1000206" -> "1000204"  [label="DDG: t->u.user.name"];
"1000206" -> "1000204"  [label="DDG: t->u.user.revision"];
"1000206" -> "1000215"  [label="CFG: "];
"1000207" -> "1000206"  [label="AST: "];
"1000208" -> "1000206"  [label="AST: "];
"1000215" -> "1000206"  [label="AST: "];
"1000206" -> "1000362"  [label="DDG: t->u.user.name"];
"1000206" -> "1000362"  [label="DDG: NFPROTO_IPV4"];
"1000206" -> "1000362"  [label="DDG: t->u.user.revision"];
"1000206" -> "1000226"  [label="DDG: t->u.user.name"];
"1000249" -> "1000112"  [label="AST: "];
"1000250" -> "1000249"  [label="AST: "];
"1000255" -> "1000249"  [label="CFG: "];
"1000249" -> "1000362"  [label="DDG: xt_compat_target_offset(target)"];
"1000162" -> "1000249"  [label="DDG: off"];
"1000249" -> "1000253"  [label="DDG: off"];
"1000249" -> "1000259"  [label="DDG: off"];
"1000253" -> "1000112"  [label="AST: "];
"1000253" -> "1000256"  [label="CFG: "];
"1000254" -> "1000253"  [label="AST: "];
"1000256" -> "1000253"  [label="AST: "];
"1000258" -> "1000253"  [label="CFG: "];
"1000253" -> "1000362"  [label="DDG: *size"];
"1000259" -> "1000257"  [label="AST: "];
"1000259" -> "1000262"  [label="CFG: "];
"1000260" -> "1000259"  [label="AST: "];
"1000261" -> "1000259"  [label="AST: "];
"1000262" -> "1000259"  [label="AST: "];
"1000257" -> "1000259"  [label="CFG: "];
"1000259" -> "1000362"  [label="DDG: AF_INET"];
"1000259" -> "1000362"  [label="DDG: off"];
"1000259" -> "1000362"  [label="DDG: entry_offset"];
"1000259" -> "1000257"  [label="DDG: AF_INET"];
"1000259" -> "1000257"  [label="DDG: entry_offset"];
"1000259" -> "1000257"  [label="DDG: off"];
"1000169" -> "1000259"  [label="DDG: entry_offset"];
"1000257" -> "1000112"  [label="AST: "];
"1000258" -> "1000257"  [label="AST: "];
"1000264" -> "1000257"  [label="CFG: "];
"1000257" -> "1000362"  [label="DDG: xt_compat_add_offset(AF_INET, entry_offset, off)"];
"1000257" -> "1000362"  [label="DDG: ret"];
"1000257" -> "1000360"  [label="DDG: ret"];
"1000360" -> "1000112"  [label="AST: "];
"1000360" -> "1000361"  [label="CFG: "];
"1000361" -> "1000360"  [label="AST: "];
"1000362" -> "1000360"  [label="CFG: "];
"1000360" -> "1000362"  [label="DDG: <RET>"];
"1000361" -> "1000360"  [label="DDG: ret"];
"1000235" -> "1000360"  [label="DDG: ret"];
"1000194" -> "1000360"  [label="DDG: ret"];
}
