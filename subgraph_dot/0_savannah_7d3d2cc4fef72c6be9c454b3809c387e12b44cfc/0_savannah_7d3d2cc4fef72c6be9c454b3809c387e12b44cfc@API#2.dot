digraph "0_savannah_7d3d2cc4fef72c6be9c454b3809c387e12b44cfc@API" {
"1000888" [label="(Call,op = cff_op_rmoveto)"];
"1000940" [label="(Call,op == cff_op_unknown)"];
"1000612" [label="(Call,op = cff_op_unknown)"];
"1001059" [label="(Call,op == cff_op_hstem)"];
"1000619" [label="(Call,op = cff_op_hstem)"];
"1000694" [label="(Call,op = cff_op_hstem)"];
"1001064" [label="(Call,op == cff_op_vstem)"];
"1000624" [label="(Call,op = cff_op_vstem)"];
"1000689" [label="(Call,op = cff_op_vstem)"];
"1001069" [label="(Call,op == cff_op_hstemhm)"];
"1000873" [label="(Call,op = cff_op_hstemhm)"];
"1001081" [label="(Call,op == cff_op_hstem)"];
"1001080" [label="(Call,op == cff_op_hstem || op == cff_op_hstemhm)"];
"1001076" [label="(Call,hinter->stems( hinter->hints,\n                           ( op == cff_op_hstem || op == cff_op_hstemhm ),\n                           num_args / 2,\n                           args - ( num_args & ~1 ) ))"];
"1001122" [label="(Call,hinter->stems( hinter->hints,\n                             0,\n                             num_args / 2,\n                             args - ( num_args & ~1 ) ))"];
"1001149" [label="(Call,hinter->hintmask( hinter->hints,\n                                builder->current->n_points,\n                                decoder->num_hints,\n                                ip ))"];
"1001095" [label="(Call,decoder->num_hints += num_args / 2)"];
"1001135" [label="(Call,decoder->num_hints += num_args / 2)"];
"1001163" [label="(Call,hinter->counter( hinter->hints,\n                               decoder->num_hints,\n                               ip ))"];
"1001183" [label="(Call,( decoder->num_hints + 7 ) >> 3)"];
"1001181" [label="(Call,(FT_UInt)(( decoder->num_hints + 7 ) >> 3))"];
"1001179" [label="(Call,maskbyte < (FT_UInt)(( decoder->num_hints + 7 ) >> 3))"];
"1001191" [label="(Call,maskbyte++)"];
"1001184" [label="(Call,decoder->num_hints + 7)"];
"1001193" [label="(Call,ip++)"];
"1001203" [label="(Call,ip >= limit)"];
"1000386" [label="(Call,ip < limit)"];
"1000395" [label="(Call,ip++)"];
"1000417" [label="(Call,ip + 1 >= limit)"];
"1000418" [label="(Call,ip + 1)"];
"1000429" [label="(Call,(FT_Short)ip[0])"];
"1000428" [label="(Call,(FT_Short)ip[0] << 8)"];
"1000427" [label="(Call,( (FT_Short)ip[0] << 8 ) | ip[1])"];
"1000425" [label="(Call,(FT_Short)( ( (FT_Short)ip[0] << 8 ) | ip[1] ))"];
"1000423" [label="(Call,val = (FT_Short)( ( (FT_Short)ip[0] << 8 ) | ip[1] ))"];
"1000563" [label="(Call,val           <<= shift)"];
"1000566" [label="(Call,*decoder->top++ = val)"];
"1000575" [label="(Call,val & 0xFFFFL)"];
"1000574" [label="(Call,!( val & 0xFFFFL ))"];
"1000583" [label="(Call,val >> 16)"];
"1000581" [label="(Call,(FT_Int32)( val >> 16 ))"];
"1000590" [label="(Call,val / 65536.0)"];
"1000438" [label="(Call,ip += 2)"];
"1000460" [label="(Call,ip >= limit)"];
"1000476" [label="(Call,ip++)"];
"1000486" [label="(Call,ip >= limit)"];
"1000503" [label="(Call,ip++)"];
"1000509" [label="(Call,ip + 3 >= limit)"];
"1000510" [label="(Call,ip + 3)"];
"1000519" [label="(Call,(FT_Int32)ip[0])"];
"1000518" [label="(Call,(FT_Int32)ip[0] << 24)"];
"1000517" [label="(Call,( (FT_Int32)ip[0] << 24 ) |\n                ( (FT_Int32)ip[1] << 16 ) |\n                ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3])"];
"1000515" [label="(Call,val = ( (FT_Int32)ip[0] << 24 ) |\n                ( (FT_Int32)ip[1] << 16 ) |\n                ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3])"];
"1000527" [label="(Call,(FT_Int32)ip[1])"];
"1000526" [label="(Call,(FT_Int32)ip[1] << 16)"];
"1000525" [label="(Call,( (FT_Int32)ip[1] << 16 ) |\n                ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3])"];
"1000535" [label="(Call,(FT_Int32)ip[2])"];
"1000534" [label="(Call,(FT_Int32)ip[2] <<  8)"];
"1000533" [label="(Call,( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3])"];
"1000544" [label="(Call,ip    += 4)"];
"1000671" [label="(Call,ip >= limit)"];
"1000678" [label="(Call,ip++)"];
"1000854" [label="(Call,ip--)"];
"1003454" [label="(Call,zone->cursor = ip)"];
"1003563" [label="(Call,zone->cursor = ip)"];
"1003675" [label="(Call,ip[-1] == 12)"];
"1002594" [label="(Call,hinter->close( hinter->hints,\n                                  builder->current->n_points ))"];
"1002604" [label="(Call,hinter->apply( hinter->hints,\n                             builder->current,\n                             (PSH_Globals)builder->hints_globals,\n                             decoder->hint_mode ))"];
"1001084" [label="(Call,op == cff_op_hstemhm)"];
"1001110" [label="(Call,op == cff_op_hintmask)"];
"1000878" [label="(Call,op = cff_op_hintmask)"];
"1001146" [label="(Call,op == cff_op_hintmask)"];
"1001337" [label="(Call,op == cff_op_hlineto)"];
"1001335" [label="(Call,phase = ( op == cff_op_hlineto ))"];
"1001393" [label="(Call,phase ^= 1)"];
"1001342" [label="(Call,op == cff_op_hlineto)"];
"1000639" [label="(Call,op = cff_op_hlineto)"];
"1001712" [label="(Call,op == cff_op_vhcurveto)"];
"1000928" [label="(Call,op = cff_op_vhcurveto)"];
"1001758" [label="(Call,op == cff_op_hvcurveto)"];
"1000933" [label="(Call,op = cff_op_hvcurveto)"];
"1001756" [label="(Call,phase = ( op == cff_op_hvcurveto ))"];
"1001865" [label="(Call,phase ^= 1)"];
"1002611" [label="(Call,(PSH_Globals)builder->hints_globals)"];
"1000694" [label="(Call,op = cff_op_hstem)"];
"1000799" [label="(Call,op = cff_op_mul)"];
"1000858" [label="(Call,op = cff_op_hsbw)"];
"1000941" [label="(Identifier,op)"];
"1000881" [label="(ControlStructure,break;)"];
"1000943" [label="(ControlStructure,goto Syntax_Error;)"];
"1001060" [label="(Identifier,op)"];
"1000418" [label="(Call,ip + 1)"];
"1000527" [label="(Call,(FT_Int32)ip[1])"];
"1001335" [label="(Call,phase = ( op == cff_op_hlineto ))"];
"1000514" [label="(ControlStructure,goto Syntax_Error;)"];
"1000678" [label="(Call,ip++)"];
"1003563" [label="(Call,zone->cursor = ip)"];
"1001192" [label="(Identifier,maskbyte)"];
"1000485" [label="(ControlStructure,if ( ip >= limit ))"];
"1000898" [label="(Call,op = cff_op_vstemhm)"];
"1000659" [label="(Call,op = cff_op_callsubr)"];
"1000677" [label="(Call,*ip++)"];
"1001336" [label="(Identifier,phase)"];
"1001711" [label="(Call,op == cff_op_vhcurveto ? \" vhcurveto\n\"\n                                               : \" hvcurveto\n\")"];
"1000936" [label="(ControlStructure,break;)"];
"1001189" [label="(Literal,3)"];
"1002608" [label="(Call,builder->current)"];
"1001097" [label="(Identifier,decoder)"];
"1003413" [label="(Block,)"];
"1000883" [label="(Call,op = cff_op_cntrmask)"];
"1000460" [label="(Call,ip >= limit)"];
"1000388" [label="(Identifier,limit)"];
"1001081" [label="(Call,op == cff_op_hstem)"];
"1000534" [label="(Call,(FT_Int32)ip[2] <<  8)"];
"1001119" [label="(Block,)"];
"1000794" [label="(Call,op = cff_op_random)"];
"1001394" [label="(Identifier,phase)"];
"1000515" [label="(Call,val = ( (FT_Int32)ip[0] << 24 ) |\n                ( (FT_Int32)ip[1] << 16 ) |\n                ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3])"];
"1001148" [label="(Identifier,cff_op_hintmask)"];
"1002592" [label="(Block,)"];
"1000641" [label="(Identifier,cff_op_hlineto)"];
"1000754" [label="(Call,op = cff_op_neg)"];
"1000486" [label="(Call,ip >= limit)"];
"1000839" [label="(Call,op = cff_op_flex)"];
"1000671" [label="(Call,ip >= limit)"];
"1000428" [label="(Call,(FT_Short)ip[0] << 8)"];
"1000626" [label="(Identifier,cff_op_vstem)"];
"1001333" [label="(Block,)"];
"1000465" [label="(Identifier,val)"];
"1001095" [label="(Call,decoder->num_hints += num_args / 2)"];
"1001130" [label="(Call,args - ( num_args & ~1 ))"];
"1000577" [label="(Literal,0xFFFFL)"];
"1000774" [label="(Call,op = cff_op_drop)"];
"1000512" [label="(Literal,3)"];
"1000918" [label="(Call,op = cff_op_hhcurveto)"];
"1001371" [label="(Block,)"];
"1000526" [label="(Call,(FT_Int32)ip[1] << 16)"];
"1001084" [label="(Call,op == cff_op_hstemhm)"];
"1003522" [label="(Block,)"];
"1001167" [label="(Call,decoder->num_hints)"];
"1001184" [label="(Call,decoder->num_hints + 7)"];
"1000616" [label="(Identifier,v)"];
"1002603" [label="(ControlStructure,goto Syntax_Error;)"];
"1001059" [label="(Call,op == cff_op_hstem)"];
"1001096" [label="(Call,decoder->num_hints)"];
"1000417" [label="(Call,ip + 1 >= limit)"];
"1003458" [label="(Identifier,ip)"];
"1001760" [label="(Identifier,cff_op_hvcurveto)"];
"1000348" [label="(Call,limit = zone->limit  = charstring_base + charstring_len)"];
"1001188" [label="(Literal,7)"];
"1000624" [label="(Call,op = cff_op_vstem)"];
"1000459" [label="(ControlStructure,if ( ip >= limit ))"];
"1001074" [label="(ControlStructure,if ( hinter ))"];
"1000573" [label="(ControlStructure,if ( !( val & 0xFFFFL ) ))"];
"1000676" [label="(Identifier,v)"];
"1003688" [label="(Literal,\"\n\")"];
"1001145" [label="(ControlStructure,if ( op == cff_op_hintmask ))"];
"1000764" [label="(Call,op = cff_op_callothersubr)"];
"1000438" [label="(Call,ip += 2)"];
"1000945" [label="(Identifier,req_args)"];
"1000878" [label="(Call,op = cff_op_hintmask)"];
"1000789" [label="(Call,op = cff_op_ifelse)"];
"1000516" [label="(Identifier,val)"];
"1002595" [label="(Call,hinter->hints)"];
"1000874" [label="(Identifier,op)"];
"1000546" [label="(Literal,4)"];
"1000462" [label="(Identifier,limit)"];
"1000829" [label="(Call,op = cff_op_setcurrentpoint)"];
"1000461" [label="(Identifier,ip)"];
"1000583" [label="(Call,val >> 16)"];
"1000565" [label="(Identifier,shift)"];
"1000521" [label="(Call,ip[0])"];
"1000542" [label="(Identifier,ip)"];
"1000844" [label="(Call,op = cff_op_hflex1)"];
"1000429" [label="(Call,(FT_Short)ip[0])"];
"1001342" [label="(Call,op == cff_op_hlineto)"];
"1000490" [label="(Call,val = -( (FT_Int32)v - 251 ) * 256 - *ip++ - 108)"];
"1000415" [label="(Block,)"];
"1000421" [label="(Identifier,limit)"];
"1003680" [label="(Literal,12)"];
"1000679" [label="(Identifier,ip)"];
"1001058" [label="(Call,op == cff_op_hstem   ? \" hstem\n\"   :\n            ( op == cff_op_vstem   ? \" vstem\n\"   :\n            ( op == cff_op_hstemhm ? \" hstemhm\n\" : \" vstemhm\n\" ) ))"];
"1000923" [label="(Call,op = cff_op_callgsubr)"];
"1000704" [label="(Call,op = cff_op_or)"];
"1000487" [label="(Identifier,ip)"];
"1000744" [label="(Call,op = cff_op_div)"];
"1000670" [label="(ControlStructure,if ( ip >= limit ))"];
"1001197" [label="(Literal,\"0x%02X\")"];
"1000891" [label="(ControlStructure,break;)"];
"1000533" [label="(Call,( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3])"];
"1001203" [label="(Call,ip >= limit)"];
"1003674" [label="(ControlStructure,if ( ip[-1] == 12 ))"];
"1000734" [label="(Call,op = cff_op_add)"];
"1000889" [label="(Identifier,op)"];
"1000873" [label="(Call,op = cff_op_hstemhm)"];
"1001083" [label="(Identifier,cff_op_hstem)"];
"1000814" [label="(Call,op = cff_op_exch)"];
"1000588" [label="(Block,)"];
"1001707" [label="(Block,)"];
"1000575" [label="(Call,val & 0xFFFFL)"];
"1001068" [label="(Call,op == cff_op_hstemhm ? \" hstemhm\n\" : \" vstemhm\n\")"];
"1001866" [label="(Identifier,phase)"];
"1000931" [label="(ControlStructure,break;)"];
"1000697" [label="(ControlStructure,break;)"];
"1001099" [label="(Call,num_args / 2)"];
"1000664" [label="(Call,op = cff_op_return)"];
"1001181" [label="(Call,(FT_UInt)(( decoder->num_hints + 7 ) >> 3))"];
"1000614" [label="(Identifier,cff_op_unknown)"];
"1000855" [label="(Identifier,ip)"];
"1003569" [label="(Identifier,zone)"];
"1001393" [label="(Call,phase ^= 1)"];
"1001865" [label="(Call,phase ^= 1)"];
"1000699" [label="(Call,op = cff_op_and)"];
"1001137" [label="(Identifier,decoder)"];
"1001066" [label="(Identifier,cff_op_vstem)"];
"1000381" [label="(Call,hinter->open( hinter->hints ))"];
"1001191" [label="(Call,maskbyte++)"];
"1000477" [label="(Identifier,ip)"];
"1000879" [label="(Identifier,op)"];
"1000544" [label="(Call,ip    += 4)"];
"1000589" [label="(Literal,\" %.2f\")"];
"1000689" [label="(Call,op = cff_op_vstem)"];
"1002593" [label="(ControlStructure,if ( hinter->close( hinter->hints,\n                                  builder->current->n_points ) ))"];
"1000875" [label="(Identifier,cff_op_hstemhm)"];
"1000549" [label="(Identifier,charstring_type)"];
"1000416" [label="(ControlStructure,if ( ip + 1 >= limit ))"];
"1000868" [label="(Call,op = cff_op_blend)"];
"1000673" [label="(Identifier,limit)"];
"1001344" [label="(Identifier,cff_op_hlineto)"];
"1000942" [label="(Identifier,cff_op_unknown)"];
"1001175" [label="(ControlStructure,for ( maskbyte = 0;\n                  maskbyte < (FT_UInt)(( decoder->num_hints + 7 ) >> 3);\n                  maskbyte++, ip++ ))"];
"1001165" [label="(Identifier,hinter)"];
"1000649" [label="(Call,op = cff_op_rrcurveto)"];
"1000890" [label="(Identifier,cff_op_rmoveto)"];
"1001135" [label="(Call,decoder->num_hints += num_args / 2)"];
"1000572" [label="(Identifier,val)"];
"1000385" [label="(ControlStructure,while ( ip < limit ))"];
"1001763" [label="(Identifier,nargs)"];
"1000684" [label="(Call,op = cff_op_dotsection)"];
"1000834" [label="(Call,op = cff_op_hflex)"];
"1001082" [label="(Identifier,op)"];
"1001146" [label="(Call,op == cff_op_hintmask)"];
"1001139" [label="(Call,num_args / 2)"];
"1003460" [label="(Identifier,zone)"];
"1000519" [label="(Call,(FT_Int32)ip[0])"];
"1001052" [label="(Block,)"];
"1000580" [label="(Literal,\" %ld\")"];
"1001343" [label="(Identifier,op)"];
"1001114" [label="(Literal,\" cntrmask\")"];
"1000935" [label="(Identifier,cff_op_hvcurveto)"];
"1001061" [label="(Identifier,cff_op_hstem)"];
"1003716" [label="(MethodReturn,RET)"];
"1000576" [label="(Identifier,val)"];
"1001395" [label="(Literal,1)"];
"1001090" [label="(Call,args - ( num_args & ~1 ))"];
"1000446" [label="(Call,val = (FT_Int32)v - 139)"];
"1000854" [label="(Call,ip--)"];
"1001183" [label="(Call,( decoder->num_hints + 7 ) >> 3)"];
"1000393" [label="(Identifier,v)"];
"1003683" [label="(Literal,\" %d\")"];
"1001193" [label="(Call,ip++)"];
"1000654" [label="(Call,op = cff_op_closepath)"];
"1000929" [label="(Identifier,op)"];
"1003659" [label="(Call,limit = zone->limit)"];
"1000622" [label="(ControlStructure,break;)"];
"1002594" [label="(Call,hinter->close( hinter->hints,\n                                  builder->current->n_points ))"];
"1000502" [label="(Call,*ip++)"];
"1003454" [label="(Call,zone->cursor = ip)"];
"1000724" [label="(Call,op = cff_op_store)"];
"1001112" [label="(Identifier,cff_op_hintmask)"];
"1000863" [label="(Call,op = cff_op_endchar)"];
"1000509" [label="(Call,ip + 3 >= limit)"];
"1000532" [label="(Literal,16)"];
"1000619" [label="(Call,op = cff_op_hstem)"];
"1001077" [label="(Call,hinter->hints)"];
"1000511" [label="(Identifier,ip)"];
"1000541" [label="(Call,ip[3])"];
"1003510" [label="(Call,ip            = zone->base)"];
"1000574" [label="(Call,!( val & 0xFFFFL ))"];
"1000779" [label="(Call,op = cff_op_put)"];
"1000587" [label="(Call,FT_TRACE4(( \" %.2f\", val / 65536.0 )))"];
"1001062" [label="(Literal,\" hstem\n\")"];
"1001069" [label="(Call,op == cff_op_hstemhm)"];
"1001713" [label="(Identifier,op)"];
"1000584" [label="(Identifier,val)"];
"1000251" [label="(Call,decoder->num_hints  = 0)"];
"1001067" [label="(Literal,\" vstem\n\")"];
"1000585" [label="(Literal,16)"];
"1000436" [label="(Identifier,ip)"];
"1001201" [label="(Literal,\")\n\")"];
"1000524" [label="(Literal,24)"];
"1001088" [label="(Identifier,num_args)"];
"1001085" [label="(Identifier,op)"];
"1001204" [label="(Identifier,ip)"];
"1000422" [label="(ControlStructure,goto Syntax_Error;)"];
"1000939" [label="(ControlStructure,if ( op == cff_op_unknown ))"];
"1000749" [label="(Call,op = cff_op_load)"];
"1001123" [label="(Call,hinter->hints)"];
"1000578" [label="(Call,FT_TRACE4(( \" %ld\", (FT_Int32)( val >> 16 ) )))"];
"1000739" [label="(Call,op = cff_op_sub)"];
"1001715" [label="(Literal,\" vhcurveto\n\")"];
"1000435" [label="(Call,ip[1])"];
"1000427" [label="(Call,( (FT_Short)ip[0] << 8 ) | ip[1])"];
"1000934" [label="(Identifier,op)"];
"1001190" [label="(Block,)"];
"1003624" [label="(Call,limit         = zone->limit)"];
"1001064" [label="(Call,op == cff_op_vstem)"];
"1001757" [label="(Identifier,phase)"];
"1001758" [label="(Call,op == cff_op_hvcurveto)"];
"1001087" [label="(Call,num_args / 2)"];
"1001161" [label="(Identifier,ip)"];
"1000489" [label="(ControlStructure,goto Syntax_Error;)"];
"1000590" [label="(Call,val / 65536.0)"];
"1001109" [label="(Call,op == cff_op_hintmask ? \" hintmask\" : \" cntrmask\")"];
"1001867" [label="(Literal,1)"];
"1001164" [label="(Call,hinter->hints)"];
"1000491" [label="(Identifier,val)"];
"1003564" [label="(Call,zone->cursor)"];
"1003676" [label="(Call,ip[-1])"];
"1000696" [label="(Identifier,cff_op_hstem)"];
"1000545" [label="(Identifier,ip)"];
"1000387" [label="(Identifier,ip)"];
"1002604" [label="(Call,hinter->apply( hinter->hints,\n                             builder->current,\n                             (PSH_Globals)builder->hints_globals,\n                             decoder->hint_mode ))"];
"1001162" [label="(ControlStructure,else)"];
"1000709" [label="(Call,op = cff_op_not)"];
"1000880" [label="(Identifier,cff_op_hintmask)"];
"1002598" [label="(Call,builder->current->n_points)"];
"1000513" [label="(Identifier,limit)"];
"1003455" [label="(Call,zone->cursor)"];
"1000476" [label="(Call,ip++)"];
"1000682" [label="(Block,)"];
"1000642" [label="(ControlStructure,break;)"];
"1000594" [label="(Block,)"];
"1001208" [label="(Identifier,args)"];
"1000440" [label="(Literal,2)"];
"1000719" [label="(Call,op = cff_op_sbw)"];
"1000876" [label="(ControlStructure,break;)"];
"1000591" [label="(Identifier,val)"];
"1000692" [label="(ControlStructure,break;)"];
"1003619" [label="(Call,ip            = zone->base)"];
"1001111" [label="(Identifier,op)"];
"1001338" [label="(Identifier,op)"];
"1000420" [label="(Literal,1)"];
"1000504" [label="(Identifier,ip)"];
"1001127" [label="(Call,num_args / 2)"];
"1001194" [label="(Identifier,ip)"];
"1000540" [label="(Literal,8)"];
"1000888" [label="(Call,op = cff_op_rmoveto)"];
"1000804" [label="(Call,op = cff_op_sqrt)"];
"1001150" [label="(Call,hinter->hints)"];
"1000525" [label="(Call,( (FT_Int32)ip[1] << 16 ) |\n                ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3])"];
"1001716" [label="(Literal,\" hvcurveto\n\")"];
"1000930" [label="(Identifier,cff_op_vhcurveto)"];
"1001180" [label="(Identifier,maskbyte)"];
"1000475" [label="(Call,*ip++)"];
"1001337" [label="(Call,op == cff_op_hlineto)"];
"1001120" [label="(ControlStructure,if ( hinter ))"];
"1001714" [label="(Identifier,cff_op_vhcurveto)"];
"1001712" [label="(Call,op == cff_op_vhcurveto)"];
"1001185" [label="(Call,decoder->num_hints)"];
"1000592" [label="(Literal,65536.0)"];
"1000672" [label="(Identifier,ip)"];
"1000396" [label="(Identifier,ip)"];
"1000644" [label="(Call,op = cff_op_vlineto)"];
"1003567" [label="(Identifier,ip)"];
"1002606" [label="(Identifier,hinter)"];
"1000386" [label="(Call,ip < limit)"];
"1001073" [label="(Literal,\" vstemhm\n\")"];
"1000510" [label="(Call,ip + 3)"];
"1001346" [label="(Literal,\" vlineto\n\")"];
"1000634" [label="(Call,op = cff_op_rlineto)"];
"1001206" [label="(ControlStructure,goto Syntax_Error;)"];
"1000769" [label="(Call,op = cff_op_pop)"];
"1000395" [label="(Call,ip++)"];
"1001174" [label="(Literal,\" (maskbytes: \")"];
"1000564" [label="(Identifier,val)"];
"1000819" [label="(Call,op = cff_op_index)"];
"1002605" [label="(Call,hinter->hints)"];
"1002621" [label="(Identifier,builder)"];
"1001151" [label="(Identifier,hinter)"];
"1000621" [label="(Identifier,cff_op_hstem)"];
"1001126" [label="(Literal,0)"];
"1001147" [label="(Identifier,op)"];
"1000903" [label="(Call,op = cff_op_rcurveline)"];
"1001103" [label="(Identifier,args)"];
"1000640" [label="(Identifier,op)"];
"1001367" [label="(Identifier,args)"];
"1001086" [label="(Identifier,cff_op_hstemhm)"];
"1001072" [label="(Literal,\" hstemhm\n\")"];
"1001070" [label="(Identifier,op)"];
"1000913" [label="(Call,op = cff_op_vvcurveto)"];
"1000581" [label="(Call,(FT_Int32)( val >> 16 ))"];
"1000856" [label="(ControlStructure,break;)"];
"1001179" [label="(Call,maskbyte < (FT_UInt)(( decoder->num_hints + 7 ) >> 3))"];
"1000729" [label="(Call,op = cff_op_abs)"];
"1000431" [label="(Call,ip[0])"];
"1003697" [label="(Literal,\"..end..\n\n\")"];
"1000627" [label="(ControlStructure,break;)"];
"1000612" [label="(Call,op = cff_op_unknown)"];
"1000551" [label="(Call,shift = 0)"];
"1000674" [label="(ControlStructure,goto Syntax_Error;)"];
"1001345" [label="(Literal,\" hlineto\n\")"];
"1000893" [label="(Call,op = cff_op_hmoveto)"];
"1001136" [label="(Call,decoder->num_hints)"];
"1000567" [label="(Call,*decoder->top++)"];
"1000357" [label="(Call,ip    = zone->cursor = zone->base)"];
"1000529" [label="(Call,ip[1])"];
"1000690" [label="(Identifier,op)"];
"1001756" [label="(Call,phase = ( op == cff_op_hvcurveto ))"];
"1000691" [label="(Identifier,cff_op_vstem)"];
"1001149" [label="(Call,hinter->hintmask( hinter->hints,\n                                builder->current->n_points,\n                                decoder->num_hints,\n                                ip ))"];
"1000784" [label="(Call,op = cff_op_get)"];
"1001176" [label="(Call,maskbyte = 0)"];
"1000518" [label="(Call,(FT_Int32)ip[0] << 24)"];
"1000928" [label="(Call,op = cff_op_vhcurveto)"];
"1000394" [label="(Call,*ip++)"];
"1001765" [label="(Block,)"];
"1001071" [label="(Identifier,cff_op_hstemhm)"];
"1003675" [label="(Call,ip[-1] == 12)"];
"1000507" [label="(Block,)"];
"1002616" [label="(Call,decoder->hint_mode)"];
"1003515" [label="(Call,limit         = zone->limit)"];
"1000714" [label="(Call,op = cff_op_seac)"];
"1000439" [label="(Identifier,ip)"];
"1001065" [label="(Identifier,op)"];
"1000464" [label="(Call,val = ( (FT_Int32)v - 247 ) * 256 + *ip++ + 108)"];
"1001143" [label="(Identifier,hinter)"];
"1000463" [label="(ControlStructure,goto Syntax_Error;)"];
"1000537" [label="(Call,ip[2])"];
"1000423" [label="(Call,val = (FT_Short)( ( (FT_Short)ip[0] << 8 ) | ip[1] ))"];
"1000419" [label="(Identifier,ip)"];
"1000558" [label="(Identifier,decoder)"];
"1001063" [label="(Call,op == cff_op_vstem   ? \" vstem\n\"   :\n            ( op == cff_op_hstemhm ? \" hstemhm\n\" : \" vstemhm\n\" ))"];
"1000639" [label="(Call,op = cff_op_hlineto)"];
"1000759" [label="(Call,op = cff_op_eq)"];
"1000629" [label="(Call,op = cff_op_vmoveto)"];
"1000824" [label="(Call,op = cff_op_roll)"];
"1001170" [label="(Identifier,ip)"];
"1000434" [label="(Literal,8)"];
"1001759" [label="(Identifier,op)"];
"1000809" [label="(Call,op = cff_op_dup)"];
"1000503" [label="(Call,ip++)"];
"1001113" [label="(Literal,\" hintmask\")"];
"1001158" [label="(Call,decoder->num_hints)"];
"1000617" [label="(Block,)"];
"1000517" [label="(Call,( (FT_Int32)ip[0] << 24 ) |\n                ( (FT_Int32)ip[1] << 16 ) |\n                ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3])"];
"1001110" [label="(Call,op == cff_op_hintmask)"];
"1001076" [label="(Call,hinter->stems( hinter->hints,\n                           ( op == cff_op_hstem || op == cff_op_hstemhm ),\n                           num_args / 2,\n                           args - ( num_args & ~1 ) ))"];
"1000425" [label="(Call,(FT_Short)( ( (FT_Short)ip[0] << 8 ) | ip[1] ))"];
"1000535" [label="(Call,(FT_Int32)ip[2])"];
"1000424" [label="(Identifier,val)"];
"1001341" [label="(Call,op == cff_op_hlineto ? \" hlineto\n\"\n                                             : \" vlineto\n\")"];
"1001163" [label="(Call,hinter->counter( hinter->hints,\n                               decoder->num_hints,\n                               ip ))"];
"1001339" [label="(Identifier,cff_op_hlineto)"];
"1000933" [label="(Call,op = cff_op_hvcurveto)"];
"1000849" [label="(Call,op = cff_op_flex1)"];
"1000563" [label="(Call,val           <<= shift)"];
"1000695" [label="(Identifier,op)"];
"1000613" [label="(Identifier,op)"];
"1001080" [label="(Call,op == cff_op_hstem || op == cff_op_hstemhm)"];
"1001202" [label="(ControlStructure,if ( ip >= limit ))"];
"1000488" [label="(Identifier,limit)"];
"1001122" [label="(Call,hinter->stems( hinter->hints,\n                             0,\n                             num_args / 2,\n                             args - ( num_args & ~1 ) ))"];
"1000940" [label="(Call,op == cff_op_unknown)"];
"1001153" [label="(Call,builder->current->n_points)"];
"1000566" [label="(Call,*decoder->top++ = val)"];
"1000620" [label="(Identifier,op)"];
"1000570" [label="(Identifier,decoder)"];
"1000407" [label="(Call,shift = 16)"];
"1000579" [label="(Block,)"];
"1000908" [label="(Call,op = cff_op_rlinecurve)"];
"1000405" [label="(Block,)"];
"1000625" [label="(Identifier,op)"];
"1001205" [label="(Identifier,limit)"];
"1000508" [label="(ControlStructure,if ( ip + 3 >= limit ))"];
"1003654" [label="(Call,ip    = zone->cursor)"];
"1000888" -> "1000617"  [label="AST: "];
"1000888" -> "1000890"  [label="CFG: "];
"1000889" -> "1000888"  [label="AST: "];
"1000890" -> "1000888"  [label="AST: "];
"1000891" -> "1000888"  [label="CFG: "];
"1000888" -> "1003716"  [label="DDG: cff_op_rmoveto"];
"1000888" -> "1003716"  [label="DDG: op"];
"1000888" -> "1000940"  [label="DDG: op"];
"1000940" -> "1000939"  [label="AST: "];
"1000940" -> "1000942"  [label="CFG: "];
"1000941" -> "1000940"  [label="AST: "];
"1000942" -> "1000940"  [label="AST: "];
"1000943" -> "1000940"  [label="CFG: "];
"1000945" -> "1000940"  [label="CFG: "];
"1000940" -> "1003716"  [label="DDG: cff_op_unknown"];
"1000940" -> "1003716"  [label="DDG: op"];
"1000940" -> "1003716"  [label="DDG: op == cff_op_unknown"];
"1000940" -> "1000612"  [label="DDG: cff_op_unknown"];
"1000684" -> "1000940"  [label="DDG: op"];
"1000878" -> "1000940"  [label="DDG: op"];
"1000724" -> "1000940"  [label="DDG: op"];
"1000764" -> "1000940"  [label="DDG: op"];
"1000844" -> "1000940"  [label="DDG: op"];
"1000809" -> "1000940"  [label="DDG: op"];
"1000784" -> "1000940"  [label="DDG: op"];
"1000804" -> "1000940"  [label="DDG: op"];
"1000699" -> "1000940"  [label="DDG: op"];
"1000629" -> "1000940"  [label="DDG: op"];
"1000649" -> "1000940"  [label="DDG: op"];
"1000729" -> "1000940"  [label="DDG: op"];
"1000898" -> "1000940"  [label="DDG: op"];
"1000903" -> "1000940"  [label="DDG: op"];
"1000694" -> "1000940"  [label="DDG: op"];
"1000779" -> "1000940"  [label="DDG: op"];
"1000873" -> "1000940"  [label="DDG: op"];
"1000654" -> "1000940"  [label="DDG: op"];
"1000734" -> "1000940"  [label="DDG: op"];
"1000714" -> "1000940"  [label="DDG: op"];
"1000639" -> "1000940"  [label="DDG: op"];
"1000659" -> "1000940"  [label="DDG: op"];
"1000918" -> "1000940"  [label="DDG: op"];
"1000849" -> "1000940"  [label="DDG: op"];
"1000689" -> "1000940"  [label="DDG: op"];
"1000933" -> "1000940"  [label="DDG: op"];
"1000883" -> "1000940"  [label="DDG: op"];
"1000829" -> "1000940"  [label="DDG: op"];
"1000612" -> "1000940"  [label="DDG: op"];
"1000819" -> "1000940"  [label="DDG: op"];
"1000789" -> "1000940"  [label="DDG: op"];
"1000858" -> "1000940"  [label="DDG: op"];
"1000749" -> "1000940"  [label="DDG: op"];
"1000744" -> "1000940"  [label="DDG: op"];
"1000759" -> "1000940"  [label="DDG: op"];
"1000794" -> "1000940"  [label="DDG: op"];
"1000863" -> "1000940"  [label="DDG: op"];
"1000928" -> "1000940"  [label="DDG: op"];
"1000754" -> "1000940"  [label="DDG: op"];
"1000834" -> "1000940"  [label="DDG: op"];
"1000799" -> "1000940"  [label="DDG: op"];
"1000739" -> "1000940"  [label="DDG: op"];
"1000769" -> "1000940"  [label="DDG: op"];
"1000893" -> "1000940"  [label="DDG: op"];
"1000709" -> "1000940"  [label="DDG: op"];
"1000814" -> "1000940"  [label="DDG: op"];
"1000634" -> "1000940"  [label="DDG: op"];
"1000704" -> "1000940"  [label="DDG: op"];
"1000719" -> "1000940"  [label="DDG: op"];
"1000624" -> "1000940"  [label="DDG: op"];
"1000644" -> "1000940"  [label="DDG: op"];
"1000913" -> "1000940"  [label="DDG: op"];
"1000824" -> "1000940"  [label="DDG: op"];
"1000664" -> "1000940"  [label="DDG: op"];
"1000839" -> "1000940"  [label="DDG: op"];
"1000923" -> "1000940"  [label="DDG: op"];
"1000774" -> "1000940"  [label="DDG: op"];
"1000619" -> "1000940"  [label="DDG: op"];
"1000868" -> "1000940"  [label="DDG: op"];
"1000908" -> "1000940"  [label="DDG: op"];
"1000940" -> "1001059"  [label="DDG: op"];
"1000940" -> "1001110"  [label="DDG: op"];
"1000940" -> "1001337"  [label="DDG: op"];
"1000940" -> "1001712"  [label="DDG: op"];
"1000612" -> "1000594"  [label="AST: "];
"1000612" -> "1000614"  [label="CFG: "];
"1000613" -> "1000612"  [label="AST: "];
"1000614" -> "1000612"  [label="AST: "];
"1000616" -> "1000612"  [label="CFG: "];
"1000612" -> "1003716"  [label="DDG: cff_op_unknown"];
"1000612" -> "1003716"  [label="DDG: op"];
"1001059" -> "1001058"  [label="AST: "];
"1001059" -> "1001061"  [label="CFG: "];
"1001060" -> "1001059"  [label="AST: "];
"1001061" -> "1001059"  [label="AST: "];
"1001062" -> "1001059"  [label="CFG: "];
"1001065" -> "1001059"  [label="CFG: "];
"1001059" -> "1003716"  [label="DDG: cff_op_hstem"];
"1001059" -> "1003716"  [label="DDG: op"];
"1001059" -> "1000619"  [label="DDG: cff_op_hstem"];
"1001059" -> "1000694"  [label="DDG: cff_op_hstem"];
"1001081" -> "1001059"  [label="DDG: cff_op_hstem"];
"1001059" -> "1001064"  [label="DDG: op"];
"1001059" -> "1001081"  [label="DDG: op"];
"1001059" -> "1001081"  [label="DDG: cff_op_hstem"];
"1000619" -> "1000617"  [label="AST: "];
"1000619" -> "1000621"  [label="CFG: "];
"1000620" -> "1000619"  [label="AST: "];
"1000621" -> "1000619"  [label="AST: "];
"1000622" -> "1000619"  [label="CFG: "];
"1000619" -> "1003716"  [label="DDG: cff_op_hstem"];
"1000619" -> "1003716"  [label="DDG: op"];
"1001081" -> "1000619"  [label="DDG: cff_op_hstem"];
"1000694" -> "1000682"  [label="AST: "];
"1000694" -> "1000696"  [label="CFG: "];
"1000695" -> "1000694"  [label="AST: "];
"1000696" -> "1000694"  [label="AST: "];
"1000697" -> "1000694"  [label="CFG: "];
"1000694" -> "1003716"  [label="DDG: op"];
"1000694" -> "1003716"  [label="DDG: cff_op_hstem"];
"1001081" -> "1000694"  [label="DDG: cff_op_hstem"];
"1001064" -> "1001063"  [label="AST: "];
"1001064" -> "1001066"  [label="CFG: "];
"1001065" -> "1001064"  [label="AST: "];
"1001066" -> "1001064"  [label="AST: "];
"1001067" -> "1001064"  [label="CFG: "];
"1001070" -> "1001064"  [label="CFG: "];
"1001064" -> "1003716"  [label="DDG: cff_op_vstem"];
"1001064" -> "1003716"  [label="DDG: op"];
"1001064" -> "1000624"  [label="DDG: cff_op_vstem"];
"1001064" -> "1000689"  [label="DDG: cff_op_vstem"];
"1001064" -> "1001069"  [label="DDG: op"];
"1001064" -> "1001081"  [label="DDG: op"];
"1000624" -> "1000617"  [label="AST: "];
"1000624" -> "1000626"  [label="CFG: "];
"1000625" -> "1000624"  [label="AST: "];
"1000626" -> "1000624"  [label="AST: "];
"1000627" -> "1000624"  [label="CFG: "];
"1000624" -> "1003716"  [label="DDG: cff_op_vstem"];
"1000624" -> "1003716"  [label="DDG: op"];
"1000689" -> "1000682"  [label="AST: "];
"1000689" -> "1000691"  [label="CFG: "];
"1000690" -> "1000689"  [label="AST: "];
"1000691" -> "1000689"  [label="AST: "];
"1000692" -> "1000689"  [label="CFG: "];
"1000689" -> "1003716"  [label="DDG: op"];
"1000689" -> "1003716"  [label="DDG: cff_op_vstem"];
"1001069" -> "1001068"  [label="AST: "];
"1001069" -> "1001071"  [label="CFG: "];
"1001070" -> "1001069"  [label="AST: "];
"1001071" -> "1001069"  [label="AST: "];
"1001072" -> "1001069"  [label="CFG: "];
"1001073" -> "1001069"  [label="CFG: "];
"1001069" -> "1003716"  [label="DDG: op"];
"1001069" -> "1003716"  [label="DDG: cff_op_hstemhm"];
"1001069" -> "1000873"  [label="DDG: cff_op_hstemhm"];
"1001084" -> "1001069"  [label="DDG: cff_op_hstemhm"];
"1001069" -> "1001081"  [label="DDG: op"];
"1001069" -> "1001084"  [label="DDG: cff_op_hstemhm"];
"1000873" -> "1000617"  [label="AST: "];
"1000873" -> "1000875"  [label="CFG: "];
"1000874" -> "1000873"  [label="AST: "];
"1000875" -> "1000873"  [label="AST: "];
"1000876" -> "1000873"  [label="CFG: "];
"1000873" -> "1003716"  [label="DDG: op"];
"1000873" -> "1003716"  [label="DDG: cff_op_hstemhm"];
"1001084" -> "1000873"  [label="DDG: cff_op_hstemhm"];
"1001081" -> "1001080"  [label="AST: "];
"1001081" -> "1001083"  [label="CFG: "];
"1001082" -> "1001081"  [label="AST: "];
"1001083" -> "1001081"  [label="AST: "];
"1001085" -> "1001081"  [label="CFG: "];
"1001080" -> "1001081"  [label="CFG: "];
"1001081" -> "1003716"  [label="DDG: cff_op_hstem"];
"1001081" -> "1003716"  [label="DDG: op"];
"1001081" -> "1001080"  [label="DDG: op"];
"1001081" -> "1001080"  [label="DDG: cff_op_hstem"];
"1001081" -> "1001084"  [label="DDG: op"];
"1001080" -> "1001076"  [label="AST: "];
"1001080" -> "1001084"  [label="CFG: "];
"1001084" -> "1001080"  [label="AST: "];
"1001088" -> "1001080"  [label="CFG: "];
"1001080" -> "1003716"  [label="DDG: op == cff_op_hstemhm"];
"1001080" -> "1003716"  [label="DDG: op == cff_op_hstem"];
"1001080" -> "1001076"  [label="DDG: op == cff_op_hstem"];
"1001080" -> "1001076"  [label="DDG: op == cff_op_hstemhm"];
"1001084" -> "1001080"  [label="DDG: op"];
"1001084" -> "1001080"  [label="DDG: cff_op_hstemhm"];
"1001076" -> "1001074"  [label="AST: "];
"1001076" -> "1001090"  [label="CFG: "];
"1001077" -> "1001076"  [label="AST: "];
"1001087" -> "1001076"  [label="AST: "];
"1001090" -> "1001076"  [label="AST: "];
"1001097" -> "1001076"  [label="CFG: "];
"1001076" -> "1003716"  [label="DDG: op == cff_op_hstem || op == cff_op_hstemhm"];
"1001076" -> "1003716"  [label="DDG: hinter->hints"];
"1001076" -> "1003716"  [label="DDG: hinter->stems( hinter->hints,\n                           ( op == cff_op_hstem || op == cff_op_hstemhm ),\n                           num_args / 2,\n                           args - ( num_args & ~1 ) )"];
"1001076" -> "1003716"  [label="DDG: args - ( num_args & ~1 )"];
"1001149" -> "1001076"  [label="DDG: hinter->hints"];
"1000381" -> "1001076"  [label="DDG: hinter->hints"];
"1001163" -> "1001076"  [label="DDG: hinter->hints"];
"1001122" -> "1001076"  [label="DDG: hinter->hints"];
"1001087" -> "1001076"  [label="DDG: num_args"];
"1001087" -> "1001076"  [label="DDG: 2"];
"1001090" -> "1001076"  [label="DDG: args"];
"1001090" -> "1001076"  [label="DDG: num_args & ~1"];
"1001076" -> "1001122"  [label="DDG: hinter->hints"];
"1001076" -> "1001149"  [label="DDG: hinter->hints"];
"1001076" -> "1001163"  [label="DDG: hinter->hints"];
"1001076" -> "1002594"  [label="DDG: hinter->hints"];
"1001122" -> "1001120"  [label="AST: "];
"1001122" -> "1001130"  [label="CFG: "];
"1001123" -> "1001122"  [label="AST: "];
"1001126" -> "1001122"  [label="AST: "];
"1001127" -> "1001122"  [label="AST: "];
"1001130" -> "1001122"  [label="AST: "];
"1001137" -> "1001122"  [label="CFG: "];
"1001122" -> "1003716"  [label="DDG: args - ( num_args & ~1 )"];
"1001122" -> "1003716"  [label="DDG: hinter->hints"];
"1001122" -> "1003716"  [label="DDG: hinter->stems( hinter->hints,\n                             0,\n                             num_args / 2,\n                             args - ( num_args & ~1 ) )"];
"1001149" -> "1001122"  [label="DDG: hinter->hints"];
"1000381" -> "1001122"  [label="DDG: hinter->hints"];
"1001163" -> "1001122"  [label="DDG: hinter->hints"];
"1001127" -> "1001122"  [label="DDG: num_args"];
"1001127" -> "1001122"  [label="DDG: 2"];
"1001130" -> "1001122"  [label="DDG: args"];
"1001130" -> "1001122"  [label="DDG: num_args & ~1"];
"1001122" -> "1001149"  [label="DDG: hinter->hints"];
"1001122" -> "1001163"  [label="DDG: hinter->hints"];
"1001122" -> "1002594"  [label="DDG: hinter->hints"];
"1001149" -> "1001145"  [label="AST: "];
"1001149" -> "1001161"  [label="CFG: "];
"1001150" -> "1001149"  [label="AST: "];
"1001153" -> "1001149"  [label="AST: "];
"1001158" -> "1001149"  [label="AST: "];
"1001161" -> "1001149"  [label="AST: "];
"1001174" -> "1001149"  [label="CFG: "];
"1001149" -> "1003716"  [label="DDG: hinter->hints"];
"1001149" -> "1003716"  [label="DDG: builder->current->n_points"];
"1001149" -> "1003716"  [label="DDG: hinter->hintmask( hinter->hints,\n                                builder->current->n_points,\n                                decoder->num_hints,\n                                ip )"];
"1001149" -> "1001095"  [label="DDG: decoder->num_hints"];
"1001149" -> "1001135"  [label="DDG: decoder->num_hints"];
"1000381" -> "1001149"  [label="DDG: hinter->hints"];
"1001163" -> "1001149"  [label="DDG: hinter->hints"];
"1001163" -> "1001149"  [label="DDG: decoder->num_hints"];
"1000251" -> "1001149"  [label="DDG: decoder->num_hints"];
"1001135" -> "1001149"  [label="DDG: decoder->num_hints"];
"1001095" -> "1001149"  [label="DDG: decoder->num_hints"];
"1000395" -> "1001149"  [label="DDG: ip"];
"1000678" -> "1001149"  [label="DDG: ip"];
"1000427" -> "1001149"  [label="DDG: ip[1]"];
"1000535" -> "1001149"  [label="DDG: ip[2]"];
"1000533" -> "1001149"  [label="DDG: ip[3]"];
"1000429" -> "1001149"  [label="DDG: ip[0]"];
"1000854" -> "1001149"  [label="DDG: ip"];
"1000527" -> "1001149"  [label="DDG: ip[1]"];
"1000519" -> "1001149"  [label="DDG: ip[0]"];
"1001149" -> "1001163"  [label="DDG: hinter->hints"];
"1001149" -> "1001163"  [label="DDG: decoder->num_hints"];
"1001149" -> "1001183"  [label="DDG: decoder->num_hints"];
"1001149" -> "1001184"  [label="DDG: decoder->num_hints"];
"1001149" -> "1001193"  [label="DDG: ip"];
"1001149" -> "1001203"  [label="DDG: ip"];
"1001149" -> "1002594"  [label="DDG: hinter->hints"];
"1001149" -> "1002594"  [label="DDG: builder->current->n_points"];
"1001095" -> "1001052"  [label="AST: "];
"1001095" -> "1001099"  [label="CFG: "];
"1001096" -> "1001095"  [label="AST: "];
"1001099" -> "1001095"  [label="AST: "];
"1001103" -> "1001095"  [label="CFG: "];
"1001095" -> "1003716"  [label="DDG: num_args / 2"];
"1001095" -> "1003716"  [label="DDG: decoder->num_hints"];
"1001099" -> "1001095"  [label="DDG: num_args"];
"1001099" -> "1001095"  [label="DDG: 2"];
"1000251" -> "1001095"  [label="DDG: decoder->num_hints"];
"1001163" -> "1001095"  [label="DDG: decoder->num_hints"];
"1001135" -> "1001095"  [label="DDG: decoder->num_hints"];
"1001095" -> "1001135"  [label="DDG: decoder->num_hints"];
"1001095" -> "1001163"  [label="DDG: decoder->num_hints"];
"1001095" -> "1001183"  [label="DDG: decoder->num_hints"];
"1001095" -> "1001184"  [label="DDG: decoder->num_hints"];
"1001135" -> "1001119"  [label="AST: "];
"1001135" -> "1001139"  [label="CFG: "];
"1001136" -> "1001135"  [label="AST: "];
"1001139" -> "1001135"  [label="AST: "];
"1001143" -> "1001135"  [label="CFG: "];
"1001135" -> "1003716"  [label="DDG: num_args / 2"];
"1001139" -> "1001135"  [label="DDG: num_args"];
"1001139" -> "1001135"  [label="DDG: 2"];
"1000251" -> "1001135"  [label="DDG: decoder->num_hints"];
"1001163" -> "1001135"  [label="DDG: decoder->num_hints"];
"1001135" -> "1001163"  [label="DDG: decoder->num_hints"];
"1001135" -> "1001183"  [label="DDG: decoder->num_hints"];
"1001135" -> "1001184"  [label="DDG: decoder->num_hints"];
"1001163" -> "1001162"  [label="AST: "];
"1001163" -> "1001170"  [label="CFG: "];
"1001164" -> "1001163"  [label="AST: "];
"1001167" -> "1001163"  [label="AST: "];
"1001170" -> "1001163"  [label="AST: "];
"1001174" -> "1001163"  [label="CFG: "];
"1001163" -> "1003716"  [label="DDG: hinter->counter( hinter->hints,\n                               decoder->num_hints,\n                               ip )"];
"1001163" -> "1003716"  [label="DDG: hinter->hints"];
"1000381" -> "1001163"  [label="DDG: hinter->hints"];
"1000251" -> "1001163"  [label="DDG: decoder->num_hints"];
"1000395" -> "1001163"  [label="DDG: ip"];
"1000678" -> "1001163"  [label="DDG: ip"];
"1000427" -> "1001163"  [label="DDG: ip[1]"];
"1000535" -> "1001163"  [label="DDG: ip[2]"];
"1000533" -> "1001163"  [label="DDG: ip[3]"];
"1000429" -> "1001163"  [label="DDG: ip[0]"];
"1000854" -> "1001163"  [label="DDG: ip"];
"1000527" -> "1001163"  [label="DDG: ip[1]"];
"1000519" -> "1001163"  [label="DDG: ip[0]"];
"1001163" -> "1001183"  [label="DDG: decoder->num_hints"];
"1001163" -> "1001184"  [label="DDG: decoder->num_hints"];
"1001163" -> "1001193"  [label="DDG: ip"];
"1001163" -> "1001203"  [label="DDG: ip"];
"1001163" -> "1002594"  [label="DDG: hinter->hints"];
"1001183" -> "1001181"  [label="AST: "];
"1001183" -> "1001189"  [label="CFG: "];
"1001184" -> "1001183"  [label="AST: "];
"1001189" -> "1001183"  [label="AST: "];
"1001181" -> "1001183"  [label="CFG: "];
"1001183" -> "1003716"  [label="DDG: decoder->num_hints + 7"];
"1001183" -> "1001181"  [label="DDG: decoder->num_hints + 7"];
"1001183" -> "1001181"  [label="DDG: 3"];
"1000251" -> "1001183"  [label="DDG: decoder->num_hints"];
"1001181" -> "1001179"  [label="AST: "];
"1001182" -> "1001181"  [label="AST: "];
"1001179" -> "1001181"  [label="CFG: "];
"1001181" -> "1003716"  [label="DDG: ( decoder->num_hints + 7 ) >> 3"];
"1001181" -> "1001179"  [label="DDG: ( decoder->num_hints + 7 ) >> 3"];
"1001179" -> "1001175"  [label="AST: "];
"1001180" -> "1001179"  [label="AST: "];
"1001197" -> "1001179"  [label="CFG: "];
"1001201" -> "1001179"  [label="CFG: "];
"1001179" -> "1003716"  [label="DDG: maskbyte < (FT_UInt)(( decoder->num_hints + 7 ) >> 3)"];
"1001179" -> "1003716"  [label="DDG: (FT_UInt)(( decoder->num_hints + 7 ) >> 3)"];
"1001179" -> "1003716"  [label="DDG: maskbyte"];
"1001191" -> "1001179"  [label="DDG: maskbyte"];
"1001176" -> "1001179"  [label="DDG: maskbyte"];
"1001179" -> "1001191"  [label="DDG: maskbyte"];
"1001191" -> "1001190"  [label="AST: "];
"1001191" -> "1001192"  [label="CFG: "];
"1001192" -> "1001191"  [label="AST: "];
"1001194" -> "1001191"  [label="CFG: "];
"1001184" -> "1001188"  [label="CFG: "];
"1001185" -> "1001184"  [label="AST: "];
"1001188" -> "1001184"  [label="AST: "];
"1001189" -> "1001184"  [label="CFG: "];
"1001184" -> "1003716"  [label="DDG: decoder->num_hints"];
"1000251" -> "1001184"  [label="DDG: decoder->num_hints"];
"1001193" -> "1001190"  [label="AST: "];
"1001193" -> "1001194"  [label="CFG: "];
"1001194" -> "1001193"  [label="AST: "];
"1001180" -> "1001193"  [label="CFG: "];
"1000395" -> "1001193"  [label="DDG: ip"];
"1000678" -> "1001193"  [label="DDG: ip"];
"1000427" -> "1001193"  [label="DDG: ip[1]"];
"1000535" -> "1001193"  [label="DDG: ip[2]"];
"1000429" -> "1001193"  [label="DDG: ip[0]"];
"1000854" -> "1001193"  [label="DDG: ip"];
"1000527" -> "1001193"  [label="DDG: ip[1]"];
"1000519" -> "1001193"  [label="DDG: ip[0]"];
"1000533" -> "1001193"  [label="DDG: ip[3]"];
"1001193" -> "1001203"  [label="DDG: ip"];
"1001203" -> "1001202"  [label="AST: "];
"1001203" -> "1001205"  [label="CFG: "];
"1001204" -> "1001203"  [label="AST: "];
"1001205" -> "1001203"  [label="AST: "];
"1001206" -> "1001203"  [label="CFG: "];
"1001208" -> "1001203"  [label="CFG: "];
"1001203" -> "1003716"  [label="DDG: limit"];
"1001203" -> "1003716"  [label="DDG: ip"];
"1001203" -> "1003716"  [label="DDG: ip >= limit"];
"1001203" -> "1000386"  [label="DDG: ip"];
"1001203" -> "1000386"  [label="DDG: limit"];
"1000395" -> "1001203"  [label="DDG: ip"];
"1000678" -> "1001203"  [label="DDG: ip"];
"1000427" -> "1001203"  [label="DDG: ip[1]"];
"1000535" -> "1001203"  [label="DDG: ip[2]"];
"1000429" -> "1001203"  [label="DDG: ip[0]"];
"1000854" -> "1001203"  [label="DDG: ip"];
"1000527" -> "1001203"  [label="DDG: ip[1]"];
"1000519" -> "1001203"  [label="DDG: ip[0]"];
"1000533" -> "1001203"  [label="DDG: ip[3]"];
"1000386" -> "1001203"  [label="DDG: limit"];
"1000671" -> "1001203"  [label="DDG: limit"];
"1000386" -> "1000385"  [label="AST: "];
"1000386" -> "1000388"  [label="CFG: "];
"1000387" -> "1000386"  [label="AST: "];
"1000388" -> "1000386"  [label="AST: "];
"1000393" -> "1000386"  [label="CFG: "];
"1003697" -> "1000386"  [label="CFG: "];
"1000386" -> "1003716"  [label="DDG: limit"];
"1000386" -> "1003716"  [label="DDG: ip"];
"1000386" -> "1003716"  [label="DDG: ip < limit"];
"1000395" -> "1000386"  [label="DDG: ip"];
"1000678" -> "1000386"  [label="DDG: ip"];
"1003510" -> "1000386"  [label="DDG: ip"];
"1000357" -> "1000386"  [label="DDG: ip"];
"1000544" -> "1000386"  [label="DDG: ip"];
"1000503" -> "1000386"  [label="DDG: ip"];
"1000438" -> "1000386"  [label="DDG: ip"];
"1000535" -> "1000386"  [label="DDG: ip[2]"];
"1000533" -> "1000386"  [label="DDG: ip[3]"];
"1003654" -> "1000386"  [label="DDG: ip"];
"1000476" -> "1000386"  [label="DDG: ip"];
"1000429" -> "1000386"  [label="DDG: ip[0]"];
"1000854" -> "1000386"  [label="DDG: ip"];
"1000527" -> "1000386"  [label="DDG: ip[1]"];
"1000519" -> "1000386"  [label="DDG: ip[0]"];
"1000427" -> "1000386"  [label="DDG: ip[1]"];
"1003619" -> "1000386"  [label="DDG: ip"];
"1000348" -> "1000386"  [label="DDG: limit"];
"1000509" -> "1000386"  [label="DDG: limit"];
"1000486" -> "1000386"  [label="DDG: limit"];
"1003659" -> "1000386"  [label="DDG: limit"];
"1003515" -> "1000386"  [label="DDG: limit"];
"1000671" -> "1000386"  [label="DDG: limit"];
"1003624" -> "1000386"  [label="DDG: limit"];
"1000417" -> "1000386"  [label="DDG: limit"];
"1000460" -> "1000386"  [label="DDG: limit"];
"1000386" -> "1000395"  [label="DDG: ip"];
"1000386" -> "1000417"  [label="DDG: limit"];
"1000386" -> "1000460"  [label="DDG: limit"];
"1000386" -> "1000486"  [label="DDG: limit"];
"1000386" -> "1000509"  [label="DDG: limit"];
"1000386" -> "1000671"  [label="DDG: limit"];
"1000395" -> "1000394"  [label="AST: "];
"1000395" -> "1000396"  [label="CFG: "];
"1000396" -> "1000395"  [label="AST: "];
"1000394" -> "1000395"  [label="CFG: "];
"1000395" -> "1003716"  [label="DDG: ip"];
"1000429" -> "1000395"  [label="DDG: ip[0]"];
"1000427" -> "1000395"  [label="DDG: ip[1]"];
"1000535" -> "1000395"  [label="DDG: ip[2]"];
"1000533" -> "1000395"  [label="DDG: ip[3]"];
"1000527" -> "1000395"  [label="DDG: ip[1]"];
"1000519" -> "1000395"  [label="DDG: ip[0]"];
"1000395" -> "1000417"  [label="DDG: ip"];
"1000395" -> "1000418"  [label="DDG: ip"];
"1000395" -> "1000429"  [label="DDG: ip"];
"1000395" -> "1000427"  [label="DDG: ip"];
"1000395" -> "1000438"  [label="DDG: ip"];
"1000395" -> "1000460"  [label="DDG: ip"];
"1000395" -> "1000486"  [label="DDG: ip"];
"1000395" -> "1000509"  [label="DDG: ip"];
"1000395" -> "1000510"  [label="DDG: ip"];
"1000395" -> "1000519"  [label="DDG: ip"];
"1000395" -> "1000527"  [label="DDG: ip"];
"1000395" -> "1000535"  [label="DDG: ip"];
"1000395" -> "1000533"  [label="DDG: ip"];
"1000395" -> "1000544"  [label="DDG: ip"];
"1000395" -> "1000671"  [label="DDG: ip"];
"1000395" -> "1000854"  [label="DDG: ip"];
"1000395" -> "1003454"  [label="DDG: ip"];
"1000395" -> "1003563"  [label="DDG: ip"];
"1000395" -> "1003675"  [label="DDG: ip"];
"1000417" -> "1000416"  [label="AST: "];
"1000417" -> "1000421"  [label="CFG: "];
"1000418" -> "1000417"  [label="AST: "];
"1000421" -> "1000417"  [label="AST: "];
"1000422" -> "1000417"  [label="CFG: "];
"1000424" -> "1000417"  [label="CFG: "];
"1000417" -> "1003716"  [label="DDG: ip + 1"];
"1000417" -> "1003716"  [label="DDG: ip + 1 >= limit"];
"1000417" -> "1003716"  [label="DDG: limit"];
"1000429" -> "1000417"  [label="DDG: ip[0]"];
"1000427" -> "1000417"  [label="DDG: ip[1]"];
"1000535" -> "1000417"  [label="DDG: ip[2]"];
"1000533" -> "1000417"  [label="DDG: ip[3]"];
"1000527" -> "1000417"  [label="DDG: ip[1]"];
"1000519" -> "1000417"  [label="DDG: ip[0]"];
"1000418" -> "1000420"  [label="CFG: "];
"1000419" -> "1000418"  [label="AST: "];
"1000420" -> "1000418"  [label="AST: "];
"1000421" -> "1000418"  [label="CFG: "];
"1000418" -> "1003716"  [label="DDG: ip"];
"1000429" -> "1000418"  [label="DDG: ip[0]"];
"1000427" -> "1000418"  [label="DDG: ip[1]"];
"1000535" -> "1000418"  [label="DDG: ip[2]"];
"1000533" -> "1000418"  [label="DDG: ip[3]"];
"1000527" -> "1000418"  [label="DDG: ip[1]"];
"1000519" -> "1000418"  [label="DDG: ip[0]"];
"1000429" -> "1000428"  [label="AST: "];
"1000429" -> "1000431"  [label="CFG: "];
"1000430" -> "1000429"  [label="AST: "];
"1000431" -> "1000429"  [label="AST: "];
"1000434" -> "1000429"  [label="CFG: "];
"1000429" -> "1003716"  [label="DDG: ip[0]"];
"1000429" -> "1000428"  [label="DDG: ip[0]"];
"1000519" -> "1000429"  [label="DDG: ip[0]"];
"1000427" -> "1000429"  [label="DDG: ip[1]"];
"1000535" -> "1000429"  [label="DDG: ip[2]"];
"1000533" -> "1000429"  [label="DDG: ip[3]"];
"1000527" -> "1000429"  [label="DDG: ip[1]"];
"1000429" -> "1000427"  [label="DDG: ip[0]"];
"1000429" -> "1000438"  [label="DDG: ip[0]"];
"1000429" -> "1000460"  [label="DDG: ip[0]"];
"1000429" -> "1000476"  [label="DDG: ip[0]"];
"1000429" -> "1000486"  [label="DDG: ip[0]"];
"1000429" -> "1000503"  [label="DDG: ip[0]"];
"1000429" -> "1000509"  [label="DDG: ip[0]"];
"1000429" -> "1000510"  [label="DDG: ip[0]"];
"1000429" -> "1000519"  [label="DDG: ip[0]"];
"1000429" -> "1000527"  [label="DDG: ip[0]"];
"1000429" -> "1000535"  [label="DDG: ip[0]"];
"1000429" -> "1000533"  [label="DDG: ip[0]"];
"1000429" -> "1000544"  [label="DDG: ip[0]"];
"1000429" -> "1000671"  [label="DDG: ip[0]"];
"1000429" -> "1000678"  [label="DDG: ip[0]"];
"1000429" -> "1000854"  [label="DDG: ip[0]"];
"1000429" -> "1003454"  [label="DDG: ip[0]"];
"1000429" -> "1003563"  [label="DDG: ip[0]"];
"1000428" -> "1000427"  [label="AST: "];
"1000428" -> "1000434"  [label="CFG: "];
"1000434" -> "1000428"  [label="AST: "];
"1000436" -> "1000428"  [label="CFG: "];
"1000428" -> "1003716"  [label="DDG: (FT_Short)ip[0]"];
"1000428" -> "1000427"  [label="DDG: (FT_Short)ip[0]"];
"1000428" -> "1000427"  [label="DDG: 8"];
"1000427" -> "1000425"  [label="AST: "];
"1000427" -> "1000435"  [label="CFG: "];
"1000435" -> "1000427"  [label="AST: "];
"1000425" -> "1000427"  [label="CFG: "];
"1000427" -> "1003716"  [label="DDG: (FT_Short)ip[0] << 8"];
"1000427" -> "1003716"  [label="DDG: ip[1]"];
"1000427" -> "1000425"  [label="DDG: (FT_Short)ip[0] << 8"];
"1000427" -> "1000425"  [label="DDG: ip[1]"];
"1000527" -> "1000427"  [label="DDG: ip[1]"];
"1000535" -> "1000427"  [label="DDG: ip[2]"];
"1000533" -> "1000427"  [label="DDG: ip[3]"];
"1000519" -> "1000427"  [label="DDG: ip[0]"];
"1000427" -> "1000438"  [label="DDG: ip[1]"];
"1000427" -> "1000460"  [label="DDG: ip[1]"];
"1000427" -> "1000476"  [label="DDG: ip[1]"];
"1000427" -> "1000486"  [label="DDG: ip[1]"];
"1000427" -> "1000503"  [label="DDG: ip[1]"];
"1000427" -> "1000509"  [label="DDG: ip[1]"];
"1000427" -> "1000510"  [label="DDG: ip[1]"];
"1000427" -> "1000519"  [label="DDG: ip[1]"];
"1000427" -> "1000527"  [label="DDG: ip[1]"];
"1000427" -> "1000535"  [label="DDG: ip[1]"];
"1000427" -> "1000533"  [label="DDG: ip[1]"];
"1000427" -> "1000544"  [label="DDG: ip[1]"];
"1000427" -> "1000671"  [label="DDG: ip[1]"];
"1000427" -> "1000678"  [label="DDG: ip[1]"];
"1000427" -> "1000854"  [label="DDG: ip[1]"];
"1000427" -> "1003454"  [label="DDG: ip[1]"];
"1000427" -> "1003563"  [label="DDG: ip[1]"];
"1000425" -> "1000423"  [label="AST: "];
"1000426" -> "1000425"  [label="AST: "];
"1000423" -> "1000425"  [label="CFG: "];
"1000425" -> "1003716"  [label="DDG: ( (FT_Short)ip[0] << 8 ) | ip[1]"];
"1000425" -> "1000423"  [label="DDG: ( (FT_Short)ip[0] << 8 ) | ip[1]"];
"1000423" -> "1000415"  [label="AST: "];
"1000424" -> "1000423"  [label="AST: "];
"1000439" -> "1000423"  [label="CFG: "];
"1000423" -> "1003716"  [label="DDG: (FT_Short)( ( (FT_Short)ip[0] << 8 ) | ip[1] )"];
"1000423" -> "1003716"  [label="DDG: val"];
"1000423" -> "1000563"  [label="DDG: val"];
"1000563" -> "1000405"  [label="AST: "];
"1000563" -> "1000565"  [label="CFG: "];
"1000564" -> "1000563"  [label="AST: "];
"1000565" -> "1000563"  [label="AST: "];
"1000570" -> "1000563"  [label="CFG: "];
"1000563" -> "1003716"  [label="DDG: val           <<= shift"];
"1000563" -> "1003716"  [label="DDG: shift"];
"1000464" -> "1000563"  [label="DDG: val"];
"1000490" -> "1000563"  [label="DDG: val"];
"1000446" -> "1000563"  [label="DDG: val"];
"1000515" -> "1000563"  [label="DDG: val"];
"1000407" -> "1000563"  [label="DDG: shift"];
"1000551" -> "1000563"  [label="DDG: shift"];
"1000563" -> "1000566"  [label="DDG: val"];
"1000563" -> "1000575"  [label="DDG: val"];
"1000566" -> "1000405"  [label="AST: "];
"1000566" -> "1000572"  [label="CFG: "];
"1000567" -> "1000566"  [label="AST: "];
"1000572" -> "1000566"  [label="AST: "];
"1000576" -> "1000566"  [label="CFG: "];
"1000566" -> "1003716"  [label="DDG: *decoder->top++"];
"1000575" -> "1000574"  [label="AST: "];
"1000575" -> "1000577"  [label="CFG: "];
"1000576" -> "1000575"  [label="AST: "];
"1000577" -> "1000575"  [label="AST: "];
"1000574" -> "1000575"  [label="CFG: "];
"1000575" -> "1000574"  [label="DDG: val"];
"1000575" -> "1000574"  [label="DDG: 0xFFFFL"];
"1000575" -> "1000583"  [label="DDG: val"];
"1000575" -> "1000590"  [label="DDG: val"];
"1000574" -> "1000573"  [label="AST: "];
"1000580" -> "1000574"  [label="CFG: "];
"1000589" -> "1000574"  [label="CFG: "];
"1000574" -> "1003716"  [label="DDG: val & 0xFFFFL"];
"1000574" -> "1003716"  [label="DDG: !( val & 0xFFFFL )"];
"1000583" -> "1000581"  [label="AST: "];
"1000583" -> "1000585"  [label="CFG: "];
"1000584" -> "1000583"  [label="AST: "];
"1000585" -> "1000583"  [label="AST: "];
"1000581" -> "1000583"  [label="CFG: "];
"1000583" -> "1003716"  [label="DDG: val"];
"1000583" -> "1000581"  [label="DDG: val"];
"1000583" -> "1000581"  [label="DDG: 16"];
"1000581" -> "1000579"  [label="AST: "];
"1000582" -> "1000581"  [label="AST: "];
"1000578" -> "1000581"  [label="CFG: "];
"1000581" -> "1003716"  [label="DDG: val >> 16"];
"1000581" -> "1003716"  [label="DDG: (FT_Int32)( val >> 16 )"];
"1000590" -> "1000588"  [label="AST: "];
"1000590" -> "1000592"  [label="CFG: "];
"1000591" -> "1000590"  [label="AST: "];
"1000592" -> "1000590"  [label="AST: "];
"1000587" -> "1000590"  [label="CFG: "];
"1000590" -> "1003716"  [label="DDG: val / 65536.0"];
"1000590" -> "1003716"  [label="DDG: val"];
"1000438" -> "1000415"  [label="AST: "];
"1000438" -> "1000440"  [label="CFG: "];
"1000439" -> "1000438"  [label="AST: "];
"1000440" -> "1000438"  [label="AST: "];
"1000558" -> "1000438"  [label="CFG: "];
"1000438" -> "1003716"  [label="DDG: ip"];
"1000535" -> "1000438"  [label="DDG: ip[2]"];
"1000533" -> "1000438"  [label="DDG: ip[3]"];
"1000527" -> "1000438"  [label="DDG: ip[1]"];
"1000519" -> "1000438"  [label="DDG: ip[0]"];
"1000460" -> "1000459"  [label="AST: "];
"1000460" -> "1000462"  [label="CFG: "];
"1000461" -> "1000460"  [label="AST: "];
"1000462" -> "1000460"  [label="AST: "];
"1000463" -> "1000460"  [label="CFG: "];
"1000465" -> "1000460"  [label="CFG: "];
"1000460" -> "1003716"  [label="DDG: ip"];
"1000460" -> "1003716"  [label="DDG: ip >= limit"];
"1000460" -> "1003716"  [label="DDG: limit"];
"1000535" -> "1000460"  [label="DDG: ip[2]"];
"1000533" -> "1000460"  [label="DDG: ip[3]"];
"1000527" -> "1000460"  [label="DDG: ip[1]"];
"1000519" -> "1000460"  [label="DDG: ip[0]"];
"1000460" -> "1000476"  [label="DDG: ip"];
"1000476" -> "1000475"  [label="AST: "];
"1000476" -> "1000477"  [label="CFG: "];
"1000477" -> "1000476"  [label="AST: "];
"1000475" -> "1000476"  [label="CFG: "];
"1000476" -> "1003716"  [label="DDG: ip"];
"1000535" -> "1000476"  [label="DDG: ip[2]"];
"1000533" -> "1000476"  [label="DDG: ip[3]"];
"1000527" -> "1000476"  [label="DDG: ip[1]"];
"1000519" -> "1000476"  [label="DDG: ip[0]"];
"1000486" -> "1000485"  [label="AST: "];
"1000486" -> "1000488"  [label="CFG: "];
"1000487" -> "1000486"  [label="AST: "];
"1000488" -> "1000486"  [label="AST: "];
"1000489" -> "1000486"  [label="CFG: "];
"1000491" -> "1000486"  [label="CFG: "];
"1000486" -> "1003716"  [label="DDG: ip >= limit"];
"1000486" -> "1003716"  [label="DDG: limit"];
"1000486" -> "1003716"  [label="DDG: ip"];
"1000535" -> "1000486"  [label="DDG: ip[2]"];
"1000533" -> "1000486"  [label="DDG: ip[3]"];
"1000527" -> "1000486"  [label="DDG: ip[1]"];
"1000519" -> "1000486"  [label="DDG: ip[0]"];
"1000486" -> "1000503"  [label="DDG: ip"];
"1000503" -> "1000502"  [label="AST: "];
"1000503" -> "1000504"  [label="CFG: "];
"1000504" -> "1000503"  [label="AST: "];
"1000502" -> "1000503"  [label="CFG: "];
"1000503" -> "1003716"  [label="DDG: ip"];
"1000535" -> "1000503"  [label="DDG: ip[2]"];
"1000527" -> "1000503"  [label="DDG: ip[1]"];
"1000519" -> "1000503"  [label="DDG: ip[0]"];
"1000533" -> "1000503"  [label="DDG: ip[3]"];
"1000509" -> "1000508"  [label="AST: "];
"1000509" -> "1000513"  [label="CFG: "];
"1000510" -> "1000509"  [label="AST: "];
"1000513" -> "1000509"  [label="AST: "];
"1000514" -> "1000509"  [label="CFG: "];
"1000516" -> "1000509"  [label="CFG: "];
"1000509" -> "1003716"  [label="DDG: ip + 3 >= limit"];
"1000509" -> "1003716"  [label="DDG: limit"];
"1000509" -> "1003716"  [label="DDG: ip + 3"];
"1000535" -> "1000509"  [label="DDG: ip[2]"];
"1000533" -> "1000509"  [label="DDG: ip[3]"];
"1000527" -> "1000509"  [label="DDG: ip[1]"];
"1000519" -> "1000509"  [label="DDG: ip[0]"];
"1000510" -> "1000512"  [label="CFG: "];
"1000511" -> "1000510"  [label="AST: "];
"1000512" -> "1000510"  [label="AST: "];
"1000513" -> "1000510"  [label="CFG: "];
"1000510" -> "1003716"  [label="DDG: ip"];
"1000535" -> "1000510"  [label="DDG: ip[2]"];
"1000533" -> "1000510"  [label="DDG: ip[3]"];
"1000527" -> "1000510"  [label="DDG: ip[1]"];
"1000519" -> "1000510"  [label="DDG: ip[0]"];
"1000519" -> "1000518"  [label="AST: "];
"1000519" -> "1000521"  [label="CFG: "];
"1000520" -> "1000519"  [label="AST: "];
"1000521" -> "1000519"  [label="AST: "];
"1000524" -> "1000519"  [label="CFG: "];
"1000519" -> "1003716"  [label="DDG: ip[0]"];
"1000519" -> "1000518"  [label="DDG: ip[0]"];
"1000535" -> "1000519"  [label="DDG: ip[2]"];
"1000533" -> "1000519"  [label="DDG: ip[3]"];
"1000527" -> "1000519"  [label="DDG: ip[1]"];
"1000519" -> "1000527"  [label="DDG: ip[0]"];
"1000519" -> "1000535"  [label="DDG: ip[0]"];
"1000519" -> "1000533"  [label="DDG: ip[0]"];
"1000519" -> "1000544"  [label="DDG: ip[0]"];
"1000519" -> "1000671"  [label="DDG: ip[0]"];
"1000519" -> "1000678"  [label="DDG: ip[0]"];
"1000519" -> "1000854"  [label="DDG: ip[0]"];
"1000519" -> "1003454"  [label="DDG: ip[0]"];
"1000519" -> "1003563"  [label="DDG: ip[0]"];
"1000518" -> "1000517"  [label="AST: "];
"1000518" -> "1000524"  [label="CFG: "];
"1000524" -> "1000518"  [label="AST: "];
"1000528" -> "1000518"  [label="CFG: "];
"1000518" -> "1003716"  [label="DDG: (FT_Int32)ip[0]"];
"1000518" -> "1000517"  [label="DDG: (FT_Int32)ip[0]"];
"1000518" -> "1000517"  [label="DDG: 24"];
"1000517" -> "1000515"  [label="AST: "];
"1000517" -> "1000525"  [label="CFG: "];
"1000525" -> "1000517"  [label="AST: "];
"1000515" -> "1000517"  [label="CFG: "];
"1000517" -> "1003716"  [label="DDG: ( (FT_Int32)ip[1] << 16 ) |\n                ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3]"];
"1000517" -> "1003716"  [label="DDG: (FT_Int32)ip[0] << 24"];
"1000517" -> "1000515"  [label="DDG: (FT_Int32)ip[0] << 24"];
"1000517" -> "1000515"  [label="DDG: ( (FT_Int32)ip[1] << 16 ) |\n                ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3]"];
"1000525" -> "1000517"  [label="DDG: (FT_Int32)ip[1] << 16"];
"1000525" -> "1000517"  [label="DDG: ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3]"];
"1000515" -> "1000507"  [label="AST: "];
"1000516" -> "1000515"  [label="AST: "];
"1000545" -> "1000515"  [label="CFG: "];
"1000515" -> "1003716"  [label="DDG: val"];
"1000515" -> "1003716"  [label="DDG: ( (FT_Int32)ip[0] << 24 ) |\n                ( (FT_Int32)ip[1] << 16 ) |\n                ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3]"];
"1000527" -> "1000526"  [label="AST: "];
"1000527" -> "1000529"  [label="CFG: "];
"1000528" -> "1000527"  [label="AST: "];
"1000529" -> "1000527"  [label="AST: "];
"1000532" -> "1000527"  [label="CFG: "];
"1000527" -> "1003716"  [label="DDG: ip[1]"];
"1000527" -> "1000526"  [label="DDG: ip[1]"];
"1000535" -> "1000527"  [label="DDG: ip[2]"];
"1000533" -> "1000527"  [label="DDG: ip[3]"];
"1000527" -> "1000535"  [label="DDG: ip[1]"];
"1000527" -> "1000533"  [label="DDG: ip[1]"];
"1000527" -> "1000544"  [label="DDG: ip[1]"];
"1000527" -> "1000671"  [label="DDG: ip[1]"];
"1000527" -> "1000678"  [label="DDG: ip[1]"];
"1000527" -> "1000854"  [label="DDG: ip[1]"];
"1000527" -> "1003454"  [label="DDG: ip[1]"];
"1000527" -> "1003563"  [label="DDG: ip[1]"];
"1000526" -> "1000525"  [label="AST: "];
"1000526" -> "1000532"  [label="CFG: "];
"1000532" -> "1000526"  [label="AST: "];
"1000536" -> "1000526"  [label="CFG: "];
"1000526" -> "1003716"  [label="DDG: (FT_Int32)ip[1]"];
"1000526" -> "1000525"  [label="DDG: (FT_Int32)ip[1]"];
"1000526" -> "1000525"  [label="DDG: 16"];
"1000525" -> "1000533"  [label="CFG: "];
"1000533" -> "1000525"  [label="AST: "];
"1000525" -> "1003716"  [label="DDG: ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3]"];
"1000525" -> "1003716"  [label="DDG: (FT_Int32)ip[1] << 16"];
"1000533" -> "1000525"  [label="DDG: (FT_Int32)ip[2] <<  8"];
"1000533" -> "1000525"  [label="DDG: ip[3]"];
"1000535" -> "1000534"  [label="AST: "];
"1000535" -> "1000537"  [label="CFG: "];
"1000536" -> "1000535"  [label="AST: "];
"1000537" -> "1000535"  [label="AST: "];
"1000540" -> "1000535"  [label="CFG: "];
"1000535" -> "1003716"  [label="DDG: ip[2]"];
"1000535" -> "1000534"  [label="DDG: ip[2]"];
"1000533" -> "1000535"  [label="DDG: ip[3]"];
"1000535" -> "1000533"  [label="DDG: ip[2]"];
"1000535" -> "1000544"  [label="DDG: ip[2]"];
"1000535" -> "1000671"  [label="DDG: ip[2]"];
"1000535" -> "1000678"  [label="DDG: ip[2]"];
"1000535" -> "1000854"  [label="DDG: ip[2]"];
"1000535" -> "1003454"  [label="DDG: ip[2]"];
"1000535" -> "1003563"  [label="DDG: ip[2]"];
"1000534" -> "1000533"  [label="AST: "];
"1000534" -> "1000540"  [label="CFG: "];
"1000540" -> "1000534"  [label="AST: "];
"1000542" -> "1000534"  [label="CFG: "];
"1000534" -> "1003716"  [label="DDG: (FT_Int32)ip[2]"];
"1000534" -> "1000533"  [label="DDG: (FT_Int32)ip[2]"];
"1000534" -> "1000533"  [label="DDG: 8"];
"1000533" -> "1000541"  [label="CFG: "];
"1000541" -> "1000533"  [label="AST: "];
"1000533" -> "1003716"  [label="DDG: (FT_Int32)ip[2] <<  8"];
"1000533" -> "1003716"  [label="DDG: ip[3]"];
"1000533" -> "1000544"  [label="DDG: ip[3]"];
"1000533" -> "1000671"  [label="DDG: ip[3]"];
"1000533" -> "1000678"  [label="DDG: ip[3]"];
"1000533" -> "1000854"  [label="DDG: ip[3]"];
"1000533" -> "1003454"  [label="DDG: ip[3]"];
"1000533" -> "1003563"  [label="DDG: ip[3]"];
"1000544" -> "1000507"  [label="AST: "];
"1000544" -> "1000546"  [label="CFG: "];
"1000545" -> "1000544"  [label="AST: "];
"1000546" -> "1000544"  [label="AST: "];
"1000549" -> "1000544"  [label="CFG: "];
"1000544" -> "1003716"  [label="DDG: ip"];
"1000671" -> "1000670"  [label="AST: "];
"1000671" -> "1000673"  [label="CFG: "];
"1000672" -> "1000671"  [label="AST: "];
"1000673" -> "1000671"  [label="AST: "];
"1000674" -> "1000671"  [label="CFG: "];
"1000676" -> "1000671"  [label="CFG: "];
"1000671" -> "1003716"  [label="DDG: ip"];
"1000671" -> "1003716"  [label="DDG: ip >= limit"];
"1000671" -> "1003716"  [label="DDG: limit"];
"1000671" -> "1000678"  [label="DDG: ip"];
"1000678" -> "1000677"  [label="AST: "];
"1000678" -> "1000679"  [label="CFG: "];
"1000679" -> "1000678"  [label="AST: "];
"1000677" -> "1000678"  [label="CFG: "];
"1000678" -> "1003716"  [label="DDG: ip"];
"1000678" -> "1000854"  [label="DDG: ip"];
"1000678" -> "1003454"  [label="DDG: ip"];
"1000678" -> "1003563"  [label="DDG: ip"];
"1000678" -> "1003675"  [label="DDG: ip"];
"1000854" -> "1000682"  [label="AST: "];
"1000854" -> "1000855"  [label="CFG: "];
"1000855" -> "1000854"  [label="AST: "];
"1000856" -> "1000854"  [label="CFG: "];
"1000854" -> "1003716"  [label="DDG: ip"];
"1000854" -> "1003454"  [label="DDG: ip"];
"1000854" -> "1003563"  [label="DDG: ip"];
"1000854" -> "1003675"  [label="DDG: ip"];
"1003454" -> "1003413"  [label="AST: "];
"1003454" -> "1003458"  [label="CFG: "];
"1003455" -> "1003454"  [label="AST: "];
"1003458" -> "1003454"  [label="AST: "];
"1003460" -> "1003454"  [label="CFG: "];
"1003454" -> "1003716"  [label="DDG: ip"];
"1003563" -> "1003522"  [label="AST: "];
"1003563" -> "1003567"  [label="CFG: "];
"1003564" -> "1003563"  [label="AST: "];
"1003567" -> "1003563"  [label="AST: "];
"1003569" -> "1003563"  [label="CFG: "];
"1003563" -> "1003716"  [label="DDG: ip"];
"1003675" -> "1003674"  [label="AST: "];
"1003675" -> "1003680"  [label="CFG: "];
"1003676" -> "1003675"  [label="AST: "];
"1003680" -> "1003675"  [label="AST: "];
"1003683" -> "1003675"  [label="CFG: "];
"1003688" -> "1003675"  [label="CFG: "];
"1003675" -> "1003716"  [label="DDG: ip[-1] == 12"];
"1003675" -> "1003716"  [label="DDG: ip[-1]"];
"1002594" -> "1002593"  [label="AST: "];
"1002594" -> "1002598"  [label="CFG: "];
"1002595" -> "1002594"  [label="AST: "];
"1002598" -> "1002594"  [label="AST: "];
"1002603" -> "1002594"  [label="CFG: "];
"1002606" -> "1002594"  [label="CFG: "];
"1002594" -> "1003716"  [label="DDG: builder->current->n_points"];
"1002594" -> "1003716"  [label="DDG: hinter->hints"];
"1002594" -> "1003716"  [label="DDG: hinter->close( hinter->hints,\n                                  builder->current->n_points )"];
"1000381" -> "1002594"  [label="DDG: hinter->hints"];
"1002594" -> "1002604"  [label="DDG: hinter->hints"];
"1002604" -> "1002592"  [label="AST: "];
"1002604" -> "1002616"  [label="CFG: "];
"1002605" -> "1002604"  [label="AST: "];
"1002608" -> "1002604"  [label="AST: "];
"1002611" -> "1002604"  [label="AST: "];
"1002616" -> "1002604"  [label="AST: "];
"1002621" -> "1002604"  [label="CFG: "];
"1002604" -> "1003716"  [label="DDG: (PSH_Globals)builder->hints_globals"];
"1002604" -> "1003716"  [label="DDG: builder->current"];
"1002604" -> "1003716"  [label="DDG: hinter->apply( hinter->hints,\n                             builder->current,\n                             (PSH_Globals)builder->hints_globals,\n                             decoder->hint_mode )"];
"1002604" -> "1003716"  [label="DDG: decoder->hint_mode"];
"1002604" -> "1003716"  [label="DDG: hinter->hints"];
"1002611" -> "1002604"  [label="DDG: builder->hints_globals"];
"1001084" -> "1001086"  [label="CFG: "];
"1001085" -> "1001084"  [label="AST: "];
"1001086" -> "1001084"  [label="AST: "];
"1001084" -> "1003716"  [label="DDG: op"];
"1001084" -> "1003716"  [label="DDG: cff_op_hstemhm"];
"1001110" -> "1001109"  [label="AST: "];
"1001110" -> "1001112"  [label="CFG: "];
"1001111" -> "1001110"  [label="AST: "];
"1001112" -> "1001110"  [label="AST: "];
"1001113" -> "1001110"  [label="CFG: "];
"1001114" -> "1001110"  [label="CFG: "];
"1001110" -> "1003716"  [label="DDG: op"];
"1001110" -> "1003716"  [label="DDG: cff_op_hintmask"];
"1001110" -> "1000878"  [label="DDG: cff_op_hintmask"];
"1001146" -> "1001110"  [label="DDG: cff_op_hintmask"];
"1001110" -> "1001146"  [label="DDG: op"];
"1001110" -> "1001146"  [label="DDG: cff_op_hintmask"];
"1000878" -> "1000617"  [label="AST: "];
"1000878" -> "1000880"  [label="CFG: "];
"1000879" -> "1000878"  [label="AST: "];
"1000880" -> "1000878"  [label="AST: "];
"1000881" -> "1000878"  [label="CFG: "];
"1000878" -> "1003716"  [label="DDG: op"];
"1000878" -> "1003716"  [label="DDG: cff_op_hintmask"];
"1001146" -> "1000878"  [label="DDG: cff_op_hintmask"];
"1001146" -> "1001145"  [label="AST: "];
"1001146" -> "1001148"  [label="CFG: "];
"1001147" -> "1001146"  [label="AST: "];
"1001148" -> "1001146"  [label="AST: "];
"1001151" -> "1001146"  [label="CFG: "];
"1001165" -> "1001146"  [label="CFG: "];
"1001146" -> "1003716"  [label="DDG: cff_op_hintmask"];
"1001146" -> "1003716"  [label="DDG: op == cff_op_hintmask"];
"1001146" -> "1003716"  [label="DDG: op"];
"1001337" -> "1001335"  [label="AST: "];
"1001337" -> "1001339"  [label="CFG: "];
"1001338" -> "1001337"  [label="AST: "];
"1001339" -> "1001337"  [label="AST: "];
"1001335" -> "1001337"  [label="CFG: "];
"1001337" -> "1001335"  [label="DDG: op"];
"1001337" -> "1001335"  [label="DDG: cff_op_hlineto"];
"1001342" -> "1001337"  [label="DDG: cff_op_hlineto"];
"1001337" -> "1001342"  [label="DDG: op"];
"1001337" -> "1001342"  [label="DDG: cff_op_hlineto"];
"1001335" -> "1001333"  [label="AST: "];
"1001336" -> "1001335"  [label="AST: "];
"1001343" -> "1001335"  [label="CFG: "];
"1001335" -> "1003716"  [label="DDG: phase"];
"1001335" -> "1001393"  [label="DDG: phase"];
"1001393" -> "1001371"  [label="AST: "];
"1001393" -> "1001395"  [label="CFG: "];
"1001394" -> "1001393"  [label="AST: "];
"1001395" -> "1001393"  [label="AST: "];
"1001367" -> "1001393"  [label="CFG: "];
"1001393" -> "1003716"  [label="DDG: phase ^= 1"];
"1001393" -> "1003716"  [label="DDG: phase"];
"1001342" -> "1001341"  [label="AST: "];
"1001342" -> "1001344"  [label="CFG: "];
"1001343" -> "1001342"  [label="AST: "];
"1001344" -> "1001342"  [label="AST: "];
"1001345" -> "1001342"  [label="CFG: "];
"1001346" -> "1001342"  [label="CFG: "];
"1001342" -> "1003716"  [label="DDG: op"];
"1001342" -> "1003716"  [label="DDG: cff_op_hlineto"];
"1001342" -> "1000639"  [label="DDG: cff_op_hlineto"];
"1000639" -> "1000617"  [label="AST: "];
"1000639" -> "1000641"  [label="CFG: "];
"1000640" -> "1000639"  [label="AST: "];
"1000641" -> "1000639"  [label="AST: "];
"1000642" -> "1000639"  [label="CFG: "];
"1000639" -> "1003716"  [label="DDG: cff_op_hlineto"];
"1000639" -> "1003716"  [label="DDG: op"];
"1001712" -> "1001711"  [label="AST: "];
"1001712" -> "1001714"  [label="CFG: "];
"1001713" -> "1001712"  [label="AST: "];
"1001714" -> "1001712"  [label="AST: "];
"1001715" -> "1001712"  [label="CFG: "];
"1001716" -> "1001712"  [label="CFG: "];
"1001712" -> "1003716"  [label="DDG: op"];
"1001712" -> "1003716"  [label="DDG: cff_op_vhcurveto"];
"1001712" -> "1000928"  [label="DDG: cff_op_vhcurveto"];
"1001712" -> "1001758"  [label="DDG: op"];
"1000928" -> "1000617"  [label="AST: "];
"1000928" -> "1000930"  [label="CFG: "];
"1000929" -> "1000928"  [label="AST: "];
"1000930" -> "1000928"  [label="AST: "];
"1000931" -> "1000928"  [label="CFG: "];
"1000928" -> "1003716"  [label="DDG: op"];
"1000928" -> "1003716"  [label="DDG: cff_op_vhcurveto"];
"1001758" -> "1001756"  [label="AST: "];
"1001758" -> "1001760"  [label="CFG: "];
"1001759" -> "1001758"  [label="AST: "];
"1001760" -> "1001758"  [label="AST: "];
"1001756" -> "1001758"  [label="CFG: "];
"1001758" -> "1003716"  [label="DDG: op"];
"1001758" -> "1003716"  [label="DDG: cff_op_hvcurveto"];
"1001758" -> "1000933"  [label="DDG: cff_op_hvcurveto"];
"1001758" -> "1001756"  [label="DDG: op"];
"1001758" -> "1001756"  [label="DDG: cff_op_hvcurveto"];
"1000933" -> "1000617"  [label="AST: "];
"1000933" -> "1000935"  [label="CFG: "];
"1000934" -> "1000933"  [label="AST: "];
"1000935" -> "1000933"  [label="AST: "];
"1000936" -> "1000933"  [label="CFG: "];
"1000933" -> "1003716"  [label="DDG: cff_op_hvcurveto"];
"1000933" -> "1003716"  [label="DDG: op"];
"1001756" -> "1001707"  [label="AST: "];
"1001757" -> "1001756"  [label="AST: "];
"1001763" -> "1001756"  [label="CFG: "];
"1001756" -> "1003716"  [label="DDG: op == cff_op_hvcurveto"];
"1001756" -> "1003716"  [label="DDG: phase"];
"1001756" -> "1001865"  [label="DDG: phase"];
"1001865" -> "1001765"  [label="AST: "];
"1001865" -> "1001867"  [label="CFG: "];
"1001866" -> "1001865"  [label="AST: "];
"1001867" -> "1001865"  [label="AST: "];
"1001763" -> "1001865"  [label="CFG: "];
"1001865" -> "1003716"  [label="DDG: phase ^= 1"];
"1001865" -> "1003716"  [label="DDG: phase"];
}
