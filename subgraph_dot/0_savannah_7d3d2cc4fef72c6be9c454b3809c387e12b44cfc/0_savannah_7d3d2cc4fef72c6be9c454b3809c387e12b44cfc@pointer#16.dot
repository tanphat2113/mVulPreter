digraph "0_savannah_7d3d2cc4fef72c6be9c454b3809c387e12b44cfc@pointer" {
"1000220" [label="(MethodParameterIn,FT_Byte*      charstring_base)"];
"1000343" [label="(Call,zone->base           = charstring_base)"];
"1000357" [label="(Call,ip    = zone->cursor = zone->base)"];
"1000386" [label="(Call,ip < limit)"];
"1000395" [label="(Call,ip++)"];
"1000417" [label="(Call,ip + 1 >= limit)"];
"1000418" [label="(Call,ip + 1)"];
"1000429" [label="(Call,(FT_Short)ip[0])"];
"1000428" [label="(Call,(FT_Short)ip[0] << 8)"];
"1000427" [label="(Call,( (FT_Short)ip[0] << 8 ) | ip[1])"];
"1000425" [label="(Call,(FT_Short)( ( (FT_Short)ip[0] << 8 ) | ip[1] ))"];
"1000423" [label="(Call,val = (FT_Short)( ( (FT_Short)ip[0] << 8 ) | ip[1] ))"];
"1000563" [label="(Call,val           <<= shift)"];
"1000566" [label="(Call,*decoder->top++ = val)"];
"1000575" [label="(Call,val & 0xFFFFL)"];
"1000574" [label="(Call,!( val & 0xFFFFL ))"];
"1000583" [label="(Call,val >> 16)"];
"1000581" [label="(Call,(FT_Int32)( val >> 16 ))"];
"1000590" [label="(Call,val / 65536.0)"];
"1000438" [label="(Call,ip += 2)"];
"1000460" [label="(Call,ip >= limit)"];
"1000476" [label="(Call,ip++)"];
"1000486" [label="(Call,ip >= limit)"];
"1000503" [label="(Call,ip++)"];
"1000509" [label="(Call,ip + 3 >= limit)"];
"1000510" [label="(Call,ip + 3)"];
"1000519" [label="(Call,(FT_Int32)ip[0])"];
"1000518" [label="(Call,(FT_Int32)ip[0] << 24)"];
"1000517" [label="(Call,( (FT_Int32)ip[0] << 24 ) |\n                ( (FT_Int32)ip[1] << 16 ) |\n                ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3])"];
"1000515" [label="(Call,val = ( (FT_Int32)ip[0] << 24 ) |\n                ( (FT_Int32)ip[1] << 16 ) |\n                ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3])"];
"1000527" [label="(Call,(FT_Int32)ip[1])"];
"1000526" [label="(Call,(FT_Int32)ip[1] << 16)"];
"1000525" [label="(Call,( (FT_Int32)ip[1] << 16 ) |\n                ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3])"];
"1000535" [label="(Call,(FT_Int32)ip[2])"];
"1000534" [label="(Call,(FT_Int32)ip[2] <<  8)"];
"1000533" [label="(Call,( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3])"];
"1000544" [label="(Call,ip    += 4)"];
"1000671" [label="(Call,ip >= limit)"];
"1000678" [label="(Call,ip++)"];
"1000854" [label="(Call,ip--)"];
"1001149" [label="(Call,hinter->hintmask( hinter->hints,\n                                builder->current->n_points,\n                                decoder->num_hints,\n                                ip ))"];
"1001076" [label="(Call,hinter->stems( hinter->hints,\n                           ( op == cff_op_hstem || op == cff_op_hstemhm ),\n                           num_args / 2,\n                           args - ( num_args & ~1 ) ))"];
"1001122" [label="(Call,hinter->stems( hinter->hints,\n                             0,\n                             num_args / 2,\n                             args - ( num_args & ~1 ) ))"];
"1001163" [label="(Call,hinter->counter( hinter->hints,\n                               decoder->num_hints,\n                               ip ))"];
"1001095" [label="(Call,decoder->num_hints += num_args / 2)"];
"1001135" [label="(Call,decoder->num_hints += num_args / 2)"];
"1001183" [label="(Call,( decoder->num_hints + 7 ) >> 3)"];
"1001181" [label="(Call,(FT_UInt)(( decoder->num_hints + 7 ) >> 3))"];
"1001179" [label="(Call,maskbyte < (FT_UInt)(( decoder->num_hints + 7 ) >> 3))"];
"1001191" [label="(Call,maskbyte++)"];
"1001184" [label="(Call,decoder->num_hints + 7)"];
"1001193" [label="(Call,ip++)"];
"1001203" [label="(Call,ip >= limit)"];
"1002594" [label="(Call,hinter->close( hinter->hints,\n                                  builder->current->n_points ))"];
"1002604" [label="(Call,hinter->apply( hinter->hints,\n                             builder->current,\n                             (PSH_Globals)builder->hints_globals,\n                             decoder->hint_mode ))"];
"1003454" [label="(Call,zone->cursor = ip)"];
"1003563" [label="(Call,zone->cursor = ip)"];
"1003675" [label="(Call,ip[-1] == 12)"];
"1000359" [label="(Call,zone->cursor = zone->base)"];
"1003654" [label="(Call,ip    = zone->cursor)"];
"1000348" [label="(Call,limit = zone->limit  = charstring_base + charstring_len)"];
"1000350" [label="(Call,zone->limit  = charstring_base + charstring_len)"];
"1003659" [label="(Call,limit = zone->limit)"];
"1000354" [label="(Call,charstring_base + charstring_len)"];
"1002611" [label="(Call,(PSH_Globals)builder->hints_globals)"];
"1000584" [label="(Identifier,val)"];
"1000487" [label="(Identifier,ip)"];
"1003664" [label="(ControlStructure,break;)"];
"1000251" [label="(Call,decoder->num_hints  = 0)"];
"1000581" [label="(Call,(FT_Int32)( val >> 16 ))"];
"1000585" [label="(Literal,16)"];
"1000670" [label="(ControlStructure,if ( ip >= limit ))"];
"1000856" [label="(ControlStructure,break;)"];
"1000436" [label="(Identifier,ip)"];
"1001197" [label="(Literal,\"0x%02X\")"];
"1001201" [label="(Literal,\")\n\")"];
"1000524" [label="(Literal,24)"];
"1001204" [label="(Identifier,ip)"];
"1000422" [label="(ControlStructure,goto Syntax_Error;)"];
"1000533" [label="(Call,( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3])"];
"1000418" [label="(Call,ip + 1)"];
"1000358" [label="(Identifier,ip)"];
"1000527" [label="(Call,(FT_Int32)ip[1])"];
"1001203" [label="(Call,ip >= limit)"];
"1000431" [label="(Call,ip[0])"];
"1000578" [label="(Call,FT_TRACE4(( \" %ld\", (FT_Int32)( val >> 16 ) )))"];
"1003697" [label="(Literal,\"..end..\n\n\")"];
"1001123" [label="(Call,hinter->hints)"];
"1001179" [label="(Call,maskbyte < (FT_UInt)(( decoder->num_hints + 7 ) >> 3))"];
"1000435" [label="(Call,ip[1])"];
"1000427" [label="(Call,( (FT_Short)ip[0] << 8 ) | ip[1])"];
"1000514" [label="(ControlStructure,goto Syntax_Error;)"];
"1003674" [label="(ControlStructure,if ( ip[-1] == 12 ))"];
"1000678" [label="(Call,ip++)"];
"1003563" [label="(Call,zone->cursor = ip)"];
"1000588" [label="(Block,)"];
"1001192" [label="(Identifier,maskbyte)"];
"1001190" [label="(Block,)"];
"1000575" [label="(Call,val & 0xFFFFL)"];
"1003624" [label="(Call,limit         = zone->limit)"];
"1000485" [label="(ControlStructure,if ( ip >= limit ))"];
"1000677" [label="(Call,*ip++)"];
"1000551" [label="(Call,shift = 0)"];
"1000674" [label="(ControlStructure,goto Syntax_Error;)"];
"1001099" [label="(Call,num_args / 2)"];
"1000343" [label="(Call,zone->base           = charstring_base)"];
"1001181" [label="(Call,(FT_UInt)(( decoder->num_hints + 7 ) >> 3))"];
"1001189" [label="(Literal,3)"];
"1000489" [label="(ControlStructure,goto Syntax_Error;)"];
"1001161" [label="(Identifier,ip)"];
"1001087" [label="(Call,num_args / 2)"];
"1002608" [label="(Call,builder->current)"];
"1001097" [label="(Identifier,decoder)"];
"1000590" [label="(Call,val / 65536.0)"];
"1003413" [label="(Block,)"];
"1000855" [label="(Identifier,ip)"];
"1000567" [label="(Call,*decoder->top++)"];
"1000460" [label="(Call,ip >= limit)"];
"1001136" [label="(Call,decoder->num_hints)"];
"1003494" [label="(Call,zone->limit == zone->base)"];
"1000357" [label="(Call,ip    = zone->cursor = zone->base)"];
"1000388" [label="(Identifier,limit)"];
"1001164" [label="(Call,hinter->hints)"];
"1000491" [label="(Identifier,val)"];
"1000529" [label="(Call,ip[1])"];
"1003569" [label="(Identifier,zone)"];
"1000534" [label="(Call,(FT_Int32)ip[2] <<  8)"];
"1001149" [label="(Call,hinter->hintmask( hinter->hints,\n                                builder->current->n_points,\n                                decoder->num_hints,\n                                ip ))"];
"1003564" [label="(Call,zone->cursor)"];
"1001137" [label="(Identifier,decoder)"];
"1001119" [label="(Block,)"];
"1000381" [label="(Call,hinter->open( hinter->hints ))"];
"1001191" [label="(Call,maskbyte++)"];
"1003676" [label="(Call,ip[-1])"];
"1000545" [label="(Identifier,ip)"];
"1000387" [label="(Identifier,ip)"];
"1000477" [label="(Identifier,ip)"];
"1001176" [label="(Call,maskbyte = 0)"];
"1002604" [label="(Call,hinter->apply( hinter->hints,\n                             builder->current,\n                             (PSH_Globals)builder->hints_globals,\n                             decoder->hint_mode ))"];
"1000518" [label="(Call,(FT_Int32)ip[0] << 24)"];
"1001162" [label="(ControlStructure,else)"];
"1000515" [label="(Call,val = ( (FT_Int32)ip[0] << 24 ) |\n                ( (FT_Int32)ip[1] << 16 ) |\n                ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3])"];
"1000544" [label="(Call,ip    += 4)"];
"1000394" [label="(Call,*ip++)"];
"1000589" [label="(Literal,\" %.2f\")"];
"1002592" [label="(Block,)"];
"1002593" [label="(ControlStructure,if ( hinter->close( hinter->hints,\n                                  builder->current->n_points ) ))"];
"1000354" [label="(Call,charstring_base + charstring_len)"];
"1000486" [label="(Call,ip >= limit)"];
"1000671" [label="(Call,ip >= limit)"];
"1000549" [label="(Identifier,charstring_type)"];
"1003675" [label="(Call,ip[-1] == 12)"];
"1000507" [label="(Block,)"];
"1002598" [label="(Call,builder->current->n_points)"];
"1002616" [label="(Call,decoder->hint_mode)"];
"1000428" [label="(Call,(FT_Short)ip[0] << 8)"];
"1003515" [label="(Call,limit         = zone->limit)"];
"1000416" [label="(ControlStructure,if ( ip + 1 >= limit ))"];
"1000673" [label="(Identifier,limit)"];
"1000513" [label="(Identifier,limit)"];
"1000351" [label="(Call,zone->limit)"];
"1001175" [label="(ControlStructure,for ( maskbyte = 0;\n                  maskbyte < (FT_UInt)(( decoder->num_hints + 7 ) >> 3);\n                  maskbyte++, ip++ ))"];
"1000465" [label="(Identifier,val)"];
"1003455" [label="(Call,zone->cursor)"];
"1000476" [label="(Call,ip++)"];
"1001095" [label="(Call,decoder->num_hints += num_args / 2)"];
"1003603" [label="(Call,zone->limit == zone->base)"];
"1001130" [label="(Call,args - ( num_args & ~1 ))"];
"1001135" [label="(Call,decoder->num_hints += num_args / 2)"];
"1000439" [label="(Identifier,ip)"];
"1000577" [label="(Literal,0xFFFFL)"];
"1000367" [label="(Identifier,error)"];
"1000464" [label="(Call,val = ( (FT_Int32)v - 247 ) * 256 + *ip++ + 108)"];
"1000572" [label="(Identifier,val)"];
"1000385" [label="(ControlStructure,while ( ip < limit ))"];
"1000682" [label="(Block,)"];
"1000350" [label="(Call,zone->limit  = charstring_base + charstring_len)"];
"1000440" [label="(Literal,2)"];
"1000512" [label="(Literal,3)"];
"1001208" [label="(Identifier,args)"];
"1001143" [label="(Identifier,hinter)"];
"1000463" [label="(ControlStructure,goto Syntax_Error;)"];
"1000526" [label="(Call,(FT_Int32)ip[1] << 16)"];
"1001139" [label="(Call,num_args / 2)"];
"1003460" [label="(Identifier,zone)"];
"1000519" [label="(Call,(FT_Int32)ip[0])"];
"1001052" [label="(Block,)"];
"1000580" [label="(Literal,\" %ld\")"];
"1000591" [label="(Identifier,val)"];
"1000537" [label="(Call,ip[2])"];
"1003619" [label="(Call,ip            = zone->base)"];
"1000423" [label="(Call,val = (FT_Short)( ( (FT_Short)ip[0] << 8 ) | ip[1] ))"];
"1000419" [label="(Identifier,ip)"];
"1003522" [label="(Block,)"];
"1000558" [label="(Identifier,decoder)"];
"1001167" [label="(Call,decoder->num_hints)"];
"1001184" [label="(Call,decoder->num_hints + 7)"];
"1000363" [label="(Call,zone->base)"];
"1003716" [label="(MethodReturn,RET)"];
"1000420" [label="(Literal,1)"];
"1000504" [label="(Identifier,ip)"];
"1001127" [label="(Call,num_args / 2)"];
"1001170" [label="(Identifier,ip)"];
"1000434" [label="(Literal,8)"];
"1002603" [label="(ControlStructure,goto Syntax_Error;)"];
"1003655" [label="(Identifier,ip)"];
"1000540" [label="(Literal,8)"];
"1000576" [label="(Identifier,val)"];
"1001194" [label="(Identifier,ip)"];
"1001150" [label="(Call,hinter->hints)"];
"1000503" [label="(Call,ip++)"];
"1000446" [label="(Call,val = (FT_Int32)v - 139)"];
"1000525" [label="(Call,( (FT_Int32)ip[1] << 16 ) |\n                ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3])"];
"1001158" [label="(Call,decoder->num_hints)"];
"1001090" [label="(Call,args - ( num_args & ~1 ))"];
"1001096" [label="(Call,decoder->num_hints)"];
"1000517" [label="(Call,( (FT_Int32)ip[0] << 24 ) |\n                ( (FT_Int32)ip[1] << 16 ) |\n                ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3])"];
"1001180" [label="(Identifier,maskbyte)"];
"1000222" [label="(Block,)"];
"1000475" [label="(Call,*ip++)"];
"1000355" [label="(Identifier,charstring_base)"];
"1001120" [label="(ControlStructure,if ( hinter ))"];
"1000854" [label="(Call,ip--)"];
"1003661" [label="(Call,zone->limit)"];
"1000417" [label="(Call,ip + 1 >= limit)"];
"1000344" [label="(Call,zone->base)"];
"1001183" [label="(Call,( decoder->num_hints + 7 ) >> 3)"];
"1003458" [label="(Identifier,ip)"];
"1001076" [label="(Call,hinter->stems( hinter->hints,\n                           ( op == cff_op_hstem || op == cff_op_hstemhm ),\n                           num_args / 2,\n                           args - ( num_args & ~1 ) ))"];
"1000592" [label="(Literal,65536.0)"];
"1000425" [label="(Call,(FT_Short)( ( (FT_Short)ip[0] << 8 ) | ip[1] ))"];
"1001185" [label="(Call,decoder->num_hints)"];
"1000393" [label="(Identifier,v)"];
"1000348" [label="(Call,limit = zone->limit  = charstring_base + charstring_len)"];
"1001193" [label="(Call,ip++)"];
"1003683" [label="(Literal,\" %d\")"];
"1000535" [label="(Call,(FT_Int32)ip[2])"];
"1000672" [label="(Identifier,ip)"];
"1001188" [label="(Literal,7)"];
"1000396" [label="(Identifier,ip)"];
"1003659" [label="(Call,limit = zone->limit)"];
"1003660" [label="(Identifier,limit)"];
"1003567" [label="(Identifier,ip)"];
"1000360" [label="(Call,zone->cursor)"];
"1002606" [label="(Identifier,hinter)"];
"1000459" [label="(ControlStructure,if ( ip >= limit ))"];
"1000347" [label="(Identifier,charstring_base)"];
"1003481" [label="(Call,zone->cursor = zone->base)"];
"1000221" [label="(MethodParameterIn,FT_ULong      charstring_len)"];
"1000502" [label="(Call,*ip++)"];
"1002594" [label="(Call,hinter->close( hinter->hints,\n                                  builder->current->n_points ))"];
"1000424" [label="(Identifier,val)"];
"1000573" [label="(ControlStructure,if ( !( val & 0xFFFFL ) ))"];
"1001074" [label="(ControlStructure,if ( hinter ))"];
"1000386" [label="(Call,ip < limit)"];
"1000676" [label="(Identifier,v)"];
"1001145" [label="(ControlStructure,if ( op == cff_op_hintmask ))"];
"1003454" [label="(Call,zone->cursor = ip)"];
"1001163" [label="(Call,hinter->counter( hinter->hints,\n                               decoder->num_hints,\n                               ip ))"];
"1000359" [label="(Call,zone->cursor = zone->base)"];
"1000438" [label="(Call,ip += 2)"];
"1003688" [label="(Literal,\"\n\")"];
"1000510" [label="(Call,ip + 3)"];
"1000516" [label="(Identifier,val)"];
"1001206" [label="(ControlStructure,goto Syntax_Error;)"];
"1000509" [label="(Call,ip + 3 >= limit)"];
"1000563" [label="(Call,val           <<= shift)"];
"1002595" [label="(Call,hinter->hints)"];
"1000349" [label="(Identifier,limit)"];
"1000532" [label="(Literal,16)"];
"1000546" [label="(Literal,4)"];
"1000462" [label="(Identifier,limit)"];
"1001080" [label="(Call,op == cff_op_hstem || op == cff_op_hstemhm)"];
"1001077" [label="(Call,hinter->hints)"];
"1001202" [label="(ControlStructure,if ( ip >= limit ))"];
"1003579" [label="(Call,zone->limit  = decoder->globals[idx + 1])"];
"1000488" [label="(Identifier,limit)"];
"1000356" [label="(Identifier,charstring_len)"];
"1000511" [label="(Identifier,ip)"];
"1001122" [label="(Call,hinter->stems( hinter->hints,\n                             0,\n                             num_args / 2,\n                             args - ( num_args & ~1 ) ))"];
"1000395" [label="(Call,ip++)"];
"1003680" [label="(Literal,12)"];
"1003470" [label="(Call,zone->limit  = decoder->locals[idx + 1])"];
"1000461" [label="(Identifier,ip)"];
"1001153" [label="(Call,builder->current->n_points)"];
"1003590" [label="(Call,zone->cursor = zone->base)"];
"1000566" [label="(Call,*decoder->top++ = val)"];
"1001174" [label="(Literal,\" (maskbytes: \")"];
"1000541" [label="(Call,ip[3])"];
"1000583" [label="(Call,val >> 16)"];
"1000565" [label="(Identifier,shift)"];
"1003510" [label="(Call,ip            = zone->base)"];
"1000220" [label="(MethodParameterIn,FT_Byte*      charstring_base)"];
"1000564" [label="(Identifier,val)"];
"1000574" [label="(Call,!( val & 0xFFFFL ))"];
"1000521" [label="(Call,ip[0])"];
"1002605" [label="(Call,hinter->hints)"];
"1003656" [label="(Call,zone->cursor)"];
"1000542" [label="(Identifier,ip)"];
"1000570" [label="(Identifier,decoder)"];
"1000407" [label="(Call,shift = 16)"];
"1000587" [label="(Call,FT_TRACE4(( \" %.2f\", val / 65536.0 )))"];
"1000429" [label="(Call,(FT_Short)ip[0])"];
"1000579" [label="(Block,)"];
"1002621" [label="(Identifier,builder)"];
"1000490" [label="(Call,val = -( (FT_Int32)v - 251 ) * 256 - *ip++ - 108)"];
"1000415" [label="(Block,)"];
"1001126" [label="(Literal,0)"];
"1000421" [label="(Identifier,limit)"];
"1001103" [label="(Identifier,args)"];
"1000405" [label="(Block,)"];
"1001205" [label="(Identifier,limit)"];
"1000508" [label="(ControlStructure,if ( ip + 3 >= limit ))"];
"1000679" [label="(Identifier,ip)"];
"1003654" [label="(Call,ip    = zone->cursor)"];
"1000220" -> "1000218"  [label="AST: "];
"1000220" -> "1003716"  [label="DDG: charstring_base"];
"1000220" -> "1000343"  [label="DDG: charstring_base"];
"1000220" -> "1000348"  [label="DDG: charstring_base"];
"1000220" -> "1000350"  [label="DDG: charstring_base"];
"1000220" -> "1000354"  [label="DDG: charstring_base"];
"1000343" -> "1000222"  [label="AST: "];
"1000343" -> "1000347"  [label="CFG: "];
"1000344" -> "1000343"  [label="AST: "];
"1000347" -> "1000343"  [label="AST: "];
"1000349" -> "1000343"  [label="CFG: "];
"1000343" -> "1000357"  [label="DDG: zone->base"];
"1000343" -> "1000359"  [label="DDG: zone->base"];
"1000357" -> "1000222"  [label="AST: "];
"1000357" -> "1000359"  [label="CFG: "];
"1000358" -> "1000357"  [label="AST: "];
"1000359" -> "1000357"  [label="AST: "];
"1000367" -> "1000357"  [label="CFG: "];
"1000359" -> "1000357"  [label="DDG: zone->cursor"];
"1000357" -> "1000386"  [label="DDG: ip"];
"1000386" -> "1000385"  [label="AST: "];
"1000386" -> "1000388"  [label="CFG: "];
"1000387" -> "1000386"  [label="AST: "];
"1000388" -> "1000386"  [label="AST: "];
"1000393" -> "1000386"  [label="CFG: "];
"1003697" -> "1000386"  [label="CFG: "];
"1000386" -> "1003716"  [label="DDG: limit"];
"1000386" -> "1003716"  [label="DDG: ip"];
"1000386" -> "1003716"  [label="DDG: ip < limit"];
"1000395" -> "1000386"  [label="DDG: ip"];
"1000678" -> "1000386"  [label="DDG: ip"];
"1003510" -> "1000386"  [label="DDG: ip"];
"1000544" -> "1000386"  [label="DDG: ip"];
"1000503" -> "1000386"  [label="DDG: ip"];
"1000438" -> "1000386"  [label="DDG: ip"];
"1000535" -> "1000386"  [label="DDG: ip[2]"];
"1000533" -> "1000386"  [label="DDG: ip[3]"];
"1003654" -> "1000386"  [label="DDG: ip"];
"1000476" -> "1000386"  [label="DDG: ip"];
"1000429" -> "1000386"  [label="DDG: ip[0]"];
"1000854" -> "1000386"  [label="DDG: ip"];
"1000527" -> "1000386"  [label="DDG: ip[1]"];
"1001203" -> "1000386"  [label="DDG: ip"];
"1001203" -> "1000386"  [label="DDG: limit"];
"1000519" -> "1000386"  [label="DDG: ip[0]"];
"1000427" -> "1000386"  [label="DDG: ip[1]"];
"1003619" -> "1000386"  [label="DDG: ip"];
"1000348" -> "1000386"  [label="DDG: limit"];
"1000509" -> "1000386"  [label="DDG: limit"];
"1000486" -> "1000386"  [label="DDG: limit"];
"1003659" -> "1000386"  [label="DDG: limit"];
"1003515" -> "1000386"  [label="DDG: limit"];
"1000671" -> "1000386"  [label="DDG: limit"];
"1003624" -> "1000386"  [label="DDG: limit"];
"1000417" -> "1000386"  [label="DDG: limit"];
"1000460" -> "1000386"  [label="DDG: limit"];
"1000386" -> "1000395"  [label="DDG: ip"];
"1000386" -> "1000417"  [label="DDG: limit"];
"1000386" -> "1000460"  [label="DDG: limit"];
"1000386" -> "1000486"  [label="DDG: limit"];
"1000386" -> "1000509"  [label="DDG: limit"];
"1000386" -> "1000671"  [label="DDG: limit"];
"1000386" -> "1001203"  [label="DDG: limit"];
"1000395" -> "1000394"  [label="AST: "];
"1000395" -> "1000396"  [label="CFG: "];
"1000396" -> "1000395"  [label="AST: "];
"1000394" -> "1000395"  [label="CFG: "];
"1000395" -> "1003716"  [label="DDG: ip"];
"1000429" -> "1000395"  [label="DDG: ip[0]"];
"1000427" -> "1000395"  [label="DDG: ip[1]"];
"1000535" -> "1000395"  [label="DDG: ip[2]"];
"1000533" -> "1000395"  [label="DDG: ip[3]"];
"1000527" -> "1000395"  [label="DDG: ip[1]"];
"1000519" -> "1000395"  [label="DDG: ip[0]"];
"1000395" -> "1000417"  [label="DDG: ip"];
"1000395" -> "1000418"  [label="DDG: ip"];
"1000395" -> "1000429"  [label="DDG: ip"];
"1000395" -> "1000427"  [label="DDG: ip"];
"1000395" -> "1000438"  [label="DDG: ip"];
"1000395" -> "1000460"  [label="DDG: ip"];
"1000395" -> "1000486"  [label="DDG: ip"];
"1000395" -> "1000509"  [label="DDG: ip"];
"1000395" -> "1000510"  [label="DDG: ip"];
"1000395" -> "1000519"  [label="DDG: ip"];
"1000395" -> "1000527"  [label="DDG: ip"];
"1000395" -> "1000535"  [label="DDG: ip"];
"1000395" -> "1000533"  [label="DDG: ip"];
"1000395" -> "1000544"  [label="DDG: ip"];
"1000395" -> "1000671"  [label="DDG: ip"];
"1000395" -> "1000854"  [label="DDG: ip"];
"1000395" -> "1001149"  [label="DDG: ip"];
"1000395" -> "1001163"  [label="DDG: ip"];
"1000395" -> "1001193"  [label="DDG: ip"];
"1000395" -> "1001203"  [label="DDG: ip"];
"1000395" -> "1003454"  [label="DDG: ip"];
"1000395" -> "1003563"  [label="DDG: ip"];
"1000395" -> "1003675"  [label="DDG: ip"];
"1000417" -> "1000416"  [label="AST: "];
"1000417" -> "1000421"  [label="CFG: "];
"1000418" -> "1000417"  [label="AST: "];
"1000421" -> "1000417"  [label="AST: "];
"1000422" -> "1000417"  [label="CFG: "];
"1000424" -> "1000417"  [label="CFG: "];
"1000417" -> "1003716"  [label="DDG: ip + 1"];
"1000417" -> "1003716"  [label="DDG: ip + 1 >= limit"];
"1000417" -> "1003716"  [label="DDG: limit"];
"1000429" -> "1000417"  [label="DDG: ip[0]"];
"1000427" -> "1000417"  [label="DDG: ip[1]"];
"1000535" -> "1000417"  [label="DDG: ip[2]"];
"1000533" -> "1000417"  [label="DDG: ip[3]"];
"1000527" -> "1000417"  [label="DDG: ip[1]"];
"1000519" -> "1000417"  [label="DDG: ip[0]"];
"1000418" -> "1000420"  [label="CFG: "];
"1000419" -> "1000418"  [label="AST: "];
"1000420" -> "1000418"  [label="AST: "];
"1000421" -> "1000418"  [label="CFG: "];
"1000418" -> "1003716"  [label="DDG: ip"];
"1000429" -> "1000418"  [label="DDG: ip[0]"];
"1000427" -> "1000418"  [label="DDG: ip[1]"];
"1000535" -> "1000418"  [label="DDG: ip[2]"];
"1000533" -> "1000418"  [label="DDG: ip[3]"];
"1000527" -> "1000418"  [label="DDG: ip[1]"];
"1000519" -> "1000418"  [label="DDG: ip[0]"];
"1000429" -> "1000428"  [label="AST: "];
"1000429" -> "1000431"  [label="CFG: "];
"1000430" -> "1000429"  [label="AST: "];
"1000431" -> "1000429"  [label="AST: "];
"1000434" -> "1000429"  [label="CFG: "];
"1000429" -> "1003716"  [label="DDG: ip[0]"];
"1000429" -> "1000428"  [label="DDG: ip[0]"];
"1000519" -> "1000429"  [label="DDG: ip[0]"];
"1000427" -> "1000429"  [label="DDG: ip[1]"];
"1000535" -> "1000429"  [label="DDG: ip[2]"];
"1000533" -> "1000429"  [label="DDG: ip[3]"];
"1000527" -> "1000429"  [label="DDG: ip[1]"];
"1000429" -> "1000427"  [label="DDG: ip[0]"];
"1000429" -> "1000438"  [label="DDG: ip[0]"];
"1000429" -> "1000460"  [label="DDG: ip[0]"];
"1000429" -> "1000476"  [label="DDG: ip[0]"];
"1000429" -> "1000486"  [label="DDG: ip[0]"];
"1000429" -> "1000503"  [label="DDG: ip[0]"];
"1000429" -> "1000509"  [label="DDG: ip[0]"];
"1000429" -> "1000510"  [label="DDG: ip[0]"];
"1000429" -> "1000519"  [label="DDG: ip[0]"];
"1000429" -> "1000527"  [label="DDG: ip[0]"];
"1000429" -> "1000535"  [label="DDG: ip[0]"];
"1000429" -> "1000533"  [label="DDG: ip[0]"];
"1000429" -> "1000544"  [label="DDG: ip[0]"];
"1000429" -> "1000671"  [label="DDG: ip[0]"];
"1000429" -> "1000678"  [label="DDG: ip[0]"];
"1000429" -> "1000854"  [label="DDG: ip[0]"];
"1000429" -> "1001149"  [label="DDG: ip[0]"];
"1000429" -> "1001163"  [label="DDG: ip[0]"];
"1000429" -> "1001193"  [label="DDG: ip[0]"];
"1000429" -> "1001203"  [label="DDG: ip[0]"];
"1000429" -> "1003454"  [label="DDG: ip[0]"];
"1000429" -> "1003563"  [label="DDG: ip[0]"];
"1000428" -> "1000427"  [label="AST: "];
"1000428" -> "1000434"  [label="CFG: "];
"1000434" -> "1000428"  [label="AST: "];
"1000436" -> "1000428"  [label="CFG: "];
"1000428" -> "1003716"  [label="DDG: (FT_Short)ip[0]"];
"1000428" -> "1000427"  [label="DDG: (FT_Short)ip[0]"];
"1000428" -> "1000427"  [label="DDG: 8"];
"1000427" -> "1000425"  [label="AST: "];
"1000427" -> "1000435"  [label="CFG: "];
"1000435" -> "1000427"  [label="AST: "];
"1000425" -> "1000427"  [label="CFG: "];
"1000427" -> "1003716"  [label="DDG: (FT_Short)ip[0] << 8"];
"1000427" -> "1003716"  [label="DDG: ip[1]"];
"1000427" -> "1000425"  [label="DDG: (FT_Short)ip[0] << 8"];
"1000427" -> "1000425"  [label="DDG: ip[1]"];
"1000527" -> "1000427"  [label="DDG: ip[1]"];
"1000535" -> "1000427"  [label="DDG: ip[2]"];
"1000533" -> "1000427"  [label="DDG: ip[3]"];
"1000519" -> "1000427"  [label="DDG: ip[0]"];
"1000427" -> "1000438"  [label="DDG: ip[1]"];
"1000427" -> "1000460"  [label="DDG: ip[1]"];
"1000427" -> "1000476"  [label="DDG: ip[1]"];
"1000427" -> "1000486"  [label="DDG: ip[1]"];
"1000427" -> "1000503"  [label="DDG: ip[1]"];
"1000427" -> "1000509"  [label="DDG: ip[1]"];
"1000427" -> "1000510"  [label="DDG: ip[1]"];
"1000427" -> "1000519"  [label="DDG: ip[1]"];
"1000427" -> "1000527"  [label="DDG: ip[1]"];
"1000427" -> "1000535"  [label="DDG: ip[1]"];
"1000427" -> "1000533"  [label="DDG: ip[1]"];
"1000427" -> "1000544"  [label="DDG: ip[1]"];
"1000427" -> "1000671"  [label="DDG: ip[1]"];
"1000427" -> "1000678"  [label="DDG: ip[1]"];
"1000427" -> "1000854"  [label="DDG: ip[1]"];
"1000427" -> "1001149"  [label="DDG: ip[1]"];
"1000427" -> "1001163"  [label="DDG: ip[1]"];
"1000427" -> "1001193"  [label="DDG: ip[1]"];
"1000427" -> "1001203"  [label="DDG: ip[1]"];
"1000427" -> "1003454"  [label="DDG: ip[1]"];
"1000427" -> "1003563"  [label="DDG: ip[1]"];
"1000425" -> "1000423"  [label="AST: "];
"1000426" -> "1000425"  [label="AST: "];
"1000423" -> "1000425"  [label="CFG: "];
"1000425" -> "1003716"  [label="DDG: ( (FT_Short)ip[0] << 8 ) | ip[1]"];
"1000425" -> "1000423"  [label="DDG: ( (FT_Short)ip[0] << 8 ) | ip[1]"];
"1000423" -> "1000415"  [label="AST: "];
"1000424" -> "1000423"  [label="AST: "];
"1000439" -> "1000423"  [label="CFG: "];
"1000423" -> "1003716"  [label="DDG: (FT_Short)( ( (FT_Short)ip[0] << 8 ) | ip[1] )"];
"1000423" -> "1003716"  [label="DDG: val"];
"1000423" -> "1000563"  [label="DDG: val"];
"1000563" -> "1000405"  [label="AST: "];
"1000563" -> "1000565"  [label="CFG: "];
"1000564" -> "1000563"  [label="AST: "];
"1000565" -> "1000563"  [label="AST: "];
"1000570" -> "1000563"  [label="CFG: "];
"1000563" -> "1003716"  [label="DDG: val           <<= shift"];
"1000563" -> "1003716"  [label="DDG: shift"];
"1000464" -> "1000563"  [label="DDG: val"];
"1000490" -> "1000563"  [label="DDG: val"];
"1000446" -> "1000563"  [label="DDG: val"];
"1000515" -> "1000563"  [label="DDG: val"];
"1000407" -> "1000563"  [label="DDG: shift"];
"1000551" -> "1000563"  [label="DDG: shift"];
"1000563" -> "1000566"  [label="DDG: val"];
"1000563" -> "1000575"  [label="DDG: val"];
"1000566" -> "1000405"  [label="AST: "];
"1000566" -> "1000572"  [label="CFG: "];
"1000567" -> "1000566"  [label="AST: "];
"1000572" -> "1000566"  [label="AST: "];
"1000576" -> "1000566"  [label="CFG: "];
"1000566" -> "1003716"  [label="DDG: *decoder->top++"];
"1000575" -> "1000574"  [label="AST: "];
"1000575" -> "1000577"  [label="CFG: "];
"1000576" -> "1000575"  [label="AST: "];
"1000577" -> "1000575"  [label="AST: "];
"1000574" -> "1000575"  [label="CFG: "];
"1000575" -> "1000574"  [label="DDG: val"];
"1000575" -> "1000574"  [label="DDG: 0xFFFFL"];
"1000575" -> "1000583"  [label="DDG: val"];
"1000575" -> "1000590"  [label="DDG: val"];
"1000574" -> "1000573"  [label="AST: "];
"1000580" -> "1000574"  [label="CFG: "];
"1000589" -> "1000574"  [label="CFG: "];
"1000574" -> "1003716"  [label="DDG: val & 0xFFFFL"];
"1000574" -> "1003716"  [label="DDG: !( val & 0xFFFFL )"];
"1000583" -> "1000581"  [label="AST: "];
"1000583" -> "1000585"  [label="CFG: "];
"1000584" -> "1000583"  [label="AST: "];
"1000585" -> "1000583"  [label="AST: "];
"1000581" -> "1000583"  [label="CFG: "];
"1000583" -> "1003716"  [label="DDG: val"];
"1000583" -> "1000581"  [label="DDG: val"];
"1000583" -> "1000581"  [label="DDG: 16"];
"1000581" -> "1000579"  [label="AST: "];
"1000582" -> "1000581"  [label="AST: "];
"1000578" -> "1000581"  [label="CFG: "];
"1000581" -> "1003716"  [label="DDG: val >> 16"];
"1000581" -> "1003716"  [label="DDG: (FT_Int32)( val >> 16 )"];
"1000590" -> "1000588"  [label="AST: "];
"1000590" -> "1000592"  [label="CFG: "];
"1000591" -> "1000590"  [label="AST: "];
"1000592" -> "1000590"  [label="AST: "];
"1000587" -> "1000590"  [label="CFG: "];
"1000590" -> "1003716"  [label="DDG: val / 65536.0"];
"1000590" -> "1003716"  [label="DDG: val"];
"1000438" -> "1000415"  [label="AST: "];
"1000438" -> "1000440"  [label="CFG: "];
"1000439" -> "1000438"  [label="AST: "];
"1000440" -> "1000438"  [label="AST: "];
"1000558" -> "1000438"  [label="CFG: "];
"1000438" -> "1003716"  [label="DDG: ip"];
"1000535" -> "1000438"  [label="DDG: ip[2]"];
"1000533" -> "1000438"  [label="DDG: ip[3]"];
"1000527" -> "1000438"  [label="DDG: ip[1]"];
"1000519" -> "1000438"  [label="DDG: ip[0]"];
"1000460" -> "1000459"  [label="AST: "];
"1000460" -> "1000462"  [label="CFG: "];
"1000461" -> "1000460"  [label="AST: "];
"1000462" -> "1000460"  [label="AST: "];
"1000463" -> "1000460"  [label="CFG: "];
"1000465" -> "1000460"  [label="CFG: "];
"1000460" -> "1003716"  [label="DDG: ip"];
"1000460" -> "1003716"  [label="DDG: ip >= limit"];
"1000460" -> "1003716"  [label="DDG: limit"];
"1000535" -> "1000460"  [label="DDG: ip[2]"];
"1000533" -> "1000460"  [label="DDG: ip[3]"];
"1000527" -> "1000460"  [label="DDG: ip[1]"];
"1000519" -> "1000460"  [label="DDG: ip[0]"];
"1000460" -> "1000476"  [label="DDG: ip"];
"1000476" -> "1000475"  [label="AST: "];
"1000476" -> "1000477"  [label="CFG: "];
"1000477" -> "1000476"  [label="AST: "];
"1000475" -> "1000476"  [label="CFG: "];
"1000476" -> "1003716"  [label="DDG: ip"];
"1000535" -> "1000476"  [label="DDG: ip[2]"];
"1000533" -> "1000476"  [label="DDG: ip[3]"];
"1000527" -> "1000476"  [label="DDG: ip[1]"];
"1000519" -> "1000476"  [label="DDG: ip[0]"];
"1000486" -> "1000485"  [label="AST: "];
"1000486" -> "1000488"  [label="CFG: "];
"1000487" -> "1000486"  [label="AST: "];
"1000488" -> "1000486"  [label="AST: "];
"1000489" -> "1000486"  [label="CFG: "];
"1000491" -> "1000486"  [label="CFG: "];
"1000486" -> "1003716"  [label="DDG: ip >= limit"];
"1000486" -> "1003716"  [label="DDG: limit"];
"1000486" -> "1003716"  [label="DDG: ip"];
"1000535" -> "1000486"  [label="DDG: ip[2]"];
"1000533" -> "1000486"  [label="DDG: ip[3]"];
"1000527" -> "1000486"  [label="DDG: ip[1]"];
"1000519" -> "1000486"  [label="DDG: ip[0]"];
"1000486" -> "1000503"  [label="DDG: ip"];
"1000503" -> "1000502"  [label="AST: "];
"1000503" -> "1000504"  [label="CFG: "];
"1000504" -> "1000503"  [label="AST: "];
"1000502" -> "1000503"  [label="CFG: "];
"1000503" -> "1003716"  [label="DDG: ip"];
"1000535" -> "1000503"  [label="DDG: ip[2]"];
"1000527" -> "1000503"  [label="DDG: ip[1]"];
"1000519" -> "1000503"  [label="DDG: ip[0]"];
"1000533" -> "1000503"  [label="DDG: ip[3]"];
"1000509" -> "1000508"  [label="AST: "];
"1000509" -> "1000513"  [label="CFG: "];
"1000510" -> "1000509"  [label="AST: "];
"1000513" -> "1000509"  [label="AST: "];
"1000514" -> "1000509"  [label="CFG: "];
"1000516" -> "1000509"  [label="CFG: "];
"1000509" -> "1003716"  [label="DDG: ip + 3 >= limit"];
"1000509" -> "1003716"  [label="DDG: limit"];
"1000509" -> "1003716"  [label="DDG: ip + 3"];
"1000535" -> "1000509"  [label="DDG: ip[2]"];
"1000533" -> "1000509"  [label="DDG: ip[3]"];
"1000527" -> "1000509"  [label="DDG: ip[1]"];
"1000519" -> "1000509"  [label="DDG: ip[0]"];
"1000510" -> "1000512"  [label="CFG: "];
"1000511" -> "1000510"  [label="AST: "];
"1000512" -> "1000510"  [label="AST: "];
"1000513" -> "1000510"  [label="CFG: "];
"1000510" -> "1003716"  [label="DDG: ip"];
"1000535" -> "1000510"  [label="DDG: ip[2]"];
"1000533" -> "1000510"  [label="DDG: ip[3]"];
"1000527" -> "1000510"  [label="DDG: ip[1]"];
"1000519" -> "1000510"  [label="DDG: ip[0]"];
"1000519" -> "1000518"  [label="AST: "];
"1000519" -> "1000521"  [label="CFG: "];
"1000520" -> "1000519"  [label="AST: "];
"1000521" -> "1000519"  [label="AST: "];
"1000524" -> "1000519"  [label="CFG: "];
"1000519" -> "1003716"  [label="DDG: ip[0]"];
"1000519" -> "1000518"  [label="DDG: ip[0]"];
"1000535" -> "1000519"  [label="DDG: ip[2]"];
"1000533" -> "1000519"  [label="DDG: ip[3]"];
"1000527" -> "1000519"  [label="DDG: ip[1]"];
"1000519" -> "1000527"  [label="DDG: ip[0]"];
"1000519" -> "1000535"  [label="DDG: ip[0]"];
"1000519" -> "1000533"  [label="DDG: ip[0]"];
"1000519" -> "1000544"  [label="DDG: ip[0]"];
"1000519" -> "1000671"  [label="DDG: ip[0]"];
"1000519" -> "1000678"  [label="DDG: ip[0]"];
"1000519" -> "1000854"  [label="DDG: ip[0]"];
"1000519" -> "1001149"  [label="DDG: ip[0]"];
"1000519" -> "1001163"  [label="DDG: ip[0]"];
"1000519" -> "1001193"  [label="DDG: ip[0]"];
"1000519" -> "1001203"  [label="DDG: ip[0]"];
"1000519" -> "1003454"  [label="DDG: ip[0]"];
"1000519" -> "1003563"  [label="DDG: ip[0]"];
"1000518" -> "1000517"  [label="AST: "];
"1000518" -> "1000524"  [label="CFG: "];
"1000524" -> "1000518"  [label="AST: "];
"1000528" -> "1000518"  [label="CFG: "];
"1000518" -> "1003716"  [label="DDG: (FT_Int32)ip[0]"];
"1000518" -> "1000517"  [label="DDG: (FT_Int32)ip[0]"];
"1000518" -> "1000517"  [label="DDG: 24"];
"1000517" -> "1000515"  [label="AST: "];
"1000517" -> "1000525"  [label="CFG: "];
"1000525" -> "1000517"  [label="AST: "];
"1000515" -> "1000517"  [label="CFG: "];
"1000517" -> "1003716"  [label="DDG: ( (FT_Int32)ip[1] << 16 ) |\n                ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3]"];
"1000517" -> "1003716"  [label="DDG: (FT_Int32)ip[0] << 24"];
"1000517" -> "1000515"  [label="DDG: (FT_Int32)ip[0] << 24"];
"1000517" -> "1000515"  [label="DDG: ( (FT_Int32)ip[1] << 16 ) |\n                ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3]"];
"1000525" -> "1000517"  [label="DDG: (FT_Int32)ip[1] << 16"];
"1000525" -> "1000517"  [label="DDG: ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3]"];
"1000515" -> "1000507"  [label="AST: "];
"1000516" -> "1000515"  [label="AST: "];
"1000545" -> "1000515"  [label="CFG: "];
"1000515" -> "1003716"  [label="DDG: val"];
"1000515" -> "1003716"  [label="DDG: ( (FT_Int32)ip[0] << 24 ) |\n                ( (FT_Int32)ip[1] << 16 ) |\n                ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3]"];
"1000527" -> "1000526"  [label="AST: "];
"1000527" -> "1000529"  [label="CFG: "];
"1000528" -> "1000527"  [label="AST: "];
"1000529" -> "1000527"  [label="AST: "];
"1000532" -> "1000527"  [label="CFG: "];
"1000527" -> "1003716"  [label="DDG: ip[1]"];
"1000527" -> "1000526"  [label="DDG: ip[1]"];
"1000535" -> "1000527"  [label="DDG: ip[2]"];
"1000533" -> "1000527"  [label="DDG: ip[3]"];
"1000527" -> "1000535"  [label="DDG: ip[1]"];
"1000527" -> "1000533"  [label="DDG: ip[1]"];
"1000527" -> "1000544"  [label="DDG: ip[1]"];
"1000527" -> "1000671"  [label="DDG: ip[1]"];
"1000527" -> "1000678"  [label="DDG: ip[1]"];
"1000527" -> "1000854"  [label="DDG: ip[1]"];
"1000527" -> "1001149"  [label="DDG: ip[1]"];
"1000527" -> "1001163"  [label="DDG: ip[1]"];
"1000527" -> "1001193"  [label="DDG: ip[1]"];
"1000527" -> "1001203"  [label="DDG: ip[1]"];
"1000527" -> "1003454"  [label="DDG: ip[1]"];
"1000527" -> "1003563"  [label="DDG: ip[1]"];
"1000526" -> "1000525"  [label="AST: "];
"1000526" -> "1000532"  [label="CFG: "];
"1000532" -> "1000526"  [label="AST: "];
"1000536" -> "1000526"  [label="CFG: "];
"1000526" -> "1003716"  [label="DDG: (FT_Int32)ip[1]"];
"1000526" -> "1000525"  [label="DDG: (FT_Int32)ip[1]"];
"1000526" -> "1000525"  [label="DDG: 16"];
"1000525" -> "1000533"  [label="CFG: "];
"1000533" -> "1000525"  [label="AST: "];
"1000525" -> "1003716"  [label="DDG: ( (FT_Int32)ip[2] <<  8 ) |\n                            ip[3]"];
"1000525" -> "1003716"  [label="DDG: (FT_Int32)ip[1] << 16"];
"1000533" -> "1000525"  [label="DDG: (FT_Int32)ip[2] <<  8"];
"1000533" -> "1000525"  [label="DDG: ip[3]"];
"1000535" -> "1000534"  [label="AST: "];
"1000535" -> "1000537"  [label="CFG: "];
"1000536" -> "1000535"  [label="AST: "];
"1000537" -> "1000535"  [label="AST: "];
"1000540" -> "1000535"  [label="CFG: "];
"1000535" -> "1003716"  [label="DDG: ip[2]"];
"1000535" -> "1000534"  [label="DDG: ip[2]"];
"1000533" -> "1000535"  [label="DDG: ip[3]"];
"1000535" -> "1000533"  [label="DDG: ip[2]"];
"1000535" -> "1000544"  [label="DDG: ip[2]"];
"1000535" -> "1000671"  [label="DDG: ip[2]"];
"1000535" -> "1000678"  [label="DDG: ip[2]"];
"1000535" -> "1000854"  [label="DDG: ip[2]"];
"1000535" -> "1001149"  [label="DDG: ip[2]"];
"1000535" -> "1001163"  [label="DDG: ip[2]"];
"1000535" -> "1001193"  [label="DDG: ip[2]"];
"1000535" -> "1001203"  [label="DDG: ip[2]"];
"1000535" -> "1003454"  [label="DDG: ip[2]"];
"1000535" -> "1003563"  [label="DDG: ip[2]"];
"1000534" -> "1000533"  [label="AST: "];
"1000534" -> "1000540"  [label="CFG: "];
"1000540" -> "1000534"  [label="AST: "];
"1000542" -> "1000534"  [label="CFG: "];
"1000534" -> "1003716"  [label="DDG: (FT_Int32)ip[2]"];
"1000534" -> "1000533"  [label="DDG: (FT_Int32)ip[2]"];
"1000534" -> "1000533"  [label="DDG: 8"];
"1000533" -> "1000541"  [label="CFG: "];
"1000541" -> "1000533"  [label="AST: "];
"1000533" -> "1003716"  [label="DDG: (FT_Int32)ip[2] <<  8"];
"1000533" -> "1003716"  [label="DDG: ip[3]"];
"1000533" -> "1000544"  [label="DDG: ip[3]"];
"1000533" -> "1000671"  [label="DDG: ip[3]"];
"1000533" -> "1000678"  [label="DDG: ip[3]"];
"1000533" -> "1000854"  [label="DDG: ip[3]"];
"1000533" -> "1001149"  [label="DDG: ip[3]"];
"1000533" -> "1001163"  [label="DDG: ip[3]"];
"1000533" -> "1001193"  [label="DDG: ip[3]"];
"1000533" -> "1001203"  [label="DDG: ip[3]"];
"1000533" -> "1003454"  [label="DDG: ip[3]"];
"1000533" -> "1003563"  [label="DDG: ip[3]"];
"1000544" -> "1000507"  [label="AST: "];
"1000544" -> "1000546"  [label="CFG: "];
"1000545" -> "1000544"  [label="AST: "];
"1000546" -> "1000544"  [label="AST: "];
"1000549" -> "1000544"  [label="CFG: "];
"1000544" -> "1003716"  [label="DDG: ip"];
"1000671" -> "1000670"  [label="AST: "];
"1000671" -> "1000673"  [label="CFG: "];
"1000672" -> "1000671"  [label="AST: "];
"1000673" -> "1000671"  [label="AST: "];
"1000674" -> "1000671"  [label="CFG: "];
"1000676" -> "1000671"  [label="CFG: "];
"1000671" -> "1003716"  [label="DDG: ip"];
"1000671" -> "1003716"  [label="DDG: ip >= limit"];
"1000671" -> "1003716"  [label="DDG: limit"];
"1000671" -> "1000678"  [label="DDG: ip"];
"1000671" -> "1001203"  [label="DDG: limit"];
"1000678" -> "1000677"  [label="AST: "];
"1000678" -> "1000679"  [label="CFG: "];
"1000679" -> "1000678"  [label="AST: "];
"1000677" -> "1000678"  [label="CFG: "];
"1000678" -> "1003716"  [label="DDG: ip"];
"1000678" -> "1000854"  [label="DDG: ip"];
"1000678" -> "1001149"  [label="DDG: ip"];
"1000678" -> "1001163"  [label="DDG: ip"];
"1000678" -> "1001193"  [label="DDG: ip"];
"1000678" -> "1001203"  [label="DDG: ip"];
"1000678" -> "1003454"  [label="DDG: ip"];
"1000678" -> "1003563"  [label="DDG: ip"];
"1000678" -> "1003675"  [label="DDG: ip"];
"1000854" -> "1000682"  [label="AST: "];
"1000854" -> "1000855"  [label="CFG: "];
"1000855" -> "1000854"  [label="AST: "];
"1000856" -> "1000854"  [label="CFG: "];
"1000854" -> "1003716"  [label="DDG: ip"];
"1000854" -> "1001149"  [label="DDG: ip"];
"1000854" -> "1001163"  [label="DDG: ip"];
"1000854" -> "1001193"  [label="DDG: ip"];
"1000854" -> "1001203"  [label="DDG: ip"];
"1000854" -> "1003454"  [label="DDG: ip"];
"1000854" -> "1003563"  [label="DDG: ip"];
"1000854" -> "1003675"  [label="DDG: ip"];
"1001149" -> "1001145"  [label="AST: "];
"1001149" -> "1001161"  [label="CFG: "];
"1001150" -> "1001149"  [label="AST: "];
"1001153" -> "1001149"  [label="AST: "];
"1001158" -> "1001149"  [label="AST: "];
"1001161" -> "1001149"  [label="AST: "];
"1001174" -> "1001149"  [label="CFG: "];
"1001149" -> "1003716"  [label="DDG: hinter->hints"];
"1001149" -> "1003716"  [label="DDG: builder->current->n_points"];
"1001149" -> "1003716"  [label="DDG: hinter->hintmask( hinter->hints,\n                                builder->current->n_points,\n                                decoder->num_hints,\n                                ip )"];
"1001149" -> "1001076"  [label="DDG: hinter->hints"];
"1001149" -> "1001095"  [label="DDG: decoder->num_hints"];
"1001149" -> "1001122"  [label="DDG: hinter->hints"];
"1001149" -> "1001135"  [label="DDG: decoder->num_hints"];
"1001076" -> "1001149"  [label="DDG: hinter->hints"];
"1000381" -> "1001149"  [label="DDG: hinter->hints"];
"1001163" -> "1001149"  [label="DDG: hinter->hints"];
"1001163" -> "1001149"  [label="DDG: decoder->num_hints"];
"1001122" -> "1001149"  [label="DDG: hinter->hints"];
"1000251" -> "1001149"  [label="DDG: decoder->num_hints"];
"1001135" -> "1001149"  [label="DDG: decoder->num_hints"];
"1001095" -> "1001149"  [label="DDG: decoder->num_hints"];
"1001149" -> "1001163"  [label="DDG: hinter->hints"];
"1001149" -> "1001163"  [label="DDG: decoder->num_hints"];
"1001149" -> "1001183"  [label="DDG: decoder->num_hints"];
"1001149" -> "1001184"  [label="DDG: decoder->num_hints"];
"1001149" -> "1001193"  [label="DDG: ip"];
"1001149" -> "1001203"  [label="DDG: ip"];
"1001149" -> "1002594"  [label="DDG: hinter->hints"];
"1001149" -> "1002594"  [label="DDG: builder->current->n_points"];
"1001076" -> "1001074"  [label="AST: "];
"1001076" -> "1001090"  [label="CFG: "];
"1001077" -> "1001076"  [label="AST: "];
"1001080" -> "1001076"  [label="AST: "];
"1001087" -> "1001076"  [label="AST: "];
"1001090" -> "1001076"  [label="AST: "];
"1001097" -> "1001076"  [label="CFG: "];
"1001076" -> "1003716"  [label="DDG: op == cff_op_hstem || op == cff_op_hstemhm"];
"1001076" -> "1003716"  [label="DDG: hinter->hints"];
"1001076" -> "1003716"  [label="DDG: hinter->stems( hinter->hints,\n                           ( op == cff_op_hstem || op == cff_op_hstemhm ),\n                           num_args / 2,\n                           args - ( num_args & ~1 ) )"];
"1001076" -> "1003716"  [label="DDG: args - ( num_args & ~1 )"];
"1000381" -> "1001076"  [label="DDG: hinter->hints"];
"1001163" -> "1001076"  [label="DDG: hinter->hints"];
"1001122" -> "1001076"  [label="DDG: hinter->hints"];
"1001080" -> "1001076"  [label="DDG: op == cff_op_hstem"];
"1001080" -> "1001076"  [label="DDG: op == cff_op_hstemhm"];
"1001087" -> "1001076"  [label="DDG: num_args"];
"1001087" -> "1001076"  [label="DDG: 2"];
"1001090" -> "1001076"  [label="DDG: args"];
"1001090" -> "1001076"  [label="DDG: num_args & ~1"];
"1001076" -> "1001122"  [label="DDG: hinter->hints"];
"1001076" -> "1001163"  [label="DDG: hinter->hints"];
"1001076" -> "1002594"  [label="DDG: hinter->hints"];
"1001122" -> "1001120"  [label="AST: "];
"1001122" -> "1001130"  [label="CFG: "];
"1001123" -> "1001122"  [label="AST: "];
"1001126" -> "1001122"  [label="AST: "];
"1001127" -> "1001122"  [label="AST: "];
"1001130" -> "1001122"  [label="AST: "];
"1001137" -> "1001122"  [label="CFG: "];
"1001122" -> "1003716"  [label="DDG: args - ( num_args & ~1 )"];
"1001122" -> "1003716"  [label="DDG: hinter->hints"];
"1001122" -> "1003716"  [label="DDG: hinter->stems( hinter->hints,\n                             0,\n                             num_args / 2,\n                             args - ( num_args & ~1 ) )"];
"1000381" -> "1001122"  [label="DDG: hinter->hints"];
"1001163" -> "1001122"  [label="DDG: hinter->hints"];
"1001127" -> "1001122"  [label="DDG: num_args"];
"1001127" -> "1001122"  [label="DDG: 2"];
"1001130" -> "1001122"  [label="DDG: args"];
"1001130" -> "1001122"  [label="DDG: num_args & ~1"];
"1001122" -> "1001163"  [label="DDG: hinter->hints"];
"1001122" -> "1002594"  [label="DDG: hinter->hints"];
"1001163" -> "1001162"  [label="AST: "];
"1001163" -> "1001170"  [label="CFG: "];
"1001164" -> "1001163"  [label="AST: "];
"1001167" -> "1001163"  [label="AST: "];
"1001170" -> "1001163"  [label="AST: "];
"1001174" -> "1001163"  [label="CFG: "];
"1001163" -> "1003716"  [label="DDG: hinter->counter( hinter->hints,\n                               decoder->num_hints,\n                               ip )"];
"1001163" -> "1003716"  [label="DDG: hinter->hints"];
"1001163" -> "1001095"  [label="DDG: decoder->num_hints"];
"1001163" -> "1001135"  [label="DDG: decoder->num_hints"];
"1000381" -> "1001163"  [label="DDG: hinter->hints"];
"1000251" -> "1001163"  [label="DDG: decoder->num_hints"];
"1001135" -> "1001163"  [label="DDG: decoder->num_hints"];
"1001095" -> "1001163"  [label="DDG: decoder->num_hints"];
"1001163" -> "1001183"  [label="DDG: decoder->num_hints"];
"1001163" -> "1001184"  [label="DDG: decoder->num_hints"];
"1001163" -> "1001193"  [label="DDG: ip"];
"1001163" -> "1001203"  [label="DDG: ip"];
"1001163" -> "1002594"  [label="DDG: hinter->hints"];
"1001095" -> "1001052"  [label="AST: "];
"1001095" -> "1001099"  [label="CFG: "];
"1001096" -> "1001095"  [label="AST: "];
"1001099" -> "1001095"  [label="AST: "];
"1001103" -> "1001095"  [label="CFG: "];
"1001095" -> "1003716"  [label="DDG: num_args / 2"];
"1001095" -> "1003716"  [label="DDG: decoder->num_hints"];
"1001099" -> "1001095"  [label="DDG: num_args"];
"1001099" -> "1001095"  [label="DDG: 2"];
"1000251" -> "1001095"  [label="DDG: decoder->num_hints"];
"1001135" -> "1001095"  [label="DDG: decoder->num_hints"];
"1001095" -> "1001135"  [label="DDG: decoder->num_hints"];
"1001095" -> "1001183"  [label="DDG: decoder->num_hints"];
"1001095" -> "1001184"  [label="DDG: decoder->num_hints"];
"1001135" -> "1001119"  [label="AST: "];
"1001135" -> "1001139"  [label="CFG: "];
"1001136" -> "1001135"  [label="AST: "];
"1001139" -> "1001135"  [label="AST: "];
"1001143" -> "1001135"  [label="CFG: "];
"1001135" -> "1003716"  [label="DDG: num_args / 2"];
"1001139" -> "1001135"  [label="DDG: num_args"];
"1001139" -> "1001135"  [label="DDG: 2"];
"1000251" -> "1001135"  [label="DDG: decoder->num_hints"];
"1001135" -> "1001183"  [label="DDG: decoder->num_hints"];
"1001135" -> "1001184"  [label="DDG: decoder->num_hints"];
"1001183" -> "1001181"  [label="AST: "];
"1001183" -> "1001189"  [label="CFG: "];
"1001184" -> "1001183"  [label="AST: "];
"1001189" -> "1001183"  [label="AST: "];
"1001181" -> "1001183"  [label="CFG: "];
"1001183" -> "1003716"  [label="DDG: decoder->num_hints + 7"];
"1001183" -> "1001181"  [label="DDG: decoder->num_hints + 7"];
"1001183" -> "1001181"  [label="DDG: 3"];
"1000251" -> "1001183"  [label="DDG: decoder->num_hints"];
"1001181" -> "1001179"  [label="AST: "];
"1001182" -> "1001181"  [label="AST: "];
"1001179" -> "1001181"  [label="CFG: "];
"1001181" -> "1003716"  [label="DDG: ( decoder->num_hints + 7 ) >> 3"];
"1001181" -> "1001179"  [label="DDG: ( decoder->num_hints + 7 ) >> 3"];
"1001179" -> "1001175"  [label="AST: "];
"1001180" -> "1001179"  [label="AST: "];
"1001197" -> "1001179"  [label="CFG: "];
"1001201" -> "1001179"  [label="CFG: "];
"1001179" -> "1003716"  [label="DDG: maskbyte < (FT_UInt)(( decoder->num_hints + 7 ) >> 3)"];
"1001179" -> "1003716"  [label="DDG: (FT_UInt)(( decoder->num_hints + 7 ) >> 3)"];
"1001179" -> "1003716"  [label="DDG: maskbyte"];
"1001191" -> "1001179"  [label="DDG: maskbyte"];
"1001176" -> "1001179"  [label="DDG: maskbyte"];
"1001179" -> "1001191"  [label="DDG: maskbyte"];
"1001191" -> "1001190"  [label="AST: "];
"1001191" -> "1001192"  [label="CFG: "];
"1001192" -> "1001191"  [label="AST: "];
"1001194" -> "1001191"  [label="CFG: "];
"1001184" -> "1001188"  [label="CFG: "];
"1001185" -> "1001184"  [label="AST: "];
"1001188" -> "1001184"  [label="AST: "];
"1001189" -> "1001184"  [label="CFG: "];
"1001184" -> "1003716"  [label="DDG: decoder->num_hints"];
"1000251" -> "1001184"  [label="DDG: decoder->num_hints"];
"1001193" -> "1001190"  [label="AST: "];
"1001193" -> "1001194"  [label="CFG: "];
"1001194" -> "1001193"  [label="AST: "];
"1001180" -> "1001193"  [label="CFG: "];
"1001193" -> "1001203"  [label="DDG: ip"];
"1001203" -> "1001202"  [label="AST: "];
"1001203" -> "1001205"  [label="CFG: "];
"1001204" -> "1001203"  [label="AST: "];
"1001205" -> "1001203"  [label="AST: "];
"1001206" -> "1001203"  [label="CFG: "];
"1001208" -> "1001203"  [label="CFG: "];
"1001203" -> "1003716"  [label="DDG: limit"];
"1001203" -> "1003716"  [label="DDG: ip"];
"1001203" -> "1003716"  [label="DDG: ip >= limit"];
"1002594" -> "1002593"  [label="AST: "];
"1002594" -> "1002598"  [label="CFG: "];
"1002595" -> "1002594"  [label="AST: "];
"1002598" -> "1002594"  [label="AST: "];
"1002603" -> "1002594"  [label="CFG: "];
"1002606" -> "1002594"  [label="CFG: "];
"1002594" -> "1003716"  [label="DDG: builder->current->n_points"];
"1002594" -> "1003716"  [label="DDG: hinter->hints"];
"1002594" -> "1003716"  [label="DDG: hinter->close( hinter->hints,\n                                  builder->current->n_points )"];
"1000381" -> "1002594"  [label="DDG: hinter->hints"];
"1002594" -> "1002604"  [label="DDG: hinter->hints"];
"1002604" -> "1002592"  [label="AST: "];
"1002604" -> "1002616"  [label="CFG: "];
"1002605" -> "1002604"  [label="AST: "];
"1002608" -> "1002604"  [label="AST: "];
"1002611" -> "1002604"  [label="AST: "];
"1002616" -> "1002604"  [label="AST: "];
"1002621" -> "1002604"  [label="CFG: "];
"1002604" -> "1003716"  [label="DDG: (PSH_Globals)builder->hints_globals"];
"1002604" -> "1003716"  [label="DDG: builder->current"];
"1002604" -> "1003716"  [label="DDG: hinter->apply( hinter->hints,\n                             builder->current,\n                             (PSH_Globals)builder->hints_globals,\n                             decoder->hint_mode )"];
"1002604" -> "1003716"  [label="DDG: decoder->hint_mode"];
"1002604" -> "1003716"  [label="DDG: hinter->hints"];
"1002611" -> "1002604"  [label="DDG: builder->hints_globals"];
"1003454" -> "1003413"  [label="AST: "];
"1003454" -> "1003458"  [label="CFG: "];
"1003455" -> "1003454"  [label="AST: "];
"1003458" -> "1003454"  [label="AST: "];
"1003460" -> "1003454"  [label="CFG: "];
"1003454" -> "1003716"  [label="DDG: ip"];
"1003563" -> "1003522"  [label="AST: "];
"1003563" -> "1003567"  [label="CFG: "];
"1003564" -> "1003563"  [label="AST: "];
"1003567" -> "1003563"  [label="AST: "];
"1003569" -> "1003563"  [label="CFG: "];
"1003563" -> "1003716"  [label="DDG: ip"];
"1003675" -> "1003674"  [label="AST: "];
"1003675" -> "1003680"  [label="CFG: "];
"1003676" -> "1003675"  [label="AST: "];
"1003680" -> "1003675"  [label="AST: "];
"1003683" -> "1003675"  [label="CFG: "];
"1003688" -> "1003675"  [label="CFG: "];
"1003675" -> "1003716"  [label="DDG: ip[-1] == 12"];
"1003675" -> "1003716"  [label="DDG: ip[-1]"];
"1000359" -> "1000363"  [label="CFG: "];
"1000360" -> "1000359"  [label="AST: "];
"1000363" -> "1000359"  [label="AST: "];
"1000359" -> "1003716"  [label="DDG: zone->cursor"];
"1000359" -> "1003716"  [label="DDG: zone->base"];
"1000359" -> "1003654"  [label="DDG: zone->cursor"];
"1003654" -> "1001052"  [label="AST: "];
"1003654" -> "1003656"  [label="CFG: "];
"1003655" -> "1003654"  [label="AST: "];
"1003656" -> "1003654"  [label="AST: "];
"1003660" -> "1003654"  [label="CFG: "];
"1003654" -> "1003716"  [label="DDG: zone->cursor"];
"1003654" -> "1003716"  [label="DDG: ip"];
"1003590" -> "1003654"  [label="DDG: zone->cursor"];
"1003481" -> "1003654"  [label="DDG: zone->cursor"];
"1000348" -> "1000222"  [label="AST: "];
"1000348" -> "1000350"  [label="CFG: "];
"1000349" -> "1000348"  [label="AST: "];
"1000350" -> "1000348"  [label="AST: "];
"1000358" -> "1000348"  [label="CFG: "];
"1000350" -> "1000348"  [label="DDG: zone->limit"];
"1000221" -> "1000348"  [label="DDG: charstring_len"];
"1000350" -> "1000354"  [label="CFG: "];
"1000351" -> "1000350"  [label="AST: "];
"1000354" -> "1000350"  [label="AST: "];
"1000350" -> "1003716"  [label="DDG: zone->limit"];
"1000350" -> "1003716"  [label="DDG: charstring_base + charstring_len"];
"1000221" -> "1000350"  [label="DDG: charstring_len"];
"1000350" -> "1003659"  [label="DDG: zone->limit"];
"1003659" -> "1001052"  [label="AST: "];
"1003659" -> "1003661"  [label="CFG: "];
"1003660" -> "1003659"  [label="AST: "];
"1003661" -> "1003659"  [label="AST: "];
"1003664" -> "1003659"  [label="CFG: "];
"1003659" -> "1003716"  [label="DDG: limit"];
"1003659" -> "1003716"  [label="DDG: zone->limit"];
"1003603" -> "1003659"  [label="DDG: zone->limit"];
"1003579" -> "1003659"  [label="DDG: zone->limit"];
"1003494" -> "1003659"  [label="DDG: zone->limit"];
"1003470" -> "1003659"  [label="DDG: zone->limit"];
"1000354" -> "1000356"  [label="CFG: "];
"1000355" -> "1000354"  [label="AST: "];
"1000356" -> "1000354"  [label="AST: "];
"1000354" -> "1003716"  [label="DDG: charstring_len"];
"1000354" -> "1003716"  [label="DDG: charstring_base"];
"1000221" -> "1000354"  [label="DDG: charstring_len"];
}
