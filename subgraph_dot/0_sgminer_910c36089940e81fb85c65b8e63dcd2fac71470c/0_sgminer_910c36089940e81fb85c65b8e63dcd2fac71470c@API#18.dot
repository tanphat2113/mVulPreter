digraph "0_sgminer_910c36089940e81fb85c65b8e63dcd2fac71470c@API" {
"1000507" [label="(Call,strlen(pool->swork.nbit))"];
"1000310" [label="(Call,pool->swork.nbit = nbit)"];
"1000208" [label="(Call,!nbit)"];
"1000175" [label="(Call,nbit = json_array_string(val, 6))"];
"1000177" [label="(Call,json_array_string(val, 6))"];
"1000172" [label="(Call,json_array_string(val, 5))"];
"1000167" [label="(Call,json_array_string(val, 3))"];
"1000162" [label="(Call,json_array_string(val, 2))"];
"1000157" [label="(Call,json_array_string(val, 1))"];
"1000152" [label="(Call,json_array_string(val, 0))"];
"1000135" [label="(Call,json_array_get(val, 4))"];
"1000110" [label="(MethodParameterIn,json_t *val)"];
"1000487" [label="(Call,pool->swork.header_len = pool->merkle_offset +\n\t/* merkle_hash */\t 32 +\n\t\t\t\t strlen(pool->swork.ntime) +\n\t\t\t\t strlen(pool->swork.nbit) +\n\t/* nonce */\t\t 8 +\n\t/* workpadding */\t 96)"];
"1000528" [label="(Call,pool->swork.header_len * 2)"];
"1000521" [label="(Call,pool->swork.header_len = pool->swork.header_len * 2 + 1)"];
"1000536" [label="(Call,align_len(&pool->swork.header_len))"];
"1000547" [label="(Call,alloca(pool->swork.header_len))"];
"1000545" [label="(Call,(char *)alloca(pool->swork.header_len))"];
"1000543" [label="(Call,header = (char *)alloca(pool->swork.header_len))"];
"1000553" [label="(Call,snprintf(header, pool->swork.header_len,\n\t\t\"%s%s%s%s%s%s%s\",\n\t\tpool->swork.bbversion,\n\t\tpool->swork.prev_hash,\n\t\tblank_merkel,\n\t\tpool->swork.ntime,\n \t\tpool->swork.nbit,\n \t\t\"00000000\", /* nonce */\n \t\tworkpadding))"];
"1000587" [label="(Call,hex2bin(pool->header_bin, header, 128))"];
"1000586" [label="(Call,!hex2bin(pool->header_bin, header, 128))"];
"1000585" [label="(Call,unlikely(!hex2bin(pool->header_bin, header, 128)))"];
"1000594" [label="(Call,applog(LOG_WARNING, \"%s: Failed to convert header to header_bin, got %s\", __func__, header))"];
"1000527" [label="(Call,pool->swork.header_len * 2 + 1)"];
"1000493" [label="(Call,pool->merkle_offset +\n\t/* merkle_hash */\t 32 +\n\t\t\t\t strlen(pool->swork.ntime) +\n\t\t\t\t strlen(pool->swork.nbit) +\n\t/* nonce */\t\t 8 +\n\t/* workpadding */\t 96)"];
"1000497" [label="(Call,32 +\n\t\t\t\t strlen(pool->swork.ntime) +\n\t\t\t\t strlen(pool->swork.nbit) +\n\t/* nonce */\t\t 8 +\n\t/* workpadding */\t 96)"];
"1000499" [label="(Call,strlen(pool->swork.ntime) +\n\t\t\t\t strlen(pool->swork.nbit) +\n\t/* nonce */\t\t 8 +\n\t/* workpadding */\t 96)"];
"1000506" [label="(Call,strlen(pool->swork.nbit) +\n\t/* nonce */\t\t 8 +\n\t/* workpadding */\t 96)"];
"1000527" [label="(Call,pool->swork.header_len * 2 + 1)"];
"1000182" [label="(Call,json_array_string(val, 7))"];
"1000598" [label="(Identifier,header)"];
"1000209" [label="(Identifier,nbit)"];
"1000168" [label="(Identifier,val)"];
"1000154" [label="(Literal,0)"];
"1000555" [label="(Call,pool->swork.header_len)"];
"1000170" [label="(Call,bbversion = json_array_string(val, 5))"];
"1000173" [label="(Identifier,val)"];
"1000135" [label="(Call,json_array_get(val, 4))"];
"1000594" [label="(Call,applog(LOG_WARNING, \"%s: Failed to convert header to header_bin, got %s\", __func__, header))"];
"1000164" [label="(Literal,2)"];
"1000592" [label="(Literal,128)"];
"1000586" [label="(Call,!hex2bin(pool->header_bin, header, 128))"];
"1000545" [label="(Call,(char *)alloca(pool->swork.header_len))"];
"1000536" [label="(Call,align_len(&pool->swork.header_len))"];
"1000175" [label="(Call,nbit = json_array_string(val, 6))"];
"1000571" [label="(Identifier,blank_merkel)"];
"1000488" [label="(Call,pool->swork.header_len)"];
"1000588" [label="(Call,pool->header_bin)"];
"1000178" [label="(Identifier,val)"];
"1000585" [label="(Call,unlikely(!hex2bin(pool->header_bin, header, 128)))"];
"1000513" [label="(Call,8 +\n\t/* workpadding */\t 96)"];
"1000528" [label="(Call,pool->swork.header_len * 2)"];
"1000133" [label="(Call,arr = json_array_get(val, 4))"];
"1000494" [label="(Call,pool->merkle_offset)"];
"1000596" [label="(Literal,\"%s: Failed to convert header to header_bin, got %s\")"];
"1000110" [label="(MethodParameterIn,json_t *val)"];
"1000561" [label="(Call,pool->swork.bbversion)"];
"1000584" [label="(ControlStructure,if (unlikely(!hex2bin(pool->header_bin, header, 128))))"];
"1000487" [label="(Call,pool->swork.header_len = pool->merkle_offset +\n\t/* merkle_hash */\t 32 +\n\t\t\t\t strlen(pool->swork.ntime) +\n\t\t\t\t strlen(pool->swork.nbit) +\n\t/* nonce */\t\t 8 +\n\t/* workpadding */\t 96)"];
"1000537" [label="(Call,&pool->swork.header_len)"];
"1000500" [label="(Call,strlen(pool->swork.ntime))"];
"1000507" [label="(Call,strlen(pool->swork.nbit))"];
"1000160" [label="(Call,coinbase1 = json_array_string(val, 2))"];
"1000554" [label="(Identifier,header)"];
"1000310" [label="(Call,pool->swork.nbit = nbit)"];
"1000577" [label="(Call,pool->swork.nbit)"];
"1000169" [label="(Literal,3)"];
"1000470" [label="(Call,pool->merkle_offset = strlen(pool->swork.bbversion) +\n\t\t\t      strlen(pool->swork.prev_hash))"];
"1000136" [label="(Identifier,val)"];
"1000597" [label="(Identifier,__func__)"];
"1000316" [label="(Identifier,nbit)"];
"1000544" [label="(Identifier,header)"];
"1000150" [label="(Call,job_id = json_array_string(val, 0))"];
"1000591" [label="(Identifier,header)"];
"1000167" [label="(Call,json_array_string(val, 3))"];
"1000179" [label="(Literal,6)"];
"1000211" [label="(Identifier,ntime)"];
"1000583" [label="(Identifier,workpadding)"];
"1000111" [label="(Block,)"];
"1000600" [label="(Identifier,pool)"];
"1000582" [label="(Literal,\"00000000\")"];
"1000208" [label="(Call,!nbit)"];
"1000158" [label="(Identifier,val)"];
"1000493" [label="(Call,pool->merkle_offset +\n\t/* merkle_hash */\t 32 +\n\t\t\t\t strlen(pool->swork.ntime) +\n\t\t\t\t strlen(pool->swork.nbit) +\n\t/* nonce */\t\t 8 +\n\t/* workpadding */\t 96)"];
"1000514" [label="(Literal,8)"];
"1000506" [label="(Call,strlen(pool->swork.nbit) +\n\t/* nonce */\t\t 8 +\n\t/* workpadding */\t 96)"];
"1000768" [label="(MethodReturn,static bool)"];
"1000162" [label="(Call,json_array_string(val, 2))"];
"1000172" [label="(Call,json_array_string(val, 5))"];
"1000481" [label="(Call,strlen(pool->swork.prev_hash))"];
"1000566" [label="(Call,pool->swork.prev_hash)"];
"1000589" [label="(Identifier,pool)"];
"1000188" [label="(Call,json_array_get(val, 8))"];
"1000235" [label="(Call,free(nbit))"];
"1000176" [label="(Identifier,nbit)"];
"1000508" [label="(Call,pool->swork.nbit)"];
"1000547" [label="(Call,alloca(pool->swork.header_len))"];
"1000137" [label="(Literal,4)"];
"1000587" [label="(Call,hex2bin(pool->header_bin, header, 128))"];
"1000207" [label="(Call,!nbit || !ntime)"];
"1000726" [label="(Call,applog(LOG_DEBUG, \"nbit: %s\", nbit))"];
"1000522" [label="(Call,pool->swork.header_len)"];
"1000177" [label="(Call,json_array_string(val, 6))"];
"1000157" [label="(Call,json_array_string(val, 1))"];
"1000535" [label="(Literal,1)"];
"1000548" [label="(Call,pool->swork.header_len)"];
"1000498" [label="(Literal,32)"];
"1000497" [label="(Call,32 +\n\t\t\t\t strlen(pool->swork.ntime) +\n\t\t\t\t strlen(pool->swork.nbit) +\n\t/* nonce */\t\t 8 +\n\t/* workpadding */\t 96)"];
"1000320" [label="(Identifier,pool)"];
"1000595" [label="(Identifier,LOG_WARNING)"];
"1000181" [label="(Identifier,ntime)"];
"1000475" [label="(Call,strlen(pool->swork.bbversion))"];
"1000155" [label="(Call,prev_hash = json_array_string(val, 1))"];
"1000553" [label="(Call,snprintf(header, pool->swork.header_len,\n\t\t\"%s%s%s%s%s%s%s\",\n\t\tpool->swork.bbversion,\n\t\tpool->swork.prev_hash,\n\t\tblank_merkel,\n\t\tpool->swork.ntime,\n \t\tpool->swork.nbit,\n \t\t\"00000000\", /* nonce */\n \t\tworkpadding))"];
"1000163" [label="(Identifier,val)"];
"1000529" [label="(Call,pool->swork.header_len)"];
"1000560" [label="(Literal,\"%s%s%s%s%s%s%s\")"];
"1000534" [label="(Literal,2)"];
"1000521" [label="(Call,pool->swork.header_len = pool->swork.header_len * 2 + 1)"];
"1000153" [label="(Identifier,val)"];
"1000152" [label="(Call,json_array_string(val, 0))"];
"1000518" [label="(Identifier,pool)"];
"1000174" [label="(Literal,5)"];
"1000499" [label="(Call,strlen(pool->swork.ntime) +\n\t\t\t\t strlen(pool->swork.nbit) +\n\t/* nonce */\t\t 8 +\n\t/* workpadding */\t 96)"];
"1000543" [label="(Call,header = (char *)alloca(pool->swork.header_len))"];
"1000159" [label="(Literal,1)"];
"1000604" [label="(Identifier,cb1)"];
"1000593" [label="(Block,)"];
"1000540" [label="(Identifier,pool)"];
"1000165" [label="(Call,coinbase2 = json_array_string(val, 3))"];
"1000311" [label="(Call,pool->swork.nbit)"];
"1000572" [label="(Call,pool->swork.ntime)"];
"1000507" -> "1000506"  [label="AST: "];
"1000507" -> "1000508"  [label="CFG: "];
"1000508" -> "1000507"  [label="AST: "];
"1000514" -> "1000507"  [label="CFG: "];
"1000507" -> "1000487"  [label="DDG: "];
"1000507" -> "1000493"  [label="DDG: "];
"1000507" -> "1000497"  [label="DDG: "];
"1000507" -> "1000499"  [label="DDG: "];
"1000507" -> "1000506"  [label="DDG: "];
"1000310" -> "1000507"  [label="DDG: "];
"1000507" -> "1000553"  [label="DDG: "];
"1000310" -> "1000111"  [label="AST: "];
"1000310" -> "1000316"  [label="CFG: "];
"1000311" -> "1000310"  [label="AST: "];
"1000316" -> "1000310"  [label="AST: "];
"1000320" -> "1000310"  [label="CFG: "];
"1000310" -> "1000768"  [label="DDG: "];
"1000208" -> "1000310"  [label="DDG: "];
"1000175" -> "1000310"  [label="DDG: "];
"1000208" -> "1000207"  [label="AST: "];
"1000208" -> "1000209"  [label="CFG: "];
"1000209" -> "1000208"  [label="AST: "];
"1000211" -> "1000208"  [label="CFG: "];
"1000207" -> "1000208"  [label="CFG: "];
"1000208" -> "1000768"  [label="DDG: "];
"1000208" -> "1000207"  [label="DDG: "];
"1000175" -> "1000208"  [label="DDG: "];
"1000208" -> "1000235"  [label="DDG: "];
"1000208" -> "1000726"  [label="DDG: "];
"1000175" -> "1000111"  [label="AST: "];
"1000175" -> "1000177"  [label="CFG: "];
"1000176" -> "1000175"  [label="AST: "];
"1000177" -> "1000175"  [label="AST: "];
"1000181" -> "1000175"  [label="CFG: "];
"1000175" -> "1000768"  [label="DDG: "];
"1000175" -> "1000768"  [label="DDG: "];
"1000177" -> "1000175"  [label="DDG: "];
"1000177" -> "1000175"  [label="DDG: "];
"1000175" -> "1000235"  [label="DDG: "];
"1000175" -> "1000726"  [label="DDG: "];
"1000177" -> "1000179"  [label="CFG: "];
"1000178" -> "1000177"  [label="AST: "];
"1000179" -> "1000177"  [label="AST: "];
"1000172" -> "1000177"  [label="DDG: "];
"1000110" -> "1000177"  [label="DDG: "];
"1000177" -> "1000182"  [label="DDG: "];
"1000172" -> "1000170"  [label="AST: "];
"1000172" -> "1000174"  [label="CFG: "];
"1000173" -> "1000172"  [label="AST: "];
"1000174" -> "1000172"  [label="AST: "];
"1000170" -> "1000172"  [label="CFG: "];
"1000172" -> "1000170"  [label="DDG: "];
"1000172" -> "1000170"  [label="DDG: "];
"1000167" -> "1000172"  [label="DDG: "];
"1000110" -> "1000172"  [label="DDG: "];
"1000167" -> "1000165"  [label="AST: "];
"1000167" -> "1000169"  [label="CFG: "];
"1000168" -> "1000167"  [label="AST: "];
"1000169" -> "1000167"  [label="AST: "];
"1000165" -> "1000167"  [label="CFG: "];
"1000167" -> "1000165"  [label="DDG: "];
"1000167" -> "1000165"  [label="DDG: "];
"1000162" -> "1000167"  [label="DDG: "];
"1000110" -> "1000167"  [label="DDG: "];
"1000162" -> "1000160"  [label="AST: "];
"1000162" -> "1000164"  [label="CFG: "];
"1000163" -> "1000162"  [label="AST: "];
"1000164" -> "1000162"  [label="AST: "];
"1000160" -> "1000162"  [label="CFG: "];
"1000162" -> "1000160"  [label="DDG: "];
"1000162" -> "1000160"  [label="DDG: "];
"1000157" -> "1000162"  [label="DDG: "];
"1000110" -> "1000162"  [label="DDG: "];
"1000157" -> "1000155"  [label="AST: "];
"1000157" -> "1000159"  [label="CFG: "];
"1000158" -> "1000157"  [label="AST: "];
"1000159" -> "1000157"  [label="AST: "];
"1000155" -> "1000157"  [label="CFG: "];
"1000157" -> "1000155"  [label="DDG: "];
"1000157" -> "1000155"  [label="DDG: "];
"1000152" -> "1000157"  [label="DDG: "];
"1000110" -> "1000157"  [label="DDG: "];
"1000152" -> "1000150"  [label="AST: "];
"1000152" -> "1000154"  [label="CFG: "];
"1000153" -> "1000152"  [label="AST: "];
"1000154" -> "1000152"  [label="AST: "];
"1000150" -> "1000152"  [label="CFG: "];
"1000152" -> "1000150"  [label="DDG: "];
"1000152" -> "1000150"  [label="DDG: "];
"1000135" -> "1000152"  [label="DDG: "];
"1000110" -> "1000152"  [label="DDG: "];
"1000135" -> "1000133"  [label="AST: "];
"1000135" -> "1000137"  [label="CFG: "];
"1000136" -> "1000135"  [label="AST: "];
"1000137" -> "1000135"  [label="AST: "];
"1000133" -> "1000135"  [label="CFG: "];
"1000135" -> "1000768"  [label="DDG: "];
"1000135" -> "1000133"  [label="DDG: "];
"1000135" -> "1000133"  [label="DDG: "];
"1000110" -> "1000135"  [label="DDG: "];
"1000110" -> "1000108"  [label="AST: "];
"1000110" -> "1000768"  [label="DDG: "];
"1000110" -> "1000182"  [label="DDG: "];
"1000110" -> "1000188"  [label="DDG: "];
"1000487" -> "1000111"  [label="AST: "];
"1000487" -> "1000493"  [label="CFG: "];
"1000488" -> "1000487"  [label="AST: "];
"1000493" -> "1000487"  [label="AST: "];
"1000518" -> "1000487"  [label="CFG: "];
"1000487" -> "1000768"  [label="DDG: "];
"1000470" -> "1000487"  [label="DDG: "];
"1000500" -> "1000487"  [label="DDG: "];
"1000487" -> "1000528"  [label="DDG: "];
"1000528" -> "1000527"  [label="AST: "];
"1000528" -> "1000534"  [label="CFG: "];
"1000529" -> "1000528"  [label="AST: "];
"1000534" -> "1000528"  [label="AST: "];
"1000535" -> "1000528"  [label="CFG: "];
"1000528" -> "1000521"  [label="DDG: "];
"1000528" -> "1000521"  [label="DDG: "];
"1000528" -> "1000527"  [label="DDG: "];
"1000528" -> "1000527"  [label="DDG: "];
"1000521" -> "1000111"  [label="AST: "];
"1000521" -> "1000527"  [label="CFG: "];
"1000522" -> "1000521"  [label="AST: "];
"1000527" -> "1000521"  [label="AST: "];
"1000540" -> "1000521"  [label="CFG: "];
"1000521" -> "1000768"  [label="DDG: "];
"1000521" -> "1000536"  [label="DDG: "];
"1000521" -> "1000547"  [label="DDG: "];
"1000536" -> "1000111"  [label="AST: "];
"1000536" -> "1000537"  [label="CFG: "];
"1000537" -> "1000536"  [label="AST: "];
"1000544" -> "1000536"  [label="CFG: "];
"1000536" -> "1000768"  [label="DDG: "];
"1000536" -> "1000768"  [label="DDG: "];
"1000536" -> "1000547"  [label="DDG: "];
"1000536" -> "1000553"  [label="DDG: "];
"1000547" -> "1000545"  [label="AST: "];
"1000547" -> "1000548"  [label="CFG: "];
"1000548" -> "1000547"  [label="AST: "];
"1000545" -> "1000547"  [label="CFG: "];
"1000547" -> "1000545"  [label="DDG: "];
"1000547" -> "1000553"  [label="DDG: "];
"1000545" -> "1000543"  [label="AST: "];
"1000546" -> "1000545"  [label="AST: "];
"1000543" -> "1000545"  [label="CFG: "];
"1000545" -> "1000768"  [label="DDG: "];
"1000545" -> "1000543"  [label="DDG: "];
"1000543" -> "1000111"  [label="AST: "];
"1000544" -> "1000543"  [label="AST: "];
"1000554" -> "1000543"  [label="CFG: "];
"1000543" -> "1000768"  [label="DDG: "];
"1000543" -> "1000553"  [label="DDG: "];
"1000553" -> "1000111"  [label="AST: "];
"1000553" -> "1000583"  [label="CFG: "];
"1000554" -> "1000553"  [label="AST: "];
"1000555" -> "1000553"  [label="AST: "];
"1000560" -> "1000553"  [label="AST: "];
"1000561" -> "1000553"  [label="AST: "];
"1000566" -> "1000553"  [label="AST: "];
"1000571" -> "1000553"  [label="AST: "];
"1000572" -> "1000553"  [label="AST: "];
"1000577" -> "1000553"  [label="AST: "];
"1000582" -> "1000553"  [label="AST: "];
"1000583" -> "1000553"  [label="AST: "];
"1000589" -> "1000553"  [label="CFG: "];
"1000553" -> "1000768"  [label="DDG: "];
"1000553" -> "1000768"  [label="DDG: "];
"1000553" -> "1000768"  [label="DDG: "];
"1000553" -> "1000768"  [label="DDG: "];
"1000553" -> "1000768"  [label="DDG: "];
"1000553" -> "1000768"  [label="DDG: "];
"1000553" -> "1000768"  [label="DDG: "];
"1000553" -> "1000768"  [label="DDG: "];
"1000475" -> "1000553"  [label="DDG: "];
"1000481" -> "1000553"  [label="DDG: "];
"1000500" -> "1000553"  [label="DDG: "];
"1000553" -> "1000587"  [label="DDG: "];
"1000587" -> "1000586"  [label="AST: "];
"1000587" -> "1000592"  [label="CFG: "];
"1000588" -> "1000587"  [label="AST: "];
"1000591" -> "1000587"  [label="AST: "];
"1000592" -> "1000587"  [label="AST: "];
"1000586" -> "1000587"  [label="CFG: "];
"1000587" -> "1000768"  [label="DDG: "];
"1000587" -> "1000768"  [label="DDG: "];
"1000587" -> "1000586"  [label="DDG: "];
"1000587" -> "1000586"  [label="DDG: "];
"1000587" -> "1000586"  [label="DDG: "];
"1000587" -> "1000594"  [label="DDG: "];
"1000586" -> "1000585"  [label="AST: "];
"1000585" -> "1000586"  [label="CFG: "];
"1000586" -> "1000768"  [label="DDG: "];
"1000586" -> "1000585"  [label="DDG: "];
"1000585" -> "1000584"  [label="AST: "];
"1000595" -> "1000585"  [label="CFG: "];
"1000604" -> "1000585"  [label="CFG: "];
"1000585" -> "1000768"  [label="DDG: "];
"1000585" -> "1000768"  [label="DDG: "];
"1000594" -> "1000593"  [label="AST: "];
"1000594" -> "1000598"  [label="CFG: "];
"1000595" -> "1000594"  [label="AST: "];
"1000596" -> "1000594"  [label="AST: "];
"1000597" -> "1000594"  [label="AST: "];
"1000598" -> "1000594"  [label="AST: "];
"1000600" -> "1000594"  [label="CFG: "];
"1000594" -> "1000768"  [label="DDG: "];
"1000594" -> "1000768"  [label="DDG: "];
"1000594" -> "1000768"  [label="DDG: "];
"1000594" -> "1000768"  [label="DDG: "];
"1000527" -> "1000535"  [label="CFG: "];
"1000535" -> "1000527"  [label="AST: "];
"1000527" -> "1000768"  [label="DDG: "];
"1000493" -> "1000497"  [label="CFG: "];
"1000494" -> "1000493"  [label="AST: "];
"1000497" -> "1000493"  [label="AST: "];
"1000493" -> "1000768"  [label="DDG: "];
"1000470" -> "1000493"  [label="DDG: "];
"1000500" -> "1000493"  [label="DDG: "];
"1000497" -> "1000499"  [label="CFG: "];
"1000498" -> "1000497"  [label="AST: "];
"1000499" -> "1000497"  [label="AST: "];
"1000497" -> "1000768"  [label="DDG: "];
"1000500" -> "1000497"  [label="DDG: "];
"1000499" -> "1000506"  [label="CFG: "];
"1000500" -> "1000499"  [label="AST: "];
"1000506" -> "1000499"  [label="AST: "];
"1000499" -> "1000768"  [label="DDG: "];
"1000499" -> "1000768"  [label="DDG: "];
"1000500" -> "1000499"  [label="DDG: "];
"1000506" -> "1000513"  [label="CFG: "];
"1000513" -> "1000506"  [label="AST: "];
"1000506" -> "1000768"  [label="DDG: "];
"1000506" -> "1000768"  [label="DDG: "];
}
