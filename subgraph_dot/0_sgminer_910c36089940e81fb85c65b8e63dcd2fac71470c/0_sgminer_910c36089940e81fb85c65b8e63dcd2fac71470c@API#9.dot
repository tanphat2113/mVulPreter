digraph "0_sgminer_910c36089940e81fb85c65b8e63dcd2fac71470c@API" {
"1000474" [label="(Call,strlen(pool->swork.bbversion) +\n\t\t\t      strlen(pool->swork.prev_hash))"];
"1000475" [label="(Call,strlen(pool->swork.bbversion))"];
"1000303" [label="(Call,pool->swork.bbversion = bbversion)"];
"1000205" [label="(Call,!bbversion)"];
"1000170" [label="(Call,bbversion = json_array_string(val, 5))"];
"1000172" [label="(Call,json_array_string(val, 5))"];
"1000167" [label="(Call,json_array_string(val, 3))"];
"1000162" [label="(Call,json_array_string(val, 2))"];
"1000157" [label="(Call,json_array_string(val, 1))"];
"1000152" [label="(Call,json_array_string(val, 0))"];
"1000135" [label="(Call,json_array_get(val, 4))"];
"1000110" [label="(MethodParameterIn,json_t *val)"];
"1000481" [label="(Call,strlen(pool->swork.prev_hash))"];
"1000284" [label="(Call,pool->swork.prev_hash = prev_hash)"];
"1000196" [label="(Call,!prev_hash)"];
"1000155" [label="(Call,prev_hash = json_array_string(val, 1))"];
"1000475" [label="(Call,strlen(pool->swork.bbversion))"];
"1000474" [label="(Call,strlen(pool->swork.bbversion) +\n\t\t\t      strlen(pool->swork.prev_hash))"];
"1000768" [label="(MethodReturn,static bool)"];
"1000162" [label="(Call,json_array_string(val, 2))"];
"1000155" [label="(Call,prev_hash = json_array_string(val, 1))"];
"1000553" [label="(Call,snprintf(header, pool->swork.header_len,\n\t\t\"%s%s%s%s%s%s%s\",\n\t\tpool->swork.bbversion,\n\t\tpool->swork.prev_hash,\n\t\tblank_merkel,\n\t\tpool->swork.ntime,\n \t\tpool->swork.nbit,\n \t\t\"00000000\", /* nonce */\n \t\tworkpadding))"];
"1000303" [label="(Call,pool->swork.bbversion = bbversion)"];
"1000172" [label="(Call,json_array_string(val, 5))"];
"1000481" [label="(Call,strlen(pool->swork.prev_hash))"];
"1000160" [label="(Call,coinbase1 = json_array_string(val, 2))"];
"1000182" [label="(Call,json_array_string(val, 7))"];
"1000484" [label="(Identifier,pool)"];
"1000482" [label="(Call,pool->swork.prev_hash)"];
"1000163" [label="(Identifier,val)"];
"1000722" [label="(Call,applog(LOG_DEBUG, \"bbversion: %s\", bbversion))"];
"1000209" [label="(Identifier,nbit)"];
"1000304" [label="(Call,pool->swork.bbversion)"];
"1000169" [label="(Literal,3)"];
"1000168" [label="(Identifier,val)"];
"1000206" [label="(Identifier,bbversion)"];
"1000470" [label="(Call,pool->merkle_offset = strlen(pool->swork.bbversion) +\n\t\t\t      strlen(pool->swork.prev_hash))"];
"1000204" [label="(Call,!bbversion || !nbit || !ntime)"];
"1000197" [label="(Identifier,prev_hash)"];
"1000154" [label="(Literal,0)"];
"1000153" [label="(Identifier,val)"];
"1000152" [label="(Call,json_array_string(val, 0))"];
"1000195" [label="(Call,!prev_hash || !coinbase1 || !coinbase2 || !bbversion || !nbit || !ntime)"];
"1000188" [label="(Call,json_array_get(val, 8))"];
"1000284" [label="(Call,pool->swork.prev_hash = prev_hash)"];
"1000170" [label="(Call,bbversion = json_array_string(val, 5))"];
"1000173" [label="(Identifier,val)"];
"1000135" [label="(Call,json_array_get(val, 4))"];
"1000136" [label="(Identifier,val)"];
"1000200" [label="(Identifier,coinbase1)"];
"1000176" [label="(Identifier,nbit)"];
"1000174" [label="(Literal,5)"];
"1000205" [label="(Call,!bbversion)"];
"1000150" [label="(Call,job_id = json_array_string(val, 0))"];
"1000137" [label="(Literal,4)"];
"1000164" [label="(Literal,2)"];
"1000156" [label="(Identifier,prev_hash)"];
"1000161" [label="(Identifier,coinbase1)"];
"1000476" [label="(Call,pool->swork.bbversion)"];
"1000710" [label="(Call,applog(LOG_DEBUG, \"prev_hash: %s\", prev_hash))"];
"1000167" [label="(Call,json_array_string(val, 3))"];
"1000292" [label="(Identifier,cb1_len)"];
"1000196" [label="(Call,!prev_hash)"];
"1000231" [label="(Call,free(bbversion))"];
"1000177" [label="(Call,json_array_string(val, 6))"];
"1000157" [label="(Call,json_array_string(val, 1))"];
"1000159" [label="(Literal,1)"];
"1000290" [label="(Identifier,prev_hash)"];
"1000219" [label="(Call,free(prev_hash))"];
"1000309" [label="(Identifier,bbversion)"];
"1000133" [label="(Call,arr = json_array_get(val, 4))"];
"1000285" [label="(Call,pool->swork.prev_hash)"];
"1000111" [label="(Block,)"];
"1000313" [label="(Identifier,pool)"];
"1000171" [label="(Identifier,bbversion)"];
"1000110" [label="(MethodParameterIn,json_t *val)"];
"1000165" [label="(Call,coinbase2 = json_array_string(val, 3))"];
"1000158" [label="(Identifier,val)"];
"1000474" -> "1000470"  [label="AST: "];
"1000474" -> "1000481"  [label="CFG: "];
"1000475" -> "1000474"  [label="AST: "];
"1000481" -> "1000474"  [label="AST: "];
"1000470" -> "1000474"  [label="CFG: "];
"1000474" -> "1000768"  [label="DDG: strlen(pool->swork.bbversion)"];
"1000474" -> "1000768"  [label="DDG: strlen(pool->swork.prev_hash)"];
"1000475" -> "1000474"  [label="DDG: pool->swork.bbversion"];
"1000481" -> "1000474"  [label="DDG: pool->swork.prev_hash"];
"1000475" -> "1000476"  [label="CFG: "];
"1000476" -> "1000475"  [label="AST: "];
"1000484" -> "1000475"  [label="CFG: "];
"1000475" -> "1000470"  [label="DDG: pool->swork.bbversion"];
"1000303" -> "1000475"  [label="DDG: pool->swork.bbversion"];
"1000475" -> "1000553"  [label="DDG: pool->swork.bbversion"];
"1000303" -> "1000111"  [label="AST: "];
"1000303" -> "1000309"  [label="CFG: "];
"1000304" -> "1000303"  [label="AST: "];
"1000309" -> "1000303"  [label="AST: "];
"1000313" -> "1000303"  [label="CFG: "];
"1000303" -> "1000768"  [label="DDG: bbversion"];
"1000205" -> "1000303"  [label="DDG: bbversion"];
"1000170" -> "1000303"  [label="DDG: bbversion"];
"1000205" -> "1000204"  [label="AST: "];
"1000205" -> "1000206"  [label="CFG: "];
"1000206" -> "1000205"  [label="AST: "];
"1000209" -> "1000205"  [label="CFG: "];
"1000204" -> "1000205"  [label="CFG: "];
"1000205" -> "1000768"  [label="DDG: bbversion"];
"1000205" -> "1000204"  [label="DDG: bbversion"];
"1000170" -> "1000205"  [label="DDG: bbversion"];
"1000205" -> "1000231"  [label="DDG: bbversion"];
"1000205" -> "1000722"  [label="DDG: bbversion"];
"1000170" -> "1000111"  [label="AST: "];
"1000170" -> "1000172"  [label="CFG: "];
"1000171" -> "1000170"  [label="AST: "];
"1000172" -> "1000170"  [label="AST: "];
"1000176" -> "1000170"  [label="CFG: "];
"1000170" -> "1000768"  [label="DDG: json_array_string(val, 5)"];
"1000170" -> "1000768"  [label="DDG: bbversion"];
"1000172" -> "1000170"  [label="DDG: val"];
"1000172" -> "1000170"  [label="DDG: 5"];
"1000170" -> "1000231"  [label="DDG: bbversion"];
"1000170" -> "1000722"  [label="DDG: bbversion"];
"1000172" -> "1000174"  [label="CFG: "];
"1000173" -> "1000172"  [label="AST: "];
"1000174" -> "1000172"  [label="AST: "];
"1000167" -> "1000172"  [label="DDG: val"];
"1000110" -> "1000172"  [label="DDG: val"];
"1000172" -> "1000177"  [label="DDG: val"];
"1000167" -> "1000165"  [label="AST: "];
"1000167" -> "1000169"  [label="CFG: "];
"1000168" -> "1000167"  [label="AST: "];
"1000169" -> "1000167"  [label="AST: "];
"1000165" -> "1000167"  [label="CFG: "];
"1000167" -> "1000165"  [label="DDG: val"];
"1000167" -> "1000165"  [label="DDG: 3"];
"1000162" -> "1000167"  [label="DDG: val"];
"1000110" -> "1000167"  [label="DDG: val"];
"1000162" -> "1000160"  [label="AST: "];
"1000162" -> "1000164"  [label="CFG: "];
"1000163" -> "1000162"  [label="AST: "];
"1000164" -> "1000162"  [label="AST: "];
"1000160" -> "1000162"  [label="CFG: "];
"1000162" -> "1000160"  [label="DDG: val"];
"1000162" -> "1000160"  [label="DDG: 2"];
"1000157" -> "1000162"  [label="DDG: val"];
"1000110" -> "1000162"  [label="DDG: val"];
"1000157" -> "1000155"  [label="AST: "];
"1000157" -> "1000159"  [label="CFG: "];
"1000158" -> "1000157"  [label="AST: "];
"1000159" -> "1000157"  [label="AST: "];
"1000155" -> "1000157"  [label="CFG: "];
"1000157" -> "1000155"  [label="DDG: val"];
"1000157" -> "1000155"  [label="DDG: 1"];
"1000152" -> "1000157"  [label="DDG: val"];
"1000110" -> "1000157"  [label="DDG: val"];
"1000152" -> "1000150"  [label="AST: "];
"1000152" -> "1000154"  [label="CFG: "];
"1000153" -> "1000152"  [label="AST: "];
"1000154" -> "1000152"  [label="AST: "];
"1000150" -> "1000152"  [label="CFG: "];
"1000152" -> "1000150"  [label="DDG: val"];
"1000152" -> "1000150"  [label="DDG: 0"];
"1000135" -> "1000152"  [label="DDG: val"];
"1000110" -> "1000152"  [label="DDG: val"];
"1000135" -> "1000133"  [label="AST: "];
"1000135" -> "1000137"  [label="CFG: "];
"1000136" -> "1000135"  [label="AST: "];
"1000137" -> "1000135"  [label="AST: "];
"1000133" -> "1000135"  [label="CFG: "];
"1000135" -> "1000768"  [label="DDG: val"];
"1000135" -> "1000133"  [label="DDG: val"];
"1000135" -> "1000133"  [label="DDG: 4"];
"1000110" -> "1000135"  [label="DDG: val"];
"1000110" -> "1000108"  [label="AST: "];
"1000110" -> "1000768"  [label="DDG: val"];
"1000110" -> "1000177"  [label="DDG: val"];
"1000110" -> "1000182"  [label="DDG: val"];
"1000110" -> "1000188"  [label="DDG: val"];
"1000481" -> "1000482"  [label="CFG: "];
"1000482" -> "1000481"  [label="AST: "];
"1000481" -> "1000470"  [label="DDG: pool->swork.prev_hash"];
"1000284" -> "1000481"  [label="DDG: pool->swork.prev_hash"];
"1000481" -> "1000553"  [label="DDG: pool->swork.prev_hash"];
"1000284" -> "1000111"  [label="AST: "];
"1000284" -> "1000290"  [label="CFG: "];
"1000285" -> "1000284"  [label="AST: "];
"1000290" -> "1000284"  [label="AST: "];
"1000292" -> "1000284"  [label="CFG: "];
"1000284" -> "1000768"  [label="DDG: prev_hash"];
"1000196" -> "1000284"  [label="DDG: prev_hash"];
"1000155" -> "1000284"  [label="DDG: prev_hash"];
"1000196" -> "1000195"  [label="AST: "];
"1000196" -> "1000197"  [label="CFG: "];
"1000197" -> "1000196"  [label="AST: "];
"1000200" -> "1000196"  [label="CFG: "];
"1000195" -> "1000196"  [label="CFG: "];
"1000196" -> "1000768"  [label="DDG: prev_hash"];
"1000196" -> "1000195"  [label="DDG: prev_hash"];
"1000155" -> "1000196"  [label="DDG: prev_hash"];
"1000196" -> "1000219"  [label="DDG: prev_hash"];
"1000196" -> "1000710"  [label="DDG: prev_hash"];
"1000155" -> "1000111"  [label="AST: "];
"1000156" -> "1000155"  [label="AST: "];
"1000161" -> "1000155"  [label="CFG: "];
"1000155" -> "1000768"  [label="DDG: json_array_string(val, 1)"];
"1000155" -> "1000768"  [label="DDG: prev_hash"];
"1000155" -> "1000219"  [label="DDG: prev_hash"];
"1000155" -> "1000710"  [label="DDG: prev_hash"];
}
