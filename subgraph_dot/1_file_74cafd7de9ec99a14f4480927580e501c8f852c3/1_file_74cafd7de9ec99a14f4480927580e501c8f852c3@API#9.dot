digraph "1_file_74cafd7de9ec99a14f4480927580e501c8f852c3@API" {
"1000655" [label="(Call,file_regfree(&rx))"];
"1000643" [label="(Call,file_regerror(&rx, rc, ms))"];
"1000558" [label="(Call,file_regexec(&rx, (const char *)ms->search.s,\n \t\t\t    1, pmatch, REG_STARTEND))"];
"1000486" [label="(Call,file_regcomp(&rx, m->value.s,\n\t\t    REG_EXTENDED|REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0)))"];
"1000494" [label="(Call,REG_EXTENDED|REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0))"];
"1000496" [label="(Call,REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0))"];
"1000561" [label="(Call,(const char *)ms->search.s)"];
"1000547" [label="(Call,(intptr_t)ms->search.s)"];
"1000472" [label="(Call,ms->search.s == NULL)"];
"1000556" [label="(Call,rc = file_regexec(&rx, (const char *)ms->search.s,\n \t\t\t    1, pmatch, REG_STARTEND))"];
"1000103" [label="(MethodParameterIn,struct magic_set *ms)"];
"1000509" [label="(Call,file_regerror(&rx, rc, ms))"];
"1000484" [label="(Call,rc = file_regcomp(&rx, m->value.s,\n\t\t    REG_EXTENDED|REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0)))"];
"1000569" [label="(Identifier,pmatch)"];
"1000656" [label="(Call,&rx)"];
"1000686" [label="(Call,file_signextend(ms, m, v))"];
"1000512" [label="(Identifier,rc)"];
"1000103" [label="(MethodParameterIn,struct magic_set *ms)"];
"1000478" [label="(Identifier,NULL)"];
"1000649" [label="(Identifier,v)"];
"1000561" [label="(Call,(const char *)ms->search.s)"];
"1000482" [label="(Identifier,l)"];
"1000485" [label="(Identifier,rc)"];
"1000496" [label="(Call,REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0))"];
"1000509" [label="(Call,file_regerror(&rx, rc, ms))"];
"1000570" [label="(Identifier,REG_STARTEND)"];
"1000497" [label="(Identifier,REG_NEWLINE)"];
"1000480" [label="(Literal,0)"];
"1000559" [label="(Call,&rx)"];
"1000303" [label="(Call,file_magerror(ms, \"cannot happen with double: invalid relation `%c'\", m->reln))"];
"1000484" [label="(Call,rc = file_regcomp(&rx, m->value.s,\n\t\t    REG_EXTENDED|REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0)))"];
"1000468" [label="(Block,)"];
"1000487" [label="(Call,&rx)"];
"1000549" [label="(Call,ms->search.s)"];
"1000521" [label="(Block,)"];
"1000498" [label="(Call,(m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0)"];
"1000965" [label="(Call,file_magerror(ms, \"cannot happen: invalid relation `%c'\",\n\t\t    m->reln))"];
"1000557" [label="(Identifier,rc)"];
"1000660" [label="(Identifier,v)"];
"1000547" [label="(Call,(intptr_t)ms->search.s)"];
"1000508" [label="(Block,)"];
"1000495" [label="(Identifier,REG_EXTENDED)"];
"1000545" [label="(Call,(char *)(intptr_t)ms->search.s)"];
"1000568" [label="(Literal,1)"];
"1000473" [label="(Call,ms->search.s)"];
"1000238" [label="(Call,file_magerror(ms, \"cannot happen with float: invalid relation `%c'\",\n\t\t\t    m->reln))"];
"1000513" [label="(Identifier,ms)"];
"1000556" [label="(Call,rc = file_regexec(&rx, (const char *)ms->search.s,\n \t\t\t    1, pmatch, REG_STARTEND))"];
"1000643" [label="(Call,file_regerror(&rx, rc, ms))"];
"1000586" [label="(Block,)"];
"1000563" [label="(Call,ms->search.s)"];
"1000646" [label="(Identifier,rc)"];
"1000507" [label="(Identifier,rc)"];
"1000471" [label="(ControlStructure,if (ms->search.s == NULL))"];
"1000976" [label="(MethodReturn,RET)"];
"1000515" [label="(Identifier,v)"];
"1000486" [label="(Call,file_regcomp(&rx, m->value.s,\n\t\t    REG_EXTENDED|REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0)))"];
"1000655" [label="(Call,file_regfree(&rx))"];
"1000575" [label="(Call,(intptr_t)ms->search.s)"];
"1000472" [label="(Call,ms->search.s == NULL)"];
"1000558" [label="(Call,file_regexec(&rx, (const char *)ms->search.s,\n \t\t\t    1, pmatch, REG_STARTEND))"];
"1000675" [label="(Call,file_magerror(ms, \"invalid type %d in magiccheck()\", m->type))"];
"1000510" [label="(Call,&rx)"];
"1000647" [label="(Identifier,ms)"];
"1000489" [label="(Call,m->value.s)"];
"1000644" [label="(Call,&rx)"];
"1000494" [label="(Call,REG_EXTENDED|REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0))"];
"1000655" -> "1000468"  [label="AST: "];
"1000655" -> "1000656"  [label="CFG: "];
"1000656" -> "1000655"  [label="AST: "];
"1000660" -> "1000655"  [label="CFG: "];
"1000655" -> "1000976"  [label="DDG: &rx"];
"1000655" -> "1000976"  [label="DDG: file_regfree(&rx)"];
"1000643" -> "1000655"  [label="DDG: &rx"];
"1000558" -> "1000655"  [label="DDG: &rx"];
"1000509" -> "1000655"  [label="DDG: &rx"];
"1000643" -> "1000586"  [label="AST: "];
"1000643" -> "1000647"  [label="CFG: "];
"1000644" -> "1000643"  [label="AST: "];
"1000646" -> "1000643"  [label="AST: "];
"1000647" -> "1000643"  [label="AST: "];
"1000649" -> "1000643"  [label="CFG: "];
"1000643" -> "1000976"  [label="DDG: file_regerror(&rx, rc, ms)"];
"1000643" -> "1000976"  [label="DDG: rc"];
"1000643" -> "1000976"  [label="DDG: &rx"];
"1000643" -> "1000976"  [label="DDG: ms"];
"1000558" -> "1000643"  [label="DDG: &rx"];
"1000556" -> "1000643"  [label="DDG: rc"];
"1000103" -> "1000643"  [label="DDG: ms"];
"1000643" -> "1000686"  [label="DDG: ms"];
"1000558" -> "1000556"  [label="AST: "];
"1000558" -> "1000570"  [label="CFG: "];
"1000559" -> "1000558"  [label="AST: "];
"1000561" -> "1000558"  [label="AST: "];
"1000568" -> "1000558"  [label="AST: "];
"1000569" -> "1000558"  [label="AST: "];
"1000570" -> "1000558"  [label="AST: "];
"1000556" -> "1000558"  [label="CFG: "];
"1000558" -> "1000976"  [label="DDG: pmatch"];
"1000558" -> "1000976"  [label="DDG: &rx"];
"1000558" -> "1000976"  [label="DDG: REG_STARTEND"];
"1000558" -> "1000976"  [label="DDG: (const char *)ms->search.s"];
"1000558" -> "1000556"  [label="DDG: 1"];
"1000558" -> "1000556"  [label="DDG: REG_STARTEND"];
"1000558" -> "1000556"  [label="DDG: (const char *)ms->search.s"];
"1000558" -> "1000556"  [label="DDG: &rx"];
"1000558" -> "1000556"  [label="DDG: pmatch"];
"1000486" -> "1000558"  [label="DDG: &rx"];
"1000561" -> "1000558"  [label="DDG: ms->search.s"];
"1000486" -> "1000484"  [label="AST: "];
"1000486" -> "1000494"  [label="CFG: "];
"1000487" -> "1000486"  [label="AST: "];
"1000489" -> "1000486"  [label="AST: "];
"1000494" -> "1000486"  [label="AST: "];
"1000484" -> "1000486"  [label="CFG: "];
"1000486" -> "1000976"  [label="DDG: m->value.s"];
"1000486" -> "1000976"  [label="DDG: REG_EXTENDED|REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0)"];
"1000486" -> "1000484"  [label="DDG: &rx"];
"1000486" -> "1000484"  [label="DDG: m->value.s"];
"1000486" -> "1000484"  [label="DDG: REG_EXTENDED|REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0)"];
"1000494" -> "1000486"  [label="DDG: REG_EXTENDED"];
"1000494" -> "1000486"  [label="DDG: REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0)"];
"1000486" -> "1000509"  [label="DDG: &rx"];
"1000494" -> "1000496"  [label="CFG: "];
"1000495" -> "1000494"  [label="AST: "];
"1000496" -> "1000494"  [label="AST: "];
"1000494" -> "1000976"  [label="DDG: REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0)"];
"1000494" -> "1000976"  [label="DDG: REG_EXTENDED"];
"1000496" -> "1000494"  [label="DDG: REG_NEWLINE"];
"1000496" -> "1000494"  [label="DDG: (m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0"];
"1000496" -> "1000498"  [label="CFG: "];
"1000497" -> "1000496"  [label="AST: "];
"1000498" -> "1000496"  [label="AST: "];
"1000496" -> "1000976"  [label="DDG: (m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0"];
"1000496" -> "1000976"  [label="DDG: REG_NEWLINE"];
"1000561" -> "1000563"  [label="CFG: "];
"1000562" -> "1000561"  [label="AST: "];
"1000563" -> "1000561"  [label="AST: "];
"1000568" -> "1000561"  [label="CFG: "];
"1000547" -> "1000561"  [label="DDG: ms->search.s"];
"1000561" -> "1000575"  [label="DDG: ms->search.s"];
"1000547" -> "1000545"  [label="AST: "];
"1000547" -> "1000549"  [label="CFG: "];
"1000548" -> "1000547"  [label="AST: "];
"1000549" -> "1000547"  [label="AST: "];
"1000545" -> "1000547"  [label="CFG: "];
"1000547" -> "1000545"  [label="DDG: ms->search.s"];
"1000472" -> "1000547"  [label="DDG: ms->search.s"];
"1000472" -> "1000471"  [label="AST: "];
"1000472" -> "1000478"  [label="CFG: "];
"1000473" -> "1000472"  [label="AST: "];
"1000478" -> "1000472"  [label="AST: "];
"1000480" -> "1000472"  [label="CFG: "];
"1000482" -> "1000472"  [label="CFG: "];
"1000472" -> "1000976"  [label="DDG: ms->search.s == NULL"];
"1000472" -> "1000976"  [label="DDG: ms->search.s"];
"1000472" -> "1000976"  [label="DDG: NULL"];
"1000556" -> "1000521"  [label="AST: "];
"1000557" -> "1000556"  [label="AST: "];
"1000574" -> "1000556"  [label="CFG: "];
"1000556" -> "1000976"  [label="DDG: rc"];
"1000556" -> "1000976"  [label="DDG: file_regexec(&rx, (const char *)ms->search.s,\n \t\t\t    1, pmatch, REG_STARTEND)"];
"1000103" -> "1000102"  [label="AST: "];
"1000103" -> "1000976"  [label="DDG: ms"];
"1000103" -> "1000238"  [label="DDG: ms"];
"1000103" -> "1000303"  [label="DDG: ms"];
"1000103" -> "1000509"  [label="DDG: ms"];
"1000103" -> "1000675"  [label="DDG: ms"];
"1000103" -> "1000686"  [label="DDG: ms"];
"1000103" -> "1000965"  [label="DDG: ms"];
"1000509" -> "1000508"  [label="AST: "];
"1000509" -> "1000513"  [label="CFG: "];
"1000510" -> "1000509"  [label="AST: "];
"1000512" -> "1000509"  [label="AST: "];
"1000513" -> "1000509"  [label="AST: "];
"1000515" -> "1000509"  [label="CFG: "];
"1000509" -> "1000976"  [label="DDG: file_regerror(&rx, rc, ms)"];
"1000509" -> "1000976"  [label="DDG: ms"];
"1000509" -> "1000976"  [label="DDG: rc"];
"1000484" -> "1000509"  [label="DDG: rc"];
"1000509" -> "1000686"  [label="DDG: ms"];
"1000484" -> "1000468"  [label="AST: "];
"1000485" -> "1000484"  [label="AST: "];
"1000507" -> "1000484"  [label="CFG: "];
"1000484" -> "1000976"  [label="DDG: file_regcomp(&rx, m->value.s,\n\t\t    REG_EXTENDED|REG_NEWLINE|\n\t\t    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0))"];
}
