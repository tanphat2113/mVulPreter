digraph "0_tnef_1a17af1ed0c791aec44dbdc9eab91218cc1e335a@API" {
"1000138" [label="(Call,assert((num_properties+1) != 0))"];
"1000139" [label="(Call,(num_properties+1) != 0)"];
"1000132" [label="(Call,num_properties = GETINT32(buf+idx))"];
"1000134" [label="(Call,GETINT32(buf+idx))"];
"1000119" [label="(MethodParameterIn,unsigned char *buf)"];
"1000122" [label="(Call,idx = 0)"];
"1000560" [label="(Call,buf+idx+4)"];
"1000133" [label="(Identifier,num_properties)"];
"1000143" [label="(Literal,0)"];
"1000124" [label="(Literal,0)"];
"1000758" [label="(MethodReturn,RET)"];
"1000156" [label="(Call,i < num_properties)"];
"1000359" [label="(Call,GETINT32(buf+idx))"];
"1000285" [label="(Call,GETINT32(buf+idx))"];
"1000592" [label="(Call,buf+idx)"];
"1000141" [label="(Identifier,num_properties)"];
"1000218" [label="(Call,copy_guid_from_buf(a->guid, buf+idx, len))"];
"1000542" [label="(Call,GETINT32(buf+idx))"];
"1000134" [label="(Call,GETINT32(buf+idx))"];
"1000184" [label="(Call,buf+idx)"];
"1000608" [label="(Call,GETINT32(buf+idx+4))"];
"1000627" [label="(Call,copy_guid_from_buf(&v->data.guid, buf+idx, len))"];
"1000706" [label="(Call,buf+idx)"];
"1000123" [label="(Identifier,idx)"];
"1000286" [label="(Call,buf+idx)"];
"1000119" [label="(MethodParameterIn,unsigned char *buf)"];
"1000198" [label="(Call,buf+idx)"];
"1000120" [label="(Block,)"];
"1000140" [label="(Call,num_properties+1)"];
"1000695" [label="(Call,buf+idx)"];
"1000489" [label="(Call,GETINT32(buf+idx))"];
"1000145" [label="(Identifier,idx)"];
"1000129" [label="(Identifier,len)"];
"1000138" [label="(Call,assert((num_properties+1) != 0))"];
"1000183" [label="(Call,GETINT16(buf+idx))"];
"1000197" [label="(Call,GETINT16(buf+idx))"];
"1000609" [label="(Call,buf+idx+4)"];
"1000144" [label="(Call,idx += 4)"];
"1000559" [label="(Call,GETINT32(buf+idx+4))"];
"1000466" [label="(Call,GETINT16(buf+idx))"];
"1000515" [label="(Call,GETINT32(buf+idx))"];
"1000135" [label="(Call,buf+idx)"];
"1000405" [label="(Call,buf+idx)"];
"1000139" [label="(Call,(num_properties+1) != 0)"];
"1000490" [label="(Call,buf+idx)"];
"1000516" [label="(Call,buf+idx)"];
"1000237" [label="(Call,GETINT32(buf+idx))"];
"1000238" [label="(Call,buf+idx)"];
"1000132" [label="(Call,num_properties = GETINT32(buf+idx))"];
"1000656" [label="(Call,buf+idx)"];
"1000543" [label="(Call,buf+idx)"];
"1000691" [label="(Call,unicode_to_utf8(v->len, buf+idx))"];
"1000122" [label="(Call,idx = 0)"];
"1000360" [label="(Call,buf+idx)"];
"1000334" [label="(Call,buf+idx)"];
"1000467" [label="(Call,buf+idx)"];
"1000404" [label="(Call,GETINT32(buf+idx))"];
"1000634" [label="(Call,buf+idx)"];
"1000222" [label="(Call,buf+idx)"];
"1000591" [label="(Call,GETINT32(buf+idx))"];
"1000655" [label="(Call,GETINT32(buf+idx))"];
"1000700" [label="(Call,memmove (v->data.buf, buf+idx, v->len))"];
"1000138" -> "1000120"  [label="AST: "];
"1000138" -> "1000139"  [label="CFG: "];
"1000139" -> "1000138"  [label="AST: "];
"1000145" -> "1000138"  [label="CFG: "];
"1000138" -> "1000758"  [label="DDG: (num_properties+1) != 0"];
"1000138" -> "1000758"  [label="DDG: assert((num_properties+1) != 0)"];
"1000139" -> "1000138"  [label="DDG: num_properties+1"];
"1000139" -> "1000138"  [label="DDG: 0"];
"1000139" -> "1000143"  [label="CFG: "];
"1000140" -> "1000139"  [label="AST: "];
"1000143" -> "1000139"  [label="AST: "];
"1000139" -> "1000758"  [label="DDG: num_properties+1"];
"1000132" -> "1000139"  [label="DDG: num_properties"];
"1000132" -> "1000120"  [label="AST: "];
"1000132" -> "1000134"  [label="CFG: "];
"1000133" -> "1000132"  [label="AST: "];
"1000134" -> "1000132"  [label="AST: "];
"1000141" -> "1000132"  [label="CFG: "];
"1000132" -> "1000758"  [label="DDG: GETINT32(buf+idx)"];
"1000134" -> "1000132"  [label="DDG: buf+idx"];
"1000132" -> "1000140"  [label="DDG: num_properties"];
"1000132" -> "1000156"  [label="DDG: num_properties"];
"1000134" -> "1000135"  [label="CFG: "];
"1000135" -> "1000134"  [label="AST: "];
"1000134" -> "1000758"  [label="DDG: buf+idx"];
"1000119" -> "1000134"  [label="DDG: buf"];
"1000122" -> "1000134"  [label="DDG: idx"];
"1000119" -> "1000117"  [label="AST: "];
"1000119" -> "1000758"  [label="DDG: buf"];
"1000119" -> "1000135"  [label="DDG: buf"];
"1000119" -> "1000183"  [label="DDG: buf"];
"1000119" -> "1000184"  [label="DDG: buf"];
"1000119" -> "1000197"  [label="DDG: buf"];
"1000119" -> "1000198"  [label="DDG: buf"];
"1000119" -> "1000218"  [label="DDG: buf"];
"1000119" -> "1000222"  [label="DDG: buf"];
"1000119" -> "1000237"  [label="DDG: buf"];
"1000119" -> "1000238"  [label="DDG: buf"];
"1000119" -> "1000285"  [label="DDG: buf"];
"1000119" -> "1000286"  [label="DDG: buf"];
"1000119" -> "1000334"  [label="DDG: buf"];
"1000119" -> "1000359"  [label="DDG: buf"];
"1000119" -> "1000360"  [label="DDG: buf"];
"1000119" -> "1000404"  [label="DDG: buf"];
"1000119" -> "1000405"  [label="DDG: buf"];
"1000119" -> "1000466"  [label="DDG: buf"];
"1000119" -> "1000467"  [label="DDG: buf"];
"1000119" -> "1000489"  [label="DDG: buf"];
"1000119" -> "1000490"  [label="DDG: buf"];
"1000119" -> "1000515"  [label="DDG: buf"];
"1000119" -> "1000516"  [label="DDG: buf"];
"1000119" -> "1000542"  [label="DDG: buf"];
"1000119" -> "1000543"  [label="DDG: buf"];
"1000119" -> "1000559"  [label="DDG: buf"];
"1000119" -> "1000560"  [label="DDG: buf"];
"1000119" -> "1000591"  [label="DDG: buf"];
"1000119" -> "1000592"  [label="DDG: buf"];
"1000119" -> "1000608"  [label="DDG: buf"];
"1000119" -> "1000609"  [label="DDG: buf"];
"1000119" -> "1000627"  [label="DDG: buf"];
"1000119" -> "1000634"  [label="DDG: buf"];
"1000119" -> "1000655"  [label="DDG: buf"];
"1000119" -> "1000656"  [label="DDG: buf"];
"1000119" -> "1000691"  [label="DDG: buf"];
"1000119" -> "1000695"  [label="DDG: buf"];
"1000119" -> "1000700"  [label="DDG: buf"];
"1000119" -> "1000706"  [label="DDG: buf"];
"1000122" -> "1000120"  [label="AST: "];
"1000122" -> "1000124"  [label="CFG: "];
"1000123" -> "1000122"  [label="AST: "];
"1000124" -> "1000122"  [label="AST: "];
"1000129" -> "1000122"  [label="CFG: "];
"1000122" -> "1000135"  [label="DDG: idx"];
"1000122" -> "1000144"  [label="DDG: idx"];
}
