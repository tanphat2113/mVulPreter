digraph "0_linux_57ebd808a97d7c5b1e1afb937c2db22beba3c1f8_1@pointer" {
"1000152" [label="(Call,outdev = state->out ? state->out->name : nulldevname)"];
"1000246" [label="(Call,ip6_packet_match(skb, indev, outdev, &e->ipv6,\n\t\t    &acpar.thoff, &acpar.fragoff, &acpar.hotdrop))"];
"1000245" [label="(Call,!ip6_packet_match(skb, indev, outdev, &e->ipv6,\n\t\t    &acpar.thoff, &acpar.fragoff, &acpar.hotdrop))"];
"1000294" [label="(Call,acpar.match->match(skb, &acpar))"];
"1000293" [label="(Call,!acpar.match->match(skb, &acpar))"];
"1000331" [label="(Call,trace_packet(state->net, skb, hook, state->in,\n\t\t\t\t     state->out, table->name, private, e))"];
"1000415" [label="(Call,ip6t_next_entry(e))"];
"1000411" [label="(Call,table_base + v != ip6t_next_entry(e))"];
"1000410" [label="(Call,table_base + v != ip6t_next_entry(e) &&\n \t\t\t    !(e->ipv6.flags & IP6T_F_GOTO))"];
"1000438" [label="(Call,jumpstack[stackidx++] = e)"];
"1000470" [label="(Call,t->u.kernel.target->target(skb, &acpar))"];
"1000468" [label="(Call,verdict = t->u.kernel.target->target(skb, &acpar))"];
"1000475" [label="(Call,verdict == XT_CONTINUE)"];
"1000498" [label="(Return,return verdict;)"];
"1000480" [label="(Call,ip6t_next_entry(e))"];
"1000478" [label="(Call,e = ip6t_next_entry(e))"];
"1000237" [label="(Call,!e)"];
"1000236" [label="(Call,WARN_ON(!e))"];
"1000270" [label="(Call,ip6t_next_entry(e))"];
"1000268" [label="(Call,e = ip6t_next_entry(e))"];
"1000315" [label="(Call,ip6t_get_target_c(e))"];
"1000313" [label="(Call,t = ip6t_get_target_c(e))"];
"1000364" [label="(Call,(struct xt_standard_target *)t)"];
"1000484" [label="(Call,!acpar.hotdrop)"];
"1000481" [label="(Identifier,e)"];
"1000246" [label="(Call,ip6_packet_match(skb, indev, outdev, &e->ipv6,\n\t\t    &acpar.thoff, &acpar.fragoff, &acpar.hotdrop))"];
"1000336" [label="(Identifier,hook)"];
"1000484" [label="(Call,!acpar.hotdrop)"];
"1000293" [label="(Call,!acpar.match->match(skb, &acpar))"];
"1000298" [label="(ControlStructure,goto no_match;)"];
"1000224" [label="(Call,get_entry(table_base, private->hook_entry[hook]))"];
"1000296" [label="(Call,&acpar)"];
"1000270" [label="(Call,ip6t_next_entry(e))"];
"1000346" [label="(Identifier,private)"];
"1000469" [label="(Identifier,verdict)"];
"1000315" [label="(Call,ip6t_get_target_c(e))"];
"1000378" [label="(Call,verdict = (unsigned int)(-v) - 1)"];
"1000124" [label="(Call,verdict = NF_DROP)"];
"1000497" [label="(ControlStructure,else)"];
"1000485" [label="(Call,acpar.hotdrop)"];
"1000332" [label="(Call,state->net)"];
"1000444" [label="(Call,e = get_entry(table_base, v))"];
"1000272" [label="(ControlStructure,continue;)"];
"1000231" [label="(ControlStructure,do)"];
"1000331" [label="(Call,trace_packet(state->net, skb, hook, state->in,\n\t\t\t\t     state->out, table->name, private, e))"];
"1000343" [label="(Call,table->name)"];
"1000483" [label="(ControlStructure,break;)"];
"1000489" [label="(Identifier,addend)"];
"1000250" [label="(Call,&e->ipv6)"];
"1000154" [label="(Call,state->out ? state->out->name : nulldevname)"];
"1000500" [label="(MethodReturn,RET)"];
"1000369" [label="(Call,v < 0)"];
"1000322" [label="(Identifier,t)"];
"1000269" [label="(Identifier,e)"];
"1000294" [label="(Call,acpar.match->match(skb, &acpar))"];
"1000477" [label="(Identifier,XT_CONTINUE)"];
"1000366" [label="(Identifier,t)"];
"1000401" [label="(Call,e = ip6t_next_entry(jumpstack[--stackidx]))"];
"1000480" [label="(Call,ip6t_next_entry(e))"];
"1000276" [label="(Identifier,acpar)"];
"1000110" [label="(MethodParameterIn,struct sk_buff *skb)"];
"1000471" [label="(Identifier,skb)"];
"1000499" [label="(Identifier,verdict)"];
"1000166" [label="(Identifier,acpar)"];
"1000248" [label="(Identifier,indev)"];
"1000354" [label="(Identifier,t)"];
"1000486" [label="(Identifier,acpar)"];
"1000472" [label="(Call,&acpar)"];
"1000416" [label="(Identifier,e)"];
"1000476" [label="(Identifier,verdict)"];
"1000445" [label="(Identifier,e)"];
"1000439" [label="(Call,jumpstack[stackidx++])"];
"1000367" [label="(FieldIdentifier,verdict)"];
"1000335" [label="(Identifier,skb)"];
"1000314" [label="(Identifier,t)"];
"1000267" [label="(JumpTarget,no_match:)"];
"1000232" [label="(Block,)"];
"1000271" [label="(Identifier,e)"];
"1000113" [label="(Block,)"];
"1000254" [label="(Call,&acpar.thoff)"];
"1000468" [label="(Call,verdict = t->u.kernel.target->target(skb, &acpar))"];
"1000295" [label="(Identifier,skb)"];
"1000300" [label="(Identifier,counter)"];
"1000412" [label="(Call,table_base + v)"];
"1000244" [label="(ControlStructure,if (!ip6_packet_match(skb, indev, outdev, &e->ipv6,\n\t\t    &acpar.thoff, &acpar.fragoff, &acpar.hotdrop)))"];
"1000266" [label="(Block,)"];
"1000363" [label="(Call,((struct xt_standard_target *)t)->verdict)"];
"1000434" [label="(Call,verdict = NF_DROP)"];
"1000326" [label="(ControlStructure,if (unlikely(skb->nf_trace)))"];
"1000247" [label="(Identifier,skb)"];
"1000313" [label="(Call,t = ip6t_get_target_c(e))"];
"1000237" [label="(Call,!e)"];
"1000292" [label="(ControlStructure,if (!acpar.match->match(skb, &acpar)))"];
"1000446" [label="(Call,get_entry(table_base, v))"];
"1000470" [label="(Call,t->u.kernel.target->target(skb, &acpar))"];
"1000222" [label="(Call,e = get_entry(table_base, private->hook_entry[hook]))"];
"1000475" [label="(Call,verdict == XT_CONTINUE)"];
"1000340" [label="(Call,state->out)"];
"1000474" [label="(ControlStructure,if (verdict == XT_CONTINUE))"];
"1000187" [label="(Call,private = READ_ONCE(table->private))"];
"1000417" [label="(Call,!(e->ipv6.flags & IP6T_F_GOTO))"];
"1000152" [label="(Call,outdev = state->out ? state->out->name : nulldevname)"];
"1000425" [label="(Block,)"];
"1000393" [label="(Call,get_entry(table_base,\n\t\t\t\t\t    private->underflow[hook]))"];
"1000164" [label="(Call,acpar.hotdrop = false)"];
"1000239" [label="(Call,acpar.thoff = 0)"];
"1000409" [label="(ControlStructure,if (table_base + v != ip6t_next_entry(e) &&\n \t\t\t    !(e->ipv6.flags & IP6T_F_GOTO)))"];
"1000140" [label="(Call,indev = state->in ? state->in->name : nulldevname)"];
"1000153" [label="(Identifier,outdev)"];
"1000347" [label="(Identifier,e)"];
"1000316" [label="(Identifier,e)"];
"1000443" [label="(Identifier,e)"];
"1000498" [label="(Return,return verdict;)"];
"1000438" [label="(Call,jumpstack[stackidx++] = e)"];
"1000478" [label="(Call,e = ip6t_next_entry(e))"];
"1000245" [label="(Call,!ip6_packet_match(skb, indev, outdev, &e->ipv6,\n\t\t    &acpar.thoff, &acpar.fragoff, &acpar.hotdrop))"];
"1000268" [label="(Call,e = ip6t_next_entry(e))"];
"1000479" [label="(Identifier,e)"];
"1000258" [label="(Call,&acpar.fragoff)"];
"1000262" [label="(Call,&acpar.hotdrop)"];
"1000364" [label="(Call,(struct xt_standard_target *)t)"];
"1000180" [label="(Call,1 << hook)"];
"1000411" [label="(Call,table_base + v != ip6t_next_entry(e))"];
"1000241" [label="(Identifier,acpar)"];
"1000410" [label="(Call,table_base + v != ip6t_next_entry(e) &&\n \t\t\t    !(e->ipv6.flags & IP6T_F_GOTO))"];
"1000236" [label="(Call,WARN_ON(!e))"];
"1000429" [label="(Identifier,stackidx)"];
"1000391" [label="(Call,e = get_entry(table_base,\n\t\t\t\t\t    private->underflow[hook]))"];
"1000415" [label="(Call,ip6t_next_entry(e))"];
"1000421" [label="(Identifier,e)"];
"1000238" [label="(Identifier,e)"];
"1000337" [label="(Call,state->in)"];
"1000249" [label="(Identifier,outdev)"];
"1000152" -> "1000113"  [label="AST: "];
"1000152" -> "1000154"  [label="CFG: "];
"1000153" -> "1000152"  [label="AST: "];
"1000154" -> "1000152"  [label="AST: "];
"1000166" -> "1000152"  [label="CFG: "];
"1000152" -> "1000500"  [label="DDG: state->out ? state->out->name : nulldevname"];
"1000152" -> "1000246"  [label="DDG: outdev"];
"1000246" -> "1000245"  [label="AST: "];
"1000246" -> "1000262"  [label="CFG: "];
"1000247" -> "1000246"  [label="AST: "];
"1000248" -> "1000246"  [label="AST: "];
"1000249" -> "1000246"  [label="AST: "];
"1000250" -> "1000246"  [label="AST: "];
"1000254" -> "1000246"  [label="AST: "];
"1000258" -> "1000246"  [label="AST: "];
"1000262" -> "1000246"  [label="AST: "];
"1000245" -> "1000246"  [label="CFG: "];
"1000246" -> "1000500"  [label="DDG: indev"];
"1000246" -> "1000500"  [label="DDG: &acpar.thoff"];
"1000246" -> "1000500"  [label="DDG: &acpar.fragoff"];
"1000246" -> "1000500"  [label="DDG: &acpar.hotdrop"];
"1000246" -> "1000500"  [label="DDG: &e->ipv6"];
"1000246" -> "1000500"  [label="DDG: skb"];
"1000246" -> "1000500"  [label="DDG: outdev"];
"1000246" -> "1000245"  [label="DDG: indev"];
"1000246" -> "1000245"  [label="DDG: skb"];
"1000246" -> "1000245"  [label="DDG: &acpar.fragoff"];
"1000246" -> "1000245"  [label="DDG: outdev"];
"1000246" -> "1000245"  [label="DDG: &acpar.hotdrop"];
"1000246" -> "1000245"  [label="DDG: &acpar.thoff"];
"1000246" -> "1000245"  [label="DDG: &e->ipv6"];
"1000294" -> "1000246"  [label="DDG: skb"];
"1000470" -> "1000246"  [label="DDG: skb"];
"1000331" -> "1000246"  [label="DDG: skb"];
"1000110" -> "1000246"  [label="DDG: skb"];
"1000140" -> "1000246"  [label="DDG: indev"];
"1000239" -> "1000246"  [label="DDG: acpar.thoff"];
"1000484" -> "1000246"  [label="DDG: acpar.hotdrop"];
"1000164" -> "1000246"  [label="DDG: acpar.hotdrop"];
"1000246" -> "1000294"  [label="DDG: skb"];
"1000246" -> "1000484"  [label="DDG: &acpar.hotdrop"];
"1000245" -> "1000244"  [label="AST: "];
"1000267" -> "1000245"  [label="CFG: "];
"1000276" -> "1000245"  [label="CFG: "];
"1000245" -> "1000500"  [label="DDG: !ip6_packet_match(skb, indev, outdev, &e->ipv6,\n\t\t    &acpar.thoff, &acpar.fragoff, &acpar.hotdrop)"];
"1000245" -> "1000500"  [label="DDG: ip6_packet_match(skb, indev, outdev, &e->ipv6,\n\t\t    &acpar.thoff, &acpar.fragoff, &acpar.hotdrop)"];
"1000294" -> "1000293"  [label="AST: "];
"1000294" -> "1000296"  [label="CFG: "];
"1000295" -> "1000294"  [label="AST: "];
"1000296" -> "1000294"  [label="AST: "];
"1000293" -> "1000294"  [label="CFG: "];
"1000294" -> "1000500"  [label="DDG: &acpar"];
"1000294" -> "1000500"  [label="DDG: skb"];
"1000294" -> "1000293"  [label="DDG: skb"];
"1000294" -> "1000293"  [label="DDG: &acpar"];
"1000110" -> "1000294"  [label="DDG: skb"];
"1000470" -> "1000294"  [label="DDG: &acpar"];
"1000294" -> "1000331"  [label="DDG: skb"];
"1000294" -> "1000470"  [label="DDG: skb"];
"1000294" -> "1000470"  [label="DDG: &acpar"];
"1000293" -> "1000292"  [label="AST: "];
"1000298" -> "1000293"  [label="CFG: "];
"1000300" -> "1000293"  [label="CFG: "];
"1000293" -> "1000500"  [label="DDG: acpar.match->match(skb, &acpar)"];
"1000293" -> "1000500"  [label="DDG: !acpar.match->match(skb, &acpar)"];
"1000331" -> "1000326"  [label="AST: "];
"1000331" -> "1000347"  [label="CFG: "];
"1000332" -> "1000331"  [label="AST: "];
"1000335" -> "1000331"  [label="AST: "];
"1000336" -> "1000331"  [label="AST: "];
"1000337" -> "1000331"  [label="AST: "];
"1000340" -> "1000331"  [label="AST: "];
"1000343" -> "1000331"  [label="AST: "];
"1000346" -> "1000331"  [label="AST: "];
"1000347" -> "1000331"  [label="AST: "];
"1000354" -> "1000331"  [label="CFG: "];
"1000331" -> "1000500"  [label="DDG: trace_packet(state->net, skb, hook, state->in,\n\t\t\t\t     state->out, table->name, private, e)"];
"1000331" -> "1000500"  [label="DDG: hook"];
"1000331" -> "1000500"  [label="DDG: table->name"];
"1000331" -> "1000500"  [label="DDG: state->net"];
"1000331" -> "1000500"  [label="DDG: e"];
"1000331" -> "1000500"  [label="DDG: state->out"];
"1000331" -> "1000500"  [label="DDG: private"];
"1000331" -> "1000500"  [label="DDG: state->in"];
"1000331" -> "1000500"  [label="DDG: skb"];
"1000110" -> "1000331"  [label="DDG: skb"];
"1000180" -> "1000331"  [label="DDG: hook"];
"1000187" -> "1000331"  [label="DDG: private"];
"1000315" -> "1000331"  [label="DDG: e"];
"1000331" -> "1000415"  [label="DDG: e"];
"1000331" -> "1000470"  [label="DDG: skb"];
"1000331" -> "1000480"  [label="DDG: e"];
"1000415" -> "1000411"  [label="AST: "];
"1000415" -> "1000416"  [label="CFG: "];
"1000416" -> "1000415"  [label="AST: "];
"1000411" -> "1000415"  [label="CFG: "];
"1000415" -> "1000500"  [label="DDG: e"];
"1000415" -> "1000411"  [label="DDG: e"];
"1000315" -> "1000415"  [label="DDG: e"];
"1000415" -> "1000438"  [label="DDG: e"];
"1000411" -> "1000410"  [label="AST: "];
"1000412" -> "1000411"  [label="AST: "];
"1000421" -> "1000411"  [label="CFG: "];
"1000410" -> "1000411"  [label="CFG: "];
"1000411" -> "1000500"  [label="DDG: table_base + v"];
"1000411" -> "1000500"  [label="DDG: ip6t_next_entry(e)"];
"1000411" -> "1000410"  [label="DDG: table_base + v"];
"1000411" -> "1000410"  [label="DDG: ip6t_next_entry(e)"];
"1000224" -> "1000411"  [label="DDG: table_base"];
"1000393" -> "1000411"  [label="DDG: table_base"];
"1000446" -> "1000411"  [label="DDG: table_base"];
"1000369" -> "1000411"  [label="DDG: v"];
"1000410" -> "1000409"  [label="AST: "];
"1000410" -> "1000417"  [label="CFG: "];
"1000417" -> "1000410"  [label="AST: "];
"1000429" -> "1000410"  [label="CFG: "];
"1000445" -> "1000410"  [label="CFG: "];
"1000410" -> "1000500"  [label="DDG: table_base + v != ip6t_next_entry(e)"];
"1000410" -> "1000500"  [label="DDG: table_base + v != ip6t_next_entry(e) &&\n \t\t\t    !(e->ipv6.flags & IP6T_F_GOTO)"];
"1000410" -> "1000500"  [label="DDG: !(e->ipv6.flags & IP6T_F_GOTO)"];
"1000417" -> "1000410"  [label="DDG: e->ipv6.flags & IP6T_F_GOTO"];
"1000438" -> "1000425"  [label="AST: "];
"1000438" -> "1000443"  [label="CFG: "];
"1000439" -> "1000438"  [label="AST: "];
"1000443" -> "1000438"  [label="AST: "];
"1000445" -> "1000438"  [label="CFG: "];
"1000438" -> "1000500"  [label="DDG: jumpstack[stackidx++]"];
"1000470" -> "1000468"  [label="AST: "];
"1000470" -> "1000472"  [label="CFG: "];
"1000471" -> "1000470"  [label="AST: "];
"1000472" -> "1000470"  [label="AST: "];
"1000468" -> "1000470"  [label="CFG: "];
"1000470" -> "1000500"  [label="DDG: &acpar"];
"1000470" -> "1000500"  [label="DDG: skb"];
"1000470" -> "1000468"  [label="DDG: skb"];
"1000470" -> "1000468"  [label="DDG: &acpar"];
"1000110" -> "1000470"  [label="DDG: skb"];
"1000468" -> "1000232"  [label="AST: "];
"1000469" -> "1000468"  [label="AST: "];
"1000476" -> "1000468"  [label="CFG: "];
"1000468" -> "1000500"  [label="DDG: t->u.kernel.target->target(skb, &acpar)"];
"1000468" -> "1000475"  [label="DDG: verdict"];
"1000475" -> "1000474"  [label="AST: "];
"1000475" -> "1000477"  [label="CFG: "];
"1000476" -> "1000475"  [label="AST: "];
"1000477" -> "1000475"  [label="AST: "];
"1000479" -> "1000475"  [label="CFG: "];
"1000483" -> "1000475"  [label="CFG: "];
"1000475" -> "1000500"  [label="DDG: verdict"];
"1000475" -> "1000500"  [label="DDG: XT_CONTINUE"];
"1000475" -> "1000500"  [label="DDG: verdict == XT_CONTINUE"];
"1000475" -> "1000498"  [label="DDG: verdict"];
"1000498" -> "1000497"  [label="AST: "];
"1000498" -> "1000499"  [label="CFG: "];
"1000499" -> "1000498"  [label="AST: "];
"1000500" -> "1000498"  [label="CFG: "];
"1000498" -> "1000500"  [label="DDG: <RET>"];
"1000499" -> "1000498"  [label="DDG: verdict"];
"1000124" -> "1000498"  [label="DDG: verdict"];
"1000378" -> "1000498"  [label="DDG: verdict"];
"1000434" -> "1000498"  [label="DDG: verdict"];
"1000480" -> "1000478"  [label="AST: "];
"1000480" -> "1000481"  [label="CFG: "];
"1000481" -> "1000480"  [label="AST: "];
"1000478" -> "1000480"  [label="CFG: "];
"1000480" -> "1000478"  [label="DDG: e"];
"1000315" -> "1000480"  [label="DDG: e"];
"1000478" -> "1000474"  [label="AST: "];
"1000479" -> "1000478"  [label="AST: "];
"1000486" -> "1000478"  [label="CFG: "];
"1000478" -> "1000500"  [label="DDG: e"];
"1000478" -> "1000500"  [label="DDG: ip6t_next_entry(e)"];
"1000478" -> "1000237"  [label="DDG: e"];
"1000237" -> "1000236"  [label="AST: "];
"1000237" -> "1000238"  [label="CFG: "];
"1000238" -> "1000237"  [label="AST: "];
"1000236" -> "1000237"  [label="CFG: "];
"1000237" -> "1000236"  [label="DDG: e"];
"1000222" -> "1000237"  [label="DDG: e"];
"1000391" -> "1000237"  [label="DDG: e"];
"1000401" -> "1000237"  [label="DDG: e"];
"1000268" -> "1000237"  [label="DDG: e"];
"1000444" -> "1000237"  [label="DDG: e"];
"1000237" -> "1000270"  [label="DDG: e"];
"1000237" -> "1000315"  [label="DDG: e"];
"1000236" -> "1000232"  [label="AST: "];
"1000241" -> "1000236"  [label="CFG: "];
"1000236" -> "1000500"  [label="DDG: !e"];
"1000236" -> "1000500"  [label="DDG: WARN_ON(!e)"];
"1000270" -> "1000268"  [label="AST: "];
"1000270" -> "1000271"  [label="CFG: "];
"1000271" -> "1000270"  [label="AST: "];
"1000268" -> "1000270"  [label="CFG: "];
"1000270" -> "1000268"  [label="DDG: e"];
"1000268" -> "1000266"  [label="AST: "];
"1000269" -> "1000268"  [label="AST: "];
"1000272" -> "1000268"  [label="CFG: "];
"1000268" -> "1000500"  [label="DDG: e"];
"1000268" -> "1000500"  [label="DDG: ip6t_next_entry(e)"];
"1000315" -> "1000313"  [label="AST: "];
"1000315" -> "1000316"  [label="CFG: "];
"1000316" -> "1000315"  [label="AST: "];
"1000313" -> "1000315"  [label="CFG: "];
"1000315" -> "1000500"  [label="DDG: e"];
"1000315" -> "1000313"  [label="DDG: e"];
"1000313" -> "1000232"  [label="AST: "];
"1000314" -> "1000313"  [label="AST: "];
"1000322" -> "1000313"  [label="CFG: "];
"1000313" -> "1000500"  [label="DDG: ip6t_get_target_c(e)"];
"1000313" -> "1000500"  [label="DDG: t"];
"1000313" -> "1000364"  [label="DDG: t"];
"1000364" -> "1000363"  [label="AST: "];
"1000364" -> "1000366"  [label="CFG: "];
"1000365" -> "1000364"  [label="AST: "];
"1000366" -> "1000364"  [label="AST: "];
"1000367" -> "1000364"  [label="CFG: "];
"1000364" -> "1000500"  [label="DDG: t"];
"1000484" -> "1000231"  [label="AST: "];
"1000484" -> "1000485"  [label="CFG: "];
"1000485" -> "1000484"  [label="AST: "];
"1000238" -> "1000484"  [label="CFG: "];
"1000489" -> "1000484"  [label="CFG: "];
"1000484" -> "1000500"  [label="DDG: acpar.hotdrop"];
"1000484" -> "1000500"  [label="DDG: !acpar.hotdrop"];
"1000164" -> "1000484"  [label="DDG: acpar.hotdrop"];
}
