digraph "0_Chrome_a69c7b5d863dacbb08bfaa04359e3bc0bb4470dc_0@array" {
"1000117" [label="(Call,isSpaceOrNewline(text[0]))"];
"1000102" [label="(MethodParameterIn,const String& text)"];
"1000116" [label="(Call,document.frame()->spellChecker().updateMarkersForWordsAffectedByEditing(\n         isSpaceOrNewline(text[0])))"];
"1000121" [label="(Call,insertText(document, text, frame->selection().selectionInDOMTree(), options,\n             composition, isIncrementalInsertion))"];
"1000102" [label="(MethodParameterIn,const String& text)"];
"1000113" [label="(ControlStructure,if (!text.isEmpty()))"];
"1000116" [label="(Call,document.frame()->spellChecker().updateMarkersForWordsAffectedByEditing(\n         isSpaceOrNewline(text[0])))"];
"1000124" [label="(Call,frame->selection().selectionInDOMTree())"];
"1000117" [label="(Call,isSpaceOrNewline(text[0]))"];
"1000125" [label="(Identifier,options)"];
"1000122" [label="(Identifier,document)"];
"1000103" [label="(MethodParameterIn,Options options)"];
"1000128" [label="(MethodReturn,void)"];
"1000121" [label="(Call,insertText(document, text, frame->selection().selectionInDOMTree(), options,\n             composition, isIncrementalInsertion))"];
"1000106" [label="(Block,)"];
"1000105" [label="(MethodParameterIn,const bool isIncrementalInsertion)"];
"1000126" [label="(Identifier,composition)"];
"1000101" [label="(MethodParameterIn,Document& document)"];
"1000104" [label="(MethodParameterIn,TextCompositionType composition)"];
"1000127" [label="(Identifier,isIncrementalInsertion)"];
"1000118" [label="(Call,text[0])"];
"1000123" [label="(Identifier,text)"];
"1000117" -> "1000116"  [label="AST: "];
"1000117" -> "1000118"  [label="CFG: "];
"1000118" -> "1000117"  [label="AST: "];
"1000116" -> "1000117"  [label="CFG: "];
"1000117" -> "1000128"  [label="DDG: text[0]"];
"1000117" -> "1000116"  [label="DDG: text[0]"];
"1000102" -> "1000117"  [label="DDG: text"];
"1000117" -> "1000121"  [label="DDG: text[0]"];
"1000102" -> "1000100"  [label="AST: "];
"1000102" -> "1000128"  [label="DDG: text"];
"1000102" -> "1000121"  [label="DDG: text"];
"1000116" -> "1000113"  [label="AST: "];
"1000122" -> "1000116"  [label="CFG: "];
"1000116" -> "1000128"  [label="DDG: isSpaceOrNewline(text[0])"];
"1000116" -> "1000128"  [label="DDG: document.frame()->spellChecker().updateMarkersForWordsAffectedByEditing(\n         isSpaceOrNewline(text[0]))"];
"1000121" -> "1000106"  [label="AST: "];
"1000121" -> "1000127"  [label="CFG: "];
"1000122" -> "1000121"  [label="AST: "];
"1000123" -> "1000121"  [label="AST: "];
"1000124" -> "1000121"  [label="AST: "];
"1000125" -> "1000121"  [label="AST: "];
"1000126" -> "1000121"  [label="AST: "];
"1000127" -> "1000121"  [label="AST: "];
"1000128" -> "1000121"  [label="CFG: "];
"1000121" -> "1000128"  [label="DDG: composition"];
"1000121" -> "1000128"  [label="DDG: options"];
"1000121" -> "1000128"  [label="DDG: text"];
"1000121" -> "1000128"  [label="DDG: isIncrementalInsertion"];
"1000121" -> "1000128"  [label="DDG: document"];
"1000121" -> "1000128"  [label="DDG: frame->selection().selectionInDOMTree()"];
"1000121" -> "1000128"  [label="DDG: insertText(document, text, frame->selection().selectionInDOMTree(), options,\n             composition, isIncrementalInsertion)"];
"1000101" -> "1000121"  [label="DDG: document"];
"1000103" -> "1000121"  [label="DDG: options"];
"1000104" -> "1000121"  [label="DDG: composition"];
"1000105" -> "1000121"  [label="DDG: isIncrementalInsertion"];
}
