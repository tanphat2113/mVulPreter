digraph "0_linux_0d62e9dd6da45bbf0f33a8617afc5fe774c8f45f@pointer" {
"1000920" [label="(Call,errmsg = \"Missing EOC in indefinite len cons\")"];
"1000949" [label="(Call,pr_debug(\"\nASN1: %s [m=%zu d=%zu ot=%02x t=%02x l=%zu]\n\",\n\t\t errmsg, pc, dp, optag, tag, len))"];
"1000951" [label="(Identifier,errmsg)"];
"1000922" [label="(Literal,\"Missing EOC in indefinite len cons\")"];
"1000935" [label="(Call,errmsg = \"Indefinite len primitive not permitted\")"];
"1000952" [label="(Identifier,pc)"];
"1000925" [label="(Call,errmsg = \"Invalid length EOC\")"];
"1000900" [label="(Call,errmsg = \"Jump stack overflow\")"];
"1000895" [label="(Call,errmsg = \"Jump stack underflow\")"];
"1000955" [label="(Identifier,tag)"];
"1000200" [label="(Call,pc >= machlen)"];
"1000418" [label="(Call,datalen - dp)"];
"1000468" [label="(Call,pr_debug(\"- TAG: %02x %zu%s\n\",\n\t\t\t tag, len, flags & FLAG_CONS ? \" CONS\" : \"\"))"];
"1000930" [label="(Call,errmsg = \"Unsupported length\")"];
"1000348" [label="(Call,len == ASN1_INDEFINITE_LENGTH)"];
"1000923" [label="(ControlStructure,goto error;)"];
"1000265" [label="(Call,dp++)"];
"1000386" [label="(Call,dp >= datalen - n)"];
"1000375" [label="(Call,len - 0x80)"];
"1000170" [label="(Call,len = 0)"];
"1000954" [label="(Identifier,optag)"];
"1000508" [label="(Call,actions[machine[pc + 2]](context, hdr, tag, data + dp, len))"];
"1000270" [label="(Call,tag & 0x1f)"];
"1000674" [label="(Call,pr_debug(\"- end cons t=%zu dp=%zu l=%zu/%zu\n\",\n\t\t\t tdp, dp, len, datalen))"];
"1000308" [label="(Call,pr_debug(\"- match? %02x %02x %02x\n\", tag, optag, tmp))"];
"1000960" [label="(MethodReturn,int)"];
"1000945" [label="(Call,errmsg = \"Long tag not supported\")"];
"1000691" [label="(Call,datalen - dp)"];
"1000959" [label="(Identifier,EBADMSG)"];
"1000355" [label="(Call,tag & ASN1_CONS_BIT)"];
"1000280" [label="(Call,pr_debug(\"- any %02x\n\", tag))"];
"1000366" [label="(Call,datalen - dp)"];
"1000956" [label="(Identifier,len)"];
"1000953" [label="(Identifier,dp)"];
"1000728" [label="(Call,dp++)"];
"1000940" [label="(Call,errmsg = \"Unexpected tag\")"];
"1000339" [label="(Call,dp++)"];
"1000149" [label="(Call,optag = 0)"];
"1000342" [label="(Call,len > 0x7f)"];
"1000806" [label="(Call,actions[act](context, hdr, 0, data + tdp, len))"];
"1000905" [label="(Call,errmsg = \"Cons stack underflow\")"];
"1000910" [label="(Call,errmsg = \"Cons stack overflow\")"];
"1000766" [label="(Call,dp != len)"];
"1000743" [label="(Call,dp < len)"];
"1000561" [label="(Call,pr_debug(\"- LEAF: %zu\n\", len))"];
"1000116" [label="(Block,)"];
"1000732" [label="(Call,len = dp - tdp - 2)"];
"1000137" [label="(Call,tag = 0)"];
"1000920" [label="(Call,errmsg = \"Missing EOC in indefinite len cons\")"];
"1000949" [label="(Call,pr_debug(\"\nASN1: %s [m=%zu d=%zu ot=%02x t=%02x l=%zu]\n\",\n\t\t errmsg, pc, dp, optag, tag, len))"];
"1000915" [label="(Call,errmsg = \"Cons length error\")"];
"1000773" [label="(Call,pr_debug(\"- cons len l=%zu d=%zu\n\", len, dp - tdp))"];
"1000255" [label="(Call,dp >= datalen - 1)"];
"1000488" [label="(Call,actions[machine[pc + 1]](context, hdr, tag, data + dp, len))"];
"1000890" [label="(Call,errmsg = \"Machine overrun error\")"];
"1000700" [label="(Call,dp++)"];
"1000416" [label="(Call,len > datalen - dp)"];
"1000836" [label="(Call,actions[machine[pc + 1]](context, hdr, tag, data + tdp, len))"];
"1000950" [label="(Literal,\"\nASN1: %s [m=%zu d=%zu ot=%02x t=%02x l=%zu]\n\")"];
"1000190" [label="(Call,pr_debug(\"next_op: pc=\e[32m%zu\e[m/%zu dp=\e[33m%zu\e[m/%zu C=%d J=%d\n\",\n\t\t pc, machlen, dp, datalen, csp, jsp))"];
"1000885" [label="(Call,errmsg = \"Data overrun error\")"];
"1000921" [label="(Identifier,errmsg)"];
"1000920" -> "1000116"  [label="AST: "];
"1000920" -> "1000922"  [label="CFG: "];
"1000921" -> "1000920"  [label="AST: "];
"1000922" -> "1000920"  [label="AST: "];
"1000923" -> "1000920"  [label="CFG: "];
"1000920" -> "1000949"  [label="DDG: "];
"1000949" -> "1000116"  [label="AST: "];
"1000949" -> "1000956"  [label="CFG: "];
"1000950" -> "1000949"  [label="AST: "];
"1000951" -> "1000949"  [label="AST: "];
"1000952" -> "1000949"  [label="AST: "];
"1000953" -> "1000949"  [label="AST: "];
"1000954" -> "1000949"  [label="AST: "];
"1000955" -> "1000949"  [label="AST: "];
"1000956" -> "1000949"  [label="AST: "];
"1000959" -> "1000949"  [label="CFG: "];
"1000949" -> "1000960"  [label="DDG: "];
"1000949" -> "1000960"  [label="DDG: "];
"1000949" -> "1000960"  [label="DDG: "];
"1000949" -> "1000960"  [label="DDG: "];
"1000949" -> "1000960"  [label="DDG: "];
"1000949" -> "1000960"  [label="DDG: "];
"1000949" -> "1000960"  [label="DDG: "];
"1000935" -> "1000949"  [label="DDG: "];
"1000910" -> "1000949"  [label="DDG: "];
"1000905" -> "1000949"  [label="DDG: "];
"1000895" -> "1000949"  [label="DDG: "];
"1000930" -> "1000949"  [label="DDG: "];
"1000900" -> "1000949"  [label="DDG: "];
"1000890" -> "1000949"  [label="DDG: "];
"1000925" -> "1000949"  [label="DDG: "];
"1000885" -> "1000949"  [label="DDG: "];
"1000945" -> "1000949"  [label="DDG: "];
"1000915" -> "1000949"  [label="DDG: "];
"1000940" -> "1000949"  [label="DDG: "];
"1000200" -> "1000949"  [label="DDG: "];
"1000691" -> "1000949"  [label="DDG: "];
"1000190" -> "1000949"  [label="DDG: "];
"1000728" -> "1000949"  [label="DDG: "];
"1000766" -> "1000949"  [label="DDG: "];
"1000766" -> "1000949"  [label="DDG: "];
"1000700" -> "1000949"  [label="DDG: "];
"1000366" -> "1000949"  [label="DDG: "];
"1000418" -> "1000949"  [label="DDG: "];
"1000339" -> "1000949"  [label="DDG: "];
"1000255" -> "1000949"  [label="DDG: "];
"1000386" -> "1000949"  [label="DDG: "];
"1000265" -> "1000949"  [label="DDG: "];
"1000308" -> "1000949"  [label="DDG: "];
"1000308" -> "1000949"  [label="DDG: "];
"1000149" -> "1000949"  [label="DDG: "];
"1000355" -> "1000949"  [label="DDG: "];
"1000280" -> "1000949"  [label="DDG: "];
"1000508" -> "1000949"  [label="DDG: "];
"1000508" -> "1000949"  [label="DDG: "];
"1000488" -> "1000949"  [label="DDG: "];
"1000488" -> "1000949"  [label="DDG: "];
"1000836" -> "1000949"  [label="DDG: "];
"1000836" -> "1000949"  [label="DDG: "];
"1000137" -> "1000949"  [label="DDG: "];
"1000468" -> "1000949"  [label="DDG: "];
"1000468" -> "1000949"  [label="DDG: "];
"1000270" -> "1000949"  [label="DDG: "];
"1000348" -> "1000949"  [label="DDG: "];
"1000375" -> "1000949"  [label="DDG: "];
"1000561" -> "1000949"  [label="DDG: "];
"1000342" -> "1000949"  [label="DDG: "];
"1000416" -> "1000949"  [label="DDG: "];
"1000170" -> "1000949"  [label="DDG: "];
"1000806" -> "1000949"  [label="DDG: "];
"1000773" -> "1000949"  [label="DDG: "];
"1000732" -> "1000949"  [label="DDG: "];
"1000674" -> "1000949"  [label="DDG: "];
"1000743" -> "1000949"  [label="DDG: "];
}
