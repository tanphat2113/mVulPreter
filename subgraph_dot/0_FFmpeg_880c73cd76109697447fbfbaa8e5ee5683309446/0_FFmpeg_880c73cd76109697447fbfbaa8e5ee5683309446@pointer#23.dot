digraph "0_FFmpeg_880c73cd76109697447fbfbaa8e5ee5683309446@pointer" {
"1000366" [label="(Call,av_log(avctx, AV_LOG_ERROR, \"Can't determine deflate buffer size.\n\"))"];
"1000116" [label="(MethodParameterIn,AVCodecContext *avctx)"];
"1000807" [label="(Call,av_log(avctx, AV_LOG_DEBUG,\n                            \"%dx%d diff start %d height %d\n\",\n                            i, j, s->diff_start, s->diff_height))"];
"1000365" [label="(Block,)"];
"1000116" [label="(MethodParameterIn,AVCodecContext *avctx)"];
"1000826" [label="(Call,av_log(avctx, AV_LOG_DEBUG, \"%dx%d zlibprime_prev\n\", i, j))"];
"1000368" [label="(Identifier,AV_LOG_ERROR)"];
"1000989" [label="(Call,av_log(avctx, AV_LOG_ERROR,\n                           \"error in decompression of block %dx%d\n\", i, j))"];
"1000421" [label="(Call,avcodec_set_dimensions(avctx, s->image_width, s->image_height))"];
"1001088" [label="(Call,av_log(avctx, AV_LOG_ERROR, \"buffer not fully consumed (%d != %d)\n\",\n               buf_size, (get_bits_count(&gb) / 8)))"];
"1000369" [label="(Literal,\"Can't determine deflate buffer size.\n\")"];
"1000258" [label="(Call,avpriv_request_sample(avctx, \"Custom palette\"))"];
"1001100" [label="(MethodReturn,static int)"];
"1000970" [label="(Call,flashsv_decode_block(avctx, avpkt, &gb, size,\n                                         cur_blk_width, cur_blk_height,\n                                         x_pos, y_pos,\n                                         i + j * (h_blocks + !!h_part)))"];
"1000390" [label="(Call,av_log(avctx, AV_LOG_ERROR, \"Can't allocate deflate buffer.\n\"))"];
"1000367" [label="(Identifier,avctx)"];
"1000450" [label="(Call,av_log(avctx, AV_LOG_ERROR, \"fh = %d, fv %d  vs  ch = %d, cv = %d\n\",\n               avctx->height, avctx->width, s->image_height, s->image_width))"];
"1000366" [label="(Call,av_log(avctx, AV_LOG_ERROR, \"Can't determine deflate buffer size.\n\"))"];
"1001034" [label="(Call,av_log(avctx, AV_LOG_ERROR, \"Cannot allocate image data\n\"))"];
"1000566" [label="(Call,ff_reget_buffer(avctx, &s->frame))"];
"1000339" [label="(Call,av_log(avctx, AV_LOG_ERROR, \"Can't allocate decompression buffer.\n\"))"];
"1000372" [label="(Literal,1)"];
"1000543" [label="(Call,av_dlog(avctx, \"image: %dx%d block: %dx%d num: %dx%d part: %dx%d\n\",\n            s->image_width, s->image_height, s->block_width, s->block_height,\n            h_blocks, v_blocks, h_part, v_part))"];
"1000801" [label="(Call,av_log(avctx, AV_LOG_ERROR, \"Block parameters invalid\n\"))"];
"1000862" [label="(Call,avpriv_request_sample(avctx, \"zlibprime_curr\"))"];
"1000881" [label="(Call,av_log(avctx, AV_LOG_ERROR, \"no data available for zlib \"\n                           \"priming\n\"))"];
"1000768" [label="(Call,av_log(avctx, AV_LOG_ERROR,\n                               \"inter frame without keyframe\n\"))"];
"1000248" [label="(Call,avpriv_request_sample(avctx, \"iframe\"))"];
"1000748" [label="(Call,av_log(avctx, AV_LOG_ERROR,\n                           \"%dx%d invalid color depth %d\n\", i, j, s->color_depth))"];
"1000446" [label="(Call,av_log(avctx, AV_LOG_ERROR,\n               \"Frame width or height differs from first frame!\n\"))"];
"1000851" [label="(Call,av_log(avctx, AV_LOG_DEBUG, \"%dx%d zlibprime_curr %dx%d\n\", i, j, col, row))"];
"1000366" -> "1000365"  [label="AST: "];
"1000366" -> "1000369"  [label="CFG: "];
"1000367" -> "1000366"  [label="AST: "];
"1000368" -> "1000366"  [label="AST: "];
"1000369" -> "1000366"  [label="AST: "];
"1000372" -> "1000366"  [label="CFG: "];
"1000366" -> "1001100"  [label="DDG: "];
"1000366" -> "1001100"  [label="DDG: "];
"1000366" -> "1001100"  [label="DDG: "];
"1000116" -> "1000366"  [label="DDG: "];
"1000116" -> "1000115"  [label="AST: "];
"1000116" -> "1001100"  [label="DDG: "];
"1000116" -> "1000248"  [label="DDG: "];
"1000116" -> "1000258"  [label="DDG: "];
"1000116" -> "1000339"  [label="DDG: "];
"1000116" -> "1000390"  [label="DDG: "];
"1000116" -> "1000421"  [label="DDG: "];
"1000116" -> "1000446"  [label="DDG: "];
"1000116" -> "1000450"  [label="DDG: "];
"1000116" -> "1000543"  [label="DDG: "];
"1000116" -> "1000566"  [label="DDG: "];
"1000116" -> "1000748"  [label="DDG: "];
"1000116" -> "1000768"  [label="DDG: "];
"1000116" -> "1000801"  [label="DDG: "];
"1000116" -> "1000807"  [label="DDG: "];
"1000116" -> "1000826"  [label="DDG: "];
"1000116" -> "1000851"  [label="DDG: "];
"1000116" -> "1000862"  [label="DDG: "];
"1000116" -> "1000881"  [label="DDG: "];
"1000116" -> "1000970"  [label="DDG: "];
"1000116" -> "1000989"  [label="DDG: "];
"1000116" -> "1001034"  [label="DDG: "];
"1000116" -> "1001088"  [label="DDG: "];
}
