digraph "0_linux_0c17d1d2c61936401f4702e1846e2c19b200f958_0@pointer" {
"1000392" [label="(Call,mark_reg_unknown(env, regs, insn->dst_reg))"];
"1000377" [label="(Call,is_pointer_value(env, insn->src_reg))"];
"1000328" [label="(Call,check_reg_arg(env, insn->dst_reg, DST_OP))"];
"1000295" [label="(Call,check_reg_arg(env, insn->src_reg, SRC_OP))"];
"1000118" [label="(Call,cur_regs(env))"];
"1000112" [label="(MethodParameterIn,struct bpf_verifier_env *env)"];
"1000309" [label="(Call,insn->src_reg != BPF_REG_0)"];
"1000116" [label="(Call,*regs = cur_regs(env))"];
"1000168" [label="(Call,verbose(env, \"BPF_NEG uses reserved fields\n\"))"];
"1000379" [label="(Call,insn->src_reg)"];
"1000287" [label="(Call,verbose(env, \"BPF_MOV uses reserved fields\n\"))"];
"1000333" [label="(Identifier,DST_OP)"];
"1000316" [label="(Identifier,insn)"];
"1000309" [label="(Call,insn->src_reg != BPF_REG_0)"];
"1000524" [label="(Call,check_reg_arg(env, insn->dst_reg, SRC_OP))"];
"1000112" [label="(MethodParameterIn,struct bpf_verifier_env *env)"];
"1000401" [label="(Identifier,regs)"];
"1000516" [label="(Call,verbose(env, \"BPF_ALU uses reserved fields\n\"))"];
"1000119" [label="(Identifier,env)"];
"1000618" [label="(Call,check_reg_arg(env, insn->dst_reg, DST_OP_NO_MARK))"];
"1000117" [label="(Identifier,regs)"];
"1000556" [label="(Call,verbose(env, \"div by zero\n\"))"];
"1000330" [label="(Call,insn->dst_reg)"];
"1000426" [label="(Call,regs + insn->dst_reg)"];
"1000296" [label="(Identifier,env)"];
"1000122" [label="(Identifier,opcode)"];
"1000320" [label="(Call,verbose(env, \"BPF_MOV uses reserved fields\n\"))"];
"1000394" [label="(Identifier,regs)"];
"1000328" [label="(Call,check_reg_arg(env, insn->dst_reg, DST_OP))"];
"1000395" [label="(Call,insn->dst_reg)"];
"1000293" [label="(Call,err = check_reg_arg(env, insn->src_reg, SRC_OP))"];
"1000491" [label="(Call,check_reg_arg(env, insn->src_reg, SRC_OP))"];
"1000483" [label="(Call,verbose(env, \"BPF_ALU uses reserved fields\n\"))"];
"1000453" [label="(Call,verbose(env, \"invalid BPF_ALU opcode %x\n\", opcode))"];
"1000233" [label="(Call,is_pointer_value(env, insn->dst_reg))"];
"1000354" [label="(Call,regs[insn->dst_reg] = regs[insn->src_reg])"];
"1000239" [label="(Call,verbose(env, \"R%d pointer arithmetic prohibited\n\",\n\t\t\t\tinsn->dst_reg))"];
"1000437" [label="(Call,regs + insn->dst_reg)"];
"1000377" [label="(Call,is_pointer_value(env, insn->src_reg))"];
"1000378" [label="(Identifier,env)"];
"1000313" [label="(Identifier,BPF_REG_0)"];
"1000383" [label="(Call,verbose(env,\n\t\t\t\t\t\t\"R%d partial copy of pointer\n\",\n\t\t\t\t\t\tinsn->src_reg))"];
"1000607" [label="(Call,verbose(env, \"invalid shift %d\n\", insn->imm))"];
"1000308" [label="(Call,insn->src_reg != BPF_REG_0 || insn->off != 0)"];
"1000295" [label="(Call,check_reg_arg(env, insn->src_reg, SRC_OP))"];
"1000425" [label="(Call,__mark_reg_known(regs + insn->dst_reg,\n\t\t\t\t\t\t insn->imm))"];
"1000250" [label="(Call,check_reg_arg(env, insn->dst_reg, DST_OP))"];
"1000629" [label="(Call,adjust_reg_min_max_vals(env, insn))"];
"1000116" [label="(Call,*regs = cur_regs(env))"];
"1000326" [label="(Call,err = check_reg_arg(env, insn->dst_reg, DST_OP))"];
"1000329" [label="(Identifier,env)"];
"1000436" [label="(Call,__mark_reg_known(regs + insn->dst_reg,\n\t\t\t\t\t\t (u32)insn->imm))"];
"1000634" [label="(MethodReturn,static int)"];
"1000118" [label="(Call,cur_regs(env))"];
"1000222" [label="(Call,check_reg_arg(env, insn->dst_reg, SRC_OP))"];
"1000392" [label="(Call,mark_reg_unknown(env, regs, insn->dst_reg))"];
"1000384" [label="(Identifier,env)"];
"1000310" [label="(Call,insn->src_reg)"];
"1000114" [label="(Block,)"];
"1000393" [label="(Identifier,env)"];
"1000375" [label="(Block,)"];
"1000376" [label="(ControlStructure,if (is_pointer_value(env, insn->src_reg)))"];
"1000297" [label="(Call,insn->src_reg)"];
"1000214" [label="(Call,verbose(env, \"BPF_END uses reserved fields\n\"))"];
"1000300" [label="(Identifier,SRC_OP)"];
"1000392" -> "1000375"  [label="AST: "];
"1000392" -> "1000395"  [label="CFG: "];
"1000393" -> "1000392"  [label="AST: "];
"1000394" -> "1000392"  [label="AST: "];
"1000395" -> "1000392"  [label="AST: "];
"1000401" -> "1000392"  [label="CFG: "];
"1000392" -> "1000634"  [label="DDG: regs"];
"1000392" -> "1000634"  [label="DDG: mark_reg_unknown(env, regs, insn->dst_reg)"];
"1000392" -> "1000634"  [label="DDG: env"];
"1000392" -> "1000634"  [label="DDG: insn->dst_reg"];
"1000377" -> "1000392"  [label="DDG: env"];
"1000112" -> "1000392"  [label="DDG: env"];
"1000116" -> "1000392"  [label="DDG: regs"];
"1000328" -> "1000392"  [label="DDG: insn->dst_reg"];
"1000377" -> "1000376"  [label="AST: "];
"1000377" -> "1000379"  [label="CFG: "];
"1000378" -> "1000377"  [label="AST: "];
"1000379" -> "1000377"  [label="AST: "];
"1000384" -> "1000377"  [label="CFG: "];
"1000393" -> "1000377"  [label="CFG: "];
"1000377" -> "1000634"  [label="DDG: is_pointer_value(env, insn->src_reg)"];
"1000377" -> "1000634"  [label="DDG: insn->src_reg"];
"1000328" -> "1000377"  [label="DDG: env"];
"1000112" -> "1000377"  [label="DDG: env"];
"1000309" -> "1000377"  [label="DDG: insn->src_reg"];
"1000295" -> "1000377"  [label="DDG: insn->src_reg"];
"1000377" -> "1000383"  [label="DDG: env"];
"1000377" -> "1000383"  [label="DDG: insn->src_reg"];
"1000328" -> "1000326"  [label="AST: "];
"1000328" -> "1000333"  [label="CFG: "];
"1000329" -> "1000328"  [label="AST: "];
"1000330" -> "1000328"  [label="AST: "];
"1000333" -> "1000328"  [label="AST: "];
"1000326" -> "1000328"  [label="CFG: "];
"1000328" -> "1000634"  [label="DDG: DST_OP"];
"1000328" -> "1000634"  [label="DDG: env"];
"1000328" -> "1000634"  [label="DDG: insn->dst_reg"];
"1000328" -> "1000326"  [label="DDG: env"];
"1000328" -> "1000326"  [label="DDG: insn->dst_reg"];
"1000328" -> "1000326"  [label="DDG: DST_OP"];
"1000295" -> "1000328"  [label="DDG: env"];
"1000118" -> "1000328"  [label="DDG: env"];
"1000112" -> "1000328"  [label="DDG: env"];
"1000328" -> "1000425"  [label="DDG: insn->dst_reg"];
"1000328" -> "1000426"  [label="DDG: insn->dst_reg"];
"1000328" -> "1000436"  [label="DDG: insn->dst_reg"];
"1000328" -> "1000437"  [label="DDG: insn->dst_reg"];
"1000295" -> "1000293"  [label="AST: "];
"1000295" -> "1000300"  [label="CFG: "];
"1000296" -> "1000295"  [label="AST: "];
"1000297" -> "1000295"  [label="AST: "];
"1000300" -> "1000295"  [label="AST: "];
"1000293" -> "1000295"  [label="CFG: "];
"1000295" -> "1000634"  [label="DDG: env"];
"1000295" -> "1000634"  [label="DDG: SRC_OP"];
"1000295" -> "1000634"  [label="DDG: insn->src_reg"];
"1000295" -> "1000293"  [label="DDG: env"];
"1000295" -> "1000293"  [label="DDG: insn->src_reg"];
"1000295" -> "1000293"  [label="DDG: SRC_OP"];
"1000118" -> "1000295"  [label="DDG: env"];
"1000112" -> "1000295"  [label="DDG: env"];
"1000118" -> "1000116"  [label="AST: "];
"1000118" -> "1000119"  [label="CFG: "];
"1000119" -> "1000118"  [label="AST: "];
"1000116" -> "1000118"  [label="CFG: "];
"1000118" -> "1000116"  [label="DDG: env"];
"1000112" -> "1000118"  [label="DDG: env"];
"1000118" -> "1000168"  [label="DDG: env"];
"1000118" -> "1000214"  [label="DDG: env"];
"1000118" -> "1000222"  [label="DDG: env"];
"1000118" -> "1000287"  [label="DDG: env"];
"1000118" -> "1000320"  [label="DDG: env"];
"1000118" -> "1000453"  [label="DDG: env"];
"1000118" -> "1000483"  [label="DDG: env"];
"1000118" -> "1000491"  [label="DDG: env"];
"1000118" -> "1000516"  [label="DDG: env"];
"1000118" -> "1000524"  [label="DDG: env"];
"1000112" -> "1000111"  [label="AST: "];
"1000112" -> "1000634"  [label="DDG: env"];
"1000112" -> "1000168"  [label="DDG: env"];
"1000112" -> "1000214"  [label="DDG: env"];
"1000112" -> "1000222"  [label="DDG: env"];
"1000112" -> "1000233"  [label="DDG: env"];
"1000112" -> "1000239"  [label="DDG: env"];
"1000112" -> "1000250"  [label="DDG: env"];
"1000112" -> "1000287"  [label="DDG: env"];
"1000112" -> "1000320"  [label="DDG: env"];
"1000112" -> "1000383"  [label="DDG: env"];
"1000112" -> "1000453"  [label="DDG: env"];
"1000112" -> "1000483"  [label="DDG: env"];
"1000112" -> "1000491"  [label="DDG: env"];
"1000112" -> "1000516"  [label="DDG: env"];
"1000112" -> "1000524"  [label="DDG: env"];
"1000112" -> "1000556"  [label="DDG: env"];
"1000112" -> "1000607"  [label="DDG: env"];
"1000112" -> "1000618"  [label="DDG: env"];
"1000112" -> "1000629"  [label="DDG: env"];
"1000309" -> "1000308"  [label="AST: "];
"1000309" -> "1000313"  [label="CFG: "];
"1000310" -> "1000309"  [label="AST: "];
"1000313" -> "1000309"  [label="AST: "];
"1000316" -> "1000309"  [label="CFG: "];
"1000308" -> "1000309"  [label="CFG: "];
"1000309" -> "1000634"  [label="DDG: insn->src_reg"];
"1000309" -> "1000634"  [label="DDG: BPF_REG_0"];
"1000309" -> "1000308"  [label="DDG: insn->src_reg"];
"1000309" -> "1000308"  [label="DDG: BPF_REG_0"];
"1000116" -> "1000114"  [label="AST: "];
"1000117" -> "1000116"  [label="AST: "];
"1000122" -> "1000116"  [label="CFG: "];
"1000116" -> "1000634"  [label="DDG: regs"];
"1000116" -> "1000634"  [label="DDG: cur_regs(env)"];
"1000116" -> "1000354"  [label="DDG: regs"];
"1000116" -> "1000425"  [label="DDG: regs"];
"1000116" -> "1000426"  [label="DDG: regs"];
"1000116" -> "1000436"  [label="DDG: regs"];
"1000116" -> "1000437"  [label="DDG: regs"];
}
