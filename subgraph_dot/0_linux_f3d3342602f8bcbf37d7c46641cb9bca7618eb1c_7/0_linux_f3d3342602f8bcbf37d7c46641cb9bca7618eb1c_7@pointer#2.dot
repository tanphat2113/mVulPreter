digraph "0_linux_f3d3342602f8bcbf37d7c46641cb9bca7618eb1c_7@pointer" {
"1000106" [label="(MethodParameterIn,struct msghdr *msg)"];
"1000240" [label="(Call,sock_recv_ts_and_drops(msg, sk, skb))"];
"1000176" [label="(Call,sock_error(sk))"];
"1000174" [label="(Call,err = sock_error(sk))"];
"1000198" [label="(Call,bt_sock_data_wait(sk, timeo))"];
"1000196" [label="(Call,timeo = bt_sock_data_wait(sk, timeo))"];
"1000193" [label="(Call,!timeo)"];
"1000207" [label="(Call,sock_intr_errno(timeo))"];
"1000205" [label="(Call,err = sock_intr_errno(timeo))"];
"1000349" [label="(Call,release_sock(sk))"];
"1000253" [label="(Call,skb_headlen(skb))"];
"1000251" [label="(Call,skb_len = skb_headlen(skb))"];
"1000256" [label="(Call,chunk <= skb_len)"];
"1000260" [label="(Call,__skb_pull(skb, chunk))"];
"1000212" [label="(Call,skb_copy_datagram_iovec(skb, 0, msg->msg_iov, chunk))"];
"1000220" [label="(Call,skb_queue_head(&sk->sk_receive_queue, skb))"];
"1000234" [label="(Call,copied += chunk)"];
"1000170" [label="(Call,copied >= target)"];
"1000227" [label="(Call,!copied)"];
"1000237" [label="(Call,size   -= chunk)"];
"1000329" [label="(Call,skb_queue_head(&sk->sk_receive_queue, skb))"];
"1000336" [label="(Call,kfree_skb(skb))"];
"1000266" [label="(Call,__skb_pull(skb, skb_len))"];
"1000269" [label="(Call,chunk -= skb_len)"];
"1000274" [label="(Call,chunk <= frag->len)"];
"1000280" [label="(Call,skb->len -= chunk)"];
"1000285" [label="(Call,skb->data_len -= chunk)"];
"1000290" [label="(Call,__skb_pull(frag, chunk))"];
"1000300" [label="(Call,chunk -= frag->len)"];
"1000305" [label="(Call,skb->len -= frag->len)"];
"1000312" [label="(Call,skb->data_len -= frag->len)"];
"1000319" [label="(Call,__skb_pull(frag, frag->len))"];
"1000340" [label="(Call,skb_queue_head(&sk->sk_receive_queue, skb))"];
"1000219" [label="(Block,)"];
"1000274" [label="(Call,chunk <= frag->len)"];
"1000249" [label="(Block,)"];
"1000257" [label="(Identifier,chunk)"];
"1000320" [label="(Identifier,frag)"];
"1000213" [label="(Identifier,skb)"];
"1000280" [label="(Call,skb->len -= chunk)"];
"1000176" [label="(Call,sock_error(sk))"];
"1000199" [label="(Identifier,sk)"];
"1000266" [label="(Call,__skb_pull(skb, skb_len))"];
"1000179" [label="(Identifier,err)"];
"1000297" [label="(Identifier,frag)"];
"1000192" [label="(ControlStructure,if (!timeo))"];
"1000107" [label="(MethodParameterIn,size_t size)"];
"1000291" [label="(Identifier,frag)"];
"1000292" [label="(Identifier,chunk)"];
"1000275" [label="(Identifier,chunk)"];
"1000281" [label="(Call,skb->len)"];
"1000254" [label="(Identifier,skb)"];
"1000345" [label="(Identifier,skb)"];
"1000196" [label="(Call,timeo = bt_sock_data_wait(sk, timeo))"];
"1000239" [label="(Identifier,chunk)"];
"1000230" [label="(Identifier,copied)"];
"1000282" [label="(Identifier,skb)"];
"1000312" [label="(Call,skb->data_len -= frag->len)"];
"1000270" [label="(Identifier,chunk)"];
"1000172" [label="(Identifier,target)"];
"1000349" [label="(Call,release_sock(sk))"];
"1000147" [label="(Call,timeo  = sock_rcvtimeo(sk, flags & MSG_DONTWAIT))"];
"1000212" [label="(Call,skb_copy_datagram_iovec(skb, 0, msg->msg_iov, chunk))"];
"1000228" [label="(Identifier,copied)"];
"1000306" [label="(Call,skb->len)"];
"1000293" [label="(ControlStructure,break;)"];
"1000166" [label="(Call,!skb)"];
"1000300" [label="(Call,chunk -= frag->len)"];
"1000340" [label="(Call,skb_queue_head(&sk->sk_receive_queue, skb))"];
"1000261" [label="(Identifier,skb)"];
"1000243" [label="(Identifier,skb)"];
"1000177" [label="(Identifier,sk)"];
"1000328" [label="(Block,)"];
"1000286" [label="(Call,skb->data_len)"];
"1000203" [label="(Identifier,current)"];
"1000211" [label="(ControlStructure,if (skb_copy_datagram_iovec(skb, 0, msg->msg_iov, chunk)))"];
"1000170" [label="(Call,copied >= target)"];
"1000339" [label="(Block,)"];
"1000236" [label="(Identifier,chunk)"];
"1000309" [label="(Call,frag->len)"];
"1000299" [label="(Block,)"];
"1000205" [label="(Call,err = sock_intr_errno(timeo))"];
"1000329" [label="(Call,skb_queue_head(&sk->sk_receive_queue, skb))"];
"1000290" [label="(Call,__skb_pull(frag, chunk))"];
"1000174" [label="(Call,err = sock_error(sk))"];
"1000149" [label="(Call,sock_rcvtimeo(sk, flags & MSG_DONTWAIT))"];
"1000350" [label="(Identifier,sk)"];
"1000260" [label="(Call,__skb_pull(skb, chunk))"];
"1000307" [label="(Identifier,skb)"];
"1000141" [label="(Call,sock_rcvlowat(sk, flags & MSG_WAITALL, size))"];
"1000346" [label="(ControlStructure,break;)"];
"1000233" [label="(ControlStructure,break;)"];
"1000284" [label="(Identifier,chunk)"];
"1000313" [label="(Call,skb->data_len)"];
"1000287" [label="(Identifier,skb)"];
"1000259" [label="(Block,)"];
"1000221" [label="(Call,&sk->sk_receive_queue)"];
"1000139" [label="(Call,target = sock_rcvlowat(sk, flags & MSG_WAITALL, size))"];
"1000207" [label="(Call,sock_intr_errno(timeo))"];
"1000235" [label="(Identifier,copied)"];
"1000237" [label="(Call,size   -= chunk)"];
"1000267" [label="(Identifier,skb)"];
"1000251" [label="(Call,skb_len = skb_headlen(skb))"];
"1000160" [label="(Call,skb_dequeue(&sk->sk_receive_queue))"];
"1000240" [label="(Call,sock_recv_ts_and_drops(msg, sk, skb))"];
"1000268" [label="(Identifier,skb_len)"];
"1000352" [label="(MethodReturn,int)"];
"1000302" [label="(Call,frag->len)"];
"1000225" [label="(Identifier,skb)"];
"1000215" [label="(Call,msg->msg_iov)"];
"1000279" [label="(Block,)"];
"1000122" [label="(Call,copied = 0)"];
"1000169" [label="(ControlStructure,if (copied >= target))"];
"1000247" [label="(Identifier,flags)"];
"1000209" [label="(ControlStructure,goto out;)"];
"1000109" [label="(Block,)"];
"1000256" [label="(Call,chunk <= skb_len)"];
"1000168" [label="(Block,)"];
"1000200" [label="(Identifier,timeo)"];
"1000314" [label="(Identifier,skb)"];
"1000264" [label="(Block,)"];
"1000330" [label="(Call,&sk->sk_receive_queue)"];
"1000206" [label="(Identifier,err)"];
"1000195" [label="(ControlStructure,break;)"];
"1000220" [label="(Call,skb_queue_head(&sk->sk_receive_queue, skb))"];
"1000218" [label="(Identifier,chunk)"];
"1000223" [label="(Identifier,sk)"];
"1000253" [label="(Call,skb_headlen(skb))"];
"1000351" [label="(Identifier,err)"];
"1000234" [label="(Call,copied += chunk)"];
"1000198" [label="(Call,bt_sock_data_wait(sk, timeo))"];
"1000197" [label="(Identifier,timeo)"];
"1000269" [label="(Call,chunk -= skb_len)"];
"1000273" [label="(ControlStructure,if (chunk <= frag->len))"];
"1000326" [label="(Identifier,skb)"];
"1000175" [label="(Identifier,err)"];
"1000155" [label="(Block,)"];
"1000194" [label="(Identifier,timeo)"];
"1000271" [label="(Identifier,skb_len)"];
"1000204" [label="(Block,)"];
"1000214" [label="(Literal,0)"];
"1000334" [label="(Identifier,skb)"];
"1000242" [label="(Identifier,sk)"];
"1000262" [label="(Identifier,chunk)"];
"1000258" [label="(Identifier,skb_len)"];
"1000305" [label="(Call,skb->len -= frag->len)"];
"1000289" [label="(Identifier,chunk)"];
"1000341" [label="(Call,&sk->sk_receive_queue)"];
"1000173" [label="(ControlStructure,break;)"];
"1000241" [label="(Identifier,msg)"];
"1000301" [label="(Identifier,chunk)"];
"1000208" [label="(Identifier,timeo)"];
"1000238" [label="(Identifier,size)"];
"1000227" [label="(Call,!copied)"];
"1000335" [label="(ControlStructure,break;)"];
"1000337" [label="(Identifier,skb)"];
"1000347" [label="(Identifier,size)"];
"1000193" [label="(Call,!timeo)"];
"1000285" [label="(Call,skb->data_len -= chunk)"];
"1000316" [label="(Call,frag->len)"];
"1000319" [label="(Call,__skb_pull(frag, frag->len))"];
"1000252" [label="(Identifier,skb_len)"];
"1000321" [label="(Call,frag->len)"];
"1000336" [label="(Call,kfree_skb(skb))"];
"1000106" [label="(MethodParameterIn,struct msghdr *msg)"];
"1000276" [label="(Call,frag->len)"];
"1000226" [label="(ControlStructure,if (!copied))"];
"1000171" [label="(Identifier,copied)"];
"1000255" [label="(ControlStructure,if (chunk <= skb_len))"];
"1000106" -> "1000103"  [label="AST: "];
"1000106" -> "1000352"  [label="DDG: msg"];
"1000106" -> "1000240"  [label="DDG: msg"];
"1000240" -> "1000155"  [label="AST: "];
"1000240" -> "1000243"  [label="CFG: "];
"1000241" -> "1000240"  [label="AST: "];
"1000242" -> "1000240"  [label="AST: "];
"1000243" -> "1000240"  [label="AST: "];
"1000247" -> "1000240"  [label="CFG: "];
"1000240" -> "1000352"  [label="DDG: sock_recv_ts_and_drops(msg, sk, skb)"];
"1000240" -> "1000352"  [label="DDG: msg"];
"1000240" -> "1000176"  [label="DDG: sk"];
"1000198" -> "1000240"  [label="DDG: sk"];
"1000149" -> "1000240"  [label="DDG: sk"];
"1000212" -> "1000240"  [label="DDG: skb"];
"1000240" -> "1000253"  [label="DDG: skb"];
"1000240" -> "1000340"  [label="DDG: skb"];
"1000240" -> "1000349"  [label="DDG: sk"];
"1000176" -> "1000174"  [label="AST: "];
"1000176" -> "1000177"  [label="CFG: "];
"1000177" -> "1000176"  [label="AST: "];
"1000174" -> "1000176"  [label="CFG: "];
"1000176" -> "1000174"  [label="DDG: sk"];
"1000198" -> "1000176"  [label="DDG: sk"];
"1000149" -> "1000176"  [label="DDG: sk"];
"1000176" -> "1000198"  [label="DDG: sk"];
"1000176" -> "1000349"  [label="DDG: sk"];
"1000174" -> "1000168"  [label="AST: "];
"1000175" -> "1000174"  [label="AST: "];
"1000179" -> "1000174"  [label="CFG: "];
"1000174" -> "1000352"  [label="DDG: sock_error(sk)"];
"1000174" -> "1000352"  [label="DDG: err"];
"1000198" -> "1000196"  [label="AST: "];
"1000198" -> "1000200"  [label="CFG: "];
"1000199" -> "1000198"  [label="AST: "];
"1000200" -> "1000198"  [label="AST: "];
"1000196" -> "1000198"  [label="CFG: "];
"1000198" -> "1000196"  [label="DDG: sk"];
"1000198" -> "1000196"  [label="DDG: timeo"];
"1000193" -> "1000198"  [label="DDG: timeo"];
"1000198" -> "1000349"  [label="DDG: sk"];
"1000196" -> "1000168"  [label="AST: "];
"1000197" -> "1000196"  [label="AST: "];
"1000203" -> "1000196"  [label="CFG: "];
"1000196" -> "1000352"  [label="DDG: timeo"];
"1000196" -> "1000352"  [label="DDG: bt_sock_data_wait(sk, timeo)"];
"1000196" -> "1000193"  [label="DDG: timeo"];
"1000196" -> "1000207"  [label="DDG: timeo"];
"1000193" -> "1000192"  [label="AST: "];
"1000193" -> "1000194"  [label="CFG: "];
"1000194" -> "1000193"  [label="AST: "];
"1000195" -> "1000193"  [label="CFG: "];
"1000197" -> "1000193"  [label="CFG: "];
"1000193" -> "1000352"  [label="DDG: timeo"];
"1000193" -> "1000352"  [label="DDG: !timeo"];
"1000147" -> "1000193"  [label="DDG: timeo"];
"1000207" -> "1000205"  [label="AST: "];
"1000207" -> "1000208"  [label="CFG: "];
"1000208" -> "1000207"  [label="AST: "];
"1000205" -> "1000207"  [label="CFG: "];
"1000207" -> "1000352"  [label="DDG: timeo"];
"1000207" -> "1000205"  [label="DDG: timeo"];
"1000205" -> "1000204"  [label="AST: "];
"1000206" -> "1000205"  [label="AST: "];
"1000209" -> "1000205"  [label="CFG: "];
"1000205" -> "1000352"  [label="DDG: err"];
"1000205" -> "1000352"  [label="DDG: sock_intr_errno(timeo)"];
"1000349" -> "1000109"  [label="AST: "];
"1000349" -> "1000350"  [label="CFG: "];
"1000350" -> "1000349"  [label="AST: "];
"1000351" -> "1000349"  [label="CFG: "];
"1000349" -> "1000352"  [label="DDG: release_sock(sk)"];
"1000349" -> "1000352"  [label="DDG: sk"];
"1000149" -> "1000349"  [label="DDG: sk"];
"1000253" -> "1000251"  [label="AST: "];
"1000253" -> "1000254"  [label="CFG: "];
"1000254" -> "1000253"  [label="AST: "];
"1000251" -> "1000253"  [label="CFG: "];
"1000253" -> "1000251"  [label="DDG: skb"];
"1000253" -> "1000260"  [label="DDG: skb"];
"1000253" -> "1000266"  [label="DDG: skb"];
"1000251" -> "1000249"  [label="AST: "];
"1000252" -> "1000251"  [label="AST: "];
"1000257" -> "1000251"  [label="CFG: "];
"1000251" -> "1000352"  [label="DDG: skb_headlen(skb)"];
"1000251" -> "1000256"  [label="DDG: skb_len"];
"1000256" -> "1000255"  [label="AST: "];
"1000256" -> "1000258"  [label="CFG: "];
"1000257" -> "1000256"  [label="AST: "];
"1000258" -> "1000256"  [label="AST: "];
"1000261" -> "1000256"  [label="CFG: "];
"1000267" -> "1000256"  [label="CFG: "];
"1000256" -> "1000352"  [label="DDG: skb_len"];
"1000256" -> "1000352"  [label="DDG: chunk <= skb_len"];
"1000212" -> "1000256"  [label="DDG: chunk"];
"1000256" -> "1000260"  [label="DDG: chunk"];
"1000256" -> "1000266"  [label="DDG: skb_len"];
"1000256" -> "1000269"  [label="DDG: chunk"];
"1000260" -> "1000259"  [label="AST: "];
"1000260" -> "1000262"  [label="CFG: "];
"1000261" -> "1000260"  [label="AST: "];
"1000262" -> "1000260"  [label="AST: "];
"1000326" -> "1000260"  [label="CFG: "];
"1000260" -> "1000352"  [label="DDG: __skb_pull(skb, chunk)"];
"1000260" -> "1000352"  [label="DDG: chunk"];
"1000260" -> "1000212"  [label="DDG: chunk"];
"1000260" -> "1000329"  [label="DDG: skb"];
"1000260" -> "1000336"  [label="DDG: skb"];
"1000212" -> "1000211"  [label="AST: "];
"1000212" -> "1000218"  [label="CFG: "];
"1000213" -> "1000212"  [label="AST: "];
"1000214" -> "1000212"  [label="AST: "];
"1000215" -> "1000212"  [label="AST: "];
"1000218" -> "1000212"  [label="AST: "];
"1000223" -> "1000212"  [label="CFG: "];
"1000235" -> "1000212"  [label="CFG: "];
"1000212" -> "1000352"  [label="DDG: chunk"];
"1000212" -> "1000352"  [label="DDG: skb_copy_datagram_iovec(skb, 0, msg->msg_iov, chunk)"];
"1000212" -> "1000352"  [label="DDG: msg->msg_iov"];
"1000166" -> "1000212"  [label="DDG: skb"];
"1000274" -> "1000212"  [label="DDG: chunk"];
"1000300" -> "1000212"  [label="DDG: chunk"];
"1000212" -> "1000220"  [label="DDG: skb"];
"1000212" -> "1000234"  [label="DDG: chunk"];
"1000212" -> "1000237"  [label="DDG: chunk"];
"1000220" -> "1000219"  [label="AST: "];
"1000220" -> "1000225"  [label="CFG: "];
"1000221" -> "1000220"  [label="AST: "];
"1000225" -> "1000220"  [label="AST: "];
"1000228" -> "1000220"  [label="CFG: "];
"1000220" -> "1000352"  [label="DDG: skb"];
"1000220" -> "1000352"  [label="DDG: &sk->sk_receive_queue"];
"1000220" -> "1000352"  [label="DDG: skb_queue_head(&sk->sk_receive_queue, skb)"];
"1000160" -> "1000220"  [label="DDG: &sk->sk_receive_queue"];
"1000234" -> "1000155"  [label="AST: "];
"1000234" -> "1000236"  [label="CFG: "];
"1000235" -> "1000234"  [label="AST: "];
"1000236" -> "1000234"  [label="AST: "];
"1000238" -> "1000234"  [label="CFG: "];
"1000234" -> "1000352"  [label="DDG: copied"];
"1000234" -> "1000170"  [label="DDG: copied"];
"1000234" -> "1000227"  [label="DDG: copied"];
"1000122" -> "1000234"  [label="DDG: copied"];
"1000170" -> "1000234"  [label="DDG: copied"];
"1000170" -> "1000169"  [label="AST: "];
"1000170" -> "1000172"  [label="CFG: "];
"1000171" -> "1000170"  [label="AST: "];
"1000172" -> "1000170"  [label="AST: "];
"1000173" -> "1000170"  [label="CFG: "];
"1000175" -> "1000170"  [label="CFG: "];
"1000170" -> "1000352"  [label="DDG: target"];
"1000170" -> "1000352"  [label="DDG: copied"];
"1000170" -> "1000352"  [label="DDG: copied >= target"];
"1000122" -> "1000170"  [label="DDG: copied"];
"1000139" -> "1000170"  [label="DDG: target"];
"1000170" -> "1000227"  [label="DDG: copied"];
"1000227" -> "1000226"  [label="AST: "];
"1000227" -> "1000228"  [label="CFG: "];
"1000228" -> "1000227"  [label="AST: "];
"1000230" -> "1000227"  [label="CFG: "];
"1000233" -> "1000227"  [label="CFG: "];
"1000227" -> "1000352"  [label="DDG: !copied"];
"1000227" -> "1000352"  [label="DDG: copied"];
"1000122" -> "1000227"  [label="DDG: copied"];
"1000237" -> "1000155"  [label="AST: "];
"1000237" -> "1000239"  [label="CFG: "];
"1000238" -> "1000237"  [label="AST: "];
"1000239" -> "1000237"  [label="AST: "];
"1000241" -> "1000237"  [label="CFG: "];
"1000237" -> "1000352"  [label="DDG: chunk"];
"1000237" -> "1000352"  [label="DDG: size"];
"1000141" -> "1000237"  [label="DDG: size"];
"1000107" -> "1000237"  [label="DDG: size"];
"1000329" -> "1000328"  [label="AST: "];
"1000329" -> "1000334"  [label="CFG: "];
"1000330" -> "1000329"  [label="AST: "];
"1000334" -> "1000329"  [label="AST: "];
"1000335" -> "1000329"  [label="CFG: "];
"1000329" -> "1000352"  [label="DDG: skb"];
"1000329" -> "1000352"  [label="DDG: skb_queue_head(&sk->sk_receive_queue, skb)"];
"1000329" -> "1000352"  [label="DDG: &sk->sk_receive_queue"];
"1000160" -> "1000329"  [label="DDG: &sk->sk_receive_queue"];
"1000266" -> "1000329"  [label="DDG: skb"];
"1000336" -> "1000249"  [label="AST: "];
"1000336" -> "1000337"  [label="CFG: "];
"1000337" -> "1000336"  [label="AST: "];
"1000347" -> "1000336"  [label="CFG: "];
"1000336" -> "1000352"  [label="DDG: kfree_skb(skb)"];
"1000336" -> "1000352"  [label="DDG: skb"];
"1000266" -> "1000336"  [label="DDG: skb"];
"1000266" -> "1000264"  [label="AST: "];
"1000266" -> "1000268"  [label="CFG: "];
"1000267" -> "1000266"  [label="AST: "];
"1000268" -> "1000266"  [label="AST: "];
"1000270" -> "1000266"  [label="CFG: "];
"1000266" -> "1000352"  [label="DDG: skb"];
"1000266" -> "1000352"  [label="DDG: __skb_pull(skb, skb_len)"];
"1000266" -> "1000269"  [label="DDG: skb_len"];
"1000269" -> "1000264"  [label="AST: "];
"1000269" -> "1000271"  [label="CFG: "];
"1000270" -> "1000269"  [label="AST: "];
"1000271" -> "1000269"  [label="AST: "];
"1000275" -> "1000269"  [label="CFG: "];
"1000269" -> "1000352"  [label="DDG: skb_len"];
"1000269" -> "1000274"  [label="DDG: chunk"];
"1000274" -> "1000273"  [label="AST: "];
"1000274" -> "1000276"  [label="CFG: "];
"1000275" -> "1000274"  [label="AST: "];
"1000276" -> "1000274"  [label="AST: "];
"1000282" -> "1000274"  [label="CFG: "];
"1000297" -> "1000274"  [label="CFG: "];
"1000274" -> "1000352"  [label="DDG: chunk"];
"1000274" -> "1000352"  [label="DDG: chunk <= frag->len"];
"1000274" -> "1000352"  [label="DDG: frag->len"];
"1000319" -> "1000274"  [label="DDG: frag->len"];
"1000274" -> "1000280"  [label="DDG: chunk"];
"1000274" -> "1000285"  [label="DDG: chunk"];
"1000274" -> "1000290"  [label="DDG: chunk"];
"1000274" -> "1000300"  [label="DDG: frag->len"];
"1000274" -> "1000300"  [label="DDG: chunk"];
"1000274" -> "1000305"  [label="DDG: frag->len"];
"1000274" -> "1000312"  [label="DDG: frag->len"];
"1000274" -> "1000319"  [label="DDG: frag->len"];
"1000280" -> "1000279"  [label="AST: "];
"1000280" -> "1000284"  [label="CFG: "];
"1000281" -> "1000280"  [label="AST: "];
"1000284" -> "1000280"  [label="AST: "];
"1000287" -> "1000280"  [label="CFG: "];
"1000280" -> "1000352"  [label="DDG: skb->len"];
"1000305" -> "1000280"  [label="DDG: skb->len"];
"1000285" -> "1000279"  [label="AST: "];
"1000285" -> "1000289"  [label="CFG: "];
"1000286" -> "1000285"  [label="AST: "];
"1000289" -> "1000285"  [label="AST: "];
"1000291" -> "1000285"  [label="CFG: "];
"1000285" -> "1000352"  [label="DDG: skb->data_len"];
"1000312" -> "1000285"  [label="DDG: skb->data_len"];
"1000290" -> "1000279"  [label="AST: "];
"1000290" -> "1000292"  [label="CFG: "];
"1000291" -> "1000290"  [label="AST: "];
"1000292" -> "1000290"  [label="AST: "];
"1000293" -> "1000290"  [label="CFG: "];
"1000290" -> "1000352"  [label="DDG: frag"];
"1000290" -> "1000352"  [label="DDG: chunk"];
"1000290" -> "1000352"  [label="DDG: __skb_pull(frag, chunk)"];
"1000319" -> "1000290"  [label="DDG: frag"];
"1000300" -> "1000299"  [label="AST: "];
"1000300" -> "1000302"  [label="CFG: "];
"1000301" -> "1000300"  [label="AST: "];
"1000302" -> "1000300"  [label="AST: "];
"1000307" -> "1000300"  [label="CFG: "];
"1000300" -> "1000352"  [label="DDG: chunk"];
"1000305" -> "1000299"  [label="AST: "];
"1000305" -> "1000309"  [label="CFG: "];
"1000306" -> "1000305"  [label="AST: "];
"1000309" -> "1000305"  [label="AST: "];
"1000314" -> "1000305"  [label="CFG: "];
"1000305" -> "1000352"  [label="DDG: skb->len"];
"1000312" -> "1000299"  [label="AST: "];
"1000312" -> "1000316"  [label="CFG: "];
"1000313" -> "1000312"  [label="AST: "];
"1000316" -> "1000312"  [label="AST: "];
"1000320" -> "1000312"  [label="CFG: "];
"1000312" -> "1000352"  [label="DDG: skb->data_len"];
"1000319" -> "1000299"  [label="AST: "];
"1000319" -> "1000321"  [label="CFG: "];
"1000320" -> "1000319"  [label="AST: "];
"1000321" -> "1000319"  [label="AST: "];
"1000326" -> "1000319"  [label="CFG: "];
"1000319" -> "1000352"  [label="DDG: __skb_pull(frag, frag->len)"];
"1000319" -> "1000352"  [label="DDG: frag->len"];
"1000319" -> "1000352"  [label="DDG: frag"];
"1000340" -> "1000339"  [label="AST: "];
"1000340" -> "1000345"  [label="CFG: "];
"1000341" -> "1000340"  [label="AST: "];
"1000345" -> "1000340"  [label="AST: "];
"1000346" -> "1000340"  [label="CFG: "];
"1000340" -> "1000352"  [label="DDG: skb_queue_head(&sk->sk_receive_queue, skb)"];
"1000340" -> "1000352"  [label="DDG: skb"];
"1000340" -> "1000352"  [label="DDG: &sk->sk_receive_queue"];
"1000160" -> "1000340"  [label="DDG: &sk->sk_receive_queue"];
}
