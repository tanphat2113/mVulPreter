digraph "0_openssl_f5da52e308a6aeea6d5f3df98c4da295d7e9cc27_1@pointer" {
"1000257" [label="(Call,*tbool == -1)"];
"1000260" [label="(Call,-1)"];
"1000273" [label="(Call,*tbool && (it->size > 0))"];
"1000286" [label="(Call,!*tbool)"];
"1000285" [label="(Call,!*tbool && !it->size)"];
"1000298" [label="(Call,(unsigned char)*tbool)"];
"1000296" [label="(Call,c = (unsigned char)*tbool)"];
"1000268" [label="(Identifier,it)"];
"1000256" [label="(ControlStructure,if (*tbool == -1))"];
"1000283" [label="(Literal,1)"];
"1000300" [label="(Call,*tbool)"];
"1000286" [label="(Call,!*tbool)"];
"1000285" [label="(Call,!*tbool && !it->size)"];
"1000287" [label="(Call,*tbool)"];
"1000257" [label="(Call,*tbool == -1)"];
"1000258" [label="(Call,*tbool)"];
"1000303" [label="(Identifier,cont)"];
"1000284" [label="(ControlStructure,if (!*tbool && !it->size))"];
"1000296" [label="(Call,c = (unsigned char)*tbool)"];
"1000295" [label="(Literal,1)"];
"1000288" [label="(Identifier,tbool)"];
"1000273" [label="(Call,*tbool && (it->size > 0))"];
"1000261" [label="(Literal,1)"];
"1000297" [label="(Identifier,c)"];
"1000410" [label="(MethodReturn,int)"];
"1000289" [label="(Call,!it->size)"];
"1000276" [label="(Call,it->size > 0)"];
"1000223" [label="(Block,)"];
"1000274" [label="(Call,*tbool)"];
"1000298" [label="(Call,(unsigned char)*tbool)"];
"1000291" [label="(Identifier,it)"];
"1000264" [label="(Literal,1)"];
"1000272" [label="(ControlStructure,if (*tbool && (it->size > 0)))"];
"1000260" [label="(Call,-1)"];
"1000257" -> "1000256"  [label="AST: "];
"1000257" -> "1000260"  [label="CFG: "];
"1000258" -> "1000257"  [label="AST: "];
"1000260" -> "1000257"  [label="AST: "];
"1000264" -> "1000257"  [label="CFG: "];
"1000268" -> "1000257"  [label="CFG: "];
"1000257" -> "1000410"  [label="DDG: -1"];
"1000257" -> "1000410"  [label="DDG: *tbool"];
"1000257" -> "1000410"  [label="DDG: *tbool == -1"];
"1000260" -> "1000257"  [label="DDG: 1"];
"1000257" -> "1000273"  [label="DDG: *tbool"];
"1000257" -> "1000298"  [label="DDG: *tbool"];
"1000260" -> "1000261"  [label="CFG: "];
"1000261" -> "1000260"  [label="AST: "];
"1000273" -> "1000272"  [label="AST: "];
"1000273" -> "1000274"  [label="CFG: "];
"1000273" -> "1000276"  [label="CFG: "];
"1000274" -> "1000273"  [label="AST: "];
"1000276" -> "1000273"  [label="AST: "];
"1000283" -> "1000273"  [label="CFG: "];
"1000288" -> "1000273"  [label="CFG: "];
"1000273" -> "1000410"  [label="DDG: *tbool"];
"1000273" -> "1000410"  [label="DDG: it->size > 0"];
"1000273" -> "1000410"  [label="DDG: *tbool && (it->size > 0)"];
"1000276" -> "1000273"  [label="DDG: it->size"];
"1000276" -> "1000273"  [label="DDG: 0"];
"1000273" -> "1000286"  [label="DDG: *tbool"];
"1000286" -> "1000285"  [label="AST: "];
"1000286" -> "1000287"  [label="CFG: "];
"1000287" -> "1000286"  [label="AST: "];
"1000291" -> "1000286"  [label="CFG: "];
"1000285" -> "1000286"  [label="CFG: "];
"1000286" -> "1000410"  [label="DDG: *tbool"];
"1000286" -> "1000285"  [label="DDG: *tbool"];
"1000286" -> "1000298"  [label="DDG: *tbool"];
"1000285" -> "1000284"  [label="AST: "];
"1000285" -> "1000289"  [label="CFG: "];
"1000289" -> "1000285"  [label="AST: "];
"1000295" -> "1000285"  [label="CFG: "];
"1000297" -> "1000285"  [label="CFG: "];
"1000285" -> "1000410"  [label="DDG: !*tbool"];
"1000285" -> "1000410"  [label="DDG: !*tbool && !it->size"];
"1000285" -> "1000410"  [label="DDG: !it->size"];
"1000289" -> "1000285"  [label="DDG: it->size"];
"1000298" -> "1000296"  [label="AST: "];
"1000298" -> "1000300"  [label="CFG: "];
"1000299" -> "1000298"  [label="AST: "];
"1000300" -> "1000298"  [label="AST: "];
"1000296" -> "1000298"  [label="CFG: "];
"1000298" -> "1000410"  [label="DDG: *tbool"];
"1000298" -> "1000296"  [label="DDG: *tbool"];
"1000296" -> "1000223"  [label="AST: "];
"1000297" -> "1000296"  [label="AST: "];
"1000303" -> "1000296"  [label="CFG: "];
"1000296" -> "1000410"  [label="DDG: c"];
"1000296" -> "1000410"  [label="DDG: (unsigned char)*tbool"];
}
