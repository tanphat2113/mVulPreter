digraph "0_krb5_82dc33da50338ac84c7b4102dc6513d897d0506a_8@pointer" {
"1000356" [label="(Call,memcpy(p, t.data, MIN(t.length, desired_output_len)))"];
"1000366" [label="(Call,p += t.length)"];
"1000361" [label="(Call,MIN(t.length, desired_output_len))"];
"1000295" [label="(Call,k5alloc(t.length, &code))"];
"1000286" [label="(Call,t.length = prflen)"];
"1000269" [label="(Call,k5alloc(ns.length, &code))"];
"1000256" [label="(Call,ns.length = 4 + prf_in->length)"];
"1000218" [label="(Call,k5alloc(desired_output_len, &code))"];
"1000209" [label="(Call,desired_output_len == 0)"];
"1000106" [label="(MethodParameterIn,ssize_t desired_output_len)"];
"1000331" [label="(Call,desired_output_len > 0)"];
"1000371" [label="(Call,desired_output_len -= t.length)"];
"1000356" [label="(Call,memcpy(p, t.data, MIN(t.length, desired_output_len)))"];
"1000323" [label="(Call,p = (unsigned char *)prf_out->value)"];
"1000325" [label="(Call,(unsigned char *)prf_out->value)"];
"1000223" [label="(Call,prf_out->value == NULL)"];
"1000214" [label="(Call,prf_out->value = k5alloc(desired_output_len, &code))"];
"1000200" [label="(Call,key == NULL)"];
"1000181" [label="(Call,key = ctx->acceptor_subkey)"];
"1000188" [label="(Call,key = ctx->subkey)"];
"1000302" [label="(Call,t.data == NULL)"];
"1000291" [label="(Call,t.data = k5alloc(t.length, &code))"];
"1000276" [label="(Call,ns.data == NULL)"];
"1000265" [label="(Call,ns.data = k5alloc(ns.length, &code))"];
"1000183" [label="(Call,ctx->acceptor_subkey)"];
"1000213" [label="(Identifier,GSS_S_COMPLETE)"];
"1000223" [label="(Call,prf_out->value == NULL)"];
"1000296" [label="(Call,t.length)"];
"1000307" [label="(ControlStructure,goto cleanup;)"];
"1000366" [label="(Call,p += t.length)"];
"1000302" [label="(Call,t.data == NULL)"];
"1000324" [label="(Identifier,p)"];
"1000220" [label="(Call,&code)"];
"1000311" [label="(Identifier,ns)"];
"1000378" [label="(JumpTarget,cleanup:)"];
"1000244" [label="(Call,krb5_k_key_enctype(ctx->k5_context, key))"];
"1000230" [label="(Identifier,code)"];
"1000330" [label="(ControlStructure,while (desired_output_len > 0))"];
"1000304" [label="(Identifier,t)"];
"1000287" [label="(Call,t.length)"];
"1000334" [label="(Block,)"];
"1000371" [label="(Call,desired_output_len -= t.length)"];
"1000211" [label="(Literal,0)"];
"1000373" [label="(Call,t.length)"];
"1000273" [label="(Call,&code)"];
"1000335" [label="(Call,store_32_be(i, ns.data))"];
"1000199" [label="(ControlStructure,if (key == NULL))"];
"1000193" [label="(ControlStructure,break;)"];
"1000306" [label="(Identifier,NULL)"];
"1000323" [label="(Call,p = (unsigned char *)prf_out->value)"];
"1000280" [label="(Identifier,NULL)"];
"1000288" [label="(Identifier,t)"];
"1000275" [label="(ControlStructure,if (ns.data == NULL))"];
"1000276" [label="(Call,ns.data == NULL)"];
"1000210" [label="(Identifier,desired_output_len)"];
"1000357" [label="(Identifier,p)"];
"1000106" [label="(MethodParameterIn,ssize_t desired_output_len)"];
"1000325" [label="(Call,(unsigned char *)prf_out->value)"];
"1000190" [label="(Call,ctx->subkey)"];
"1000181" [label="(Call,key = ctx->acceptor_subkey)"];
"1000367" [label="(Identifier,p)"];
"1000299" [label="(Call,&code)"];
"1000265" [label="(Call,ns.data = k5alloc(ns.length, &code))"];
"1000202" [label="(Identifier,NULL)"];
"1000225" [label="(Identifier,prf_out)"];
"1000186" [label="(ControlStructure,break;)"];
"1000292" [label="(Call,t.data)"];
"1000215" [label="(Call,prf_out->value)"];
"1000108" [label="(Block,)"];
"1000295" [label="(Call,k5alloc(t.length, &code))"];
"1000208" [label="(ControlStructure,if (desired_output_len == 0))"];
"1000270" [label="(Call,ns.length)"];
"1000266" [label="(Call,ns.data)"];
"1000356" [label="(Call,memcpy(p, t.data, MIN(t.length, desired_output_len)))"];
"1000267" [label="(Identifier,ns)"];
"1000269" [label="(Call,k5alloc(ns.length, &code))"];
"1000362" [label="(Call,t.length)"];
"1000233" [label="(Call,prf_out->length = desired_output_len)"];
"1000309" [label="(Call,ns.data + 4)"];
"1000189" [label="(Identifier,key)"];
"1000308" [label="(Call,memcpy(ns.data + 4, prf_in->value, prf_in->length))"];
"1000377" [label="(Identifier,i)"];
"1000201" [label="(Identifier,key)"];
"1000336" [label="(Identifier,i)"];
"1000257" [label="(Call,ns.length)"];
"1000303" [label="(Call,t.data)"];
"1000333" [label="(Literal,0)"];
"1000327" [label="(Call,prf_out->value)"];
"1000412" [label="(MethodReturn,RET)"];
"1000209" [label="(Call,desired_output_len == 0)"];
"1000365" [label="(Identifier,desired_output_len)"];
"1000372" [label="(Identifier,desired_output_len)"];
"1000290" [label="(Identifier,prflen)"];
"1000277" [label="(Call,ns.data)"];
"1000180" [label="(Block,)"];
"1000205" [label="(Identifier,code)"];
"1000361" [label="(Call,MIN(t.length, desired_output_len))"];
"1000235" [label="(Identifier,prf_out)"];
"1000256" [label="(Call,ns.length = 4 + prf_in->length)"];
"1000301" [label="(ControlStructure,if (t.data == NULL))"];
"1000219" [label="(Identifier,desired_output_len)"];
"1000283" [label="(Identifier,code)"];
"1000332" [label="(Identifier,desired_output_len)"];
"1000214" [label="(Call,prf_out->value = k5alloc(desired_output_len, &code))"];
"1000174" [label="(Block,)"];
"1000224" [label="(Call,prf_out->value)"];
"1000368" [label="(Call,t.length)"];
"1000358" [label="(Call,t.data)"];
"1000188" [label="(Call,key = ctx->subkey)"];
"1000222" [label="(ControlStructure,if (prf_out->value == NULL))"];
"1000200" [label="(Call,key == NULL)"];
"1000278" [label="(Identifier,ns)"];
"1000218" [label="(Call,k5alloc(desired_output_len, &code))"];
"1000331" [label="(Call,desired_output_len > 0)"];
"1000291" [label="(Call,t.data = k5alloc(t.length, &code))"];
"1000286" [label="(Call,t.length = prflen)"];
"1000293" [label="(Identifier,t)"];
"1000260" [label="(Call,4 + prf_in->length)"];
"1000182" [label="(Identifier,key)"];
"1000227" [label="(Identifier,NULL)"];
"1000216" [label="(Identifier,prf_out)"];
"1000356" -> "1000334"  [label="AST: "];
"1000356" -> "1000361"  [label="CFG: "];
"1000357" -> "1000356"  [label="AST: "];
"1000358" -> "1000356"  [label="AST: "];
"1000361" -> "1000356"  [label="AST: "];
"1000367" -> "1000356"  [label="CFG: "];
"1000356" -> "1000412"  [label="DDG: memcpy(p, t.data, MIN(t.length, desired_output_len))"];
"1000356" -> "1000412"  [label="DDG: MIN(t.length, desired_output_len)"];
"1000356" -> "1000412"  [label="DDG: t.data"];
"1000366" -> "1000356"  [label="DDG: p"];
"1000323" -> "1000356"  [label="DDG: p"];
"1000302" -> "1000356"  [label="DDG: t.data"];
"1000361" -> "1000356"  [label="DDG: t.length"];
"1000361" -> "1000356"  [label="DDG: desired_output_len"];
"1000356" -> "1000366"  [label="DDG: p"];
"1000366" -> "1000334"  [label="AST: "];
"1000366" -> "1000368"  [label="CFG: "];
"1000367" -> "1000366"  [label="AST: "];
"1000368" -> "1000366"  [label="AST: "];
"1000372" -> "1000366"  [label="CFG: "];
"1000366" -> "1000412"  [label="DDG: p"];
"1000361" -> "1000366"  [label="DDG: t.length"];
"1000361" -> "1000365"  [label="CFG: "];
"1000362" -> "1000361"  [label="AST: "];
"1000365" -> "1000361"  [label="AST: "];
"1000295" -> "1000361"  [label="DDG: t.length"];
"1000331" -> "1000361"  [label="DDG: desired_output_len"];
"1000106" -> "1000361"  [label="DDG: desired_output_len"];
"1000361" -> "1000371"  [label="DDG: t.length"];
"1000361" -> "1000371"  [label="DDG: desired_output_len"];
"1000295" -> "1000291"  [label="AST: "];
"1000295" -> "1000299"  [label="CFG: "];
"1000296" -> "1000295"  [label="AST: "];
"1000299" -> "1000295"  [label="AST: "];
"1000291" -> "1000295"  [label="CFG: "];
"1000295" -> "1000412"  [label="DDG: t.length"];
"1000295" -> "1000412"  [label="DDG: &code"];
"1000295" -> "1000291"  [label="DDG: t.length"];
"1000295" -> "1000291"  [label="DDG: &code"];
"1000286" -> "1000295"  [label="DDG: t.length"];
"1000269" -> "1000295"  [label="DDG: &code"];
"1000286" -> "1000108"  [label="AST: "];
"1000286" -> "1000290"  [label="CFG: "];
"1000287" -> "1000286"  [label="AST: "];
"1000290" -> "1000286"  [label="AST: "];
"1000293" -> "1000286"  [label="CFG: "];
"1000286" -> "1000412"  [label="DDG: prflen"];
"1000269" -> "1000265"  [label="AST: "];
"1000269" -> "1000273"  [label="CFG: "];
"1000270" -> "1000269"  [label="AST: "];
"1000273" -> "1000269"  [label="AST: "];
"1000265" -> "1000269"  [label="CFG: "];
"1000269" -> "1000412"  [label="DDG: &code"];
"1000269" -> "1000412"  [label="DDG: ns.length"];
"1000269" -> "1000265"  [label="DDG: ns.length"];
"1000269" -> "1000265"  [label="DDG: &code"];
"1000256" -> "1000269"  [label="DDG: ns.length"];
"1000218" -> "1000269"  [label="DDG: &code"];
"1000256" -> "1000108"  [label="AST: "];
"1000256" -> "1000260"  [label="CFG: "];
"1000257" -> "1000256"  [label="AST: "];
"1000260" -> "1000256"  [label="AST: "];
"1000267" -> "1000256"  [label="CFG: "];
"1000256" -> "1000412"  [label="DDG: 4 + prf_in->length"];
"1000218" -> "1000214"  [label="AST: "];
"1000218" -> "1000220"  [label="CFG: "];
"1000219" -> "1000218"  [label="AST: "];
"1000220" -> "1000218"  [label="AST: "];
"1000214" -> "1000218"  [label="CFG: "];
"1000218" -> "1000412"  [label="DDG: desired_output_len"];
"1000218" -> "1000412"  [label="DDG: &code"];
"1000218" -> "1000214"  [label="DDG: desired_output_len"];
"1000218" -> "1000214"  [label="DDG: &code"];
"1000209" -> "1000218"  [label="DDG: desired_output_len"];
"1000106" -> "1000218"  [label="DDG: desired_output_len"];
"1000218" -> "1000233"  [label="DDG: desired_output_len"];
"1000218" -> "1000331"  [label="DDG: desired_output_len"];
"1000209" -> "1000208"  [label="AST: "];
"1000209" -> "1000211"  [label="CFG: "];
"1000210" -> "1000209"  [label="AST: "];
"1000211" -> "1000209"  [label="AST: "];
"1000213" -> "1000209"  [label="CFG: "];
"1000216" -> "1000209"  [label="CFG: "];
"1000209" -> "1000412"  [label="DDG: desired_output_len == 0"];
"1000209" -> "1000412"  [label="DDG: desired_output_len"];
"1000106" -> "1000209"  [label="DDG: desired_output_len"];
"1000106" -> "1000101"  [label="AST: "];
"1000106" -> "1000412"  [label="DDG: desired_output_len"];
"1000106" -> "1000233"  [label="DDG: desired_output_len"];
"1000106" -> "1000331"  [label="DDG: desired_output_len"];
"1000106" -> "1000371"  [label="DDG: desired_output_len"];
"1000331" -> "1000330"  [label="AST: "];
"1000331" -> "1000333"  [label="CFG: "];
"1000332" -> "1000331"  [label="AST: "];
"1000333" -> "1000331"  [label="AST: "];
"1000336" -> "1000331"  [label="CFG: "];
"1000378" -> "1000331"  [label="CFG: "];
"1000331" -> "1000412"  [label="DDG: desired_output_len > 0"];
"1000331" -> "1000412"  [label="DDG: desired_output_len"];
"1000371" -> "1000331"  [label="DDG: desired_output_len"];
"1000371" -> "1000334"  [label="AST: "];
"1000371" -> "1000373"  [label="CFG: "];
"1000372" -> "1000371"  [label="AST: "];
"1000373" -> "1000371"  [label="AST: "];
"1000377" -> "1000371"  [label="CFG: "];
"1000371" -> "1000412"  [label="DDG: t.length"];
"1000323" -> "1000108"  [label="AST: "];
"1000323" -> "1000325"  [label="CFG: "];
"1000324" -> "1000323"  [label="AST: "];
"1000325" -> "1000323"  [label="AST: "];
"1000332" -> "1000323"  [label="CFG: "];
"1000323" -> "1000412"  [label="DDG: p"];
"1000323" -> "1000412"  [label="DDG: (unsigned char *)prf_out->value"];
"1000325" -> "1000323"  [label="DDG: prf_out->value"];
"1000325" -> "1000327"  [label="CFG: "];
"1000326" -> "1000325"  [label="AST: "];
"1000327" -> "1000325"  [label="AST: "];
"1000325" -> "1000412"  [label="DDG: prf_out->value"];
"1000223" -> "1000325"  [label="DDG: prf_out->value"];
"1000223" -> "1000222"  [label="AST: "];
"1000223" -> "1000227"  [label="CFG: "];
"1000224" -> "1000223"  [label="AST: "];
"1000227" -> "1000223"  [label="AST: "];
"1000230" -> "1000223"  [label="CFG: "];
"1000235" -> "1000223"  [label="CFG: "];
"1000223" -> "1000412"  [label="DDG: NULL"];
"1000223" -> "1000412"  [label="DDG: prf_out->value == NULL"];
"1000223" -> "1000412"  [label="DDG: prf_out->value"];
"1000214" -> "1000223"  [label="DDG: prf_out->value"];
"1000200" -> "1000223"  [label="DDG: NULL"];
"1000223" -> "1000276"  [label="DDG: NULL"];
"1000214" -> "1000108"  [label="AST: "];
"1000215" -> "1000214"  [label="AST: "];
"1000225" -> "1000214"  [label="CFG: "];
"1000214" -> "1000412"  [label="DDG: k5alloc(desired_output_len, &code)"];
"1000200" -> "1000199"  [label="AST: "];
"1000200" -> "1000202"  [label="CFG: "];
"1000201" -> "1000200"  [label="AST: "];
"1000202" -> "1000200"  [label="AST: "];
"1000205" -> "1000200"  [label="CFG: "];
"1000210" -> "1000200"  [label="CFG: "];
"1000200" -> "1000412"  [label="DDG: key"];
"1000200" -> "1000412"  [label="DDG: key == NULL"];
"1000200" -> "1000412"  [label="DDG: NULL"];
"1000181" -> "1000200"  [label="DDG: key"];
"1000188" -> "1000200"  [label="DDG: key"];
"1000200" -> "1000244"  [label="DDG: key"];
"1000181" -> "1000180"  [label="AST: "];
"1000181" -> "1000183"  [label="CFG: "];
"1000182" -> "1000181"  [label="AST: "];
"1000183" -> "1000181"  [label="AST: "];
"1000186" -> "1000181"  [label="CFG: "];
"1000181" -> "1000412"  [label="DDG: ctx->acceptor_subkey"];
"1000188" -> "1000174"  [label="AST: "];
"1000188" -> "1000190"  [label="CFG: "];
"1000189" -> "1000188"  [label="AST: "];
"1000190" -> "1000188"  [label="AST: "];
"1000193" -> "1000188"  [label="CFG: "];
"1000188" -> "1000412"  [label="DDG: ctx->subkey"];
"1000302" -> "1000301"  [label="AST: "];
"1000302" -> "1000306"  [label="CFG: "];
"1000303" -> "1000302"  [label="AST: "];
"1000306" -> "1000302"  [label="AST: "];
"1000307" -> "1000302"  [label="CFG: "];
"1000311" -> "1000302"  [label="CFG: "];
"1000302" -> "1000412"  [label="DDG: t.data"];
"1000302" -> "1000412"  [label="DDG: NULL"];
"1000302" -> "1000412"  [label="DDG: t.data == NULL"];
"1000291" -> "1000302"  [label="DDG: t.data"];
"1000276" -> "1000302"  [label="DDG: NULL"];
"1000291" -> "1000108"  [label="AST: "];
"1000292" -> "1000291"  [label="AST: "];
"1000304" -> "1000291"  [label="CFG: "];
"1000291" -> "1000412"  [label="DDG: k5alloc(t.length, &code)"];
"1000276" -> "1000275"  [label="AST: "];
"1000276" -> "1000280"  [label="CFG: "];
"1000277" -> "1000276"  [label="AST: "];
"1000280" -> "1000276"  [label="AST: "];
"1000283" -> "1000276"  [label="CFG: "];
"1000288" -> "1000276"  [label="CFG: "];
"1000276" -> "1000412"  [label="DDG: NULL"];
"1000276" -> "1000412"  [label="DDG: ns.data == NULL"];
"1000276" -> "1000412"  [label="DDG: ns.data"];
"1000265" -> "1000276"  [label="DDG: ns.data"];
"1000276" -> "1000308"  [label="DDG: ns.data"];
"1000276" -> "1000309"  [label="DDG: ns.data"];
"1000276" -> "1000335"  [label="DDG: ns.data"];
"1000265" -> "1000108"  [label="AST: "];
"1000266" -> "1000265"  [label="AST: "];
"1000278" -> "1000265"  [label="CFG: "];
"1000265" -> "1000412"  [label="DDG: k5alloc(ns.length, &code)"];
}
