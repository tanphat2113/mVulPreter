digraph "0_file_b4c01141e5367f247b84dcaf6aefbb4e741842b8@pointer" {
"1000204" [label="(Call,file_printf(ms, \", bad note description size 0x%lx\",\n \t\t(unsigned long)descsz))"];
"1000117" [label="(MethodParameterIn,struct magic_set *ms)"];
"1000207" [label="(Call,(unsigned long)descsz)"];
"1000198" [label="(Call,descsz & 0x80000000)"];
"1000163" [label="(Call,descsz = xnh_descsz)"];
"1000171" [label="(Call,descsz == 0)"];
"1000202" [label="(Call,(void)file_printf(ms, \", bad note description size 0x%lx\",\n \t\t(unsigned long)descsz))"];
"1001237" [label="(MethodReturn,RET)"];
"1000839" [label="(Call,file_printf(ms, \" %d.%d.%d\", desc / 100000,\n\t\t    desc / 10000 % 10, desc % 10000))"];
"1000198" [label="(Call,descsz & 0x80000000)"];
"1000197" [label="(ControlStructure,if (descsz & 0x80000000))"];
"1000373" [label="(Call,file_printf(ms, \"Solaris\"))"];
"1000814" [label="(Call,file_printf(ms, \", for DragonFly\"))"];
"1000202" [label="(Call,(void)file_printf(ms, \", bad note description size 0x%lx\",\n \t\t(unsigned long)descsz))"];
"1000163" [label="(Call,descsz = xnh_descsz)"];
"1000768" [label="(Call,descsz == 4)"];
"1000384" [label="(Call,file_printf(ms, \"kFreeBSD\"))"];
"1000475" [label="(Call,file_printf(ms, \", BuildID[%s]=\", descsz == 16 ? \"md5/uuid\" :\n\t\t\"sha1\"))"];
"1000774" [label="(Call,file_printf(ms, \", for OpenBSD\"))"];
"1000201" [label="(Block,)"];
"1000679" [label="(Call,file_printf(ms, \", compiler model: %.*s\",\n\t\t\t    (int)descsz, (const char *)&nbuf[doff]))"];
"1000415" [label="(Call,file_printf(ms, \" %d.%d.%d\", elf_getu32(swap, desc[1]),\n\t\t    elf_getu32(swap, desc[2]), elf_getu32(swap, desc[3])))"];
"1000317" [label="(Call,descsz == 16)"];
"1000213" [label="(Identifier,noff)"];
"1000406" [label="(Call,file_printf(ms, \"<unknown>\"))"];
"1000199" [label="(Identifier,descsz)"];
"1000395" [label="(Call,file_printf(ms, \"kNetBSD\"))"];
"1000204" [label="(Call,file_printf(ms, \", bad note description size 0x%lx\",\n \t\t(unsigned long)descsz))"];
"1000232" [label="(Call,ELF_ALIGN(doff + descsz))"];
"1000189" [label="(Call,file_printf(ms, \", bad note name size 0x%lx\",\n \t\t(unsigned long)namesz))"];
"1000286" [label="(Call,file_printf(ms, \", for SuSE %d.%d\", nbuf[doff], nbuf[doff + 1]))"];
"1000642" [label="(Call,do_note_netbsd_version(ms, swap, &nbuf[doff]))"];
"1000542" [label="(Call,descsz == 4)"];
"1000209" [label="(Identifier,descsz)"];
"1000682" [label="(Call,(int)descsz)"];
"1000125" [label="(Block,)"];
"1000334" [label="(Call,file_printf(ms, \", for GNU/\"))"];
"1000211" [label="(Literal,0)"];
"1000165" [label="(Identifier,xnh_descsz)"];
"1000200" [label="(Literal,0x80000000)"];
"1000602" [label="(Call,file_printf(ms, \"%s%s\", did++ ? \",\" : \"\",\n\t\t\t    pax[i]))"];
"1000464" [label="(Call,descsz == 16)"];
"1000205" [label="(Identifier,ms)"];
"1000167" [label="(Call,(namesz == 0) && (descsz == 0))"];
"1000206" [label="(Literal,\", bad note description size 0x%lx\")"];
"1000988" [label="(Call,file_printf(ms, \", from '%.31s'\",\n\t\t\t    &nbuf[doff + 0x7c]))"];
"1000699" [label="(Call,file_printf(ms, \", note=%u\", xnh_type))"];
"1000282" [label="(Call,descsz == 2)"];
"1000962" [label="(Call,file_printf(ms, \", %s-style\", os_style_names[os_style]))"];
"1000169" [label="(Identifier,namesz)"];
"1000807" [label="(Call,descsz == 4)"];
"1000164" [label="(Identifier,descsz)"];
"1000731" [label="(Call,descsz == 4)"];
"1001214" [label="(Call,file_printf(ms, \", from '%.*s'\",\n\t\t\t\t    (int)(cp - cname), cname))"];
"1000172" [label="(Identifier,descsz)"];
"1001093" [label="(Call,reloffset >= descsz)"];
"1000173" [label="(Literal,0)"];
"1000735" [label="(Call,do_note_freebsd_version(ms, swap, &nbuf[doff]))"];
"1000233" [label="(Call,doff + descsz)"];
"1000238" [label="(Call,doff + descsz)"];
"1000573" [label="(Call,file_printf(ms, \", PaX: \"))"];
"1001016" [label="(Call,file_printf(ms, \" (signal %u)\",\n\t\t\t    elf_getu32(swap, signo)))"];
"1000508" [label="(Call,file_printf(ms, \"%02x\", desc[i]))"];
"1000479" [label="(Call,descsz == 16)"];
"1000638" [label="(Call,descsz == 4)"];
"1000207" [label="(Call,(unsigned long)descsz)"];
"1000237" [label="(Call,doff + descsz > size)"];
"1000351" [label="(Call,file_printf(ms, \"Linux\"))"];
"1000171" [label="(Call,descsz == 0)"];
"1000362" [label="(Call,file_printf(ms, \"Hurd\"))"];
"1000662" [label="(Call,(int)descsz)"];
"1000659" [label="(Call,file_printf(ms, \", compiled for: %.*s\", (int)descsz,\n\t\t\t    (const char *)&nbuf[doff]))"];
"1000117" [label="(MethodParameterIn,struct magic_set *ms)"];
"1000204" -> "1000202"  [label="AST: "];
"1000204" -> "1000207"  [label="CFG: "];
"1000205" -> "1000204"  [label="AST: "];
"1000206" -> "1000204"  [label="AST: "];
"1000207" -> "1000204"  [label="AST: "];
"1000202" -> "1000204"  [label="CFG: "];
"1000204" -> "1001237"  [label="DDG: "];
"1000204" -> "1001237"  [label="DDG: "];
"1000204" -> "1000202"  [label="DDG: "];
"1000204" -> "1000202"  [label="DDG: "];
"1000204" -> "1000202"  [label="DDG: "];
"1000117" -> "1000204"  [label="DDG: "];
"1000207" -> "1000204"  [label="DDG: "];
"1000117" -> "1000116"  [label="AST: "];
"1000117" -> "1001237"  [label="DDG: "];
"1000117" -> "1000189"  [label="DDG: "];
"1000117" -> "1000286"  [label="DDG: "];
"1000117" -> "1000334"  [label="DDG: "];
"1000117" -> "1000351"  [label="DDG: "];
"1000117" -> "1000362"  [label="DDG: "];
"1000117" -> "1000373"  [label="DDG: "];
"1000117" -> "1000384"  [label="DDG: "];
"1000117" -> "1000395"  [label="DDG: "];
"1000117" -> "1000406"  [label="DDG: "];
"1000117" -> "1000415"  [label="DDG: "];
"1000117" -> "1000475"  [label="DDG: "];
"1000117" -> "1000508"  [label="DDG: "];
"1000117" -> "1000573"  [label="DDG: "];
"1000117" -> "1000602"  [label="DDG: "];
"1000117" -> "1000642"  [label="DDG: "];
"1000117" -> "1000659"  [label="DDG: "];
"1000117" -> "1000679"  [label="DDG: "];
"1000117" -> "1000699"  [label="DDG: "];
"1000117" -> "1000735"  [label="DDG: "];
"1000117" -> "1000774"  [label="DDG: "];
"1000117" -> "1000814"  [label="DDG: "];
"1000117" -> "1000839"  [label="DDG: "];
"1000117" -> "1000962"  [label="DDG: "];
"1000117" -> "1000988"  [label="DDG: "];
"1000117" -> "1001016"  [label="DDG: "];
"1000117" -> "1001214"  [label="DDG: "];
"1000207" -> "1000209"  [label="CFG: "];
"1000208" -> "1000207"  [label="AST: "];
"1000209" -> "1000207"  [label="AST: "];
"1000207" -> "1001237"  [label="DDG: "];
"1000198" -> "1000207"  [label="DDG: "];
"1000198" -> "1000197"  [label="AST: "];
"1000198" -> "1000200"  [label="CFG: "];
"1000199" -> "1000198"  [label="AST: "];
"1000200" -> "1000198"  [label="AST: "];
"1000203" -> "1000198"  [label="CFG: "];
"1000213" -> "1000198"  [label="CFG: "];
"1000198" -> "1001237"  [label="DDG: "];
"1000198" -> "1001237"  [label="DDG: "];
"1000163" -> "1000198"  [label="DDG: "];
"1000171" -> "1000198"  [label="DDG: "];
"1000198" -> "1000232"  [label="DDG: "];
"1000198" -> "1000233"  [label="DDG: "];
"1000198" -> "1000237"  [label="DDG: "];
"1000198" -> "1000238"  [label="DDG: "];
"1000198" -> "1000282"  [label="DDG: "];
"1000198" -> "1000317"  [label="DDG: "];
"1000198" -> "1000464"  [label="DDG: "];
"1000198" -> "1000479"  [label="DDG: "];
"1000198" -> "1000542"  [label="DDG: "];
"1000198" -> "1000638"  [label="DDG: "];
"1000198" -> "1000662"  [label="DDG: "];
"1000198" -> "1000682"  [label="DDG: "];
"1000198" -> "1000731"  [label="DDG: "];
"1000198" -> "1000768"  [label="DDG: "];
"1000198" -> "1000807"  [label="DDG: "];
"1000198" -> "1001093"  [label="DDG: "];
"1000163" -> "1000125"  [label="AST: "];
"1000163" -> "1000165"  [label="CFG: "];
"1000164" -> "1000163"  [label="AST: "];
"1000165" -> "1000163"  [label="AST: "];
"1000169" -> "1000163"  [label="CFG: "];
"1000163" -> "1001237"  [label="DDG: "];
"1000163" -> "1001237"  [label="DDG: "];
"1000163" -> "1000171"  [label="DDG: "];
"1000171" -> "1000167"  [label="AST: "];
"1000171" -> "1000173"  [label="CFG: "];
"1000172" -> "1000171"  [label="AST: "];
"1000173" -> "1000171"  [label="AST: "];
"1000167" -> "1000171"  [label="CFG: "];
"1000171" -> "1001237"  [label="DDG: "];
"1000171" -> "1000167"  [label="DDG: "];
"1000171" -> "1000167"  [label="DDG: "];
"1000202" -> "1000201"  [label="AST: "];
"1000203" -> "1000202"  [label="AST: "];
"1000211" -> "1000202"  [label="CFG: "];
"1000202" -> "1001237"  [label="DDG: "];
"1000202" -> "1001237"  [label="DDG: "];
}
