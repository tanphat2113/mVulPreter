digraph "0_atheme_c597156adc60a45b5f827793cd420945f47bc03b_1@pointer" {
"1000320" [label="(Call,command_fail(si, fault_needmoreparams, _(\"Syntax: FLAGS <#channel> MODIFY [target] <flags>\")))"];
"1000315" [label="(Call,command_fail(si, fault_needmoreparams, STR_INSUFFICIENT_PARAMS, \"FLAGS\"))"];
"1000177" [label="(Call,has_priv(si, PRIV_CHAN_AUSPEX))"];
"1000107" [label="(MethodParameterIn,sourceinfo_t *si)"];
"1000323" [label="(Call,_(\"Syntax: FLAGS <#channel> MODIFY [target] <flags>\"))"];
"1000847" [label="(Call,command_fail(si, fault_toomany, _(\"Channel %s access list is full.\"), mc->name))"];
"1000354" [label="(Call,command_fail(si, fault_noprivs, _(\"You are not logged in.\")))"];
"1000324" [label="(Literal,\"Syntax: FLAGS <#channel> MODIFY [target] <flags>\")"];
"1000373" [label="(Call,chanacs_source_has_flag(mc, si, CA_ACLVIEW))"];
"1000288" [label="(Call,command_success_nodata(si, _(\"Cleared flags in \2%s\2.\"), mc->name))"];
"1000693" [label="(Call,command_fail(si, fault_noprivs, _(\"You may not remove a founder's +f access.\")))"];
"1001010" [label="(Call,command_fail(si, fault_nochange, _(\"Channel access to \2%s\2 for \2%s\2 unchanged.\"), channel, target))"];
"1000651" [label="(Call,command_fail(si, fault_nosuch_target, _(\"\2%s\2 is not registered.\"), target))"];
"1000976" [label="(Call,command_fail(si, fault_noprivs, _(\"You are not allowed to set \2%s\2 on \2%s\2 in \2%s\2.\"), bitmask_to_flags2(addflags, removeflags), target, mc->name))"];
"1000773" [label="(Call,command_fail(si, fault_toomany, _(\"\2%s\2 cannot take foundership of a channel.\"), mt->name))"];
"1000215" [label="(Call,do_list(si, mc, flags))"];
"1000378" [label="(Call,command_fail(si, fault_noprivs, _(\"You are not authorized to execute this command.\")))"];
"1000320" [label="(Call,command_fail(si, fault_needmoreparams, _(\"Syntax: FLAGS <#channel> MODIFY [target] <flags>\")))"];
"1000315" [label="(Call,command_fail(si, fault_needmoreparams, STR_INSUFFICIENT_PARAMS, \"FLAGS\"))"];
"1000162" [label="(Call,command_fail(si, fault_nosuch_target, _(\"Channel \2%s\2 is not registered.\"), channel))"];
"1000317" [label="(Identifier,fault_needmoreparams)"];
"1001030" [label="(Call,logcommand(si, CMDLOG_SET, \"FLAGS: \2%s\2 \2%s\2 \2%s\2\", mc->name, target, flagstr))"];
"1000177" [label="(Call,has_priv(si, PRIV_CHAN_AUSPEX))"];
"1000176" [label="(Call,!has_priv(si, PRIV_CHAN_AUSPEX))"];
"1000232" [label="(Call,do_list(si, mc, 0))"];
"1000741" [label="(Call,command_fail(si, fault_noprivs, _(\"Only %d founders allowed per channel.\"), chansvs.maxfounders))"];
"1000880" [label="(Call,command_fail(si, fault_noprivs, _(\"You are not allowed to set \2%s\2 on \2%s\2 in \2%s\2.\"), bitmask_to_flags2(addflags, removeflags), mt->name, mc->name))"];
"1000179" [label="(Identifier,PRIV_CHAN_AUSPEX)"];
"1000435" [label="(Call,command_success_string(si, str1, _(\"Flags for \2%s\2 in \2%s\2 are \2%s\2.\"),\n\t\t\t\t\t\ttarget, channel,\n\t\t\t\t\t\tstr1))"];
"1000148" [label="(Call,command_fail(si, fault_needmoreparams, _(\"Syntax: FLAGS <channel> [target] [flags]\")))"];
"1000402" [label="(Call,command_fail(si, fault_nosuch_target, _(\"\2%s\2 is not registered.\"), target))"];
"1000107" [label="(MethodParameterIn,sourceinfo_t *si)"];
"1000444" [label="(Call,command_success_string(si, \"\", _(\"No flags for \2%s\2 in \2%s\2.\"),\n\t\t\t\t\t\ttarget, channel))"];
"1000143" [label="(Call,command_fail(si, fault_needmoreparams, STR_INSUFFICIENT_PARAMS, \"FLAGS\"))"];
"1000281" [label="(Call,logcommand(si, CMDLOG_DO, \"CLEAR:FLAGS: \2%s\2\", mc->name))"];
"1000605" [label="(Call,command_fail(si, fault_badparams, _(\"Usage: FLAGS %s [target] [flags]\"), mc->name))"];
"1000181" [label="(Call,command_fail(si, fault_noprivs, _(\"\2%s\2 is closed.\"), channel))"];
"1000314" [label="(Block,)"];
"1000322" [label="(Identifier,fault_needmoreparams)"];
"1001042" [label="(Call,get_source_name(si))"];
"1000318" [label="(Identifier,STR_INSUFFICIENT_PARAMS)"];
"1000504" [label="(Call,command_fail(si, fault_noprivs, _(\"You are not authorized to execute this command.\")))"];
"1000916" [label="(Call,command_fail(si, fault_badparams, _(\"You may not set founder status on a hostmask.\")))"];
"1001023" [label="(Call,command_success_nodata(si, _(\"Flags \2%s\2 were set on \2%s\2 in \2%s\2.\"), flagstr, target, channel))"];
"1000451" [label="(Call,logcommand(si, CMDLOG_GET, \"FLAGS: \2%s\2 on \2%s\2\", mc->name, target))"];
"1000323" [label="(Call,_(\"Syntax: FLAGS <#channel> MODIFY [target] <flags>\"))"];
"1000943" [label="(Call,command_fail(si, fault_toomany, _(\"Channel %s access list is full.\"), mc->name))"];
"1000260" [label="(Call,command_fail(si, fault_noprivs, \"You are not authorized to perform this operation.\"))"];
"1000614" [label="(Call,command_fail(si, fault_badparams, _(\"Invalid template name given, use /%s%s TEMPLATE %s for a list\"), ircd->uses_rcommand ? \"\" : \"msg \", chansvs.me->disp, mc->name))"];
"1000178" [label="(Identifier,si)"];
"1000462" [label="(Call,chanacs_source_flags(mc, si))"];
"1000715" [label="(Call,command_fail(si, fault_noprivs, _(\"You may not remove the last founder.\")))"];
"1000826" [label="(Call,command_fail(si, fault_noprivs, _(\"\2%s\2 does not wish to be added to channel access lists (NEVEROP set).\"), mt->name))"];
"1000325" [label="(Return,return;)"];
"1000316" [label="(Identifier,si)"];
"1000321" [label="(Identifier,si)"];
"1000319" [label="(Literal,\"FLAGS\")"];
"1000561" [label="(Call,command_fail(si, fault_badparams, _(\"No valid flags given, use /%s%s HELP FLAGS for a list\"), ircd->uses_rcommand ? \"\" : \"msg \", chansvs.me->disp))"];
"1001048" [label="(MethodReturn,static void)"];
"1000757" [label="(Call,command_fail(si, fault_toomany, _(\"\2%s\2 has too many channels registered.\"), mt->name))"];
"1000255" [label="(Call,chanacs_source_has_flag(mc, si, CA_FOUNDER))"];
"1000320" -> "1000314"  [label="AST: "];
"1000320" -> "1000323"  [label="CFG: "];
"1000321" -> "1000320"  [label="AST: "];
"1000322" -> "1000320"  [label="AST: "];
"1000323" -> "1000320"  [label="AST: "];
"1000325" -> "1000320"  [label="CFG: "];
"1000320" -> "1001048"  [label="DDG: "];
"1000320" -> "1001048"  [label="DDG: "];
"1000320" -> "1001048"  [label="DDG: "];
"1000320" -> "1001048"  [label="DDG: "];
"1000315" -> "1000320"  [label="DDG: "];
"1000315" -> "1000320"  [label="DDG: "];
"1000107" -> "1000320"  [label="DDG: "];
"1000323" -> "1000320"  [label="DDG: "];
"1000315" -> "1000314"  [label="AST: "];
"1000315" -> "1000319"  [label="CFG: "];
"1000316" -> "1000315"  [label="AST: "];
"1000317" -> "1000315"  [label="AST: "];
"1000318" -> "1000315"  [label="AST: "];
"1000319" -> "1000315"  [label="AST: "];
"1000321" -> "1000315"  [label="CFG: "];
"1000315" -> "1001048"  [label="DDG: "];
"1000315" -> "1001048"  [label="DDG: "];
"1000177" -> "1000315"  [label="DDG: "];
"1000107" -> "1000315"  [label="DDG: "];
"1000177" -> "1000176"  [label="AST: "];
"1000177" -> "1000179"  [label="CFG: "];
"1000178" -> "1000177"  [label="AST: "];
"1000179" -> "1000177"  [label="AST: "];
"1000176" -> "1000177"  [label="CFG: "];
"1000177" -> "1001048"  [label="DDG: "];
"1000177" -> "1000176"  [label="DDG: "];
"1000177" -> "1000176"  [label="DDG: "];
"1000107" -> "1000177"  [label="DDG: "];
"1000177" -> "1000181"  [label="DDG: "];
"1000177" -> "1000215"  [label="DDG: "];
"1000177" -> "1000232"  [label="DDG: "];
"1000177" -> "1000255"  [label="DDG: "];
"1000177" -> "1000354"  [label="DDG: "];
"1000177" -> "1000373"  [label="DDG: "];
"1000177" -> "1000378"  [label="DDG: "];
"1000177" -> "1000402"  [label="DDG: "];
"1000177" -> "1000435"  [label="DDG: "];
"1000177" -> "1000444"  [label="DDG: "];
"1000177" -> "1000462"  [label="DDG: "];
"1000107" -> "1000106"  [label="AST: "];
"1000107" -> "1001048"  [label="DDG: "];
"1000107" -> "1000143"  [label="DDG: "];
"1000107" -> "1000148"  [label="DDG: "];
"1000107" -> "1000162"  [label="DDG: "];
"1000107" -> "1000181"  [label="DDG: "];
"1000107" -> "1000215"  [label="DDG: "];
"1000107" -> "1000232"  [label="DDG: "];
"1000107" -> "1000255"  [label="DDG: "];
"1000107" -> "1000260"  [label="DDG: "];
"1000107" -> "1000281"  [label="DDG: "];
"1000107" -> "1000288"  [label="DDG: "];
"1000107" -> "1000354"  [label="DDG: "];
"1000107" -> "1000373"  [label="DDG: "];
"1000107" -> "1000378"  [label="DDG: "];
"1000107" -> "1000402"  [label="DDG: "];
"1000107" -> "1000435"  [label="DDG: "];
"1000107" -> "1000444"  [label="DDG: "];
"1000107" -> "1000451"  [label="DDG: "];
"1000107" -> "1000462"  [label="DDG: "];
"1000107" -> "1000504"  [label="DDG: "];
"1000107" -> "1000561"  [label="DDG: "];
"1000107" -> "1000605"  [label="DDG: "];
"1000107" -> "1000614"  [label="DDG: "];
"1000107" -> "1000651"  [label="DDG: "];
"1000107" -> "1000693"  [label="DDG: "];
"1000107" -> "1000715"  [label="DDG: "];
"1000107" -> "1000741"  [label="DDG: "];
"1000107" -> "1000757"  [label="DDG: "];
"1000107" -> "1000773"  [label="DDG: "];
"1000107" -> "1000826"  [label="DDG: "];
"1000107" -> "1000847"  [label="DDG: "];
"1000107" -> "1000880"  [label="DDG: "];
"1000107" -> "1000916"  [label="DDG: "];
"1000107" -> "1000943"  [label="DDG: "];
"1000107" -> "1000976"  [label="DDG: "];
"1000107" -> "1001010"  [label="DDG: "];
"1000107" -> "1001023"  [label="DDG: "];
"1000107" -> "1001030"  [label="DDG: "];
"1000107" -> "1001042"  [label="DDG: "];
"1000323" -> "1000324"  [label="CFG: "];
"1000324" -> "1000323"  [label="AST: "];
}
