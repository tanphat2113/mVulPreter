digraph "0_atheme_c597156adc60a45b5f827793cd420945f47bc03b_1@API" {
"1000411" [label="(Call,target = sstrdup(mt->name))"];
"1000413" [label="(Call,sstrdup(mt->name))"];
"1000435" [label="(Call,command_success_string(si, str1, _(\"Flags for \2%s\2 in \2%s\2 are \2%s\2.\"),\n\t\t\t\t\t\ttarget, channel,\n\t\t\t\t\t\tstr1))"];
"1000451" [label="(Call,logcommand(si, CMDLOG_GET, \"FLAGS: \2%s\2 on \2%s\2\", mc->name, target))"];
"1000444" [label="(Call,command_success_string(si, \"\", _(\"No flags for \2%s\2 in \2%s\2.\"),\n\t\t\t\t\t\ttarget, channel))"];
"1000454" [label="(Literal,\"FLAGS: \2%s\2 on \2%s\2\")"];
"1000459" [label="(Return,return;)"];
"1000373" [label="(Call,chanacs_source_has_flag(mc, si, CA_ACLVIEW))"];
"1000156" [label="(Call,mychan_find(channel))"];
"1000413" [label="(Call,sstrdup(mt->name))"];
"1000177" [label="(Call,has_priv(si, PRIV_CHAN_AUSPEX))"];
"1000394" [label="(Block,)"];
"1000447" [label="(Call,_(\"No flags for \2%s\2 in \2%s\2.\"))"];
"1000435" [label="(Call,command_success_string(si, str1, _(\"Flags for \2%s\2 in \2%s\2 are \2%s\2.\"),\n\t\t\t\t\t\ttarget, channel,\n\t\t\t\t\t\tstr1))"];
"1000107" [label="(MethodParameterIn,sourceinfo_t *si)"];
"1000444" [label="(Call,command_success_string(si, \"\", _(\"No flags for \2%s\2 in \2%s\2.\"),\n\t\t\t\t\t\ttarget, channel))"];
"1000437" [label="(Identifier,str1)"];
"1000450" [label="(Identifier,channel)"];
"1000418" [label="(Identifier,ca)"];
"1000458" [label="(Identifier,target)"];
"1000445" [label="(Identifier,si)"];
"1000443" [label="(ControlStructure,else)"];
"1000440" [label="(Identifier,target)"];
"1000412" [label="(Identifier,target)"];
"1000363" [label="(Block,)"];
"1000389" [label="(Call,chanacs_find_host_literal(mc, target, 0))"];
"1000427" [label="(Block,)"];
"1000411" [label="(Call,target = sstrdup(mt->name))"];
"1000195" [label="(Call,target[0] == '+')"];
"1000428" [label="(Call,str1 = bitmask_to_flags2(ca->level, 0))"];
"1000442" [label="(Identifier,str1)"];
"1000455" [label="(Call,mc->name)"];
"1000452" [label="(Identifier,si)"];
"1000453" [label="(Identifier,CMDLOG_GET)"];
"1000438" [label="(Call,_(\"Flags for \2%s\2 in \2%s\2 are \2%s\2.\"))"];
"1000414" [label="(Call,mt->name)"];
"1001048" [label="(MethodReturn,static void)"];
"1000436" [label="(Identifier,si)"];
"1000446" [label="(Literal,\"\")"];
"1000449" [label="(Identifier,target)"];
"1000441" [label="(Identifier,channel)"];
"1000451" [label="(Call,logcommand(si, CMDLOG_GET, \"FLAGS: \2%s\2 on \2%s\2\", mc->name, target))"];
"1000411" -> "1000394"  [label="AST: "];
"1000411" -> "1000413"  [label="CFG: "];
"1000412" -> "1000411"  [label="AST: "];
"1000413" -> "1000411"  [label="AST: "];
"1000418" -> "1000411"  [label="CFG: "];
"1000411" -> "1001048"  [label="DDG: "];
"1000413" -> "1000411"  [label="DDG: "];
"1000411" -> "1000435"  [label="DDG: "];
"1000411" -> "1000444"  [label="DDG: "];
"1000413" -> "1000414"  [label="CFG: "];
"1000414" -> "1000413"  [label="AST: "];
"1000413" -> "1001048"  [label="DDG: "];
"1000435" -> "1000427"  [label="AST: "];
"1000435" -> "1000442"  [label="CFG: "];
"1000436" -> "1000435"  [label="AST: "];
"1000437" -> "1000435"  [label="AST: "];
"1000438" -> "1000435"  [label="AST: "];
"1000440" -> "1000435"  [label="AST: "];
"1000441" -> "1000435"  [label="AST: "];
"1000442" -> "1000435"  [label="AST: "];
"1000452" -> "1000435"  [label="CFG: "];
"1000435" -> "1001048"  [label="DDG: "];
"1000435" -> "1001048"  [label="DDG: "];
"1000435" -> "1001048"  [label="DDG: "];
"1000435" -> "1001048"  [label="DDG: "];
"1000177" -> "1000435"  [label="DDG: "];
"1000373" -> "1000435"  [label="DDG: "];
"1000107" -> "1000435"  [label="DDG: "];
"1000428" -> "1000435"  [label="DDG: "];
"1000438" -> "1000435"  [label="DDG: "];
"1000389" -> "1000435"  [label="DDG: "];
"1000195" -> "1000435"  [label="DDG: "];
"1000156" -> "1000435"  [label="DDG: "];
"1000435" -> "1000451"  [label="DDG: "];
"1000435" -> "1000451"  [label="DDG: "];
"1000451" -> "1000363"  [label="AST: "];
"1000451" -> "1000458"  [label="CFG: "];
"1000452" -> "1000451"  [label="AST: "];
"1000453" -> "1000451"  [label="AST: "];
"1000454" -> "1000451"  [label="AST: "];
"1000455" -> "1000451"  [label="AST: "];
"1000458" -> "1000451"  [label="AST: "];
"1000459" -> "1000451"  [label="CFG: "];
"1000451" -> "1001048"  [label="DDG: "];
"1000451" -> "1001048"  [label="DDG: "];
"1000451" -> "1001048"  [label="DDG: "];
"1000451" -> "1001048"  [label="DDG: "];
"1000451" -> "1001048"  [label="DDG: "];
"1000444" -> "1000451"  [label="DDG: "];
"1000444" -> "1000451"  [label="DDG: "];
"1000107" -> "1000451"  [label="DDG: "];
"1000195" -> "1000451"  [label="DDG: "];
"1000444" -> "1000443"  [label="AST: "];
"1000444" -> "1000450"  [label="CFG: "];
"1000445" -> "1000444"  [label="AST: "];
"1000446" -> "1000444"  [label="AST: "];
"1000447" -> "1000444"  [label="AST: "];
"1000449" -> "1000444"  [label="AST: "];
"1000450" -> "1000444"  [label="AST: "];
"1000452" -> "1000444"  [label="CFG: "];
"1000444" -> "1001048"  [label="DDG: "];
"1000444" -> "1001048"  [label="DDG: "];
"1000444" -> "1001048"  [label="DDG: "];
"1000177" -> "1000444"  [label="DDG: "];
"1000373" -> "1000444"  [label="DDG: "];
"1000107" -> "1000444"  [label="DDG: "];
"1000447" -> "1000444"  [label="DDG: "];
"1000389" -> "1000444"  [label="DDG: "];
"1000195" -> "1000444"  [label="DDG: "];
"1000156" -> "1000444"  [label="DDG: "];
}
