digraph "0_atheme_c597156adc60a45b5f827793cd420945f47bc03b_1@API" {
"1000662" [label="(Call,sstrdup(mt->name))"];
"1000660" [label="(Call,target = sstrdup(mt->name))"];
"1001010" [label="(Call,command_fail(si, fault_nochange, _(\"Channel access to \2%s\2 for \2%s\2 unchanged.\"), channel, target))"];
"1001023" [label="(Call,command_success_nodata(si, _(\"Flags \2%s\2 were set on \2%s\2 in \2%s\2.\"), flagstr, target, channel))"];
"1001030" [label="(Call,logcommand(si, CMDLOG_SET, \"FLAGS: \2%s\2 \2%s\2 \2%s\2\", mc->name, target, flagstr))"];
"1001042" [label="(Call,get_source_name(si))"];
"1001039" [label="(Call,verbose(mc, \"\2%s\2 set flags \2%s\2 on \2%s\2\", get_source_name(si), flagstr, target))"];
"1001046" [label="(Call,free(target))"];
"1000757" [label="(Call,command_fail(si, fault_toomany, _(\"\2%s\2 has too many channels registered.\"), mt->name))"];
"1000773" [label="(Call,command_fail(si, fault_toomany, _(\"\2%s\2 cannot take foundership of a channel.\"), mt->name))"];
"1000826" [label="(Call,command_fail(si, fault_noprivs, _(\"\2%s\2 does not wish to be added to channel access lists (NEVEROP set).\"), mt->name))"];
"1000880" [label="(Call,command_fail(si, fault_noprivs, _(\"You are not allowed to set \2%s\2 on \2%s\2 in \2%s\2.\"), bitmask_to_flags2(addflags, removeflags), mt->name, mc->name))"];
"1001017" [label="(Return,return;)"];
"1000883" [label="(Call,_(\"You are not allowed to set \2%s\2 on \2%s\2 in \2%s\2.\"))"];
"1000762" [label="(Call,mt->name)"];
"1001018" [label="(Call,flagstr = bitmask_to_flags2(addflags, removeflags))"];
"1000759" [label="(Identifier,fault_toomany)"];
"1001025" [label="(Call,_(\"Flags \2%s\2 were set on \2%s\2 in \2%s\2.\"))"];
"1000667" [label="(Identifier,ca)"];
"1001010" [label="(Call,command_fail(si, fault_nochange, _(\"Channel access to \2%s\2 for \2%s\2 unchanged.\"), channel, target))"];
"1000156" [label="(Call,mychan_find(channel))"];
"1001041" [label="(Literal,\"\2%s\2 set flags \2%s\2 on \2%s\2\")"];
"1000773" [label="(Call,command_fail(si, fault_toomany, _(\"\2%s\2 cannot take foundership of a channel.\"), mt->name))"];
"1000895" [label="(Identifier,ca)"];
"1001034" [label="(Call,mc->name)"];
"1001033" [label="(Literal,\"FLAGS: \2%s\2 \2%s\2 \2%s\2\")"];
"1001040" [label="(Identifier,mc)"];
"1000774" [label="(Identifier,si)"];
"1001045" [label="(Identifier,target)"];
"1001030" [label="(Call,logcommand(si, CMDLOG_SET, \"FLAGS: \2%s\2 \2%s\2 \2%s\2\", mc->name, target, flagstr))"];
"1001043" [label="(Identifier,si)"];
"1000825" [label="(Block,)"];
"1000711" [label="(Call,mychan_num_founders(mc))"];
"1000880" [label="(Call,command_fail(si, fault_noprivs, _(\"You are not allowed to set \2%s\2 on \2%s\2 in \2%s\2.\"), bitmask_to_flags2(addflags, removeflags), mt->name, mc->name))"];
"1000924" [label="(Call,chanacs_open(mc, NULL, target, true, entity(si->smu)))"];
"1001046" [label="(Call,free(target))"];
"1001038" [label="(Identifier,flagstr)"];
"1000760" [label="(Call,_(\"\2%s\2 has too many channels registered.\"))"];
"1000782" [label="(Identifier,ca)"];
"1000772" [label="(Block,)"];
"1001044" [label="(Identifier,flagstr)"];
"1000827" [label="(Identifier,si)"];
"1000668" [label="(Call,chanacs_open(mc, mt, NULL, true, entity(si->smu)))"];
"1000107" [label="(MethodParameterIn,sourceinfo_t *si)"];
"1000776" [label="(Call,_(\"\2%s\2 cannot take foundership of a channel.\"))"];
"1000828" [label="(Identifier,fault_noprivs)"];
"1000891" [label="(Call,mc->name)"];
"1000660" [label="(Call,target = sstrdup(mt->name))"];
"1000881" [label="(Identifier,si)"];
"1000831" [label="(Call,mt->name)"];
"1001013" [label="(Call,_(\"Channel access to \2%s\2 for \2%s\2 unchanged.\"))"];
"1000835" [label="(Identifier,ca)"];
"1000879" [label="(Block,)"];
"1001042" [label="(Call,get_source_name(si))"];
"1000661" [label="(Identifier,target)"];
"1001039" [label="(Call,verbose(mc, \"\2%s\2 set flags \2%s\2 on \2%s\2\", get_source_name(si), flagstr, target))"];
"1000888" [label="(Call,mt->name)"];
"1001032" [label="(Identifier,CMDLOG_SET)"];
"1001023" [label="(Call,command_success_nodata(si, _(\"Flags \2%s\2 were set on \2%s\2 in \2%s\2.\"), flagstr, target, channel))"];
"1000110" [label="(Block,)"];
"1000882" [label="(Identifier,fault_noprivs)"];
"1000885" [label="(Call,bitmask_to_flags2(addflags, removeflags))"];
"1001028" [label="(Identifier,target)"];
"1000195" [label="(Call,target[0] == '+')"];
"1001011" [label="(Identifier,si)"];
"1000346" [label="(Block,)"];
"1000462" [label="(Call,chanacs_source_flags(mc, si))"];
"1000778" [label="(Call,mt->name)"];
"1000775" [label="(Identifier,fault_toomany)"];
"1001027" [label="(Identifier,flagstr)"];
"1000735" [label="(Call,mychan_num_founders(mc))"];
"1000829" [label="(Call,_(\"\2%s\2 does not wish to be added to channel access lists (NEVEROP set).\"))"];
"1000826" [label="(Call,command_fail(si, fault_noprivs, _(\"\2%s\2 does not wish to be added to channel access lists (NEVEROP set).\"), mt->name))"];
"1001047" [label="(Identifier,target)"];
"1000663" [label="(Call,mt->name)"];
"1000756" [label="(Block,)"];
"1000758" [label="(Identifier,si)"];
"1001016" [label="(Identifier,target)"];
"1001048" [label="(MethodReturn,static void)"];
"1000643" [label="(Block,)"];
"1001029" [label="(Identifier,channel)"];
"1001024" [label="(Identifier,si)"];
"1001031" [label="(Identifier,si)"];
"1001009" [label="(Block,)"];
"1001037" [label="(Identifier,target)"];
"1001012" [label="(Identifier,fault_nochange)"];
"1001015" [label="(Identifier,channel)"];
"1000662" [label="(Call,sstrdup(mt->name))"];
"1000757" [label="(Call,command_fail(si, fault_toomany, _(\"\2%s\2 has too many channels registered.\"), mt->name))"];
"1000766" [label="(Identifier,ca)"];
"1000662" -> "1000660"  [label="AST: "];
"1000662" -> "1000663"  [label="CFG: "];
"1000663" -> "1000662"  [label="AST: "];
"1000660" -> "1000662"  [label="CFG: "];
"1000662" -> "1001048"  [label="DDG: "];
"1000662" -> "1000660"  [label="DDG: "];
"1000662" -> "1000757"  [label="DDG: "];
"1000662" -> "1000773"  [label="DDG: "];
"1000662" -> "1000826"  [label="DDG: "];
"1000662" -> "1000880"  [label="DDG: "];
"1000660" -> "1000643"  [label="AST: "];
"1000661" -> "1000660"  [label="AST: "];
"1000667" -> "1000660"  [label="CFG: "];
"1000660" -> "1001048"  [label="DDG: "];
"1000660" -> "1001048"  [label="DDG: "];
"1000660" -> "1001010"  [label="DDG: "];
"1000660" -> "1001023"  [label="DDG: "];
"1001010" -> "1001009"  [label="AST: "];
"1001010" -> "1001016"  [label="CFG: "];
"1001011" -> "1001010"  [label="AST: "];
"1001012" -> "1001010"  [label="AST: "];
"1001013" -> "1001010"  [label="AST: "];
"1001015" -> "1001010"  [label="AST: "];
"1001016" -> "1001010"  [label="AST: "];
"1001017" -> "1001010"  [label="CFG: "];
"1001010" -> "1001048"  [label="DDG: "];
"1001010" -> "1001048"  [label="DDG: "];
"1001010" -> "1001048"  [label="DDG: "];
"1001010" -> "1001048"  [label="DDG: "];
"1001010" -> "1001048"  [label="DDG: "];
"1001010" -> "1001048"  [label="DDG: "];
"1000462" -> "1001010"  [label="DDG: "];
"1000107" -> "1001010"  [label="DDG: "];
"1001013" -> "1001010"  [label="DDG: "];
"1000156" -> "1001010"  [label="DDG: "];
"1000924" -> "1001010"  [label="DDG: "];
"1000195" -> "1001010"  [label="DDG: "];
"1001023" -> "1000346"  [label="AST: "];
"1001023" -> "1001029"  [label="CFG: "];
"1001024" -> "1001023"  [label="AST: "];
"1001025" -> "1001023"  [label="AST: "];
"1001027" -> "1001023"  [label="AST: "];
"1001028" -> "1001023"  [label="AST: "];
"1001029" -> "1001023"  [label="AST: "];
"1001031" -> "1001023"  [label="CFG: "];
"1001023" -> "1001048"  [label="DDG: "];
"1001023" -> "1001048"  [label="DDG: "];
"1001023" -> "1001048"  [label="DDG: "];
"1000462" -> "1001023"  [label="DDG: "];
"1000107" -> "1001023"  [label="DDG: "];
"1001025" -> "1001023"  [label="DDG: "];
"1001018" -> "1001023"  [label="DDG: "];
"1000924" -> "1001023"  [label="DDG: "];
"1000195" -> "1001023"  [label="DDG: "];
"1000156" -> "1001023"  [label="DDG: "];
"1001023" -> "1001030"  [label="DDG: "];
"1001023" -> "1001030"  [label="DDG: "];
"1001023" -> "1001030"  [label="DDG: "];
"1001030" -> "1000346"  [label="AST: "];
"1001030" -> "1001038"  [label="CFG: "];
"1001031" -> "1001030"  [label="AST: "];
"1001032" -> "1001030"  [label="AST: "];
"1001033" -> "1001030"  [label="AST: "];
"1001034" -> "1001030"  [label="AST: "];
"1001037" -> "1001030"  [label="AST: "];
"1001038" -> "1001030"  [label="AST: "];
"1001040" -> "1001030"  [label="CFG: "];
"1001030" -> "1001048"  [label="DDG: "];
"1001030" -> "1001048"  [label="DDG: "];
"1001030" -> "1001048"  [label="DDG: "];
"1000107" -> "1001030"  [label="DDG: "];
"1000195" -> "1001030"  [label="DDG: "];
"1001030" -> "1001042"  [label="DDG: "];
"1001030" -> "1001039"  [label="DDG: "];
"1001030" -> "1001039"  [label="DDG: "];
"1001042" -> "1001039"  [label="AST: "];
"1001042" -> "1001043"  [label="CFG: "];
"1001043" -> "1001042"  [label="AST: "];
"1001044" -> "1001042"  [label="CFG: "];
"1001042" -> "1001048"  [label="DDG: "];
"1001042" -> "1001039"  [label="DDG: "];
"1000107" -> "1001042"  [label="DDG: "];
"1001039" -> "1000346"  [label="AST: "];
"1001039" -> "1001045"  [label="CFG: "];
"1001040" -> "1001039"  [label="AST: "];
"1001041" -> "1001039"  [label="AST: "];
"1001044" -> "1001039"  [label="AST: "];
"1001045" -> "1001039"  [label="AST: "];
"1001047" -> "1001039"  [label="CFG: "];
"1001039" -> "1001048"  [label="DDG: "];
"1001039" -> "1001048"  [label="DDG: "];
"1001039" -> "1001048"  [label="DDG: "];
"1001039" -> "1001048"  [label="DDG: "];
"1000711" -> "1001039"  [label="DDG: "];
"1000924" -> "1001039"  [label="DDG: "];
"1000668" -> "1001039"  [label="DDG: "];
"1000735" -> "1001039"  [label="DDG: "];
"1000195" -> "1001039"  [label="DDG: "];
"1001039" -> "1001046"  [label="DDG: "];
"1001046" -> "1000110"  [label="AST: "];
"1001046" -> "1001047"  [label="CFG: "];
"1001047" -> "1001046"  [label="AST: "];
"1001048" -> "1001046"  [label="CFG: "];
"1001046" -> "1001048"  [label="DDG: "];
"1000195" -> "1001046"  [label="DDG: "];
"1000757" -> "1000756"  [label="AST: "];
"1000757" -> "1000762"  [label="CFG: "];
"1000758" -> "1000757"  [label="AST: "];
"1000759" -> "1000757"  [label="AST: "];
"1000760" -> "1000757"  [label="AST: "];
"1000762" -> "1000757"  [label="AST: "];
"1000766" -> "1000757"  [label="CFG: "];
"1000757" -> "1001048"  [label="DDG: "];
"1000757" -> "1001048"  [label="DDG: "];
"1000757" -> "1001048"  [label="DDG: "];
"1000757" -> "1001048"  [label="DDG: "];
"1000757" -> "1001048"  [label="DDG: "];
"1000462" -> "1000757"  [label="DDG: "];
"1000107" -> "1000757"  [label="DDG: "];
"1000760" -> "1000757"  [label="DDG: "];
"1000773" -> "1000772"  [label="AST: "];
"1000773" -> "1000778"  [label="CFG: "];
"1000774" -> "1000773"  [label="AST: "];
"1000775" -> "1000773"  [label="AST: "];
"1000776" -> "1000773"  [label="AST: "];
"1000778" -> "1000773"  [label="AST: "];
"1000782" -> "1000773"  [label="CFG: "];
"1000773" -> "1001048"  [label="DDG: "];
"1000773" -> "1001048"  [label="DDG: "];
"1000773" -> "1001048"  [label="DDG: "];
"1000773" -> "1001048"  [label="DDG: "];
"1000773" -> "1001048"  [label="DDG: "];
"1000462" -> "1000773"  [label="DDG: "];
"1000107" -> "1000773"  [label="DDG: "];
"1000776" -> "1000773"  [label="DDG: "];
"1000826" -> "1000825"  [label="AST: "];
"1000826" -> "1000831"  [label="CFG: "];
"1000827" -> "1000826"  [label="AST: "];
"1000828" -> "1000826"  [label="AST: "];
"1000829" -> "1000826"  [label="AST: "];
"1000831" -> "1000826"  [label="AST: "];
"1000835" -> "1000826"  [label="CFG: "];
"1000826" -> "1001048"  [label="DDG: "];
"1000826" -> "1001048"  [label="DDG: "];
"1000826" -> "1001048"  [label="DDG: "];
"1000826" -> "1001048"  [label="DDG: "];
"1000826" -> "1001048"  [label="DDG: "];
"1000462" -> "1000826"  [label="DDG: "];
"1000107" -> "1000826"  [label="DDG: "];
"1000829" -> "1000826"  [label="DDG: "];
"1000880" -> "1000879"  [label="AST: "];
"1000880" -> "1000891"  [label="CFG: "];
"1000881" -> "1000880"  [label="AST: "];
"1000882" -> "1000880"  [label="AST: "];
"1000883" -> "1000880"  [label="AST: "];
"1000885" -> "1000880"  [label="AST: "];
"1000888" -> "1000880"  [label="AST: "];
"1000891" -> "1000880"  [label="AST: "];
"1000895" -> "1000880"  [label="CFG: "];
"1000880" -> "1001048"  [label="DDG: "];
"1000880" -> "1001048"  [label="DDG: "];
"1000880" -> "1001048"  [label="DDG: "];
"1000880" -> "1001048"  [label="DDG: "];
"1000880" -> "1001048"  [label="DDG: "];
"1000880" -> "1001048"  [label="DDG: "];
"1000880" -> "1001048"  [label="DDG: "];
"1000462" -> "1000880"  [label="DDG: "];
"1000107" -> "1000880"  [label="DDG: "];
"1000883" -> "1000880"  [label="DDG: "];
"1000885" -> "1000880"  [label="DDG: "];
"1000885" -> "1000880"  [label="DDG: "];
}
