digraph "0_exim_5b7a7c051c9ab9ee7c924a611f90ef2be03e0ad0@API" {
"1000164" [label="(Call,string_sprintf(\"${domain:${extract{1}{:}{${addresses:%s}}}}\",\n                             from_header->text))"];
"1000163" [label="(Call,expand_string(\n                           string_sprintf(\"${domain:${extract{1}{:}{${addresses:%s}}}}\",\n                             from_header->text) ))"];
"1000161" [label="(Call,header_from_sender = expand_string(\n                           string_sprintf(\"${domain:${extract{1}{:}{${addresses:%s}}}}\",\n                             from_header->text) ))"];
"1000179" [label="(Call,opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000172" [label="(Call,libdm_status = (dmarc_abort == TRUE) ?\n                  DMARC_PARSE_OKAY :\n                  opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000183" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000193" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000187" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to store header From: in DMARC: %s, header was '%s'\",\n                           opendmarc_policy_status_to_str(libdm_status), from_header->text))"];
"1000494" [label="(Call,debug_printf(\"DMARC skipping (%d), unsure what to do with %s\",\n                        libdm_status, from_header->text))"];
"1000492" [label="(Call,(D_receive)\n          debug_printf(\"DMARC skipping (%d), unsure what to do with %s\",\n                        libdm_status, from_header->text))"];
"1000394" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000406" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000397" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to store dkim (%s) for DMARC: %s\",\n        \t\t     sig->domain, opendmarc_policy_status_to_str(libdm_status)))"];
"1000448" [label="(Call,string_sprintf(\"%sdkim %s %d\n\", dkim_history_buffer,\n                                                             sig->domain, dkim_ares_result))"];
"1000388" [label="(Call,debug_printf(\"DMARC adding DKIM sender domain = %s\n\", sig->domain))"];
"1000386" [label="(Call,(D_receive)\n        debug_printf(\"DMARC adding DKIM sender domain = %s\n\", sig->domain))"];
"1000446" [label="(Call,dkim_history_buffer = string_sprintf(\"%sdkim %s %d\n\", dkim_history_buffer,\n                                                             sig->domain, dkim_ares_result))"];
"1000528" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000538" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000532" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to read domainname used for DMARC lookup: %s\",\n                                       opendmarc_policy_status_to_str(libdm_status)))"];
"1000615" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000625" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000619" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to read DMARC alignment: %s\",\n                                       opendmarc_policy_status_to_str(libdm_status)))"];
"1000334" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000343" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000337" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to store spf for DMARC: %s\",\n                             opendmarc_policy_status_to_str(libdm_status)))"];
"1000174" [label="(Call,(dmarc_abort == TRUE) ?\n                  DMARC_PARSE_OKAY :\n                  opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000327" [label="(Call,opendmarc_policy_store_spf(dmarc_pctx, spf_sender_domain,\n                                                dmarc_spf_result, origin, spf_human_readable))"];
"1000325" [label="(Call,libdm_status = opendmarc_policy_store_spf(dmarc_pctx, spf_sender_domain,\n                                                dmarc_spf_result, origin, spf_human_readable))"];
"1000515" [label="(Call,opendmarc_policy_fetch_utilized_domain(dmarc_pctx, dmarc_domain,\n        \t                                          DMARC_MAXHOSTNAMELEN-1))"];
"1000513" [label="(Call,libdm_status = opendmarc_policy_fetch_utilized_domain(dmarc_pctx, dmarc_domain,\n        \t                                          DMARC_MAXHOSTNAMELEN-1))"];
"1000523" [label="(Call,string_copy(dmarc_domain))"];
"1000521" [label="(Call,dmarc_used_domain = string_copy(dmarc_domain))"];
"1000632" [label="(Call,log_write(0, LOG_MAIN, \"DMARC results: spf_domain=%s dmarc_domain=%s \"\n                             \"spf_align=%s dkim_align=%s enforcement='%s'\",\n                             spf_sender_domain, dmarc_used_domain,\n                             (sa==DMARC_POLICY_SPF_ALIGNMENT_PASS) ?\"yes\":\"no\",\n                             (da==DMARC_POLICY_DKIM_ALIGNMENT_PASS)?\"yes\":\"no\",\n                             dmarc_status_text))"];
"1000525" [label="(Call,free(dmarc_domain))"];
"1000542" [label="(Call,opendmarc_get_policy_to_enforce(dmarc_pctx))"];
"1000540" [label="(Call,libdm_status = opendmarc_get_policy_to_enforce(dmarc_pctx))"];
"1000544" [label="(Call,dmarc_policy = libdm_status)"];
"1000608" [label="(Call,opendmarc_policy_fetch_alignment(dmarc_pctx, &da, &sa))"];
"1000606" [label="(Call,libdm_status = opendmarc_policy_fetch_alignment(dmarc_pctx, &da, &sa))"];
"1000656" [label="(Call,opendmarc_policy_fetch_ruf(dmarc_pctx, NULL, 0, 1))"];
"1000654" [label="(Call,ruf = opendmarc_policy_fetch_ruf(dmarc_pctx, NULL, 0, 1))"];
"1000661" [label="(Call,dmarc_send_forensic_report(ruf))"];
"1000467" [label="(Call,debug_printf(\"DMARC no record found for %s\n\", header_from_sender))"];
"1000465" [label="(Call,(D_receive)\n          debug_printf(\"DMARC no record found for %s\n\", header_from_sender))"];
"1000477" [label="(Call,debug_printf(\"DMARC record found for %s\n\", header_from_sender))"];
"1000475" [label="(Call,(D_receive)\n          debug_printf(\"DMARC record found for %s\n\", header_from_sender))"];
"1000484" [label="(Call,debug_printf(\"DMARC record parse error for %s\n\", header_from_sender))"];
"1000482" [label="(Call,(D_receive)\n          debug_printf(\"DMARC record parse error for %s\n\", header_from_sender))"];
"1000607" [label="(Identifier,libdm_status)"];
"1000325" [label="(Call,libdm_status = opendmarc_policy_store_spf(dmarc_pctx, spf_sender_domain,\n                                                dmarc_spf_result, origin, spf_human_readable))"];
"1000501" [label="(Identifier,has_dmarc_record)"];
"1000448" [label="(Call,string_sprintf(\"%sdkim %s %d\n\", dkim_history_buffer,\n                                                             sig->domain, dkim_ares_result))"];
"1000471" [label="(Identifier,has_dmarc_record)"];
"1000221" [label="(Call,debug_printf(\"DMARC using synthesized SPF sender domain = %s\n\", spf_sender_domain))"];
"1000179" [label="(Call,opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000335" [label="(Identifier,libdm_status)"];
"1000484" [label="(Call,debug_printf(\"DMARC record parse error for %s\n\", header_from_sender))"];
"1000467" [label="(Call,debug_printf(\"DMARC no record found for %s\n\", header_from_sender))"];
"1000494" [label="(Call,debug_printf(\"DMARC skipping (%d), unsure what to do with %s\",\n                        libdm_status, from_header->text))"];
"1000488" [label="(Identifier,has_dmarc_record)"];
"1000193" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000165" [label="(Literal,\"${domain:${extract{1}{:}{${addresses:%s}}}}\")"];
"1000620" [label="(Literal,0)"];
"1000174" [label="(Call,(dmarc_abort == TRUE) ?\n                  DMARC_PARSE_OKAY :\n                  opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000537" [label="(Literal,\"failure to read domainname used for DMARC lookup: %s\")"];
"1000659" [label="(Literal,0)"];
"1000230" [label="(Call,origin = DMARC_POLICY_SPF_ORIGIN_HELO)"];
"1000626" [label="(Identifier,libdm_status)"];
"1000632" [label="(Call,log_write(0, LOG_MAIN, \"DMARC results: spf_domain=%s dmarc_domain=%s \"\n                             \"spf_align=%s dkim_align=%s enforcement='%s'\",\n                             spf_sender_domain, dmarc_used_domain,\n                             (sa==DMARC_POLICY_SPF_ALIGNMENT_PASS) ?\"yes\":\"no\",\n                             (da==DMARC_POLICY_DKIM_ALIGNMENT_PASS)?\"yes\":\"no\",\n                             dmarc_status_text))"];
"1000635" [label="(Literal,\"DMARC results: spf_domain=%s dmarc_domain=%s \"\n                             \"spf_align=%s dkim_align=%s enforcement='%s'\")"];
"1000469" [label="(Identifier,header_from_sender)"];
"1000662" [label="(Identifier,ruf)"];
"1000486" [label="(Identifier,header_from_sender)"];
"1000339" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000541" [label="(Identifier,libdm_status)"];
"1000525" [label="(Call,free(dmarc_domain))"];
"1000343" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000534" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000185" [label="(Identifier,DMARC_PARSE_OKAY)"];
"1000194" [label="(Identifier,libdm_status)"];
"1000462" [label="(Block,)"];
"1000173" [label="(Identifier,libdm_status)"];
"1000389" [label="(Literal,\"DMARC adding DKIM sender domain = %s\n\")"];
"1000182" [label="(ControlStructure,if (libdm_status != DMARC_PARSE_OKAY))"];
"1000656" [label="(Call,opendmarc_policy_fetch_ruf(dmarc_pctx, NULL, 0, 1))"];
"1000162" [label="(Identifier,header_from_sender)"];
"1000532" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to read domainname used for DMARC lookup: %s\",\n                                       opendmarc_policy_status_to_str(libdm_status)))"];
"1000402" [label="(Literal,\"failure to store dkim (%s) for DMARC: %s\")"];
"1000492" [label="(Call,(D_receive)\n          debug_printf(\"DMARC skipping (%d), unsure what to do with %s\",\n                        libdm_status, from_header->text))"];
"1000625" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000456" [label="(Identifier,sig)"];
"1000619" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to read DMARC alignment: %s\",\n                                       opendmarc_policy_status_to_str(libdm_status)))"];
"1000614" [label="(ControlStructure,if (libdm_status != DMARC_PARSE_OKAY))"];
"1000660" [label="(Literal,1)"];
"1000527" [label="(ControlStructure,if (libdm_status != DMARC_PARSE_OKAY))"];
"1000495" [label="(Literal,\"DMARC skipping (%d), unsure what to do with %s\")"];
"1000454" [label="(Identifier,dkim_ares_result)"];
"1000394" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000465" [label="(Call,(D_receive)\n          debug_printf(\"DMARC no record found for %s\n\", header_from_sender))"];
"1000388" [label="(Call,debug_printf(\"DMARC adding DKIM sender domain = %s\n\", sig->domain))"];
"1000637" [label="(Identifier,dmarc_used_domain)"];
"1000542" [label="(Call,opendmarc_get_policy_to_enforce(dmarc_pctx))"];
"1000496" [label="(Identifier,libdm_status)"];
"1000160" [label="(Block,)"];
"1000390" [label="(Call,sig->domain)"];
"1000517" [label="(Identifier,dmarc_domain)"];
"1000661" [label="(Call,dmarc_send_forensic_report(ruf))"];
"1000531" [label="(Block,)"];
"1000515" [label="(Call,opendmarc_policy_fetch_utilized_domain(dmarc_pctx, dmarc_domain,\n        \t                                          DMARC_MAXHOSTNAMELEN-1))"];
"1000617" [label="(Identifier,DMARC_PARSE_OKAY)"];
"1000523" [label="(Call,string_copy(dmarc_domain))"];
"1000338" [label="(Literal,0)"];
"1000346" [label="(Identifier,sig)"];
"1000618" [label="(Block,)"];
"1000396" [label="(Identifier,DMARC_PARSE_OKAY)"];
"1000161" [label="(Call,header_from_sender = expand_string(\n                           string_sprintf(\"${domain:${extract{1}{:}{${addresses:%s}}}}\",\n                             from_header->text) ))"];
"1000449" [label="(Literal,\"%sdkim %s %d\n\")"];
"1000196" [label="(Identifier,from_header)"];
"1000181" [label="(Identifier,header_from_sender)"];
"1000655" [label="(Identifier,ruf)"];
"1000195" [label="(Call,from_header->text)"];
"1000164" [label="(Call,string_sprintf(\"${domain:${extract{1}{:}{${addresses:%s}}}}\",\n                             from_header->text))"];
"1000477" [label="(Call,debug_printf(\"DMARC record found for %s\n\", header_from_sender))"];
"1000403" [label="(Call,sig->domain)"];
"1000616" [label="(Identifier,libdm_status)"];
"1000654" [label="(Call,ruf = opendmarc_policy_fetch_ruf(dmarc_pctx, NULL, 0, 1))"];
"1000544" [label="(Call,dmarc_policy = libdm_status)"];
"1000539" [label="(Identifier,libdm_status)"];
"1000203" [label="(Identifier,spf_response)"];
"1000334" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000170" [label="(Identifier,dmarc_abort)"];
"1000624" [label="(Literal,\"failure to read DMARC alignment: %s\")"];
"1000192" [label="(Literal,\"failure to store header From: in DMARC: %s, header was '%s'\")"];
"1000608" [label="(Call,opendmarc_policy_fetch_alignment(dmarc_pctx, &da, &sa))"];
"1000514" [label="(Identifier,libdm_status)"];
"1000482" [label="(Call,(D_receive)\n          debug_printf(\"DMARC record parse error for %s\n\", header_from_sender))"];
"1000330" [label="(Identifier,dmarc_spf_result)"];
"1000450" [label="(Identifier,dkim_history_buffer)"];
"1000658" [label="(Identifier,NULL)"];
"1000180" [label="(Identifier,dmarc_pctx)"];
"1000344" [label="(Identifier,libdm_status)"];
"1000629" [label="(Identifier,has_dmarc_record)"];
"1000610" [label="(Call,&da)"];
"1000521" [label="(Call,dmarc_used_domain = string_copy(dmarc_domain))"];
"1000634" [label="(Identifier,LOG_MAIN)"];
"1000530" [label="(Identifier,DMARC_PARSE_OKAY)"];
"1000609" [label="(Identifier,dmarc_pctx)"];
"1000214" [label="(Call,log_write(0, LOG_MAIN, \"DMARC using synthesized SPF sender domain = %s\n\",\n                               spf_sender_domain))"];
"1000633" [label="(Literal,0)"];
"1000408" [label="(Call,dkim_ares_result = ( vs == PDKIM_VERIFY_PASS )    ? ARES_RESULT_PASS :\n        \t              ( vs == PDKIM_VERIFY_FAIL )    ? ARES_RESULT_FAIL :\n        \t              ( vs == PDKIM_VERIFY_NONE )    ? ARES_RESULT_NONE :\n        \t              ( vs == PDKIM_VERIFY_INVALID ) ?\n                           ( ves == PDKIM_VERIFY_INVALID_PUBKEY_UNAVAILABLE ? ARES_RESULT_PERMERROR :\n                             ves == PDKIM_VERIFY_INVALID_BUFFER_SIZE        ? ARES_RESULT_PERMERROR :\n                             ves == PDKIM_VERIFY_INVALID_PUBKEY_PARSING     ? ARES_RESULT_PERMERROR :\n                             ARES_RESULT_UNKNOWN ) :\n                          ARES_RESULT_UNKNOWN)"];
"1000332" [label="(Identifier,spf_human_readable)"];
"1000657" [label="(Identifier,dmarc_pctx)"];
"1000526" [label="(Identifier,dmarc_domain)"];
"1000650" [label="(Identifier,dmarc_status_text)"];
"1000314" [label="(Call,debug_printf(\"DMARC using SPF sender domain = %s\n\", spf_sender_domain))"];
"1000326" [label="(Identifier,libdm_status)"];
"1000120" [label="(Block,)"];
"1000524" [label="(Identifier,dmarc_domain)"];
"1000538" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000189" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000305" [label="(Call,spf_human_readable = (uschar *)spf_response->header_comment)"];
"1000528" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000497" [label="(Call,from_header->text)"];
"1000163" [label="(Call,expand_string(\n                           string_sprintf(\"${domain:${extract{1}{:}{${addresses:%s}}}}\",\n                             from_header->text) ))"];
"1000327" [label="(Call,opendmarc_policy_store_spf(dmarc_pctx, spf_sender_domain,\n                                                dmarc_spf_result, origin, spf_human_readable))"];
"1000302" [label="(Call,origin = DMARC_POLICY_SPF_ORIGIN_MAILFROM)"];
"1000615" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000606" [label="(Call,libdm_status = opendmarc_policy_fetch_alignment(dmarc_pctx, &da, &sa))"];
"1000621" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000336" [label="(Identifier,DMARC_PARSE_OKAY)"];
"1000328" [label="(Identifier,dmarc_pctx)"];
"1000342" [label="(Literal,\"failure to store spf for DMARC: %s\")"];
"1000644" [label="(Call,(da==DMARC_POLICY_DKIM_ALIGNMENT_PASS)?\"yes\":\"no\")"];
"1000485" [label="(Literal,\"DMARC record parse error for %s\n\")"];
"1000337" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to store spf for DMARC: %s\",\n                             opendmarc_policy_status_to_str(libdm_status)))"];
"1000353" [label="(Block,)"];
"1000516" [label="(Identifier,dmarc_pctx)"];
"1000398" [label="(Literal,0)"];
"1000183" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000397" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to store dkim (%s) for DMARC: %s\",\n        \t\t     sig->domain, opendmarc_policy_status_to_str(libdm_status)))"];
"1000451" [label="(Call,sig->domain)"];
"1000386" [label="(Call,(D_receive)\n        debug_printf(\"DMARC adding DKIM sender domain = %s\n\", sig->domain))"];
"1000612" [label="(Call,&sa)"];
"1000447" [label="(Identifier,dkim_history_buffer)"];
"1000631" [label="(Block,)"];
"1000406" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000350" [label="(Call,sig != NULL)"];
"1000638" [label="(Call,(sa==DMARC_POLICY_SPF_ALIGNMENT_PASS) ?\"yes\":\"no\")"];
"1000241" [label="(Call,dmarc_spf_result = (sr == SPF_RESULT_NEUTRAL)  ? DMARC_POLICY_SPF_OUTCOME_NONE :\n                         (sr == SPF_RESULT_PASS)     ? DMARC_POLICY_SPF_OUTCOME_PASS :\n                         (sr == SPF_RESULT_FAIL)     ? DMARC_POLICY_SPF_OUTCOME_FAIL :\n                         (sr == SPF_RESULT_SOFTFAIL) ? DMARC_POLICY_SPF_OUTCOME_TMPFAIL :\n                         DMARC_POLICY_SPF_OUTCOME_NONE)"];
"1000540" [label="(Call,libdm_status = opendmarc_get_policy_to_enforce(dmarc_pctx))"];
"1000166" [label="(Call,from_header->text)"];
"1000186" [label="(Block,)"];
"1000543" [label="(Identifier,dmarc_pctx)"];
"1000184" [label="(Identifier,libdm_status)"];
"1000518" [label="(Call,DMARC_MAXHOSTNAMELEN-1)"];
"1000479" [label="(Identifier,header_from_sender)"];
"1000333" [label="(ControlStructure,if (libdm_status != DMARC_PARSE_OKAY))"];
"1000329" [label="(Identifier,spf_sender_domain)"];
"1000172" [label="(Call,libdm_status = (dmarc_abort == TRUE) ?\n                  DMARC_PARSE_OKAY :\n                  opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000224" [label="(Call,dmarc_spf_result = DMARC_POLICY_SPF_OUTCOME_NONE)"];
"1000548" [label="(Identifier,libdm_status)"];
"1000393" [label="(ControlStructure,if (libdm_status != DMARC_PARSE_OKAY))"];
"1000545" [label="(Identifier,dmarc_policy)"];
"1000636" [label="(Identifier,spf_sender_domain)"];
"1000513" [label="(Call,libdm_status = opendmarc_policy_fetch_utilized_domain(dmarc_pctx, dmarc_domain,\n        \t                                          DMARC_MAXHOSTNAMELEN-1))"];
"1000178" [label="(Identifier,DMARC_PARSE_OKAY)"];
"1000478" [label="(Literal,\"DMARC record found for %s\n\")"];
"1000522" [label="(Identifier,dmarc_used_domain)"];
"1000475" [label="(Call,(D_receive)\n          debug_printf(\"DMARC record found for %s\n\", header_from_sender))"];
"1000199" [label="(Identifier,dmarc_abort)"];
"1000446" [label="(Call,dkim_history_buffer = string_sprintf(\"%sdkim %s %d\n\", dkim_history_buffer,\n                                                             sig->domain, dkim_ares_result))"];
"1000399" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000188" [label="(Literal,0)"];
"1000409" [label="(Identifier,dkim_ares_result)"];
"1000187" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to store header From: in DMARC: %s, header was '%s'\",\n                           opendmarc_policy_status_to_str(libdm_status), from_header->text))"];
"1000533" [label="(Literal,0)"];
"1000652" [label="(Identifier,history_file_status)"];
"1000505" [label="(Call,*dmarc_domain = (uschar *)calloc(DMARC_MAXHOSTNAMELEN, sizeof(uschar)))"];
"1000207" [label="(Call,spf_sender_domain == NULL)"];
"1000546" [label="(Identifier,libdm_status)"];
"1000175" [label="(Call,dmarc_abort == TRUE)"];
"1000331" [label="(Identifier,origin)"];
"1000468" [label="(Literal,\"DMARC no record found for %s\n\")"];
"1000395" [label="(Identifier,libdm_status)"];
"1000480" [label="(ControlStructure,break;)"];
"1000407" [label="(Identifier,libdm_status)"];
"1000529" [label="(Identifier,libdm_status)"];
"1000324" [label="(Block,)"];
"1000663" [label="(MethodReturn,int)"];
"1000164" -> "1000163"  [label="AST: "];
"1000164" -> "1000166"  [label="CFG: "];
"1000165" -> "1000164"  [label="AST: "];
"1000166" -> "1000164"  [label="AST: "];
"1000163" -> "1000164"  [label="CFG: "];
"1000164" -> "1000663"  [label="DDG: "];
"1000164" -> "1000163"  [label="DDG: "];
"1000164" -> "1000163"  [label="DDG: "];
"1000164" -> "1000187"  [label="DDG: "];
"1000164" -> "1000494"  [label="DDG: "];
"1000163" -> "1000161"  [label="AST: "];
"1000161" -> "1000163"  [label="CFG: "];
"1000163" -> "1000663"  [label="DDG: "];
"1000163" -> "1000161"  [label="DDG: "];
"1000161" -> "1000160"  [label="AST: "];
"1000162" -> "1000161"  [label="AST: "];
"1000170" -> "1000161"  [label="CFG: "];
"1000161" -> "1000663"  [label="DDG: "];
"1000161" -> "1000663"  [label="DDG: "];
"1000161" -> "1000179"  [label="DDG: "];
"1000161" -> "1000467"  [label="DDG: "];
"1000161" -> "1000477"  [label="DDG: "];
"1000161" -> "1000484"  [label="DDG: "];
"1000179" -> "1000174"  [label="AST: "];
"1000179" -> "1000181"  [label="CFG: "];
"1000180" -> "1000179"  [label="AST: "];
"1000181" -> "1000179"  [label="AST: "];
"1000174" -> "1000179"  [label="CFG: "];
"1000179" -> "1000663"  [label="DDG: "];
"1000179" -> "1000172"  [label="DDG: "];
"1000179" -> "1000172"  [label="DDG: "];
"1000179" -> "1000174"  [label="DDG: "];
"1000179" -> "1000174"  [label="DDG: "];
"1000179" -> "1000327"  [label="DDG: "];
"1000179" -> "1000467"  [label="DDG: "];
"1000179" -> "1000477"  [label="DDG: "];
"1000179" -> "1000484"  [label="DDG: "];
"1000179" -> "1000515"  [label="DDG: "];
"1000172" -> "1000160"  [label="AST: "];
"1000172" -> "1000174"  [label="CFG: "];
"1000173" -> "1000172"  [label="AST: "];
"1000174" -> "1000172"  [label="AST: "];
"1000184" -> "1000172"  [label="CFG: "];
"1000172" -> "1000663"  [label="DDG: "];
"1000172" -> "1000183"  [label="DDG: "];
"1000183" -> "1000182"  [label="AST: "];
"1000183" -> "1000185"  [label="CFG: "];
"1000184" -> "1000183"  [label="AST: "];
"1000185" -> "1000183"  [label="AST: "];
"1000188" -> "1000183"  [label="CFG: "];
"1000203" -> "1000183"  [label="CFG: "];
"1000183" -> "1000193"  [label="DDG: "];
"1000183" -> "1000334"  [label="DDG: "];
"1000183" -> "1000394"  [label="DDG: "];
"1000183" -> "1000394"  [label="DDG: "];
"1000183" -> "1000494"  [label="DDG: "];
"1000183" -> "1000528"  [label="DDG: "];
"1000193" -> "1000187"  [label="AST: "];
"1000193" -> "1000194"  [label="CFG: "];
"1000194" -> "1000193"  [label="AST: "];
"1000196" -> "1000193"  [label="CFG: "];
"1000193" -> "1000187"  [label="DDG: "];
"1000193" -> "1000394"  [label="DDG: "];
"1000193" -> "1000494"  [label="DDG: "];
"1000187" -> "1000186"  [label="AST: "];
"1000187" -> "1000195"  [label="CFG: "];
"1000188" -> "1000187"  [label="AST: "];
"1000189" -> "1000187"  [label="AST: "];
"1000192" -> "1000187"  [label="AST: "];
"1000195" -> "1000187"  [label="AST: "];
"1000199" -> "1000187"  [label="CFG: "];
"1000187" -> "1000663"  [label="DDG: "];
"1000187" -> "1000663"  [label="DDG: "];
"1000187" -> "1000663"  [label="DDG: "];
"1000187" -> "1000663"  [label="DDG: "];
"1000189" -> "1000187"  [label="DDG: "];
"1000189" -> "1000187"  [label="DDG: "];
"1000187" -> "1000494"  [label="DDG: "];
"1000494" -> "1000492"  [label="AST: "];
"1000494" -> "1000497"  [label="CFG: "];
"1000495" -> "1000494"  [label="AST: "];
"1000496" -> "1000494"  [label="AST: "];
"1000497" -> "1000494"  [label="AST: "];
"1000492" -> "1000494"  [label="CFG: "];
"1000494" -> "1000663"  [label="DDG: "];
"1000494" -> "1000492"  [label="DDG: "];
"1000494" -> "1000492"  [label="DDG: "];
"1000494" -> "1000492"  [label="DDG: "];
"1000406" -> "1000494"  [label="DDG: "];
"1000334" -> "1000494"  [label="DDG: "];
"1000394" -> "1000494"  [label="DDG: "];
"1000343" -> "1000494"  [label="DDG: "];
"1000492" -> "1000462"  [label="AST: "];
"1000493" -> "1000492"  [label="AST: "];
"1000501" -> "1000492"  [label="CFG: "];
"1000492" -> "1000663"  [label="DDG: "];
"1000492" -> "1000663"  [label="DDG: "];
"1000394" -> "1000393"  [label="AST: "];
"1000394" -> "1000396"  [label="CFG: "];
"1000395" -> "1000394"  [label="AST: "];
"1000396" -> "1000394"  [label="AST: "];
"1000398" -> "1000394"  [label="CFG: "];
"1000409" -> "1000394"  [label="CFG: "];
"1000406" -> "1000394"  [label="DDG: "];
"1000334" -> "1000394"  [label="DDG: "];
"1000334" -> "1000394"  [label="DDG: "];
"1000343" -> "1000394"  [label="DDG: "];
"1000394" -> "1000406"  [label="DDG: "];
"1000394" -> "1000528"  [label="DDG: "];
"1000406" -> "1000397"  [label="AST: "];
"1000406" -> "1000407"  [label="CFG: "];
"1000407" -> "1000406"  [label="AST: "];
"1000397" -> "1000406"  [label="CFG: "];
"1000406" -> "1000397"  [label="DDG: "];
"1000397" -> "1000393"  [label="AST: "];
"1000398" -> "1000397"  [label="AST: "];
"1000399" -> "1000397"  [label="AST: "];
"1000402" -> "1000397"  [label="AST: "];
"1000403" -> "1000397"  [label="AST: "];
"1000409" -> "1000397"  [label="CFG: "];
"1000397" -> "1000663"  [label="DDG: "];
"1000397" -> "1000663"  [label="DDG: "];
"1000397" -> "1000663"  [label="DDG: "];
"1000399" -> "1000397"  [label="DDG: "];
"1000399" -> "1000397"  [label="DDG: "];
"1000388" -> "1000397"  [label="DDG: "];
"1000397" -> "1000448"  [label="DDG: "];
"1000448" -> "1000446"  [label="AST: "];
"1000448" -> "1000454"  [label="CFG: "];
"1000449" -> "1000448"  [label="AST: "];
"1000450" -> "1000448"  [label="AST: "];
"1000451" -> "1000448"  [label="AST: "];
"1000454" -> "1000448"  [label="AST: "];
"1000446" -> "1000448"  [label="CFG: "];
"1000448" -> "1000663"  [label="DDG: "];
"1000448" -> "1000663"  [label="DDG: "];
"1000448" -> "1000388"  [label="DDG: "];
"1000448" -> "1000446"  [label="DDG: "];
"1000448" -> "1000446"  [label="DDG: "];
"1000448" -> "1000446"  [label="DDG: "];
"1000448" -> "1000446"  [label="DDG: "];
"1000446" -> "1000448"  [label="DDG: "];
"1000388" -> "1000448"  [label="DDG: "];
"1000408" -> "1000448"  [label="DDG: "];
"1000388" -> "1000386"  [label="AST: "];
"1000388" -> "1000390"  [label="CFG: "];
"1000389" -> "1000388"  [label="AST: "];
"1000390" -> "1000388"  [label="AST: "];
"1000386" -> "1000388"  [label="CFG: "];
"1000388" -> "1000386"  [label="DDG: "];
"1000388" -> "1000386"  [label="DDG: "];
"1000386" -> "1000353"  [label="AST: "];
"1000387" -> "1000386"  [label="AST: "];
"1000395" -> "1000386"  [label="CFG: "];
"1000386" -> "1000663"  [label="DDG: "];
"1000386" -> "1000663"  [label="DDG: "];
"1000446" -> "1000353"  [label="AST: "];
"1000447" -> "1000446"  [label="AST: "];
"1000456" -> "1000446"  [label="CFG: "];
"1000446" -> "1000663"  [label="DDG: "];
"1000446" -> "1000663"  [label="DDG: "];
"1000528" -> "1000527"  [label="AST: "];
"1000528" -> "1000530"  [label="CFG: "];
"1000529" -> "1000528"  [label="AST: "];
"1000530" -> "1000528"  [label="AST: "];
"1000533" -> "1000528"  [label="CFG: "];
"1000541" -> "1000528"  [label="CFG: "];
"1000513" -> "1000528"  [label="DDG: "];
"1000334" -> "1000528"  [label="DDG: "];
"1000528" -> "1000538"  [label="DDG: "];
"1000528" -> "1000615"  [label="DDG: "];
"1000538" -> "1000532"  [label="AST: "];
"1000538" -> "1000539"  [label="CFG: "];
"1000539" -> "1000538"  [label="AST: "];
"1000532" -> "1000538"  [label="CFG: "];
"1000538" -> "1000532"  [label="DDG: "];
"1000532" -> "1000531"  [label="AST: "];
"1000533" -> "1000532"  [label="AST: "];
"1000534" -> "1000532"  [label="AST: "];
"1000537" -> "1000532"  [label="AST: "];
"1000541" -> "1000532"  [label="CFG: "];
"1000532" -> "1000663"  [label="DDG: "];
"1000532" -> "1000663"  [label="DDG: "];
"1000532" -> "1000663"  [label="DDG: "];
"1000534" -> "1000532"  [label="DDG: "];
"1000534" -> "1000532"  [label="DDG: "];
"1000615" -> "1000614"  [label="AST: "];
"1000615" -> "1000617"  [label="CFG: "];
"1000616" -> "1000615"  [label="AST: "];
"1000617" -> "1000615"  [label="AST: "];
"1000620" -> "1000615"  [label="CFG: "];
"1000629" -> "1000615"  [label="CFG: "];
"1000615" -> "1000663"  [label="DDG: "];
"1000615" -> "1000663"  [label="DDG: "];
"1000615" -> "1000663"  [label="DDG: "];
"1000606" -> "1000615"  [label="DDG: "];
"1000615" -> "1000625"  [label="DDG: "];
"1000625" -> "1000619"  [label="AST: "];
"1000625" -> "1000626"  [label="CFG: "];
"1000626" -> "1000625"  [label="AST: "];
"1000619" -> "1000625"  [label="CFG: "];
"1000625" -> "1000663"  [label="DDG: "];
"1000625" -> "1000619"  [label="DDG: "];
"1000619" -> "1000618"  [label="AST: "];
"1000620" -> "1000619"  [label="AST: "];
"1000621" -> "1000619"  [label="AST: "];
"1000624" -> "1000619"  [label="AST: "];
"1000629" -> "1000619"  [label="CFG: "];
"1000619" -> "1000663"  [label="DDG: "];
"1000619" -> "1000663"  [label="DDG: "];
"1000619" -> "1000663"  [label="DDG: "];
"1000621" -> "1000619"  [label="DDG: "];
"1000621" -> "1000619"  [label="DDG: "];
"1000334" -> "1000333"  [label="AST: "];
"1000334" -> "1000336"  [label="CFG: "];
"1000335" -> "1000334"  [label="AST: "];
"1000336" -> "1000334"  [label="AST: "];
"1000338" -> "1000334"  [label="CFG: "];
"1000346" -> "1000334"  [label="CFG: "];
"1000325" -> "1000334"  [label="DDG: "];
"1000334" -> "1000343"  [label="DDG: "];
"1000343" -> "1000337"  [label="AST: "];
"1000343" -> "1000344"  [label="CFG: "];
"1000344" -> "1000343"  [label="AST: "];
"1000337" -> "1000343"  [label="CFG: "];
"1000343" -> "1000337"  [label="DDG: "];
"1000337" -> "1000333"  [label="AST: "];
"1000338" -> "1000337"  [label="AST: "];
"1000339" -> "1000337"  [label="AST: "];
"1000342" -> "1000337"  [label="AST: "];
"1000346" -> "1000337"  [label="CFG: "];
"1000337" -> "1000663"  [label="DDG: "];
"1000337" -> "1000663"  [label="DDG: "];
"1000337" -> "1000663"  [label="DDG: "];
"1000339" -> "1000337"  [label="DDG: "];
"1000339" -> "1000337"  [label="DDG: "];
"1000174" -> "1000178"  [label="CFG: "];
"1000175" -> "1000174"  [label="AST: "];
"1000178" -> "1000174"  [label="AST: "];
"1000174" -> "1000663"  [label="DDG: "];
"1000174" -> "1000663"  [label="DDG: "];
"1000327" -> "1000325"  [label="AST: "];
"1000327" -> "1000332"  [label="CFG: "];
"1000328" -> "1000327"  [label="AST: "];
"1000329" -> "1000327"  [label="AST: "];
"1000330" -> "1000327"  [label="AST: "];
"1000331" -> "1000327"  [label="AST: "];
"1000332" -> "1000327"  [label="AST: "];
"1000325" -> "1000327"  [label="CFG: "];
"1000327" -> "1000663"  [label="DDG: "];
"1000327" -> "1000663"  [label="DDG: "];
"1000327" -> "1000663"  [label="DDG: "];
"1000327" -> "1000663"  [label="DDG: "];
"1000327" -> "1000325"  [label="DDG: "];
"1000327" -> "1000325"  [label="DDG: "];
"1000327" -> "1000325"  [label="DDG: "];
"1000327" -> "1000325"  [label="DDG: "];
"1000327" -> "1000325"  [label="DDG: "];
"1000221" -> "1000327"  [label="DDG: "];
"1000314" -> "1000327"  [label="DDG: "];
"1000207" -> "1000327"  [label="DDG: "];
"1000224" -> "1000327"  [label="DDG: "];
"1000241" -> "1000327"  [label="DDG: "];
"1000302" -> "1000327"  [label="DDG: "];
"1000230" -> "1000327"  [label="DDG: "];
"1000305" -> "1000327"  [label="DDG: "];
"1000327" -> "1000515"  [label="DDG: "];
"1000327" -> "1000632"  [label="DDG: "];
"1000325" -> "1000324"  [label="AST: "];
"1000326" -> "1000325"  [label="AST: "];
"1000335" -> "1000325"  [label="CFG: "];
"1000325" -> "1000663"  [label="DDG: "];
"1000515" -> "1000513"  [label="AST: "];
"1000515" -> "1000518"  [label="CFG: "];
"1000516" -> "1000515"  [label="AST: "];
"1000517" -> "1000515"  [label="AST: "];
"1000518" -> "1000515"  [label="AST: "];
"1000513" -> "1000515"  [label="CFG: "];
"1000515" -> "1000663"  [label="DDG: "];
"1000515" -> "1000513"  [label="DDG: "];
"1000515" -> "1000513"  [label="DDG: "];
"1000515" -> "1000513"  [label="DDG: "];
"1000505" -> "1000515"  [label="DDG: "];
"1000518" -> "1000515"  [label="DDG: "];
"1000518" -> "1000515"  [label="DDG: "];
"1000515" -> "1000523"  [label="DDG: "];
"1000515" -> "1000542"  [label="DDG: "];
"1000513" -> "1000120"  [label="AST: "];
"1000514" -> "1000513"  [label="AST: "];
"1000522" -> "1000513"  [label="CFG: "];
"1000513" -> "1000663"  [label="DDG: "];
"1000523" -> "1000521"  [label="AST: "];
"1000523" -> "1000524"  [label="CFG: "];
"1000524" -> "1000523"  [label="AST: "];
"1000521" -> "1000523"  [label="CFG: "];
"1000523" -> "1000521"  [label="DDG: "];
"1000523" -> "1000525"  [label="DDG: "];
"1000521" -> "1000120"  [label="AST: "];
"1000522" -> "1000521"  [label="AST: "];
"1000526" -> "1000521"  [label="CFG: "];
"1000521" -> "1000663"  [label="DDG: "];
"1000521" -> "1000663"  [label="DDG: "];
"1000521" -> "1000632"  [label="DDG: "];
"1000632" -> "1000631"  [label="AST: "];
"1000632" -> "1000650"  [label="CFG: "];
"1000633" -> "1000632"  [label="AST: "];
"1000634" -> "1000632"  [label="AST: "];
"1000635" -> "1000632"  [label="AST: "];
"1000636" -> "1000632"  [label="AST: "];
"1000637" -> "1000632"  [label="AST: "];
"1000638" -> "1000632"  [label="AST: "];
"1000644" -> "1000632"  [label="AST: "];
"1000650" -> "1000632"  [label="AST: "];
"1000652" -> "1000632"  [label="CFG: "];
"1000632" -> "1000663"  [label="DDG: "];
"1000632" -> "1000663"  [label="DDG: "];
"1000632" -> "1000663"  [label="DDG: "];
"1000632" -> "1000663"  [label="DDG: "];
"1000632" -> "1000663"  [label="DDG: "];
"1000632" -> "1000663"  [label="DDG: "];
"1000632" -> "1000663"  [label="DDG: "];
"1000621" -> "1000632"  [label="DDG: "];
"1000189" -> "1000632"  [label="DDG: "];
"1000214" -> "1000632"  [label="DDG: "];
"1000399" -> "1000632"  [label="DDG: "];
"1000339" -> "1000632"  [label="DDG: "];
"1000534" -> "1000632"  [label="DDG: "];
"1000221" -> "1000632"  [label="DDG: "];
"1000314" -> "1000632"  [label="DDG: "];
"1000207" -> "1000632"  [label="DDG: "];
"1000525" -> "1000120"  [label="AST: "];
"1000525" -> "1000526"  [label="CFG: "];
"1000526" -> "1000525"  [label="AST: "];
"1000529" -> "1000525"  [label="CFG: "];
"1000525" -> "1000663"  [label="DDG: "];
"1000542" -> "1000540"  [label="AST: "];
"1000542" -> "1000543"  [label="CFG: "];
"1000543" -> "1000542"  [label="AST: "];
"1000540" -> "1000542"  [label="CFG: "];
"1000542" -> "1000540"  [label="DDG: "];
"1000542" -> "1000608"  [label="DDG: "];
"1000540" -> "1000120"  [label="AST: "];
"1000541" -> "1000540"  [label="AST: "];
"1000545" -> "1000540"  [label="CFG: "];
"1000540" -> "1000663"  [label="DDG: "];
"1000540" -> "1000544"  [label="DDG: "];
"1000544" -> "1000120"  [label="AST: "];
"1000544" -> "1000546"  [label="CFG: "];
"1000545" -> "1000544"  [label="AST: "];
"1000546" -> "1000544"  [label="AST: "];
"1000548" -> "1000544"  [label="CFG: "];
"1000544" -> "1000663"  [label="DDG: "];
"1000608" -> "1000606"  [label="AST: "];
"1000608" -> "1000612"  [label="CFG: "];
"1000609" -> "1000608"  [label="AST: "];
"1000610" -> "1000608"  [label="AST: "];
"1000612" -> "1000608"  [label="AST: "];
"1000606" -> "1000608"  [label="CFG: "];
"1000608" -> "1000663"  [label="DDG: "];
"1000608" -> "1000663"  [label="DDG: "];
"1000608" -> "1000663"  [label="DDG: "];
"1000608" -> "1000606"  [label="DDG: "];
"1000608" -> "1000606"  [label="DDG: "];
"1000608" -> "1000606"  [label="DDG: "];
"1000608" -> "1000656"  [label="DDG: "];
"1000606" -> "1000120"  [label="AST: "];
"1000607" -> "1000606"  [label="AST: "];
"1000616" -> "1000606"  [label="CFG: "];
"1000606" -> "1000663"  [label="DDG: "];
"1000656" -> "1000654"  [label="AST: "];
"1000656" -> "1000660"  [label="CFG: "];
"1000657" -> "1000656"  [label="AST: "];
"1000658" -> "1000656"  [label="AST: "];
"1000659" -> "1000656"  [label="AST: "];
"1000660" -> "1000656"  [label="AST: "];
"1000654" -> "1000656"  [label="CFG: "];
"1000656" -> "1000663"  [label="DDG: "];
"1000656" -> "1000663"  [label="DDG: "];
"1000656" -> "1000654"  [label="DDG: "];
"1000656" -> "1000654"  [label="DDG: "];
"1000656" -> "1000654"  [label="DDG: "];
"1000656" -> "1000654"  [label="DDG: "];
"1000350" -> "1000656"  [label="DDG: "];
"1000654" -> "1000631"  [label="AST: "];
"1000655" -> "1000654"  [label="AST: "];
"1000662" -> "1000654"  [label="CFG: "];
"1000654" -> "1000663"  [label="DDG: "];
"1000654" -> "1000661"  [label="DDG: "];
"1000661" -> "1000631"  [label="AST: "];
"1000661" -> "1000662"  [label="CFG: "];
"1000662" -> "1000661"  [label="AST: "];
"1000663" -> "1000661"  [label="CFG: "];
"1000661" -> "1000663"  [label="DDG: "];
"1000661" -> "1000663"  [label="DDG: "];
"1000467" -> "1000465"  [label="AST: "];
"1000467" -> "1000469"  [label="CFG: "];
"1000468" -> "1000467"  [label="AST: "];
"1000469" -> "1000467"  [label="AST: "];
"1000465" -> "1000467"  [label="CFG: "];
"1000467" -> "1000663"  [label="DDG: "];
"1000467" -> "1000465"  [label="DDG: "];
"1000467" -> "1000465"  [label="DDG: "];
"1000465" -> "1000462"  [label="AST: "];
"1000466" -> "1000465"  [label="AST: "];
"1000471" -> "1000465"  [label="CFG: "];
"1000465" -> "1000663"  [label="DDG: "];
"1000465" -> "1000663"  [label="DDG: "];
"1000477" -> "1000475"  [label="AST: "];
"1000477" -> "1000479"  [label="CFG: "];
"1000478" -> "1000477"  [label="AST: "];
"1000479" -> "1000477"  [label="AST: "];
"1000475" -> "1000477"  [label="CFG: "];
"1000477" -> "1000663"  [label="DDG: "];
"1000477" -> "1000475"  [label="DDG: "];
"1000477" -> "1000475"  [label="DDG: "];
"1000475" -> "1000462"  [label="AST: "];
"1000476" -> "1000475"  [label="AST: "];
"1000480" -> "1000475"  [label="CFG: "];
"1000475" -> "1000663"  [label="DDG: "];
"1000475" -> "1000663"  [label="DDG: "];
"1000484" -> "1000482"  [label="AST: "];
"1000484" -> "1000486"  [label="CFG: "];
"1000485" -> "1000484"  [label="AST: "];
"1000486" -> "1000484"  [label="AST: "];
"1000482" -> "1000484"  [label="CFG: "];
"1000484" -> "1000663"  [label="DDG: "];
"1000484" -> "1000482"  [label="DDG: "];
"1000484" -> "1000482"  [label="DDG: "];
"1000482" -> "1000462"  [label="AST: "];
"1000483" -> "1000482"  [label="AST: "];
"1000488" -> "1000482"  [label="CFG: "];
"1000482" -> "1000663"  [label="DDG: "];
"1000482" -> "1000663"  [label="DDG: "];
}
