digraph "0_exim_5b7a7c051c9ab9ee7c924a611f90ef2be03e0ad0@API" {
"1000187" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to store header From: in DMARC: %s, header was '%s'\",\n                           opendmarc_policy_status_to_str(libdm_status), from_header->text))"];
"1000189" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000193" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000183" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000172" [label="(Call,libdm_status = (dmarc_abort == TRUE) ?\n                  DMARC_PARSE_OKAY :\n                  opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000179" [label="(Call,opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000161" [label="(Call,header_from_sender = expand_string(\n                           string_sprintf(\"${domain:${extract{1}{:}{${addresses:%s}}}}\",\n                             from_header->text) ))"];
"1000163" [label="(Call,expand_string(\n                           string_sprintf(\"${domain:${extract{1}{:}{${addresses:%s}}}}\",\n                             from_header->text) ))"];
"1000164" [label="(Call,string_sprintf(\"${domain:${extract{1}{:}{${addresses:%s}}}}\",\n                             from_header->text))"];
"1000494" [label="(Call,debug_printf(\"DMARC skipping (%d), unsure what to do with %s\",\n                        libdm_status, from_header->text))"];
"1000492" [label="(Call,(D_receive)\n          debug_printf(\"DMARC skipping (%d), unsure what to do with %s\",\n                        libdm_status, from_header->text))"];
"1000180" [label="(Identifier,dmarc_pctx)"];
"1000496" [label="(Identifier,libdm_status)"];
"1000501" [label="(Identifier,has_dmarc_record)"];
"1000186" [label="(Block,)"];
"1000160" [label="(Block,)"];
"1000166" [label="(Call,from_header->text)"];
"1000184" [label="(Identifier,libdm_status)"];
"1000179" [label="(Call,opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000515" [label="(Call,opendmarc_policy_fetch_utilized_domain(dmarc_pctx, dmarc_domain,\n        \t                                          DMARC_MAXHOSTNAMELEN-1))"];
"1000214" [label="(Call,log_write(0, LOG_MAIN, \"DMARC using synthesized SPF sender domain = %s\n\",\n                               spf_sender_domain))"];
"1000172" [label="(Call,libdm_status = (dmarc_abort == TRUE) ?\n                  DMARC_PARSE_OKAY :\n                  opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000484" [label="(Call,debug_printf(\"DMARC record parse error for %s\n\", header_from_sender))"];
"1000467" [label="(Call,debug_printf(\"DMARC no record found for %s\n\", header_from_sender))"];
"1000494" [label="(Call,debug_printf(\"DMARC skipping (%d), unsure what to do with %s\",\n                        libdm_status, from_header->text))"];
"1000193" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000165" [label="(Literal,\"${domain:${extract{1}{:}{${addresses:%s}}}}\")"];
"1000174" [label="(Call,(dmarc_abort == TRUE) ?\n                  DMARC_PARSE_OKAY :\n                  opendmarc_policy_store_from_domain(dmarc_pctx, header_from_sender))"];
"1000161" [label="(Call,header_from_sender = expand_string(\n                           string_sprintf(\"${domain:${extract{1}{:}{${addresses:%s}}}}\",\n                             from_header->text) ))"];
"1000199" [label="(Identifier,dmarc_abort)"];
"1000632" [label="(Call,log_write(0, LOG_MAIN, \"DMARC results: spf_domain=%s dmarc_domain=%s \"\n                             \"spf_align=%s dkim_align=%s enforcement='%s'\",\n                             spf_sender_domain, dmarc_used_domain,\n                             (sa==DMARC_POLICY_SPF_ALIGNMENT_PASS) ?\"yes\":\"no\",\n                             (da==DMARC_POLICY_DKIM_ALIGNMENT_PASS)?\"yes\":\"no\",\n                             dmarc_status_text))"];
"1000196" [label="(Identifier,from_header)"];
"1000181" [label="(Identifier,header_from_sender)"];
"1000399" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000188" [label="(Literal,0)"];
"1000191" [label="(Identifier,LOG_PANIC)"];
"1000189" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000187" [label="(Call,log_write(0, LOG_MAIN|LOG_PANIC, \"failure to store header From: in DMARC: %s, header was '%s'\",\n                           opendmarc_policy_status_to_str(libdm_status), from_header->text))"];
"1000528" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000195" [label="(Call,from_header->text)"];
"1000497" [label="(Call,from_header->text)"];
"1000164" [label="(Call,string_sprintf(\"${domain:${extract{1}{:}{${addresses:%s}}}}\",\n                             from_header->text))"];
"1000477" [label="(Call,debug_printf(\"DMARC record found for %s\n\", header_from_sender))"];
"1000163" [label="(Call,expand_string(\n                           string_sprintf(\"${domain:${extract{1}{:}{${addresses:%s}}}}\",\n                             from_header->text) ))"];
"1000339" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000327" [label="(Call,opendmarc_policy_store_spf(dmarc_pctx, spf_sender_domain,\n                                                dmarc_spf_result, origin, spf_human_readable))"];
"1000534" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000343" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000185" [label="(Identifier,DMARC_PARSE_OKAY)"];
"1000203" [label="(Identifier,spf_response)"];
"1000194" [label="(Identifier,libdm_status)"];
"1000621" [label="(Call,LOG_MAIN|LOG_PANIC)"];
"1000334" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000170" [label="(Identifier,dmarc_abort)"];
"1000192" [label="(Literal,\"failure to store header From: in DMARC: %s, header was '%s'\")"];
"1000173" [label="(Identifier,libdm_status)"];
"1000462" [label="(Block,)"];
"1000182" [label="(ControlStructure,if (libdm_status != DMARC_PARSE_OKAY))"];
"1000190" [label="(Identifier,LOG_MAIN)"];
"1000183" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000162" [label="(Identifier,header_from_sender)"];
"1000492" [label="(Call,(D_receive)\n          debug_printf(\"DMARC skipping (%d), unsure what to do with %s\",\n                        libdm_status, from_header->text))"];
"1000406" [label="(Call,opendmarc_policy_status_to_str(libdm_status))"];
"1000495" [label="(Literal,\"DMARC skipping (%d), unsure what to do with %s\")"];
"1000663" [label="(MethodReturn,int)"];
"1000394" [label="(Call,libdm_status != DMARC_PARSE_OKAY)"];
"1000187" -> "1000186"  [label="AST: "];
"1000187" -> "1000195"  [label="CFG: "];
"1000188" -> "1000187"  [label="AST: "];
"1000189" -> "1000187"  [label="AST: "];
"1000192" -> "1000187"  [label="AST: "];
"1000193" -> "1000187"  [label="AST: "];
"1000195" -> "1000187"  [label="AST: "];
"1000199" -> "1000187"  [label="CFG: "];
"1000187" -> "1000663"  [label="DDG: "];
"1000187" -> "1000663"  [label="DDG: "];
"1000187" -> "1000663"  [label="DDG: "];
"1000187" -> "1000663"  [label="DDG: "];
"1000189" -> "1000187"  [label="DDG: "];
"1000189" -> "1000187"  [label="DDG: "];
"1000193" -> "1000187"  [label="DDG: "];
"1000164" -> "1000187"  [label="DDG: "];
"1000187" -> "1000494"  [label="DDG: "];
"1000189" -> "1000191"  [label="CFG: "];
"1000190" -> "1000189"  [label="AST: "];
"1000191" -> "1000189"  [label="AST: "];
"1000192" -> "1000189"  [label="CFG: "];
"1000189" -> "1000663"  [label="DDG: "];
"1000189" -> "1000663"  [label="DDG: "];
"1000189" -> "1000214"  [label="DDG: "];
"1000189" -> "1000339"  [label="DDG: "];
"1000189" -> "1000339"  [label="DDG: "];
"1000189" -> "1000399"  [label="DDG: "];
"1000189" -> "1000399"  [label="DDG: "];
"1000189" -> "1000534"  [label="DDG: "];
"1000189" -> "1000534"  [label="DDG: "];
"1000189" -> "1000621"  [label="DDG: "];
"1000189" -> "1000621"  [label="DDG: "];
"1000189" -> "1000632"  [label="DDG: "];
"1000193" -> "1000194"  [label="CFG: "];
"1000194" -> "1000193"  [label="AST: "];
"1000196" -> "1000193"  [label="CFG: "];
"1000183" -> "1000193"  [label="DDG: "];
"1000193" -> "1000394"  [label="DDG: "];
"1000193" -> "1000494"  [label="DDG: "];
"1000183" -> "1000182"  [label="AST: "];
"1000183" -> "1000185"  [label="CFG: "];
"1000184" -> "1000183"  [label="AST: "];
"1000185" -> "1000183"  [label="AST: "];
"1000188" -> "1000183"  [label="CFG: "];
"1000203" -> "1000183"  [label="CFG: "];
"1000172" -> "1000183"  [label="DDG: "];
"1000183" -> "1000334"  [label="DDG: "];
"1000183" -> "1000394"  [label="DDG: "];
"1000183" -> "1000394"  [label="DDG: "];
"1000183" -> "1000494"  [label="DDG: "];
"1000183" -> "1000528"  [label="DDG: "];
"1000172" -> "1000160"  [label="AST: "];
"1000172" -> "1000174"  [label="CFG: "];
"1000173" -> "1000172"  [label="AST: "];
"1000174" -> "1000172"  [label="AST: "];
"1000184" -> "1000172"  [label="CFG: "];
"1000172" -> "1000663"  [label="DDG: "];
"1000179" -> "1000172"  [label="DDG: "];
"1000179" -> "1000172"  [label="DDG: "];
"1000179" -> "1000174"  [label="AST: "];
"1000179" -> "1000181"  [label="CFG: "];
"1000180" -> "1000179"  [label="AST: "];
"1000181" -> "1000179"  [label="AST: "];
"1000174" -> "1000179"  [label="CFG: "];
"1000179" -> "1000663"  [label="DDG: "];
"1000179" -> "1000174"  [label="DDG: "];
"1000179" -> "1000174"  [label="DDG: "];
"1000161" -> "1000179"  [label="DDG: "];
"1000179" -> "1000327"  [label="DDG: "];
"1000179" -> "1000467"  [label="DDG: "];
"1000179" -> "1000477"  [label="DDG: "];
"1000179" -> "1000484"  [label="DDG: "];
"1000179" -> "1000515"  [label="DDG: "];
"1000161" -> "1000160"  [label="AST: "];
"1000161" -> "1000163"  [label="CFG: "];
"1000162" -> "1000161"  [label="AST: "];
"1000163" -> "1000161"  [label="AST: "];
"1000170" -> "1000161"  [label="CFG: "];
"1000161" -> "1000663"  [label="DDG: "];
"1000161" -> "1000663"  [label="DDG: "];
"1000163" -> "1000161"  [label="DDG: "];
"1000161" -> "1000467"  [label="DDG: "];
"1000161" -> "1000477"  [label="DDG: "];
"1000161" -> "1000484"  [label="DDG: "];
"1000163" -> "1000164"  [label="CFG: "];
"1000164" -> "1000163"  [label="AST: "];
"1000163" -> "1000663"  [label="DDG: "];
"1000164" -> "1000163"  [label="DDG: "];
"1000164" -> "1000163"  [label="DDG: "];
"1000164" -> "1000166"  [label="CFG: "];
"1000165" -> "1000164"  [label="AST: "];
"1000166" -> "1000164"  [label="AST: "];
"1000164" -> "1000663"  [label="DDG: "];
"1000164" -> "1000494"  [label="DDG: "];
"1000494" -> "1000492"  [label="AST: "];
"1000494" -> "1000497"  [label="CFG: "];
"1000495" -> "1000494"  [label="AST: "];
"1000496" -> "1000494"  [label="AST: "];
"1000497" -> "1000494"  [label="AST: "];
"1000492" -> "1000494"  [label="CFG: "];
"1000494" -> "1000663"  [label="DDG: "];
"1000494" -> "1000492"  [label="DDG: "];
"1000494" -> "1000492"  [label="DDG: "];
"1000494" -> "1000492"  [label="DDG: "];
"1000406" -> "1000494"  [label="DDG: "];
"1000334" -> "1000494"  [label="DDG: "];
"1000394" -> "1000494"  [label="DDG: "];
"1000343" -> "1000494"  [label="DDG: "];
"1000492" -> "1000462"  [label="AST: "];
"1000493" -> "1000492"  [label="AST: "];
"1000501" -> "1000492"  [label="CFG: "];
"1000492" -> "1000663"  [label="DDG: "];
"1000492" -> "1000663"  [label="DDG: "];
}
