digraph "0_sgminer_910c36089940e81fb85c65b8e63dcd2fac71470c@API" {
"1000472" [label="(Call,strlen(pool->swork.bbversion) +\n\t\t\t      strlen(pool->swork.prev_hash))"];
"1000473" [label="(Call,strlen(pool->swork.bbversion))"];
"1000301" [label="(Call,pool->swork.bbversion = bbversion)"];
"1000168" [label="(Call,bbversion = json_array_string(val, 5))"];
"1000170" [label="(Call,json_array_string(val, 5))"];
"1000165" [label="(Call,json_array_string(val, 3))"];
"1000160" [label="(Call,json_array_string(val, 2))"];
"1000155" [label="(Call,json_array_string(val, 1))"];
"1000150" [label="(Call,json_array_string(val, 0))"];
"1000133" [label="(Call,json_array_get(val, 4))"];
"1000108" [label="(MethodParameterIn,json_t *val)"];
"1000203" [label="(Call,!bbversion)"];
"1000479" [label="(Call,strlen(pool->swork.prev_hash))"];
"1000282" [label="(Call,pool->swork.prev_hash = prev_hash)"];
"1000194" [label="(Call,!prev_hash)"];
"1000153" [label="(Call,prev_hash = json_array_string(val, 1))"];
"1000168" [label="(Call,bbversion = json_array_string(val, 5))"];
"1000154" [label="(Identifier,prev_hash)"];
"1000479" [label="(Call,strlen(pool->swork.prev_hash))"];
"1000135" [label="(Literal,4)"];
"1000282" [label="(Call,pool->swork.prev_hash = prev_hash)"];
"1000713" [label="(Call,applog(LOG_DEBUG, \"bbversion: %s\", bbversion))"];
"1000148" [label="(Call,job_id = json_array_string(val, 0))"];
"1000195" [label="(Identifier,prev_hash)"];
"1000217" [label="(Call,free(prev_hash))"];
"1000175" [label="(Call,json_array_string(val, 6))"];
"1000193" [label="(Call,!prev_hash || !coinbase1 || !coinbase2 || !bbversion || !nbit || !ntime)"];
"1000701" [label="(Call,applog(LOG_DEBUG, \"prev_hash: %s\", prev_hash))"];
"1000229" [label="(Call,free(bbversion))"];
"1000163" [label="(Call,coinbase2 = json_array_string(val, 3))"];
"1000203" [label="(Call,!bbversion)"];
"1000109" [label="(Block,)"];
"1000155" [label="(Call,json_array_string(val, 1))"];
"1000169" [label="(Identifier,bbversion)"];
"1000302" [label="(Call,pool->swork.bbversion)"];
"1000301" [label="(Call,pool->swork.bbversion = bbversion)"];
"1000551" [label="(Call,snprintf(header, pool->swork.header_len,\n\t\t\"%s%s%s%s%s%s%s\",\n\t\tpool->swork.bbversion,\n\t\tpool->swork.prev_hash,\n\t\tblank_merkel,\n\t\tpool->swork.ntime,\n \t\tpool->swork.nbit,\n \t\t\"00000000\", /* nonce */\n \t\tworkpadding))"];
"1000174" [label="(Identifier,nbit)"];
"1000472" [label="(Call,strlen(pool->swork.bbversion) +\n\t\t\t      strlen(pool->swork.prev_hash))"];
"1000307" [label="(Identifier,bbversion)"];
"1000311" [label="(Identifier,pool)"];
"1000170" [label="(Call,json_array_string(val, 5))"];
"1000171" [label="(Identifier,val)"];
"1000108" [label="(MethodParameterIn,json_t *val)"];
"1000166" [label="(Identifier,val)"];
"1000152" [label="(Literal,0)"];
"1000159" [label="(Identifier,coinbase1)"];
"1000202" [label="(Call,!bbversion || !nbit || !ntime)"];
"1000162" [label="(Literal,2)"];
"1000180" [label="(Call,json_array_string(val, 7))"];
"1000161" [label="(Identifier,val)"];
"1000473" [label="(Call,strlen(pool->swork.bbversion))"];
"1000151" [label="(Identifier,val)"];
"1000186" [label="(Call,json_array_get(val, 8))"];
"1000131" [label="(Call,arr = json_array_get(val, 4))"];
"1000288" [label="(Identifier,prev_hash)"];
"1000153" [label="(Call,prev_hash = json_array_string(val, 1))"];
"1000204" [label="(Identifier,bbversion)"];
"1000150" [label="(Call,json_array_string(val, 0))"];
"1000160" [label="(Call,json_array_string(val, 2))"];
"1000290" [label="(Identifier,cb1_len)"];
"1000165" [label="(Call,json_array_string(val, 3))"];
"1000207" [label="(Identifier,nbit)"];
"1000198" [label="(Identifier,coinbase1)"];
"1000156" [label="(Identifier,val)"];
"1000194" [label="(Call,!prev_hash)"];
"1000482" [label="(Identifier,pool)"];
"1000480" [label="(Call,pool->swork.prev_hash)"];
"1000283" [label="(Call,pool->swork.prev_hash)"];
"1000474" [label="(Call,pool->swork.bbversion)"];
"1000158" [label="(Call,coinbase1 = json_array_string(val, 2))"];
"1000759" [label="(MethodReturn,static bool)"];
"1000468" [label="(Call,pool->merkle_offset = strlen(pool->swork.bbversion) +\n\t\t\t      strlen(pool->swork.prev_hash))"];
"1000133" [label="(Call,json_array_get(val, 4))"];
"1000167" [label="(Literal,3)"];
"1000157" [label="(Literal,1)"];
"1000134" [label="(Identifier,val)"];
"1000172" [label="(Literal,5)"];
"1000472" -> "1000468"  [label="AST: "];
"1000472" -> "1000479"  [label="CFG: "];
"1000473" -> "1000472"  [label="AST: "];
"1000479" -> "1000472"  [label="AST: "];
"1000468" -> "1000472"  [label="CFG: "];
"1000472" -> "1000759"  [label="DDG: strlen(pool->swork.prev_hash)"];
"1000472" -> "1000759"  [label="DDG: strlen(pool->swork.bbversion)"];
"1000473" -> "1000472"  [label="DDG: pool->swork.bbversion"];
"1000479" -> "1000472"  [label="DDG: pool->swork.prev_hash"];
"1000473" -> "1000474"  [label="CFG: "];
"1000474" -> "1000473"  [label="AST: "];
"1000482" -> "1000473"  [label="CFG: "];
"1000473" -> "1000468"  [label="DDG: pool->swork.bbversion"];
"1000301" -> "1000473"  [label="DDG: pool->swork.bbversion"];
"1000473" -> "1000551"  [label="DDG: pool->swork.bbversion"];
"1000301" -> "1000109"  [label="AST: "];
"1000301" -> "1000307"  [label="CFG: "];
"1000302" -> "1000301"  [label="AST: "];
"1000307" -> "1000301"  [label="AST: "];
"1000311" -> "1000301"  [label="CFG: "];
"1000301" -> "1000759"  [label="DDG: bbversion"];
"1000168" -> "1000301"  [label="DDG: bbversion"];
"1000203" -> "1000301"  [label="DDG: bbversion"];
"1000168" -> "1000109"  [label="AST: "];
"1000168" -> "1000170"  [label="CFG: "];
"1000169" -> "1000168"  [label="AST: "];
"1000170" -> "1000168"  [label="AST: "];
"1000174" -> "1000168"  [label="CFG: "];
"1000168" -> "1000759"  [label="DDG: bbversion"];
"1000168" -> "1000759"  [label="DDG: json_array_string(val, 5)"];
"1000170" -> "1000168"  [label="DDG: val"];
"1000170" -> "1000168"  [label="DDG: 5"];
"1000168" -> "1000203"  [label="DDG: bbversion"];
"1000168" -> "1000229"  [label="DDG: bbversion"];
"1000168" -> "1000713"  [label="DDG: bbversion"];
"1000170" -> "1000172"  [label="CFG: "];
"1000171" -> "1000170"  [label="AST: "];
"1000172" -> "1000170"  [label="AST: "];
"1000165" -> "1000170"  [label="DDG: val"];
"1000108" -> "1000170"  [label="DDG: val"];
"1000170" -> "1000175"  [label="DDG: val"];
"1000165" -> "1000163"  [label="AST: "];
"1000165" -> "1000167"  [label="CFG: "];
"1000166" -> "1000165"  [label="AST: "];
"1000167" -> "1000165"  [label="AST: "];
"1000163" -> "1000165"  [label="CFG: "];
"1000165" -> "1000163"  [label="DDG: val"];
"1000165" -> "1000163"  [label="DDG: 3"];
"1000160" -> "1000165"  [label="DDG: val"];
"1000108" -> "1000165"  [label="DDG: val"];
"1000160" -> "1000158"  [label="AST: "];
"1000160" -> "1000162"  [label="CFG: "];
"1000161" -> "1000160"  [label="AST: "];
"1000162" -> "1000160"  [label="AST: "];
"1000158" -> "1000160"  [label="CFG: "];
"1000160" -> "1000158"  [label="DDG: val"];
"1000160" -> "1000158"  [label="DDG: 2"];
"1000155" -> "1000160"  [label="DDG: val"];
"1000108" -> "1000160"  [label="DDG: val"];
"1000155" -> "1000153"  [label="AST: "];
"1000155" -> "1000157"  [label="CFG: "];
"1000156" -> "1000155"  [label="AST: "];
"1000157" -> "1000155"  [label="AST: "];
"1000153" -> "1000155"  [label="CFG: "];
"1000155" -> "1000153"  [label="DDG: val"];
"1000155" -> "1000153"  [label="DDG: 1"];
"1000150" -> "1000155"  [label="DDG: val"];
"1000108" -> "1000155"  [label="DDG: val"];
"1000150" -> "1000148"  [label="AST: "];
"1000150" -> "1000152"  [label="CFG: "];
"1000151" -> "1000150"  [label="AST: "];
"1000152" -> "1000150"  [label="AST: "];
"1000148" -> "1000150"  [label="CFG: "];
"1000150" -> "1000148"  [label="DDG: val"];
"1000150" -> "1000148"  [label="DDG: 0"];
"1000133" -> "1000150"  [label="DDG: val"];
"1000108" -> "1000150"  [label="DDG: val"];
"1000133" -> "1000131"  [label="AST: "];
"1000133" -> "1000135"  [label="CFG: "];
"1000134" -> "1000133"  [label="AST: "];
"1000135" -> "1000133"  [label="AST: "];
"1000131" -> "1000133"  [label="CFG: "];
"1000133" -> "1000759"  [label="DDG: val"];
"1000133" -> "1000131"  [label="DDG: val"];
"1000133" -> "1000131"  [label="DDG: 4"];
"1000108" -> "1000133"  [label="DDG: val"];
"1000108" -> "1000106"  [label="AST: "];
"1000108" -> "1000759"  [label="DDG: val"];
"1000108" -> "1000175"  [label="DDG: val"];
"1000108" -> "1000180"  [label="DDG: val"];
"1000108" -> "1000186"  [label="DDG: val"];
"1000203" -> "1000202"  [label="AST: "];
"1000203" -> "1000204"  [label="CFG: "];
"1000204" -> "1000203"  [label="AST: "];
"1000207" -> "1000203"  [label="CFG: "];
"1000202" -> "1000203"  [label="CFG: "];
"1000203" -> "1000759"  [label="DDG: bbversion"];
"1000203" -> "1000202"  [label="DDG: bbversion"];
"1000203" -> "1000229"  [label="DDG: bbversion"];
"1000203" -> "1000713"  [label="DDG: bbversion"];
"1000479" -> "1000480"  [label="CFG: "];
"1000480" -> "1000479"  [label="AST: "];
"1000479" -> "1000468"  [label="DDG: pool->swork.prev_hash"];
"1000282" -> "1000479"  [label="DDG: pool->swork.prev_hash"];
"1000479" -> "1000551"  [label="DDG: pool->swork.prev_hash"];
"1000282" -> "1000109"  [label="AST: "];
"1000282" -> "1000288"  [label="CFG: "];
"1000283" -> "1000282"  [label="AST: "];
"1000288" -> "1000282"  [label="AST: "];
"1000290" -> "1000282"  [label="CFG: "];
"1000282" -> "1000759"  [label="DDG: prev_hash"];
"1000194" -> "1000282"  [label="DDG: prev_hash"];
"1000153" -> "1000282"  [label="DDG: prev_hash"];
"1000194" -> "1000193"  [label="AST: "];
"1000194" -> "1000195"  [label="CFG: "];
"1000195" -> "1000194"  [label="AST: "];
"1000198" -> "1000194"  [label="CFG: "];
"1000193" -> "1000194"  [label="CFG: "];
"1000194" -> "1000759"  [label="DDG: prev_hash"];
"1000194" -> "1000193"  [label="DDG: prev_hash"];
"1000153" -> "1000194"  [label="DDG: prev_hash"];
"1000194" -> "1000217"  [label="DDG: prev_hash"];
"1000194" -> "1000701"  [label="DDG: prev_hash"];
"1000153" -> "1000109"  [label="AST: "];
"1000154" -> "1000153"  [label="AST: "];
"1000159" -> "1000153"  [label="CFG: "];
"1000153" -> "1000759"  [label="DDG: json_array_string(val, 1)"];
"1000153" -> "1000759"  [label="DDG: prev_hash"];
"1000153" -> "1000217"  [label="DDG: prev_hash"];
"1000153" -> "1000701"  [label="DDG: prev_hash"];
}
