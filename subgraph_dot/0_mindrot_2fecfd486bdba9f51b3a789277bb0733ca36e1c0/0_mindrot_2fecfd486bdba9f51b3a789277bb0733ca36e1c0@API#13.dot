digraph "0_mindrot_2fecfd486bdba9f51b3a789277bb0733ca36e1c0@API" {
"1000308" [label="(Call,r = sshpkt_disconnect(ssh, \"Packet corrupt\"))"];
"1000310" [label="(Call,sshpkt_disconnect(ssh, \"Packet corrupt\"))"];
"1000111" [label="(MethodParameterIn,struct ssh *ssh)"];
"1000307" [label="(Call,(r = sshpkt_disconnect(ssh, \"Packet corrupt\")) != 0)"];
"1000314" [label="(Return,return r;)"];
"1000922" [label="(Call,ssh_packet_write_wait(ssh))"];
"1000952" [label="(Call,ssh_packet_enable_delayed_compress(ssh))"];
"1000314" [label="(Return,return r;)"];
"1000315" [label="(Identifier,r)"];
"1000312" [label="(Literal,\"Packet corrupt\")"];
"1000800" [label="(Call,ssh_packet_write_wait(ssh))"];
"1000674" [label="(Call,ssh_packet_start_discard(ssh, enc, mac,\n\t\t\t    state->packlen, PACKET_MAX_SIZE - need))"];
"1000308" [label="(Call,r = sshpkt_disconnect(ssh, \"Packet corrupt\"))"];
"1000317" [label="(Identifier,SSH_ERR_CONN_CORRUPT)"];
"1000311" [label="(Identifier,ssh)"];
"1000111" [label="(MethodParameterIn,struct ssh *ssh)"];
"1000936" [label="(Call,ssh_set_newkeys(ssh, MODE_IN))"];
"1000310" [label="(Call,sshpkt_disconnect(ssh, \"Packet corrupt\"))"];
"1000913" [label="(Call,sshpkt_disconnect(ssh,\n\t\t    \"Invalid ssh2 packet type: %d\", *typep))"];
"1000309" [label="(Identifier,r)"];
"1000495" [label="(Call,ssh_packet_start_discard(ssh, enc, mac,\n\t\t    state->packlen, PACKET_MAX_SIZE - block_size))"];
"1000313" [label="(Literal,0)"];
"1000306" [label="(ControlStructure,if ((r = sshpkt_disconnect(ssh, \"Packet corrupt\")) != 0))"];
"1000976" [label="(MethodReturn,RET)"];
"1000307" [label="(Call,(r = sshpkt_disconnect(ssh, \"Packet corrupt\")) != 0)"];
"1000792" [label="(Call,sshpkt_disconnect(ssh,\n\t\t    \"Corrupted padlen %d on input.\", padlen))"];
"1000852" [label="(Call,uncompress_buffer(ssh, state->incoming_packet,\n\t\t    state->compression_buffer))"];
"1000426" [label="(Call,ssh_packet_start_discard(ssh, enc, mac,\n\t\t\t    state->packlen, PACKET_MAX_SIZE))"];
"1000308" -> "1000307"  [label="AST: "];
"1000308" -> "1000310"  [label="CFG: "];
"1000309" -> "1000308"  [label="AST: "];
"1000310" -> "1000308"  [label="AST: "];
"1000313" -> "1000308"  [label="CFG: "];
"1000308" -> "1000976"  [label="DDG: "];
"1000308" -> "1000976"  [label="DDG: "];
"1000308" -> "1000307"  [label="DDG: "];
"1000310" -> "1000308"  [label="DDG: "];
"1000310" -> "1000308"  [label="DDG: "];
"1000308" -> "1000314"  [label="DDG: "];
"1000310" -> "1000312"  [label="CFG: "];
"1000311" -> "1000310"  [label="AST: "];
"1000312" -> "1000310"  [label="AST: "];
"1000310" -> "1000976"  [label="DDG: "];
"1000310" -> "1000307"  [label="DDG: "];
"1000310" -> "1000307"  [label="DDG: "];
"1000111" -> "1000310"  [label="DDG: "];
"1000111" -> "1000110"  [label="AST: "];
"1000111" -> "1000976"  [label="DDG: "];
"1000111" -> "1000426"  [label="DDG: "];
"1000111" -> "1000495"  [label="DDG: "];
"1000111" -> "1000674"  [label="DDG: "];
"1000111" -> "1000792"  [label="DDG: "];
"1000111" -> "1000800"  [label="DDG: "];
"1000111" -> "1000852"  [label="DDG: "];
"1000111" -> "1000913"  [label="DDG: "];
"1000111" -> "1000922"  [label="DDG: "];
"1000111" -> "1000936"  [label="DDG: "];
"1000111" -> "1000952"  [label="DDG: "];
"1000307" -> "1000306"  [label="AST: "];
"1000307" -> "1000313"  [label="CFG: "];
"1000313" -> "1000307"  [label="AST: "];
"1000315" -> "1000307"  [label="CFG: "];
"1000317" -> "1000307"  [label="CFG: "];
"1000307" -> "1000976"  [label="DDG: "];
"1000314" -> "1000306"  [label="AST: "];
"1000314" -> "1000315"  [label="CFG: "];
"1000315" -> "1000314"  [label="AST: "];
"1000976" -> "1000314"  [label="CFG: "];
"1000314" -> "1000976"  [label="DDG: "];
"1000315" -> "1000314"  [label="DDG: "];
}
