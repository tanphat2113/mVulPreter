digraph "0_mindrot_2fecfd486bdba9f51b3a789277bb0733ca36e1c0@pointer" {
"1000301" [label="(Call,logit(\"Bad packet length %u.\", state->packlen))"];
"1000290" [label="(Call,state->packlen > PACKET_MAX_SIZE)"];
"1000283" [label="(Call,state->packlen < 1 + 4)"];
"1000256" [label="(Call,cipher_get_length(&state->receive_context,\n\t\t    &state->packlen, state->p_read.seqnr,\n\t\t    sshbuf_ptr(state->input), sshbuf_len(state->input)))"];
"1000248" [label="(Call,state->packlen == 0)"];
"1000270" [label="(Call,sshbuf_ptr(state->input))"];
"1000274" [label="(Call,sshbuf_len(state->input))"];
"1000668" [label="(Call,need > PACKET_MAX_SIZE)"];
"1000246" [label="(Call,aadlen && state->packlen == 0)"];
"1000249" [label="(Call,state->packlen)"];
"1000296" [label="(Call,sshbuf_dump(state->input, stderr))"];
"1000294" [label="(Identifier,PACKET_MAX_SIZE)"];
"1000283" [label="(Call,state->packlen < 1 + 4)"];
"1000282" [label="(Call,state->packlen < 1 + 4 ||\n\t\t    state->packlen > PACKET_MAX_SIZE)"];
"1000265" [label="(Call,state->p_read.seqnr)"];
"1000752" [label="(Call,(state->packlen + 4) / block_size)"];
"1000261" [label="(Call,&state->packlen)"];
"1000456" [label="(Call,need = state->packlen)"];
"1000301" [label="(Call,logit(\"Bad packet length %u.\", state->packlen))"];
"1000284" [label="(Call,state->packlen)"];
"1000270" [label="(Call,sshbuf_ptr(state->input))"];
"1000674" [label="(Call,ssh_packet_start_discard(ssh, enc, mac,\n\t\t\t    state->packlen, PACKET_MAX_SIZE - need))"];
"1000467" [label="(Call,state->packlen - block_size)"];
"1000759" [label="(Call,state->p_read.bytes += state->packlen + 4)"];
"1000257" [label="(Call,&state->receive_context)"];
"1000275" [label="(Call,state->input)"];
"1000290" [label="(Call,state->packlen > PACKET_MAX_SIZE)"];
"1000252" [label="(Literal,0)"];
"1000309" [label="(Identifier,r)"];
"1000495" [label="(Call,ssh_packet_start_discard(ssh, enc, mac,\n\t\t    state->packlen, PACKET_MAX_SIZE - block_size))"];
"1000274" [label="(Call,sshbuf_len(state->input))"];
"1000287" [label="(Call,1 + 4)"];
"1000276" [label="(Identifier,state)"];
"1000448" [label="(Call,state->packlen+4)"];
"1000271" [label="(Call,state->input)"];
"1000292" [label="(Identifier,state)"];
"1000324" [label="(Call,state->packlen == 0)"];
"1000303" [label="(Call,state->packlen)"];
"1000753" [label="(Call,state->packlen + 4)"];
"1000976" [label="(MethodReturn,RET)"];
"1000248" [label="(Call,state->packlen == 0)"];
"1000295" [label="(Block,)"];
"1000255" [label="(Call,cipher_get_length(&state->receive_context,\n\t\t    &state->packlen, state->p_read.seqnr,\n\t\t    sshbuf_ptr(state->input), sshbuf_len(state->input)) != 0)"];
"1000256" [label="(Call,cipher_get_length(&state->receive_context,\n\t\t    &state->packlen, state->p_read.seqnr,\n\t\t    sshbuf_ptr(state->input), sshbuf_len(state->input)))"];
"1000278" [label="(Literal,0)"];
"1000543" [label="(Call,mac_compute(mac, state->p_read.seqnr,\n\t\t    sshbuf_ptr(state->input), aadlen + need,\n\t\t    macbuf, sizeof(macbuf)))"];
"1000507" [label="(Call,sshbuf_len(state->input))"];
"1000302" [label="(Literal,\"Bad packet length %u.\")"];
"1000291" [label="(Call,state->packlen)"];
"1000502" [label="(Call,PACKET_MAX_SIZE - block_size)"];
"1000765" [label="(Call,state->packlen + 4)"];
"1000446" [label="(Call,debug(\"input: packet len %u\", state->packlen+4))"];
"1000581" [label="(Call,cipher_crypt(&state->receive_context, state->p_read.seqnr, cp,\n\t    sshbuf_ptr(state->input), need, aadlen, authlen))"];
"1000301" -> "1000295"  [label="AST: "];
"1000301" -> "1000303"  [label="CFG: "];
"1000302" -> "1000301"  [label="AST: "];
"1000303" -> "1000301"  [label="AST: "];
"1000309" -> "1000301"  [label="CFG: "];
"1000301" -> "1000976"  [label="DDG: "];
"1000301" -> "1000976"  [label="DDG: "];
"1000290" -> "1000301"  [label="DDG: "];
"1000283" -> "1000301"  [label="DDG: "];
"1000256" -> "1000301"  [label="DDG: "];
"1000290" -> "1000282"  [label="AST: "];
"1000290" -> "1000294"  [label="CFG: "];
"1000291" -> "1000290"  [label="AST: "];
"1000294" -> "1000290"  [label="AST: "];
"1000282" -> "1000290"  [label="CFG: "];
"1000290" -> "1000976"  [label="DDG: "];
"1000290" -> "1000282"  [label="DDG: "];
"1000290" -> "1000282"  [label="DDG: "];
"1000283" -> "1000290"  [label="DDG: "];
"1000256" -> "1000290"  [label="DDG: "];
"1000290" -> "1000446"  [label="DDG: "];
"1000290" -> "1000448"  [label="DDG: "];
"1000290" -> "1000456"  [label="DDG: "];
"1000290" -> "1000467"  [label="DDG: "];
"1000290" -> "1000495"  [label="DDG: "];
"1000290" -> "1000502"  [label="DDG: "];
"1000290" -> "1000668"  [label="DDG: "];
"1000290" -> "1000674"  [label="DDG: "];
"1000290" -> "1000752"  [label="DDG: "];
"1000290" -> "1000753"  [label="DDG: "];
"1000290" -> "1000759"  [label="DDG: "];
"1000290" -> "1000765"  [label="DDG: "];
"1000283" -> "1000282"  [label="AST: "];
"1000283" -> "1000287"  [label="CFG: "];
"1000284" -> "1000283"  [label="AST: "];
"1000287" -> "1000283"  [label="AST: "];
"1000292" -> "1000283"  [label="CFG: "];
"1000282" -> "1000283"  [label="CFG: "];
"1000283" -> "1000976"  [label="DDG: "];
"1000283" -> "1000282"  [label="DDG: "];
"1000283" -> "1000282"  [label="DDG: "];
"1000256" -> "1000283"  [label="DDG: "];
"1000248" -> "1000283"  [label="DDG: "];
"1000283" -> "1000446"  [label="DDG: "];
"1000283" -> "1000448"  [label="DDG: "];
"1000283" -> "1000456"  [label="DDG: "];
"1000283" -> "1000467"  [label="DDG: "];
"1000283" -> "1000495"  [label="DDG: "];
"1000283" -> "1000674"  [label="DDG: "];
"1000283" -> "1000752"  [label="DDG: "];
"1000283" -> "1000753"  [label="DDG: "];
"1000283" -> "1000759"  [label="DDG: "];
"1000283" -> "1000765"  [label="DDG: "];
"1000256" -> "1000255"  [label="AST: "];
"1000256" -> "1000274"  [label="CFG: "];
"1000257" -> "1000256"  [label="AST: "];
"1000261" -> "1000256"  [label="AST: "];
"1000265" -> "1000256"  [label="AST: "];
"1000270" -> "1000256"  [label="AST: "];
"1000274" -> "1000256"  [label="AST: "];
"1000278" -> "1000256"  [label="CFG: "];
"1000256" -> "1000976"  [label="DDG: "];
"1000256" -> "1000976"  [label="DDG: "];
"1000256" -> "1000976"  [label="DDG: "];
"1000256" -> "1000976"  [label="DDG: "];
"1000256" -> "1000976"  [label="DDG: "];
"1000256" -> "1000255"  [label="DDG: "];
"1000256" -> "1000255"  [label="DDG: "];
"1000256" -> "1000255"  [label="DDG: "];
"1000256" -> "1000255"  [label="DDG: "];
"1000256" -> "1000255"  [label="DDG: "];
"1000248" -> "1000256"  [label="DDG: "];
"1000270" -> "1000256"  [label="DDG: "];
"1000274" -> "1000256"  [label="DDG: "];
"1000256" -> "1000446"  [label="DDG: "];
"1000256" -> "1000448"  [label="DDG: "];
"1000256" -> "1000456"  [label="DDG: "];
"1000256" -> "1000467"  [label="DDG: "];
"1000256" -> "1000495"  [label="DDG: "];
"1000256" -> "1000543"  [label="DDG: "];
"1000256" -> "1000581"  [label="DDG: "];
"1000256" -> "1000581"  [label="DDG: "];
"1000256" -> "1000674"  [label="DDG: "];
"1000256" -> "1000752"  [label="DDG: "];
"1000256" -> "1000753"  [label="DDG: "];
"1000256" -> "1000759"  [label="DDG: "];
"1000256" -> "1000765"  [label="DDG: "];
"1000248" -> "1000246"  [label="AST: "];
"1000248" -> "1000252"  [label="CFG: "];
"1000249" -> "1000248"  [label="AST: "];
"1000252" -> "1000248"  [label="AST: "];
"1000246" -> "1000248"  [label="CFG: "];
"1000248" -> "1000976"  [label="DDG: "];
"1000248" -> "1000246"  [label="DDG: "];
"1000248" -> "1000246"  [label="DDG: "];
"1000248" -> "1000324"  [label="DDG: "];
"1000270" -> "1000271"  [label="CFG: "];
"1000271" -> "1000270"  [label="AST: "];
"1000276" -> "1000270"  [label="CFG: "];
"1000270" -> "1000274"  [label="DDG: "];
"1000274" -> "1000275"  [label="CFG: "];
"1000275" -> "1000274"  [label="AST: "];
"1000274" -> "1000976"  [label="DDG: "];
"1000274" -> "1000296"  [label="DDG: "];
"1000274" -> "1000507"  [label="DDG: "];
}
