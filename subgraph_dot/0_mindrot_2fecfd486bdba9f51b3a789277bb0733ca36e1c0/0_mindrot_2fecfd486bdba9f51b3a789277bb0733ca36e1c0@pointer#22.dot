digraph "0_mindrot_2fecfd486bdba9f51b3a789277bb0733ca36e1c0@pointer" {
"1000112" [label="(MethodParameterIn,u_char *typep)"];
"1000890" [label="(Call,sshbuf_get_u8(state->incoming_packet, typep))"];
"1000887" [label="(Call,(r = sshbuf_get_u8(state->incoming_packet, typep)) != 0)"];
"1000888" [label="(Call,r = sshbuf_get_u8(state->incoming_packet, typep))"];
"1000974" [label="(Return,return r;)"];
"1000963" [label="(Call,sshbuf_dump(state->incoming_packet, stderr))"];
"1000894" [label="(Identifier,typep)"];
"1000694" [label="(Call,r = sshbuf_consume(state->input, mac->mac_len))"];
"1000810" [label="(Call,r = sshbuf_consume(state->incoming_packet, 4 + 1))"];
"1000882" [label="(Call,sshbuf_len(state->incoming_packet))"];
"1000895" [label="(Literal,0)"];
"1000955" [label="(Call,r = 0)"];
"1000889" [label="(Identifier,r)"];
"1000436" [label="(Call,r = sshbuf_consume(state->input, block_size))"];
"1000888" [label="(Call,r = sshbuf_get_u8(state->incoming_packet, typep))"];
"1000630" [label="(Call,r = mac_compute(mac, state->p_read.seqnr,\n\t\t\t    sshbuf_ptr(state->incoming_packet),\n\t\t\t    sshbuf_len(state->incoming_packet),\n\t\t\t    macbuf, sizeof(macbuf)))"];
"1000891" [label="(Call,state->incoming_packet)"];
"1000868" [label="(Call,r = sshbuf_putb(state->incoming_packet,\n\t\t    state->compression_buffer))"];
"1000541" [label="(Call,r = mac_compute(mac, state->p_read.seqnr,\n\t\t    sshbuf_ptr(state->input), aadlen + need,\n\t\t    macbuf, sizeof(macbuf)))"];
"1000967" [label="(Identifier,stderr)"];
"1000958" [label="(Call,fprintf(stderr, \"read/plain[%d]:\r\n\", *typep))"];
"1000886" [label="(ControlStructure,if ((r = sshbuf_get_u8(state->incoming_packet, typep)) != 0))"];
"1000850" [label="(Call,r = uncompress_buffer(ssh, state->incoming_packet,\n\t\t    state->compression_buffer))"];
"1000901" [label="(Identifier,typep)"];
"1000833" [label="(Call,sshbuf_len(state->incoming_packet))"];
"1000112" [label="(MethodParameterIn,u_char *typep)"];
"1000934" [label="(Call,r = ssh_set_newkeys(ssh, MODE_IN))"];
"1000564" [label="(Call,r = sshbuf_reserve(state->incoming_packet, aadlen + need,\n\t    &cp))"];
"1000345" [label="(Call,r = sshbuf_reserve(state->incoming_packet, block_size,\n\t\t    &cp))"];
"1000964" [label="(Call,state->incoming_packet)"];
"1000974" [label="(Return,return r;)"];
"1000976" [label="(MethodReturn,RET)"];
"1000970" [label="(Identifier,state)"];
"1000887" [label="(Call,(r = sshbuf_get_u8(state->incoming_packet, typep)) != 0)"];
"1000821" [label="(Call,r = sshbuf_consume_end(state->incoming_packet, padlen))"];
"1000114" [label="(Block,)"];
"1000890" [label="(Call,sshbuf_get_u8(state->incoming_packet, typep))"];
"1000603" [label="(Call,r = sshbuf_consume(state->input, aadlen + need + authlen))"];
"1000950" [label="(Call,r = ssh_packet_enable_delayed_compress(ssh))"];
"1000963" [label="(Call,sshbuf_dump(state->incoming_packet, stderr))"];
"1000579" [label="(Call,r = cipher_crypt(&state->receive_context, state->p_read.seqnr, cp,\n\t    sshbuf_ptr(state->input), need, aadlen, authlen))"];
"1000358" [label="(Call,r = cipher_crypt(&state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0))"];
"1000975" [label="(Identifier,r)"];
"1000896" [label="(ControlStructure,goto out;)"];
"1000112" -> "1000110"  [label="AST: "];
"1000112" -> "1000976"  [label="DDG: typep"];
"1000112" -> "1000890"  [label="DDG: typep"];
"1000890" -> "1000888"  [label="AST: "];
"1000890" -> "1000894"  [label="CFG: "];
"1000891" -> "1000890"  [label="AST: "];
"1000894" -> "1000890"  [label="AST: "];
"1000888" -> "1000890"  [label="CFG: "];
"1000890" -> "1000976"  [label="DDG: state->incoming_packet"];
"1000890" -> "1000976"  [label="DDG: typep"];
"1000890" -> "1000887"  [label="DDG: state->incoming_packet"];
"1000890" -> "1000887"  [label="DDG: typep"];
"1000890" -> "1000888"  [label="DDG: state->incoming_packet"];
"1000890" -> "1000888"  [label="DDG: typep"];
"1000833" -> "1000890"  [label="DDG: state->incoming_packet"];
"1000882" -> "1000890"  [label="DDG: state->incoming_packet"];
"1000890" -> "1000963"  [label="DDG: state->incoming_packet"];
"1000887" -> "1000886"  [label="AST: "];
"1000887" -> "1000895"  [label="CFG: "];
"1000888" -> "1000887"  [label="AST: "];
"1000895" -> "1000887"  [label="AST: "];
"1000896" -> "1000887"  [label="CFG: "];
"1000901" -> "1000887"  [label="CFG: "];
"1000887" -> "1000976"  [label="DDG: (r = sshbuf_get_u8(state->incoming_packet, typep)) != 0"];
"1000888" -> "1000887"  [label="DDG: r"];
"1000889" -> "1000888"  [label="AST: "];
"1000895" -> "1000888"  [label="CFG: "];
"1000888" -> "1000976"  [label="DDG: sshbuf_get_u8(state->incoming_packet, typep)"];
"1000888" -> "1000976"  [label="DDG: r"];
"1000888" -> "1000974"  [label="DDG: r"];
"1000974" -> "1000114"  [label="AST: "];
"1000974" -> "1000975"  [label="CFG: "];
"1000975" -> "1000974"  [label="AST: "];
"1000976" -> "1000974"  [label="CFG: "];
"1000974" -> "1000976"  [label="DDG: <RET>"];
"1000975" -> "1000974"  [label="DDG: r"];
"1000850" -> "1000974"  [label="DDG: r"];
"1000579" -> "1000974"  [label="DDG: r"];
"1000694" -> "1000974"  [label="DDG: r"];
"1000934" -> "1000974"  [label="DDG: r"];
"1000436" -> "1000974"  [label="DDG: r"];
"1000630" -> "1000974"  [label="DDG: r"];
"1000603" -> "1000974"  [label="DDG: r"];
"1000810" -> "1000974"  [label="DDG: r"];
"1000821" -> "1000974"  [label="DDG: r"];
"1000345" -> "1000974"  [label="DDG: r"];
"1000950" -> "1000974"  [label="DDG: r"];
"1000541" -> "1000974"  [label="DDG: r"];
"1000564" -> "1000974"  [label="DDG: r"];
"1000955" -> "1000974"  [label="DDG: r"];
"1000868" -> "1000974"  [label="DDG: r"];
"1000358" -> "1000974"  [label="DDG: r"];
"1000963" -> "1000114"  [label="AST: "];
"1000963" -> "1000967"  [label="CFG: "];
"1000964" -> "1000963"  [label="AST: "];
"1000967" -> "1000963"  [label="AST: "];
"1000970" -> "1000963"  [label="CFG: "];
"1000963" -> "1000976"  [label="DDG: state->incoming_packet"];
"1000963" -> "1000976"  [label="DDG: stderr"];
"1000963" -> "1000976"  [label="DDG: sshbuf_dump(state->incoming_packet, stderr)"];
"1000958" -> "1000963"  [label="DDG: stderr"];
}
