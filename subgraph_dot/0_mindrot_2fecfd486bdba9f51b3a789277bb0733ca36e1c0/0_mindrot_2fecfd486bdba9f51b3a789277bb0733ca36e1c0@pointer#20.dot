digraph "0_mindrot_2fecfd486bdba9f51b3a789277bb0733ca36e1c0@pointer" {
"1000844" [label="(Call,sshbuf_reset(state->compression_buffer))"];
"1000852" [label="(Call,uncompress_buffer(ssh, state->incoming_packet,\n\t\t    state->compression_buffer))"];
"1000849" [label="(Call,(r = uncompress_buffer(ssh, state->incoming_packet,\n\t\t    state->compression_buffer)) != 0)"];
"1000850" [label="(Call,r = uncompress_buffer(ssh, state->incoming_packet,\n\t\t    state->compression_buffer))"];
"1000974" [label="(Return,return r;)"];
"1000862" [label="(Call,sshbuf_reset(state->incoming_packet))"];
"1000870" [label="(Call,sshbuf_putb(state->incoming_packet,\n\t\t    state->compression_buffer))"];
"1000867" [label="(Call,(r = sshbuf_putb(state->incoming_packet,\n\t\t    state->compression_buffer)) != 0)"];
"1000868" [label="(Call,r = sshbuf_putb(state->incoming_packet,\n\t\t    state->compression_buffer))"];
"1000882" [label="(Call,sshbuf_len(state->incoming_packet))"];
"1000880" [label="(Call,debug(\"input: len after de-compress %zd\",\n\t\t    sshbuf_len(state->incoming_packet)))"];
"1000879" [label="(Call,DBG(debug(\"input: len after de-compress %zd\",\n\t\t    sshbuf_len(state->incoming_packet))))"];
"1000890" [label="(Call,sshbuf_get_u8(state->incoming_packet, typep))"];
"1000887" [label="(Call,(r = sshbuf_get_u8(state->incoming_packet, typep)) != 0)"];
"1000888" [label="(Call,r = sshbuf_get_u8(state->incoming_packet, typep))"];
"1000963" [label="(Call,sshbuf_dump(state->incoming_packet, stderr))"];
"1000913" [label="(Call,sshpkt_disconnect(ssh,\n\t\t    \"Invalid ssh2 packet type: %d\", *typep))"];
"1000910" [label="(Call,(r = sshpkt_disconnect(ssh,\n\t\t    \"Invalid ssh2 packet type: %d\", *typep)) != 0)"];
"1000909" [label="(Call,(r = sshpkt_disconnect(ssh,\n\t\t    \"Invalid ssh2 packet type: %d\", *typep)) != 0 ||\n\t\t    (r = ssh_packet_write_wait(ssh)) != 0)"];
"1000911" [label="(Call,r = sshpkt_disconnect(ssh,\n\t\t    \"Invalid ssh2 packet type: %d\", *typep))"];
"1000925" [label="(Return,return r;)"];
"1000922" [label="(Call,ssh_packet_write_wait(ssh))"];
"1000919" [label="(Call,(r = ssh_packet_write_wait(ssh)) != 0)"];
"1000920" [label="(Call,r = ssh_packet_write_wait(ssh))"];
"1000936" [label="(Call,ssh_set_newkeys(ssh, MODE_IN))"];
"1000934" [label="(Call,r = ssh_set_newkeys(ssh, MODE_IN))"];
"1000952" [label="(Call,ssh_packet_enable_delayed_compress(ssh))"];
"1000950" [label="(Call,r = ssh_packet_enable_delayed_compress(ssh))"];
"1000883" [label="(Call,state->incoming_packet)"];
"1000914" [label="(Identifier,ssh)"];
"1000810" [label="(Call,r = sshbuf_consume(state->incoming_packet, 4 + 1))"];
"1000889" [label="(Identifier,r)"];
"1000909" [label="(Call,(r = sshpkt_disconnect(ssh,\n\t\t    \"Invalid ssh2 packet type: %d\", *typep)) != 0 ||\n\t\t    (r = ssh_packet_write_wait(ssh)) != 0)"];
"1000845" [label="(Call,state->compression_buffer)"];
"1000879" [label="(Call,DBG(debug(\"input: len after de-compress %zd\",\n\t\t    sshbuf_len(state->incoming_packet))))"];
"1000903" [label="(Call,*typep >= SSH2_MSG_LOCAL_MIN)"];
"1000541" [label="(Call,r = mac_compute(mac, state->p_read.seqnr,\n\t\t    sshbuf_ptr(state->input), aadlen + need,\n\t\t    macbuf, sizeof(macbuf)))"];
"1000959" [label="(Identifier,stderr)"];
"1000967" [label="(Identifier,stderr)"];
"1000111" [label="(MethodParameterIn,struct ssh *ssh)"];
"1000886" [label="(ControlStructure,if ((r = sshbuf_get_u8(state->incoming_packet, typep)) != 0))"];
"1000850" [label="(Call,r = uncompress_buffer(ssh, state->incoming_packet,\n\t\t    state->compression_buffer))"];
"1000112" [label="(MethodParameterIn,u_char *typep)"];
"1000880" [label="(Call,debug(\"input: len after de-compress %zd\",\n\t\t    sshbuf_len(state->incoming_packet)))"];
"1000861" [label="(ControlStructure,goto out;)"];
"1000345" [label="(Call,r = sshbuf_reserve(state->incoming_packet, block_size,\n\t\t    &cp))"];
"1000821" [label="(Call,r = sshbuf_consume_end(state->incoming_packet, padlen))"];
"1000920" [label="(Call,r = ssh_packet_write_wait(ssh))"];
"1000114" [label="(Block,)"];
"1000867" [label="(Call,(r = sshbuf_putb(state->incoming_packet,\n\t\t    state->compression_buffer)) != 0)"];
"1000938" [label="(Identifier,MODE_IN)"];
"1000963" [label="(Call,sshbuf_dump(state->incoming_packet, stderr))"];
"1000833" [label="(Call,sshbuf_len(state->incoming_packet))"];
"1000579" [label="(Call,r = cipher_crypt(&state->receive_context, state->p_read.seqnr, cp,\n\t    sshbuf_ptr(state->input), need, aadlen, authlen))"];
"1000918" [label="(Literal,0)"];
"1000975" [label="(Identifier,r)"];
"1000868" [label="(Call,r = sshbuf_putb(state->incoming_packet,\n\t\t    state->compression_buffer))"];
"1000951" [label="(Identifier,r)"];
"1000929" [label="(ControlStructure,if (*typep == SSH2_MSG_NEWKEYS))"];
"1000848" [label="(ControlStructure,if ((r = uncompress_buffer(ssh, state->incoming_packet,\n\t\t    state->compression_buffer)) != 0))"];
"1000922" [label="(Call,ssh_packet_write_wait(ssh))"];
"1000952" [label="(Call,ssh_packet_enable_delayed_compress(ssh))"];
"1000863" [label="(Call,state->incoming_packet)"];
"1000844" [label="(Call,sshbuf_reset(state->compression_buffer))"];
"1000955" [label="(Call,r = 0)"];
"1000916" [label="(Call,*typep)"];
"1000891" [label="(Call,state->incoming_packet)"];
"1000936" [label="(Call,ssh_set_newkeys(ssh, MODE_IN))"];
"1000913" [label="(Call,sshpkt_disconnect(ssh,\n\t\t    \"Invalid ssh2 packet type: %d\", *typep))"];
"1000899" [label="(Call,*typep < SSH2_MSG_MIN)"];
"1000910" [label="(Call,(r = sshpkt_disconnect(ssh,\n\t\t    \"Invalid ssh2 packet type: %d\", *typep)) != 0)"];
"1000921" [label="(Identifier,r)"];
"1000896" [label="(ControlStructure,goto out;)"];
"1000935" [label="(Identifier,r)"];
"1000694" [label="(Call,r = sshbuf_consume(state->input, mac->mac_len))"];
"1000925" [label="(Return,return r;)"];
"1000882" [label="(Call,sshbuf_len(state->incoming_packet))"];
"1000860" [label="(Literal,0)"];
"1000843" [label="(Block,)"];
"1000853" [label="(Identifier,ssh)"];
"1000870" [label="(Call,sshbuf_putb(state->incoming_packet,\n\t\t    state->compression_buffer))"];
"1000888" [label="(Call,r = sshbuf_get_u8(state->incoming_packet, typep))"];
"1000630" [label="(Call,r = mac_compute(mac, state->p_read.seqnr,\n\t\t\t    sshbuf_ptr(state->incoming_packet),\n\t\t\t    sshbuf_len(state->incoming_packet),\n\t\t\t    macbuf, sizeof(macbuf)))"];
"1000937" [label="(Identifier,ssh)"];
"1000564" [label="(Call,r = sshbuf_reserve(state->incoming_packet, aadlen + need,\n\t    &cp))"];
"1000878" [label="(ControlStructure,goto out;)"];
"1000964" [label="(Call,state->incoming_packet)"];
"1000974" [label="(Return,return r;)"];
"1000928" [label="(Identifier,SSH_ERR_PROTOCOL_ERROR)"];
"1000849" [label="(Call,(r = uncompress_buffer(ssh, state->incoming_packet,\n\t\t    state->compression_buffer)) != 0)"];
"1000866" [label="(ControlStructure,if ((r = sshbuf_putb(state->incoming_packet,\n\t\t    state->compression_buffer)) != 0))"];
"1000852" [label="(Call,uncompress_buffer(ssh, state->incoming_packet,\n\t\t    state->compression_buffer))"];
"1000603" [label="(Call,r = sshbuf_consume(state->input, aadlen + need + authlen))"];
"1000950" [label="(Call,r = ssh_packet_enable_delayed_compress(ssh))"];
"1000851" [label="(Identifier,r)"];
"1000894" [label="(Identifier,typep)"];
"1000912" [label="(Identifier,r)"];
"1000877" [label="(Literal,0)"];
"1000869" [label="(Identifier,r)"];
"1000871" [label="(Call,state->incoming_packet)"];
"1000895" [label="(Literal,0)"];
"1000923" [label="(Identifier,ssh)"];
"1000436" [label="(Call,r = sshbuf_consume(state->input, block_size))"];
"1000881" [label="(Literal,\"input: len after de-compress %zd\")"];
"1000874" [label="(Call,state->compression_buffer)"];
"1000857" [label="(Call,state->compression_buffer)"];
"1000958" [label="(Call,fprintf(stderr, \"read/plain[%d]:\r\n\", *typep))"];
"1000901" [label="(Identifier,typep)"];
"1000934" [label="(Call,r = ssh_set_newkeys(ssh, MODE_IN))"];
"1000864" [label="(Identifier,state)"];
"1000953" [label="(Identifier,ssh)"];
"1000911" [label="(Call,r = sshpkt_disconnect(ssh,\n\t\t    \"Invalid ssh2 packet type: %d\", *typep))"];
"1000940" [label="(ControlStructure,if (*typep == SSH2_MSG_USERAUTH_SUCCESS && !state->server_side))"];
"1000862" [label="(Call,sshbuf_reset(state->incoming_packet))"];
"1000976" [label="(MethodReturn,RET)"];
"1000908" [label="(ControlStructure,if ((r = sshpkt_disconnect(ssh,\n\t\t    \"Invalid ssh2 packet type: %d\", *typep)) != 0 ||\n\t\t    (r = ssh_packet_write_wait(ssh)) != 0))"];
"1000970" [label="(Identifier,state)"];
"1000924" [label="(Literal,0)"];
"1000915" [label="(Literal,\"Invalid ssh2 packet type: %d\")"];
"1000890" [label="(Call,sshbuf_get_u8(state->incoming_packet, typep))"];
"1000926" [label="(Identifier,r)"];
"1000919" [label="(Call,(r = ssh_packet_write_wait(ssh)) != 0)"];
"1000358" [label="(Call,r = cipher_crypt(&state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0))"];
"1000887" [label="(Call,(r = sshbuf_get_u8(state->incoming_packet, typep)) != 0)"];
"1000854" [label="(Call,state->incoming_packet)"];
"1000844" -> "1000843"  [label="AST: "];
"1000844" -> "1000845"  [label="CFG: "];
"1000845" -> "1000844"  [label="AST: "];
"1000851" -> "1000844"  [label="CFG: "];
"1000844" -> "1000976"  [label="DDG: "];
"1000844" -> "1000852"  [label="DDG: "];
"1000852" -> "1000850"  [label="AST: "];
"1000852" -> "1000857"  [label="CFG: "];
"1000853" -> "1000852"  [label="AST: "];
"1000854" -> "1000852"  [label="AST: "];
"1000857" -> "1000852"  [label="AST: "];
"1000850" -> "1000852"  [label="CFG: "];
"1000852" -> "1000976"  [label="DDG: "];
"1000852" -> "1000976"  [label="DDG: "];
"1000852" -> "1000976"  [label="DDG: "];
"1000852" -> "1000849"  [label="DDG: "];
"1000852" -> "1000849"  [label="DDG: "];
"1000852" -> "1000849"  [label="DDG: "];
"1000852" -> "1000850"  [label="DDG: "];
"1000852" -> "1000850"  [label="DDG: "];
"1000852" -> "1000850"  [label="DDG: "];
"1000111" -> "1000852"  [label="DDG: "];
"1000833" -> "1000852"  [label="DDG: "];
"1000852" -> "1000862"  [label="DDG: "];
"1000852" -> "1000870"  [label="DDG: "];
"1000852" -> "1000913"  [label="DDG: "];
"1000852" -> "1000936"  [label="DDG: "];
"1000852" -> "1000952"  [label="DDG: "];
"1000849" -> "1000848"  [label="AST: "];
"1000849" -> "1000860"  [label="CFG: "];
"1000850" -> "1000849"  [label="AST: "];
"1000860" -> "1000849"  [label="AST: "];
"1000861" -> "1000849"  [label="CFG: "];
"1000864" -> "1000849"  [label="CFG: "];
"1000849" -> "1000976"  [label="DDG: "];
"1000850" -> "1000849"  [label="DDG: "];
"1000851" -> "1000850"  [label="AST: "];
"1000860" -> "1000850"  [label="CFG: "];
"1000850" -> "1000976"  [label="DDG: "];
"1000850" -> "1000976"  [label="DDG: "];
"1000850" -> "1000974"  [label="DDG: "];
"1000974" -> "1000114"  [label="AST: "];
"1000974" -> "1000975"  [label="CFG: "];
"1000975" -> "1000974"  [label="AST: "];
"1000976" -> "1000974"  [label="CFG: "];
"1000974" -> "1000976"  [label="DDG: "];
"1000975" -> "1000974"  [label="DDG: "];
"1000579" -> "1000974"  [label="DDG: "];
"1000694" -> "1000974"  [label="DDG: "];
"1000934" -> "1000974"  [label="DDG: "];
"1000436" -> "1000974"  [label="DDG: "];
"1000630" -> "1000974"  [label="DDG: "];
"1000603" -> "1000974"  [label="DDG: "];
"1000810" -> "1000974"  [label="DDG: "];
"1000821" -> "1000974"  [label="DDG: "];
"1000345" -> "1000974"  [label="DDG: "];
"1000950" -> "1000974"  [label="DDG: "];
"1000541" -> "1000974"  [label="DDG: "];
"1000564" -> "1000974"  [label="DDG: "];
"1000955" -> "1000974"  [label="DDG: "];
"1000888" -> "1000974"  [label="DDG: "];
"1000868" -> "1000974"  [label="DDG: "];
"1000358" -> "1000974"  [label="DDG: "];
"1000862" -> "1000843"  [label="AST: "];
"1000862" -> "1000863"  [label="CFG: "];
"1000863" -> "1000862"  [label="AST: "];
"1000869" -> "1000862"  [label="CFG: "];
"1000862" -> "1000976"  [label="DDG: "];
"1000862" -> "1000870"  [label="DDG: "];
"1000870" -> "1000868"  [label="AST: "];
"1000870" -> "1000874"  [label="CFG: "];
"1000871" -> "1000870"  [label="AST: "];
"1000874" -> "1000870"  [label="AST: "];
"1000868" -> "1000870"  [label="CFG: "];
"1000870" -> "1000976"  [label="DDG: "];
"1000870" -> "1000976"  [label="DDG: "];
"1000870" -> "1000867"  [label="DDG: "];
"1000870" -> "1000867"  [label="DDG: "];
"1000870" -> "1000868"  [label="DDG: "];
"1000870" -> "1000868"  [label="DDG: "];
"1000870" -> "1000882"  [label="DDG: "];
"1000867" -> "1000866"  [label="AST: "];
"1000867" -> "1000877"  [label="CFG: "];
"1000868" -> "1000867"  [label="AST: "];
"1000877" -> "1000867"  [label="AST: "];
"1000878" -> "1000867"  [label="CFG: "];
"1000881" -> "1000867"  [label="CFG: "];
"1000867" -> "1000976"  [label="DDG: "];
"1000868" -> "1000867"  [label="DDG: "];
"1000869" -> "1000868"  [label="AST: "];
"1000877" -> "1000868"  [label="CFG: "];
"1000868" -> "1000976"  [label="DDG: "];
"1000868" -> "1000976"  [label="DDG: "];
"1000882" -> "1000880"  [label="AST: "];
"1000882" -> "1000883"  [label="CFG: "];
"1000883" -> "1000882"  [label="AST: "];
"1000880" -> "1000882"  [label="CFG: "];
"1000882" -> "1000880"  [label="DDG: "];
"1000882" -> "1000890"  [label="DDG: "];
"1000880" -> "1000879"  [label="AST: "];
"1000881" -> "1000880"  [label="AST: "];
"1000879" -> "1000880"  [label="CFG: "];
"1000880" -> "1000976"  [label="DDG: "];
"1000880" -> "1000879"  [label="DDG: "];
"1000880" -> "1000879"  [label="DDG: "];
"1000879" -> "1000843"  [label="AST: "];
"1000889" -> "1000879"  [label="CFG: "];
"1000879" -> "1000976"  [label="DDG: "];
"1000879" -> "1000976"  [label="DDG: "];
"1000890" -> "1000888"  [label="AST: "];
"1000890" -> "1000894"  [label="CFG: "];
"1000891" -> "1000890"  [label="AST: "];
"1000894" -> "1000890"  [label="AST: "];
"1000888" -> "1000890"  [label="CFG: "];
"1000890" -> "1000976"  [label="DDG: "];
"1000890" -> "1000976"  [label="DDG: "];
"1000890" -> "1000887"  [label="DDG: "];
"1000890" -> "1000887"  [label="DDG: "];
"1000890" -> "1000888"  [label="DDG: "];
"1000890" -> "1000888"  [label="DDG: "];
"1000833" -> "1000890"  [label="DDG: "];
"1000112" -> "1000890"  [label="DDG: "];
"1000890" -> "1000963"  [label="DDG: "];
"1000887" -> "1000886"  [label="AST: "];
"1000887" -> "1000895"  [label="CFG: "];
"1000888" -> "1000887"  [label="AST: "];
"1000895" -> "1000887"  [label="AST: "];
"1000896" -> "1000887"  [label="CFG: "];
"1000901" -> "1000887"  [label="CFG: "];
"1000887" -> "1000976"  [label="DDG: "];
"1000888" -> "1000887"  [label="DDG: "];
"1000889" -> "1000888"  [label="AST: "];
"1000895" -> "1000888"  [label="CFG: "];
"1000888" -> "1000976"  [label="DDG: "];
"1000888" -> "1000976"  [label="DDG: "];
"1000963" -> "1000114"  [label="AST: "];
"1000963" -> "1000967"  [label="CFG: "];
"1000964" -> "1000963"  [label="AST: "];
"1000967" -> "1000963"  [label="AST: "];
"1000970" -> "1000963"  [label="CFG: "];
"1000963" -> "1000976"  [label="DDG: "];
"1000963" -> "1000976"  [label="DDG: "];
"1000963" -> "1000976"  [label="DDG: "];
"1000958" -> "1000963"  [label="DDG: "];
"1000913" -> "1000911"  [label="AST: "];
"1000913" -> "1000916"  [label="CFG: "];
"1000914" -> "1000913"  [label="AST: "];
"1000915" -> "1000913"  [label="AST: "];
"1000916" -> "1000913"  [label="AST: "];
"1000911" -> "1000913"  [label="CFG: "];
"1000913" -> "1000976"  [label="DDG: "];
"1000913" -> "1000976"  [label="DDG: "];
"1000913" -> "1000910"  [label="DDG: "];
"1000913" -> "1000910"  [label="DDG: "];
"1000913" -> "1000910"  [label="DDG: "];
"1000913" -> "1000911"  [label="DDG: "];
"1000913" -> "1000911"  [label="DDG: "];
"1000913" -> "1000911"  [label="DDG: "];
"1000111" -> "1000913"  [label="DDG: "];
"1000903" -> "1000913"  [label="DDG: "];
"1000899" -> "1000913"  [label="DDG: "];
"1000913" -> "1000922"  [label="DDG: "];
"1000910" -> "1000909"  [label="AST: "];
"1000910" -> "1000918"  [label="CFG: "];
"1000911" -> "1000910"  [label="AST: "];
"1000918" -> "1000910"  [label="AST: "];
"1000921" -> "1000910"  [label="CFG: "];
"1000909" -> "1000910"  [label="CFG: "];
"1000910" -> "1000909"  [label="DDG: "];
"1000911" -> "1000910"  [label="DDG: "];
"1000909" -> "1000908"  [label="AST: "];
"1000909" -> "1000919"  [label="CFG: "];
"1000919" -> "1000909"  [label="AST: "];
"1000926" -> "1000909"  [label="CFG: "];
"1000928" -> "1000909"  [label="CFG: "];
"1000909" -> "1000976"  [label="DDG: "];
"1000909" -> "1000976"  [label="DDG: "];
"1000909" -> "1000976"  [label="DDG: "];
"1000919" -> "1000909"  [label="DDG: "];
"1000912" -> "1000911"  [label="AST: "];
"1000918" -> "1000911"  [label="CFG: "];
"1000911" -> "1000976"  [label="DDG: "];
"1000911" -> "1000976"  [label="DDG: "];
"1000911" -> "1000925"  [label="DDG: "];
"1000925" -> "1000908"  [label="AST: "];
"1000925" -> "1000926"  [label="CFG: "];
"1000926" -> "1000925"  [label="AST: "];
"1000976" -> "1000925"  [label="CFG: "];
"1000925" -> "1000976"  [label="DDG: "];
"1000926" -> "1000925"  [label="DDG: "];
"1000920" -> "1000925"  [label="DDG: "];
"1000922" -> "1000920"  [label="AST: "];
"1000922" -> "1000923"  [label="CFG: "];
"1000923" -> "1000922"  [label="AST: "];
"1000920" -> "1000922"  [label="CFG: "];
"1000922" -> "1000976"  [label="DDG: "];
"1000922" -> "1000919"  [label="DDG: "];
"1000922" -> "1000920"  [label="DDG: "];
"1000111" -> "1000922"  [label="DDG: "];
"1000919" -> "1000924"  [label="CFG: "];
"1000920" -> "1000919"  [label="AST: "];
"1000924" -> "1000919"  [label="AST: "];
"1000920" -> "1000919"  [label="DDG: "];
"1000921" -> "1000920"  [label="AST: "];
"1000924" -> "1000920"  [label="CFG: "];
"1000920" -> "1000976"  [label="DDG: "];
"1000920" -> "1000976"  [label="DDG: "];
"1000936" -> "1000934"  [label="AST: "];
"1000936" -> "1000938"  [label="CFG: "];
"1000937" -> "1000936"  [label="AST: "];
"1000938" -> "1000936"  [label="AST: "];
"1000934" -> "1000936"  [label="CFG: "];
"1000936" -> "1000976"  [label="DDG: "];
"1000936" -> "1000976"  [label="DDG: "];
"1000936" -> "1000934"  [label="DDG: "];
"1000936" -> "1000934"  [label="DDG: "];
"1000111" -> "1000936"  [label="DDG: "];
"1000934" -> "1000929"  [label="AST: "];
"1000935" -> "1000934"  [label="AST: "];
"1000959" -> "1000934"  [label="CFG: "];
"1000934" -> "1000976"  [label="DDG: "];
"1000934" -> "1000976"  [label="DDG: "];
"1000952" -> "1000950"  [label="AST: "];
"1000952" -> "1000953"  [label="CFG: "];
"1000953" -> "1000952"  [label="AST: "];
"1000950" -> "1000952"  [label="CFG: "];
"1000952" -> "1000976"  [label="DDG: "];
"1000952" -> "1000950"  [label="DDG: "];
"1000111" -> "1000952"  [label="DDG: "];
"1000950" -> "1000940"  [label="AST: "];
"1000951" -> "1000950"  [label="AST: "];
"1000959" -> "1000950"  [label="CFG: "];
"1000950" -> "1000976"  [label="DDG: "];
"1000950" -> "1000976"  [label="DDG: "];
}
