digraph "0_mindrot_2fecfd486bdba9f51b3a789277bb0733ca36e1c0@API" {
"1000800" [label="(Call,ssh_packet_write_wait(ssh))"];
"1000792" [label="(Call,sshpkt_disconnect(ssh,\n\t\t    \"Corrupted padlen %d on input.\", padlen))"];
"1000111" [label="(MethodParameterIn,struct ssh *ssh)"];
"1000783" [label="(Call,padlen < 4)"];
"1000779" [label="(Call,debug(\"input: padlen %d\", padlen))"];
"1000770" [label="(Call,padlen = sshbuf_ptr(state->incoming_packet)[4])"];
"1000797" [label="(Call,(r = ssh_packet_write_wait(ssh)) != 0)"];
"1000788" [label="(Call,(r = sshpkt_disconnect(ssh,\n\t\t    \"Corrupted padlen %d on input.\", padlen)) != 0 ||\n\t\t    (r = ssh_packet_write_wait(ssh)) != 0)"];
"1000798" [label="(Call,r = ssh_packet_write_wait(ssh))"];
"1000803" [label="(Return,return r;)"];
"1000811" [label="(Identifier,r)"];
"1000922" [label="(Call,ssh_packet_write_wait(ssh))"];
"1000952" [label="(Call,ssh_packet_enable_delayed_compress(ssh))"];
"1000778" [label="(Call,DBG(debug(\"input: padlen %d\", padlen)))"];
"1000770" [label="(Call,padlen = sshbuf_ptr(state->incoming_packet)[4])"];
"1000781" [label="(Identifier,padlen)"];
"1000779" [label="(Call,debug(\"input: padlen %d\", padlen))"];
"1000791" [label="(Identifier,r)"];
"1000784" [label="(Identifier,padlen)"];
"1000793" [label="(Identifier,ssh)"];
"1000772" [label="(Call,sshbuf_ptr(state->incoming_packet)[4])"];
"1000800" [label="(Call,ssh_packet_write_wait(ssh))"];
"1000797" [label="(Call,(r = ssh_packet_write_wait(ssh)) != 0)"];
"1000674" [label="(Call,ssh_packet_start_discard(ssh, enc, mac,\n\t\t\t    state->packlen, PACKET_MAX_SIZE - need))"];
"1000782" [label="(ControlStructure,if (padlen < 4))"];
"1000787" [label="(ControlStructure,if ((r = sshpkt_disconnect(ssh,\n\t\t    \"Corrupted padlen %d on input.\", padlen)) != 0 ||\n\t\t    (r = ssh_packet_write_wait(ssh)) != 0))"];
"1000783" [label="(Call,padlen < 4)"];
"1000111" [label="(MethodParameterIn,struct ssh *ssh)"];
"1000801" [label="(Identifier,ssh)"];
"1000936" [label="(Call,ssh_set_newkeys(ssh, MODE_IN))"];
"1000785" [label="(Literal,4)"];
"1000803" [label="(Return,return r;)"];
"1000310" [label="(Call,sshpkt_disconnect(ssh, \"Packet corrupt\"))"];
"1000913" [label="(Call,sshpkt_disconnect(ssh,\n\t\t    \"Invalid ssh2 packet type: %d\", *typep))"];
"1000495" [label="(Call,ssh_packet_start_discard(ssh, enc, mac,\n\t\t    state->packlen, PACKET_MAX_SIZE - block_size))"];
"1000798" [label="(Call,r = ssh_packet_write_wait(ssh))"];
"1000806" [label="(Identifier,SSH_ERR_CONN_CORRUPT)"];
"1000794" [label="(Literal,\"Corrupted padlen %d on input.\")"];
"1000788" [label="(Call,(r = sshpkt_disconnect(ssh,\n\t\t    \"Corrupted padlen %d on input.\", padlen)) != 0 ||\n\t\t    (r = ssh_packet_write_wait(ssh)) != 0)"];
"1000780" [label="(Literal,\"input: padlen %d\")"];
"1000976" [label="(MethodReturn,RET)"];
"1000823" [label="(Call,sshbuf_consume_end(state->incoming_packet, padlen))"];
"1000792" [label="(Call,sshpkt_disconnect(ssh,\n\t\t    \"Corrupted padlen %d on input.\", padlen))"];
"1000790" [label="(Call,r = sshpkt_disconnect(ssh,\n\t\t    \"Corrupted padlen %d on input.\", padlen))"];
"1000114" [label="(Block,)"];
"1000799" [label="(Identifier,r)"];
"1000789" [label="(Call,(r = sshpkt_disconnect(ssh,\n\t\t    \"Corrupted padlen %d on input.\", padlen)) != 0)"];
"1000802" [label="(Literal,0)"];
"1000771" [label="(Identifier,padlen)"];
"1000852" [label="(Call,uncompress_buffer(ssh, state->incoming_packet,\n\t\t    state->compression_buffer))"];
"1000804" [label="(Identifier,r)"];
"1000795" [label="(Identifier,padlen)"];
"1000426" [label="(Call,ssh_packet_start_discard(ssh, enc, mac,\n\t\t\t    state->packlen, PACKET_MAX_SIZE))"];
"1000800" -> "1000798"  [label="AST: "];
"1000800" -> "1000801"  [label="CFG: "];
"1000801" -> "1000800"  [label="AST: "];
"1000798" -> "1000800"  [label="CFG: "];
"1000800" -> "1000976"  [label="DDG: "];
"1000800" -> "1000797"  [label="DDG: "];
"1000800" -> "1000798"  [label="DDG: "];
"1000792" -> "1000800"  [label="DDG: "];
"1000111" -> "1000800"  [label="DDG: "];
"1000792" -> "1000790"  [label="AST: "];
"1000792" -> "1000795"  [label="CFG: "];
"1000793" -> "1000792"  [label="AST: "];
"1000794" -> "1000792"  [label="AST: "];
"1000795" -> "1000792"  [label="AST: "];
"1000790" -> "1000792"  [label="CFG: "];
"1000792" -> "1000976"  [label="DDG: "];
"1000792" -> "1000976"  [label="DDG: "];
"1000792" -> "1000789"  [label="DDG: "];
"1000792" -> "1000789"  [label="DDG: "];
"1000792" -> "1000789"  [label="DDG: "];
"1000792" -> "1000790"  [label="DDG: "];
"1000792" -> "1000790"  [label="DDG: "];
"1000792" -> "1000790"  [label="DDG: "];
"1000111" -> "1000792"  [label="DDG: "];
"1000783" -> "1000792"  [label="DDG: "];
"1000111" -> "1000110"  [label="AST: "];
"1000111" -> "1000976"  [label="DDG: "];
"1000111" -> "1000310"  [label="DDG: "];
"1000111" -> "1000426"  [label="DDG: "];
"1000111" -> "1000495"  [label="DDG: "];
"1000111" -> "1000674"  [label="DDG: "];
"1000111" -> "1000852"  [label="DDG: "];
"1000111" -> "1000913"  [label="DDG: "];
"1000111" -> "1000922"  [label="DDG: "];
"1000111" -> "1000936"  [label="DDG: "];
"1000111" -> "1000952"  [label="DDG: "];
"1000783" -> "1000782"  [label="AST: "];
"1000783" -> "1000785"  [label="CFG: "];
"1000784" -> "1000783"  [label="AST: "];
"1000785" -> "1000783"  [label="AST: "];
"1000791" -> "1000783"  [label="CFG: "];
"1000811" -> "1000783"  [label="CFG: "];
"1000783" -> "1000976"  [label="DDG: "];
"1000783" -> "1000976"  [label="DDG: "];
"1000779" -> "1000783"  [label="DDG: "];
"1000783" -> "1000823"  [label="DDG: "];
"1000779" -> "1000778"  [label="AST: "];
"1000779" -> "1000781"  [label="CFG: "];
"1000780" -> "1000779"  [label="AST: "];
"1000781" -> "1000779"  [label="AST: "];
"1000778" -> "1000779"  [label="CFG: "];
"1000779" -> "1000778"  [label="DDG: "];
"1000779" -> "1000778"  [label="DDG: "];
"1000770" -> "1000779"  [label="DDG: "];
"1000770" -> "1000114"  [label="AST: "];
"1000770" -> "1000772"  [label="CFG: "];
"1000771" -> "1000770"  [label="AST: "];
"1000772" -> "1000770"  [label="AST: "];
"1000780" -> "1000770"  [label="CFG: "];
"1000770" -> "1000976"  [label="DDG: "];
"1000797" -> "1000788"  [label="AST: "];
"1000797" -> "1000802"  [label="CFG: "];
"1000798" -> "1000797"  [label="AST: "];
"1000802" -> "1000797"  [label="AST: "];
"1000788" -> "1000797"  [label="CFG: "];
"1000797" -> "1000788"  [label="DDG: "];
"1000798" -> "1000797"  [label="DDG: "];
"1000788" -> "1000787"  [label="AST: "];
"1000788" -> "1000789"  [label="CFG: "];
"1000789" -> "1000788"  [label="AST: "];
"1000804" -> "1000788"  [label="CFG: "];
"1000806" -> "1000788"  [label="CFG: "];
"1000788" -> "1000976"  [label="DDG: "];
"1000788" -> "1000976"  [label="DDG: "];
"1000788" -> "1000976"  [label="DDG: "];
"1000789" -> "1000788"  [label="DDG: "];
"1000799" -> "1000798"  [label="AST: "];
"1000802" -> "1000798"  [label="CFG: "];
"1000798" -> "1000976"  [label="DDG: "];
"1000798" -> "1000976"  [label="DDG: "];
"1000798" -> "1000803"  [label="DDG: "];
"1000803" -> "1000787"  [label="AST: "];
"1000803" -> "1000804"  [label="CFG: "];
"1000804" -> "1000803"  [label="AST: "];
"1000976" -> "1000803"  [label="CFG: "];
"1000803" -> "1000976"  [label="DDG: "];
"1000804" -> "1000803"  [label="DDG: "];
"1000790" -> "1000803"  [label="DDG: "];
}
