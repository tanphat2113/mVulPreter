digraph "0_mindrot_2fecfd486bdba9f51b3a789277bb0733ca36e1c0@API" {
"1000358" [label="(Call,r = cipher_crypt(&state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0))"];
"1000360" [label="(Call,cipher_crypt(&state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0))"];
"1000371" [label="(Call,sshbuf_ptr(state->input))"];
"1000332" [label="(Call,sshbuf_len(state->input))"];
"1000347" [label="(Call,sshbuf_reserve(state->incoming_packet, block_size,\n\t\t    &cp))"];
"1000339" [label="(Call,sshbuf_reset(state->incoming_packet))"];
"1000331" [label="(Call,sshbuf_len(state->input) < block_size)"];
"1000221" [label="(Call,block_size = enc ? enc->block_size : 8)"];
"1000357" [label="(Call,(r = cipher_crypt(&state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0)) != 0)"];
"1000974" [label="(Return,return r;)"];
"1000365" [label="(Call,state->p_send.seqnr)"];
"1000438" [label="(Call,sshbuf_consume(state->input, block_size))"];
"1000336" [label="(Identifier,block_size)"];
"1000344" [label="(Call,(r = sshbuf_reserve(state->incoming_packet, block_size,\n\t\t    &cp)) != 0)"];
"1000694" [label="(Call,r = sshbuf_consume(state->input, mac->mac_len))"];
"1000810" [label="(Call,r = sshbuf_consume(state->incoming_packet, 4 + 1))"];
"1000566" [label="(Call,sshbuf_reserve(state->incoming_packet, aadlen + need,\n\t    &cp))"];
"1000955" [label="(Call,r = 0)"];
"1000330" [label="(ControlStructure,if (sshbuf_len(state->input) < block_size))"];
"1000348" [label="(Call,state->incoming_packet)"];
"1000436" [label="(Call,r = sshbuf_consume(state->input, block_size))"];
"1000375" [label="(Identifier,block_size)"];
"1000359" [label="(Identifier,r)"];
"1000332" [label="(Call,sshbuf_len(state->input))"];
"1000346" [label="(Identifier,r)"];
"1000223" [label="(Call,enc ? enc->block_size : 8)"];
"1000630" [label="(Call,r = mac_compute(mac, state->p_read.seqnr,\n\t\t\t    sshbuf_ptr(state->incoming_packet),\n\t\t\t    sshbuf_len(state->incoming_packet),\n\t\t\t    macbuf, sizeof(macbuf)))"];
"1000888" [label="(Call,r = sshbuf_get_u8(state->incoming_packet, typep))"];
"1000358" [label="(Call,r = cipher_crypt(&state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0))"];
"1000467" [label="(Call,state->packlen - block_size)"];
"1000868" [label="(Call,r = sshbuf_putb(state->incoming_packet,\n\t\t    state->compression_buffer))"];
"1000541" [label="(Call,r = mac_compute(mac, state->p_read.seqnr,\n\t\t    sshbuf_ptr(state->input), aadlen + need,\n\t\t    macbuf, sizeof(macbuf)))"];
"1000351" [label="(Identifier,block_size)"];
"1000370" [label="(Identifier,cp)"];
"1000347" [label="(Call,sshbuf_reserve(state->incoming_packet, block_size,\n\t\t    &cp))"];
"1000850" [label="(Call,r = uncompress_buffer(ssh, state->incoming_packet,\n\t\t    state->compression_buffer))"];
"1000357" [label="(Call,(r = cipher_crypt(&state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0)) != 0)"];
"1000356" [label="(ControlStructure,if ((r = cipher_crypt(&state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0)) != 0))"];
"1000331" [label="(Call,sshbuf_len(state->input) < block_size)"];
"1000377" [label="(Literal,0)"];
"1000222" [label="(Identifier,block_size)"];
"1000382" [label="(Identifier,state)"];
"1000378" [label="(Literal,0)"];
"1000934" [label="(Call,r = ssh_set_newkeys(ssh, MODE_IN))"];
"1000221" [label="(Call,block_size = enc ? enc->block_size : 8)"];
"1000230" [label="(Identifier,aadlen)"];
"1000407" [label="(Call,sshbuf_dump(state->input, stderr))"];
"1000339" [label="(Call,sshbuf_reset(state->incoming_packet))"];
"1000371" [label="(Call,sshbuf_ptr(state->input))"];
"1000376" [label="(Literal,0)"];
"1000340" [label="(Call,state->incoming_packet)"];
"1000473" [label="(Call,debug(\"partial packet: block %d, need %d, maclen %d, authlen %d,\"\n\t    \" aadlen %d\", block_size, need, maclen, authlen, aadlen))"];
"1000950" [label="(Call,r = ssh_packet_enable_delayed_compress(ssh))"];
"1000564" [label="(Call,r = sshbuf_reserve(state->incoming_packet, aadlen + need,\n\t    &cp))"];
"1000345" [label="(Call,r = sshbuf_reserve(state->incoming_packet, block_size,\n\t\t    &cp))"];
"1000333" [label="(Call,state->input)"];
"1000341" [label="(Identifier,state)"];
"1000974" [label="(Return,return r;)"];
"1000329" [label="(Block,)"];
"1000976" [label="(MethodReturn,RET)"];
"1000360" [label="(Call,cipher_crypt(&state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0))"];
"1000821" [label="(Call,r = sshbuf_consume_end(state->incoming_packet, padlen))"];
"1000114" [label="(Block,)"];
"1000352" [label="(Call,&cp)"];
"1000338" [label="(Literal,0)"];
"1000603" [label="(Call,r = sshbuf_consume(state->input, aadlen + need + authlen))"];
"1000361" [label="(Call,&state->receive_context)"];
"1000385" [label="(Call,sshbuf_ptr(state->incoming_packet))"];
"1000379" [label="(ControlStructure,goto out;)"];
"1000579" [label="(Call,r = cipher_crypt(&state->receive_context, state->p_read.seqnr, cp,\n\t    sshbuf_ptr(state->input), need, aadlen, authlen))"];
"1000372" [label="(Call,state->input)"];
"1000975" [label="(Identifier,r)"];
"1000581" [label="(Call,cipher_crypt(&state->receive_context, state->p_read.seqnr, cp,\n\t    sshbuf_ptr(state->input), need, aadlen, authlen))"];
"1000358" -> "1000357"  [label="AST: "];
"1000358" -> "1000360"  [label="CFG: "];
"1000359" -> "1000358"  [label="AST: "];
"1000360" -> "1000358"  [label="AST: "];
"1000378" -> "1000358"  [label="CFG: "];
"1000358" -> "1000976"  [label="DDG: cipher_crypt(&state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0)"];
"1000358" -> "1000976"  [label="DDG: r"];
"1000358" -> "1000357"  [label="DDG: r"];
"1000360" -> "1000358"  [label="DDG: block_size"];
"1000360" -> "1000358"  [label="DDG: 0"];
"1000360" -> "1000358"  [label="DDG: &state->receive_context"];
"1000360" -> "1000358"  [label="DDG: sshbuf_ptr(state->input)"];
"1000360" -> "1000358"  [label="DDG: cp"];
"1000360" -> "1000358"  [label="DDG: state->p_send.seqnr"];
"1000358" -> "1000974"  [label="DDG: r"];
"1000360" -> "1000377"  [label="CFG: "];
"1000361" -> "1000360"  [label="AST: "];
"1000365" -> "1000360"  [label="AST: "];
"1000370" -> "1000360"  [label="AST: "];
"1000371" -> "1000360"  [label="AST: "];
"1000375" -> "1000360"  [label="AST: "];
"1000376" -> "1000360"  [label="AST: "];
"1000377" -> "1000360"  [label="AST: "];
"1000360" -> "1000976"  [label="DDG: state->p_send.seqnr"];
"1000360" -> "1000976"  [label="DDG: block_size"];
"1000360" -> "1000976"  [label="DDG: &state->receive_context"];
"1000360" -> "1000976"  [label="DDG: cp"];
"1000360" -> "1000976"  [label="DDG: sshbuf_ptr(state->input)"];
"1000360" -> "1000357"  [label="DDG: block_size"];
"1000360" -> "1000357"  [label="DDG: 0"];
"1000360" -> "1000357"  [label="DDG: &state->receive_context"];
"1000360" -> "1000357"  [label="DDG: sshbuf_ptr(state->input)"];
"1000360" -> "1000357"  [label="DDG: cp"];
"1000360" -> "1000357"  [label="DDG: state->p_send.seqnr"];
"1000371" -> "1000360"  [label="DDG: state->input"];
"1000347" -> "1000360"  [label="DDG: block_size"];
"1000360" -> "1000438"  [label="DDG: block_size"];
"1000360" -> "1000581"  [label="DDG: &state->receive_context"];
"1000360" -> "1000581"  [label="DDG: cp"];
"1000371" -> "1000372"  [label="CFG: "];
"1000372" -> "1000371"  [label="AST: "];
"1000375" -> "1000371"  [label="CFG: "];
"1000371" -> "1000976"  [label="DDG: state->input"];
"1000332" -> "1000371"  [label="DDG: state->input"];
"1000371" -> "1000407"  [label="DDG: state->input"];
"1000371" -> "1000438"  [label="DDG: state->input"];
"1000332" -> "1000331"  [label="AST: "];
"1000332" -> "1000333"  [label="CFG: "];
"1000333" -> "1000332"  [label="AST: "];
"1000336" -> "1000332"  [label="CFG: "];
"1000332" -> "1000976"  [label="DDG: state->input"];
"1000332" -> "1000331"  [label="DDG: state->input"];
"1000347" -> "1000345"  [label="AST: "];
"1000347" -> "1000352"  [label="CFG: "];
"1000348" -> "1000347"  [label="AST: "];
"1000351" -> "1000347"  [label="AST: "];
"1000352" -> "1000347"  [label="AST: "];
"1000345" -> "1000347"  [label="CFG: "];
"1000347" -> "1000976"  [label="DDG: block_size"];
"1000347" -> "1000976"  [label="DDG: state->incoming_packet"];
"1000347" -> "1000976"  [label="DDG: &cp"];
"1000347" -> "1000344"  [label="DDG: state->incoming_packet"];
"1000347" -> "1000344"  [label="DDG: block_size"];
"1000347" -> "1000344"  [label="DDG: &cp"];
"1000347" -> "1000345"  [label="DDG: state->incoming_packet"];
"1000347" -> "1000345"  [label="DDG: block_size"];
"1000347" -> "1000345"  [label="DDG: &cp"];
"1000339" -> "1000347"  [label="DDG: state->incoming_packet"];
"1000331" -> "1000347"  [label="DDG: block_size"];
"1000347" -> "1000385"  [label="DDG: state->incoming_packet"];
"1000347" -> "1000566"  [label="DDG: &cp"];
"1000339" -> "1000329"  [label="AST: "];
"1000339" -> "1000340"  [label="CFG: "];
"1000340" -> "1000339"  [label="AST: "];
"1000346" -> "1000339"  [label="CFG: "];
"1000339" -> "1000976"  [label="DDG: sshbuf_reset(state->incoming_packet)"];
"1000331" -> "1000330"  [label="AST: "];
"1000331" -> "1000336"  [label="CFG: "];
"1000336" -> "1000331"  [label="AST: "];
"1000338" -> "1000331"  [label="CFG: "];
"1000341" -> "1000331"  [label="CFG: "];
"1000331" -> "1000976"  [label="DDG: sshbuf_len(state->input) < block_size"];
"1000331" -> "1000976"  [label="DDG: block_size"];
"1000331" -> "1000976"  [label="DDG: sshbuf_len(state->input)"];
"1000221" -> "1000331"  [label="DDG: block_size"];
"1000221" -> "1000114"  [label="AST: "];
"1000221" -> "1000223"  [label="CFG: "];
"1000222" -> "1000221"  [label="AST: "];
"1000223" -> "1000221"  [label="AST: "];
"1000230" -> "1000221"  [label="CFG: "];
"1000221" -> "1000976"  [label="DDG: enc ? enc->block_size : 8"];
"1000221" -> "1000976"  [label="DDG: block_size"];
"1000221" -> "1000467"  [label="DDG: block_size"];
"1000221" -> "1000473"  [label="DDG: block_size"];
"1000357" -> "1000356"  [label="AST: "];
"1000357" -> "1000378"  [label="CFG: "];
"1000378" -> "1000357"  [label="AST: "];
"1000379" -> "1000357"  [label="CFG: "];
"1000382" -> "1000357"  [label="CFG: "];
"1000357" -> "1000976"  [label="DDG: (r = cipher_crypt(&state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0)) != 0"];
"1000974" -> "1000114"  [label="AST: "];
"1000974" -> "1000975"  [label="CFG: "];
"1000975" -> "1000974"  [label="AST: "];
"1000976" -> "1000974"  [label="CFG: "];
"1000974" -> "1000976"  [label="DDG: <RET>"];
"1000975" -> "1000974"  [label="DDG: r"];
"1000850" -> "1000974"  [label="DDG: r"];
"1000579" -> "1000974"  [label="DDG: r"];
"1000694" -> "1000974"  [label="DDG: r"];
"1000934" -> "1000974"  [label="DDG: r"];
"1000436" -> "1000974"  [label="DDG: r"];
"1000630" -> "1000974"  [label="DDG: r"];
"1000603" -> "1000974"  [label="DDG: r"];
"1000810" -> "1000974"  [label="DDG: r"];
"1000821" -> "1000974"  [label="DDG: r"];
"1000345" -> "1000974"  [label="DDG: r"];
"1000950" -> "1000974"  [label="DDG: r"];
"1000541" -> "1000974"  [label="DDG: r"];
"1000564" -> "1000974"  [label="DDG: r"];
"1000955" -> "1000974"  [label="DDG: r"];
"1000888" -> "1000974"  [label="DDG: r"];
"1000868" -> "1000974"  [label="DDG: r"];
}
