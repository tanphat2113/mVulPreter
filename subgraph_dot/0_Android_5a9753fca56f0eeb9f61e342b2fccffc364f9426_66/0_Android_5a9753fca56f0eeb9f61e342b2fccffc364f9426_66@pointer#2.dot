digraph "0_Android_5a9753fca56f0eeb9f61e342b2fccffc364f9426_66@pointer" {
"1000116" [label="(Call,img1->cs == img2->cs)"];
"1000115" [label="(Call,(img1->cs == img2->cs) &&\n                (img1->d_w == img2->d_w) &&\n                (img1->d_h == img2->d_h))"];
"1000107" [label="(Call,(img1->fmt == img2->fmt) &&\n               (img1->cs == img2->cs) &&\n                (img1->d_w == img2->d_w) &&\n                (img1->d_h == img2->d_h))"];
"1000105" [label="(Call,match = (img1->fmt == img2->fmt) &&\n               (img1->cs == img2->cs) &&\n                (img1->d_w == img2->d_w) &&\n                (img1->d_h == img2->d_h))"];
"1000162" [label="(Call,(memcmp(img1->planes[VPX_PLANE_Y] + i * img1->stride[VPX_PLANE_Y],\n                    img2->planes[VPX_PLANE_Y] + i * img2->stride[VPX_PLANE_Y],\n                    width_y) == 0) && match)"];
"1000160" [label="(Call,match = (memcmp(img1->planes[VPX_PLANE_Y] + i * img1->stride[VPX_PLANE_Y],\n                    img2->planes[VPX_PLANE_Y] + i * img2->stride[VPX_PLANE_Y],\n                    width_y) == 0) && match)"];
"1000225" [label="(Call,(memcmp(img1->planes[VPX_PLANE_U] + i * img1->stride[VPX_PLANE_U],\n                    img2->planes[VPX_PLANE_U] + i * img2->stride[VPX_PLANE_U],\n                    width_uv) == 0) && match)"];
"1000223" [label="(Call,match = (memcmp(img1->planes[VPX_PLANE_U] + i * img1->stride[VPX_PLANE_U],\n                    img2->planes[VPX_PLANE_U] + i * img2->stride[VPX_PLANE_U],\n                    width_uv) == 0) && match)"];
"1000268" [label="(Call,(memcmp(img1->planes[VPX_PLANE_V] + i * img1->stride[VPX_PLANE_V],\n                    img2->planes[VPX_PLANE_V] + i * img2->stride[VPX_PLANE_V],\n                    width_uv) == 0) && match)"];
"1000266" [label="(Call,match = (memcmp(img1->planes[VPX_PLANE_V] + i * img1->stride[VPX_PLANE_V],\n                    img2->planes[VPX_PLANE_V] + i * img2->stride[VPX_PLANE_V],\n                    width_uv) == 0) && match)"];
"1000300" [label="(Return,return match;)"];
"1000160" [label="(Call,match = (memcmp(img1->planes[VPX_PLANE_Y] + i * img1->stride[VPX_PLANE_Y],\n                    img2->planes[VPX_PLANE_Y] + i * img2->stride[VPX_PLANE_Y],\n                    width_y) == 0) && match)"];
"1000193" [label="(Identifier,match)"];
"1000301" [label="(Identifier,match)"];
"1000223" [label="(Call,match = (memcmp(img1->planes[VPX_PLANE_U] + i * img1->stride[VPX_PLANE_U],\n                    img2->planes[VPX_PLANE_U] + i * img2->stride[VPX_PLANE_U],\n                    width_uv) == 0) && match)"];
"1000126" [label="(Identifier,img1)"];
"1000151" [label="(ControlStructure,for (i = 0; i < height_y; ++i))"];
"1000225" [label="(Call,(memcmp(img1->planes[VPX_PLANE_U] + i * img1->stride[VPX_PLANE_U],\n                    img2->planes[VPX_PLANE_U] + i * img2->stride[VPX_PLANE_U],\n                    width_uv) == 0) && match)"];
"1000107" [label="(Call,(img1->fmt == img2->fmt) &&\n               (img1->cs == img2->cs) &&\n                (img1->d_w == img2->d_w) &&\n                (img1->d_h == img2->d_h))"];
"1000106" [label="(Identifier,match)"];
"1000103" [label="(Block,)"];
"1000105" [label="(Call,match = (img1->fmt == img2->fmt) &&\n               (img1->cs == img2->cs) &&\n                (img1->d_w == img2->d_w) &&\n                (img1->d_h == img2->d_h))"];
"1000115" [label="(Call,(img1->cs == img2->cs) &&\n                (img1->d_w == img2->d_w) &&\n                (img1->d_h == img2->d_h))"];
"1000140" [label="(Identifier,width_y)"];
"1000268" [label="(Call,(memcmp(img1->planes[VPX_PLANE_V] + i * img1->stride[VPX_PLANE_V],\n                    img2->planes[VPX_PLANE_V] + i * img2->stride[VPX_PLANE_V],\n                    width_uv) == 0) && match)"];
"1000299" [label="(Identifier,match)"];
"1000162" [label="(Call,(memcmp(img1->planes[VPX_PLANE_Y] + i * img1->stride[VPX_PLANE_Y],\n                    img2->planes[VPX_PLANE_Y] + i * img2->stride[VPX_PLANE_Y],\n                    width_y) == 0) && match)"];
"1000265" [label="(Identifier,i)"];
"1000266" [label="(Call,match = (memcmp(img1->planes[VPX_PLANE_V] + i * img1->stride[VPX_PLANE_V],\n                    img2->planes[VPX_PLANE_V] + i * img2->stride[VPX_PLANE_V],\n                    width_uv) == 0) && match)"];
"1000116" [label="(Call,img1->cs == img2->cs)"];
"1000161" [label="(Identifier,match)"];
"1000214" [label="(ControlStructure,for (i = 0; i <  height_uv; ++i))"];
"1000269" [label="(Call,memcmp(img1->planes[VPX_PLANE_V] + i * img1->stride[VPX_PLANE_V],\n                    img2->planes[VPX_PLANE_V] + i * img2->stride[VPX_PLANE_V],\n                    width_uv) == 0)"];
"1000120" [label="(Call,img2->cs)"];
"1000159" [label="(Identifier,i)"];
"1000256" [label="(Identifier,match)"];
"1000117" [label="(Call,img1->cs)"];
"1000226" [label="(Call,memcmp(img1->planes[VPX_PLANE_U] + i * img1->stride[VPX_PLANE_U],\n                    img2->planes[VPX_PLANE_U] + i * img2->stride[VPX_PLANE_U],\n                    width_uv) == 0)"];
"1000267" [label="(Identifier,match)"];
"1000163" [label="(Call,memcmp(img1->planes[VPX_PLANE_Y] + i * img1->stride[VPX_PLANE_Y],\n                    img2->planes[VPX_PLANE_Y] + i * img2->stride[VPX_PLANE_Y],\n                    width_y) == 0)"];
"1000224" [label="(Identifier,match)"];
"1000108" [label="(Call,img1->fmt == img2->fmt)"];
"1000123" [label="(Call,(img1->d_w == img2->d_w) &&\n                (img1->d_h == img2->d_h))"];
"1000302" [label="(MethodReturn,static bool)"];
"1000257" [label="(ControlStructure,for (i = 0; i < height_uv; ++i))"];
"1000300" [label="(Return,return match;)"];
"1000222" [label="(Identifier,i)"];
"1000116" -> "1000115"  [label="AST: "];
"1000116" -> "1000120"  [label="CFG: "];
"1000117" -> "1000116"  [label="AST: "];
"1000120" -> "1000116"  [label="AST: "];
"1000126" -> "1000116"  [label="CFG: "];
"1000115" -> "1000116"  [label="CFG: "];
"1000116" -> "1000302"  [label="DDG: img1->cs"];
"1000116" -> "1000302"  [label="DDG: img2->cs"];
"1000116" -> "1000115"  [label="DDG: img1->cs"];
"1000116" -> "1000115"  [label="DDG: img2->cs"];
"1000115" -> "1000107"  [label="AST: "];
"1000115" -> "1000123"  [label="CFG: "];
"1000123" -> "1000115"  [label="AST: "];
"1000107" -> "1000115"  [label="CFG: "];
"1000115" -> "1000302"  [label="DDG: (img1->d_w == img2->d_w) &&\n                (img1->d_h == img2->d_h)"];
"1000115" -> "1000302"  [label="DDG: img1->cs == img2->cs"];
"1000115" -> "1000107"  [label="DDG: img1->cs == img2->cs"];
"1000115" -> "1000107"  [label="DDG: (img1->d_w == img2->d_w) &&\n                (img1->d_h == img2->d_h)"];
"1000123" -> "1000115"  [label="DDG: img1->d_w == img2->d_w"];
"1000123" -> "1000115"  [label="DDG: img1->d_h == img2->d_h"];
"1000107" -> "1000105"  [label="AST: "];
"1000107" -> "1000108"  [label="CFG: "];
"1000108" -> "1000107"  [label="AST: "];
"1000105" -> "1000107"  [label="CFG: "];
"1000107" -> "1000302"  [label="DDG: img1->fmt == img2->fmt"];
"1000107" -> "1000302"  [label="DDG: (img1->cs == img2->cs) &&\n                (img1->d_w == img2->d_w) &&\n                (img1->d_h == img2->d_h)"];
"1000107" -> "1000105"  [label="DDG: img1->fmt == img2->fmt"];
"1000107" -> "1000105"  [label="DDG: (img1->cs == img2->cs) &&\n                (img1->d_w == img2->d_w) &&\n                (img1->d_h == img2->d_h)"];
"1000108" -> "1000107"  [label="DDG: img1->fmt"];
"1000108" -> "1000107"  [label="DDG: img2->fmt"];
"1000105" -> "1000103"  [label="AST: "];
"1000106" -> "1000105"  [label="AST: "];
"1000140" -> "1000105"  [label="CFG: "];
"1000105" -> "1000302"  [label="DDG: (img1->fmt == img2->fmt) &&\n               (img1->cs == img2->cs) &&\n                (img1->d_w == img2->d_w) &&\n                (img1->d_h == img2->d_h)"];
"1000105" -> "1000302"  [label="DDG: match"];
"1000105" -> "1000162"  [label="DDG: match"];
"1000105" -> "1000225"  [label="DDG: match"];
"1000105" -> "1000268"  [label="DDG: match"];
"1000105" -> "1000300"  [label="DDG: match"];
"1000162" -> "1000160"  [label="AST: "];
"1000162" -> "1000163"  [label="CFG: "];
"1000162" -> "1000193"  [label="CFG: "];
"1000163" -> "1000162"  [label="AST: "];
"1000193" -> "1000162"  [label="AST: "];
"1000160" -> "1000162"  [label="CFG: "];
"1000162" -> "1000302"  [label="DDG: memcmp(img1->planes[VPX_PLANE_Y] + i * img1->stride[VPX_PLANE_Y],\n                    img2->planes[VPX_PLANE_Y] + i * img2->stride[VPX_PLANE_Y],\n                    width_y) == 0"];
"1000162" -> "1000160"  [label="DDG: memcmp(img1->planes[VPX_PLANE_Y] + i * img1->stride[VPX_PLANE_Y],\n                    img2->planes[VPX_PLANE_Y] + i * img2->stride[VPX_PLANE_Y],\n                    width_y) == 0"];
"1000162" -> "1000160"  [label="DDG: match"];
"1000163" -> "1000162"  [label="DDG: memcmp(img1->planes[VPX_PLANE_Y] + i * img1->stride[VPX_PLANE_Y],\n                    img2->planes[VPX_PLANE_Y] + i * img2->stride[VPX_PLANE_Y],\n                    width_y)"];
"1000163" -> "1000162"  [label="DDG: 0"];
"1000160" -> "1000162"  [label="DDG: match"];
"1000160" -> "1000151"  [label="AST: "];
"1000161" -> "1000160"  [label="AST: "];
"1000159" -> "1000160"  [label="CFG: "];
"1000160" -> "1000302"  [label="DDG: (memcmp(img1->planes[VPX_PLANE_Y] + i * img1->stride[VPX_PLANE_Y],\n                    img2->planes[VPX_PLANE_Y] + i * img2->stride[VPX_PLANE_Y],\n                    width_y) == 0) && match"];
"1000160" -> "1000302"  [label="DDG: match"];
"1000160" -> "1000225"  [label="DDG: match"];
"1000160" -> "1000268"  [label="DDG: match"];
"1000160" -> "1000300"  [label="DDG: match"];
"1000225" -> "1000223"  [label="AST: "];
"1000225" -> "1000226"  [label="CFG: "];
"1000225" -> "1000256"  [label="CFG: "];
"1000226" -> "1000225"  [label="AST: "];
"1000256" -> "1000225"  [label="AST: "];
"1000223" -> "1000225"  [label="CFG: "];
"1000225" -> "1000302"  [label="DDG: memcmp(img1->planes[VPX_PLANE_U] + i * img1->stride[VPX_PLANE_U],\n                    img2->planes[VPX_PLANE_U] + i * img2->stride[VPX_PLANE_U],\n                    width_uv) == 0"];
"1000225" -> "1000223"  [label="DDG: memcmp(img1->planes[VPX_PLANE_U] + i * img1->stride[VPX_PLANE_U],\n                    img2->planes[VPX_PLANE_U] + i * img2->stride[VPX_PLANE_U],\n                    width_uv) == 0"];
"1000225" -> "1000223"  [label="DDG: match"];
"1000226" -> "1000225"  [label="DDG: memcmp(img1->planes[VPX_PLANE_U] + i * img1->stride[VPX_PLANE_U],\n                    img2->planes[VPX_PLANE_U] + i * img2->stride[VPX_PLANE_U],\n                    width_uv)"];
"1000226" -> "1000225"  [label="DDG: 0"];
"1000223" -> "1000225"  [label="DDG: match"];
"1000223" -> "1000214"  [label="AST: "];
"1000224" -> "1000223"  [label="AST: "];
"1000222" -> "1000223"  [label="CFG: "];
"1000223" -> "1000302"  [label="DDG: (memcmp(img1->planes[VPX_PLANE_U] + i * img1->stride[VPX_PLANE_U],\n                    img2->planes[VPX_PLANE_U] + i * img2->stride[VPX_PLANE_U],\n                    width_uv) == 0) && match"];
"1000223" -> "1000302"  [label="DDG: match"];
"1000223" -> "1000268"  [label="DDG: match"];
"1000223" -> "1000300"  [label="DDG: match"];
"1000268" -> "1000266"  [label="AST: "];
"1000268" -> "1000269"  [label="CFG: "];
"1000268" -> "1000299"  [label="CFG: "];
"1000269" -> "1000268"  [label="AST: "];
"1000299" -> "1000268"  [label="AST: "];
"1000266" -> "1000268"  [label="CFG: "];
"1000268" -> "1000302"  [label="DDG: memcmp(img1->planes[VPX_PLANE_V] + i * img1->stride[VPX_PLANE_V],\n                    img2->planes[VPX_PLANE_V] + i * img2->stride[VPX_PLANE_V],\n                    width_uv) == 0"];
"1000268" -> "1000266"  [label="DDG: memcmp(img1->planes[VPX_PLANE_V] + i * img1->stride[VPX_PLANE_V],\n                    img2->planes[VPX_PLANE_V] + i * img2->stride[VPX_PLANE_V],\n                    width_uv) == 0"];
"1000268" -> "1000266"  [label="DDG: match"];
"1000269" -> "1000268"  [label="DDG: memcmp(img1->planes[VPX_PLANE_V] + i * img1->stride[VPX_PLANE_V],\n                    img2->planes[VPX_PLANE_V] + i * img2->stride[VPX_PLANE_V],\n                    width_uv)"];
"1000269" -> "1000268"  [label="DDG: 0"];
"1000266" -> "1000268"  [label="DDG: match"];
"1000266" -> "1000257"  [label="AST: "];
"1000267" -> "1000266"  [label="AST: "];
"1000265" -> "1000266"  [label="CFG: "];
"1000266" -> "1000302"  [label="DDG: (memcmp(img1->planes[VPX_PLANE_V] + i * img1->stride[VPX_PLANE_V],\n                    img2->planes[VPX_PLANE_V] + i * img2->stride[VPX_PLANE_V],\n                    width_uv) == 0) && match"];
"1000266" -> "1000302"  [label="DDG: match"];
"1000266" -> "1000300"  [label="DDG: match"];
"1000300" -> "1000103"  [label="AST: "];
"1000300" -> "1000301"  [label="CFG: "];
"1000301" -> "1000300"  [label="AST: "];
"1000302" -> "1000300"  [label="CFG: "];
"1000300" -> "1000302"  [label="DDG: <RET>"];
"1000301" -> "1000300"  [label="DDG: match"];
}
