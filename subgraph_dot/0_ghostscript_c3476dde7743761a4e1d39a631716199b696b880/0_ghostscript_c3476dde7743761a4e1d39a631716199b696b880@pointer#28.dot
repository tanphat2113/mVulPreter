digraph "0_ghostscript_c3476dde7743761a4e1d39a631716199b696b880@pointer" {
"1000576" [label="(Call,!pdev->is_ps2write)"];
"1000575" [label="(Call,!pdev->is_ps2write && !(locked && pdev->params.LockDistillerParams))"];
"1000571" [label="(Call,code == 0 && !pdev->is_ps2write && !(locked && pdev->params.LockDistillerParams))"];
"1000691" [label="(Call,pdev->is_ps2write && (code = param_read_bool(plist, \"ProduceDSC\", &pdev->ProduceDSC)) < 0)"];
"1001432" [label="(Call,pdev->Linearise && pdev->is_ps2write)"];
"1001451" [label="(Call,pdev->Linearise && pdev->OwnerPassword.size != 0)"];
"1000695" [label="(Call,(code = param_read_bool(plist, \"ProduceDSC\", &pdev->ProduceDSC)) < 0)"];
"1000715" [label="(Identifier,pdev)"];
"1000575" [label="(Call,!pdev->is_ps2write && !(locked && pdev->params.LockDistillerParams))"];
"1001455" [label="(Call,pdev->OwnerPassword.size != 0)"];
"1000576" [label="(Call,!pdev->is_ps2write)"];
"1000692" [label="(Call,pdev->is_ps2write)"];
"1001465" [label="(Identifier,pdev)"];
"1001450" [label="(ControlStructure,if (pdev->Linearise && pdev->OwnerPassword.size != 0))"];
"1001452" [label="(Call,pdev->Linearise)"];
"1001442" [label="(Identifier,pdev)"];
"1001432" [label="(Call,pdev->Linearise && pdev->is_ps2write)"];
"1001380" [label="(Call,pdev->OwnerPassword.size != 0 &&\n         memcmp(pdev->OwnerPassword.data, save_dev->OwnerPassword.data,\n         pdev->OwnerPassword.size) != 0)"];
"1000590" [label="(Identifier,pdev)"];
"1001551" [label="(MethodReturn,RET)"];
"1000572" [label="(Call,code == 0)"];
"1000595" [label="(Identifier,plist)"];
"1000571" [label="(Call,code == 0 && !pdev->is_ps2write && !(locked && pdev->params.LockDistillerParams))"];
"1000690" [label="(ControlStructure,if (pdev->is_ps2write && (code = param_read_bool(plist, \"ProduceDSC\", &pdev->ProduceDSC)) < 0))"];
"1000580" [label="(Call,!(locked && pdev->params.LockDistillerParams))"];
"1000577" [label="(Call,pdev->is_ps2write)"];
"1001436" [label="(Call,pdev->is_ps2write)"];
"1001451" [label="(Call,pdev->Linearise && pdev->OwnerPassword.size != 0)"];
"1001433" [label="(Call,pdev->Linearise)"];
"1000419" [label="(Call,!(locked && pdev->params.LockDistillerParams))"];
"1000582" [label="(Identifier,locked)"];
"1001453" [label="(Identifier,pdev)"];
"1000691" [label="(Call,pdev->is_ps2write && (code = param_read_bool(plist, \"ProduceDSC\", &pdev->ProduceDSC)) < 0)"];
"1001445" [label="(Call,pdev->Linearise = false)"];
"1001475" [label="(Identifier,pdev)"];
"1000708" [label="(Identifier,plist)"];
"1000570" [label="(ControlStructure,if (code == 0 && !pdev->is_ps2write && !(locked && pdev->params.LockDistillerParams)))"];
"1001431" [label="(ControlStructure,if (pdev->Linearise && pdev->is_ps2write))"];
"1000576" -> "1000575"  [label="AST: "];
"1000576" -> "1000577"  [label="CFG: "];
"1000577" -> "1000576"  [label="AST: "];
"1000582" -> "1000576"  [label="CFG: "];
"1000575" -> "1000576"  [label="CFG: "];
"1000576" -> "1001551"  [label="DDG: "];
"1000576" -> "1000575"  [label="DDG: "];
"1000576" -> "1000691"  [label="DDG: "];
"1000575" -> "1000571"  [label="AST: "];
"1000575" -> "1000580"  [label="CFG: "];
"1000580" -> "1000575"  [label="AST: "];
"1000571" -> "1000575"  [label="CFG: "];
"1000575" -> "1001551"  [label="DDG: "];
"1000575" -> "1001551"  [label="DDG: "];
"1000575" -> "1000571"  [label="DDG: "];
"1000575" -> "1000571"  [label="DDG: "];
"1000580" -> "1000575"  [label="DDG: "];
"1000419" -> "1000575"  [label="DDG: "];
"1000571" -> "1000570"  [label="AST: "];
"1000571" -> "1000572"  [label="CFG: "];
"1000572" -> "1000571"  [label="AST: "];
"1000590" -> "1000571"  [label="CFG: "];
"1000595" -> "1000571"  [label="CFG: "];
"1000571" -> "1001551"  [label="DDG: "];
"1000571" -> "1001551"  [label="DDG: "];
"1000571" -> "1001551"  [label="DDG: "];
"1000572" -> "1000571"  [label="DDG: "];
"1000572" -> "1000571"  [label="DDG: "];
"1000691" -> "1000690"  [label="AST: "];
"1000691" -> "1000692"  [label="CFG: "];
"1000691" -> "1000695"  [label="CFG: "];
"1000692" -> "1000691"  [label="AST: "];
"1000695" -> "1000691"  [label="AST: "];
"1000708" -> "1000691"  [label="CFG: "];
"1000715" -> "1000691"  [label="CFG: "];
"1000691" -> "1001551"  [label="DDG: "];
"1000691" -> "1001551"  [label="DDG: "];
"1000691" -> "1001551"  [label="DDG: "];
"1000695" -> "1000691"  [label="DDG: "];
"1000691" -> "1001432"  [label="DDG: "];
"1001432" -> "1001431"  [label="AST: "];
"1001432" -> "1001433"  [label="CFG: "];
"1001432" -> "1001436"  [label="CFG: "];
"1001433" -> "1001432"  [label="AST: "];
"1001436" -> "1001432"  [label="AST: "];
"1001442" -> "1001432"  [label="CFG: "];
"1001453" -> "1001432"  [label="CFG: "];
"1001432" -> "1001551"  [label="DDG: "];
"1001432" -> "1001551"  [label="DDG: "];
"1001432" -> "1001451"  [label="DDG: "];
"1001451" -> "1001450"  [label="AST: "];
"1001451" -> "1001452"  [label="CFG: "];
"1001451" -> "1001455"  [label="CFG: "];
"1001452" -> "1001451"  [label="AST: "];
"1001455" -> "1001451"  [label="AST: "];
"1001465" -> "1001451"  [label="CFG: "];
"1001475" -> "1001451"  [label="CFG: "];
"1001451" -> "1001551"  [label="DDG: "];
"1001451" -> "1001551"  [label="DDG: "];
"1001451" -> "1001551"  [label="DDG: "];
"1001445" -> "1001451"  [label="DDG: "];
"1001380" -> "1001451"  [label="DDG: "];
"1001455" -> "1001451"  [label="DDG: "];
"1001455" -> "1001451"  [label="DDG: "];
}
