digraph "0_mindrot_28652bca29046f62c7045e933e6b931de1d16737_0@API" {
"1000360" [label="(Call,r = cipher_crypt(state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0))"];
"1000362" [label="(Call,cipher_crypt(state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0))"];
"1000372" [label="(Call,sshbuf_ptr(state->input))"];
"1000334" [label="(Call,sshbuf_len(state->input))"];
"1000349" [label="(Call,sshbuf_reserve(state->incoming_packet, block_size,\n\t\t    &cp))"];
"1000341" [label="(Call,sshbuf_reset(state->incoming_packet))"];
"1000333" [label="(Call,sshbuf_len(state->input) < block_size)"];
"1000224" [label="(Call,block_size = enc ? enc->block_size : 8)"];
"1000359" [label="(Call,(r = cipher_crypt(state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0)) != 0)"];
"1000998" [label="(Return,return r;)"];
"1000990" [label="(Call,r = kex_start_rekex(ssh))"];
"1000346" [label="(Call,(r = sshbuf_reserve(state->incoming_packet, block_size,\n\t\t    &cp)) != 0)"];
"1000343" [label="(Identifier,state)"];
"1000999" [label="(Identifier,r)"];
"1000377" [label="(Literal,0)"];
"1000591" [label="(Call,r = cipher_crypt(state->receive_context, state->p_read.seqnr, cp,\n\t    sshbuf_ptr(state->input), need, aadlen, authlen))"];
"1000380" [label="(ControlStructure,goto out;)"];
"1000373" [label="(Call,state->input)"];
"1000957" [label="(Call,r = ssh_packet_enable_delayed_compress(ssh))"];
"1000593" [label="(Call,cipher_crypt(state->receive_context, state->p_read.seqnr, cp,\n\t    sshbuf_ptr(state->input), need, aadlen, authlen))"];
"1000568" [label="(Call,r == SSH_ERR_MAC_INVALID)"];
"1000874" [label="(Call,r = sshbuf_putb(state->incoming_packet,\n\t\t    state->compression_buffer))"];
"1000666" [label="(Call,r != SSH_ERR_MAC_INVALID)"];
"1000383" [label="(Identifier,state)"];
"1000435" [label="(Call,r = sshbuf_consume(state->input, block_size))"];
"1000332" [label="(ControlStructure,if (sshbuf_len(state->input) < block_size))"];
"1000437" [label="(Call,sshbuf_consume(state->input, block_size))"];
"1000347" [label="(Call,r = sshbuf_reserve(state->incoming_packet, block_size,\n\t\t    &cp))"];
"1000118" [label="(Block,)"];
"1000233" [label="(Identifier,aadlen)"];
"1000363" [label="(Call,state->receive_context)"];
"1000856" [label="(Call,r = uncompress_buffer(ssh, state->incoming_packet,\n\t\t    state->compression_buffer))"];
"1000962" [label="(Call,r = 0)"];
"1000386" [label="(Call,sshbuf_ptr(state->incoming_packet))"];
"1000361" [label="(Identifier,r)"];
"1000408" [label="(Call,sshbuf_dump(state->input, stderr))"];
"1000225" [label="(Identifier,block_size)"];
"1000224" [label="(Call,block_size = enc ? enc->block_size : 8)"];
"1000354" [label="(Call,&cp)"];
"1000348" [label="(Identifier,r)"];
"1000338" [label="(Identifier,block_size)"];
"1000466" [label="(Call,state->packlen - block_size)"];
"1000342" [label="(Call,state->incoming_packet)"];
"1000335" [label="(Call,state->input)"];
"1000226" [label="(Call,enc ? enc->block_size : 8)"];
"1000827" [label="(Call,r = sshbuf_consume_end(state->incoming_packet, padlen))"];
"1000362" [label="(Call,cipher_crypt(state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0))"];
"1000379" [label="(Literal,0)"];
"1000331" [label="(Block,)"];
"1000366" [label="(Call,state->p_send.seqnr)"];
"1000816" [label="(Call,r = sshbuf_consume(state->incoming_packet, 4 + 1))"];
"1000614" [label="(Call,r = sshbuf_consume(state->input, aadlen + need + authlen))"];
"1000372" [label="(Call,sshbuf_ptr(state->input))"];
"1000894" [label="(Call,r = sshbuf_get_u8(state->incoming_packet, typep))"];
"1000334" [label="(Call,sshbuf_len(state->input))"];
"1000358" [label="(ControlStructure,if ((r = cipher_crypt(state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0)) != 0))"];
"1001000" [label="(MethodReturn,RET)"];
"1000340" [label="(Literal,0)"];
"1000700" [label="(Call,r = sshbuf_consume(state->input, mac->mac_len))"];
"1000360" [label="(Call,r = cipher_crypt(state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0))"];
"1000341" [label="(Call,sshbuf_reset(state->incoming_packet))"];
"1000350" [label="(Call,state->incoming_packet)"];
"1000359" [label="(Call,(r = cipher_crypt(state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0)) != 0)"];
"1000472" [label="(Call,debug(\"partial packet: block %d, need %d, maclen %d, authlen %d,\"\n\t    \" aadlen %d\", block_size, need, maclen, authlen, aadlen))"];
"1000353" [label="(Identifier,block_size)"];
"1000578" [label="(Call,sshbuf_reserve(state->incoming_packet, aadlen + need,\n\t    &cp))"];
"1000576" [label="(Call,r = sshbuf_reserve(state->incoming_packet, aadlen + need,\n\t    &cp))"];
"1000378" [label="(Literal,0)"];
"1000998" [label="(Return,return r;)"];
"1000333" [label="(Call,sshbuf_len(state->input) < block_size)"];
"1000376" [label="(Identifier,block_size)"];
"1000371" [label="(Identifier,cp)"];
"1000349" [label="(Call,sshbuf_reserve(state->incoming_packet, block_size,\n\t\t    &cp))"];
"1000360" -> "1000359"  [label="AST: "];
"1000360" -> "1000362"  [label="CFG: "];
"1000361" -> "1000360"  [label="AST: "];
"1000362" -> "1000360"  [label="AST: "];
"1000379" -> "1000360"  [label="CFG: "];
"1000360" -> "1001000"  [label="DDG: r"];
"1000360" -> "1001000"  [label="DDG: cipher_crypt(state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0)"];
"1000360" -> "1000359"  [label="DDG: r"];
"1000362" -> "1000360"  [label="DDG: cp"];
"1000362" -> "1000360"  [label="DDG: state->receive_context"];
"1000362" -> "1000360"  [label="DDG: 0"];
"1000362" -> "1000360"  [label="DDG: state->p_send.seqnr"];
"1000362" -> "1000360"  [label="DDG: block_size"];
"1000362" -> "1000360"  [label="DDG: sshbuf_ptr(state->input)"];
"1000360" -> "1000998"  [label="DDG: r"];
"1000362" -> "1000378"  [label="CFG: "];
"1000363" -> "1000362"  [label="AST: "];
"1000366" -> "1000362"  [label="AST: "];
"1000371" -> "1000362"  [label="AST: "];
"1000372" -> "1000362"  [label="AST: "];
"1000376" -> "1000362"  [label="AST: "];
"1000377" -> "1000362"  [label="AST: "];
"1000378" -> "1000362"  [label="AST: "];
"1000362" -> "1001000"  [label="DDG: block_size"];
"1000362" -> "1001000"  [label="DDG: state->p_send.seqnr"];
"1000362" -> "1001000"  [label="DDG: sshbuf_ptr(state->input)"];
"1000362" -> "1001000"  [label="DDG: cp"];
"1000362" -> "1001000"  [label="DDG: state->receive_context"];
"1000362" -> "1000359"  [label="DDG: cp"];
"1000362" -> "1000359"  [label="DDG: state->receive_context"];
"1000362" -> "1000359"  [label="DDG: 0"];
"1000362" -> "1000359"  [label="DDG: state->p_send.seqnr"];
"1000362" -> "1000359"  [label="DDG: block_size"];
"1000362" -> "1000359"  [label="DDG: sshbuf_ptr(state->input)"];
"1000372" -> "1000362"  [label="DDG: state->input"];
"1000349" -> "1000362"  [label="DDG: block_size"];
"1000362" -> "1000437"  [label="DDG: block_size"];
"1000362" -> "1000593"  [label="DDG: state->receive_context"];
"1000362" -> "1000593"  [label="DDG: cp"];
"1000372" -> "1000373"  [label="CFG: "];
"1000373" -> "1000372"  [label="AST: "];
"1000376" -> "1000372"  [label="CFG: "];
"1000372" -> "1001000"  [label="DDG: state->input"];
"1000334" -> "1000372"  [label="DDG: state->input"];
"1000372" -> "1000408"  [label="DDG: state->input"];
"1000372" -> "1000437"  [label="DDG: state->input"];
"1000334" -> "1000333"  [label="AST: "];
"1000334" -> "1000335"  [label="CFG: "];
"1000335" -> "1000334"  [label="AST: "];
"1000338" -> "1000334"  [label="CFG: "];
"1000334" -> "1001000"  [label="DDG: state->input"];
"1000334" -> "1000333"  [label="DDG: state->input"];
"1000349" -> "1000347"  [label="AST: "];
"1000349" -> "1000354"  [label="CFG: "];
"1000350" -> "1000349"  [label="AST: "];
"1000353" -> "1000349"  [label="AST: "];
"1000354" -> "1000349"  [label="AST: "];
"1000347" -> "1000349"  [label="CFG: "];
"1000349" -> "1001000"  [label="DDG: block_size"];
"1000349" -> "1001000"  [label="DDG: state->incoming_packet"];
"1000349" -> "1001000"  [label="DDG: &cp"];
"1000349" -> "1000346"  [label="DDG: state->incoming_packet"];
"1000349" -> "1000346"  [label="DDG: block_size"];
"1000349" -> "1000346"  [label="DDG: &cp"];
"1000349" -> "1000347"  [label="DDG: state->incoming_packet"];
"1000349" -> "1000347"  [label="DDG: block_size"];
"1000349" -> "1000347"  [label="DDG: &cp"];
"1000341" -> "1000349"  [label="DDG: state->incoming_packet"];
"1000333" -> "1000349"  [label="DDG: block_size"];
"1000349" -> "1000386"  [label="DDG: state->incoming_packet"];
"1000349" -> "1000578"  [label="DDG: &cp"];
"1000341" -> "1000331"  [label="AST: "];
"1000341" -> "1000342"  [label="CFG: "];
"1000342" -> "1000341"  [label="AST: "];
"1000348" -> "1000341"  [label="CFG: "];
"1000341" -> "1001000"  [label="DDG: sshbuf_reset(state->incoming_packet)"];
"1000333" -> "1000332"  [label="AST: "];
"1000333" -> "1000338"  [label="CFG: "];
"1000338" -> "1000333"  [label="AST: "];
"1000340" -> "1000333"  [label="CFG: "];
"1000343" -> "1000333"  [label="CFG: "];
"1000333" -> "1001000"  [label="DDG: sshbuf_len(state->input)"];
"1000333" -> "1001000"  [label="DDG: sshbuf_len(state->input) < block_size"];
"1000333" -> "1001000"  [label="DDG: block_size"];
"1000224" -> "1000333"  [label="DDG: block_size"];
"1000224" -> "1000118"  [label="AST: "];
"1000224" -> "1000226"  [label="CFG: "];
"1000225" -> "1000224"  [label="AST: "];
"1000226" -> "1000224"  [label="AST: "];
"1000233" -> "1000224"  [label="CFG: "];
"1000224" -> "1001000"  [label="DDG: block_size"];
"1000224" -> "1001000"  [label="DDG: enc ? enc->block_size : 8"];
"1000224" -> "1000466"  [label="DDG: block_size"];
"1000224" -> "1000472"  [label="DDG: block_size"];
"1000359" -> "1000358"  [label="AST: "];
"1000359" -> "1000379"  [label="CFG: "];
"1000379" -> "1000359"  [label="AST: "];
"1000380" -> "1000359"  [label="CFG: "];
"1000383" -> "1000359"  [label="CFG: "];
"1000359" -> "1001000"  [label="DDG: (r = cipher_crypt(state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0)) != 0"];
"1000998" -> "1000118"  [label="AST: "];
"1000998" -> "1000999"  [label="CFG: "];
"1000999" -> "1000998"  [label="AST: "];
"1001000" -> "1000998"  [label="CFG: "];
"1000998" -> "1001000"  [label="DDG: <RET>"];
"1000999" -> "1000998"  [label="DDG: r"];
"1000856" -> "1000998"  [label="DDG: r"];
"1000568" -> "1000998"  [label="DDG: r"];
"1000816" -> "1000998"  [label="DDG: r"];
"1000990" -> "1000998"  [label="DDG: r"];
"1000700" -> "1000998"  [label="DDG: r"];
"1000957" -> "1000998"  [label="DDG: r"];
"1000614" -> "1000998"  [label="DDG: r"];
"1000827" -> "1000998"  [label="DDG: r"];
"1000962" -> "1000998"  [label="DDG: r"];
"1000874" -> "1000998"  [label="DDG: r"];
"1000666" -> "1000998"  [label="DDG: r"];
"1000435" -> "1000998"  [label="DDG: r"];
"1000576" -> "1000998"  [label="DDG: r"];
"1000894" -> "1000998"  [label="DDG: r"];
"1000347" -> "1000998"  [label="DDG: r"];
"1000591" -> "1000998"  [label="DDG: r"];
}
