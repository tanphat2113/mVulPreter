digraph "0_mindrot_28652bca29046f62c7045e933e6b931de1d16737_0@API" {
"1000965" [label="(Call,fprintf(stderr, \"read/plain[%d]:\r\n\", *typep))"];
"1000520" [label="(Call,sshbuf_dump(state->input, stderr))"];
"1000504" [label="(Call,sshbuf_len(state->input))"];
"1000437" [label="(Call,sshbuf_consume(state->input, block_size))"];
"1000372" [label="(Call,sshbuf_ptr(state->input))"];
"1000334" [label="(Call,sshbuf_len(state->input))"];
"1000362" [label="(Call,cipher_crypt(state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0))"];
"1000349" [label="(Call,sshbuf_reserve(state->incoming_packet, block_size,\n\t\t    &cp))"];
"1000341" [label="(Call,sshbuf_reset(state->incoming_packet))"];
"1000333" [label="(Call,sshbuf_len(state->input) < block_size)"];
"1000224" [label="(Call,block_size = enc ? enc->block_size : 8)"];
"1000276" [label="(Call,sshbuf_len(state->input))"];
"1000272" [label="(Call,sshbuf_ptr(state->input))"];
"1000517" [label="(Call,fprintf(stderr, \"read_poll enc/full: \"))"];
"1000949" [label="(Call,*typep == SSH2_MSG_USERAUTH_SUCCESS)"];
"1000917" [label="(Call,*typep >= SSH2_MSG_LOCAL_MIN)"];
"1000913" [label="(Call,*typep < SSH2_MSG_MIN)"];
"1000904" [label="(Call,ssh_packet_log_type(*typep))"];
"1000151" [label="(Call,*typep = SSH_MSG_NONE)"];
"1000907" [label="(Call,debug3(\"receive packet: type %u\", *typep))"];
"1000970" [label="(Call,sshbuf_dump(state->incoming_packet, stderr))"];
"1000912" [label="(Call,*typep < SSH2_MSG_MIN || *typep >= SSH2_MSG_LOCAL_MIN)"];
"1000948" [label="(Call,*typep == SSH2_MSG_USERAUTH_SUCCESS && !state->server_side)"];
"1000952" [label="(Identifier,SSH2_MSG_USERAUTH_SUCCESS)"];
"1000603" [label="(Call,sshbuf_ptr(state->input))"];
"1000435" [label="(Call,r = sshbuf_consume(state->input, block_size))"];
"1000332" [label="(ControlStructure,if (sshbuf_len(state->input) < block_size))"];
"1000971" [label="(Call,state->incoming_packet)"];
"1000920" [label="(Identifier,SSH2_MSG_LOCAL_MIN)"];
"1000347" [label="(Call,r = sshbuf_reserve(state->incoming_packet, block_size,\n\t\t    &cp))"];
"1000152" [label="(Call,*typep)"];
"1000118" [label="(Block,)"];
"1000547" [label="(Call,sshbuf_ptr(state->input))"];
"1000225" [label="(Identifier,block_size)"];
"1000348" [label="(Identifier,r)"];
"1000524" [label="(Identifier,stderr)"];
"1000521" [label="(Call,state->input)"];
"1000331" [label="(Block,)"];
"1000966" [label="(Identifier,stderr)"];
"1000904" [label="(Call,ssh_packet_log_type(*typep))"];
"1000278" [label="(Identifier,state)"];
"1000522" [label="(Identifier,state)"];
"1000927" [label="(Call,sshpkt_disconnect(ssh,\n\t\t    \"Invalid ssh2 packet type: %d\", *typep))"];
"1000518" [label="(Identifier,stderr)"];
"1000905" [label="(Call,*typep)"];
"1001000" [label="(MethodReturn,RET)"];
"1000472" [label="(Call,debug(\"partial packet: block %d, need %d, maclen %d, authlen %d,\"\n\t    \" aadlen %d\", block_size, need, maclen, authlen, aadlen))"];
"1000157" [label="(Identifier,state)"];
"1000259" [label="(Call,cipher_get_length(state->receive_context,\n\t\t    &state->packlen, state->p_read.seqnr,\n\t\t    sshbuf_ptr(state->input), sshbuf_len(state->input)))"];
"1000333" [label="(Call,sshbuf_len(state->input) < block_size)"];
"1000371" [label="(Identifier,cp)"];
"1000343" [label="(Identifier,state)"];
"1000377" [label="(Literal,0)"];
"1000915" [label="(Identifier,typep)"];
"1000972" [label="(Identifier,state)"];
"1000505" [label="(Call,state->input)"];
"1000434" [label="(Call,(r = sshbuf_consume(state->input, block_size)) != 0)"];
"1000519" [label="(Literal,\"read_poll enc/full: \")"];
"1000509" [label="(Identifier,aadlen)"];
"1000466" [label="(Call,state->packlen - block_size)"];
"1000335" [label="(Call,state->input)"];
"1000226" [label="(Call,enc ? enc->block_size : 8)"];
"1000917" [label="(Call,*typep >= SSH2_MSG_LOCAL_MIN)"];
"1000918" [label="(Call,*typep)"];
"1000334" [label="(Call,sshbuf_len(state->input))"];
"1000438" [label="(Call,state->input)"];
"1000970" [label="(Call,sshbuf_dump(state->incoming_packet, stderr))"];
"1000277" [label="(Call,state->input)"];
"1000376" [label="(Identifier,block_size)"];
"1000504" [label="(Call,sshbuf_len(state->input))"];
"1000441" [label="(Identifier,block_size)"];
"1000914" [label="(Call,*typep)"];
"1000273" [label="(Call,state->input)"];
"1000913" [label="(Call,*typep < SSH2_MSG_MIN)"];
"1000919" [label="(Identifier,typep)"];
"1000233" [label="(Identifier,aadlen)"];
"1000965" [label="(Call,fprintf(stderr, \"read/plain[%d]:\r\n\", *typep))"];
"1000363" [label="(Call,state->receive_context)"];
"1000955" [label="(Identifier,state)"];
"1000520" [label="(Call,sshbuf_dump(state->input, stderr))"];
"1000907" [label="(Call,debug3(\"receive packet: type %u\", *typep))"];
"1000154" [label="(Identifier,SSH_MSG_NONE)"];
"1000967" [label="(Literal,\"read/plain[%d]:\r\n\")"];
"1000362" [label="(Call,cipher_crypt(state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0))"];
"1000366" [label="(Call,state->p_send.seqnr)"];
"1000909" [label="(Call,*typep)"];
"1000896" [label="(Call,sshbuf_get_u8(state->incoming_packet, typep))"];
"1000968" [label="(Call,*typep)"];
"1000360" [label="(Call,r = cipher_crypt(state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0))"];
"1000341" [label="(Call,sshbuf_reset(state->incoming_packet))"];
"1000350" [label="(Call,state->incoming_packet)"];
"1000298" [label="(Call,sshbuf_dump(state->input, stderr))"];
"1000272" [label="(Call,sshbuf_ptr(state->input))"];
"1000349" [label="(Call,sshbuf_reserve(state->incoming_packet, block_size,\n\t\t    &cp))"];
"1000346" [label="(Call,(r = sshbuf_reserve(state->incoming_packet, block_size,\n\t\t    &cp)) != 0)"];
"1000276" [label="(Call,sshbuf_len(state->input))"];
"1000373" [label="(Call,state->input)"];
"1000949" [label="(Call,*typep == SSH2_MSG_USERAUTH_SUCCESS)"];
"1000593" [label="(Call,cipher_crypt(state->receive_context, state->p_read.seqnr, cp,\n\t    sshbuf_ptr(state->input), need, aadlen, authlen))"];
"1000437" [label="(Call,sshbuf_consume(state->input, block_size))"];
"1000527" [label="(Identifier,mac)"];
"1000386" [label="(Call,sshbuf_ptr(state->incoming_packet))"];
"1000517" [label="(Call,fprintf(stderr, \"read_poll enc/full: \"))"];
"1000408" [label="(Call,sshbuf_dump(state->input, stderr))"];
"1000224" [label="(Call,block_size = enc ? enc->block_size : 8)"];
"1000354" [label="(Call,&cp)"];
"1000338" [label="(Identifier,block_size)"];
"1000916" [label="(Identifier,SSH2_MSG_MIN)"];
"1000342" [label="(Call,state->incoming_packet)"];
"1000151" [label="(Call,*typep = SSH_MSG_NONE)"];
"1000908" [label="(Literal,\"receive packet: type %u\")"];
"1000372" [label="(Call,sshbuf_ptr(state->input))"];
"1000503" [label="(Call,sshbuf_len(state->input) < aadlen + need + authlen + maclen)"];
"1000977" [label="(Identifier,state)"];
"1000340" [label="(Literal,0)"];
"1000950" [label="(Call,*typep)"];
"1000359" [label="(Call,(r = cipher_crypt(state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0)) != 0)"];
"1000353" [label="(Identifier,block_size)"];
"1000578" [label="(Call,sshbuf_reserve(state->incoming_packet, aadlen + need,\n\t    &cp))"];
"1000378" [label="(Literal,0)"];
"1000903" [label="(ControlStructure,if (ssh_packet_log_type(*typep)))"];
"1000974" [label="(Identifier,stderr)"];
"1000965" -> "1000118"  [label="AST: "];
"1000965" -> "1000968"  [label="CFG: "];
"1000966" -> "1000965"  [label="AST: "];
"1000967" -> "1000965"  [label="AST: "];
"1000968" -> "1000965"  [label="AST: "];
"1000972" -> "1000965"  [label="CFG: "];
"1000965" -> "1001000"  [label="DDG: "];
"1000965" -> "1001000"  [label="DDG: "];
"1000520" -> "1000965"  [label="DDG: "];
"1000949" -> "1000965"  [label="DDG: "];
"1000965" -> "1000970"  [label="DDG: "];
"1000520" -> "1000118"  [label="AST: "];
"1000520" -> "1000524"  [label="CFG: "];
"1000521" -> "1000520"  [label="AST: "];
"1000524" -> "1000520"  [label="AST: "];
"1000527" -> "1000520"  [label="CFG: "];
"1000520" -> "1001000"  [label="DDG: "];
"1000520" -> "1001000"  [label="DDG: "];
"1000520" -> "1001000"  [label="DDG: "];
"1000504" -> "1000520"  [label="DDG: "];
"1000517" -> "1000520"  [label="DDG: "];
"1000520" -> "1000547"  [label="DDG: "];
"1000520" -> "1000603"  [label="DDG: "];
"1000504" -> "1000503"  [label="AST: "];
"1000504" -> "1000505"  [label="CFG: "];
"1000505" -> "1000504"  [label="AST: "];
"1000509" -> "1000504"  [label="CFG: "];
"1000504" -> "1001000"  [label="DDG: "];
"1000504" -> "1000503"  [label="DDG: "];
"1000437" -> "1000504"  [label="DDG: "];
"1000276" -> "1000504"  [label="DDG: "];
"1000437" -> "1000435"  [label="AST: "];
"1000437" -> "1000441"  [label="CFG: "];
"1000438" -> "1000437"  [label="AST: "];
"1000441" -> "1000437"  [label="AST: "];
"1000435" -> "1000437"  [label="CFG: "];
"1000437" -> "1001000"  [label="DDG: "];
"1000437" -> "1001000"  [label="DDG: "];
"1000437" -> "1000434"  [label="DDG: "];
"1000437" -> "1000434"  [label="DDG: "];
"1000437" -> "1000435"  [label="DDG: "];
"1000437" -> "1000435"  [label="DDG: "];
"1000372" -> "1000437"  [label="DDG: "];
"1000362" -> "1000437"  [label="DDG: "];
"1000437" -> "1000466"  [label="DDG: "];
"1000437" -> "1000472"  [label="DDG: "];
"1000372" -> "1000362"  [label="AST: "];
"1000372" -> "1000373"  [label="CFG: "];
"1000373" -> "1000372"  [label="AST: "];
"1000376" -> "1000372"  [label="CFG: "];
"1000372" -> "1001000"  [label="DDG: "];
"1000372" -> "1000362"  [label="DDG: "];
"1000334" -> "1000372"  [label="DDG: "];
"1000372" -> "1000408"  [label="DDG: "];
"1000334" -> "1000333"  [label="AST: "];
"1000334" -> "1000335"  [label="CFG: "];
"1000335" -> "1000334"  [label="AST: "];
"1000338" -> "1000334"  [label="CFG: "];
"1000334" -> "1001000"  [label="DDG: "];
"1000334" -> "1000333"  [label="DDG: "];
"1000362" -> "1000360"  [label="AST: "];
"1000362" -> "1000378"  [label="CFG: "];
"1000363" -> "1000362"  [label="AST: "];
"1000366" -> "1000362"  [label="AST: "];
"1000371" -> "1000362"  [label="AST: "];
"1000376" -> "1000362"  [label="AST: "];
"1000377" -> "1000362"  [label="AST: "];
"1000378" -> "1000362"  [label="AST: "];
"1000360" -> "1000362"  [label="CFG: "];
"1000362" -> "1001000"  [label="DDG: "];
"1000362" -> "1001000"  [label="DDG: "];
"1000362" -> "1001000"  [label="DDG: "];
"1000362" -> "1001000"  [label="DDG: "];
"1000362" -> "1001000"  [label="DDG: "];
"1000362" -> "1000359"  [label="DDG: "];
"1000362" -> "1000359"  [label="DDG: "];
"1000362" -> "1000359"  [label="DDG: "];
"1000362" -> "1000359"  [label="DDG: "];
"1000362" -> "1000359"  [label="DDG: "];
"1000362" -> "1000359"  [label="DDG: "];
"1000362" -> "1000360"  [label="DDG: "];
"1000362" -> "1000360"  [label="DDG: "];
"1000362" -> "1000360"  [label="DDG: "];
"1000362" -> "1000360"  [label="DDG: "];
"1000362" -> "1000360"  [label="DDG: "];
"1000362" -> "1000360"  [label="DDG: "];
"1000349" -> "1000362"  [label="DDG: "];
"1000362" -> "1000593"  [label="DDG: "];
"1000362" -> "1000593"  [label="DDG: "];
"1000349" -> "1000347"  [label="AST: "];
"1000349" -> "1000354"  [label="CFG: "];
"1000350" -> "1000349"  [label="AST: "];
"1000353" -> "1000349"  [label="AST: "];
"1000354" -> "1000349"  [label="AST: "];
"1000347" -> "1000349"  [label="CFG: "];
"1000349" -> "1001000"  [label="DDG: "];
"1000349" -> "1001000"  [label="DDG: "];
"1000349" -> "1001000"  [label="DDG: "];
"1000349" -> "1000346"  [label="DDG: "];
"1000349" -> "1000346"  [label="DDG: "];
"1000349" -> "1000346"  [label="DDG: "];
"1000349" -> "1000347"  [label="DDG: "];
"1000349" -> "1000347"  [label="DDG: "];
"1000349" -> "1000347"  [label="DDG: "];
"1000341" -> "1000349"  [label="DDG: "];
"1000333" -> "1000349"  [label="DDG: "];
"1000349" -> "1000386"  [label="DDG: "];
"1000349" -> "1000578"  [label="DDG: "];
"1000341" -> "1000331"  [label="AST: "];
"1000341" -> "1000342"  [label="CFG: "];
"1000342" -> "1000341"  [label="AST: "];
"1000348" -> "1000341"  [label="CFG: "];
"1000341" -> "1001000"  [label="DDG: "];
"1000333" -> "1000332"  [label="AST: "];
"1000333" -> "1000338"  [label="CFG: "];
"1000338" -> "1000333"  [label="AST: "];
"1000340" -> "1000333"  [label="CFG: "];
"1000343" -> "1000333"  [label="CFG: "];
"1000333" -> "1001000"  [label="DDG: "];
"1000333" -> "1001000"  [label="DDG: "];
"1000333" -> "1001000"  [label="DDG: "];
"1000224" -> "1000333"  [label="DDG: "];
"1000224" -> "1000118"  [label="AST: "];
"1000224" -> "1000226"  [label="CFG: "];
"1000225" -> "1000224"  [label="AST: "];
"1000226" -> "1000224"  [label="AST: "];
"1000233" -> "1000224"  [label="CFG: "];
"1000224" -> "1001000"  [label="DDG: "];
"1000224" -> "1001000"  [label="DDG: "];
"1000224" -> "1000466"  [label="DDG: "];
"1000224" -> "1000472"  [label="DDG: "];
"1000276" -> "1000259"  [label="AST: "];
"1000276" -> "1000277"  [label="CFG: "];
"1000277" -> "1000276"  [label="AST: "];
"1000259" -> "1000276"  [label="CFG: "];
"1000276" -> "1001000"  [label="DDG: "];
"1000276" -> "1000259"  [label="DDG: "];
"1000272" -> "1000276"  [label="DDG: "];
"1000276" -> "1000298"  [label="DDG: "];
"1000272" -> "1000259"  [label="AST: "];
"1000272" -> "1000273"  [label="CFG: "];
"1000273" -> "1000272"  [label="AST: "];
"1000278" -> "1000272"  [label="CFG: "];
"1000272" -> "1000259"  [label="DDG: "];
"1000517" -> "1000118"  [label="AST: "];
"1000517" -> "1000519"  [label="CFG: "];
"1000518" -> "1000517"  [label="AST: "];
"1000519" -> "1000517"  [label="AST: "];
"1000522" -> "1000517"  [label="CFG: "];
"1000517" -> "1001000"  [label="DDG: "];
"1000949" -> "1000948"  [label="AST: "];
"1000949" -> "1000952"  [label="CFG: "];
"1000950" -> "1000949"  [label="AST: "];
"1000952" -> "1000949"  [label="AST: "];
"1000955" -> "1000949"  [label="CFG: "];
"1000948" -> "1000949"  [label="CFG: "];
"1000949" -> "1001000"  [label="DDG: "];
"1000949" -> "1000948"  [label="DDG: "];
"1000949" -> "1000948"  [label="DDG: "];
"1000917" -> "1000949"  [label="DDG: "];
"1000913" -> "1000949"  [label="DDG: "];
"1000917" -> "1000912"  [label="AST: "];
"1000917" -> "1000920"  [label="CFG: "];
"1000918" -> "1000917"  [label="AST: "];
"1000920" -> "1000917"  [label="AST: "];
"1000912" -> "1000917"  [label="CFG: "];
"1000917" -> "1001000"  [label="DDG: "];
"1000917" -> "1000912"  [label="DDG: "];
"1000917" -> "1000912"  [label="DDG: "];
"1000913" -> "1000917"  [label="DDG: "];
"1000917" -> "1000927"  [label="DDG: "];
"1000913" -> "1000912"  [label="AST: "];
"1000913" -> "1000916"  [label="CFG: "];
"1000914" -> "1000913"  [label="AST: "];
"1000916" -> "1000913"  [label="AST: "];
"1000919" -> "1000913"  [label="CFG: "];
"1000912" -> "1000913"  [label="CFG: "];
"1000913" -> "1001000"  [label="DDG: "];
"1000913" -> "1000912"  [label="DDG: "];
"1000913" -> "1000912"  [label="DDG: "];
"1000904" -> "1000913"  [label="DDG: "];
"1000907" -> "1000913"  [label="DDG: "];
"1000913" -> "1000927"  [label="DDG: "];
"1000904" -> "1000903"  [label="AST: "];
"1000904" -> "1000905"  [label="CFG: "];
"1000905" -> "1000904"  [label="AST: "];
"1000908" -> "1000904"  [label="CFG: "];
"1000915" -> "1000904"  [label="CFG: "];
"1000904" -> "1001000"  [label="DDG: "];
"1000151" -> "1000904"  [label="DDG: "];
"1000904" -> "1000907"  [label="DDG: "];
"1000151" -> "1000118"  [label="AST: "];
"1000151" -> "1000154"  [label="CFG: "];
"1000152" -> "1000151"  [label="AST: "];
"1000154" -> "1000151"  [label="AST: "];
"1000157" -> "1000151"  [label="CFG: "];
"1000151" -> "1001000"  [label="DDG: "];
"1000151" -> "1001000"  [label="DDG: "];
"1000907" -> "1000903"  [label="AST: "];
"1000907" -> "1000909"  [label="CFG: "];
"1000908" -> "1000907"  [label="AST: "];
"1000909" -> "1000907"  [label="AST: "];
"1000915" -> "1000907"  [label="CFG: "];
"1000907" -> "1001000"  [label="DDG: "];
"1000970" -> "1000118"  [label="AST: "];
"1000970" -> "1000974"  [label="CFG: "];
"1000971" -> "1000970"  [label="AST: "];
"1000974" -> "1000970"  [label="AST: "];
"1000977" -> "1000970"  [label="CFG: "];
"1000970" -> "1001000"  [label="DDG: "];
"1000970" -> "1001000"  [label="DDG: "];
"1000970" -> "1001000"  [label="DDG: "];
"1000896" -> "1000970"  [label="DDG: "];
}
