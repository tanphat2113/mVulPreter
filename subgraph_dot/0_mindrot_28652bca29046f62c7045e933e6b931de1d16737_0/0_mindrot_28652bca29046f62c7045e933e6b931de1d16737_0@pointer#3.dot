digraph "0_mindrot_28652bca29046f62c7045e933e6b931de1d16737_0@pointer" {
"1000303" [label="(Call,logit(\"Bad packet length %u.\", state->packlen))"];
"1000285" [label="(Call,state->packlen < 1 + 4)"];
"1000251" [label="(Call,state->packlen == 0)"];
"1000259" [label="(Call,cipher_get_length(state->receive_context,\n\t\t    &state->packlen, state->p_read.seqnr,\n\t\t    sshbuf_ptr(state->input), sshbuf_len(state->input)))"];
"1000272" [label="(Call,sshbuf_ptr(state->input))"];
"1000276" [label="(Call,sshbuf_len(state->input))"];
"1000292" [label="(Call,state->packlen > PACKET_MAX_SIZE)"];
"1000311" [label="(Identifier,r)"];
"1000260" [label="(Call,state->receive_context)"];
"1000273" [label="(Call,state->input)"];
"1000292" [label="(Call,state->packlen > PACKET_MAX_SIZE)"];
"1000445" [label="(Call,debug(\"input: packet len %u\", state->packlen+4))"];
"1000276" [label="(Call,sshbuf_len(state->input))"];
"1000280" [label="(Literal,0)"];
"1000593" [label="(Call,cipher_crypt(state->receive_context, state->p_read.seqnr, cp,\n\t    sshbuf_ptr(state->input), need, aadlen, authlen))"];
"1000251" [label="(Call,state->packlen == 0)"];
"1000296" [label="(Identifier,PACKET_MAX_SIZE)"];
"1000263" [label="(Call,&state->packlen)"];
"1000284" [label="(Call,state->packlen < 1 + 4 ||\n\t\t    state->packlen > PACKET_MAX_SIZE)"];
"1000293" [label="(Call,state->packlen)"];
"1000303" [label="(Call,logit(\"Bad packet length %u.\", state->packlen))"];
"1000286" [label="(Call,state->packlen)"];
"1000758" [label="(Call,(state->packlen + 4) / block_size)"];
"1000249" [label="(Call,aadlen && state->packlen == 0)"];
"1000252" [label="(Call,state->packlen)"];
"1000765" [label="(Call,state->p_read.bytes += state->packlen + 4)"];
"1000466" [label="(Call,state->packlen - block_size)"];
"1000294" [label="(Identifier,state)"];
"1000540" [label="(Call,mac_check(mac, state->p_read.seqnr,\n\t\t    sshbuf_ptr(state->input), aadlen + need,\n\t\t    sshbuf_ptr(state->input) + aadlen + need + authlen,\n\t\t    maclen))"];
"1000447" [label="(Call,state->packlen+4)"];
"1000499" [label="(Call,PACKET_MAX_SIZE - block_size)"];
"1000673" [label="(Call,need > PACKET_MAX_SIZE)"];
"1000298" [label="(Call,sshbuf_dump(state->input, stderr))"];
"1000278" [label="(Identifier,state)"];
"1000326" [label="(Call,state->packlen == 0)"];
"1000267" [label="(Call,state->p_read.seqnr)"];
"1000289" [label="(Call,1 + 4)"];
"1001000" [label="(MethodReturn,RET)"];
"1000304" [label="(Literal,\"Bad packet length %u.\")"];
"1000771" [label="(Call,state->packlen + 4)"];
"1000455" [label="(Call,need = state->packlen)"];
"1000305" [label="(Call,state->packlen)"];
"1000285" [label="(Call,state->packlen < 1 + 4)"];
"1000259" [label="(Call,cipher_get_length(state->receive_context,\n\t\t    &state->packlen, state->p_read.seqnr,\n\t\t    sshbuf_ptr(state->input), sshbuf_len(state->input)))"];
"1000255" [label="(Literal,0)"];
"1000297" [label="(Block,)"];
"1000277" [label="(Call,state->input)"];
"1000504" [label="(Call,sshbuf_len(state->input))"];
"1000272" [label="(Call,sshbuf_ptr(state->input))"];
"1000258" [label="(Call,cipher_get_length(state->receive_context,\n\t\t    &state->packlen, state->p_read.seqnr,\n\t\t    sshbuf_ptr(state->input), sshbuf_len(state->input)) != 0)"];
"1000759" [label="(Call,state->packlen + 4)"];
"1000303" -> "1000297"  [label="AST: "];
"1000303" -> "1000305"  [label="CFG: "];
"1000304" -> "1000303"  [label="AST: "];
"1000305" -> "1000303"  [label="AST: "];
"1000311" -> "1000303"  [label="CFG: "];
"1000303" -> "1001000"  [label="DDG: "];
"1000303" -> "1001000"  [label="DDG: "];
"1000285" -> "1000303"  [label="DDG: "];
"1000292" -> "1000303"  [label="DDG: "];
"1000259" -> "1000303"  [label="DDG: "];
"1000285" -> "1000284"  [label="AST: "];
"1000285" -> "1000289"  [label="CFG: "];
"1000286" -> "1000285"  [label="AST: "];
"1000289" -> "1000285"  [label="AST: "];
"1000294" -> "1000285"  [label="CFG: "];
"1000284" -> "1000285"  [label="CFG: "];
"1000285" -> "1001000"  [label="DDG: "];
"1000285" -> "1000284"  [label="DDG: "];
"1000285" -> "1000284"  [label="DDG: "];
"1000251" -> "1000285"  [label="DDG: "];
"1000259" -> "1000285"  [label="DDG: "];
"1000285" -> "1000292"  [label="DDG: "];
"1000285" -> "1000445"  [label="DDG: "];
"1000285" -> "1000447"  [label="DDG: "];
"1000285" -> "1000455"  [label="DDG: "];
"1000285" -> "1000466"  [label="DDG: "];
"1000285" -> "1000758"  [label="DDG: "];
"1000285" -> "1000759"  [label="DDG: "];
"1000285" -> "1000765"  [label="DDG: "];
"1000285" -> "1000771"  [label="DDG: "];
"1000251" -> "1000249"  [label="AST: "];
"1000251" -> "1000255"  [label="CFG: "];
"1000252" -> "1000251"  [label="AST: "];
"1000255" -> "1000251"  [label="AST: "];
"1000249" -> "1000251"  [label="CFG: "];
"1000251" -> "1001000"  [label="DDG: "];
"1000251" -> "1000249"  [label="DDG: "];
"1000251" -> "1000249"  [label="DDG: "];
"1000251" -> "1000259"  [label="DDG: "];
"1000251" -> "1000326"  [label="DDG: "];
"1000259" -> "1000258"  [label="AST: "];
"1000259" -> "1000276"  [label="CFG: "];
"1000260" -> "1000259"  [label="AST: "];
"1000263" -> "1000259"  [label="AST: "];
"1000267" -> "1000259"  [label="AST: "];
"1000272" -> "1000259"  [label="AST: "];
"1000276" -> "1000259"  [label="AST: "];
"1000280" -> "1000259"  [label="CFG: "];
"1000259" -> "1001000"  [label="DDG: "];
"1000259" -> "1001000"  [label="DDG: "];
"1000259" -> "1001000"  [label="DDG: "];
"1000259" -> "1001000"  [label="DDG: "];
"1000259" -> "1001000"  [label="DDG: "];
"1000259" -> "1000258"  [label="DDG: "];
"1000259" -> "1000258"  [label="DDG: "];
"1000259" -> "1000258"  [label="DDG: "];
"1000259" -> "1000258"  [label="DDG: "];
"1000259" -> "1000258"  [label="DDG: "];
"1000272" -> "1000259"  [label="DDG: "];
"1000276" -> "1000259"  [label="DDG: "];
"1000259" -> "1000292"  [label="DDG: "];
"1000259" -> "1000445"  [label="DDG: "];
"1000259" -> "1000447"  [label="DDG: "];
"1000259" -> "1000455"  [label="DDG: "];
"1000259" -> "1000466"  [label="DDG: "];
"1000259" -> "1000540"  [label="DDG: "];
"1000259" -> "1000593"  [label="DDG: "];
"1000259" -> "1000593"  [label="DDG: "];
"1000259" -> "1000758"  [label="DDG: "];
"1000259" -> "1000759"  [label="DDG: "];
"1000259" -> "1000765"  [label="DDG: "];
"1000259" -> "1000771"  [label="DDG: "];
"1000272" -> "1000273"  [label="CFG: "];
"1000273" -> "1000272"  [label="AST: "];
"1000278" -> "1000272"  [label="CFG: "];
"1000272" -> "1000276"  [label="DDG: "];
"1000276" -> "1000277"  [label="CFG: "];
"1000277" -> "1000276"  [label="AST: "];
"1000276" -> "1001000"  [label="DDG: "];
"1000276" -> "1000298"  [label="DDG: "];
"1000276" -> "1000504"  [label="DDG: "];
"1000292" -> "1000284"  [label="AST: "];
"1000292" -> "1000296"  [label="CFG: "];
"1000293" -> "1000292"  [label="AST: "];
"1000296" -> "1000292"  [label="AST: "];
"1000284" -> "1000292"  [label="CFG: "];
"1000292" -> "1001000"  [label="DDG: "];
"1000292" -> "1000284"  [label="DDG: "];
"1000292" -> "1000284"  [label="DDG: "];
"1000292" -> "1000445"  [label="DDG: "];
"1000292" -> "1000447"  [label="DDG: "];
"1000292" -> "1000455"  [label="DDG: "];
"1000292" -> "1000466"  [label="DDG: "];
"1000292" -> "1000499"  [label="DDG: "];
"1000292" -> "1000673"  [label="DDG: "];
"1000292" -> "1000758"  [label="DDG: "];
"1000292" -> "1000759"  [label="DDG: "];
"1000292" -> "1000765"  [label="DDG: "];
"1000292" -> "1000771"  [label="DDG: "];
}
