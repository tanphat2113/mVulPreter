digraph "0_gstreamer_bdc20b9baf13564d9a061343416395f8f9a92b53@pointer" {
"1000715" [label="(Call,samples = g_new0 (QtDemuxSample, n_samples))"];
"1000717" [label="(Call,g_new0 (QtDemuxSample, n_samples))"];
"1000711" [label="(Call,GST_DEBUG_OBJECT (qtdemux, \"allocating n_samples %d\", n_samples))"];
"1000681" [label="(Call,GST_DEBUG_OBJECT (qtdemux,\n        \"stsz sample_size %d != 0, treating chunks as samples\", sample_size))"];
"1000118" [label="(MethodParameterIn,GstQTDemux * qtdemux)"];
"1000226" [label="(Call,sample_size == 0)"];
"1000218" [label="(Call,sample_size = QT_UINT32 (stsz_data + 12))"];
"1000220" [label="(Call,QT_UINT32 (stsz_data + 12))"];
"1000168" [label="(Call,stsz_data = (const guint8 *) stsz->data)"];
"1000170" [label="(Call,(const guint8 *) stsz->data)"];
"1000696" [label="(Call,n_samples = QT_UINT32 ((guint8 *) co64->data + 12))"];
"1000698" [label="(Call,QT_UINT32 ((guint8 *) co64->data + 12))"];
"1000700" [label="(Call,(guint8 *) co64->data)"];
"1000688" [label="(Call,n_samples = QT_UINT32 (stco_data + 12))"];
"1000690" [label="(Call,QT_UINT32 (stco_data + 12))"];
"1000188" [label="(Call,stco_data = (const guint8 *) stco->data)"];
"1000190" [label="(Call,(const guint8 *) stco->data)"];
"1000197" [label="(Call,stco_data = NULL)"];
"1000720" [label="(Call,stream->samples = samples)"];
"1000192" [label="(Call,stco->data)"];
"1000172" [label="(Call,stsz->data)"];
"1000848" [label="(Call,(guint8 *) co64->data)"];
"1000187" [label="(Block,)"];
"1000681" [label="(Call,GST_DEBUG_OBJECT (qtdemux,\n        \"stsz sample_size %d != 0, treating chunks as samples\", sample_size))"];
"1000705" [label="(Literal,12)"];
"1000269" [label="(Call,sample_size == 0)"];
"1000697" [label="(Identifier,n_samples)"];
"1000806" [label="(Call,GST_LOG_OBJECT (qtdemux,\n          \"entry %d has first_chunk %d, last_chunk %d, samples_per_chunk %d\", i,\n          first_chunk, last_chunk, samples_per_chunk))"];
"1000208" [label="(Identifier,stts)"];
"1000202" [label="(Identifier,co64)"];
"1000239" [label="(Call,GST_DEBUG_OBJECT (qtdemux, \"stsz sample_size 0, allocating n_samples %d\",\n        n_samples))"];
"1000168" [label="(Call,stsz_data = (const guint8 *) stsz->data)"];
"1000711" [label="(Call,GST_DEBUG_OBJECT (qtdemux, \"allocating n_samples %d\", n_samples))"];
"1000714" [label="(Identifier,n_samples)"];
"1000702" [label="(Call,co64->data)"];
"1000689" [label="(Identifier,n_samples)"];
"1000176" [label="(Identifier,stco)"];
"1000726" [label="(Identifier,n_samples_per_chunk)"];
"1000220" [label="(Call,QT_UINT32 (stsz_data + 12))"];
"1001059" [label="(Call,GST_ELEMENT_ERROR (qtdemux, STREAM, DECODE,\n        (_(\"This file is corrupt and cannot be played.\")), (NULL)))"];
"1000196" [label="(Block,)"];
"1000834" [label="(Call,QT_UINT32 (stco_data + 16 + j * 4))"];
"1000434" [label="(Call,GST_LOG_OBJECT (qtdemux, \"Creating entry %d with offset %lld\",\n              index, chunk_offset))"];
"1000199" [label="(Identifier,NULL)"];
"1000400" [label="(Call,QT_UINT32 (stco_data + 16 + j * 4))"];
"1000190" [label="(Call,(const guint8 *) stco->data)"];
"1000718" [label="(Identifier,QtDemuxSample)"];
"1000197" [label="(Call,stco_data = NULL)"];
"1000700" [label="(Call,(guint8 *) co64->data)"];
"1000706" [label="(Call,stream->n_samples = n_samples)"];
"1000118" [label="(MethodParameterIn,GstQTDemux * qtdemux)"];
"1000279" [label="(Call,stsz_data + i * 4 + 20)"];
"1000235" [label="(Call,QT_UINT32 (stsz_data + 16))"];
"1000278" [label="(Call,QT_UINT32 (stsz_data + i * 4 + 20))"];
"1000230" [label="(Identifier,stream)"];
"1000696" [label="(Call,n_samples = QT_UINT32 ((guint8 *) co64->data + 12))"];
"1000690" [label="(Call,QT_UINT32 (stco_data + 12))"];
"1000699" [label="(Call,(guint8 *) co64->data + 12)"];
"1000716" [label="(Identifier,samples)"];
"1000218" [label="(Call,sample_size = QT_UINT32 (stsz_data + 12))"];
"1000731" [label="(Call,GST_DEBUG_OBJECT (qtdemux, \"n_samples_per_chunk %d\", n_samples_per_chunk))"];
"1000221" [label="(Call,stsz_data + 12)"];
"1000169" [label="(Identifier,stsz_data)"];
"1000708" [label="(Identifier,stream)"];
"1000691" [label="(Call,stco_data + 12)"];
"1000219" [label="(Identifier,sample_size)"];
"1000720" [label="(Call,stream->samples = samples)"];
"1000825" [label="(Call,j >= n_samples)"];
"1000712" [label="(Identifier,qtdemux)"];
"1000684" [label="(Identifier,sample_size)"];
"1000695" [label="(Block,)"];
"1000721" [label="(Call,stream->samples)"];
"1000170" [label="(Call,(const guint8 *) stsz->data)"];
"1000294" [label="(Call,GST_LOG_OBJECT (qtdemux, \"sample %d has size %d\", i, samples[i].size))"];
"1000686" [label="(Identifier,stco)"];
"1000717" [label="(Call,g_new0 (QtDemuxSample, n_samples))"];
"1000688" [label="(Call,n_samples = QT_UINT32 (stco_data + 12))"];
"1000698" [label="(Call,QT_UINT32 ((guint8 *) co64->data + 12))"];
"1000236" [label="(Call,stsz_data + 16)"];
"1000225" [label="(Call,sample_size == 0 || stream->sampled)"];
"1000722" [label="(Identifier,stream)"];
"1000198" [label="(Identifier,stco_data)"];
"1000683" [label="(Literal,\"stsz sample_size %d != 0, treating chunks as samples\")"];
"1000835" [label="(Call,stco_data + 16 + j * 4)"];
"1000909" [label="(Call,GST_DEBUG_OBJECT (qtdemux, \"sample %d: timestamp %\" GST_TIME_FORMAT\n            \", size %u\", j, GST_TIME_ARGS (timestamp), samples[j].size))"];
"1000227" [label="(Identifier,sample_size)"];
"1000713" [label="(Literal,\"allocating n_samples %d\")"];
"1000401" [label="(Call,stco_data + 16 + j * 4)"];
"1000682" [label="(Identifier,qtdemux)"];
"1001068" [label="(MethodReturn,RET)"];
"1000226" [label="(Call,sample_size == 0)"];
"1000680" [label="(Block,)"];
"1000188" [label="(Call,stco_data = (const guint8 *) stco->data)"];
"1000715" [label="(Call,samples = g_new0 (QtDemuxSample, n_samples))"];
"1000687" [label="(Block,)"];
"1000121" [label="(Block,)"];
"1000189" [label="(Identifier,stco_data)"];
"1000719" [label="(Identifier,n_samples)"];
"1000724" [label="(Identifier,samples)"];
"1000228" [label="(Literal,0)"];
"1000715" -> "1000680"  [label="AST: "];
"1000715" -> "1000717"  [label="CFG: "];
"1000716" -> "1000715"  [label="AST: "];
"1000717" -> "1000715"  [label="AST: "];
"1000722" -> "1000715"  [label="CFG: "];
"1000715" -> "1001068"  [label="DDG: "];
"1000717" -> "1000715"  [label="DDG: "];
"1000717" -> "1000715"  [label="DDG: "];
"1000715" -> "1000720"  [label="DDG: "];
"1000717" -> "1000719"  [label="CFG: "];
"1000718" -> "1000717"  [label="AST: "];
"1000719" -> "1000717"  [label="AST: "];
"1000717" -> "1001068"  [label="DDG: "];
"1000717" -> "1001068"  [label="DDG: "];
"1000711" -> "1000717"  [label="DDG: "];
"1000717" -> "1000825"  [label="DDG: "];
"1000711" -> "1000680"  [label="AST: "];
"1000711" -> "1000714"  [label="CFG: "];
"1000712" -> "1000711"  [label="AST: "];
"1000713" -> "1000711"  [label="AST: "];
"1000714" -> "1000711"  [label="AST: "];
"1000716" -> "1000711"  [label="CFG: "];
"1000711" -> "1001068"  [label="DDG: "];
"1000681" -> "1000711"  [label="DDG: "];
"1000118" -> "1000711"  [label="DDG: "];
"1000696" -> "1000711"  [label="DDG: "];
"1000688" -> "1000711"  [label="DDG: "];
"1000711" -> "1000731"  [label="DDG: "];
"1000681" -> "1000680"  [label="AST: "];
"1000681" -> "1000684"  [label="CFG: "];
"1000682" -> "1000681"  [label="AST: "];
"1000683" -> "1000681"  [label="AST: "];
"1000684" -> "1000681"  [label="AST: "];
"1000686" -> "1000681"  [label="CFG: "];
"1000681" -> "1001068"  [label="DDG: "];
"1000681" -> "1001068"  [label="DDG: "];
"1000118" -> "1000681"  [label="DDG: "];
"1000226" -> "1000681"  [label="DDG: "];
"1000118" -> "1000117"  [label="AST: "];
"1000118" -> "1001068"  [label="DDG: "];
"1000118" -> "1000239"  [label="DDG: "];
"1000118" -> "1000294"  [label="DDG: "];
"1000118" -> "1000434"  [label="DDG: "];
"1000118" -> "1000731"  [label="DDG: "];
"1000118" -> "1000806"  [label="DDG: "];
"1000118" -> "1000909"  [label="DDG: "];
"1000118" -> "1001059"  [label="DDG: "];
"1000226" -> "1000225"  [label="AST: "];
"1000226" -> "1000228"  [label="CFG: "];
"1000227" -> "1000226"  [label="AST: "];
"1000228" -> "1000226"  [label="AST: "];
"1000230" -> "1000226"  [label="CFG: "];
"1000225" -> "1000226"  [label="CFG: "];
"1000226" -> "1001068"  [label="DDG: "];
"1000226" -> "1000225"  [label="DDG: "];
"1000226" -> "1000225"  [label="DDG: "];
"1000218" -> "1000226"  [label="DDG: "];
"1000226" -> "1000269"  [label="DDG: "];
"1000218" -> "1000121"  [label="AST: "];
"1000218" -> "1000220"  [label="CFG: "];
"1000219" -> "1000218"  [label="AST: "];
"1000220" -> "1000218"  [label="AST: "];
"1000227" -> "1000218"  [label="CFG: "];
"1000218" -> "1001068"  [label="DDG: "];
"1000220" -> "1000218"  [label="DDG: "];
"1000220" -> "1000221"  [label="CFG: "];
"1000221" -> "1000220"  [label="AST: "];
"1000220" -> "1001068"  [label="DDG: "];
"1000168" -> "1000220"  [label="DDG: "];
"1000168" -> "1000121"  [label="AST: "];
"1000168" -> "1000170"  [label="CFG: "];
"1000169" -> "1000168"  [label="AST: "];
"1000170" -> "1000168"  [label="AST: "];
"1000176" -> "1000168"  [label="CFG: "];
"1000168" -> "1001068"  [label="DDG: "];
"1000168" -> "1001068"  [label="DDG: "];
"1000170" -> "1000168"  [label="DDG: "];
"1000168" -> "1000221"  [label="DDG: "];
"1000168" -> "1000235"  [label="DDG: "];
"1000168" -> "1000236"  [label="DDG: "];
"1000168" -> "1000278"  [label="DDG: "];
"1000168" -> "1000279"  [label="DDG: "];
"1000170" -> "1000172"  [label="CFG: "];
"1000171" -> "1000170"  [label="AST: "];
"1000172" -> "1000170"  [label="AST: "];
"1000170" -> "1001068"  [label="DDG: "];
"1000696" -> "1000695"  [label="AST: "];
"1000696" -> "1000698"  [label="CFG: "];
"1000697" -> "1000696"  [label="AST: "];
"1000698" -> "1000696"  [label="AST: "];
"1000708" -> "1000696"  [label="CFG: "];
"1000696" -> "1001068"  [label="DDG: "];
"1000698" -> "1000696"  [label="DDG: "];
"1000696" -> "1000706"  [label="DDG: "];
"1000698" -> "1000699"  [label="CFG: "];
"1000699" -> "1000698"  [label="AST: "];
"1000698" -> "1001068"  [label="DDG: "];
"1000700" -> "1000698"  [label="DDG: "];
"1000700" -> "1000699"  [label="AST: "];
"1000700" -> "1000702"  [label="CFG: "];
"1000701" -> "1000700"  [label="AST: "];
"1000702" -> "1000700"  [label="AST: "];
"1000705" -> "1000700"  [label="CFG: "];
"1000700" -> "1001068"  [label="DDG: "];
"1000700" -> "1000699"  [label="DDG: "];
"1000700" -> "1000848"  [label="DDG: "];
"1000688" -> "1000687"  [label="AST: "];
"1000688" -> "1000690"  [label="CFG: "];
"1000689" -> "1000688"  [label="AST: "];
"1000690" -> "1000688"  [label="AST: "];
"1000708" -> "1000688"  [label="CFG: "];
"1000688" -> "1001068"  [label="DDG: "];
"1000690" -> "1000688"  [label="DDG: "];
"1000688" -> "1000706"  [label="DDG: "];
"1000690" -> "1000691"  [label="CFG: "];
"1000691" -> "1000690"  [label="AST: "];
"1000690" -> "1001068"  [label="DDG: "];
"1000188" -> "1000690"  [label="DDG: "];
"1000197" -> "1000690"  [label="DDG: "];
"1000188" -> "1000187"  [label="AST: "];
"1000188" -> "1000190"  [label="CFG: "];
"1000189" -> "1000188"  [label="AST: "];
"1000190" -> "1000188"  [label="AST: "];
"1000208" -> "1000188"  [label="CFG: "];
"1000188" -> "1001068"  [label="DDG: "];
"1000188" -> "1001068"  [label="DDG: "];
"1000190" -> "1000188"  [label="DDG: "];
"1000188" -> "1000400"  [label="DDG: "];
"1000188" -> "1000401"  [label="DDG: "];
"1000188" -> "1000691"  [label="DDG: "];
"1000188" -> "1000834"  [label="DDG: "];
"1000188" -> "1000835"  [label="DDG: "];
"1000190" -> "1000192"  [label="CFG: "];
"1000191" -> "1000190"  [label="AST: "];
"1000192" -> "1000190"  [label="AST: "];
"1000190" -> "1001068"  [label="DDG: "];
"1000197" -> "1000196"  [label="AST: "];
"1000197" -> "1000199"  [label="CFG: "];
"1000198" -> "1000197"  [label="AST: "];
"1000199" -> "1000197"  [label="AST: "];
"1000202" -> "1000197"  [label="CFG: "];
"1000197" -> "1001068"  [label="DDG: "];
"1000197" -> "1000400"  [label="DDG: "];
"1000197" -> "1000401"  [label="DDG: "];
"1000197" -> "1000691"  [label="DDG: "];
"1000197" -> "1000834"  [label="DDG: "];
"1000197" -> "1000835"  [label="DDG: "];
"1000720" -> "1000680"  [label="AST: "];
"1000720" -> "1000724"  [label="CFG: "];
"1000721" -> "1000720"  [label="AST: "];
"1000724" -> "1000720"  [label="AST: "];
"1000726" -> "1000720"  [label="CFG: "];
"1000720" -> "1001068"  [label="DDG: "];
"1000720" -> "1001068"  [label="DDG: "];
}
