digraph "1_libtomcrypt_5eb9743410ce4657e9d54fef26a2ee31a1b5dd0@array" {
"1000432" [label="(Call,XMEMCMP(siginfo[1].data, hash, hashlen))"];
"1000132" [label="(Call,hash  != NULL)"];
"1000118" [label="(MethodParameterIn,const unsigned char *hash)"];
"1000424" [label="(Call,siginfo[1].size == hashlen)"];
"1000119" [label="(MethodParameterIn,unsigned long hashlen)"];
"1000431" [label="(Call,XMEMCMP(siginfo[1].data, hash, hashlen) == 0)"];
"1000423" [label="(Call,(siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0))"];
"1000401" [label="(Call,(XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&\n         (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0))"];
"1000389" [label="(Call,(digestinfo[0].size == hash_descriptor[hash_idx].OIDlen) &&\n         (XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&\n         (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0))"];
"1000439" [label="(Identifier,hashlen)"];
"1000444" [label="(Identifier,stat)"];
"1000388" [label="(ControlStructure,if ((digestinfo[0].size == hash_descriptor[hash_idx].OIDlen) &&\n         (XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&\n         (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0)))"];
"1000401" [label="(Call,(XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&\n         (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0))"];
"1000424" [label="(Call,siginfo[1].size == hashlen)"];
"1000251" [label="(Call,pkcs_1_pss_decode(hash, hashlen, tmpbuf+1, x-1, saltlen, hash_idx, modulus_bitlen, stat))"];
"1000432" [label="(Call,XMEMCMP(siginfo[1].data, hash, hashlen))"];
"1000119" [label="(MethodParameterIn,unsigned long hashlen)"];
"1000118" [label="(MethodParameterIn,const unsigned char *hash)"];
"1000136" [label="(Call,sig   != NULL)"];
"1000390" [label="(Call,digestinfo[0].size == hash_descriptor[hash_idx].OIDlen)"];
"1000133" [label="(Identifier,hash)"];
"1000402" [label="(Call,XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0)"];
"1000131" [label="(Call,LTC_ARGCHK(hash  != NULL))"];
"1000433" [label="(Call,siginfo[1].data)"];
"1000423" [label="(Call,(siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0))"];
"1000268" [label="(Call,pkcs_1_pss_decode(hash, hashlen, tmpbuf, x, saltlen, hash_idx, modulus_bitlen, stat))"];
"1000438" [label="(Identifier,hash)"];
"1000134" [label="(Identifier,NULL)"];
"1000430" [label="(Identifier,hashlen)"];
"1000132" [label="(Call,hash  != NULL)"];
"1000440" [label="(Literal,0)"];
"1000447" [label="(Identifier,out)"];
"1000431" [label="(Call,XMEMCMP(siginfo[1].data, hash, hashlen) == 0)"];
"1000459" [label="(MethodReturn,int)"];
"1000389" [label="(Call,(digestinfo[0].size == hash_descriptor[hash_idx].OIDlen) &&\n         (XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&\n         (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0))"];
"1000435" [label="(Identifier,siginfo)"];
"1000425" [label="(Call,siginfo[1].size)"];
"1000432" -> "1000431"  [label="AST: "];
"1000432" -> "1000439"  [label="CFG: "];
"1000433" -> "1000432"  [label="AST: "];
"1000438" -> "1000432"  [label="AST: "];
"1000439" -> "1000432"  [label="AST: "];
"1000440" -> "1000432"  [label="CFG: "];
"1000432" -> "1000459"  [label="DDG: hash"];
"1000432" -> "1000459"  [label="DDG: siginfo[1].data"];
"1000432" -> "1000459"  [label="DDG: hashlen"];
"1000432" -> "1000431"  [label="DDG: siginfo[1].data"];
"1000432" -> "1000431"  [label="DDG: hash"];
"1000432" -> "1000431"  [label="DDG: hashlen"];
"1000132" -> "1000432"  [label="DDG: hash"];
"1000118" -> "1000432"  [label="DDG: hash"];
"1000424" -> "1000432"  [label="DDG: hashlen"];
"1000119" -> "1000432"  [label="DDG: hashlen"];
"1000132" -> "1000131"  [label="AST: "];
"1000132" -> "1000134"  [label="CFG: "];
"1000133" -> "1000132"  [label="AST: "];
"1000134" -> "1000132"  [label="AST: "];
"1000131" -> "1000132"  [label="CFG: "];
"1000132" -> "1000459"  [label="DDG: hash"];
"1000132" -> "1000131"  [label="DDG: hash"];
"1000132" -> "1000131"  [label="DDG: NULL"];
"1000118" -> "1000132"  [label="DDG: hash"];
"1000132" -> "1000136"  [label="DDG: NULL"];
"1000132" -> "1000251"  [label="DDG: hash"];
"1000132" -> "1000268"  [label="DDG: hash"];
"1000118" -> "1000115"  [label="AST: "];
"1000118" -> "1000459"  [label="DDG: hash"];
"1000118" -> "1000251"  [label="DDG: hash"];
"1000118" -> "1000268"  [label="DDG: hash"];
"1000424" -> "1000423"  [label="AST: "];
"1000424" -> "1000430"  [label="CFG: "];
"1000425" -> "1000424"  [label="AST: "];
"1000430" -> "1000424"  [label="AST: "];
"1000435" -> "1000424"  [label="CFG: "];
"1000423" -> "1000424"  [label="CFG: "];
"1000424" -> "1000459"  [label="DDG: siginfo[1].size"];
"1000424" -> "1000459"  [label="DDG: hashlen"];
"1000424" -> "1000423"  [label="DDG: siginfo[1].size"];
"1000424" -> "1000423"  [label="DDG: hashlen"];
"1000119" -> "1000424"  [label="DDG: hashlen"];
"1000119" -> "1000115"  [label="AST: "];
"1000119" -> "1000459"  [label="DDG: hashlen"];
"1000119" -> "1000251"  [label="DDG: hashlen"];
"1000119" -> "1000268"  [label="DDG: hashlen"];
"1000431" -> "1000423"  [label="AST: "];
"1000431" -> "1000440"  [label="CFG: "];
"1000440" -> "1000431"  [label="AST: "];
"1000423" -> "1000431"  [label="CFG: "];
"1000431" -> "1000459"  [label="DDG: XMEMCMP(siginfo[1].data, hash, hashlen)"];
"1000431" -> "1000423"  [label="DDG: XMEMCMP(siginfo[1].data, hash, hashlen)"];
"1000431" -> "1000423"  [label="DDG: 0"];
"1000423" -> "1000401"  [label="AST: "];
"1000401" -> "1000423"  [label="CFG: "];
"1000423" -> "1000459"  [label="DDG: siginfo[1].size == hashlen"];
"1000423" -> "1000459"  [label="DDG: XMEMCMP(siginfo[1].data, hash, hashlen) == 0"];
"1000423" -> "1000401"  [label="DDG: siginfo[1].size == hashlen"];
"1000423" -> "1000401"  [label="DDG: XMEMCMP(siginfo[1].data, hash, hashlen) == 0"];
"1000401" -> "1000389"  [label="AST: "];
"1000401" -> "1000402"  [label="CFG: "];
"1000402" -> "1000401"  [label="AST: "];
"1000389" -> "1000401"  [label="CFG: "];
"1000401" -> "1000459"  [label="DDG: XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0"];
"1000401" -> "1000459"  [label="DDG: (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0)"];
"1000401" -> "1000389"  [label="DDG: XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0"];
"1000401" -> "1000389"  [label="DDG: (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0)"];
"1000402" -> "1000401"  [label="DDG: XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen)"];
"1000402" -> "1000401"  [label="DDG: 0"];
"1000389" -> "1000388"  [label="AST: "];
"1000389" -> "1000390"  [label="CFG: "];
"1000390" -> "1000389"  [label="AST: "];
"1000444" -> "1000389"  [label="CFG: "];
"1000447" -> "1000389"  [label="CFG: "];
"1000389" -> "1000459"  [label="DDG: (XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&\n         (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0)"];
"1000389" -> "1000459"  [label="DDG: (digestinfo[0].size == hash_descriptor[hash_idx].OIDlen) &&\n         (XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&\n         (siginfo[1].size == hashlen) &&\n         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0)"];
"1000389" -> "1000459"  [label="DDG: digestinfo[0].size == hash_descriptor[hash_idx].OIDlen"];
"1000390" -> "1000389"  [label="DDG: digestinfo[0].size"];
"1000390" -> "1000389"  [label="DDG: hash_descriptor[hash_idx].OIDlen"];
}
