digraph "1_Chrome_7f3d85b096f66870a15b37c2f40b219b2e292693_26@API" {
"1000184" [label="(Call,png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_byte) * num_weights)))"];
"1000115" [label="(Call,png_ptr == NULL)"];
"1000104" [label="(MethodParameterIn,png_structp png_ptr)"];
"1000186" [label="(Call,(png_uint_32)(png_sizeof(png_byte) * num_weights))"];
"1000188" [label="(Call,png_sizeof(png_byte) * num_weights)"];
"1000189" [label="(Call,png_sizeof(png_byte))"];
"1000167" [label="(Call,num_weights > 0)"];
"1000156" [label="(Call,(png_byte)num_weights)"];
"1000138" [label="(Call,num_weights < 0)"];
"1000106" [label="(MethodParameterIn,int num_weights)"];
"1000149" [label="(Call,num_weights = 0)"];
"1000182" [label="(Call,(png_bytep)png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_byte) * num_weights)))"];
"1000178" [label="(Call,png_ptr->prev_filters = (png_bytep)png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_byte) * num_weights)))"];
"1000222" [label="(Call,png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_uint_16) * num_weights)))"];
"1000220" [label="(Call,(png_uint_16p)png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_uint_16) * num_weights)))"];
"1000216" [label="(Call,png_ptr->filter_weights = (png_uint_16p)png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_uint_16) * num_weights)))"];
"1000236" [label="(Call,png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_uint_16) * num_weights)))"];
"1000234" [label="(Call,(png_uint_16p)png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_uint_16) * num_weights)))"];
"1000230" [label="(Call,png_ptr->inv_filter_weights = (png_uint_16p)png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_uint_16) * num_weights)))"];
"1000346" [label="(Call,png_malloc(png_ptr,\n         (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST)))"];
"1000344" [label="(Call,(png_uint_16p)png_malloc(png_ptr,\n         (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST)))"];
"1000340" [label="(Call,png_ptr->filter_costs = (png_uint_16p)png_malloc(png_ptr,\n         (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST)))"];
"1000360" [label="(Call,png_malloc(png_ptr,\n         (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST)))"];
"1000358" [label="(Call,(png_uint_16p)png_malloc(png_ptr,\n         (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST)))"];
"1000354" [label="(Call,png_ptr->inv_filter_costs = (png_uint_16p)png_malloc(png_ptr,\n         (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST)))"];
"1000156" [label="(Call,(png_byte)num_weights)"];
"1000184" [label="(Call,png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_byte) * num_weights)))"];
"1000152" [label="(Call,png_ptr->num_prev_filters = (png_byte)num_weights)"];
"1000355" [label="(Call,png_ptr->inv_filter_costs)"];
"1000194" [label="(Identifier,i)"];
"1000223" [label="(Identifier,png_ptr)"];
"1000356" [label="(Identifier,png_ptr)"];
"1000139" [label="(Identifier,num_weights)"];
"1000186" [label="(Call,(png_uint_32)(png_sizeof(png_byte) * num_weights))"];
"1000336" [label="(Identifier,png_ptr)"];
"1000188" [label="(Call,png_sizeof(png_byte) * num_weights)"];
"1000341" [label="(Call,png_ptr->filter_costs)"];
"1000106" [label="(MethodParameterIn,int num_weights)"];
"1000138" [label="(Call,num_weights < 0)"];
"1000354" [label="(Call,png_ptr->inv_filter_costs = (png_uint_16p)png_malloc(png_ptr,\n         (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST)))"];
"1000346" [label="(Call,png_malloc(png_ptr,\n         (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST)))"];
"1000140" [label="(Literal,0)"];
"1000172" [label="(Call,png_ptr->prev_filters == NULL)"];
"1000154" [label="(Identifier,png_ptr)"];
"1000215" [label="(Block,)"];
"1000348" [label="(Call,(png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST))"];
"1000117" [label="(Identifier,NULL)"];
"1000168" [label="(Identifier,num_weights)"];
"1000217" [label="(Call,png_ptr->filter_weights)"];
"1000248" [label="(Call,i < num_weights)"];
"1000174" [label="(Identifier,png_ptr)"];
"1000361" [label="(Identifier,png_ptr)"];
"1000137" [label="(Call,num_weights < 0 || filter_weights == NULL ||\n      heuristic_method == PNG_FILTER_HEURISTIC_UNWEIGHTED)"];
"1000234" [label="(Call,(png_uint_16p)png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_uint_16) * num_weights)))"];
"1000124" [label="(Call,png_warning(png_ptr, \"Unknown filter heuristic method\"))"];
"1000362" [label="(Call,(png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST))"];
"1000224" [label="(Call,(png_uint_32)(png_sizeof(png_uint_16) * num_weights))"];
"1000178" [label="(Call,png_ptr->prev_filters = (png_bytep)png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_byte) * num_weights)))"];
"1000143" [label="(Identifier,filter_weights)"];
"1000360" [label="(Call,png_malloc(png_ptr,\n         (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST)))"];
"1000115" [label="(Call,png_ptr == NULL)"];
"1000166" [label="(ControlStructure,if (num_weights > 0))"];
"1000222" [label="(Call,png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_uint_16) * num_weights)))"];
"1000169" [label="(Literal,0)"];
"1000240" [label="(Call,png_sizeof(png_uint_16) * num_weights)"];
"1000236" [label="(Call,png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_uint_16) * num_weights)))"];
"1000196" [label="(Call,i < num_weights)"];
"1000334" [label="(Call,png_ptr->filter_costs == NULL)"];
"1000150" [label="(Identifier,num_weights)"];
"1000347" [label="(Identifier,png_ptr)"];
"1000151" [label="(Literal,0)"];
"1000339" [label="(Block,)"];
"1000370" [label="(Identifier,i)"];
"1000340" [label="(Call,png_ptr->filter_costs = (png_uint_16p)png_malloc(png_ptr,\n         (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST)))"];
"1000177" [label="(Block,)"];
"1000231" [label="(Call,png_ptr->inv_filter_weights)"];
"1000182" [label="(Call,(png_bytep)png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_byte) * num_weights)))"];
"1000104" [label="(MethodParameterIn,png_structp png_ptr)"];
"1000148" [label="(Block,)"];
"1000179" [label="(Call,png_ptr->prev_filters)"];
"1000271" [label="(Call,i < num_weights)"];
"1000226" [label="(Call,png_sizeof(png_uint_16) * num_weights)"];
"1000237" [label="(Identifier,png_ptr)"];
"1000246" [label="(Identifier,i)"];
"1000142" [label="(Call,filter_weights == NULL)"];
"1000185" [label="(Identifier,png_ptr)"];
"1000238" [label="(Call,(png_uint_32)(png_sizeof(png_uint_16) * num_weights))"];
"1000149" [label="(Call,num_weights = 0)"];
"1000121" [label="(Identifier,heuristic_method)"];
"1000467" [label="(MethodReturn,RET)"];
"1000167" [label="(Call,num_weights > 0)"];
"1000189" [label="(Call,png_sizeof(png_byte))"];
"1000232" [label="(Identifier,png_ptr)"];
"1000118" [label="(Return,return;)"];
"1000216" [label="(Call,png_ptr->filter_weights = (png_uint_16p)png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_uint_16) * num_weights)))"];
"1000114" [label="(ControlStructure,if (png_ptr == NULL))"];
"1000358" [label="(Call,(png_uint_16p)png_malloc(png_ptr,\n         (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST)))"];
"1000190" [label="(Identifier,png_byte)"];
"1000191" [label="(Identifier,num_weights)"];
"1000116" [label="(Identifier,png_ptr)"];
"1000158" [label="(Identifier,num_weights)"];
"1000220" [label="(Call,(png_uint_16p)png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_uint_16) * num_weights)))"];
"1000344" [label="(Call,(png_uint_16p)png_malloc(png_ptr,\n         (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST)))"];
"1000230" [label="(Call,png_ptr->inv_filter_weights = (png_uint_16p)png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_uint_16) * num_weights)))"];
"1000184" -> "1000182"  [label="AST: "];
"1000184" -> "1000186"  [label="CFG: "];
"1000185" -> "1000184"  [label="AST: "];
"1000186" -> "1000184"  [label="AST: "];
"1000182" -> "1000184"  [label="CFG: "];
"1000184" -> "1000467"  [label="DDG: (png_uint_32)(png_sizeof(png_byte) * num_weights)"];
"1000184" -> "1000467"  [label="DDG: png_ptr"];
"1000184" -> "1000182"  [label="DDG: png_ptr"];
"1000184" -> "1000182"  [label="DDG: (png_uint_32)(png_sizeof(png_byte) * num_weights)"];
"1000115" -> "1000184"  [label="DDG: png_ptr"];
"1000104" -> "1000184"  [label="DDG: png_ptr"];
"1000186" -> "1000184"  [label="DDG: png_sizeof(png_byte) * num_weights"];
"1000184" -> "1000222"  [label="DDG: png_ptr"];
"1000184" -> "1000346"  [label="DDG: png_ptr"];
"1000115" -> "1000114"  [label="AST: "];
"1000115" -> "1000117"  [label="CFG: "];
"1000116" -> "1000115"  [label="AST: "];
"1000117" -> "1000115"  [label="AST: "];
"1000118" -> "1000115"  [label="CFG: "];
"1000121" -> "1000115"  [label="CFG: "];
"1000115" -> "1000467"  [label="DDG: NULL"];
"1000115" -> "1000467"  [label="DDG: png_ptr == NULL"];
"1000115" -> "1000467"  [label="DDG: png_ptr"];
"1000104" -> "1000115"  [label="DDG: png_ptr"];
"1000115" -> "1000124"  [label="DDG: png_ptr"];
"1000115" -> "1000142"  [label="DDG: NULL"];
"1000115" -> "1000172"  [label="DDG: NULL"];
"1000115" -> "1000222"  [label="DDG: png_ptr"];
"1000115" -> "1000334"  [label="DDG: NULL"];
"1000115" -> "1000346"  [label="DDG: png_ptr"];
"1000104" -> "1000103"  [label="AST: "];
"1000104" -> "1000467"  [label="DDG: png_ptr"];
"1000104" -> "1000124"  [label="DDG: png_ptr"];
"1000104" -> "1000222"  [label="DDG: png_ptr"];
"1000104" -> "1000236"  [label="DDG: png_ptr"];
"1000104" -> "1000346"  [label="DDG: png_ptr"];
"1000104" -> "1000360"  [label="DDG: png_ptr"];
"1000186" -> "1000188"  [label="CFG: "];
"1000187" -> "1000186"  [label="AST: "];
"1000188" -> "1000186"  [label="AST: "];
"1000186" -> "1000467"  [label="DDG: png_sizeof(png_byte) * num_weights"];
"1000188" -> "1000186"  [label="DDG: png_sizeof(png_byte)"];
"1000188" -> "1000186"  [label="DDG: num_weights"];
"1000188" -> "1000191"  [label="CFG: "];
"1000189" -> "1000188"  [label="AST: "];
"1000191" -> "1000188"  [label="AST: "];
"1000188" -> "1000467"  [label="DDG: png_sizeof(png_byte)"];
"1000189" -> "1000188"  [label="DDG: png_byte"];
"1000167" -> "1000188"  [label="DDG: num_weights"];
"1000106" -> "1000188"  [label="DDG: num_weights"];
"1000188" -> "1000196"  [label="DDG: num_weights"];
"1000189" -> "1000190"  [label="CFG: "];
"1000190" -> "1000189"  [label="AST: "];
"1000191" -> "1000189"  [label="CFG: "];
"1000189" -> "1000467"  [label="DDG: png_byte"];
"1000167" -> "1000166"  [label="AST: "];
"1000167" -> "1000169"  [label="CFG: "];
"1000168" -> "1000167"  [label="AST: "];
"1000169" -> "1000167"  [label="AST: "];
"1000174" -> "1000167"  [label="CFG: "];
"1000336" -> "1000167"  [label="CFG: "];
"1000167" -> "1000467"  [label="DDG: num_weights"];
"1000167" -> "1000467"  [label="DDG: num_weights > 0"];
"1000156" -> "1000167"  [label="DDG: num_weights"];
"1000106" -> "1000167"  [label="DDG: num_weights"];
"1000167" -> "1000226"  [label="DDG: num_weights"];
"1000167" -> "1000271"  [label="DDG: num_weights"];
"1000156" -> "1000152"  [label="AST: "];
"1000156" -> "1000158"  [label="CFG: "];
"1000157" -> "1000156"  [label="AST: "];
"1000158" -> "1000156"  [label="AST: "];
"1000152" -> "1000156"  [label="CFG: "];
"1000156" -> "1000152"  [label="DDG: num_weights"];
"1000138" -> "1000156"  [label="DDG: num_weights"];
"1000149" -> "1000156"  [label="DDG: num_weights"];
"1000106" -> "1000156"  [label="DDG: num_weights"];
"1000138" -> "1000137"  [label="AST: "];
"1000138" -> "1000140"  [label="CFG: "];
"1000139" -> "1000138"  [label="AST: "];
"1000140" -> "1000138"  [label="AST: "];
"1000143" -> "1000138"  [label="CFG: "];
"1000137" -> "1000138"  [label="CFG: "];
"1000138" -> "1000137"  [label="DDG: num_weights"];
"1000138" -> "1000137"  [label="DDG: 0"];
"1000106" -> "1000138"  [label="DDG: num_weights"];
"1000106" -> "1000103"  [label="AST: "];
"1000106" -> "1000467"  [label="DDG: num_weights"];
"1000106" -> "1000149"  [label="DDG: num_weights"];
"1000106" -> "1000196"  [label="DDG: num_weights"];
"1000106" -> "1000226"  [label="DDG: num_weights"];
"1000106" -> "1000240"  [label="DDG: num_weights"];
"1000106" -> "1000248"  [label="DDG: num_weights"];
"1000106" -> "1000271"  [label="DDG: num_weights"];
"1000149" -> "1000148"  [label="AST: "];
"1000149" -> "1000151"  [label="CFG: "];
"1000150" -> "1000149"  [label="AST: "];
"1000151" -> "1000149"  [label="AST: "];
"1000154" -> "1000149"  [label="CFG: "];
"1000182" -> "1000178"  [label="AST: "];
"1000183" -> "1000182"  [label="AST: "];
"1000178" -> "1000182"  [label="CFG: "];
"1000182" -> "1000467"  [label="DDG: png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_byte) * num_weights))"];
"1000182" -> "1000178"  [label="DDG: png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_byte) * num_weights))"];
"1000178" -> "1000177"  [label="AST: "];
"1000179" -> "1000178"  [label="AST: "];
"1000194" -> "1000178"  [label="CFG: "];
"1000178" -> "1000467"  [label="DDG: (png_bytep)png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_byte) * num_weights))"];
"1000178" -> "1000467"  [label="DDG: png_ptr->prev_filters"];
"1000222" -> "1000220"  [label="AST: "];
"1000222" -> "1000224"  [label="CFG: "];
"1000223" -> "1000222"  [label="AST: "];
"1000224" -> "1000222"  [label="AST: "];
"1000220" -> "1000222"  [label="CFG: "];
"1000222" -> "1000220"  [label="DDG: png_ptr"];
"1000222" -> "1000220"  [label="DDG: (png_uint_32)(png_sizeof(png_uint_16) * num_weights)"];
"1000224" -> "1000222"  [label="DDG: png_sizeof(png_uint_16) * num_weights"];
"1000222" -> "1000236"  [label="DDG: png_ptr"];
"1000220" -> "1000216"  [label="AST: "];
"1000221" -> "1000220"  [label="AST: "];
"1000216" -> "1000220"  [label="CFG: "];
"1000220" -> "1000216"  [label="DDG: png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_uint_16) * num_weights))"];
"1000216" -> "1000215"  [label="AST: "];
"1000217" -> "1000216"  [label="AST: "];
"1000232" -> "1000216"  [label="CFG: "];
"1000216" -> "1000467"  [label="DDG: png_ptr->filter_weights"];
"1000236" -> "1000234"  [label="AST: "];
"1000236" -> "1000238"  [label="CFG: "];
"1000237" -> "1000236"  [label="AST: "];
"1000238" -> "1000236"  [label="AST: "];
"1000234" -> "1000236"  [label="CFG: "];
"1000236" -> "1000467"  [label="DDG: png_ptr"];
"1000236" -> "1000467"  [label="DDG: (png_uint_32)(png_sizeof(png_uint_16) * num_weights)"];
"1000236" -> "1000234"  [label="DDG: png_ptr"];
"1000236" -> "1000234"  [label="DDG: (png_uint_32)(png_sizeof(png_uint_16) * num_weights)"];
"1000238" -> "1000236"  [label="DDG: png_sizeof(png_uint_16) * num_weights"];
"1000236" -> "1000346"  [label="DDG: png_ptr"];
"1000234" -> "1000230"  [label="AST: "];
"1000235" -> "1000234"  [label="AST: "];
"1000230" -> "1000234"  [label="CFG: "];
"1000234" -> "1000467"  [label="DDG: png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_uint_16) * num_weights))"];
"1000234" -> "1000230"  [label="DDG: png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_uint_16) * num_weights))"];
"1000230" -> "1000215"  [label="AST: "];
"1000231" -> "1000230"  [label="AST: "];
"1000246" -> "1000230"  [label="CFG: "];
"1000230" -> "1000467"  [label="DDG: png_ptr->inv_filter_weights"];
"1000230" -> "1000467"  [label="DDG: (png_uint_16p)png_malloc(png_ptr,\n            (png_uint_32)(png_sizeof(png_uint_16) * num_weights))"];
"1000346" -> "1000344"  [label="AST: "];
"1000346" -> "1000348"  [label="CFG: "];
"1000347" -> "1000346"  [label="AST: "];
"1000348" -> "1000346"  [label="AST: "];
"1000344" -> "1000346"  [label="CFG: "];
"1000346" -> "1000344"  [label="DDG: png_ptr"];
"1000346" -> "1000344"  [label="DDG: (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST)"];
"1000348" -> "1000346"  [label="DDG: png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST"];
"1000346" -> "1000360"  [label="DDG: png_ptr"];
"1000344" -> "1000340"  [label="AST: "];
"1000345" -> "1000344"  [label="AST: "];
"1000340" -> "1000344"  [label="CFG: "];
"1000344" -> "1000340"  [label="DDG: png_malloc(png_ptr,\n         (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST))"];
"1000340" -> "1000339"  [label="AST: "];
"1000341" -> "1000340"  [label="AST: "];
"1000356" -> "1000340"  [label="CFG: "];
"1000340" -> "1000467"  [label="DDG: png_ptr->filter_costs"];
"1000360" -> "1000358"  [label="AST: "];
"1000360" -> "1000362"  [label="CFG: "];
"1000361" -> "1000360"  [label="AST: "];
"1000362" -> "1000360"  [label="AST: "];
"1000358" -> "1000360"  [label="CFG: "];
"1000360" -> "1000467"  [label="DDG: png_ptr"];
"1000360" -> "1000467"  [label="DDG: (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST)"];
"1000360" -> "1000358"  [label="DDG: png_ptr"];
"1000360" -> "1000358"  [label="DDG: (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST)"];
"1000362" -> "1000360"  [label="DDG: png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST"];
"1000358" -> "1000354"  [label="AST: "];
"1000359" -> "1000358"  [label="AST: "];
"1000354" -> "1000358"  [label="CFG: "];
"1000358" -> "1000467"  [label="DDG: png_malloc(png_ptr,\n         (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST))"];
"1000358" -> "1000354"  [label="DDG: png_malloc(png_ptr,\n         (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST))"];
"1000354" -> "1000339"  [label="AST: "];
"1000355" -> "1000354"  [label="AST: "];
"1000370" -> "1000354"  [label="CFG: "];
"1000354" -> "1000467"  [label="DDG: (png_uint_16p)png_malloc(png_ptr,\n         (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST))"];
"1000354" -> "1000467"  [label="DDG: png_ptr->inv_filter_costs"];
}
