digraph "0_tcpdump_e0a5a02b0fc1900a69d6c37ed0aab36fb8494e6d_0@pointer" {
"1000160" [label="(Call,t < nmap && map[t].type)"];
"1000161" [label="(Call,t < nmap)"];
"1000148" [label="(Call,t = EXTRACT_16BITS(&p[0]) & 0x7fff)"];
"1000150" [label="(Call,EXTRACT_16BITS(&p[0]) & 0x7fff)"];
"1000151" [label="(Call,EXTRACT_16BITS(&p[0]))"];
"1000124" [label="(Call,EXTRACT_16BITS(&p[2]))"];
"1000105" [label="(MethodParameterIn,size_t nmap)"];
"1000158" [label="(Call,map && t < nmap && map[t].type)"];
"1000205" [label="(Call,map && t < nmap && v < map[t].nvalue && map[t].value[v])"];
"1000281" [label="(MethodReturn,RET)"];
"1000157" [label="(ControlStructure,if (map && t < nmap && map[t].type))"];
"1000228" [label="(Identifier,ndo)"];
"1000162" [label="(Identifier,t)"];
"1000205" [label="(Call,map && t < nmap && v < map[t].nvalue && map[t].value[v])"];
"1000105" [label="(MethodParameterIn,size_t nmap)"];
"1000268" [label="(Call,EXTRACT_16BITS(&p[2]))"];
"1000156" [label="(Literal,0x7fff)"];
"1000163" [label="(Identifier,nmap)"];
"1000161" [label="(Call,t < nmap)"];
"1000150" [label="(Call,EXTRACT_16BITS(&p[0]) & 0x7fff)"];
"1000151" [label="(Call,EXTRACT_16BITS(&p[0]))"];
"1000206" [label="(Identifier,map)"];
"1000164" [label="(Call,map[t].type)"];
"1000160" [label="(Call,t < nmap && map[t].type)"];
"1000106" [label="(Block,)"];
"1000240" [label="(Identifier,ndo)"];
"1000149" [label="(Identifier,t)"];
"1000122" [label="(Call,4 + EXTRACT_16BITS(&p[2]))"];
"1000104" [label="(MethodParameterIn,const struct attrmap *map)"];
"1000152" [label="(Call,&p[0])"];
"1000207" [label="(Call,t < nmap && v < map[t].nvalue && map[t].value[v])"];
"1000199" [label="(Call,EXTRACT_16BITS(&p[2]))"];
"1000125" [label="(Call,&p[2])"];
"1000241" [label="(Call,(const uint8_t *)&p[2])"];
"1000158" [label="(Call,map && t < nmap && map[t].type)"];
"1000120" [label="(Call,totlen = 4 + EXTRACT_16BITS(&p[2]))"];
"1000204" [label="(ControlStructure,if (map && t < nmap && v < map[t].nvalue && map[t].value[v]))"];
"1000148" [label="(Call,t = EXTRACT_16BITS(&p[0]) & 0x7fff)"];
"1000255" [label="(Call,EXTRACT_16BITS(&p[2]))"];
"1000171" [label="(Identifier,ndo)"];
"1000166" [label="(Identifier,map)"];
"1000159" [label="(Identifier,map)"];
"1000208" [label="(Call,t < nmap)"];
"1000182" [label="(Identifier,ndo)"];
"1000262" [label="(Call,(const uint8_t *)&p[4])"];
"1000124" [label="(Call,EXTRACT_16BITS(&p[2]))"];
"1000160" -> "1000158"  [label="AST: "];
"1000160" -> "1000161"  [label="CFG: "];
"1000160" -> "1000164"  [label="CFG: "];
"1000161" -> "1000160"  [label="AST: "];
"1000164" -> "1000160"  [label="AST: "];
"1000158" -> "1000160"  [label="CFG: "];
"1000160" -> "1000281"  [label="DDG: map[t].type"];
"1000160" -> "1000281"  [label="DDG: t < nmap"];
"1000160" -> "1000158"  [label="DDG: t < nmap"];
"1000160" -> "1000158"  [label="DDG: map[t].type"];
"1000161" -> "1000160"  [label="DDG: t"];
"1000161" -> "1000160"  [label="DDG: nmap"];
"1000161" -> "1000163"  [label="CFG: "];
"1000162" -> "1000161"  [label="AST: "];
"1000163" -> "1000161"  [label="AST: "];
"1000166" -> "1000161"  [label="CFG: "];
"1000161" -> "1000281"  [label="DDG: nmap"];
"1000161" -> "1000281"  [label="DDG: t"];
"1000148" -> "1000161"  [label="DDG: t"];
"1000105" -> "1000161"  [label="DDG: nmap"];
"1000161" -> "1000208"  [label="DDG: t"];
"1000161" -> "1000208"  [label="DDG: nmap"];
"1000148" -> "1000106"  [label="AST: "];
"1000148" -> "1000150"  [label="CFG: "];
"1000149" -> "1000148"  [label="AST: "];
"1000150" -> "1000148"  [label="AST: "];
"1000159" -> "1000148"  [label="CFG: "];
"1000148" -> "1000281"  [label="DDG: EXTRACT_16BITS(&p[0]) & 0x7fff"];
"1000148" -> "1000281"  [label="DDG: t"];
"1000150" -> "1000148"  [label="DDG: EXTRACT_16BITS(&p[0])"];
"1000150" -> "1000148"  [label="DDG: 0x7fff"];
"1000148" -> "1000208"  [label="DDG: t"];
"1000150" -> "1000156"  [label="CFG: "];
"1000151" -> "1000150"  [label="AST: "];
"1000156" -> "1000150"  [label="AST: "];
"1000150" -> "1000281"  [label="DDG: EXTRACT_16BITS(&p[0])"];
"1000151" -> "1000150"  [label="DDG: &p[0]"];
"1000151" -> "1000152"  [label="CFG: "];
"1000152" -> "1000151"  [label="AST: "];
"1000156" -> "1000151"  [label="CFG: "];
"1000151" -> "1000281"  [label="DDG: &p[0]"];
"1000124" -> "1000151"  [label="DDG: &p[2]"];
"1000151" -> "1000199"  [label="DDG: &p[0]"];
"1000151" -> "1000241"  [label="DDG: &p[0]"];
"1000151" -> "1000255"  [label="DDG: &p[0]"];
"1000151" -> "1000262"  [label="DDG: &p[0]"];
"1000151" -> "1000268"  [label="DDG: &p[0]"];
"1000124" -> "1000122"  [label="AST: "];
"1000124" -> "1000125"  [label="CFG: "];
"1000125" -> "1000124"  [label="AST: "];
"1000122" -> "1000124"  [label="CFG: "];
"1000124" -> "1000281"  [label="DDG: &p[2]"];
"1000124" -> "1000120"  [label="DDG: &p[2]"];
"1000124" -> "1000122"  [label="DDG: &p[2]"];
"1000124" -> "1000199"  [label="DDG: &p[2]"];
"1000124" -> "1000255"  [label="DDG: &p[2]"];
"1000105" -> "1000100"  [label="AST: "];
"1000105" -> "1000281"  [label="DDG: nmap"];
"1000105" -> "1000208"  [label="DDG: nmap"];
"1000158" -> "1000157"  [label="AST: "];
"1000158" -> "1000159"  [label="CFG: "];
"1000159" -> "1000158"  [label="AST: "];
"1000171" -> "1000158"  [label="CFG: "];
"1000182" -> "1000158"  [label="CFG: "];
"1000158" -> "1000281"  [label="DDG: map"];
"1000158" -> "1000281"  [label="DDG: t < nmap && map[t].type"];
"1000158" -> "1000281"  [label="DDG: map && t < nmap && map[t].type"];
"1000104" -> "1000158"  [label="DDG: map"];
"1000158" -> "1000205"  [label="DDG: map"];
"1000205" -> "1000204"  [label="AST: "];
"1000205" -> "1000206"  [label="CFG: "];
"1000205" -> "1000207"  [label="CFG: "];
"1000206" -> "1000205"  [label="AST: "];
"1000207" -> "1000205"  [label="AST: "];
"1000228" -> "1000205"  [label="CFG: "];
"1000240" -> "1000205"  [label="CFG: "];
"1000205" -> "1000281"  [label="DDG: t < nmap && v < map[t].nvalue && map[t].value[v]"];
"1000205" -> "1000281"  [label="DDG: map && t < nmap && v < map[t].nvalue && map[t].value[v]"];
"1000205" -> "1000281"  [label="DDG: map"];
"1000104" -> "1000205"  [label="DDG: map"];
"1000207" -> "1000205"  [label="DDG: t < nmap"];
"1000207" -> "1000205"  [label="DDG: v < map[t].nvalue && map[t].value[v]"];
}
