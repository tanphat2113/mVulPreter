digraph "0_linux_b4789b8e6be3151a955ade74872822f30e8cd914@API" {
"1000699" [label="(Call,kmalloc(actual_fibsize - sizeof(struct aac_srb)\n\t\t\t  + sizeof(struct sgmap), GFP_KERNEL))"];
"1000700" [label="(Call,actual_fibsize - sizeof(struct aac_srb)\n\t\t\t  + sizeof(struct sgmap))"];
"1000424" [label="(Call,actual_fibsize != fibsize)"];
"1000387" [label="(Call,actual_fibsize = sizeof(struct aac_srb) - sizeof(struct sgentry) +\n\t\t((user_srbcmd->sg.count & 0xff) * sizeof(struct sgentry)))"];
"1000389" [label="(Call,sizeof(struct aac_srb) - sizeof(struct sgentry) +\n\t\t((user_srbcmd->sg.count & 0xff) * sizeof(struct sgentry)))"];
"1000395" [label="(Call,(user_srbcmd->sg.count & 0xff) * sizeof(struct sgentry))"];
"1000396" [label="(Call,user_srbcmd->sg.count & 0xff)"];
"1000373" [label="(Call,user_srbcmd->sg.count > ARRAY_SIZE(sg_list))"];
"1000379" [label="(Call,ARRAY_SIZE(sg_list))"];
"1000208" [label="(Call,memset(sg_list, 0, sizeof(sg_list)))"];
"1000259" [label="(Call,copy_from_user(user_srbcmd, user_srb,fibsize))"];
"1000250" [label="(Call,!user_srbcmd)"];
"1000244" [label="(Call,user_srbcmd = kmalloc(fibsize, GFP_KERNEL))"];
"1000246" [label="(Call,kmalloc(fibsize, GFP_KERNEL))"];
"1000230" [label="(Call,fibsize > (dev->max_fib_size - sizeof(struct aac_fibhdr)))"];
"1000136" [label="(Call,fibsize = 0)"];
"1000232" [label="(Call,dev->max_fib_size - sizeof(struct aac_fibhdr))"];
"1000130" [label="(Call,*user_srb = arg)"];
"1000117" [label="(MethodParameterIn,void __user * arg)"];
"1000697" [label="(Call,usg = kmalloc(actual_fibsize - sizeof(struct aac_srb)\n\t\t\t  + sizeof(struct sgmap), GFP_KERNEL))"];
"1000709" [label="(Call,!usg)"];
"1000717" [label="(Call,memcpy (usg, upsg, actual_fibsize - sizeof(struct aac_srb)\n\t\t\t  + sizeof(struct sgmap)))"];
"1000770" [label="(Call,kfree(usg))"];
"1000794" [label="(Call,kfree(usg))"];
"1000843" [label="(Call,kfree (usg))"];
"1000918" [label="(Call,kfree (usg))"];
"1000787" [label="(Call,GFP_KERNEL|__GFP_DMA)"];
"1000779" [label="(Call,kmalloc(usg->sg[i].count,GFP_KERNEL|__GFP_DMA))"];
"1000777" [label="(Call,p = kmalloc(usg->sg[i].count,GFP_KERNEL|__GFP_DMA))"];
"1000791" [label="(Call,!p)"];
"1000816" [label="(Call,sg_list[i] = p)"];
"1001416" [label="(Call,copy_to_user(sg_user[i], sg_list[i], byte_count))"];
"1001461" [label="(Call,kfree(sg_list[i]))"];
"1000830" [label="(Call,copy_from_user(p,sg_user[i],upsg->sg[i].count))"];
"1000852" [label="(Call,pci_map_single(dev->pdev, p, usg->sg[i].count, data_dir))"];
"1000850" [label="(Call,addr = pci_map_single(dev->pdev, p, usg->sg[i].count, data_dir))"];
"1000876" [label="(Call,addr & 0xffffffff)"];
"1000875" [label="(Call,cpu_to_le32(addr & 0xffffffff))"];
"1000865" [label="(Call,psg->sg[i].addr[0] = cpu_to_le32(addr & 0xffffffff))"];
"1000890" [label="(Call,addr>>32)"];
"1000889" [label="(Call,cpu_to_le32(addr>>32))"];
"1000879" [label="(Call,psg->sg[i].addr[1] = cpu_to_le32(addr>>32))"];
"1000893" [label="(Call,byte_count += usg->sg[i].count)"];
"1000924" [label="(Call,cpu_to_le32(byte_count))"];
"1000920" [label="(Call,srbcmd->count = cpu_to_le32(byte_count))"];
"1000910" [label="(Call,cpu_to_le32(usg->sg[i].count))"];
"1000745" [label="(Call,usg->sg[i].count >\n\t\t\t\t    ((dev->adapter_info.options &\n\t\t\t\t     AAC_OPT_NEW_COMM) ?\n\t\t\t\t      (dev->scsi_host_ptr->max_sectors << 9) :\n\t\t\t\t      65536))"];
"1000902" [label="(Call,psg->sg[i].count = cpu_to_le32(usg->sg[i].count))"];
"1000884" [label="(Identifier,psg)"];
"1000846" [label="(Identifier,rcode)"];
"1000832" [label="(Call,sg_user[i])"];
"1000842" [label="(Block,)"];
"1000397" [label="(Call,user_srbcmd->sg.count)"];
"1000797" [label="(Identifier,rcode)"];
"1000906" [label="(Identifier,psg)"];
"1000857" [label="(Call,usg->sg[i].count)"];
"1001225" [label="(Call,sg_user[i] = (void __user *)(uintptr_t)upsg->sg[i].addr)"];
"1000856" [label="(Identifier,p)"];
"1000261" [label="(Identifier,user_srb)"];
"1000265" [label="(Identifier,rcode)"];
"1000795" [label="(Identifier,usg)"];
"1000851" [label="(Identifier,addr)"];
"1000248" [label="(Identifier,GFP_KERNEL)"];
"1000697" [label="(Call,usg = kmalloc(actual_fibsize - sizeof(struct aac_srb)\n\t\t\t  + sizeof(struct sgmap), GFP_KERNEL))"];
"1000373" [label="(Call,user_srbcmd->sg.count > ARRAY_SIZE(sg_list))"];
"1000892" [label="(Literal,32)"];
"1000962" [label="(Call,actual_fibsize64 == fibsize)"];
"1000387" [label="(Call,actual_fibsize = sizeof(struct aac_srb) - sizeof(struct sgentry) +\n\t\t((user_srbcmd->sg.count & 0xff) * sizeof(struct sgentry)))"];
"1000844" [label="(Identifier,usg)"];
"1000428" [label="(Identifier,actual_fibsize64)"];
"1001415" [label="(ControlStructure,if(copy_to_user(sg_user[i], sg_list[i], byte_count)))"];
"1001088" [label="(Call,copy_from_user(p,sg_user[i],usg->sg[i].count))"];
"1000740" [label="(Identifier,i)"];
"1001461" [label="(Call,kfree(sg_list[i]))"];
"1000880" [label="(Call,psg->sg[i].addr[1])"];
"1000843" [label="(Call,kfree (usg))"];
"1001338" [label="(Call,aac_fib_send(ScsiPortCommand, srbfib, actual_fibsize, FsaNormal, 1, 1, NULL, NULL))"];
"1000424" [label="(Call,actual_fibsize != fibsize)"];
"1000699" [label="(Call,kmalloc(actual_fibsize - sizeof(struct aac_srb)\n\t\t\t  + sizeof(struct sgmap), GFP_KERNEL))"];
"1000132" [label="(Identifier,arg)"];
"1000380" [label="(Identifier,sg_list)"];
"1000406" [label="(Identifier,actual_fibsize64)"];
"1000922" [label="(Identifier,srbcmd)"];
"1000864" [label="(Identifier,data_dir)"];
"1000708" [label="(ControlStructure,if (!usg))"];
"1000137" [label="(Identifier,fibsize)"];
"1000388" [label="(Identifier,actual_fibsize)"];
"1001027" [label="(Call,GFP_KERNEL|__GFP_DMA)"];
"1000426" [label="(Identifier,fibsize)"];
"1000853" [label="(Call,dev->pdev)"];
"1000890" [label="(Call,addr>>32)"];
"1001074" [label="(Call,sg_list[i] = p)"];
"1001426" [label="(Identifier,rcode)"];
"1000820" [label="(Identifier,p)"];
"1000258" [label="(ControlStructure,if(copy_from_user(user_srbcmd, user_srb,fibsize)))"];
"1000270" [label="(Identifier,user_reply)"];
"1000244" [label="(Call,user_srbcmd = kmalloc(fibsize, GFP_KERNEL))"];
"1000251" [label="(Identifier,user_srbcmd)"];
"1000141" [label="(Identifier,flags)"];
"1000779" [label="(Call,kmalloc(usg->sg[i].count,GFP_KERNEL|__GFP_DMA))"];
"1000789" [label="(Identifier,__GFP_DMA)"];
"1001383" [label="(Call,byte_count = le32_to_cpu(\n\t\t\t  (dev->adapter_info.options & AAC_OPT_SGMAP_HOST64)\n\t\t\t      ? ((struct sgmap64*)&srbcmd->sg)->sg[i].count\n\t\t\t      : srbcmd->sg.sg[i].count))"];
"1000216" [label="(Identifier,fibsize)"];
"1000463" [label="(Block,)"];
"1000829" [label="(ControlStructure,if(copy_from_user(p,sg_user[i],upsg->sg[i].count)))"];
"1000710" [label="(Identifier,usg)"];
"1000427" [label="(Call,actual_fibsize64 != fibsize)"];
"1000894" [label="(Identifier,byte_count)"];
"1001240" [label="(Call,sg_list[i] = p)"];
"1000407" [label="(Call,actual_fibsize + (user_srbcmd->sg.count & 0xff) *\n\t  (sizeof(struct sgentry64) - sizeof(struct sgentry)))"];
"1000402" [label="(Literal,0xff)"];
"1001067" [label="(Call,sg_user[i] = (void __user *)addr)"];
"1000395" [label="(Call,(user_srbcmd->sg.count & 0xff) * sizeof(struct sgentry))"];
"1001254" [label="(Call,copy_from_user(p, sg_user[i],\n\t\t\t\t\t\t\tupsg->sg[i].count))"];
"1000918" [label="(Call,kfree (usg))"];
"1000875" [label="(Call,cpu_to_le32(addr & 0xffffffff))"];
"1000423" [label="(Call,(actual_fibsize != fibsize) && (actual_fibsize64 != fibsize))"];
"1000396" [label="(Call,user_srbcmd->sg.count & 0xff)"];
"1000830" [label="(Call,copy_from_user(p,sg_user[i],upsg->sg[i].count))"];
"1000545" [label="(Call,GFP_KERNEL|__GFP_DMA)"];
"1000761" [label="(Call,dev->scsi_host_ptr->max_sectors << 9)"];
"1000403" [label="(Call,sizeof(struct sgentry))"];
"1000700" [label="(Call,actual_fibsize - sizeof(struct aac_srb)\n\t\t\t  + sizeof(struct sgmap))"];
"1000425" [label="(Identifier,actual_fibsize)"];
"1000208" [label="(Call,memset(sg_list, 0, sizeof(sg_list)))"];
"1000594" [label="(Call,sg_list[i] = p)"];
"1000230" [label="(Call,fibsize > (dev->max_fib_size - sizeof(struct aac_fibhdr)))"];
"1000787" [label="(Call,GFP_KERNEL|__GFP_DMA)"];
"1000585" [label="(Call,sg_user[i] = (void __user *)(uintptr_t)addr)"];
"1000816" [label="(Call,sg_list[i] = p)"];
"1000247" [label="(Identifier,fibsize)"];
"1000392" [label="(Call,sizeof(struct sgentry) +\n\t\t((user_srbcmd->sg.count & 0xff) * sizeof(struct sgentry)))"];
"1000249" [label="(ControlStructure,if (!user_srbcmd))"];
"1000831" [label="(Identifier,p)"];
"1000903" [label="(Call,psg->sg[i].count)"];
"1000889" [label="(Call,cpu_to_le32(addr>>32))"];
"1000246" [label="(Call,kmalloc(fibsize, GFP_KERNEL))"];
"1000718" [label="(Identifier,usg)"];
"1000921" [label="(Call,srbcmd->count)"];
"1000707" [label="(Identifier,GFP_KERNEL)"];
"1000720" [label="(Call,actual_fibsize - sizeof(struct aac_srb)\n\t\t\t  + sizeof(struct sgmap))"];
"1000741" [label="(Block,)"];
"1000669" [label="(Call,byte_count += upsg->sg[i].count)"];
"1000866" [label="(Call,psg->sg[i].addr[0])"];
"1000769" [label="(Block,)"];
"1000771" [label="(Identifier,usg)"];
"1000850" [label="(Call,addr = pci_map_single(dev->pdev, p, usg->sg[i].count, data_dir))"];
"1000870" [label="(Identifier,psg)"];
"1000745" [label="(Call,usg->sg[i].count >\n\t\t\t\t    ((dev->adapter_info.options &\n\t\t\t\t     AAC_OPT_NEW_COMM) ?\n\t\t\t\t      (dev->scsi_host_ptr->max_sectors << 9) :\n\t\t\t\t      65536))"];
"1001460" [label="(Block,)"];
"1000753" [label="(Call,(dev->adapter_info.options &\n\t\t\t\t     AAC_OPT_NEW_COMM) ?\n\t\t\t\t      (dev->scsi_host_ptr->max_sectors << 9) :\n\t\t\t\t      65536)"];
"1000891" [label="(Identifier,addr)"];
"1000928" [label="(Identifier,psg)"];
"1000250" [label="(Call,!user_srbcmd)"];
"1000920" [label="(Call,srbcmd->count = cpu_to_le32(byte_count))"];
"1001420" [label="(Call,sg_list[i])"];
"1000695" [label="(Block,)"];
"1000803" [label="(Identifier,sg_user)"];
"1000410" [label="(Call,user_srbcmd->sg.count & 0xff)"];
"1000383" [label="(Identifier,rcode)"];
"1000240" [label="(Identifier,rcode)"];
"1000893" [label="(Call,byte_count += usg->sg[i].count)"];
"1000405" [label="(Call,actual_fibsize64 = actual_fibsize + (user_srbcmd->sg.count & 0xff) *\n\t  (sizeof(struct sgentry64) - sizeof(struct sgentry)))"];
"1000925" [label="(Identifier,byte_count)"];
"1000260" [label="(Identifier,user_srbcmd)"];
"1000791" [label="(Call,!p)"];
"1001459" [label="(Identifier,i)"];
"1001381" [label="(Identifier,i)"];
"1000211" [label="(Call,sizeof(sg_list))"];
"1000817" [label="(Call,sg_list[i])"];
"1000231" [label="(Identifier,fibsize)"];
"1000117" [label="(MethodParameterIn,void __user * arg)"];
"1000698" [label="(Identifier,usg)"];
"1000374" [label="(Call,user_srbcmd->sg.count)"];
"1000233" [label="(Call,dev->max_fib_size)"];
"1000877" [label="(Identifier,addr)"];
"1000713" [label="(Identifier,rcode)"];
"1000919" [label="(Identifier,usg)"];
"1000793" [label="(Block,)"];
"1000232" [label="(Call,dev->max_fib_size - sizeof(struct aac_fibhdr))"];
"1000438" [label="(Call,data_dir == DMA_NONE)"];
"1000879" [label="(Call,psg->sg[i].addr[1] = cpu_to_le32(addr>>32))"];
"1000138" [label="(Literal,0)"];
"1000701" [label="(Identifier,actual_fibsize)"];
"1000717" [label="(Call,memcpy (usg, upsg, actual_fibsize - sizeof(struct aac_srb)\n\t\t\t  + sizeof(struct sgmap)))"];
"1000210" [label="(Literal,0)"];
"1000924" [label="(Call,cpu_to_le32(byte_count))"];
"1001477" [label="(MethodReturn,static int)"];
"1000229" [label="(ControlStructure,if (fibsize > (dev->max_fib_size - sizeof(struct aac_fibhdr))))"];
"1000878" [label="(Literal,0xffffffff)"];
"1000254" [label="(Identifier,rcode)"];
"1000262" [label="(Identifier,fibsize)"];
"1000911" [label="(Call,usg->sg[i].count)"];
"1000865" [label="(Call,psg->sg[i].addr[0] = cpu_to_le32(addr & 0xffffffff))"];
"1000773" [label="(Identifier,rcode)"];
"1001416" [label="(Call,copy_to_user(sg_user[i], sg_list[i], byte_count))"];
"1000902" [label="(Call,psg->sg[i].count = cpu_to_le32(usg->sg[i].count))"];
"1000465" [label="(Call,* upsg = (struct user_sgmap64*)&user_srbcmd->sg)"];
"1000245" [label="(Identifier,user_srbcmd)"];
"1000236" [label="(Call,sizeof(struct aac_fibhdr))"];
"1000790" [label="(ControlStructure,if(!p))"];
"1000372" [label="(ControlStructure,if (user_srbcmd->sg.count > ARRAY_SIZE(sg_list)))"];
"1000483" [label="(Call,actual_fibsize64 == fibsize)"];
"1000271" [label="(Call,arg+fibsize)"];
"1000136" [label="(Call,fibsize = 0)"];
"1000269" [label="(Call,user_reply = arg+fibsize)"];
"1000702" [label="(Call,sizeof(struct aac_srb)\n\t\t\t  + sizeof(struct sgmap))"];
"1000390" [label="(Call,sizeof(struct aac_srb))"];
"1000777" [label="(Call,p = kmalloc(usg->sg[i].count,GFP_KERNEL|__GFP_DMA))"];
"1001423" [label="(Identifier,byte_count)"];
"1000852" [label="(Call,pci_map_single(dev->pdev, p, usg->sg[i].count, data_dir))"];
"1000910" [label="(Call,cpu_to_le32(usg->sg[i].count))"];
"1000719" [label="(Identifier,upsg)"];
"1000770" [label="(Call,kfree(usg))"];
"1000835" [label="(Call,upsg->sg[i].count)"];
"1000876" [label="(Call,addr & 0xffffffff)"];
"1000209" [label="(Identifier,sg_list)"];
"1000744" [label="(ControlStructure,if (usg->sg[i].count >\n\t\t\t\t    ((dev->adapter_info.options &\n\t\t\t\t     AAC_OPT_NEW_COMM) ?\n\t\t\t\t      (dev->scsi_host_ptr->max_sectors << 9) :\n\t\t\t\t      65536)))"];
"1000794" [label="(Call,kfree(usg))"];
"1000778" [label="(Identifier,p)"];
"1000895" [label="(Call,usg->sg[i].count)"];
"1000792" [label="(Identifier,p)"];
"1000389" [label="(Call,sizeof(struct aac_srb) - sizeof(struct sgentry) +\n\t\t((user_srbcmd->sg.count & 0xff) * sizeof(struct sgentry)))"];
"1001417" [label="(Call,sg_user[i])"];
"1000746" [label="(Call,usg->sg[i].count)"];
"1001449" [label="(Call,kfree(user_srbcmd))"];
"1000259" [label="(Call,copy_from_user(user_srbcmd, user_srb,fibsize))"];
"1000709" [label="(Call,!usg)"];
"1000728" [label="(Identifier,actual_fibsize)"];
"1000452" [label="(Call,byte_count = 0)"];
"1000130" [label="(Call,*user_srb = arg)"];
"1000788" [label="(Identifier,GFP_KERNEL)"];
"1001207" [label="(Call,kmalloc(upsg->sg[i].count, GFP_KERNEL))"];
"1000379" [label="(Call,ARRAY_SIZE(sg_list))"];
"1001462" [label="(Call,sg_list[i])"];
"1000822" [label="(Identifier,sg_indx)"];
"1000801" [label="(Call,sg_user[i] = (void __user *)(uintptr_t)usg->sg[i].addr)"];
"1000118" [label="(Block,)"];
"1000608" [label="(Call,copy_from_user(p,sg_user[i],upsg->sg[i].count))"];
"1000131" [label="(Identifier,user_srb)"];
"1000780" [label="(Call,usg->sg[i].count)"];
"1000699" -> "1000697"  [label="AST: "];
"1000699" -> "1000707"  [label="CFG: "];
"1000700" -> "1000699"  [label="AST: "];
"1000707" -> "1000699"  [label="AST: "];
"1000697" -> "1000699"  [label="CFG: "];
"1000699" -> "1001477"  [label="DDG: actual_fibsize - sizeof(struct aac_srb)\n\t\t\t  + sizeof(struct sgmap)"];
"1000699" -> "1001477"  [label="DDG: GFP_KERNEL"];
"1000699" -> "1000697"  [label="DDG: actual_fibsize - sizeof(struct aac_srb)\n\t\t\t  + sizeof(struct sgmap)"];
"1000699" -> "1000697"  [label="DDG: GFP_KERNEL"];
"1000700" -> "1000699"  [label="DDG: actual_fibsize"];
"1000700" -> "1000699"  [label="DDG: sizeof(struct aac_srb)\n\t\t\t  + sizeof(struct sgmap)"];
"1000246" -> "1000699"  [label="DDG: GFP_KERNEL"];
"1000699" -> "1000787"  [label="DDG: GFP_KERNEL"];
"1000700" -> "1000702"  [label="CFG: "];
"1000701" -> "1000700"  [label="AST: "];
"1000702" -> "1000700"  [label="AST: "];
"1000707" -> "1000700"  [label="CFG: "];
"1000700" -> "1001477"  [label="DDG: actual_fibsize"];
"1000700" -> "1001477"  [label="DDG: sizeof(struct aac_srb)\n\t\t\t  + sizeof(struct sgmap)"];
"1000424" -> "1000700"  [label="DDG: actual_fibsize"];
"1000700" -> "1000720"  [label="DDG: actual_fibsize"];
"1000424" -> "1000423"  [label="AST: "];
"1000424" -> "1000426"  [label="CFG: "];
"1000425" -> "1000424"  [label="AST: "];
"1000426" -> "1000424"  [label="AST: "];
"1000428" -> "1000424"  [label="CFG: "];
"1000423" -> "1000424"  [label="CFG: "];
"1000424" -> "1001477"  [label="DDG: fibsize"];
"1000424" -> "1001477"  [label="DDG: actual_fibsize"];
"1000424" -> "1000423"  [label="DDG: actual_fibsize"];
"1000424" -> "1000423"  [label="DDG: fibsize"];
"1000387" -> "1000424"  [label="DDG: actual_fibsize"];
"1000259" -> "1000424"  [label="DDG: fibsize"];
"1000424" -> "1000427"  [label="DDG: fibsize"];
"1000424" -> "1000483"  [label="DDG: fibsize"];
"1000424" -> "1000962"  [label="DDG: fibsize"];
"1000424" -> "1001338"  [label="DDG: actual_fibsize"];
"1000387" -> "1000118"  [label="AST: "];
"1000387" -> "1000389"  [label="CFG: "];
"1000388" -> "1000387"  [label="AST: "];
"1000389" -> "1000387"  [label="AST: "];
"1000406" -> "1000387"  [label="CFG: "];
"1000387" -> "1001477"  [label="DDG: sizeof(struct aac_srb) - sizeof(struct sgentry) +\n\t\t((user_srbcmd->sg.count & 0xff) * sizeof(struct sgentry))"];
"1000389" -> "1000387"  [label="DDG: sizeof(struct sgentry) +\n\t\t((user_srbcmd->sg.count & 0xff) * sizeof(struct sgentry))"];
"1000387" -> "1000405"  [label="DDG: actual_fibsize"];
"1000387" -> "1000407"  [label="DDG: actual_fibsize"];
"1000389" -> "1000392"  [label="CFG: "];
"1000390" -> "1000389"  [label="AST: "];
"1000392" -> "1000389"  [label="AST: "];
"1000389" -> "1001477"  [label="DDG: sizeof(struct sgentry) +\n\t\t((user_srbcmd->sg.count & 0xff) * sizeof(struct sgentry))"];
"1000395" -> "1000389"  [label="DDG: user_srbcmd->sg.count & 0xff"];
"1000395" -> "1000392"  [label="AST: "];
"1000395" -> "1000403"  [label="CFG: "];
"1000396" -> "1000395"  [label="AST: "];
"1000403" -> "1000395"  [label="AST: "];
"1000392" -> "1000395"  [label="CFG: "];
"1000395" -> "1000392"  [label="DDG: user_srbcmd->sg.count & 0xff"];
"1000396" -> "1000395"  [label="DDG: user_srbcmd->sg.count"];
"1000396" -> "1000395"  [label="DDG: 0xff"];
"1000396" -> "1000402"  [label="CFG: "];
"1000397" -> "1000396"  [label="AST: "];
"1000402" -> "1000396"  [label="AST: "];
"1000404" -> "1000396"  [label="CFG: "];
"1000373" -> "1000396"  [label="DDG: user_srbcmd->sg.count"];
"1000396" -> "1000410"  [label="DDG: user_srbcmd->sg.count"];
"1000373" -> "1000372"  [label="AST: "];
"1000373" -> "1000379"  [label="CFG: "];
"1000374" -> "1000373"  [label="AST: "];
"1000379" -> "1000373"  [label="AST: "];
"1000383" -> "1000373"  [label="CFG: "];
"1000388" -> "1000373"  [label="CFG: "];
"1000373" -> "1001477"  [label="DDG: ARRAY_SIZE(sg_list)"];
"1000373" -> "1001477"  [label="DDG: user_srbcmd->sg.count > ARRAY_SIZE(sg_list)"];
"1000373" -> "1001477"  [label="DDG: user_srbcmd->sg.count"];
"1000379" -> "1000373"  [label="DDG: sg_list"];
"1000379" -> "1000380"  [label="CFG: "];
"1000380" -> "1000379"  [label="AST: "];
"1000379" -> "1001477"  [label="DDG: sg_list"];
"1000208" -> "1000379"  [label="DDG: sg_list"];
"1000379" -> "1001416"  [label="DDG: sg_list"];
"1000379" -> "1001461"  [label="DDG: sg_list"];
"1000208" -> "1000118"  [label="AST: "];
"1000208" -> "1000211"  [label="CFG: "];
"1000209" -> "1000208"  [label="AST: "];
"1000210" -> "1000208"  [label="AST: "];
"1000211" -> "1000208"  [label="AST: "];
"1000216" -> "1000208"  [label="CFG: "];
"1000208" -> "1001477"  [label="DDG: sg_list"];
"1000208" -> "1001477"  [label="DDG: memset(sg_list, 0, sizeof(sg_list))"];
"1000208" -> "1001461"  [label="DDG: sg_list"];
"1000259" -> "1000258"  [label="AST: "];
"1000259" -> "1000262"  [label="CFG: "];
"1000260" -> "1000259"  [label="AST: "];
"1000261" -> "1000259"  [label="AST: "];
"1000262" -> "1000259"  [label="AST: "];
"1000265" -> "1000259"  [label="CFG: "];
"1000270" -> "1000259"  [label="CFG: "];
"1000259" -> "1001477"  [label="DDG: copy_from_user(user_srbcmd, user_srb,fibsize)"];
"1000259" -> "1001477"  [label="DDG: fibsize"];
"1000259" -> "1001477"  [label="DDG: user_srb"];
"1000250" -> "1000259"  [label="DDG: user_srbcmd"];
"1000130" -> "1000259"  [label="DDG: user_srb"];
"1000246" -> "1000259"  [label="DDG: fibsize"];
"1000259" -> "1000269"  [label="DDG: fibsize"];
"1000259" -> "1000271"  [label="DDG: fibsize"];
"1000259" -> "1001449"  [label="DDG: user_srbcmd"];
"1000250" -> "1000249"  [label="AST: "];
"1000250" -> "1000251"  [label="CFG: "];
"1000251" -> "1000250"  [label="AST: "];
"1000254" -> "1000250"  [label="CFG: "];
"1000260" -> "1000250"  [label="CFG: "];
"1000250" -> "1001477"  [label="DDG: !user_srbcmd"];
"1000244" -> "1000250"  [label="DDG: user_srbcmd"];
"1000250" -> "1001449"  [label="DDG: user_srbcmd"];
"1000244" -> "1000118"  [label="AST: "];
"1000244" -> "1000246"  [label="CFG: "];
"1000245" -> "1000244"  [label="AST: "];
"1000246" -> "1000244"  [label="AST: "];
"1000251" -> "1000244"  [label="CFG: "];
"1000244" -> "1001477"  [label="DDG: kmalloc(fibsize, GFP_KERNEL)"];
"1000246" -> "1000244"  [label="DDG: fibsize"];
"1000246" -> "1000244"  [label="DDG: GFP_KERNEL"];
"1000246" -> "1000248"  [label="CFG: "];
"1000247" -> "1000246"  [label="AST: "];
"1000248" -> "1000246"  [label="AST: "];
"1000246" -> "1001477"  [label="DDG: GFP_KERNEL"];
"1000246" -> "1001477"  [label="DDG: fibsize"];
"1000230" -> "1000246"  [label="DDG: fibsize"];
"1000246" -> "1000545"  [label="DDG: GFP_KERNEL"];
"1000246" -> "1001027"  [label="DDG: GFP_KERNEL"];
"1000246" -> "1001207"  [label="DDG: GFP_KERNEL"];
"1000230" -> "1000229"  [label="AST: "];
"1000230" -> "1000232"  [label="CFG: "];
"1000231" -> "1000230"  [label="AST: "];
"1000232" -> "1000230"  [label="AST: "];
"1000240" -> "1000230"  [label="CFG: "];
"1000245" -> "1000230"  [label="CFG: "];
"1000230" -> "1001477"  [label="DDG: fibsize"];
"1000230" -> "1001477"  [label="DDG: dev->max_fib_size - sizeof(struct aac_fibhdr)"];
"1000230" -> "1001477"  [label="DDG: fibsize > (dev->max_fib_size - sizeof(struct aac_fibhdr))"];
"1000136" -> "1000230"  [label="DDG: fibsize"];
"1000232" -> "1000230"  [label="DDG: dev->max_fib_size"];
"1000136" -> "1000118"  [label="AST: "];
"1000136" -> "1000138"  [label="CFG: "];
"1000137" -> "1000136"  [label="AST: "];
"1000138" -> "1000136"  [label="AST: "];
"1000141" -> "1000136"  [label="CFG: "];
"1000136" -> "1001477"  [label="DDG: fibsize"];
"1000232" -> "1000236"  [label="CFG: "];
"1000233" -> "1000232"  [label="AST: "];
"1000236" -> "1000232"  [label="AST: "];
"1000232" -> "1001477"  [label="DDG: dev->max_fib_size"];
"1000130" -> "1000118"  [label="AST: "];
"1000130" -> "1000132"  [label="CFG: "];
"1000131" -> "1000130"  [label="AST: "];
"1000132" -> "1000130"  [label="AST: "];
"1000137" -> "1000130"  [label="CFG: "];
"1000130" -> "1001477"  [label="DDG: arg"];
"1000130" -> "1001477"  [label="DDG: user_srb"];
"1000117" -> "1000130"  [label="DDG: arg"];
"1000117" -> "1000115"  [label="AST: "];
"1000117" -> "1001477"  [label="DDG: arg"];
"1000117" -> "1000269"  [label="DDG: arg"];
"1000117" -> "1000271"  [label="DDG: arg"];
"1000697" -> "1000695"  [label="AST: "];
"1000698" -> "1000697"  [label="AST: "];
"1000710" -> "1000697"  [label="CFG: "];
"1000697" -> "1001477"  [label="DDG: kmalloc(actual_fibsize - sizeof(struct aac_srb)\n\t\t\t  + sizeof(struct sgmap), GFP_KERNEL)"];
"1000697" -> "1000709"  [label="DDG: usg"];
"1000709" -> "1000708"  [label="AST: "];
"1000709" -> "1000710"  [label="CFG: "];
"1000710" -> "1000709"  [label="AST: "];
"1000713" -> "1000709"  [label="CFG: "];
"1000718" -> "1000709"  [label="CFG: "];
"1000709" -> "1001477"  [label="DDG: !usg"];
"1000709" -> "1001477"  [label="DDG: usg"];
"1000709" -> "1000717"  [label="DDG: usg"];
"1000717" -> "1000695"  [label="AST: "];
"1000717" -> "1000720"  [label="CFG: "];
"1000718" -> "1000717"  [label="AST: "];
"1000719" -> "1000717"  [label="AST: "];
"1000720" -> "1000717"  [label="AST: "];
"1000728" -> "1000717"  [label="CFG: "];
"1000717" -> "1001477"  [label="DDG: memcpy (usg, upsg, actual_fibsize - sizeof(struct aac_srb)\n\t\t\t  + sizeof(struct sgmap))"];
"1000717" -> "1001477"  [label="DDG: actual_fibsize - sizeof(struct aac_srb)\n\t\t\t  + sizeof(struct sgmap)"];
"1000717" -> "1001477"  [label="DDG: upsg"];
"1000465" -> "1000717"  [label="DDG: upsg"];
"1000720" -> "1000717"  [label="DDG: actual_fibsize"];
"1000720" -> "1000717"  [label="DDG: sizeof(struct aac_srb)\n\t\t\t  + sizeof(struct sgmap)"];
"1000717" -> "1000770"  [label="DDG: usg"];
"1000717" -> "1000794"  [label="DDG: usg"];
"1000717" -> "1000843"  [label="DDG: usg"];
"1000717" -> "1000918"  [label="DDG: usg"];
"1000770" -> "1000769"  [label="AST: "];
"1000770" -> "1000771"  [label="CFG: "];
"1000771" -> "1000770"  [label="AST: "];
"1000773" -> "1000770"  [label="CFG: "];
"1000770" -> "1001477"  [label="DDG: kfree(usg)"];
"1000770" -> "1001477"  [label="DDG: usg"];
"1000794" -> "1000793"  [label="AST: "];
"1000794" -> "1000795"  [label="CFG: "];
"1000795" -> "1000794"  [label="AST: "];
"1000797" -> "1000794"  [label="CFG: "];
"1000794" -> "1001477"  [label="DDG: usg"];
"1000794" -> "1001477"  [label="DDG: kfree(usg)"];
"1000843" -> "1000842"  [label="AST: "];
"1000843" -> "1000844"  [label="CFG: "];
"1000844" -> "1000843"  [label="AST: "];
"1000846" -> "1000843"  [label="CFG: "];
"1000843" -> "1001477"  [label="DDG: kfree (usg)"];
"1000843" -> "1001477"  [label="DDG: usg"];
"1000918" -> "1000695"  [label="AST: "];
"1000918" -> "1000919"  [label="CFG: "];
"1000919" -> "1000918"  [label="AST: "];
"1000922" -> "1000918"  [label="CFG: "];
"1000918" -> "1001477"  [label="DDG: kfree (usg)"];
"1000918" -> "1001477"  [label="DDG: usg"];
"1000787" -> "1000779"  [label="AST: "];
"1000787" -> "1000789"  [label="CFG: "];
"1000788" -> "1000787"  [label="AST: "];
"1000789" -> "1000787"  [label="AST: "];
"1000779" -> "1000787"  [label="CFG: "];
"1000787" -> "1001477"  [label="DDG: __GFP_DMA"];
"1000787" -> "1001477"  [label="DDG: GFP_KERNEL"];
"1000787" -> "1000779"  [label="DDG: GFP_KERNEL"];
"1000787" -> "1000779"  [label="DDG: __GFP_DMA"];
"1000779" -> "1000777"  [label="AST: "];
"1000780" -> "1000779"  [label="AST: "];
"1000777" -> "1000779"  [label="CFG: "];
"1000779" -> "1001477"  [label="DDG: usg->sg[i].count"];
"1000779" -> "1001477"  [label="DDG: GFP_KERNEL|__GFP_DMA"];
"1000779" -> "1000777"  [label="DDG: usg->sg[i].count"];
"1000779" -> "1000777"  [label="DDG: GFP_KERNEL|__GFP_DMA"];
"1000745" -> "1000779"  [label="DDG: usg->sg[i].count"];
"1000779" -> "1000852"  [label="DDG: usg->sg[i].count"];
"1000777" -> "1000741"  [label="AST: "];
"1000778" -> "1000777"  [label="AST: "];
"1000792" -> "1000777"  [label="CFG: "];
"1000777" -> "1001477"  [label="DDG: kmalloc(usg->sg[i].count,GFP_KERNEL|__GFP_DMA)"];
"1000777" -> "1000791"  [label="DDG: p"];
"1000791" -> "1000790"  [label="AST: "];
"1000791" -> "1000792"  [label="CFG: "];
"1000792" -> "1000791"  [label="AST: "];
"1000795" -> "1000791"  [label="CFG: "];
"1000803" -> "1000791"  [label="CFG: "];
"1000791" -> "1001477"  [label="DDG: p"];
"1000791" -> "1001477"  [label="DDG: !p"];
"1000791" -> "1000816"  [label="DDG: p"];
"1000791" -> "1000830"  [label="DDG: p"];
"1000791" -> "1000852"  [label="DDG: p"];
"1000816" -> "1000741"  [label="AST: "];
"1000816" -> "1000820"  [label="CFG: "];
"1000817" -> "1000816"  [label="AST: "];
"1000820" -> "1000816"  [label="AST: "];
"1000822" -> "1000816"  [label="CFG: "];
"1000816" -> "1001477"  [label="DDG: sg_list[i]"];
"1000816" -> "1001416"  [label="DDG: sg_list[i]"];
"1000816" -> "1001461"  [label="DDG: sg_list[i]"];
"1001416" -> "1001415"  [label="AST: "];
"1001416" -> "1001423"  [label="CFG: "];
"1001417" -> "1001416"  [label="AST: "];
"1001420" -> "1001416"  [label="AST: "];
"1001423" -> "1001416"  [label="AST: "];
"1001426" -> "1001416"  [label="CFG: "];
"1001381" -> "1001416"  [label="CFG: "];
"1001416" -> "1001477"  [label="DDG: sg_user[i]"];
"1001416" -> "1001477"  [label="DDG: byte_count"];
"1001416" -> "1001477"  [label="DDG: copy_to_user(sg_user[i], sg_list[i], byte_count)"];
"1001416" -> "1001477"  [label="DDG: sg_list[i]"];
"1000801" -> "1001416"  [label="DDG: sg_user[i]"];
"1000608" -> "1001416"  [label="DDG: sg_user[i]"];
"1000585" -> "1001416"  [label="DDG: sg_user[i]"];
"1001254" -> "1001416"  [label="DDG: sg_user[i]"];
"1000830" -> "1001416"  [label="DDG: sg_user[i]"];
"1001067" -> "1001416"  [label="DDG: sg_user[i]"];
"1001225" -> "1001416"  [label="DDG: sg_user[i]"];
"1001088" -> "1001416"  [label="DDG: sg_user[i]"];
"1001074" -> "1001416"  [label="DDG: sg_list[i]"];
"1000594" -> "1001416"  [label="DDG: sg_list[i]"];
"1001240" -> "1001416"  [label="DDG: sg_list[i]"];
"1001383" -> "1001416"  [label="DDG: byte_count"];
"1001416" -> "1001461"  [label="DDG: sg_list[i]"];
"1001461" -> "1001460"  [label="AST: "];
"1001461" -> "1001462"  [label="CFG: "];
"1001462" -> "1001461"  [label="AST: "];
"1001459" -> "1001461"  [label="CFG: "];
"1001461" -> "1001477"  [label="DDG: sg_list[i]"];
"1001461" -> "1001477"  [label="DDG: kfree(sg_list[i])"];
"1001074" -> "1001461"  [label="DDG: sg_list[i]"];
"1000594" -> "1001461"  [label="DDG: sg_list[i]"];
"1001240" -> "1001461"  [label="DDG: sg_list[i]"];
"1000830" -> "1000829"  [label="AST: "];
"1000830" -> "1000835"  [label="CFG: "];
"1000831" -> "1000830"  [label="AST: "];
"1000832" -> "1000830"  [label="AST: "];
"1000835" -> "1000830"  [label="AST: "];
"1000844" -> "1000830"  [label="CFG: "];
"1000851" -> "1000830"  [label="CFG: "];
"1000830" -> "1001477"  [label="DDG: copy_from_user(p,sg_user[i],upsg->sg[i].count)"];
"1000830" -> "1001477"  [label="DDG: upsg->sg[i].count"];
"1000830" -> "1001477"  [label="DDG: sg_user[i]"];
"1000830" -> "1001477"  [label="DDG: p"];
"1000801" -> "1000830"  [label="DDG: sg_user[i]"];
"1000830" -> "1000852"  [label="DDG: p"];
"1000852" -> "1000850"  [label="AST: "];
"1000852" -> "1000864"  [label="CFG: "];
"1000853" -> "1000852"  [label="AST: "];
"1000856" -> "1000852"  [label="AST: "];
"1000857" -> "1000852"  [label="AST: "];
"1000864" -> "1000852"  [label="AST: "];
"1000850" -> "1000852"  [label="CFG: "];
"1000852" -> "1001477"  [label="DDG: dev->pdev"];
"1000852" -> "1001477"  [label="DDG: data_dir"];
"1000852" -> "1001477"  [label="DDG: p"];
"1000852" -> "1000850"  [label="DDG: dev->pdev"];
"1000852" -> "1000850"  [label="DDG: p"];
"1000852" -> "1000850"  [label="DDG: usg->sg[i].count"];
"1000852" -> "1000850"  [label="DDG: data_dir"];
"1000438" -> "1000852"  [label="DDG: data_dir"];
"1000852" -> "1000893"  [label="DDG: usg->sg[i].count"];
"1000852" -> "1000910"  [label="DDG: usg->sg[i].count"];
"1000850" -> "1000741"  [label="AST: "];
"1000851" -> "1000850"  [label="AST: "];
"1000870" -> "1000850"  [label="CFG: "];
"1000850" -> "1001477"  [label="DDG: pci_map_single(dev->pdev, p, usg->sg[i].count, data_dir)"];
"1000850" -> "1000876"  [label="DDG: addr"];
"1000876" -> "1000875"  [label="AST: "];
"1000876" -> "1000878"  [label="CFG: "];
"1000877" -> "1000876"  [label="AST: "];
"1000878" -> "1000876"  [label="AST: "];
"1000875" -> "1000876"  [label="CFG: "];
"1000876" -> "1000875"  [label="DDG: addr"];
"1000876" -> "1000875"  [label="DDG: 0xffffffff"];
"1000876" -> "1000890"  [label="DDG: addr"];
"1000875" -> "1000865"  [label="AST: "];
"1000865" -> "1000875"  [label="CFG: "];
"1000875" -> "1001477"  [label="DDG: addr & 0xffffffff"];
"1000875" -> "1000865"  [label="DDG: addr & 0xffffffff"];
"1000865" -> "1000741"  [label="AST: "];
"1000866" -> "1000865"  [label="AST: "];
"1000884" -> "1000865"  [label="CFG: "];
"1000865" -> "1001477"  [label="DDG: psg->sg[i].addr[0]"];
"1000865" -> "1001477"  [label="DDG: cpu_to_le32(addr & 0xffffffff)"];
"1000890" -> "1000889"  [label="AST: "];
"1000890" -> "1000892"  [label="CFG: "];
"1000891" -> "1000890"  [label="AST: "];
"1000892" -> "1000890"  [label="AST: "];
"1000889" -> "1000890"  [label="CFG: "];
"1000890" -> "1001477"  [label="DDG: addr"];
"1000890" -> "1000889"  [label="DDG: addr"];
"1000890" -> "1000889"  [label="DDG: 32"];
"1000889" -> "1000879"  [label="AST: "];
"1000879" -> "1000889"  [label="CFG: "];
"1000889" -> "1001477"  [label="DDG: addr>>32"];
"1000889" -> "1000879"  [label="DDG: addr>>32"];
"1000879" -> "1000741"  [label="AST: "];
"1000880" -> "1000879"  [label="AST: "];
"1000894" -> "1000879"  [label="CFG: "];
"1000879" -> "1001477"  [label="DDG: psg->sg[i].addr[1]"];
"1000879" -> "1001477"  [label="DDG: cpu_to_le32(addr>>32)"];
"1000893" -> "1000741"  [label="AST: "];
"1000893" -> "1000895"  [label="CFG: "];
"1000894" -> "1000893"  [label="AST: "];
"1000895" -> "1000893"  [label="AST: "];
"1000906" -> "1000893"  [label="CFG: "];
"1000893" -> "1001477"  [label="DDG: byte_count"];
"1000452" -> "1000893"  [label="DDG: byte_count"];
"1000893" -> "1000924"  [label="DDG: byte_count"];
"1000924" -> "1000920"  [label="AST: "];
"1000924" -> "1000925"  [label="CFG: "];
"1000925" -> "1000924"  [label="AST: "];
"1000920" -> "1000924"  [label="CFG: "];
"1000924" -> "1001477"  [label="DDG: byte_count"];
"1000924" -> "1000920"  [label="DDG: byte_count"];
"1000452" -> "1000924"  [label="DDG: byte_count"];
"1000669" -> "1000924"  [label="DDG: byte_count"];
"1000920" -> "1000463"  [label="AST: "];
"1000921" -> "1000920"  [label="AST: "];
"1000928" -> "1000920"  [label="CFG: "];
"1000920" -> "1001477"  [label="DDG: srbcmd->count"];
"1000920" -> "1001477"  [label="DDG: cpu_to_le32(byte_count)"];
"1000910" -> "1000902"  [label="AST: "];
"1000910" -> "1000911"  [label="CFG: "];
"1000911" -> "1000910"  [label="AST: "];
"1000902" -> "1000910"  [label="CFG: "];
"1000910" -> "1001477"  [label="DDG: usg->sg[i].count"];
"1000910" -> "1000745"  [label="DDG: usg->sg[i].count"];
"1000910" -> "1000902"  [label="DDG: usg->sg[i].count"];
"1000745" -> "1000744"  [label="AST: "];
"1000745" -> "1000753"  [label="CFG: "];
"1000746" -> "1000745"  [label="AST: "];
"1000753" -> "1000745"  [label="AST: "];
"1000771" -> "1000745"  [label="CFG: "];
"1000778" -> "1000745"  [label="CFG: "];
"1000745" -> "1001477"  [label="DDG: usg->sg[i].count >\n\t\t\t\t    ((dev->adapter_info.options &\n\t\t\t\t     AAC_OPT_NEW_COMM) ?\n\t\t\t\t      (dev->scsi_host_ptr->max_sectors << 9) :\n\t\t\t\t      65536)"];
"1000745" -> "1001477"  [label="DDG: (dev->adapter_info.options &\n\t\t\t\t     AAC_OPT_NEW_COMM) ?\n\t\t\t\t      (dev->scsi_host_ptr->max_sectors << 9) :\n\t\t\t\t      65536"];
"1000745" -> "1001477"  [label="DDG: usg->sg[i].count"];
"1000761" -> "1000745"  [label="DDG: dev->scsi_host_ptr->max_sectors"];
"1000761" -> "1000745"  [label="DDG: 9"];
"1000902" -> "1000741"  [label="AST: "];
"1000903" -> "1000902"  [label="AST: "];
"1000740" -> "1000902"  [label="CFG: "];
"1000902" -> "1001477"  [label="DDG: cpu_to_le32(usg->sg[i].count)"];
"1000902" -> "1001477"  [label="DDG: psg->sg[i].count"];
}
