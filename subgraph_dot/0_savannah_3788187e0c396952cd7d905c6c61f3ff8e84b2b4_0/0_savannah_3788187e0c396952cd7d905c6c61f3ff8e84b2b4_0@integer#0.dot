digraph "0_savannah_3788187e0c396952cd7d905c6c61f3ff8e84b2b4_0@integer" {
"1000259" [label="(Call,string_size = (FT_Long)( ( parser->root.cursor - cur - 2 + 1 ) / 2 ))"];
"1000261" [label="(Call,(FT_Long)( ( parser->root.cursor - cur - 2 + 1 ) / 2 ))"];
"1000263" [label="(Call,( parser->root.cursor - cur - 2 + 1 ) / 2)"];
"1000264" [label="(Call,parser->root.cursor - cur - 2 + 1)"];
"1000215" [label="(Call,parser->root.cursor < limit)"];
"1000376" [label="(Call,parser->root.cursor += string_size + 1)"];
"1000358" [label="(Call,limit - parser->root.cursor < string_size)"];
"1000359" [label="(Call,limit - parser->root.cursor)"];
"1000328" [label="(Call,string_size < 0)"];
"1000323" [label="(Call,string_size = T1_ToInt( parser ))"];
"1000325" [label="(Call,T1_ToInt( parser ))"];
"1000200" [label="(Call,T1_Skip_Spaces( parser ))"];
"1000172" [label="(Call,T1_Skip_Spaces( parser ))"];
"1000130" [label="(Call,parser = &loader->parser)"];
"1000294" [label="(Call,T1_ToBytes( parser, string_buf, string_size, &real_size, 1 ))"];
"1000250" [label="(Call,T1_Skip_PS_Token( parser ))"];
"1000339" [label="(Call,T1_Skip_PS_Token( parser ))"];
"1000401" [label="(Call,string_buf[string_size - 1] == 0)"];
"1000386" [label="(Call,!string_buf)"];
"1000348" [label="(Call,string_buf = parser->root.cursor + 1)"];
"1000164" [label="(Call,*    string_buf = NULL)"];
"1000277" [label="(Call,FT_REALLOC( string_buf, old_string_size, string_size ))"];
"1000208" [label="(Call,old_string_size = 0)"];
"1000301" [label="(Call,old_string_size = string_size)"];
"1000259" [label="(Call,string_size = (FT_Long)( ( parser->root.cursor - cur - 2 + 1 ) / 2 ))"];
"1000176" [label="(Call,parser->root.cursor >= limit)"];
"1000146" [label="(Call,*    limit  = parser->root.limit)"];
"1000285" [label="(Call,parser->root.cursor = cur)"];
"1000270" [label="(Call,cur - 2 + 1)"];
"1000223" [label="(Call,cur = parser->root.cursor)"];
"1000185" [label="(Call,parser->root.cursor++)"];
"1000292" [label="(Call,(void)T1_ToBytes( parser, string_buf, string_size, &real_size, 1 ))"];
"1000236" [label="(Call,parser->root.cursor++)"];
"1000397" [label="(Call,( string_size & 1 ) && string_buf[string_size - 1] == 0)"];
"1000440" [label="(Call,face->ttf_data[count++] = string_buf[n])"];
"1000481" [label="(Call,FT_REALLOC( face->ttf_data, 12, face->ttf_size ))"];
"1000492" [label="(Call,count < face->ttf_size)"];
"1000503" [label="(Call,count++)"];
"1000436" [label="(Call,count < 12)"];
"1000445" [label="(Call,count++)"];
"1000571" [label="(Call,count >= face->ttf_size)"];
"1000589" [label="(Call,count++)"];
"1000541" [label="(Call,face->ttf_size += ( len + 3 ) & ~3)"];
"1000554" [label="(Call,FT_REALLOC( face->ttf_data, 12 + 16 * num_tables,\n                             face->ttf_size + 1 ))"];
"1000524" [label="(Call,*  p = face->ttf_data + 12 + 16 * i + 12)"];
"1000539" [label="(Call,FT_PEEK_ULONG( p ))"];
"1000537" [label="(Call,len = FT_PEEK_ULONG( p ))"];
"1000545" [label="(Call,( len + 3 ) & ~3)"];
"1000546" [label="(Call,len + 3)"];
"1000526" [label="(Call,face->ttf_data + 12 + 16 * i + 12)"];
"1000563" [label="(Call,face->ttf_size + 1)"];
"1000498" [label="(Call,face->ttf_data[count++] = string_buf[n])"];
"1000584" [label="(Call,face->ttf_data[count++] = string_buf[n])"];
"1000350" [label="(Call,parser->root.cursor + 1)"];
"1000382" [label="(Call,string_size + 1)"];
"1000398" [label="(Call,string_size & 1)"];
"1000404" [label="(Call,string_size - 1)"];
"1000408" [label="(Call,string_size--)"];
"1000411" [label="(Call,!string_size)"];
"1000425" [label="(Call,n < string_size)"];
"1000428" [label="(Call,n++)"];
"1000594" [label="(Call,T1_Skip_Spaces( parser ))"];
"1000251" [label="(Identifier,parser)"];
"1000386" [label="(Call,!string_buf)"];
"1000131" [label="(Identifier,parser)"];
"1000184" [label="(Call,*parser->root.cursor++)"];
"1000359" [label="(Call,limit - parser->root.cursor)"];
"1000439" [label="(Block,)"];
"1000490" [label="(JumpTarget,case BEFORE_TABLE_DIR:)"];
"1000569" [label="(JumpTarget,case OTHER_TABLES:)"];
"1000222" [label="(Block,)"];
"1000585" [label="(Call,face->ttf_data[count++])"];
"1000422" [label="(Call,n = 0)"];
"1000297" [label="(Identifier,string_size)"];
"1000377" [label="(Call,parser->root.cursor)"];
"1000542" [label="(Call,face->ttf_size)"];
"1000186" [label="(Call,parser->root.cursor)"];
"1000437" [label="(Identifier,count)"];
"1000303" [label="(Identifier,string_size)"];
"1000296" [label="(Identifier,string_buf)"];
"1000428" [label="(Call,n++)"];
"1000396" [label="(ControlStructure,if ( ( string_size & 1 ) && string_buf[string_size - 1] == 0 ))"];
"1000375" [label="(ControlStructure,else)"];
"1000214" [label="(ControlStructure,while ( parser->root.cursor < limit ))"];
"1000548" [label="(Literal,3)"];
"1000130" [label="(Call,parser = &loader->parser)"];
"1000176" [label="(Call,parser->root.cursor >= limit)"];
"1000348" [label="(Call,string_buf = parser->root.cursor + 1)"];
"1000340" [label="(Identifier,parser)"];
"1000172" [label="(Call,T1_Skip_Spaces( parser ))"];
"1000486" [label="(Call,face->ttf_size)"];
"1000545" [label="(Call,( len + 3 ) & ~3)"];
"1000357" [label="(ControlStructure,if ( limit - parser->root.cursor < string_size ))"];
"1000209" [label="(Identifier,old_string_size)"];
"1000596" [label="(MethodReturn,RET)"];
"1000384" [label="(Literal,1)"];
"1000390" [label="(Literal,\"t42_parse_sfnts: invalid data in sfnts array\n\")"];
"1000425" [label="(Call,n < string_size)"];
"1000399" [label="(Identifier,string_size)"];
"1000215" [label="(Call,parser->root.cursor < limit)"];
"1000515" [label="(Identifier,i)"];
"1000533" [label="(Call,16 * i)"];
"1000558" [label="(Call,12 + 16 * num_tables)"];
"1000349" [label="(Identifier,string_buf)"];
"1000323" [label="(Call,string_size = T1_ToInt( parser ))"];
"1000312" [label="(Block,)"];
"1000356" [label="(Literal,1)"];
"1000236" [label="(Call,parser->root.cursor++)"];
"1000177" [label="(Call,parser->root.cursor)"];
"1000445" [label="(Call,count++)"];
"1000421" [label="(ControlStructure,for ( n = 0; n < string_size; n++ ))"];
"1000263" [label="(Call,( parser->root.cursor - cur - 2 + 1 ) / 2)"];
"1000305" [label="(Identifier,string_size)"];
"1000563" [label="(Call,face->ttf_size + 1)"];
"1000553" [label="(ControlStructure,if ( FT_REALLOC( face->ttf_data, 12 + 16 * num_tables,\n                             face->ttf_size + 1 ) ))"];
"1000330" [label="(Literal,0)"];
"1000441" [label="(Call,face->ttf_data[count++])"];
"1000270" [label="(Call,cur - 2 + 1)"];
"1000385" [label="(ControlStructure,if ( !string_buf ))"];
"1000285" [label="(Call,parser->root.cursor = cur)"];
"1000408" [label="(Call,string_size--)"];
"1000572" [label="(Identifier,count)"];
"1000164" [label="(Call,*    string_buf = NULL)"];
"1000584" [label="(Call,face->ttf_data[count++] = string_buf[n])"];
"1000560" [label="(Call,16 * num_tables)"];
"1000554" [label="(Call,FT_REALLOC( face->ttf_data, 12 + 16 * num_tables,\n                             face->ttf_size + 1 ))"];
"1000454" [label="(Identifier,num_tables)"];
"1000412" [label="(Identifier,string_size)"];
"1000324" [label="(Identifier,string_size)"];
"1000409" [label="(Identifier,string_size)"];
"1000438" [label="(Literal,12)"];
"1000443" [label="(Identifier,face)"];
"1000411" [label="(Call,!string_size)"];
"1000188" [label="(Identifier,parser)"];
"1000344" [label="(Identifier,parser)"];
"1000485" [label="(Literal,12)"];
"1000591" [label="(Call,string_buf[n])"];
"1000568" [label="(ControlStructure,goto Fail;)"];
"1000265" [label="(Call,parser->root.cursor)"];
"1000538" [label="(Identifier,len)"];
"1000255" [label="(Identifier,parser)"];
"1000435" [label="(ControlStructure,if ( count < 12 ))"];
"1000480" [label="(ControlStructure,if ( FT_REALLOC( face->ttf_data, 12, face->ttf_size ) ))"];
"1000295" [label="(Identifier,parser)"];
"1000489" [label="(ControlStructure,goto Fail;)"];
"1000325" [label="(Call,T1_ToInt( parser ))"];
"1000501" [label="(Identifier,face)"];
"1000275" [label="(Literal,2)"];
"1000329" [label="(Identifier,string_size)"];
"1000260" [label="(Identifier,string_size)"];
"1000436" [label="(Call,count < 12)"];
"1000397" [label="(Call,( string_size & 1 ) && string_buf[string_size - 1] == 0)"];
"1000165" [label="(Identifier,string_buf)"];
"1000499" [label="(Call,face->ttf_data[count++])"];
"1000278" [label="(Identifier,string_buf)"];
"1000595" [label="(Identifier,parser)"];
"1000300" [label="(Literal,1)"];
"1000567" [label="(Literal,1)"];
"1000482" [label="(Call,face->ttf_data)"];
"1000212" [label="(Identifier,count)"];
"1000304" [label="(Call,string_size = real_size)"];
"1000498" [label="(Call,face->ttf_data[count++] = string_buf[n])"];
"1000527" [label="(Call,face->ttf_data)"];
"1000369" [label="(Literal,\"t42_parse_sfnts: too much binary data\n\")"];
"1000302" [label="(Identifier,old_string_size)"];
"1000530" [label="(Call,12 + 16 * i + 12)"];
"1000146" [label="(Call,*    limit  = parser->root.limit)"];
"1000382" [label="(Call,string_size + 1)"];
"1000526" [label="(Call,face->ttf_data + 12 + 16 * i + 12)"];
"1000505" [label="(Call,string_buf[n])"];
"1000350" [label="(Call,parser->root.cursor + 1)"];
"1000410" [label="(ControlStructure,if ( !string_size ))"];
"1000333" [label="(Literal,\"t42_parse_sfnts: invalid string size\n\")"];
"1000128" [label="(Block,)"];
"1000276" [label="(ControlStructure,if ( FT_REALLOC( string_buf, old_string_size, string_size ) ))"];
"1000208" [label="(Call,old_string_size = 0)"];
"1000224" [label="(Identifier,cur)"];
"1000185" [label="(Call,parser->root.cursor++)"];
"1000249" [label="(Block,)"];
"1000547" [label="(Identifier,len)"];
"1000379" [label="(Identifier,parser)"];
"1000361" [label="(Call,parser->root.cursor)"];
"1000492" [label="(Call,count < face->ttf_size)"];
"1000358" [label="(Call,limit - parser->root.cursor < string_size)"];
"1000218" [label="(Identifier,parser)"];
"1000225" [label="(Call,parser->root.cursor)"];
"1000261" [label="(Call,(FT_Long)( ( parser->root.cursor - cur - 2 + 1 ) / 2 ))"];
"1000522" [label="(Block,)"];
"1000298" [label="(Call,&real_size)"];
"1000406" [label="(Literal,1)"];
"1000233" [label="(Identifier,cur)"];
"1000351" [label="(Call,parser->root.cursor)"];
"1000456" [label="(Call,16 * face->ttf_data[4])"];
"1000503" [label="(Call,count++)"];
"1000401" [label="(Call,string_buf[string_size - 1] == 0)"];
"1000447" [label="(Call,string_buf[n])"];
"1000423" [label="(Identifier,n)"];
"1000493" [label="(Identifier,count)"];
"1000169" [label="(Identifier,allocated)"];
"1000283" [label="(Identifier,allocated)"];
"1000497" [label="(Block,)"];
"1000277" [label="(Call,FT_REALLOC( string_buf, old_string_size, string_size ))"];
"1000446" [label="(Identifier,count)"];
"1000271" [label="(Identifier,cur)"];
"1000555" [label="(Call,face->ttf_data)"];
"1000166" [label="(Identifier,NULL)"];
"1000235" [label="(Block,)"];
"1000504" [label="(Identifier,count)"];
"1000405" [label="(Identifier,string_size)"];
"1000494" [label="(Call,face->ttf_size)"];
"1000221" [label="(Identifier,limit)"];
"1000398" [label="(Call,string_size & 1)"];
"1000327" [label="(ControlStructure,if ( string_size < 0 ))"];
"1000147" [label="(Identifier,limit)"];
"1000537" [label="(Call,len = FT_PEEK_ULONG( p ))"];
"1000148" [label="(Call,parser->root.limit)"];
"1000272" [label="(Call,2 + 1)"];
"1000578" [label="(Literal,\"t42_parse_sfnts: too much binary data\n\")"];
"1000415" [label="(Literal,\"t42_parse_sfnts: invalid string\n\")"];
"1000387" [label="(Identifier,string_buf)"];
"1000326" [label="(Identifier,parser)"];
"1000570" [label="(ControlStructure,if ( count >= face->ttf_size ))"];
"1000540" [label="(Identifier,p)"];
"1000481" [label="(Call,FT_REALLOC( face->ttf_data, 12, face->ttf_size ))"];
"1000294" [label="(Call,T1_ToBytes( parser, string_buf, string_size, &real_size, 1 ))"];
"1000132" [label="(Call,&loader->parser)"];
"1000175" [label="(Call,parser->root.cursor >= limit || *parser->root.cursor++ != '[')"];
"1000259" [label="(Call,string_size = (FT_Long)( ( parser->root.cursor - cur - 2 + 1 ) / 2 ))"];
"1000525" [label="(Identifier,p)"];
"1000250" [label="(Call,T1_Skip_PS_Token( parser ))"];
"1000328" [label="(Call,string_size < 0)"];
"1000210" [label="(Literal,0)"];
"1000242" [label="(ControlStructure,goto Exit;)"];
"1000200" [label="(Call,T1_Skip_Spaces( parser ))"];
"1000201" [label="(Identifier,parser)"];
"1000402" [label="(Call,string_buf[string_size - 1])"];
"1000508" [label="(ControlStructure,continue;)"];
"1000179" [label="(Identifier,parser)"];
"1000301" [label="(Call,old_string_size = string_size)"];
"1000279" [label="(Identifier,old_string_size)"];
"1000471" [label="(Call,face->ttf_size = 12 + 16 * num_tables)"];
"1000491" [label="(ControlStructure,if ( count < face->ttf_size ))"];
"1000237" [label="(Call,parser->root.cursor)"];
"1000573" [label="(Call,face->ttf_size)"];
"1000264" [label="(Call,parser->root.cursor - cur - 2 + 1)"];
"1000281" [label="(ControlStructure,goto Fail;)"];
"1000223" [label="(Call,cur = parser->root.cursor)"];
"1000138" [label="(Identifier,memory)"];
"1000450" [label="(ControlStructure,continue;)"];
"1000594" [label="(Call,T1_Skip_Spaces( parser ))"];
"1000589" [label="(Call,count++)"];
"1000383" [label="(Identifier,string_size)"];
"1000521" [label="(Identifier,i)"];
"1000541" [label="(Call,face->ttf_size += ( len + 3 ) & ~3)"];
"1000403" [label="(Identifier,string_buf)"];
"1000549" [label="(Identifier,~3)"];
"1000286" [label="(Call,parser->root.cursor)"];
"1000216" [label="(Call,parser->root.cursor)"];
"1000205" [label="(Call,string_size     = 0)"];
"1000360" [label="(Identifier,limit)"];
"1000291" [label="(Identifier,cur)"];
"1000156" [label="(Identifier,num_tables)"];
"1000280" [label="(Identifier,string_size)"];
"1000590" [label="(Identifier,count)"];
"1000376" [label="(Call,parser->root.cursor += string_size + 1)"];
"1000587" [label="(Identifier,face)"];
"1000203" [label="(Identifier,status)"];
"1000524" [label="(Call,*  p = face->ttf_data + 12 + 16 * i + 12)"];
"1000366" [label="(Identifier,string_size)"];
"1000543" [label="(Identifier,face)"];
"1000339" [label="(Call,T1_Skip_PS_Token( parser ))"];
"1000546" [label="(Call,len + 3)"];
"1000539" [label="(Call,FT_PEEK_ULONG( p ))"];
"1000427" [label="(Identifier,string_size)"];
"1000400" [label="(Literal,1)"];
"1000292" [label="(Call,(void)T1_ToBytes( parser, string_buf, string_size, &real_size, 1 ))"];
"1000564" [label="(Call,face->ttf_size)"];
"1000211" [label="(Call,count           = 0)"];
"1000440" [label="(Call,face->ttf_data[count++] = string_buf[n])"];
"1000173" [label="(Identifier,parser)"];
"1000426" [label="(Identifier,n)"];
"1000430" [label="(Block,)"];
"1000432" [label="(Identifier,status)"];
"1000429" [label="(Identifier,n)"];
"1000407" [label="(Literal,0)"];
"1000571" [label="(Call,count >= face->ttf_size)"];
"1000182" [label="(Identifier,limit)"];
"1000404" [label="(Call,string_size - 1)"];
"1000259" -> "1000249"  [label="AST: "];
"1000259" -> "1000261"  [label="CFG: "];
"1000260" -> "1000259"  [label="AST: "];
"1000261" -> "1000259"  [label="AST: "];
"1000278" -> "1000259"  [label="CFG: "];
"1000259" -> "1000596"  [label="DDG: (FT_Long)( ( parser->root.cursor - cur - 2 + 1 ) / 2 )"];
"1000261" -> "1000259"  [label="DDG: ( parser->root.cursor - cur - 2 + 1 ) / 2"];
"1000259" -> "1000277"  [label="DDG: string_size"];
"1000261" -> "1000263"  [label="CFG: "];
"1000262" -> "1000261"  [label="AST: "];
"1000263" -> "1000261"  [label="AST: "];
"1000261" -> "1000596"  [label="DDG: ( parser->root.cursor - cur - 2 + 1 ) / 2"];
"1000263" -> "1000261"  [label="DDG: parser->root.cursor - cur - 2 + 1"];
"1000263" -> "1000261"  [label="DDG: 2"];
"1000263" -> "1000275"  [label="CFG: "];
"1000264" -> "1000263"  [label="AST: "];
"1000275" -> "1000263"  [label="AST: "];
"1000263" -> "1000596"  [label="DDG: parser->root.cursor - cur - 2 + 1"];
"1000264" -> "1000263"  [label="DDG: parser->root.cursor"];
"1000264" -> "1000263"  [label="DDG: cur - 2 + 1"];
"1000264" -> "1000270"  [label="CFG: "];
"1000265" -> "1000264"  [label="AST: "];
"1000270" -> "1000264"  [label="AST: "];
"1000275" -> "1000264"  [label="CFG: "];
"1000264" -> "1000596"  [label="DDG: cur - 2 + 1"];
"1000215" -> "1000264"  [label="DDG: parser->root.cursor"];
"1000270" -> "1000264"  [label="DDG: cur"];
"1000270" -> "1000264"  [label="DDG: 2 + 1"];
"1000215" -> "1000214"  [label="AST: "];
"1000215" -> "1000221"  [label="CFG: "];
"1000216" -> "1000215"  [label="AST: "];
"1000221" -> "1000215"  [label="AST: "];
"1000224" -> "1000215"  [label="CFG: "];
"1000595" -> "1000215"  [label="CFG: "];
"1000215" -> "1000596"  [label="DDG: limit"];
"1000215" -> "1000596"  [label="DDG: parser->root.cursor"];
"1000215" -> "1000596"  [label="DDG: parser->root.cursor < limit"];
"1000376" -> "1000215"  [label="DDG: parser->root.cursor"];
"1000176" -> "1000215"  [label="DDG: parser->root.cursor"];
"1000176" -> "1000215"  [label="DDG: limit"];
"1000285" -> "1000215"  [label="DDG: parser->root.cursor"];
"1000185" -> "1000215"  [label="DDG: parser->root.cursor"];
"1000359" -> "1000215"  [label="DDG: limit"];
"1000215" -> "1000223"  [label="DDG: parser->root.cursor"];
"1000215" -> "1000236"  [label="DDG: parser->root.cursor"];
"1000215" -> "1000348"  [label="DDG: parser->root.cursor"];
"1000215" -> "1000350"  [label="DDG: parser->root.cursor"];
"1000215" -> "1000359"  [label="DDG: limit"];
"1000215" -> "1000359"  [label="DDG: parser->root.cursor"];
"1000376" -> "1000375"  [label="AST: "];
"1000376" -> "1000382"  [label="CFG: "];
"1000377" -> "1000376"  [label="AST: "];
"1000382" -> "1000376"  [label="AST: "];
"1000387" -> "1000376"  [label="CFG: "];
"1000376" -> "1000596"  [label="DDG: string_size + 1"];
"1000358" -> "1000376"  [label="DDG: string_size"];
"1000359" -> "1000376"  [label="DDG: parser->root.cursor"];
"1000358" -> "1000357"  [label="AST: "];
"1000358" -> "1000366"  [label="CFG: "];
"1000359" -> "1000358"  [label="AST: "];
"1000366" -> "1000358"  [label="AST: "];
"1000369" -> "1000358"  [label="CFG: "];
"1000379" -> "1000358"  [label="CFG: "];
"1000358" -> "1000596"  [label="DDG: limit - parser->root.cursor < string_size"];
"1000358" -> "1000596"  [label="DDG: limit - parser->root.cursor"];
"1000359" -> "1000358"  [label="DDG: limit"];
"1000359" -> "1000358"  [label="DDG: parser->root.cursor"];
"1000328" -> "1000358"  [label="DDG: string_size"];
"1000358" -> "1000382"  [label="DDG: string_size"];
"1000358" -> "1000398"  [label="DDG: string_size"];
"1000359" -> "1000361"  [label="CFG: "];
"1000360" -> "1000359"  [label="AST: "];
"1000361" -> "1000359"  [label="AST: "];
"1000366" -> "1000359"  [label="CFG: "];
"1000328" -> "1000327"  [label="AST: "];
"1000328" -> "1000330"  [label="CFG: "];
"1000329" -> "1000328"  [label="AST: "];
"1000330" -> "1000328"  [label="AST: "];
"1000333" -> "1000328"  [label="CFG: "];
"1000340" -> "1000328"  [label="CFG: "];
"1000328" -> "1000596"  [label="DDG: string_size < 0"];
"1000328" -> "1000596"  [label="DDG: string_size"];
"1000323" -> "1000328"  [label="DDG: string_size"];
"1000323" -> "1000312"  [label="AST: "];
"1000323" -> "1000325"  [label="CFG: "];
"1000324" -> "1000323"  [label="AST: "];
"1000325" -> "1000323"  [label="AST: "];
"1000329" -> "1000323"  [label="CFG: "];
"1000323" -> "1000596"  [label="DDG: T1_ToInt( parser )"];
"1000325" -> "1000323"  [label="DDG: parser"];
"1000325" -> "1000326"  [label="CFG: "];
"1000326" -> "1000325"  [label="AST: "];
"1000200" -> "1000325"  [label="DDG: parser"];
"1000294" -> "1000325"  [label="DDG: parser"];
"1000339" -> "1000325"  [label="DDG: parser"];
"1000325" -> "1000339"  [label="DDG: parser"];
"1000200" -> "1000128"  [label="AST: "];
"1000200" -> "1000201"  [label="CFG: "];
"1000201" -> "1000200"  [label="AST: "];
"1000203" -> "1000200"  [label="CFG: "];
"1000200" -> "1000596"  [label="DDG: T1_Skip_Spaces( parser )"];
"1000172" -> "1000200"  [label="DDG: parser"];
"1000200" -> "1000250"  [label="DDG: parser"];
"1000200" -> "1000594"  [label="DDG: parser"];
"1000172" -> "1000128"  [label="AST: "];
"1000172" -> "1000173"  [label="CFG: "];
"1000173" -> "1000172"  [label="AST: "];
"1000179" -> "1000172"  [label="CFG: "];
"1000130" -> "1000172"  [label="DDG: parser"];
"1000130" -> "1000128"  [label="AST: "];
"1000130" -> "1000132"  [label="CFG: "];
"1000131" -> "1000130"  [label="AST: "];
"1000132" -> "1000130"  [label="AST: "];
"1000138" -> "1000130"  [label="CFG: "];
"1000130" -> "1000596"  [label="DDG: &loader->parser"];
"1000294" -> "1000292"  [label="AST: "];
"1000294" -> "1000300"  [label="CFG: "];
"1000295" -> "1000294"  [label="AST: "];
"1000296" -> "1000294"  [label="AST: "];
"1000297" -> "1000294"  [label="AST: "];
"1000298" -> "1000294"  [label="AST: "];
"1000300" -> "1000294"  [label="AST: "];
"1000292" -> "1000294"  [label="CFG: "];
"1000294" -> "1000596"  [label="DDG: &real_size"];
"1000294" -> "1000250"  [label="DDG: parser"];
"1000294" -> "1000292"  [label="DDG: string_buf"];
"1000294" -> "1000292"  [label="DDG: string_size"];
"1000294" -> "1000292"  [label="DDG: &real_size"];
"1000294" -> "1000292"  [label="DDG: parser"];
"1000294" -> "1000292"  [label="DDG: 1"];
"1000250" -> "1000294"  [label="DDG: parser"];
"1000401" -> "1000294"  [label="DDG: string_buf[string_size - 1]"];
"1000277" -> "1000294"  [label="DDG: string_buf"];
"1000277" -> "1000294"  [label="DDG: string_size"];
"1000386" -> "1000294"  [label="DDG: string_buf"];
"1000294" -> "1000301"  [label="DDG: string_size"];
"1000294" -> "1000386"  [label="DDG: string_buf"];
"1000294" -> "1000594"  [label="DDG: parser"];
"1000250" -> "1000249"  [label="AST: "];
"1000250" -> "1000251"  [label="CFG: "];
"1000251" -> "1000250"  [label="AST: "];
"1000255" -> "1000250"  [label="CFG: "];
"1000250" -> "1000596"  [label="DDG: T1_Skip_PS_Token( parser )"];
"1000339" -> "1000250"  [label="DDG: parser"];
"1000339" -> "1000312"  [label="AST: "];
"1000339" -> "1000340"  [label="CFG: "];
"1000340" -> "1000339"  [label="AST: "];
"1000344" -> "1000339"  [label="CFG: "];
"1000339" -> "1000596"  [label="DDG: T1_Skip_PS_Token( parser )"];
"1000339" -> "1000596"  [label="DDG: parser"];
"1000339" -> "1000594"  [label="DDG: parser"];
"1000401" -> "1000397"  [label="AST: "];
"1000401" -> "1000407"  [label="CFG: "];
"1000402" -> "1000401"  [label="AST: "];
"1000407" -> "1000401"  [label="AST: "];
"1000397" -> "1000401"  [label="CFG: "];
"1000401" -> "1000596"  [label="DDG: string_buf[string_size - 1]"];
"1000401" -> "1000277"  [label="DDG: string_buf[string_size - 1]"];
"1000401" -> "1000386"  [label="DDG: string_buf[string_size - 1]"];
"1000401" -> "1000397"  [label="DDG: string_buf[string_size - 1]"];
"1000401" -> "1000397"  [label="DDG: 0"];
"1000386" -> "1000401"  [label="DDG: string_buf"];
"1000386" -> "1000385"  [label="AST: "];
"1000386" -> "1000387"  [label="CFG: "];
"1000387" -> "1000386"  [label="AST: "];
"1000390" -> "1000386"  [label="CFG: "];
"1000399" -> "1000386"  [label="CFG: "];
"1000386" -> "1000596"  [label="DDG: string_buf"];
"1000386" -> "1000596"  [label="DDG: !string_buf"];
"1000386" -> "1000277"  [label="DDG: string_buf"];
"1000348" -> "1000386"  [label="DDG: string_buf"];
"1000164" -> "1000386"  [label="DDG: string_buf"];
"1000386" -> "1000440"  [label="DDG: string_buf"];
"1000386" -> "1000498"  [label="DDG: string_buf"];
"1000386" -> "1000584"  [label="DDG: string_buf"];
"1000348" -> "1000312"  [label="AST: "];
"1000348" -> "1000350"  [label="CFG: "];
"1000349" -> "1000348"  [label="AST: "];
"1000350" -> "1000348"  [label="AST: "];
"1000360" -> "1000348"  [label="CFG: "];
"1000348" -> "1000596"  [label="DDG: parser->root.cursor + 1"];
"1000164" -> "1000128"  [label="AST: "];
"1000164" -> "1000166"  [label="CFG: "];
"1000165" -> "1000164"  [label="AST: "];
"1000166" -> "1000164"  [label="AST: "];
"1000169" -> "1000164"  [label="CFG: "];
"1000164" -> "1000596"  [label="DDG: NULL"];
"1000164" -> "1000596"  [label="DDG: string_buf"];
"1000164" -> "1000277"  [label="DDG: string_buf"];
"1000277" -> "1000276"  [label="AST: "];
"1000277" -> "1000280"  [label="CFG: "];
"1000278" -> "1000277"  [label="AST: "];
"1000279" -> "1000277"  [label="AST: "];
"1000280" -> "1000277"  [label="AST: "];
"1000281" -> "1000277"  [label="CFG: "];
"1000283" -> "1000277"  [label="CFG: "];
"1000277" -> "1000596"  [label="DDG: FT_REALLOC( string_buf, old_string_size, string_size )"];
"1000208" -> "1000277"  [label="DDG: old_string_size"];
"1000301" -> "1000277"  [label="DDG: old_string_size"];
"1000208" -> "1000128"  [label="AST: "];
"1000208" -> "1000210"  [label="CFG: "];
"1000209" -> "1000208"  [label="AST: "];
"1000210" -> "1000208"  [label="AST: "];
"1000212" -> "1000208"  [label="CFG: "];
"1000208" -> "1000596"  [label="DDG: old_string_size"];
"1000301" -> "1000249"  [label="AST: "];
"1000301" -> "1000303"  [label="CFG: "];
"1000302" -> "1000301"  [label="AST: "];
"1000303" -> "1000301"  [label="AST: "];
"1000305" -> "1000301"  [label="CFG: "];
"1000301" -> "1000596"  [label="DDG: old_string_size"];
"1000176" -> "1000175"  [label="AST: "];
"1000176" -> "1000182"  [label="CFG: "];
"1000177" -> "1000176"  [label="AST: "];
"1000182" -> "1000176"  [label="AST: "];
"1000188" -> "1000176"  [label="CFG: "];
"1000175" -> "1000176"  [label="CFG: "];
"1000176" -> "1000175"  [label="DDG: parser->root.cursor"];
"1000176" -> "1000175"  [label="DDG: limit"];
"1000146" -> "1000176"  [label="DDG: limit"];
"1000176" -> "1000185"  [label="DDG: parser->root.cursor"];
"1000146" -> "1000128"  [label="AST: "];
"1000146" -> "1000148"  [label="CFG: "];
"1000147" -> "1000146"  [label="AST: "];
"1000148" -> "1000146"  [label="AST: "];
"1000156" -> "1000146"  [label="CFG: "];
"1000146" -> "1000596"  [label="DDG: parser->root.limit"];
"1000285" -> "1000249"  [label="AST: "];
"1000285" -> "1000291"  [label="CFG: "];
"1000286" -> "1000285"  [label="AST: "];
"1000291" -> "1000285"  [label="AST: "];
"1000293" -> "1000285"  [label="CFG: "];
"1000285" -> "1000596"  [label="DDG: cur"];
"1000270" -> "1000285"  [label="DDG: cur"];
"1000270" -> "1000272"  [label="CFG: "];
"1000271" -> "1000270"  [label="AST: "];
"1000272" -> "1000270"  [label="AST: "];
"1000270" -> "1000596"  [label="DDG: 2 + 1"];
"1000223" -> "1000270"  [label="DDG: cur"];
"1000223" -> "1000222"  [label="AST: "];
"1000223" -> "1000225"  [label="CFG: "];
"1000224" -> "1000223"  [label="AST: "];
"1000225" -> "1000223"  [label="AST: "];
"1000233" -> "1000223"  [label="CFG: "];
"1000223" -> "1000596"  [label="DDG: parser->root.cursor"];
"1000223" -> "1000596"  [label="DDG: cur"];
"1000185" -> "1000184"  [label="AST: "];
"1000185" -> "1000186"  [label="CFG: "];
"1000186" -> "1000185"  [label="AST: "];
"1000184" -> "1000185"  [label="CFG: "];
"1000292" -> "1000249"  [label="AST: "];
"1000293" -> "1000292"  [label="AST: "];
"1000302" -> "1000292"  [label="CFG: "];
"1000292" -> "1000596"  [label="DDG: (void)T1_ToBytes( parser, string_buf, string_size, &real_size, 1 )"];
"1000292" -> "1000596"  [label="DDG: T1_ToBytes( parser, string_buf, string_size, &real_size, 1 )"];
"1000236" -> "1000235"  [label="AST: "];
"1000236" -> "1000237"  [label="CFG: "];
"1000237" -> "1000236"  [label="AST: "];
"1000242" -> "1000236"  [label="CFG: "];
"1000397" -> "1000396"  [label="AST: "];
"1000397" -> "1000398"  [label="CFG: "];
"1000398" -> "1000397"  [label="AST: "];
"1000409" -> "1000397"  [label="CFG: "];
"1000412" -> "1000397"  [label="CFG: "];
"1000397" -> "1000596"  [label="DDG: ( string_size & 1 ) && string_buf[string_size - 1] == 0"];
"1000397" -> "1000596"  [label="DDG: string_size & 1"];
"1000397" -> "1000596"  [label="DDG: string_buf[string_size - 1] == 0"];
"1000398" -> "1000397"  [label="DDG: string_size"];
"1000398" -> "1000397"  [label="DDG: 1"];
"1000440" -> "1000439"  [label="AST: "];
"1000440" -> "1000447"  [label="CFG: "];
"1000441" -> "1000440"  [label="AST: "];
"1000447" -> "1000440"  [label="AST: "];
"1000450" -> "1000440"  [label="CFG: "];
"1000440" -> "1000596"  [label="DDG: string_buf[n]"];
"1000440" -> "1000596"  [label="DDG: face->ttf_data[count++]"];
"1000440" -> "1000481"  [label="DDG: face->ttf_data[count++]"];
"1000440" -> "1000524"  [label="DDG: face->ttf_data[count++]"];
"1000440" -> "1000526"  [label="DDG: face->ttf_data[count++]"];
"1000440" -> "1000554"  [label="DDG: face->ttf_data[count++]"];
"1000481" -> "1000480"  [label="AST: "];
"1000481" -> "1000486"  [label="CFG: "];
"1000482" -> "1000481"  [label="AST: "];
"1000485" -> "1000481"  [label="AST: "];
"1000486" -> "1000481"  [label="AST: "];
"1000489" -> "1000481"  [label="CFG: "];
"1000490" -> "1000481"  [label="CFG: "];
"1000481" -> "1000596"  [label="DDG: FT_REALLOC( face->ttf_data, 12, face->ttf_size )"];
"1000481" -> "1000596"  [label="DDG: face->ttf_data"];
"1000554" -> "1000481"  [label="DDG: face->ttf_data"];
"1000498" -> "1000481"  [label="DDG: face->ttf_data[count++]"];
"1000456" -> "1000481"  [label="DDG: face->ttf_data[4]"];
"1000584" -> "1000481"  [label="DDG: face->ttf_data[count++]"];
"1000471" -> "1000481"  [label="DDG: face->ttf_size"];
"1000481" -> "1000492"  [label="DDG: face->ttf_size"];
"1000481" -> "1000524"  [label="DDG: face->ttf_data"];
"1000481" -> "1000526"  [label="DDG: face->ttf_data"];
"1000481" -> "1000554"  [label="DDG: face->ttf_data"];
"1000492" -> "1000491"  [label="AST: "];
"1000492" -> "1000494"  [label="CFG: "];
"1000493" -> "1000492"  [label="AST: "];
"1000494" -> "1000492"  [label="AST: "];
"1000501" -> "1000492"  [label="CFG: "];
"1000515" -> "1000492"  [label="CFG: "];
"1000492" -> "1000596"  [label="DDG: face->ttf_size"];
"1000492" -> "1000596"  [label="DDG: count < face->ttf_size"];
"1000436" -> "1000492"  [label="DDG: count"];
"1000589" -> "1000492"  [label="DDG: count"];
"1000445" -> "1000492"  [label="DDG: count"];
"1000211" -> "1000492"  [label="DDG: count"];
"1000503" -> "1000492"  [label="DDG: count"];
"1000571" -> "1000492"  [label="DDG: face->ttf_size"];
"1000492" -> "1000503"  [label="DDG: count"];
"1000492" -> "1000541"  [label="DDG: face->ttf_size"];
"1000492" -> "1000554"  [label="DDG: face->ttf_size"];
"1000492" -> "1000563"  [label="DDG: face->ttf_size"];
"1000492" -> "1000571"  [label="DDG: count"];
"1000492" -> "1000571"  [label="DDG: face->ttf_size"];
"1000503" -> "1000499"  [label="AST: "];
"1000503" -> "1000504"  [label="CFG: "];
"1000504" -> "1000503"  [label="AST: "];
"1000499" -> "1000503"  [label="CFG: "];
"1000503" -> "1000596"  [label="DDG: count"];
"1000503" -> "1000436"  [label="DDG: count"];
"1000503" -> "1000571"  [label="DDG: count"];
"1000503" -> "1000589"  [label="DDG: count"];
"1000436" -> "1000435"  [label="AST: "];
"1000436" -> "1000438"  [label="CFG: "];
"1000437" -> "1000436"  [label="AST: "];
"1000438" -> "1000436"  [label="AST: "];
"1000443" -> "1000436"  [label="CFG: "];
"1000454" -> "1000436"  [label="CFG: "];
"1000436" -> "1000596"  [label="DDG: count < 12"];
"1000589" -> "1000436"  [label="DDG: count"];
"1000445" -> "1000436"  [label="DDG: count"];
"1000211" -> "1000436"  [label="DDG: count"];
"1000436" -> "1000445"  [label="DDG: count"];
"1000445" -> "1000441"  [label="AST: "];
"1000445" -> "1000446"  [label="CFG: "];
"1000446" -> "1000445"  [label="AST: "];
"1000441" -> "1000445"  [label="CFG: "];
"1000445" -> "1000596"  [label="DDG: count"];
"1000445" -> "1000571"  [label="DDG: count"];
"1000445" -> "1000589"  [label="DDG: count"];
"1000571" -> "1000570"  [label="AST: "];
"1000571" -> "1000573"  [label="CFG: "];
"1000572" -> "1000571"  [label="AST: "];
"1000573" -> "1000571"  [label="AST: "];
"1000578" -> "1000571"  [label="CFG: "];
"1000587" -> "1000571"  [label="CFG: "];
"1000571" -> "1000596"  [label="DDG: count >= face->ttf_size"];
"1000571" -> "1000596"  [label="DDG: face->ttf_size"];
"1000589" -> "1000571"  [label="DDG: count"];
"1000211" -> "1000571"  [label="DDG: count"];
"1000541" -> "1000571"  [label="DDG: face->ttf_size"];
"1000571" -> "1000589"  [label="DDG: count"];
"1000589" -> "1000585"  [label="AST: "];
"1000589" -> "1000590"  [label="CFG: "];
"1000590" -> "1000589"  [label="AST: "];
"1000585" -> "1000589"  [label="CFG: "];
"1000589" -> "1000596"  [label="DDG: count"];
"1000211" -> "1000589"  [label="DDG: count"];
"1000541" -> "1000522"  [label="AST: "];
"1000541" -> "1000545"  [label="CFG: "];
"1000542" -> "1000541"  [label="AST: "];
"1000545" -> "1000541"  [label="AST: "];
"1000521" -> "1000541"  [label="CFG: "];
"1000541" -> "1000596"  [label="DDG: ( len + 3 ) & ~3"];
"1000545" -> "1000541"  [label="DDG: len + 3"];
"1000545" -> "1000541"  [label="DDG: ~3"];
"1000541" -> "1000554"  [label="DDG: face->ttf_size"];
"1000541" -> "1000563"  [label="DDG: face->ttf_size"];
"1000554" -> "1000553"  [label="AST: "];
"1000554" -> "1000563"  [label="CFG: "];
"1000555" -> "1000554"  [label="AST: "];
"1000558" -> "1000554"  [label="AST: "];
"1000563" -> "1000554"  [label="AST: "];
"1000568" -> "1000554"  [label="CFG: "];
"1000569" -> "1000554"  [label="CFG: "];
"1000554" -> "1000596"  [label="DDG: face->ttf_size + 1"];
"1000554" -> "1000596"  [label="DDG: FT_REALLOC( face->ttf_data, 12 + 16 * num_tables,\n                             face->ttf_size + 1 )"];
"1000554" -> "1000596"  [label="DDG: face->ttf_data"];
"1000554" -> "1000596"  [label="DDG: 12 + 16 * num_tables"];
"1000554" -> "1000524"  [label="DDG: face->ttf_data"];
"1000554" -> "1000526"  [label="DDG: face->ttf_data"];
"1000498" -> "1000554"  [label="DDG: face->ttf_data[count++]"];
"1000456" -> "1000554"  [label="DDG: face->ttf_data[4]"];
"1000584" -> "1000554"  [label="DDG: face->ttf_data[count++]"];
"1000560" -> "1000554"  [label="DDG: 16"];
"1000560" -> "1000554"  [label="DDG: num_tables"];
"1000524" -> "1000522"  [label="AST: "];
"1000524" -> "1000526"  [label="CFG: "];
"1000525" -> "1000524"  [label="AST: "];
"1000526" -> "1000524"  [label="AST: "];
"1000538" -> "1000524"  [label="CFG: "];
"1000524" -> "1000596"  [label="DDG: face->ttf_data + 12 + 16 * i + 12"];
"1000498" -> "1000524"  [label="DDG: face->ttf_data[count++]"];
"1000456" -> "1000524"  [label="DDG: face->ttf_data[4]"];
"1000584" -> "1000524"  [label="DDG: face->ttf_data[count++]"];
"1000533" -> "1000524"  [label="DDG: 16"];
"1000533" -> "1000524"  [label="DDG: i"];
"1000524" -> "1000539"  [label="DDG: p"];
"1000539" -> "1000537"  [label="AST: "];
"1000539" -> "1000540"  [label="CFG: "];
"1000540" -> "1000539"  [label="AST: "];
"1000537" -> "1000539"  [label="CFG: "];
"1000539" -> "1000596"  [label="DDG: p"];
"1000539" -> "1000537"  [label="DDG: p"];
"1000537" -> "1000522"  [label="AST: "];
"1000538" -> "1000537"  [label="AST: "];
"1000543" -> "1000537"  [label="CFG: "];
"1000537" -> "1000596"  [label="DDG: FT_PEEK_ULONG( p )"];
"1000537" -> "1000545"  [label="DDG: len"];
"1000537" -> "1000546"  [label="DDG: len"];
"1000545" -> "1000549"  [label="CFG: "];
"1000546" -> "1000545"  [label="AST: "];
"1000549" -> "1000545"  [label="AST: "];
"1000545" -> "1000596"  [label="DDG: len + 3"];
"1000545" -> "1000596"  [label="DDG: ~3"];
"1000546" -> "1000548"  [label="CFG: "];
"1000547" -> "1000546"  [label="AST: "];
"1000548" -> "1000546"  [label="AST: "];
"1000549" -> "1000546"  [label="CFG: "];
"1000546" -> "1000596"  [label="DDG: len"];
"1000526" -> "1000530"  [label="CFG: "];
"1000527" -> "1000526"  [label="AST: "];
"1000530" -> "1000526"  [label="AST: "];
"1000526" -> "1000596"  [label="DDG: 12 + 16 * i + 12"];
"1000498" -> "1000526"  [label="DDG: face->ttf_data[count++]"];
"1000456" -> "1000526"  [label="DDG: face->ttf_data[4]"];
"1000584" -> "1000526"  [label="DDG: face->ttf_data[count++]"];
"1000533" -> "1000526"  [label="DDG: 16"];
"1000533" -> "1000526"  [label="DDG: i"];
"1000563" -> "1000567"  [label="CFG: "];
"1000564" -> "1000563"  [label="AST: "];
"1000567" -> "1000563"  [label="AST: "];
"1000498" -> "1000497"  [label="AST: "];
"1000498" -> "1000505"  [label="CFG: "];
"1000499" -> "1000498"  [label="AST: "];
"1000505" -> "1000498"  [label="AST: "];
"1000508" -> "1000498"  [label="CFG: "];
"1000498" -> "1000596"  [label="DDG: face->ttf_data[count++]"];
"1000498" -> "1000596"  [label="DDG: string_buf[n]"];
"1000584" -> "1000430"  [label="AST: "];
"1000584" -> "1000591"  [label="CFG: "];
"1000585" -> "1000584"  [label="AST: "];
"1000591" -> "1000584"  [label="AST: "];
"1000429" -> "1000584"  [label="CFG: "];
"1000584" -> "1000596"  [label="DDG: string_buf[n]"];
"1000584" -> "1000596"  [label="DDG: face->ttf_data[count++]"];
"1000350" -> "1000356"  [label="CFG: "];
"1000351" -> "1000350"  [label="AST: "];
"1000356" -> "1000350"  [label="AST: "];
"1000382" -> "1000384"  [label="CFG: "];
"1000383" -> "1000382"  [label="AST: "];
"1000384" -> "1000382"  [label="AST: "];
"1000398" -> "1000400"  [label="CFG: "];
"1000399" -> "1000398"  [label="AST: "];
"1000400" -> "1000398"  [label="AST: "];
"1000403" -> "1000398"  [label="CFG: "];
"1000425" -> "1000398"  [label="DDG: string_size"];
"1000304" -> "1000398"  [label="DDG: string_size"];
"1000205" -> "1000398"  [label="DDG: string_size"];
"1000398" -> "1000404"  [label="DDG: string_size"];
"1000398" -> "1000408"  [label="DDG: string_size"];
"1000398" -> "1000411"  [label="DDG: string_size"];
"1000404" -> "1000402"  [label="AST: "];
"1000404" -> "1000406"  [label="CFG: "];
"1000405" -> "1000404"  [label="AST: "];
"1000406" -> "1000404"  [label="AST: "];
"1000402" -> "1000404"  [label="CFG: "];
"1000404" -> "1000408"  [label="DDG: string_size"];
"1000404" -> "1000411"  [label="DDG: string_size"];
"1000408" -> "1000396"  [label="AST: "];
"1000408" -> "1000409"  [label="CFG: "];
"1000409" -> "1000408"  [label="AST: "];
"1000412" -> "1000408"  [label="CFG: "];
"1000408" -> "1000411"  [label="DDG: string_size"];
"1000411" -> "1000410"  [label="AST: "];
"1000411" -> "1000412"  [label="CFG: "];
"1000412" -> "1000411"  [label="AST: "];
"1000415" -> "1000411"  [label="CFG: "];
"1000423" -> "1000411"  [label="CFG: "];
"1000411" -> "1000596"  [label="DDG: !string_size"];
"1000411" -> "1000425"  [label="DDG: string_size"];
"1000425" -> "1000421"  [label="AST: "];
"1000425" -> "1000427"  [label="CFG: "];
"1000426" -> "1000425"  [label="AST: "];
"1000427" -> "1000425"  [label="AST: "];
"1000218" -> "1000425"  [label="CFG: "];
"1000432" -> "1000425"  [label="CFG: "];
"1000425" -> "1000596"  [label="DDG: string_size"];
"1000425" -> "1000596"  [label="DDG: n"];
"1000425" -> "1000596"  [label="DDG: n < string_size"];
"1000422" -> "1000425"  [label="DDG: n"];
"1000428" -> "1000425"  [label="DDG: n"];
"1000425" -> "1000428"  [label="DDG: n"];
"1000428" -> "1000421"  [label="AST: "];
"1000428" -> "1000429"  [label="CFG: "];
"1000429" -> "1000428"  [label="AST: "];
"1000426" -> "1000428"  [label="CFG: "];
"1000594" -> "1000128"  [label="AST: "];
"1000594" -> "1000595"  [label="CFG: "];
"1000595" -> "1000594"  [label="AST: "];
"1000596" -> "1000594"  [label="CFG: "];
"1000594" -> "1000596"  [label="DDG: parser"];
"1000594" -> "1000596"  [label="DDG: T1_Skip_Spaces( parser )"];
}
