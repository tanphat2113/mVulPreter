digraph "0_libmodbus_5ccdf5ef79d742640355d1132fa9e2abc7fbaefc@pointer" {
"1000630" [label="(Call,mapping_address >= mb_mapping->nb_registers)"];
"1000627" [label="(Call,mapping_address < 0)"];
"1000618" [label="(Call,mapping_address = address - mb_mapping->start_registers)"];
"1000620" [label="(Call,address - mb_mapping->start_registers)"];
"1000160" [label="(Call,address = (req[offset + 1] << 8) + req[offset + 2])"];
"1000163" [label="(Call,req[offset + 1] << 8)"];
"1000116" [label="(MethodParameterIn,const uint8_t *req)"];
"1000626" [label="(Call,mapping_address < 0 || mapping_address >= mb_mapping->nb_registers)"];
"1000263" [label="(Call,address - start_bits)"];
"1000824" [label="(Call,nb_bytes = req[offset + 5])"];
"1000163" [label="(Call,req[offset + 1] << 8)"];
"1000116" [label="(MethodParameterIn,const uint8_t *req)"];
"1000245" [label="(Call,nb = (req[offset + 3] << 8) + req[offset + 4])"];
"1001112" [label="(Call,memcpy(rsp, req, req_length))"];
"1000161" [label="(Identifier,address)"];
"1000686" [label="(Call,req[offset + 3] << 8)"];
"1000618" [label="(Call,mapping_address = address - mb_mapping->start_registers)"];
"1001083" [label="(Call,(req[offset + 5] << 8) + req[offset + 6])"];
"1001126" [label="(Call,req[offset + 3] << 8)"];
"1000529" [label="(Call,address - mb_mapping->start_bits)"];
"1000625" [label="(ControlStructure,if (mapping_address < 0 || mapping_address >= mb_mapping->nb_registers))"];
"1001171" [label="(Call,nb_write_bytes = req[offset + 9])"];
"1000699" [label="(Call,nb_bits = req[offset + 5])"];
"1001410" [label="(MethodReturn,int)"];
"1000810" [label="(Call,(req[offset + 3] << 8) + req[offset + 4])"];
"1000652" [label="(Call,(req[offset + 3] << 8) + req[offset + 4])"];
"1001157" [label="(Call,(req[offset + 7] << 8) + req[offset + 8])"];
"1000627" [label="(Call,mapping_address < 0)"];
"1000629" [label="(Literal,0)"];
"1000559" [label="(Call,data = (req[offset + 3] << 8) + req[offset + 4])"];
"1000621" [label="(Identifier,address)"];
"1000793" [label="(Call,memcpy(rsp + rsp_length, req + rsp_length, 4))"];
"1000177" [label="(Identifier,sft)"];
"1000620" [label="(Call,address - mb_mapping->start_registers)"];
"1000811" [label="(Call,req[offset + 3] << 8)"];
"1000148" [label="(Call,slave = req[offset - 1])"];
"1000418" [label="(Call,address - start_registers)"];
"1001155" [label="(Call,nb_write = (req[offset + 7] << 8) + req[offset + 8])"];
"1001123" [label="(Call,nb = (req[offset + 3] << 8) + req[offset + 4])"];
"1001327" [label="(Call,(req[offset + j] << 8) + req[offset + j + 1])"];
"1000709" [label="(Call,address - mb_mapping->start_bits)"];
"1000164" [label="(Call,req[offset + 1])"];
"1001084" [label="(Call,req[offset + 5] << 8)"];
"1001068" [label="(Call,req[offset + 3] << 8)"];
"1000834" [label="(Call,address - mb_mapping->start_registers)"];
"1000797" [label="(Call,req + rsp_length)"];
"1001328" [label="(Call,req[offset + j] << 8)"];
"1000949" [label="(Call,memcpy(rsp + rsp_length, req + rsp_length, 4))"];
"1000160" [label="(Call,address = (req[offset + 1] << 8) + req[offset + 2])"];
"1000630" [label="(Call,mapping_address >= mb_mapping->nb_registers)"];
"1000119" [label="(Block,)"];
"1000403" [label="(Call,req[offset + 3] << 8)"];
"1001142" [label="(Call,req[offset + 5] << 8)"];
"1000651" [label="(Identifier,data)"];
"1001065" [label="(Call,and = (req[offset + 3] << 8) + req[offset + 4])"];
"1000619" [label="(Identifier,mapping_address)"];
"1000622" [label="(Call,mb_mapping->start_registers)"];
"1000808" [label="(Call,nb = (req[offset + 3] << 8) + req[offset + 4])"];
"1000169" [label="(Literal,8)"];
"1000189" [label="(Call,ctx->backend->prepare_response_tid(req, &req_length))"];
"1000628" [label="(Identifier,mapping_address)"];
"1000247" [label="(Call,(req[offset + 3] << 8) + req[offset + 4])"];
"1000922" [label="(Call,mb_mapping->tab_registers[i] =\n                    (req[offset + j] << 8) + req[offset + j + 1])"];
"1001141" [label="(Call,(req[offset + 5] << 8) + req[offset + 6])"];
"1000650" [label="(Call,data = (req[offset + 3] << 8) + req[offset + 4])"];
"1001081" [label="(Call,or = (req[offset + 5] << 8) + req[offset + 6])"];
"1000626" [label="(Call,mapping_address < 0 || mapping_address >= mb_mapping->nb_registers)"];
"1000638" [label="(Call,response_exception(\n                ctx, &sft,\n                MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp, FALSE,\n                \"Illegal data address 0x%0X in write_register\n\",\n                address))"];
"1000248" [label="(Call,req[offset + 3] << 8)"];
"1000653" [label="(Call,req[offset + 3] << 8)"];
"1000683" [label="(Call,nb = (req[offset + 3] << 8) + req[offset + 4])"];
"1000953" [label="(Call,req + rsp_length)"];
"1001139" [label="(Call,address_write = (req[offset + 5] << 8) + req[offset + 6])"];
"1001321" [label="(Call,mb_mapping->tab_registers[i] =\n                    (req[offset + j] << 8) + req[offset + j + 1])"];
"1001125" [label="(Call,(req[offset + 3] << 8) + req[offset + 4])"];
"1000162" [label="(Call,(req[offset + 1] << 8) + req[offset + 2])"];
"1000155" [label="(Call,function = req[offset])"];
"1000562" [label="(Call,req[offset + 3] << 8)"];
"1001158" [label="(Call,req[offset + 7] << 8)"];
"1000616" [label="(Block,)"];
"1000672" [label="(Call,memcpy(rsp, req, req_length))"];
"1000402" [label="(Call,(req[offset + 3] << 8) + req[offset + 4])"];
"1001067" [label="(Call,(req[offset + 3] << 8) + req[offset + 4])"];
"1000685" [label="(Call,(req[offset + 3] << 8) + req[offset + 4])"];
"1000593" [label="(Call,memcpy(rsp, req, req_length))"];
"1000928" [label="(Call,(req[offset + j] << 8) + req[offset + j + 1])"];
"1000632" [label="(Call,mb_mapping->nb_registers)"];
"1000631" [label="(Identifier,mapping_address)"];
"1000929" [label="(Call,req[offset + j] << 8)"];
"1001027" [label="(Call,address - mb_mapping->start_registers)"];
"1000637" [label="(Identifier,rsp_length)"];
"1000400" [label="(Call,nb = (req[offset + 3] << 8) + req[offset + 4])"];
"1000561" [label="(Call,(req[offset + 3] << 8) + req[offset + 4])"];
"1001181" [label="(Call,address - mb_mapping->start_registers)"];
"1000171" [label="(Identifier,req)"];
"1000630" -> "1000626"  [label="AST: "];
"1000630" -> "1000632"  [label="CFG: "];
"1000631" -> "1000630"  [label="AST: "];
"1000632" -> "1000630"  [label="AST: "];
"1000626" -> "1000630"  [label="CFG: "];
"1000630" -> "1001410"  [label="DDG: mb_mapping->nb_registers"];
"1000630" -> "1001410"  [label="DDG: mapping_address"];
"1000630" -> "1000626"  [label="DDG: mapping_address"];
"1000630" -> "1000626"  [label="DDG: mb_mapping->nb_registers"];
"1000627" -> "1000630"  [label="DDG: mapping_address"];
"1000627" -> "1000626"  [label="AST: "];
"1000627" -> "1000629"  [label="CFG: "];
"1000628" -> "1000627"  [label="AST: "];
"1000629" -> "1000627"  [label="AST: "];
"1000631" -> "1000627"  [label="CFG: "];
"1000626" -> "1000627"  [label="CFG: "];
"1000627" -> "1001410"  [label="DDG: mapping_address"];
"1000627" -> "1000626"  [label="DDG: mapping_address"];
"1000627" -> "1000626"  [label="DDG: 0"];
"1000618" -> "1000627"  [label="DDG: mapping_address"];
"1000618" -> "1000616"  [label="AST: "];
"1000618" -> "1000620"  [label="CFG: "];
"1000619" -> "1000618"  [label="AST: "];
"1000620" -> "1000618"  [label="AST: "];
"1000628" -> "1000618"  [label="CFG: "];
"1000618" -> "1001410"  [label="DDG: address - mb_mapping->start_registers"];
"1000620" -> "1000618"  [label="DDG: address"];
"1000620" -> "1000618"  [label="DDG: mb_mapping->start_registers"];
"1000620" -> "1000622"  [label="CFG: "];
"1000621" -> "1000620"  [label="AST: "];
"1000622" -> "1000620"  [label="AST: "];
"1000620" -> "1001410"  [label="DDG: mb_mapping->start_registers"];
"1000620" -> "1001410"  [label="DDG: address"];
"1000160" -> "1000620"  [label="DDG: address"];
"1000620" -> "1000638"  [label="DDG: address"];
"1000160" -> "1000119"  [label="AST: "];
"1000160" -> "1000162"  [label="CFG: "];
"1000161" -> "1000160"  [label="AST: "];
"1000162" -> "1000160"  [label="AST: "];
"1000177" -> "1000160"  [label="CFG: "];
"1000160" -> "1001410"  [label="DDG: (req[offset + 1] << 8) + req[offset + 2]"];
"1000160" -> "1001410"  [label="DDG: address"];
"1000163" -> "1000160"  [label="DDG: req[offset + 1]"];
"1000163" -> "1000160"  [label="DDG: 8"];
"1000116" -> "1000160"  [label="DDG: req"];
"1000160" -> "1000263"  [label="DDG: address"];
"1000160" -> "1000418"  [label="DDG: address"];
"1000160" -> "1000529"  [label="DDG: address"];
"1000160" -> "1000709"  [label="DDG: address"];
"1000160" -> "1000834"  [label="DDG: address"];
"1000160" -> "1001027"  [label="DDG: address"];
"1000160" -> "1001181"  [label="DDG: address"];
"1000163" -> "1000162"  [label="AST: "];
"1000163" -> "1000169"  [label="CFG: "];
"1000164" -> "1000163"  [label="AST: "];
"1000169" -> "1000163"  [label="AST: "];
"1000171" -> "1000163"  [label="CFG: "];
"1000163" -> "1001410"  [label="DDG: req[offset + 1]"];
"1000163" -> "1000162"  [label="DDG: req[offset + 1]"];
"1000163" -> "1000162"  [label="DDG: 8"];
"1000116" -> "1000163"  [label="DDG: req"];
"1000163" -> "1000189"  [label="DDG: req[offset + 1]"];
"1000163" -> "1000593"  [label="DDG: req[offset + 1]"];
"1000163" -> "1000672"  [label="DDG: req[offset + 1]"];
"1000163" -> "1000793"  [label="DDG: req[offset + 1]"];
"1000163" -> "1000797"  [label="DDG: req[offset + 1]"];
"1000163" -> "1000949"  [label="DDG: req[offset + 1]"];
"1000163" -> "1000953"  [label="DDG: req[offset + 1]"];
"1000163" -> "1001112"  [label="DDG: req[offset + 1]"];
"1000116" -> "1000114"  [label="AST: "];
"1000116" -> "1001410"  [label="DDG: req"];
"1000116" -> "1000148"  [label="DDG: req"];
"1000116" -> "1000155"  [label="DDG: req"];
"1000116" -> "1000162"  [label="DDG: req"];
"1000116" -> "1000189"  [label="DDG: req"];
"1000116" -> "1000245"  [label="DDG: req"];
"1000116" -> "1000248"  [label="DDG: req"];
"1000116" -> "1000247"  [label="DDG: req"];
"1000116" -> "1000400"  [label="DDG: req"];
"1000116" -> "1000403"  [label="DDG: req"];
"1000116" -> "1000402"  [label="DDG: req"];
"1000116" -> "1000559"  [label="DDG: req"];
"1000116" -> "1000562"  [label="DDG: req"];
"1000116" -> "1000561"  [label="DDG: req"];
"1000116" -> "1000593"  [label="DDG: req"];
"1000116" -> "1000650"  [label="DDG: req"];
"1000116" -> "1000653"  [label="DDG: req"];
"1000116" -> "1000652"  [label="DDG: req"];
"1000116" -> "1000672"  [label="DDG: req"];
"1000116" -> "1000683"  [label="DDG: req"];
"1000116" -> "1000686"  [label="DDG: req"];
"1000116" -> "1000685"  [label="DDG: req"];
"1000116" -> "1000699"  [label="DDG: req"];
"1000116" -> "1000793"  [label="DDG: req"];
"1000116" -> "1000797"  [label="DDG: req"];
"1000116" -> "1000808"  [label="DDG: req"];
"1000116" -> "1000811"  [label="DDG: req"];
"1000116" -> "1000810"  [label="DDG: req"];
"1000116" -> "1000824"  [label="DDG: req"];
"1000116" -> "1000922"  [label="DDG: req"];
"1000116" -> "1000929"  [label="DDG: req"];
"1000116" -> "1000928"  [label="DDG: req"];
"1000116" -> "1000949"  [label="DDG: req"];
"1000116" -> "1000953"  [label="DDG: req"];
"1000116" -> "1001065"  [label="DDG: req"];
"1000116" -> "1001068"  [label="DDG: req"];
"1000116" -> "1001067"  [label="DDG: req"];
"1000116" -> "1001081"  [label="DDG: req"];
"1000116" -> "1001084"  [label="DDG: req"];
"1000116" -> "1001083"  [label="DDG: req"];
"1000116" -> "1001112"  [label="DDG: req"];
"1000116" -> "1001123"  [label="DDG: req"];
"1000116" -> "1001126"  [label="DDG: req"];
"1000116" -> "1001125"  [label="DDG: req"];
"1000116" -> "1001139"  [label="DDG: req"];
"1000116" -> "1001142"  [label="DDG: req"];
"1000116" -> "1001141"  [label="DDG: req"];
"1000116" -> "1001155"  [label="DDG: req"];
"1000116" -> "1001158"  [label="DDG: req"];
"1000116" -> "1001157"  [label="DDG: req"];
"1000116" -> "1001171"  [label="DDG: req"];
"1000116" -> "1001321"  [label="DDG: req"];
"1000116" -> "1001328"  [label="DDG: req"];
"1000116" -> "1001327"  [label="DDG: req"];
"1000626" -> "1000625"  [label="AST: "];
"1000637" -> "1000626"  [label="CFG: "];
"1000651" -> "1000626"  [label="CFG: "];
"1000626" -> "1001410"  [label="DDG: mapping_address >= mb_mapping->nb_registers"];
"1000626" -> "1001410"  [label="DDG: mapping_address < 0 || mapping_address >= mb_mapping->nb_registers"];
"1000626" -> "1001410"  [label="DDG: mapping_address < 0"];
}
