digraph "0_libmodbus_5ccdf5ef79d742640355d1132fa9e2abc7fbaefc@pointer" {
"1000383" [label="(Call,*tab_registers = is_input ? mb_mapping->tab_input_registers : mb_mapping->tab_registers)"];
"1000508" [label="(Call,tab_registers[i] >> 8)"];
"1000503" [label="(Call,rsp[rsp_length++] = tab_registers[i] >> 8)"];
"1000518" [label="(Call,tab_registers[i] & 0xFF)"];
"1000513" [label="(Call,rsp[rsp_length++] = tab_registers[i] & 0xFF)"];
"1001406" [label="(Call,send_msg(ctx, rsp, rsp_length))"];
"1001393" [label="(Call,(ctx->backend->backend_type == _MODBUS_BACKEND_TYPE_RTU &&\n            slave == MODBUS_BROADCAST_ADDRESS) ? 0 : send_msg(ctx, rsp, rsp_length))"];
"1001392" [label="(Return,return (ctx->backend->backend_type == _MODBUS_BACKEND_TYPE_RTU &&\n            slave == MODBUS_BROADCAST_ADDRESS) ? 0 : send_msg(ctx, rsp, rsp_length);)"];
"1000501" [label="(Identifier,i)"];
"1001112" [label="(Call,memcpy(rsp, req, req_length))"];
"1000384" [label="(Identifier,tab_registers)"];
"1000604" [label="(Call,response_exception(\n                    ctx, &sft,\n                    MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE, rsp, FALSE,\n                    \"Illegal data value 0x%0X in write_bit request at address %0X\n\",\n                    data, address))"];
"1000394" [label="(Identifier,name)"];
"1001217" [label="(Call,rsp_length = response_exception(\n                ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE, rsp, TRUE,\n                \"Illegal nb of values (W%d, R%d) in write_and_read_registers (max W%d, R%d)\n\",\n                nb_write, nb, MODBUS_MAX_WR_WRITE_REGISTERS, MODBUS_MAX_WR_READ_REGISTERS))"];
"1000275" [label="(Call,rsp_length = response_exception(\n                ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE, rsp, TRUE,\n                \"Illegal nb of values %d in %s (max %d)\n\",\n                nb, name, MODBUS_MAX_READ_BITS))"];
"1000514" [label="(Call,rsp[rsp_length++])"];
"1000854" [label="(Call,rsp_length = response_exception(\n                 ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE, rsp, TRUE,\n                 \"Illegal number of values %d in write_registers (max %d)\n\",\n                nb, MODBUS_MAX_WRITE_REGISTERS))"];
"1000504" [label="(Call,rsp[rsp_length++])"];
"1001257" [label="(Call,rsp_length = response_exception(\n                ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp, FALSE,\n                \"Illegal data read address 0x%0X or write address 0x%0X write_and_read_registers\n\",\n                mapping_address < 0 ? address : address + nb,\n                mapping_address_write < 0 ? address_write : address_write + nb_write))"];
"1001410" [label="(MethodReturn,int)"];
"1000882" [label="(Call,response_exception(\n                ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp, FALSE,\n                \"Illegal data address 0x%0X in write_registers\n\",\n                mapping_address < 0 ? address : address + nb))"];
"1000344" [label="(Call,response_io_status(tab_bits, mapping_address, nb,\n                                            rsp, rsp_length))"];
"1000327" [label="(Call,rsp[rsp_length++] = (nb / 8) + ((nb % 8) ? 1 : 0))"];
"1000801" [label="(Call,rsp_length += 4)"];
"1000512" [label="(Literal,8)"];
"1000789" [label="(Call,ctx->backend->build_response_basis(&sft, rsp))"];
"1000508" [label="(Call,tab_registers[i] >> 8)"];
"1000479" [label="(Call,ctx->backend->build_response_basis(&sft, rsp))"];
"1001405" [label="(Literal,0)"];
"1001116" [label="(Call,rsp_length = req_length)"];
"1000515" [label="(Identifier,rsp)"];
"1000676" [label="(Call,rsp_length = req_length)"];
"1000522" [label="(Literal,0xFF)"];
"1000300" [label="(Call,rsp_length = response_exception(\n                ctx, &sft,\n                MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp, FALSE,\n                \"Illegal data address 0x%0X in %s\n\",\n                mapping_address < 0 ? address : address + nb, name))"];
"1000518" [label="(Call,tab_registers[i] & 0xFF)"];
"1001409" [label="(Identifier,rsp_length)"];
"1001407" [label="(Identifier,ctx)"];
"1000430" [label="(Call,rsp_length = response_exception(\n                ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE, rsp, TRUE,\n                \"Illegal nb of values %d in %s (max %d)\n\",\n                nb, name, MODBUS_MAX_READ_REGISTERS))"];
"1000755" [label="(Call,rsp_length = response_exception(\n                ctx, &sft,\n                MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp, FALSE,\n                \"Illegal data address 0x%0X in write_bits\n\",\n                mapping_address < 0 ? address : address + nb))"];
"1001219" [label="(Call,response_exception(\n                ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE, rsp, TRUE,\n                \"Illegal nb of values (W%d, R%d) in write_and_read_registers (max W%d, R%d)\n\",\n                nb_write, nb, MODBUS_MAX_WR_WRITE_REGISTERS, MODBUS_MAX_WR_READ_REGISTERS))"];
"1000636" [label="(Call,rsp_length = response_exception(\n                ctx, &sft,\n                MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp, FALSE,\n                \"Illegal data address 0x%0X in write_register\n\",\n                address))"];
"1000277" [label="(Call,response_exception(\n                ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE, rsp, TRUE,\n                \"Illegal nb of values %d in %s (max %d)\n\",\n                nb, name, MODBUS_MAX_READ_BITS))"];
"1001408" [label="(Identifier,rsp)"];
"1001000" [label="(Call,rsp_length - byte_count_pos - 1)"];
"1000131" [label="(Call,ctx == NULL)"];
"1000503" [label="(Call,rsp[rsp_length++] = tab_registers[i] >> 8)"];
"1000432" [label="(Call,response_exception(\n                ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE, rsp, TRUE,\n                \"Illegal nb of values %d in %s (max %d)\n\",\n                nb, name, MODBUS_MAX_READ_REGISTERS))"];
"1000385" [label="(Call,is_input ? mb_mapping->tab_input_registers : mb_mapping->tab_registers)"];
"1000731" [label="(Call,response_exception(\n                ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE, rsp, TRUE,\n                \"Illegal number of values %d in write_bits (max %d)\n\",\n                nb, MODBUS_MAX_WRITE_BITS))"];
"1000597" [label="(Call,rsp_length = req_length)"];
"1001289" [label="(Call,ctx->backend->build_response_basis(&sft, rsp))"];
"1000483" [label="(Call,rsp[rsp_length++] = nb << 1)"];
"1000342" [label="(Call,rsp_length = response_io_status(tab_bits, mapping_address, nb,\n                                            rsp, rsp_length))"];
"1001045" [label="(Call,response_exception(\n                ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp, FALSE,\n                \"Illegal data address 0x%0X in write_register\n\",\n                address))"];
"1000119" [label="(Block,)"];
"1000981" [label="(Call,rsp[rsp_length++] = 0xFF)"];
"1001366" [label="(Call,rsp[rsp_length++] = mb_mapping->tab_registers[i] & 0xFF)"];
"1001380" [label="(Call,rsp_length = response_exception(\n            ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_FUNCTION, rsp, TRUE,\n            \"Unknown Modbus function code: 0x%0X\n\", function))"];
"1000457" [label="(Call,response_exception(\n                ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp, FALSE,\n                \"Illegal data address 0x%0X in %s\n\",\n                mapping_address < 0 ? address : address + nb, name))"];
"1000302" [label="(Call,response_exception(\n                ctx, &sft,\n                MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp, FALSE,\n                \"Illegal data address 0x%0X in %s\n\",\n                mapping_address < 0 ? address : address + nb, name))"];
"1000115" [label="(MethodParameterIn,modbus_t *ctx)"];
"1001296" [label="(Call,rsp_length++)"];
"1001043" [label="(Call,rsp_length = response_exception(\n                ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp, FALSE,\n                \"Illegal data address 0x%0X in write_register\n\",\n                address))"];
"1000957" [label="(Call,rsp_length += 4)"];
"1000545" [label="(Call,rsp_length = response_exception(\n                ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp, FALSE,\n                \"Illegal data address 0x%0X in write_bit\n\",\n                address))"];
"1000729" [label="(Call,rsp_length = response_exception(\n                ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE, rsp, TRUE,\n                \"Illegal number of values %d in write_bits (max %d)\n\",\n                nb, MODBUS_MAX_WRITE_BITS))"];
"1001259" [label="(Call,response_exception(\n                ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp, FALSE,\n                \"Illegal data read address 0x%0X or write address 0x%0X write_and_read_registers\n\",\n                mapping_address < 0 ? address : address + nb,\n                mapping_address_write < 0 ? address_write : address_write + nb_write))"];
"1000547" [label="(Call,response_exception(\n                ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp, FALSE,\n                \"Illegal data address 0x%0X in write_bit\n\",\n                address))"];
"1001382" [label="(Call,response_exception(\n            ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_FUNCTION, rsp, TRUE,\n            \"Unknown Modbus function code: 0x%0X\n\", function))"];
"1000945" [label="(Call,ctx->backend->build_response_basis(&sft, rsp))"];
"1000519" [label="(Call,tab_registers[i])"];
"1001293" [label="(Call,rsp[rsp_length++] = nb << 1)"];
"1001393" [label="(Call,(ctx->backend->backend_type == _MODBUS_BACKEND_TYPE_RTU &&\n            slave == MODBUS_BROADCAST_ADDRESS) ? 0 : send_msg(ctx, rsp, rsp_length))"];
"1000638" [label="(Call,response_exception(\n                ctx, &sft,\n                MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp, FALSE,\n                \"Illegal data address 0x%0X in write_register\n\",\n                address))"];
"1000513" [label="(Call,rsp[rsp_length++] = tab_registers[i] & 0xFF)"];
"1000509" [label="(Call,tab_registers[i])"];
"1001392" [label="(Return,return (ctx->backend->backend_type == _MODBUS_BACKEND_TYPE_RTU &&\n            slave == MODBUS_BROADCAST_ADDRESS) ? 0 : send_msg(ctx, rsp, rsp_length);)"];
"1000757" [label="(Call,response_exception(\n                ctx, &sft,\n                MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp, FALSE,\n                \"Illegal data address 0x%0X in write_bits\n\",\n                mapping_address < 0 ? address : address + nb))"];
"1000486" [label="(Call,rsp_length++)"];
"1001394" [label="(Call,ctx->backend->backend_type == _MODBUS_BACKEND_TYPE_RTU &&\n            slave == MODBUS_BROADCAST_ADDRESS)"];
"1000880" [label="(Call,rsp_length = response_exception(\n                ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp, FALSE,\n                \"Illegal data address 0x%0X in write_registers\n\",\n                mapping_address < 0 ? address : address + nb))"];
"1000967" [label="(Call,ctx->backend->build_response_basis(&sft, rsp))"];
"1000672" [label="(Call,memcpy(rsp, req, req_length))"];
"1001406" [label="(Call,send_msg(ctx, rsp, rsp_length))"];
"1000516" [label="(Call,rsp_length++)"];
"1000383" [label="(Call,*tab_registers = is_input ? mb_mapping->tab_input_registers : mb_mapping->tab_registers)"];
"1000602" [label="(Call,rsp_length = response_exception(\n                    ctx, &sft,\n                    MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE, rsp, FALSE,\n                    \"Illegal data value 0x%0X in write_bit request at address %0X\n\",\n                    data, address))"];
"1000502" [label="(Block,)"];
"1000593" [label="(Call,memcpy(rsp, req, req_length))"];
"1000353" [label="(Block,)"];
"1000996" [label="(Call,rsp[byte_count_pos] = rsp_length - byte_count_pos - 1)"];
"1001369" [label="(Call,rsp_length++)"];
"1000856" [label="(Call,response_exception(\n                 ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE, rsp, TRUE,\n                 \"Illegal number of values %d in write_registers (max %d)\n\",\n                nb, MODBUS_MAX_WRITE_REGISTERS))"];
"1000455" [label="(Call,rsp_length = response_exception(\n                ctx, &sft, MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS, rsp, FALSE,\n                \"Illegal data address 0x%0X in %s\n\",\n                mapping_address < 0 ? address : address + nb, name))"];
"1000383" -> "1000353"  [label="AST: "];
"1000383" -> "1000385"  [label="CFG: "];
"1000384" -> "1000383"  [label="AST: "];
"1000385" -> "1000383"  [label="AST: "];
"1000394" -> "1000383"  [label="CFG: "];
"1000383" -> "1001410"  [label="DDG: tab_registers"];
"1000383" -> "1001410"  [label="DDG: is_input ? mb_mapping->tab_input_registers : mb_mapping->tab_registers"];
"1000383" -> "1000508"  [label="DDG: tab_registers"];
"1000383" -> "1000518"  [label="DDG: tab_registers"];
"1000508" -> "1000503"  [label="AST: "];
"1000508" -> "1000512"  [label="CFG: "];
"1000509" -> "1000508"  [label="AST: "];
"1000512" -> "1000508"  [label="AST: "];
"1000503" -> "1000508"  [label="CFG: "];
"1000508" -> "1000503"  [label="DDG: tab_registers[i]"];
"1000508" -> "1000503"  [label="DDG: 8"];
"1000518" -> "1000508"  [label="DDG: tab_registers[i]"];
"1000508" -> "1000518"  [label="DDG: tab_registers[i]"];
"1000503" -> "1000502"  [label="AST: "];
"1000504" -> "1000503"  [label="AST: "];
"1000515" -> "1000503"  [label="CFG: "];
"1000503" -> "1001410"  [label="DDG: tab_registers[i] >> 8"];
"1000518" -> "1000513"  [label="AST: "];
"1000518" -> "1000522"  [label="CFG: "];
"1000519" -> "1000518"  [label="AST: "];
"1000522" -> "1000518"  [label="AST: "];
"1000513" -> "1000518"  [label="CFG: "];
"1000518" -> "1001410"  [label="DDG: tab_registers[i]"];
"1000518" -> "1000513"  [label="DDG: tab_registers[i]"];
"1000518" -> "1000513"  [label="DDG: 0xFF"];
"1000513" -> "1000502"  [label="AST: "];
"1000514" -> "1000513"  [label="AST: "];
"1000501" -> "1000513"  [label="CFG: "];
"1000513" -> "1001410"  [label="DDG: rsp[rsp_length++]"];
"1000513" -> "1001410"  [label="DDG: tab_registers[i] & 0xFF"];
"1000513" -> "1001406"  [label="DDG: rsp[rsp_length++]"];
"1001406" -> "1001393"  [label="AST: "];
"1001406" -> "1001409"  [label="CFG: "];
"1001407" -> "1001406"  [label="AST: "];
"1001408" -> "1001406"  [label="AST: "];
"1001409" -> "1001406"  [label="AST: "];
"1001393" -> "1001406"  [label="CFG: "];
"1001406" -> "1001410"  [label="DDG: rsp"];
"1001406" -> "1001410"  [label="DDG: rsp_length"];
"1001406" -> "1001410"  [label="DDG: ctx"];
"1001406" -> "1001393"  [label="DDG: ctx"];
"1001406" -> "1001393"  [label="DDG: rsp"];
"1001406" -> "1001393"  [label="DDG: rsp_length"];
"1000547" -> "1001406"  [label="DDG: ctx"];
"1000547" -> "1001406"  [label="DDG: rsp"];
"1000856" -> "1001406"  [label="DDG: ctx"];
"1000856" -> "1001406"  [label="DDG: rsp"];
"1000638" -> "1001406"  [label="DDG: ctx"];
"1000638" -> "1001406"  [label="DDG: rsp"];
"1000131" -> "1001406"  [label="DDG: ctx"];
"1001219" -> "1001406"  [label="DDG: ctx"];
"1001219" -> "1001406"  [label="DDG: rsp"];
"1000277" -> "1001406"  [label="DDG: ctx"];
"1000277" -> "1001406"  [label="DDG: rsp"];
"1000457" -> "1001406"  [label="DDG: ctx"];
"1000457" -> "1001406"  [label="DDG: rsp"];
"1001259" -> "1001406"  [label="DDG: ctx"];
"1001259" -> "1001406"  [label="DDG: rsp"];
"1000757" -> "1001406"  [label="DDG: ctx"];
"1000757" -> "1001406"  [label="DDG: rsp"];
"1000882" -> "1001406"  [label="DDG: ctx"];
"1000882" -> "1001406"  [label="DDG: rsp"];
"1000302" -> "1001406"  [label="DDG: ctx"];
"1000302" -> "1001406"  [label="DDG: rsp"];
"1001382" -> "1001406"  [label="DDG: ctx"];
"1001382" -> "1001406"  [label="DDG: rsp"];
"1000432" -> "1001406"  [label="DDG: ctx"];
"1000432" -> "1001406"  [label="DDG: rsp"];
"1000604" -> "1001406"  [label="DDG: ctx"];
"1000604" -> "1001406"  [label="DDG: rsp"];
"1000731" -> "1001406"  [label="DDG: ctx"];
"1000731" -> "1001406"  [label="DDG: rsp"];
"1001045" -> "1001406"  [label="DDG: ctx"];
"1001045" -> "1001406"  [label="DDG: rsp"];
"1000115" -> "1001406"  [label="DDG: ctx"];
"1001112" -> "1001406"  [label="DDG: rsp"];
"1000981" -> "1001406"  [label="DDG: rsp[rsp_length++]"];
"1000327" -> "1001406"  [label="DDG: rsp[rsp_length++]"];
"1001366" -> "1001406"  [label="DDG: rsp[rsp_length++]"];
"1000996" -> "1001406"  [label="DDG: rsp[byte_count_pos]"];
"1000344" -> "1001406"  [label="DDG: rsp"];
"1000593" -> "1001406"  [label="DDG: rsp"];
"1001293" -> "1001406"  [label="DDG: rsp[rsp_length++]"];
"1001289" -> "1001406"  [label="DDG: rsp"];
"1000967" -> "1001406"  [label="DDG: rsp"];
"1000672" -> "1001406"  [label="DDG: rsp"];
"1000483" -> "1001406"  [label="DDG: rsp[rsp_length++]"];
"1000479" -> "1001406"  [label="DDG: rsp"];
"1000789" -> "1001406"  [label="DDG: rsp"];
"1000945" -> "1001406"  [label="DDG: rsp"];
"1000801" -> "1001406"  [label="DDG: rsp_length"];
"1000300" -> "1001406"  [label="DDG: rsp_length"];
"1000275" -> "1001406"  [label="DDG: rsp_length"];
"1001369" -> "1001406"  [label="DDG: rsp_length"];
"1000516" -> "1001406"  [label="DDG: rsp_length"];
"1000486" -> "1001406"  [label="DDG: rsp_length"];
"1000455" -> "1001406"  [label="DDG: rsp_length"];
"1001116" -> "1001406"  [label="DDG: rsp_length"];
"1000729" -> "1001406"  [label="DDG: rsp_length"];
"1000880" -> "1001406"  [label="DDG: rsp_length"];
"1001257" -> "1001406"  [label="DDG: rsp_length"];
"1000676" -> "1001406"  [label="DDG: rsp_length"];
"1000597" -> "1001406"  [label="DDG: rsp_length"];
"1001043" -> "1001406"  [label="DDG: rsp_length"];
"1000342" -> "1001406"  [label="DDG: rsp_length"];
"1001217" -> "1001406"  [label="DDG: rsp_length"];
"1000636" -> "1001406"  [label="DDG: rsp_length"];
"1000545" -> "1001406"  [label="DDG: rsp_length"];
"1000957" -> "1001406"  [label="DDG: rsp_length"];
"1001000" -> "1001406"  [label="DDG: rsp_length"];
"1000430" -> "1001406"  [label="DDG: rsp_length"];
"1000854" -> "1001406"  [label="DDG: rsp_length"];
"1000602" -> "1001406"  [label="DDG: rsp_length"];
"1001380" -> "1001406"  [label="DDG: rsp_length"];
"1001296" -> "1001406"  [label="DDG: rsp_length"];
"1000755" -> "1001406"  [label="DDG: rsp_length"];
"1001393" -> "1001392"  [label="AST: "];
"1001393" -> "1001405"  [label="CFG: "];
"1001394" -> "1001393"  [label="AST: "];
"1001405" -> "1001393"  [label="AST: "];
"1001392" -> "1001393"  [label="CFG: "];
"1001393" -> "1001410"  [label="DDG: (ctx->backend->backend_type == _MODBUS_BACKEND_TYPE_RTU &&\n            slave == MODBUS_BROADCAST_ADDRESS) ? 0 : send_msg(ctx, rsp, rsp_length)"];
"1001393" -> "1001410"  [label="DDG: send_msg(ctx, rsp, rsp_length)"];
"1001393" -> "1001410"  [label="DDG: ctx->backend->backend_type == _MODBUS_BACKEND_TYPE_RTU &&\n            slave == MODBUS_BROADCAST_ADDRESS"];
"1001393" -> "1001392"  [label="DDG: (ctx->backend->backend_type == _MODBUS_BACKEND_TYPE_RTU &&\n            slave == MODBUS_BROADCAST_ADDRESS) ? 0 : send_msg(ctx, rsp, rsp_length)"];
"1001392" -> "1000119"  [label="AST: "];
"1001410" -> "1001392"  [label="CFG: "];
"1001392" -> "1001410"  [label="DDG: <RET>"];
}
