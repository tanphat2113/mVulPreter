digraph "1_Android_81df1cc77722000f8d0025c1ab00ced123aa573c@API" {
"1000156" [label="(Call,strerror(errno))"];
"1000129" [label="(Call,errno != EEXIST)"];
"1000139" [label="(Call,strerror(errno))"];
"1000150" [label="(Call,_LOG(&log, logtype::ERROR, \"failed to change ownership of %s: %s\n\", TOMBSTONE_DIR, strerror(errno)))"];
"1000169" [label="(Call,selinux_android_restorecon(TOMBSTONE_DIR, 0))"];
"1000168" [label="(Call,selinux_android_restorecon(TOMBSTONE_DIR, 0) == 0)"];
"1000181" [label="(Call,_LOG(&log, logtype::ERROR, \"Failed to restore security context, not writing tombstone.\n\"))"];
"1000191" [label="(Call,_LOG(&log, logtype::ERROR, \"Skipping tombstone write, nothing to do.\n\"))"];
"1000219" [label="(Call,dump_crash(&log, pid, tid, signal, original_si_code, abort_msg_address,\n                              dump_sibling_threads, total_sleep_time_usec))"];
"1000216" [label="(Call,*detach_failed = dump_crash(&log, pid, tid, signal, original_si_code, abort_msg_address,\n                              dump_sibling_threads, total_sleep_time_usec))"];
"1000131" [label="(Identifier,EEXIST)"];
"1000167" [label="(ControlStructure,if (selinux_android_restorecon(TOMBSTONE_DIR, 0) == 0))"];
"1000226" [label="(Identifier,abort_msg_address)"];
"1000183" [label="(Identifier,log)"];
"1000169" [label="(Call,selinux_android_restorecon(TOMBSTONE_DIR, 0))"];
"1000168" [label="(Call,selinux_android_restorecon(TOMBSTONE_DIR, 0) == 0)"];
"1000223" [label="(Identifier,tid)"];
"1000103" [label="(MethodParameterIn,int signal)"];
"1000151" [label="(Call,&log)"];
"1000104" [label="(MethodParameterIn,int original_si_code)"];
"1000219" [label="(Call,dump_crash(&log, pid, tid, signal, original_si_code, abort_msg_address,\n                              dump_sibling_threads, total_sleep_time_usec))"];
"1000172" [label="(Literal,0)"];
"1000143" [label="(Call,chown(TOMBSTONE_DIR, AID_SYSTEM, AID_SYSTEM))"];
"1000102" [label="(MethodParameterIn,pid_t tid)"];
"1000155" [label="(Identifier,TOMBSTONE_DIR)"];
"1000175" [label="(Identifier,path)"];
"1000153" [label="(Identifier,logtype::ERROR)"];
"1000150" [label="(Call,_LOG(&log, logtype::ERROR, \"failed to change ownership of %s: %s\n\", TOMBSTONE_DIR, strerror(errno)))"];
"1000191" [label="(Call,_LOG(&log, logtype::ERROR, \"Skipping tombstone write, nothing to do.\n\"))"];
"1000156" [label="(Call,strerror(errno))"];
"1000198" [label="(Identifier,detach_failed)"];
"1000194" [label="(Identifier,logtype::ERROR)"];
"1000101" [label="(MethodParameterIn,pid_t pid)"];
"1000140" [label="(Identifier,errno)"];
"1000130" [label="(Identifier,errno)"];
"1000171" [label="(Literal,0)"];
"1000190" [label="(Block,)"];
"1000220" [label="(Call,&log)"];
"1000224" [label="(Identifier,signal)"];
"1000160" [label="(Identifier,fd)"];
"1000195" [label="(Literal,\"Skipping tombstone write, nothing to do.\n\")"];
"1000181" [label="(Call,_LOG(&log, logtype::ERROR, \"Failed to restore security context, not writing tombstone.\n\"))"];
"1000106" [label="(MethodParameterIn,bool dump_sibling_threads)"];
"1000188" [label="(Identifier,fd)"];
"1000217" [label="(Call,*detach_failed)"];
"1000222" [label="(Identifier,pid)"];
"1000230" [label="(Literal,\"\nTombstone written to: %s\n\")"];
"1000154" [label="(Literal,\"failed to change ownership of %s: %s\n\")"];
"1000185" [label="(Literal,\"Failed to restore security context, not writing tombstone.\n\")"];
"1000109" [label="(Block,)"];
"1000157" [label="(Identifier,errno)"];
"1000122" [label="(Call,(mkdir(TOMBSTONE_DIR, 0755) == -1) && (errno != EEXIST))"];
"1000192" [label="(Call,&log)"];
"1000105" [label="(MethodParameterIn,uintptr_t abort_msg_address)"];
"1000139" [label="(Call,strerror(errno))"];
"1000133" [label="(Call,_LOG(&log, logtype::ERROR, \"failed to create %s: %s\n\", TOMBSTONE_DIR, strerror(errno)))"];
"1000225" [label="(Identifier,original_si_code)"];
"1000238" [label="(MethodReturn,char*)"];
"1000170" [label="(Identifier,TOMBSTONE_DIR)"];
"1000228" [label="(Identifier,total_sleep_time_usec)"];
"1000149" [label="(Block,)"];
"1000180" [label="(Block,)"];
"1000108" [label="(MethodParameterIn,int* total_sleep_time_usec)"];
"1000129" [label="(Call,errno != EEXIST)"];
"1000182" [label="(Call,&log)"];
"1000227" [label="(Identifier,dump_sibling_threads)"];
"1000216" [label="(Call,*detach_failed = dump_crash(&log, pid, tid, signal, original_si_code, abort_msg_address,\n                              dump_sibling_threads, total_sleep_time_usec))"];
"1000184" [label="(Identifier,logtype::ERROR)"];
"1000156" -> "1000150"  [label="AST: "];
"1000156" -> "1000157"  [label="CFG: "];
"1000157" -> "1000156"  [label="AST: "];
"1000150" -> "1000156"  [label="CFG: "];
"1000156" -> "1000238"  [label="DDG: "];
"1000156" -> "1000150"  [label="DDG: "];
"1000129" -> "1000156"  [label="DDG: "];
"1000139" -> "1000156"  [label="DDG: "];
"1000129" -> "1000122"  [label="AST: "];
"1000129" -> "1000131"  [label="CFG: "];
"1000130" -> "1000129"  [label="AST: "];
"1000131" -> "1000129"  [label="AST: "];
"1000122" -> "1000129"  [label="CFG: "];
"1000129" -> "1000238"  [label="DDG: "];
"1000129" -> "1000238"  [label="DDG: "];
"1000129" -> "1000122"  [label="DDG: "];
"1000129" -> "1000122"  [label="DDG: "];
"1000129" -> "1000139"  [label="DDG: "];
"1000139" -> "1000133"  [label="AST: "];
"1000139" -> "1000140"  [label="CFG: "];
"1000140" -> "1000139"  [label="AST: "];
"1000133" -> "1000139"  [label="CFG: "];
"1000139" -> "1000238"  [label="DDG: "];
"1000139" -> "1000133"  [label="DDG: "];
"1000150" -> "1000149"  [label="AST: "];
"1000151" -> "1000150"  [label="AST: "];
"1000153" -> "1000150"  [label="AST: "];
"1000154" -> "1000150"  [label="AST: "];
"1000155" -> "1000150"  [label="AST: "];
"1000160" -> "1000150"  [label="CFG: "];
"1000150" -> "1000238"  [label="DDG: "];
"1000150" -> "1000238"  [label="DDG: "];
"1000150" -> "1000238"  [label="DDG: "];
"1000133" -> "1000150"  [label="DDG: "];
"1000133" -> "1000150"  [label="DDG: "];
"1000143" -> "1000150"  [label="DDG: "];
"1000150" -> "1000169"  [label="DDG: "];
"1000150" -> "1000181"  [label="DDG: "];
"1000150" -> "1000181"  [label="DDG: "];
"1000150" -> "1000191"  [label="DDG: "];
"1000150" -> "1000191"  [label="DDG: "];
"1000150" -> "1000219"  [label="DDG: "];
"1000169" -> "1000168"  [label="AST: "];
"1000169" -> "1000171"  [label="CFG: "];
"1000170" -> "1000169"  [label="AST: "];
"1000171" -> "1000169"  [label="AST: "];
"1000172" -> "1000169"  [label="CFG: "];
"1000169" -> "1000238"  [label="DDG: "];
"1000169" -> "1000168"  [label="DDG: "];
"1000169" -> "1000168"  [label="DDG: "];
"1000143" -> "1000169"  [label="DDG: "];
"1000168" -> "1000167"  [label="AST: "];
"1000168" -> "1000172"  [label="CFG: "];
"1000172" -> "1000168"  [label="AST: "];
"1000175" -> "1000168"  [label="CFG: "];
"1000183" -> "1000168"  [label="CFG: "];
"1000168" -> "1000238"  [label="DDG: "];
"1000168" -> "1000238"  [label="DDG: "];
"1000181" -> "1000180"  [label="AST: "];
"1000181" -> "1000185"  [label="CFG: "];
"1000182" -> "1000181"  [label="AST: "];
"1000184" -> "1000181"  [label="AST: "];
"1000185" -> "1000181"  [label="AST: "];
"1000188" -> "1000181"  [label="CFG: "];
"1000181" -> "1000238"  [label="DDG: "];
"1000181" -> "1000238"  [label="DDG: "];
"1000133" -> "1000181"  [label="DDG: "];
"1000133" -> "1000181"  [label="DDG: "];
"1000181" -> "1000191"  [label="DDG: "];
"1000181" -> "1000191"  [label="DDG: "];
"1000181" -> "1000219"  [label="DDG: "];
"1000191" -> "1000190"  [label="AST: "];
"1000191" -> "1000195"  [label="CFG: "];
"1000192" -> "1000191"  [label="AST: "];
"1000194" -> "1000191"  [label="AST: "];
"1000195" -> "1000191"  [label="AST: "];
"1000198" -> "1000191"  [label="CFG: "];
"1000191" -> "1000238"  [label="DDG: "];
"1000191" -> "1000238"  [label="DDG: "];
"1000191" -> "1000238"  [label="DDG: "];
"1000133" -> "1000191"  [label="DDG: "];
"1000133" -> "1000191"  [label="DDG: "];
"1000219" -> "1000216"  [label="AST: "];
"1000219" -> "1000228"  [label="CFG: "];
"1000220" -> "1000219"  [label="AST: "];
"1000222" -> "1000219"  [label="AST: "];
"1000223" -> "1000219"  [label="AST: "];
"1000224" -> "1000219"  [label="AST: "];
"1000225" -> "1000219"  [label="AST: "];
"1000226" -> "1000219"  [label="AST: "];
"1000227" -> "1000219"  [label="AST: "];
"1000228" -> "1000219"  [label="AST: "];
"1000216" -> "1000219"  [label="CFG: "];
"1000219" -> "1000238"  [label="DDG: "];
"1000219" -> "1000238"  [label="DDG: "];
"1000219" -> "1000238"  [label="DDG: "];
"1000219" -> "1000238"  [label="DDG: "];
"1000219" -> "1000238"  [label="DDG: "];
"1000219" -> "1000238"  [label="DDG: "];
"1000219" -> "1000238"  [label="DDG: "];
"1000219" -> "1000238"  [label="DDG: "];
"1000219" -> "1000216"  [label="DDG: "];
"1000219" -> "1000216"  [label="DDG: "];
"1000219" -> "1000216"  [label="DDG: "];
"1000219" -> "1000216"  [label="DDG: "];
"1000219" -> "1000216"  [label="DDG: "];
"1000219" -> "1000216"  [label="DDG: "];
"1000219" -> "1000216"  [label="DDG: "];
"1000219" -> "1000216"  [label="DDG: "];
"1000133" -> "1000219"  [label="DDG: "];
"1000101" -> "1000219"  [label="DDG: "];
"1000102" -> "1000219"  [label="DDG: "];
"1000103" -> "1000219"  [label="DDG: "];
"1000104" -> "1000219"  [label="DDG: "];
"1000105" -> "1000219"  [label="DDG: "];
"1000106" -> "1000219"  [label="DDG: "];
"1000108" -> "1000219"  [label="DDG: "];
"1000216" -> "1000109"  [label="AST: "];
"1000217" -> "1000216"  [label="AST: "];
"1000230" -> "1000216"  [label="CFG: "];
"1000216" -> "1000238"  [label="DDG: "];
"1000216" -> "1000238"  [label="DDG: "];
}
