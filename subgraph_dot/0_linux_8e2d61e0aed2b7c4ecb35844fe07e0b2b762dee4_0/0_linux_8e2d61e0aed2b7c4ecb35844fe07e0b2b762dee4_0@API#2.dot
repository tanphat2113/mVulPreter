digraph "0_linux_8e2d61e0aed2b7c4ecb35844fe07e0b2b762dee4_0@API" {
"1000576" [label="(Call,kfree(sctp_ep_hashtable))"];
"1000387" [label="(Call,!sctp_ep_hashtable)"];
"1000378" [label="(Call,sctp_ep_hashtable =\n\t\tkmalloc(64 * sizeof(struct sctp_hashbucket), GFP_KERNEL))"];
"1000380" [label="(Call,kmalloc(64 * sizeof(struct sctp_hashbucket), GFP_KERNEL))"];
"1000381" [label="(Call,64 * sizeof(struct sctp_hashbucket))"];
"1000158" [label="(Call,percpu_counter_init(&sctp_sockets_allocated, 0, GFP_KERNEL))"];
"1000162" [label="(Identifier,GFP_KERNEL)"];
"1000577" [label="(Identifier,sctp_ep_hashtable)"];
"1000589" [label="(Call,percpu_counter_destroy(&sctp_sockets_allocated))"];
"1000156" [label="(Call,status = percpu_counter_init(&sctp_sockets_allocated, 0, GFP_KERNEL))"];
"1000387" [label="(Call,!sctp_ep_hashtable)"];
"1000599" [label="(MethodReturn,static __init int)"];
"1000383" [label="(Call,sizeof(struct sctp_hashbucket))"];
"1000380" [label="(Call,kmalloc(64 * sizeof(struct sctp_hashbucket), GFP_KERNEL))"];
"1000112" [label="(Block,)"];
"1000576" [label="(Call,kfree(sctp_ep_hashtable))"];
"1000578" [label="(JumpTarget,err_ehash_alloc:)"];
"1000388" [label="(Identifier,sctp_ep_hashtable)"];
"1000159" [label="(Call,&sctp_sockets_allocated)"];
"1000161" [label="(Literal,0)"];
"1000391" [label="(Literal,\"Failed endpoint_hash alloc\n\")"];
"1000378" [label="(Call,sctp_ep_hashtable =\n\t\tkmalloc(64 * sizeof(struct sctp_hashbucket), GFP_KERNEL))"];
"1000379" [label="(Identifier,sctp_ep_hashtable)"];
"1000158" [label="(Call,percpu_counter_init(&sctp_sockets_allocated, 0, GFP_KERNEL))"];
"1000385" [label="(Identifier,GFP_KERNEL)"];
"1000381" [label="(Call,64 * sizeof(struct sctp_hashbucket))"];
"1000386" [label="(ControlStructure,if (!sctp_ep_hashtable))"];
"1000382" [label="(Literal,64)"];
"1000399" [label="(Identifier,i)"];
"1000576" -> "1000112"  [label="AST: "];
"1000576" -> "1000577"  [label="CFG: "];
"1000577" -> "1000576"  [label="AST: "];
"1000578" -> "1000576"  [label="CFG: "];
"1000576" -> "1000599"  [label="DDG: sctp_ep_hashtable"];
"1000576" -> "1000599"  [label="DDG: kfree(sctp_ep_hashtable)"];
"1000387" -> "1000576"  [label="DDG: sctp_ep_hashtable"];
"1000387" -> "1000386"  [label="AST: "];
"1000387" -> "1000388"  [label="CFG: "];
"1000388" -> "1000387"  [label="AST: "];
"1000391" -> "1000387"  [label="CFG: "];
"1000399" -> "1000387"  [label="CFG: "];
"1000387" -> "1000599"  [label="DDG: sctp_ep_hashtable"];
"1000387" -> "1000599"  [label="DDG: !sctp_ep_hashtable"];
"1000378" -> "1000387"  [label="DDG: sctp_ep_hashtable"];
"1000378" -> "1000112"  [label="AST: "];
"1000378" -> "1000380"  [label="CFG: "];
"1000379" -> "1000378"  [label="AST: "];
"1000380" -> "1000378"  [label="AST: "];
"1000388" -> "1000378"  [label="CFG: "];
"1000378" -> "1000599"  [label="DDG: kmalloc(64 * sizeof(struct sctp_hashbucket), GFP_KERNEL)"];
"1000380" -> "1000378"  [label="DDG: 64 * sizeof(struct sctp_hashbucket)"];
"1000380" -> "1000378"  [label="DDG: GFP_KERNEL"];
"1000380" -> "1000385"  [label="CFG: "];
"1000381" -> "1000380"  [label="AST: "];
"1000385" -> "1000380"  [label="AST: "];
"1000380" -> "1000599"  [label="DDG: 64 * sizeof(struct sctp_hashbucket)"];
"1000380" -> "1000599"  [label="DDG: GFP_KERNEL"];
"1000381" -> "1000380"  [label="DDG: 64"];
"1000158" -> "1000380"  [label="DDG: GFP_KERNEL"];
"1000381" -> "1000383"  [label="CFG: "];
"1000382" -> "1000381"  [label="AST: "];
"1000383" -> "1000381"  [label="AST: "];
"1000385" -> "1000381"  [label="CFG: "];
"1000158" -> "1000156"  [label="AST: "];
"1000158" -> "1000162"  [label="CFG: "];
"1000159" -> "1000158"  [label="AST: "];
"1000161" -> "1000158"  [label="AST: "];
"1000162" -> "1000158"  [label="AST: "];
"1000156" -> "1000158"  [label="CFG: "];
"1000158" -> "1000599"  [label="DDG: &sctp_sockets_allocated"];
"1000158" -> "1000599"  [label="DDG: GFP_KERNEL"];
"1000158" -> "1000156"  [label="DDG: &sctp_sockets_allocated"];
"1000158" -> "1000156"  [label="DDG: 0"];
"1000158" -> "1000156"  [label="DDG: GFP_KERNEL"];
"1000158" -> "1000589"  [label="DDG: &sctp_sockets_allocated"];
}
