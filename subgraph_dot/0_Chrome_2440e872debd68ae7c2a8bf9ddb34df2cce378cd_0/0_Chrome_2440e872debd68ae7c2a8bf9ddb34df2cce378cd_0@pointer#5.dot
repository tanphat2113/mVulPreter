digraph "0_Chrome_2440e872debd68ae7c2a8bf9ddb34df2cce378cd_0@pointer" {
"1000114" [label="(Call,DCHECK(username))"];
"1000106" [label="(MethodParameterIn,BSTR* username)"];
"1000268" [label="(Call,CreateNewUser(\n      OSUserManager::Get(), found_username, local_password.c_str(),\n      local_fullname.c_str(), comment.c_str(),\n      /*add_to_users_group=*/true, kMaxUsernameAttempts, username, sid))"];
"1000266" [label="(Call,hr = CreateNewUser(\n      OSUserManager::Get(), found_username, local_password.c_str(),\n      local_fullname.c_str(), comment.c_str(),\n      /*add_to_users_group=*/true, kMaxUsernameAttempts, username, sid))"];
"1000279" [label="(Call,hr == HRESULT_FROM_WIN32(NERR_UserExists))"];
"1000301" [label="(Return,return hr;)"];
"1000305" [label="(Return,return hr;)"];
"1000293" [label="(Call,found_username\n                 << \"'. Maximum attempts reached.\")"];
"1000291" [label="(Call,\"\\\" << found_username\n                 << \"'. Maximum attempts reached.\")"];
"1000289" [label="(Call,found_domain << \"\\\" << found_username\n                 << \"'. Maximum attempts reached.\")"];
"1000287" [label="(Call,\"Could not find a new username based on desired username '\"\n                 << found_domain << \"\\\" << found_username\n                 << \"'. Maximum attempts reached.\")"];
"1000284" [label="(Call,LOGFN(ERROR) << \"Could not find a new username based on desired username '\"\n                 << found_domain << \"\\\" << found_username\n                 << \"'. Maximum attempts reached.\")"];
"1000268" [label="(Call,CreateNewUser(\n      OSUserManager::Get(), found_username, local_password.c_str(),\n      local_fullname.c_str(), comment.c_str(),\n      /*add_to_users_group=*/true, kMaxUsernameAttempts, username, sid))"];
"1000274" [label="(Identifier,true)"];
"1000269" [label="(Call,OSUserManager::Get())"];
"1000273" [label="(Call,comment.c_str())"];
"1000295" [label="(Literal,\"'. Maximum attempts reached.\")"];
"1000272" [label="(Call,local_fullname.c_str())"];
"1000302" [label="(Identifier,hr)"];
"1000288" [label="(Literal,\"Could not find a new username based on desired username '\")"];
"1000115" [label="(Identifier,username)"];
"1000294" [label="(Identifier,found_username)"];
"1000279" [label="(Call,hr == HRESULT_FROM_WIN32(NERR_UserExists))"];
"1000280" [label="(Identifier,hr)"];
"1000277" [label="(Identifier,sid)"];
"1000271" [label="(Call,local_password.c_str())"];
"1000266" [label="(Call,hr = CreateNewUser(\n      OSUserManager::Get(), found_username, local_password.c_str(),\n      local_fullname.c_str(), comment.c_str(),\n      /*add_to_users_group=*/true, kMaxUsernameAttempts, username, sid))"];
"1000286" [label="(Identifier,ERROR)"];
"1000109" [label="(Block,)"];
"1000107" [label="(MethodParameterIn,BSTR* sid)"];
"1000291" [label="(Call,\"\\\" << found_username\n                 << \"'. Maximum attempts reached.\")"];
"1000292" [label="(Literal,\"\\\")"];
"1000140" [label="(Call,MakeUsernameForAccount(result, &gaia_id, found_username,\n                         base::size(found_username), found_domain,\n                         base::size(found_domain), found_sid,\n                         base::size(found_sid), &is_consumer_account))"];
"1000275" [label="(Identifier,kMaxUsernameAttempts)"];
"1000281" [label="(Call,HRESULT_FROM_WIN32(NERR_UserExists))"];
"1000283" [label="(Block,)"];
"1000290" [label="(Identifier,found_domain)"];
"1000304" [label="(Identifier,found_domain)"];
"1000270" [label="(Identifier,found_username)"];
"1000278" [label="(ControlStructure,if (hr == HRESULT_FROM_WIN32(NERR_UserExists)))"];
"1000305" [label="(Return,return hr;)"];
"1000289" [label="(Call,found_domain << \"\\\" << found_username\n                 << \"'. Maximum attempts reached.\")"];
"1000307" [label="(MethodReturn,HRESULT)"];
"1000301" [label="(Return,return hr;)"];
"1000114" [label="(Call,DCHECK(username))"];
"1000284" [label="(Call,LOGFN(ERROR) << \"Could not find a new username based on desired username '\"\n                 << found_domain << \"\\\" << found_username\n                 << \"'. Maximum attempts reached.\")"];
"1000287" [label="(Call,\"Could not find a new username based on desired username '\"\n                 << found_domain << \"\\\" << found_username\n                 << \"'. Maximum attempts reached.\")"];
"1000285" [label="(Call,LOGFN(ERROR))"];
"1000120" [label="(Call,DCHECK(sid))"];
"1000106" [label="(MethodParameterIn,BSTR* username)"];
"1000276" [label="(Identifier,username)"];
"1000267" [label="(Identifier,hr)"];
"1000306" [label="(Identifier,hr)"];
"1000298" [label="(Identifier,error_text)"];
"1000293" [label="(Call,found_username\n                 << \"'. Maximum attempts reached.\")"];
"1000117" [label="(Identifier,sid)"];
"1000114" -> "1000109"  [label="AST: "];
"1000114" -> "1000115"  [label="CFG: "];
"1000115" -> "1000114"  [label="AST: "];
"1000117" -> "1000114"  [label="CFG: "];
"1000114" -> "1000307"  [label="DDG: "];
"1000114" -> "1000307"  [label="DDG: "];
"1000106" -> "1000114"  [label="DDG: "];
"1000114" -> "1000268"  [label="DDG: "];
"1000106" -> "1000103"  [label="AST: "];
"1000106" -> "1000307"  [label="DDG: "];
"1000106" -> "1000268"  [label="DDG: "];
"1000268" -> "1000266"  [label="AST: "];
"1000268" -> "1000277"  [label="CFG: "];
"1000269" -> "1000268"  [label="AST: "];
"1000270" -> "1000268"  [label="AST: "];
"1000271" -> "1000268"  [label="AST: "];
"1000272" -> "1000268"  [label="AST: "];
"1000273" -> "1000268"  [label="AST: "];
"1000274" -> "1000268"  [label="AST: "];
"1000275" -> "1000268"  [label="AST: "];
"1000276" -> "1000268"  [label="AST: "];
"1000277" -> "1000268"  [label="AST: "];
"1000266" -> "1000268"  [label="CFG: "];
"1000268" -> "1000307"  [label="DDG: "];
"1000268" -> "1000307"  [label="DDG: "];
"1000268" -> "1000307"  [label="DDG: "];
"1000268" -> "1000307"  [label="DDG: "];
"1000268" -> "1000307"  [label="DDG: "];
"1000268" -> "1000307"  [label="DDG: "];
"1000268" -> "1000307"  [label="DDG: "];
"1000268" -> "1000307"  [label="DDG: "];
"1000268" -> "1000307"  [label="DDG: "];
"1000268" -> "1000266"  [label="DDG: "];
"1000268" -> "1000266"  [label="DDG: "];
"1000268" -> "1000266"  [label="DDG: "];
"1000268" -> "1000266"  [label="DDG: "];
"1000268" -> "1000266"  [label="DDG: "];
"1000268" -> "1000266"  [label="DDG: "];
"1000268" -> "1000266"  [label="DDG: "];
"1000268" -> "1000266"  [label="DDG: "];
"1000268" -> "1000266"  [label="DDG: "];
"1000140" -> "1000268"  [label="DDG: "];
"1000120" -> "1000268"  [label="DDG: "];
"1000107" -> "1000268"  [label="DDG: "];
"1000268" -> "1000293"  [label="DDG: "];
"1000266" -> "1000109"  [label="AST: "];
"1000267" -> "1000266"  [label="AST: "];
"1000280" -> "1000266"  [label="CFG: "];
"1000266" -> "1000307"  [label="DDG: "];
"1000266" -> "1000279"  [label="DDG: "];
"1000279" -> "1000278"  [label="AST: "];
"1000279" -> "1000281"  [label="CFG: "];
"1000280" -> "1000279"  [label="AST: "];
"1000281" -> "1000279"  [label="AST: "];
"1000286" -> "1000279"  [label="CFG: "];
"1000304" -> "1000279"  [label="CFG: "];
"1000279" -> "1000307"  [label="DDG: "];
"1000279" -> "1000307"  [label="DDG: "];
"1000279" -> "1000307"  [label="DDG: "];
"1000281" -> "1000279"  [label="DDG: "];
"1000279" -> "1000301"  [label="DDG: "];
"1000279" -> "1000305"  [label="DDG: "];
"1000301" -> "1000283"  [label="AST: "];
"1000301" -> "1000302"  [label="CFG: "];
"1000302" -> "1000301"  [label="AST: "];
"1000307" -> "1000301"  [label="CFG: "];
"1000301" -> "1000307"  [label="DDG: "];
"1000302" -> "1000301"  [label="DDG: "];
"1000305" -> "1000109"  [label="AST: "];
"1000305" -> "1000306"  [label="CFG: "];
"1000306" -> "1000305"  [label="AST: "];
"1000307" -> "1000305"  [label="CFG: "];
"1000305" -> "1000307"  [label="DDG: "];
"1000306" -> "1000305"  [label="DDG: "];
"1000293" -> "1000291"  [label="AST: "];
"1000293" -> "1000295"  [label="CFG: "];
"1000294" -> "1000293"  [label="AST: "];
"1000295" -> "1000293"  [label="AST: "];
"1000291" -> "1000293"  [label="CFG: "];
"1000293" -> "1000307"  [label="DDG: "];
"1000293" -> "1000291"  [label="DDG: "];
"1000293" -> "1000291"  [label="DDG: "];
"1000291" -> "1000289"  [label="AST: "];
"1000292" -> "1000291"  [label="AST: "];
"1000289" -> "1000291"  [label="CFG: "];
"1000291" -> "1000307"  [label="DDG: "];
"1000291" -> "1000289"  [label="DDG: "];
"1000291" -> "1000289"  [label="DDG: "];
"1000289" -> "1000287"  [label="AST: "];
"1000290" -> "1000289"  [label="AST: "];
"1000287" -> "1000289"  [label="CFG: "];
"1000289" -> "1000307"  [label="DDG: "];
"1000289" -> "1000307"  [label="DDG: "];
"1000289" -> "1000287"  [label="DDG: "];
"1000289" -> "1000287"  [label="DDG: "];
"1000140" -> "1000289"  [label="DDG: "];
"1000287" -> "1000284"  [label="AST: "];
"1000288" -> "1000287"  [label="AST: "];
"1000284" -> "1000287"  [label="CFG: "];
"1000287" -> "1000307"  [label="DDG: "];
"1000287" -> "1000284"  [label="DDG: "];
"1000287" -> "1000284"  [label="DDG: "];
"1000284" -> "1000283"  [label="AST: "];
"1000285" -> "1000284"  [label="AST: "];
"1000298" -> "1000284"  [label="CFG: "];
"1000284" -> "1000307"  [label="DDG: "];
"1000284" -> "1000307"  [label="DDG: "];
"1000284" -> "1000307"  [label="DDG: "];
"1000285" -> "1000284"  [label="DDG: "];
}
