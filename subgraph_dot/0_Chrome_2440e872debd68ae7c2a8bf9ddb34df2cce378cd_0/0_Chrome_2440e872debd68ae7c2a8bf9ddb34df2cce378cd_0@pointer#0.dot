digraph "0_Chrome_2440e872debd68ae7c2a8bf9ddb34df2cce378cd_0@pointer" {
"1000104" [label="(MethodParameterIn,const base::DictionaryValue* result)"];
"1000129" [label="(Call,GetDictString(result, kKeyPassword))"];
"1000127" [label="(Call,local_password = GetDictString(result, kKeyPassword))"];
"1000140" [label="(Call,MakeUsernameForAccount(result, &gaia_id, found_username,\n                         base::size(found_username), found_domain,\n                         base::size(found_domain), found_sid,\n                         base::size(found_sid), &is_consumer_account))"];
"1000196" [label="(Call,ValidateExistingUser(found_username, found_domain, found_sid,\n                                      error_text))"];
"1000194" [label="(Call,hr = ValidateExistingUser(found_username, found_domain, found_sid,\n                                      error_text))"];
"1000202" [label="(Call,FAILED(hr))"];
"1000210" [label="(Call,putHR(hr))"];
"1000208" [label="(Call,\"ValidateExistingUser hr=\" << putHR(hr))"];
"1000205" [label="(Call,LOGFN(ERROR) << \"ValidateExistingUser hr=\" << putHR(hr))"];
"1000212" [label="(Return,return hr;)"];
"1000214" [label="(Call,SysAllocString(found_username))"];
"1000216" [label="(Call,SysAllocString(found_domain))"];
"1000218" [label="(Call,SysAllocString(found_sid))"];
"1000261" [label="(Call,GetDictString(result, kKeyFullname))"];
"1000259" [label="(Call,local_fullname = GetDictString(result, kKeyFullname))"];
"1000268" [label="(Call,CreateNewUser(\n      OSUserManager::Get(), found_username, local_password.c_str(),\n      local_fullname.c_str(), comment.c_str(),\n      /*add_to_users_group=*/true, kMaxUsernameAttempts, username, sid))"];
"1000266" [label="(Call,hr = CreateNewUser(\n      OSUserManager::Get(), found_username, local_password.c_str(),\n      local_fullname.c_str(), comment.c_str(),\n      /*add_to_users_group=*/true, kMaxUsernameAttempts, username, sid))"];
"1000279" [label="(Call,hr == HRESULT_FROM_WIN32(NERR_UserExists))"];
"1000301" [label="(Return,return hr;)"];
"1000305" [label="(Return,return hr;)"];
"1000293" [label="(Call,found_username\n                 << \"'. Maximum attempts reached.\")"];
"1000291" [label="(Call,\"\\\" << found_username\n                 << \"'. Maximum attempts reached.\")"];
"1000289" [label="(Call,found_domain << \"\\\" << found_username\n                 << \"'. Maximum attempts reached.\")"];
"1000287" [label="(Call,\"Could not find a new username based on desired username '\"\n                 << found_domain << \"\\\" << found_username\n                 << \"'. Maximum attempts reached.\")"];
"1000284" [label="(Call,LOGFN(ERROR) << \"Could not find a new username based on desired username '\"\n                 << found_domain << \"\\\" << found_username\n                 << \"'. Maximum attempts reached.\")"];
"1000303" [label="(Call,SysAllocString(found_domain))"];
"1000219" [label="(Identifier,found_sid)"];
"1000263" [label="(Identifier,kKeyFullname)"];
"1000274" [label="(Identifier,true)"];
"1000150" [label="(Identifier,found_sid)"];
"1000272" [label="(Call,local_fullname.c_str())"];
"1000303" [label="(Call,SysAllocString(found_domain))"];
"1000213" [label="(Identifier,hr)"];
"1000280" [label="(Identifier,hr)"];
"1000199" [label="(Identifier,found_sid)"];
"1000266" [label="(Call,hr = CreateNewUser(\n      OSUserManager::Get(), found_username, local_password.c_str(),\n      local_fullname.c_str(), comment.c_str(),\n      /*add_to_users_group=*/true, kMaxUsernameAttempts, username, sid))"];
"1000192" [label="(Block,)"];
"1000107" [label="(MethodParameterIn,BSTR* sid)"];
"1000291" [label="(Call,\"\\\" << found_username\n                 << \"'. Maximum attempts reached.\")"];
"1000292" [label="(Literal,\"\\\")"];
"1000275" [label="(Identifier,kMaxUsernameAttempts)"];
"1000281" [label="(Call,HRESULT_FROM_WIN32(NERR_UserExists))"];
"1000196" [label="(Call,ValidateExistingUser(found_username, found_domain, found_sid,\n                                      error_text))"];
"1000304" [label="(Identifier,found_domain)"];
"1000270" [label="(Identifier,found_username)"];
"1000278" [label="(ControlStructure,if (hr == HRESULT_FROM_WIN32(NERR_UserExists)))"];
"1000147" [label="(Identifier,found_domain)"];
"1000212" [label="(Return,return hr;)"];
"1000118" [label="(Call,DCHECK(error_text))"];
"1000306" [label="(Identifier,hr)"];
"1000293" [label="(Call,found_username\n                 << \"'. Maximum attempts reached.\")"];
"1000104" [label="(MethodParameterIn,const base::DictionaryValue* result)"];
"1000288" [label="(Literal,\"Could not find a new username based on desired username '\")"];
"1000261" [label="(Call,GetDictString(result, kKeyFullname))"];
"1000142" [label="(Call,&gaia_id)"];
"1000127" [label="(Call,local_password = GetDictString(result, kKeyPassword))"];
"1000294" [label="(Identifier,found_username)"];
"1000277" [label="(Identifier,sid)"];
"1000286" [label="(Identifier,ERROR)"];
"1000148" [label="(Call,base::size(found_domain))"];
"1000203" [label="(Identifier,hr)"];
"1000211" [label="(Identifier,hr)"];
"1000140" [label="(Call,MakeUsernameForAccount(result, &gaia_id, found_username,\n                         base::size(found_username), found_domain,\n                         base::size(found_domain), found_sid,\n                         base::size(found_sid), &is_consumer_account))"];
"1000283" [label="(Block,)"];
"1000205" [label="(Call,LOGFN(ERROR) << \"ValidateExistingUser hr=\" << putHR(hr))"];
"1000290" [label="(Identifier,found_domain)"];
"1000131" [label="(Identifier,kKeyPassword)"];
"1000260" [label="(Identifier,local_fullname)"];
"1000307" [label="(MethodReturn,HRESULT)"];
"1000141" [label="(Identifier,result)"];
"1000284" [label="(Call,LOGFN(ERROR) << \"Could not find a new username based on desired username '\"\n                 << found_domain << \"\\\" << found_username\n                 << \"'. Maximum attempts reached.\")"];
"1000151" [label="(Call,base::size(found_sid))"];
"1000287" [label="(Call,\"Could not find a new username based on desired username '\"\n                 << found_domain << \"\\\" << found_username\n                 << \"'. Maximum attempts reached.\")"];
"1000259" [label="(Call,local_fullname = GetDictString(result, kKeyFullname))"];
"1000221" [label="(Identifier,S_OK)"];
"1000207" [label="(Identifier,ERROR)"];
"1000267" [label="(Identifier,hr)"];
"1000298" [label="(Identifier,error_text)"];
"1000268" [label="(Call,CreateNewUser(\n      OSUserManager::Get(), found_username, local_password.c_str(),\n      local_fullname.c_str(), comment.c_str(),\n      /*add_to_users_group=*/true, kMaxUsernameAttempts, username, sid))"];
"1000217" [label="(Identifier,found_domain)"];
"1000157" [label="(Call,MdmEnrollmentEnabled())"];
"1000129" [label="(Call,GetDictString(result, kKeyPassword))"];
"1000128" [label="(Identifier,local_password)"];
"1000295" [label="(Literal,\"'. Maximum attempts reached.\")"];
"1000302" [label="(Identifier,hr)"];
"1000215" [label="(Identifier,found_username)"];
"1000201" [label="(ControlStructure,if (FAILED(hr)))"];
"1000279" [label="(Call,hr == HRESULT_FROM_WIN32(NERR_UserExists))"];
"1000130" [label="(Identifier,result)"];
"1000109" [label="(Block,)"];
"1000209" [label="(Literal,\"ValidateExistingUser hr=\")"];
"1000200" [label="(Identifier,error_text)"];
"1000206" [label="(Call,LOGFN(ERROR))"];
"1000195" [label="(Identifier,hr)"];
"1000153" [label="(Call,&is_consumer_account)"];
"1000218" [label="(Call,SysAllocString(found_sid))"];
"1000120" [label="(Call,DCHECK(sid))"];
"1000144" [label="(Identifier,found_username)"];
"1000137" [label="(Identifier,is_consumer_account)"];
"1000202" [label="(Call,FAILED(hr))"];
"1000198" [label="(Identifier,found_domain)"];
"1000197" [label="(Identifier,found_username)"];
"1000269" [label="(Call,OSUserManager::Get())"];
"1000273" [label="(Call,comment.c_str())"];
"1000194" [label="(Call,hr = ValidateExistingUser(found_username, found_domain, found_sid,\n                                      error_text))"];
"1000108" [label="(MethodParameterIn,BSTR* error_text)"];
"1000271" [label="(Call,local_password.c_str())"];
"1000204" [label="(Block,)"];
"1000214" [label="(Call,SysAllocString(found_username))"];
"1000216" [label="(Call,SysAllocString(found_domain))"];
"1000262" [label="(Identifier,result)"];
"1000210" [label="(Call,putHR(hr))"];
"1000289" [label="(Call,found_domain << \"\\\" << found_username\n                 << \"'. Maximum attempts reached.\")"];
"1000305" [label="(Return,return hr;)"];
"1000301" [label="(Return,return hr;)"];
"1000208" [label="(Call,\"ValidateExistingUser hr=\" << putHR(hr))"];
"1000114" [label="(Call,DCHECK(username))"];
"1000145" [label="(Call,base::size(found_username))"];
"1000285" [label="(Call,LOGFN(ERROR))"];
"1000276" [label="(Identifier,username)"];
"1000106" [label="(MethodParameterIn,BSTR* username)"];
"1000104" -> "1000103"  [label="AST: "];
"1000104" -> "1000307"  [label="DDG: "];
"1000104" -> "1000129"  [label="DDG: "];
"1000104" -> "1000140"  [label="DDG: "];
"1000104" -> "1000261"  [label="DDG: "];
"1000129" -> "1000127"  [label="AST: "];
"1000129" -> "1000131"  [label="CFG: "];
"1000130" -> "1000129"  [label="AST: "];
"1000131" -> "1000129"  [label="AST: "];
"1000127" -> "1000129"  [label="CFG: "];
"1000129" -> "1000307"  [label="DDG: "];
"1000129" -> "1000127"  [label="DDG: "];
"1000129" -> "1000127"  [label="DDG: "];
"1000129" -> "1000140"  [label="DDG: "];
"1000127" -> "1000109"  [label="AST: "];
"1000128" -> "1000127"  [label="AST: "];
"1000137" -> "1000127"  [label="CFG: "];
"1000127" -> "1000307"  [label="DDG: "];
"1000127" -> "1000307"  [label="DDG: "];
"1000140" -> "1000109"  [label="AST: "];
"1000140" -> "1000153"  [label="CFG: "];
"1000141" -> "1000140"  [label="AST: "];
"1000142" -> "1000140"  [label="AST: "];
"1000144" -> "1000140"  [label="AST: "];
"1000145" -> "1000140"  [label="AST: "];
"1000147" -> "1000140"  [label="AST: "];
"1000148" -> "1000140"  [label="AST: "];
"1000150" -> "1000140"  [label="AST: "];
"1000151" -> "1000140"  [label="AST: "];
"1000153" -> "1000140"  [label="AST: "];
"1000157" -> "1000140"  [label="CFG: "];
"1000140" -> "1000307"  [label="DDG: "];
"1000140" -> "1000307"  [label="DDG: "];
"1000140" -> "1000307"  [label="DDG: "];
"1000140" -> "1000307"  [label="DDG: "];
"1000140" -> "1000307"  [label="DDG: "];
"1000140" -> "1000307"  [label="DDG: "];
"1000140" -> "1000307"  [label="DDG: "];
"1000140" -> "1000307"  [label="DDG: "];
"1000140" -> "1000307"  [label="DDG: "];
"1000140" -> "1000307"  [label="DDG: "];
"1000145" -> "1000140"  [label="DDG: "];
"1000148" -> "1000140"  [label="DDG: "];
"1000151" -> "1000140"  [label="DDG: "];
"1000140" -> "1000196"  [label="DDG: "];
"1000140" -> "1000196"  [label="DDG: "];
"1000140" -> "1000196"  [label="DDG: "];
"1000140" -> "1000261"  [label="DDG: "];
"1000140" -> "1000268"  [label="DDG: "];
"1000140" -> "1000289"  [label="DDG: "];
"1000140" -> "1000303"  [label="DDG: "];
"1000196" -> "1000194"  [label="AST: "];
"1000196" -> "1000200"  [label="CFG: "];
"1000197" -> "1000196"  [label="AST: "];
"1000198" -> "1000196"  [label="AST: "];
"1000199" -> "1000196"  [label="AST: "];
"1000200" -> "1000196"  [label="AST: "];
"1000194" -> "1000196"  [label="CFG: "];
"1000196" -> "1000307"  [label="DDG: "];
"1000196" -> "1000307"  [label="DDG: "];
"1000196" -> "1000307"  [label="DDG: "];
"1000196" -> "1000307"  [label="DDG: "];
"1000196" -> "1000194"  [label="DDG: "];
"1000196" -> "1000194"  [label="DDG: "];
"1000196" -> "1000194"  [label="DDG: "];
"1000196" -> "1000194"  [label="DDG: "];
"1000118" -> "1000196"  [label="DDG: "];
"1000108" -> "1000196"  [label="DDG: "];
"1000196" -> "1000214"  [label="DDG: "];
"1000196" -> "1000216"  [label="DDG: "];
"1000196" -> "1000218"  [label="DDG: "];
"1000194" -> "1000192"  [label="AST: "];
"1000195" -> "1000194"  [label="AST: "];
"1000203" -> "1000194"  [label="CFG: "];
"1000194" -> "1000307"  [label="DDG: "];
"1000194" -> "1000202"  [label="DDG: "];
"1000202" -> "1000201"  [label="AST: "];
"1000202" -> "1000203"  [label="CFG: "];
"1000203" -> "1000202"  [label="AST: "];
"1000207" -> "1000202"  [label="CFG: "];
"1000215" -> "1000202"  [label="CFG: "];
"1000202" -> "1000307"  [label="DDG: "];
"1000202" -> "1000307"  [label="DDG: "];
"1000202" -> "1000210"  [label="DDG: "];
"1000210" -> "1000208"  [label="AST: "];
"1000210" -> "1000211"  [label="CFG: "];
"1000211" -> "1000210"  [label="AST: "];
"1000208" -> "1000210"  [label="CFG: "];
"1000210" -> "1000307"  [label="DDG: "];
"1000210" -> "1000208"  [label="DDG: "];
"1000210" -> "1000212"  [label="DDG: "];
"1000208" -> "1000205"  [label="AST: "];
"1000209" -> "1000208"  [label="AST: "];
"1000205" -> "1000208"  [label="CFG: "];
"1000208" -> "1000307"  [label="DDG: "];
"1000208" -> "1000205"  [label="DDG: "];
"1000208" -> "1000205"  [label="DDG: "];
"1000205" -> "1000204"  [label="AST: "];
"1000206" -> "1000205"  [label="AST: "];
"1000213" -> "1000205"  [label="CFG: "];
"1000205" -> "1000307"  [label="DDG: "];
"1000205" -> "1000307"  [label="DDG: "];
"1000205" -> "1000307"  [label="DDG: "];
"1000206" -> "1000205"  [label="DDG: "];
"1000212" -> "1000204"  [label="AST: "];
"1000212" -> "1000213"  [label="CFG: "];
"1000213" -> "1000212"  [label="AST: "];
"1000307" -> "1000212"  [label="CFG: "];
"1000212" -> "1000307"  [label="DDG: "];
"1000213" -> "1000212"  [label="DDG: "];
"1000214" -> "1000192"  [label="AST: "];
"1000214" -> "1000215"  [label="CFG: "];
"1000215" -> "1000214"  [label="AST: "];
"1000217" -> "1000214"  [label="CFG: "];
"1000214" -> "1000307"  [label="DDG: "];
"1000214" -> "1000307"  [label="DDG: "];
"1000216" -> "1000192"  [label="AST: "];
"1000216" -> "1000217"  [label="CFG: "];
"1000217" -> "1000216"  [label="AST: "];
"1000219" -> "1000216"  [label="CFG: "];
"1000216" -> "1000307"  [label="DDG: "];
"1000216" -> "1000307"  [label="DDG: "];
"1000218" -> "1000192"  [label="AST: "];
"1000218" -> "1000219"  [label="CFG: "];
"1000219" -> "1000218"  [label="AST: "];
"1000221" -> "1000218"  [label="CFG: "];
"1000218" -> "1000307"  [label="DDG: "];
"1000218" -> "1000307"  [label="DDG: "];
"1000261" -> "1000259"  [label="AST: "];
"1000261" -> "1000263"  [label="CFG: "];
"1000262" -> "1000261"  [label="AST: "];
"1000263" -> "1000261"  [label="AST: "];
"1000259" -> "1000261"  [label="CFG: "];
"1000261" -> "1000307"  [label="DDG: "];
"1000261" -> "1000307"  [label="DDG: "];
"1000261" -> "1000259"  [label="DDG: "];
"1000261" -> "1000259"  [label="DDG: "];
"1000259" -> "1000109"  [label="AST: "];
"1000260" -> "1000259"  [label="AST: "];
"1000267" -> "1000259"  [label="CFG: "];
"1000259" -> "1000307"  [label="DDG: "];
"1000259" -> "1000307"  [label="DDG: "];
"1000268" -> "1000266"  [label="AST: "];
"1000268" -> "1000277"  [label="CFG: "];
"1000269" -> "1000268"  [label="AST: "];
"1000270" -> "1000268"  [label="AST: "];
"1000271" -> "1000268"  [label="AST: "];
"1000272" -> "1000268"  [label="AST: "];
"1000273" -> "1000268"  [label="AST: "];
"1000274" -> "1000268"  [label="AST: "];
"1000275" -> "1000268"  [label="AST: "];
"1000276" -> "1000268"  [label="AST: "];
"1000277" -> "1000268"  [label="AST: "];
"1000266" -> "1000268"  [label="CFG: "];
"1000268" -> "1000307"  [label="DDG: "];
"1000268" -> "1000307"  [label="DDG: "];
"1000268" -> "1000307"  [label="DDG: "];
"1000268" -> "1000307"  [label="DDG: "];
"1000268" -> "1000307"  [label="DDG: "];
"1000268" -> "1000307"  [label="DDG: "];
"1000268" -> "1000307"  [label="DDG: "];
"1000268" -> "1000307"  [label="DDG: "];
"1000268" -> "1000307"  [label="DDG: "];
"1000268" -> "1000266"  [label="DDG: "];
"1000268" -> "1000266"  [label="DDG: "];
"1000268" -> "1000266"  [label="DDG: "];
"1000268" -> "1000266"  [label="DDG: "];
"1000268" -> "1000266"  [label="DDG: "];
"1000268" -> "1000266"  [label="DDG: "];
"1000268" -> "1000266"  [label="DDG: "];
"1000268" -> "1000266"  [label="DDG: "];
"1000268" -> "1000266"  [label="DDG: "];
"1000114" -> "1000268"  [label="DDG: "];
"1000106" -> "1000268"  [label="DDG: "];
"1000120" -> "1000268"  [label="DDG: "];
"1000107" -> "1000268"  [label="DDG: "];
"1000268" -> "1000293"  [label="DDG: "];
"1000266" -> "1000109"  [label="AST: "];
"1000267" -> "1000266"  [label="AST: "];
"1000280" -> "1000266"  [label="CFG: "];
"1000266" -> "1000307"  [label="DDG: "];
"1000266" -> "1000279"  [label="DDG: "];
"1000279" -> "1000278"  [label="AST: "];
"1000279" -> "1000281"  [label="CFG: "];
"1000280" -> "1000279"  [label="AST: "];
"1000281" -> "1000279"  [label="AST: "];
"1000286" -> "1000279"  [label="CFG: "];
"1000304" -> "1000279"  [label="CFG: "];
"1000279" -> "1000307"  [label="DDG: "];
"1000279" -> "1000307"  [label="DDG: "];
"1000279" -> "1000307"  [label="DDG: "];
"1000281" -> "1000279"  [label="DDG: "];
"1000279" -> "1000301"  [label="DDG: "];
"1000279" -> "1000305"  [label="DDG: "];
"1000301" -> "1000283"  [label="AST: "];
"1000301" -> "1000302"  [label="CFG: "];
"1000302" -> "1000301"  [label="AST: "];
"1000307" -> "1000301"  [label="CFG: "];
"1000301" -> "1000307"  [label="DDG: "];
"1000302" -> "1000301"  [label="DDG: "];
"1000305" -> "1000109"  [label="AST: "];
"1000305" -> "1000306"  [label="CFG: "];
"1000306" -> "1000305"  [label="AST: "];
"1000307" -> "1000305"  [label="CFG: "];
"1000305" -> "1000307"  [label="DDG: "];
"1000306" -> "1000305"  [label="DDG: "];
"1000293" -> "1000291"  [label="AST: "];
"1000293" -> "1000295"  [label="CFG: "];
"1000294" -> "1000293"  [label="AST: "];
"1000295" -> "1000293"  [label="AST: "];
"1000291" -> "1000293"  [label="CFG: "];
"1000293" -> "1000307"  [label="DDG: "];
"1000293" -> "1000291"  [label="DDG: "];
"1000293" -> "1000291"  [label="DDG: "];
"1000291" -> "1000289"  [label="AST: "];
"1000292" -> "1000291"  [label="AST: "];
"1000289" -> "1000291"  [label="CFG: "];
"1000291" -> "1000307"  [label="DDG: "];
"1000291" -> "1000289"  [label="DDG: "];
"1000291" -> "1000289"  [label="DDG: "];
"1000289" -> "1000287"  [label="AST: "];
"1000290" -> "1000289"  [label="AST: "];
"1000287" -> "1000289"  [label="CFG: "];
"1000289" -> "1000307"  [label="DDG: "];
"1000289" -> "1000307"  [label="DDG: "];
"1000289" -> "1000287"  [label="DDG: "];
"1000289" -> "1000287"  [label="DDG: "];
"1000287" -> "1000284"  [label="AST: "];
"1000288" -> "1000287"  [label="AST: "];
"1000284" -> "1000287"  [label="CFG: "];
"1000287" -> "1000307"  [label="DDG: "];
"1000287" -> "1000284"  [label="DDG: "];
"1000287" -> "1000284"  [label="DDG: "];
"1000284" -> "1000283"  [label="AST: "];
"1000285" -> "1000284"  [label="AST: "];
"1000298" -> "1000284"  [label="CFG: "];
"1000284" -> "1000307"  [label="DDG: "];
"1000284" -> "1000307"  [label="DDG: "];
"1000284" -> "1000307"  [label="DDG: "];
"1000285" -> "1000284"  [label="DDG: "];
"1000303" -> "1000109"  [label="AST: "];
"1000303" -> "1000304"  [label="CFG: "];
"1000304" -> "1000303"  [label="AST: "];
"1000306" -> "1000303"  [label="CFG: "];
"1000303" -> "1000307"  [label="DDG: "];
"1000303" -> "1000307"  [label="DDG: "];
}
