digraph "0_linux_f3d3342602f8bcbf37d7c46641cb9bca7618eb1c_29@pointer" {
"1000756" [label="(Call,skb_dequeue(&rx->sk.sk_receive_queue))"];
"1000676" [label="(Call,(struct sk_buff *) &rx->sk.sk_receive_queue)"];
"1000231" [label="(Call,skb_peek(&rx->sk.sk_receive_queue))"];
"1000355" [label="(Call,skb_dequeue(&rx->sk.sk_receive_queue))"];
"1000280" [label="(Call,skb_queue_empty(&rx->sk.sk_receive_queue))"];
"1000690" [label="(Call,skb_dequeue(&rx->sk.sk_receive_queue))"];
"1000755" [label="(Call,skb_dequeue(&rx->sk.sk_receive_queue) != skb)"];
"1000765" [label="(Call,rxrpc_free_skb(skb))"];
"1000300" [label="(Identifier,rx)"];
"1000281" [label="(Call,&rx->sk.sk_receive_queue)"];
"1000689" [label="(Call,skb_dequeue(&rx->sk.sk_receive_queue) != skb)"];
"1000231" [label="(Call,skb_peek(&rx->sk.sk_receive_queue))"];
"1000764" [label="(Call,BUG())"];
"1000232" [label="(Call,&rx->sk.sk_receive_queue)"];
"1000229" [label="(Call,skb = skb_peek(&rx->sk.sk_receive_queue))"];
"1000280" [label="(Call,skb_queue_empty(&rx->sk.sk_receive_queue))"];
"1000355" [label="(Call,skb_dequeue(&rx->sk.sk_receive_queue))"];
"1000290" [label="(Identifier,current)"];
"1000763" [label="(Identifier,skb)"];
"1000755" [label="(Call,skb_dequeue(&rx->sk.sk_receive_queue) != skb)"];
"1000756" [label="(Call,skb_dequeue(&rx->sk.sk_receive_queue))"];
"1000753" [label="(Block,)"];
"1000676" [label="(Call,(struct sk_buff *) &rx->sk.sk_receive_queue)"];
"1000757" [label="(Call,&rx->sk.sk_receive_queue)"];
"1000754" [label="(ControlStructure,if (skb_dequeue(&rx->sk.sk_receive_queue) != skb))"];
"1000765" [label="(Call,rxrpc_free_skb(skb))"];
"1000279" [label="(ControlStructure,if (skb_queue_empty(&rx->sk.sk_receive_queue)))"];
"1000313" [label="(Call,rxrpc_skb(skb))"];
"1000354" [label="(Call,skb_dequeue(&rx->sk.sk_receive_queue) != skb)"];
"1000766" [label="(Identifier,skb)"];
"1000690" [label="(Call,skb_dequeue(&rx->sk.sk_receive_queue))"];
"1000362" [label="(Identifier,skb)"];
"1000767" [label="(ControlStructure,goto out;)"];
"1000691" [label="(Call,&rx->sk.sk_receive_queue)"];
"1000439" [label="(Call,sock_recv_ts_and_drops(msg, &rx->sk, skb))"];
"1000628" [label="(Call,skb_dequeue(&rx->sk.sk_receive_queue))"];
"1000697" [label="(Identifier,skb)"];
"1000356" [label="(Call,&rx->sk.sk_receive_queue)"];
"1001014" [label="(MethodReturn,int)"];
"1000910" [label="(Call,skb_dequeue(&rx->sk.sk_receive_queue))"];
"1000678" [label="(Call,&rx->sk.sk_receive_queue)"];
"1000674" [label="(Call,skb == (struct sk_buff *) &rx->sk.sk_receive_queue)"];
"1000756" -> "1000755"  [label="AST: "];
"1000756" -> "1000757"  [label="CFG: "];
"1000757" -> "1000756"  [label="AST: "];
"1000763" -> "1000756"  [label="CFG: "];
"1000756" -> "1001014"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000756" -> "1000755"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000676" -> "1000756"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000231" -> "1000756"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000676" -> "1000674"  [label="AST: "];
"1000676" -> "1000678"  [label="CFG: "];
"1000677" -> "1000676"  [label="AST: "];
"1000678" -> "1000676"  [label="AST: "];
"1000674" -> "1000676"  [label="CFG: "];
"1000676" -> "1001014"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000676" -> "1000355"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000676" -> "1000628"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000676" -> "1000674"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000231" -> "1000676"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000676" -> "1000690"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000676" -> "1000910"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000231" -> "1000229"  [label="AST: "];
"1000231" -> "1000232"  [label="CFG: "];
"1000232" -> "1000231"  [label="AST: "];
"1000229" -> "1000231"  [label="CFG: "];
"1000231" -> "1001014"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000231" -> "1000229"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000355" -> "1000231"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000280" -> "1000231"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000690" -> "1000231"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000231" -> "1000280"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000231" -> "1000355"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000231" -> "1000628"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000231" -> "1000690"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000231" -> "1000910"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000355" -> "1000354"  [label="AST: "];
"1000355" -> "1000356"  [label="CFG: "];
"1000356" -> "1000355"  [label="AST: "];
"1000362" -> "1000355"  [label="CFG: "];
"1000355" -> "1001014"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000355" -> "1000354"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000280" -> "1000279"  [label="AST: "];
"1000280" -> "1000281"  [label="CFG: "];
"1000281" -> "1000280"  [label="AST: "];
"1000290" -> "1000280"  [label="CFG: "];
"1000300" -> "1000280"  [label="CFG: "];
"1000280" -> "1001014"  [label="DDG: skb_queue_empty(&rx->sk.sk_receive_queue)"];
"1000280" -> "1001014"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000690" -> "1000689"  [label="AST: "];
"1000690" -> "1000691"  [label="CFG: "];
"1000691" -> "1000690"  [label="AST: "];
"1000697" -> "1000690"  [label="CFG: "];
"1000690" -> "1001014"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000690" -> "1000689"  [label="DDG: &rx->sk.sk_receive_queue"];
"1000755" -> "1000754"  [label="AST: "];
"1000755" -> "1000763"  [label="CFG: "];
"1000763" -> "1000755"  [label="AST: "];
"1000764" -> "1000755"  [label="CFG: "];
"1000766" -> "1000755"  [label="CFG: "];
"1000755" -> "1001014"  [label="DDG: skb_dequeue(&rx->sk.sk_receive_queue) != skb"];
"1000755" -> "1001014"  [label="DDG: skb_dequeue(&rx->sk.sk_receive_queue)"];
"1000439" -> "1000755"  [label="DDG: skb"];
"1000313" -> "1000755"  [label="DDG: skb"];
"1000755" -> "1000765"  [label="DDG: skb"];
"1000765" -> "1000753"  [label="AST: "];
"1000765" -> "1000766"  [label="CFG: "];
"1000766" -> "1000765"  [label="AST: "];
"1000767" -> "1000765"  [label="CFG: "];
"1000765" -> "1001014"  [label="DDG: skb"];
"1000765" -> "1001014"  [label="DDG: rxrpc_free_skb(skb)"];
}
