digraph "0_linux_f6d8bd051c391c1c0458a30b2a7abcd939329259_0@pointer" {
"1000221" [label="(Call,sock_net(sk))"];
"1000110" [label="(Call,sk_acceptq_is_full(sk))"];
"1000101" [label="(MethodParameterIn,struct sock *sk)"];
"1000220" [label="(Call,NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_LISTENOVERFLOWS))"];
"1000229" [label="(Call,sock_net(sk))"];
"1000228" [label="(Call,NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_LISTENDROPS))"];
"1000111" [label="(Identifier,sk)"];
"1000105" [label="(Block,)"];
"1000224" [label="(JumpTarget,exit_nonewsk:)"];
"1000230" [label="(Identifier,sk)"];
"1000206" [label="(Call,__inet_inherit_port(sk, newsk))"];
"1000220" [label="(Call,NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_LISTENOVERFLOWS))"];
"1000110" [label="(Call,sk_acceptq_is_full(sk))"];
"1000222" [label="(Identifier,sk)"];
"1000128" [label="(Call,dccp_create_openreq_child(sk, req, skb))"];
"1000233" [label="(Identifier,NULL)"];
"1000116" [label="(Identifier,dst)"];
"1000228" [label="(Call,NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_LISTENDROPS))"];
"1000223" [label="(Identifier,LINUX_MIB_LISTENOVERFLOWS)"];
"1000109" [label="(ControlStructure,if (sk_acceptq_is_full(sk)))"];
"1000231" [label="(Identifier,LINUX_MIB_LISTENDROPS)"];
"1000112" [label="(ControlStructure,goto exit_overflow;)"];
"1000234" [label="(MethodReturn,struct sock *)"];
"1000121" [label="(Call,inet_csk_route_req(sk, req))"];
"1000101" [label="(MethodParameterIn,struct sock *sk)"];
"1000221" [label="(Call,sock_net(sk))"];
"1000229" [label="(Call,sock_net(sk))"];
"1000221" -> "1000220"  [label="AST: "];
"1000221" -> "1000222"  [label="CFG: "];
"1000222" -> "1000221"  [label="AST: "];
"1000223" -> "1000221"  [label="CFG: "];
"1000221" -> "1000220"  [label="DDG: sk"];
"1000110" -> "1000221"  [label="DDG: sk"];
"1000101" -> "1000221"  [label="DDG: sk"];
"1000221" -> "1000229"  [label="DDG: sk"];
"1000110" -> "1000109"  [label="AST: "];
"1000110" -> "1000111"  [label="CFG: "];
"1000111" -> "1000110"  [label="AST: "];
"1000112" -> "1000110"  [label="CFG: "];
"1000116" -> "1000110"  [label="CFG: "];
"1000110" -> "1000234"  [label="DDG: sk_acceptq_is_full(sk)"];
"1000101" -> "1000110"  [label="DDG: sk"];
"1000110" -> "1000121"  [label="DDG: sk"];
"1000110" -> "1000128"  [label="DDG: sk"];
"1000110" -> "1000229"  [label="DDG: sk"];
"1000101" -> "1000100"  [label="AST: "];
"1000101" -> "1000234"  [label="DDG: sk"];
"1000101" -> "1000121"  [label="DDG: sk"];
"1000101" -> "1000128"  [label="DDG: sk"];
"1000101" -> "1000206"  [label="DDG: sk"];
"1000101" -> "1000229"  [label="DDG: sk"];
"1000220" -> "1000105"  [label="AST: "];
"1000220" -> "1000223"  [label="CFG: "];
"1000223" -> "1000220"  [label="AST: "];
"1000224" -> "1000220"  [label="CFG: "];
"1000220" -> "1000234"  [label="DDG: LINUX_MIB_LISTENOVERFLOWS"];
"1000220" -> "1000234"  [label="DDG: NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_LISTENOVERFLOWS)"];
"1000229" -> "1000228"  [label="AST: "];
"1000229" -> "1000230"  [label="CFG: "];
"1000230" -> "1000229"  [label="AST: "];
"1000231" -> "1000229"  [label="CFG: "];
"1000229" -> "1000234"  [label="DDG: sk"];
"1000229" -> "1000228"  [label="DDG: sk"];
"1000128" -> "1000229"  [label="DDG: sk"];
"1000206" -> "1000229"  [label="DDG: sk"];
"1000121" -> "1000229"  [label="DDG: sk"];
"1000228" -> "1000105"  [label="AST: "];
"1000228" -> "1000231"  [label="CFG: "];
"1000231" -> "1000228"  [label="AST: "];
"1000233" -> "1000228"  [label="CFG: "];
"1000228" -> "1000234"  [label="DDG: NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_LISTENDROPS)"];
"1000228" -> "1000234"  [label="DDG: sock_net(sk)"];
"1000228" -> "1000234"  [label="DDG: LINUX_MIB_LISTENDROPS"];
}
