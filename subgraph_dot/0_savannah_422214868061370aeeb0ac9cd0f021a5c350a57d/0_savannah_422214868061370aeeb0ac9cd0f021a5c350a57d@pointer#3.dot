digraph "0_savannah_422214868061370aeeb0ac9cd0f021a5c350a57d@pointer" {
"1000159" [label="(Call,_gnutls_cipher_decrypt (&params->read.cipher_state,\n                                   ciphertext.data, ciphertext.size))"];
"1000113" [label="(MethodParameterIn,gnutls_datum_t ciphertext)"];
"1000156" [label="(Call,(ret =\n           _gnutls_cipher_decrypt (&params->read.cipher_state,\n                                   ciphertext.data, ciphertext.size)) < 0)"];
"1000157" [label="(Call,ret =\n           _gnutls_cipher_decrypt (&params->read.cipher_state,\n                                   ciphertext.data, ciphertext.size))"];
"1000175" [label="(Return,return ret;)"];
"1000179" [label="(Call,ciphertext.size - hash_size)"];
"1000177" [label="(Call,length = ciphertext.size - hash_size)"];
"1000359" [label="(Call,length < 0)"];
"1000368" [label="(Call,(uint16_t) length)"];
"1000367" [label="(Call,_gnutls_conv_uint16 ((uint16_t) length))"];
"1000365" [label="(Call,c_length = _gnutls_conv_uint16 ((uint16_t) length))"];
"1000412" [label="(Call,make_preamble (UINT64DATA\n                       (params->read.sequence_number), type,\n                       c_length, ver, preamble))"];
"1000410" [label="(Call,preamble_size =\n        make_preamble (UINT64DATA\n                       (params->read.sequence_number), type,\n                       c_length, ver, preamble))"];
"1000423" [label="(Call,mac_hash (&td, preamble, preamble_size, ver))"];
"1000433" [label="(Call,mac_hash (&td, ciphertext.data, length, ver))"];
"1000441" [label="(Call,mac_deinit (&td, MAC, ver))"];
"1000456" [label="(Call,memcmp (MAC, &ciphertext.data[length], hash_size))"];
"1000455" [label="(Call,memcmp (MAC, &ciphertext.data[length], hash_size) != 0)"];
"1000471" [label="(Call,compress_size < length)"];
"1000478" [label="(Call,memcpy (compress_data, ciphertext.data, length))"];
"1000484" [label="(Return,return length;)"];
"1000430" [label="(Call,length > 0)"];
"1000467" [label="(Call,gnutls_assert ())"];
"1000486" [label="(MethodReturn,RET)"];
"1000445" [label="(Identifier,ver)"];
"1000464" [label="(Identifier,hash_size)"];
"1000362" [label="(Call,length = 0)"];
"1000273" [label="(Call,(int) ciphertext.size)"];
"1000422" [label="(Identifier,preamble)"];
"1000381" [label="(Call,mac_init (&td, params->mac_algorithm,\n                      params->read.mac_secret.data,\n                      params->read.mac_secret.size, ver))"];
"1000156" [label="(Call,(ret =\n           _gnutls_cipher_decrypt (&params->read.cipher_state,\n                                   ciphertext.data, ciphertext.size)) < 0)"];
"1000479" [label="(Identifier,compress_data)"];
"1000441" [label="(Call,mac_deinit (&td, MAC, ver))"];
"1000178" [label="(Identifier,length)"];
"1000410" [label="(Call,preamble_size =\n        make_preamble (UINT64DATA\n                       (params->read.sequence_number), type,\n                       c_length, ver, preamble))"];
"1000304" [label="(Call,length = ciphertext.size - hash_size - pad)"];
"1000470" [label="(ControlStructure,if (compress_size < length))"];
"1000116" [label="(Block,)"];
"1000426" [label="(Identifier,preamble)"];
"1000454" [label="(ControlStructure,if (memcmp (MAC, &ciphertext.data[length], hash_size) != 0))"];
"1000179" [label="(Call,ciphertext.size - hash_size)"];
"1000306" [label="(Call,ciphertext.size - hash_size - pad)"];
"1000176" [label="(Identifier,ret)"];
"1000114" [label="(MethodParameterIn,uint8_t type)"];
"1000234" [label="(Call,ciphertext.size -= blocksize)"];
"1000431" [label="(Identifier,length)"];
"1000484" [label="(Return,return length;)"];
"1000456" [label="(Call,memcmp (MAC, &ciphertext.data[length], hash_size))"];
"1000473" [label="(Identifier,length)"];
"1000177" [label="(Call,length = ciphertext.size - hash_size)"];
"1000367" [label="(Call,_gnutls_conv_uint16 ((uint16_t) length))"];
"1000331" [label="(Call,ciphertext.data[ciphertext.size - i] !=\n                ciphertext.data[ciphertext.size - 1])"];
"1000483" [label="(Identifier,length)"];
"1000458" [label="(Call,&ciphertext.data[length])"];
"1000443" [label="(Identifier,td)"];
"1000432" [label="(Literal,0)"];
"1000457" [label="(Identifier,MAC)"];
"1000136" [label="(Call,hash_size = _gnutls_hash_get_algo_len (params->mac_algorithm))"];
"1000160" [label="(Call,&params->read.cipher_state)"];
"1000169" [label="(Call,ciphertext.size)"];
"1000245" [label="(Call,ciphertext.size < hash_size)"];
"1000433" [label="(Call,mac_hash (&td, ciphertext.data, length, ver))"];
"1000423" [label="(Call,mac_hash (&td, preamble, preamble_size, ver))"];
"1000428" [label="(Identifier,ver)"];
"1000365" [label="(Call,c_length = _gnutls_conv_uint16 ((uint16_t) length))"];
"1000361" [label="(Literal,0)"];
"1000310" [label="(Call,hash_size - pad)"];
"1000425" [label="(Identifier,td)"];
"1000285" [label="(Call,(int) ciphertext.size)"];
"1000436" [label="(Call,ciphertext.data)"];
"1000444" [label="(Identifier,MAC)"];
"1000175" [label="(Return,return ret;)"];
"1000370" [label="(Identifier,length)"];
"1000427" [label="(Identifier,preamble_size)"];
"1000345" [label="(Call,ciphertext.size - 1)"];
"1000475" [label="(Call,gnutls_assert ())"];
"1000360" [label="(Identifier,length)"];
"1000448" [label="(Identifier,pad_failed)"];
"1000157" [label="(Call,ret =\n           _gnutls_cipher_decrypt (&params->read.cipher_state,\n                                   ciphertext.data, ciphertext.size))"];
"1000155" [label="(ControlStructure,if ((ret =\n           _gnutls_cipher_decrypt (&params->read.cipher_state,\n                                   ciphertext.data, ciphertext.size)) < 0))"];
"1000111" [label="(MethodParameterIn,opaque * compress_data)"];
"1000485" [label="(Identifier,length)"];
"1000359" [label="(Call,length < 0)"];
"1000480" [label="(Call,ciphertext.data)"];
"1000465" [label="(Literal,0)"];
"1000183" [label="(Identifier,hash_size)"];
"1000153" [label="(Block,)"];
"1000421" [label="(Identifier,ver)"];
"1000358" [label="(ControlStructure,if (length < 0))"];
"1000368" [label="(Call,(uint16_t) length)"];
"1000174" [label="(Call,gnutls_assert ())"];
"1000420" [label="(Identifier,c_length)"];
"1000336" [label="(Call,ciphertext.size - i)"];
"1000158" [label="(Identifier,ret)"];
"1000208" [label="(Call,_gnutls_cipher_decrypt (&params->read.cipher_state,\n                                   ciphertext.data, ciphertext.size))"];
"1000439" [label="(Identifier,length)"];
"1000166" [label="(Call,ciphertext.data)"];
"1000188" [label="(Call,ciphertext.size < blocksize)"];
"1000413" [label="(Call,UINT64DATA\n                       (params->read.sequence_number))"];
"1000374" [label="(Identifier,params)"];
"1000411" [label="(Identifier,preamble_size)"];
"1000424" [label="(Call,&td)"];
"1000194" [label="(Call,ciphertext.size % blocksize)"];
"1000478" [label="(Call,memcpy (compress_data, ciphertext.data, length))"];
"1000180" [label="(Call,ciphertext.size)"];
"1000113" [label="(MethodParameterIn,gnutls_datum_t ciphertext)"];
"1000471" [label="(Call,compress_size < length)"];
"1000184" [label="(ControlStructure,break;)"];
"1000419" [label="(Identifier,type)"];
"1000472" [label="(Identifier,compress_size)"];
"1000159" [label="(Call,_gnutls_cipher_decrypt (&params->read.cipher_state,\n                                   ciphertext.data, ciphertext.size))"];
"1000293" [label="(Call,_gnutls_record_log\n            (\"REC[%p]: Short record length %d > %d - %d (under attack?)\n\",\n             session, pad, ciphertext.size, hash_size))"];
"1000377" [label="(Block,)"];
"1000112" [label="(MethodParameterIn,int compress_size)"];
"1000429" [label="(ControlStructure,if (length > 0))"];
"1000434" [label="(Call,&td)"];
"1000430" [label="(Call,length > 0)"];
"1000261" [label="(Call,ciphertext.size - 1)"];
"1000440" [label="(Identifier,ver)"];
"1000412" [label="(Call,make_preamble (UINT64DATA\n                       (params->read.sequence_number), type,\n                       c_length, ver, preamble))"];
"1000173" [label="(Block,)"];
"1000455" [label="(Call,memcmp (MAC, &ciphertext.data[length], hash_size) != 0)"];
"1000172" [label="(Literal,0)"];
"1000442" [label="(Call,&td)"];
"1000363" [label="(Identifier,length)"];
"1000435" [label="(Identifier,td)"];
"1000239" [label="(Call,ciphertext.data += blocksize)"];
"1000366" [label="(Identifier,c_length)"];
"1000159" -> "1000157"  [label="AST: "];
"1000159" -> "1000169"  [label="CFG: "];
"1000160" -> "1000159"  [label="AST: "];
"1000166" -> "1000159"  [label="AST: "];
"1000169" -> "1000159"  [label="AST: "];
"1000157" -> "1000159"  [label="CFG: "];
"1000159" -> "1000486"  [label="DDG: ciphertext.size"];
"1000159" -> "1000486"  [label="DDG: &params->read.cipher_state"];
"1000159" -> "1000486"  [label="DDG: ciphertext.data"];
"1000159" -> "1000156"  [label="DDG: &params->read.cipher_state"];
"1000159" -> "1000156"  [label="DDG: ciphertext.data"];
"1000159" -> "1000156"  [label="DDG: ciphertext.size"];
"1000159" -> "1000157"  [label="DDG: &params->read.cipher_state"];
"1000159" -> "1000157"  [label="DDG: ciphertext.data"];
"1000159" -> "1000157"  [label="DDG: ciphertext.size"];
"1000113" -> "1000159"  [label="DDG: ciphertext"];
"1000159" -> "1000179"  [label="DDG: ciphertext.size"];
"1000159" -> "1000433"  [label="DDG: ciphertext.data"];
"1000159" -> "1000456"  [label="DDG: ciphertext.data"];
"1000159" -> "1000478"  [label="DDG: ciphertext.data"];
"1000113" -> "1000109"  [label="AST: "];
"1000113" -> "1000486"  [label="DDG: ciphertext"];
"1000113" -> "1000179"  [label="DDG: ciphertext"];
"1000113" -> "1000188"  [label="DDG: ciphertext"];
"1000113" -> "1000194"  [label="DDG: ciphertext"];
"1000113" -> "1000208"  [label="DDG: ciphertext"];
"1000113" -> "1000234"  [label="DDG: ciphertext"];
"1000113" -> "1000239"  [label="DDG: ciphertext"];
"1000113" -> "1000245"  [label="DDG: ciphertext"];
"1000113" -> "1000261"  [label="DDG: ciphertext"];
"1000113" -> "1000273"  [label="DDG: ciphertext"];
"1000113" -> "1000285"  [label="DDG: ciphertext"];
"1000113" -> "1000293"  [label="DDG: ciphertext"];
"1000113" -> "1000306"  [label="DDG: ciphertext"];
"1000113" -> "1000336"  [label="DDG: ciphertext"];
"1000113" -> "1000345"  [label="DDG: ciphertext"];
"1000113" -> "1000433"  [label="DDG: ciphertext"];
"1000113" -> "1000478"  [label="DDG: ciphertext"];
"1000156" -> "1000155"  [label="AST: "];
"1000156" -> "1000172"  [label="CFG: "];
"1000157" -> "1000156"  [label="AST: "];
"1000172" -> "1000156"  [label="AST: "];
"1000174" -> "1000156"  [label="CFG: "];
"1000178" -> "1000156"  [label="CFG: "];
"1000156" -> "1000486"  [label="DDG: (ret =\n           _gnutls_cipher_decrypt (&params->read.cipher_state,\n                                   ciphertext.data, ciphertext.size)) < 0"];
"1000157" -> "1000156"  [label="DDG: ret"];
"1000158" -> "1000157"  [label="AST: "];
"1000172" -> "1000157"  [label="CFG: "];
"1000157" -> "1000486"  [label="DDG: _gnutls_cipher_decrypt (&params->read.cipher_state,\n                                   ciphertext.data, ciphertext.size)"];
"1000157" -> "1000486"  [label="DDG: ret"];
"1000157" -> "1000175"  [label="DDG: ret"];
"1000175" -> "1000173"  [label="AST: "];
"1000175" -> "1000176"  [label="CFG: "];
"1000176" -> "1000175"  [label="AST: "];
"1000486" -> "1000175"  [label="CFG: "];
"1000175" -> "1000486"  [label="DDG: <RET>"];
"1000176" -> "1000175"  [label="DDG: ret"];
"1000179" -> "1000177"  [label="AST: "];
"1000179" -> "1000183"  [label="CFG: "];
"1000180" -> "1000179"  [label="AST: "];
"1000183" -> "1000179"  [label="AST: "];
"1000177" -> "1000179"  [label="CFG: "];
"1000179" -> "1000486"  [label="DDG: ciphertext.size"];
"1000179" -> "1000486"  [label="DDG: hash_size"];
"1000179" -> "1000177"  [label="DDG: ciphertext.size"];
"1000179" -> "1000177"  [label="DDG: hash_size"];
"1000136" -> "1000179"  [label="DDG: hash_size"];
"1000179" -> "1000456"  [label="DDG: hash_size"];
"1000177" -> "1000153"  [label="AST: "];
"1000178" -> "1000177"  [label="AST: "];
"1000184" -> "1000177"  [label="CFG: "];
"1000177" -> "1000486"  [label="DDG: ciphertext.size - hash_size"];
"1000177" -> "1000359"  [label="DDG: length"];
"1000359" -> "1000358"  [label="AST: "];
"1000359" -> "1000361"  [label="CFG: "];
"1000360" -> "1000359"  [label="AST: "];
"1000361" -> "1000359"  [label="AST: "];
"1000363" -> "1000359"  [label="CFG: "];
"1000366" -> "1000359"  [label="CFG: "];
"1000359" -> "1000486"  [label="DDG: length < 0"];
"1000304" -> "1000359"  [label="DDG: length"];
"1000359" -> "1000368"  [label="DDG: length"];
"1000368" -> "1000367"  [label="AST: "];
"1000368" -> "1000370"  [label="CFG: "];
"1000369" -> "1000368"  [label="AST: "];
"1000370" -> "1000368"  [label="AST: "];
"1000367" -> "1000368"  [label="CFG: "];
"1000368" -> "1000486"  [label="DDG: length"];
"1000368" -> "1000367"  [label="DDG: length"];
"1000362" -> "1000368"  [label="DDG: length"];
"1000368" -> "1000430"  [label="DDG: length"];
"1000368" -> "1000471"  [label="DDG: length"];
"1000367" -> "1000365"  [label="AST: "];
"1000365" -> "1000367"  [label="CFG: "];
"1000367" -> "1000486"  [label="DDG: (uint16_t) length"];
"1000367" -> "1000365"  [label="DDG: (uint16_t) length"];
"1000365" -> "1000116"  [label="AST: "];
"1000366" -> "1000365"  [label="AST: "];
"1000374" -> "1000365"  [label="CFG: "];
"1000365" -> "1000486"  [label="DDG: _gnutls_conv_uint16 ((uint16_t) length)"];
"1000365" -> "1000486"  [label="DDG: c_length"];
"1000365" -> "1000412"  [label="DDG: c_length"];
"1000412" -> "1000410"  [label="AST: "];
"1000412" -> "1000422"  [label="CFG: "];
"1000413" -> "1000412"  [label="AST: "];
"1000419" -> "1000412"  [label="AST: "];
"1000420" -> "1000412"  [label="AST: "];
"1000421" -> "1000412"  [label="AST: "];
"1000422" -> "1000412"  [label="AST: "];
"1000410" -> "1000412"  [label="CFG: "];
"1000412" -> "1000486"  [label="DDG: c_length"];
"1000412" -> "1000486"  [label="DDG: UINT64DATA\n                       (params->read.sequence_number)"];
"1000412" -> "1000486"  [label="DDG: type"];
"1000412" -> "1000410"  [label="DDG: type"];
"1000412" -> "1000410"  [label="DDG: c_length"];
"1000412" -> "1000410"  [label="DDG: UINT64DATA\n                       (params->read.sequence_number)"];
"1000412" -> "1000410"  [label="DDG: ver"];
"1000412" -> "1000410"  [label="DDG: preamble"];
"1000413" -> "1000412"  [label="DDG: params->read.sequence_number"];
"1000114" -> "1000412"  [label="DDG: type"];
"1000381" -> "1000412"  [label="DDG: ver"];
"1000412" -> "1000423"  [label="DDG: preamble"];
"1000412" -> "1000423"  [label="DDG: ver"];
"1000410" -> "1000377"  [label="AST: "];
"1000411" -> "1000410"  [label="AST: "];
"1000425" -> "1000410"  [label="CFG: "];
"1000410" -> "1000486"  [label="DDG: make_preamble (UINT64DATA\n                       (params->read.sequence_number), type,\n                       c_length, ver, preamble)"];
"1000410" -> "1000423"  [label="DDG: preamble_size"];
"1000423" -> "1000377"  [label="AST: "];
"1000423" -> "1000428"  [label="CFG: "];
"1000424" -> "1000423"  [label="AST: "];
"1000426" -> "1000423"  [label="AST: "];
"1000427" -> "1000423"  [label="AST: "];
"1000428" -> "1000423"  [label="AST: "];
"1000431" -> "1000423"  [label="CFG: "];
"1000423" -> "1000486"  [label="DDG: preamble_size"];
"1000423" -> "1000486"  [label="DDG: preamble"];
"1000423" -> "1000486"  [label="DDG: mac_hash (&td, preamble, preamble_size, ver)"];
"1000381" -> "1000423"  [label="DDG: &td"];
"1000423" -> "1000433"  [label="DDG: &td"];
"1000423" -> "1000433"  [label="DDG: ver"];
"1000423" -> "1000441"  [label="DDG: &td"];
"1000423" -> "1000441"  [label="DDG: ver"];
"1000433" -> "1000429"  [label="AST: "];
"1000433" -> "1000440"  [label="CFG: "];
"1000434" -> "1000433"  [label="AST: "];
"1000436" -> "1000433"  [label="AST: "];
"1000439" -> "1000433"  [label="AST: "];
"1000440" -> "1000433"  [label="AST: "];
"1000443" -> "1000433"  [label="CFG: "];
"1000433" -> "1000486"  [label="DDG: ciphertext.data"];
"1000433" -> "1000486"  [label="DDG: mac_hash (&td, ciphertext.data, length, ver)"];
"1000433" -> "1000486"  [label="DDG: length"];
"1000239" -> "1000433"  [label="DDG: ciphertext.data"];
"1000331" -> "1000433"  [label="DDG: ciphertext.data[ciphertext.size - i]"];
"1000331" -> "1000433"  [label="DDG: ciphertext.data[ciphertext.size - 1]"];
"1000208" -> "1000433"  [label="DDG: ciphertext.data"];
"1000430" -> "1000433"  [label="DDG: length"];
"1000433" -> "1000441"  [label="DDG: &td"];
"1000433" -> "1000441"  [label="DDG: ver"];
"1000433" -> "1000456"  [label="DDG: ciphertext.data"];
"1000433" -> "1000471"  [label="DDG: length"];
"1000433" -> "1000478"  [label="DDG: ciphertext.data"];
"1000441" -> "1000377"  [label="AST: "];
"1000441" -> "1000445"  [label="CFG: "];
"1000442" -> "1000441"  [label="AST: "];
"1000444" -> "1000441"  [label="AST: "];
"1000445" -> "1000441"  [label="AST: "];
"1000448" -> "1000441"  [label="CFG: "];
"1000441" -> "1000486"  [label="DDG: &td"];
"1000441" -> "1000486"  [label="DDG: ver"];
"1000441" -> "1000486"  [label="DDG: mac_deinit (&td, MAC, ver)"];
"1000441" -> "1000486"  [label="DDG: MAC"];
"1000441" -> "1000456"  [label="DDG: MAC"];
"1000456" -> "1000455"  [label="AST: "];
"1000456" -> "1000464"  [label="CFG: "];
"1000457" -> "1000456"  [label="AST: "];
"1000458" -> "1000456"  [label="AST: "];
"1000464" -> "1000456"  [label="AST: "];
"1000465" -> "1000456"  [label="CFG: "];
"1000456" -> "1000486"  [label="DDG: MAC"];
"1000456" -> "1000486"  [label="DDG: hash_size"];
"1000456" -> "1000486"  [label="DDG: &ciphertext.data[length]"];
"1000456" -> "1000455"  [label="DDG: MAC"];
"1000456" -> "1000455"  [label="DDG: &ciphertext.data[length]"];
"1000456" -> "1000455"  [label="DDG: hash_size"];
"1000239" -> "1000456"  [label="DDG: ciphertext.data"];
"1000208" -> "1000456"  [label="DDG: ciphertext.data"];
"1000310" -> "1000456"  [label="DDG: hash_size"];
"1000455" -> "1000454"  [label="AST: "];
"1000455" -> "1000465"  [label="CFG: "];
"1000465" -> "1000455"  [label="AST: "];
"1000467" -> "1000455"  [label="CFG: "];
"1000472" -> "1000455"  [label="CFG: "];
"1000455" -> "1000486"  [label="DDG: memcmp (MAC, &ciphertext.data[length], hash_size) != 0"];
"1000455" -> "1000486"  [label="DDG: memcmp (MAC, &ciphertext.data[length], hash_size)"];
"1000471" -> "1000470"  [label="AST: "];
"1000471" -> "1000473"  [label="CFG: "];
"1000472" -> "1000471"  [label="AST: "];
"1000473" -> "1000471"  [label="AST: "];
"1000475" -> "1000471"  [label="CFG: "];
"1000479" -> "1000471"  [label="CFG: "];
"1000471" -> "1000486"  [label="DDG: compress_size"];
"1000471" -> "1000486"  [label="DDG: length"];
"1000471" -> "1000486"  [label="DDG: compress_size < length"];
"1000112" -> "1000471"  [label="DDG: compress_size"];
"1000430" -> "1000471"  [label="DDG: length"];
"1000471" -> "1000478"  [label="DDG: length"];
"1000478" -> "1000116"  [label="AST: "];
"1000478" -> "1000483"  [label="CFG: "];
"1000479" -> "1000478"  [label="AST: "];
"1000480" -> "1000478"  [label="AST: "];
"1000483" -> "1000478"  [label="AST: "];
"1000485" -> "1000478"  [label="CFG: "];
"1000478" -> "1000486"  [label="DDG: length"];
"1000478" -> "1000486"  [label="DDG: compress_data"];
"1000478" -> "1000486"  [label="DDG: ciphertext.data"];
"1000478" -> "1000486"  [label="DDG: memcpy (compress_data, ciphertext.data, length)"];
"1000111" -> "1000478"  [label="DDG: compress_data"];
"1000239" -> "1000478"  [label="DDG: ciphertext.data"];
"1000331" -> "1000478"  [label="DDG: ciphertext.data[ciphertext.size - i]"];
"1000331" -> "1000478"  [label="DDG: ciphertext.data[ciphertext.size - 1]"];
"1000208" -> "1000478"  [label="DDG: ciphertext.data"];
"1000478" -> "1000484"  [label="DDG: length"];
"1000484" -> "1000116"  [label="AST: "];
"1000484" -> "1000485"  [label="CFG: "];
"1000485" -> "1000484"  [label="AST: "];
"1000486" -> "1000484"  [label="CFG: "];
"1000484" -> "1000486"  [label="DDG: <RET>"];
"1000485" -> "1000484"  [label="DDG: length"];
"1000430" -> "1000429"  [label="AST: "];
"1000430" -> "1000432"  [label="CFG: "];
"1000431" -> "1000430"  [label="AST: "];
"1000432" -> "1000430"  [label="AST: "];
"1000435" -> "1000430"  [label="CFG: "];
"1000443" -> "1000430"  [label="CFG: "];
"1000430" -> "1000486"  [label="DDG: length"];
"1000430" -> "1000486"  [label="DDG: length > 0"];
}
