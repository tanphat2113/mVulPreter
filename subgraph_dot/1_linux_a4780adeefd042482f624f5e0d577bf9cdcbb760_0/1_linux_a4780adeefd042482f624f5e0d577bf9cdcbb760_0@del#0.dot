digraph "1_linux_a4780adeefd042482f624f5e0d577bf9cdcbb760_0@del" {
"1000201" [label="(Call,put_user(task_thread_info(child)->tp_value,\n \t\t\t\t       datap))"];
"1000108" [label="(Call,*datap = (unsigned long __user *) data)"];
"1000110" [label="(Call,(unsigned long __user *) data)"];
"1000104" [label="(MethodParameterIn,unsigned long data)"];
"1000199" [label="(Call,ret = put_user(task_thread_info(child)->tp_value,\n \t\t\t\t       datap))"];
"1000306" [label="(Return,return ret;)"];
"1000291" [label="(Call,(unsigned long __user *)data)"];
"1000185" [label="(Call,ret = ptrace_getwmmxregs(child, datap))"];
"1000187" [label="(Call,ptrace_getwmmxregs(child, datap))"];
"1000234" [label="(Call,ret = copy_regset_to_user(child,\n\t\t\t\t\t\t  &user_arm_view, REGSET_VFP,\n\t\t\t\t\t\t  0, ARM_VFPREGS_SIZE,\n\t\t\t\t\t\t  datap))"];
"1000199" [label="(Call,ret = put_user(task_thread_info(child)->tp_value,\n \t\t\t\t       datap))"];
"1000220" [label="(Call,ret = ptrace_getcrunchregs(child, datap))"];
"1000148" [label="(Call,copy_regset_from_user(child,\n\t\t\t\t\t\t    &user_arm_view, REGSET_GPR,\n\t\t\t\t\t\t    0, sizeof(struct pt_regs),\n\t\t\t\t\t\t    datap))"];
"1000248" [label="(Call,copy_regset_from_user(child,\n\t\t\t\t\t\t    &user_arm_view, REGSET_VFP,\n\t\t\t\t\t\t    0, ARM_VFPREGS_SIZE,\n\t\t\t\t\t\t    datap))"];
"1000200" [label="(Identifier,ret)"];
"1000127" [label="(Call,ptrace_write_user(child, addr, data))"];
"1000109" [label="(Identifier,datap)"];
"1000135" [label="(Call,copy_regset_to_user(child,\n\t\t\t\t\t\t  &user_arm_view, REGSET_GPR,\n\t\t\t\t\t\t  0, sizeof(struct pt_regs),\n\t\t\t\t\t\t  datap))"];
"1000209" [label="(Call,task_thread_info(child)->syscall = data)"];
"1000307" [label="(Identifier,ret)"];
"1000174" [label="(Call,copy_regset_from_user(child,\n\t\t\t\t\t\t    &user_arm_view, REGSET_FPR,\n\t\t\t\t\t\t    0, sizeof(union fp_state),\n\t\t\t\t\t\t    datap))"];
"1000112" [label="(Identifier,data)"];
"1000298" [label="(Call,ret = ptrace_request(child, request, addr, data))"];
"1000146" [label="(Call,ret = copy_regset_from_user(child,\n\t\t\t\t\t\t    &user_arm_view, REGSET_GPR,\n\t\t\t\t\t\t    0, sizeof(struct pt_regs),\n\t\t\t\t\t\t    datap))"];
"1000104" [label="(MethodParameterIn,unsigned long data)"];
"1000222" [label="(Call,ptrace_getcrunchregs(child, datap))"];
"1000133" [label="(Call,ret = copy_regset_to_user(child,\n\t\t\t\t\t\t  &user_arm_view, REGSET_GPR,\n\t\t\t\t\t\t  0, sizeof(struct pt_regs),\n\t\t\t\t\t\t  datap))"];
"1000192" [label="(Call,ret = ptrace_setwmmxregs(child, datap))"];
"1000119" [label="(Call,ptrace_read_user(child, addr, datap))"];
"1000207" [label="(ControlStructure,break;)"];
"1000117" [label="(Call,ret = ptrace_read_user(child, addr, datap))"];
"1000110" [label="(Call,(unsigned long __user *) data)"];
"1000286" [label="(Call,ret = ptrace_sethbpregs(child, addr,\n\t\t\t\t\t\t(unsigned long __user *)data))"];
"1000246" [label="(Call,ret = copy_regset_from_user(child,\n\t\t\t\t\t\t    &user_arm_view, REGSET_VFP,\n\t\t\t\t\t\t    0, ARM_VFPREGS_SIZE,\n\t\t\t\t\t\t    datap))"];
"1000114" [label="(Identifier,request)"];
"1000306" [label="(Return,return ret;)"];
"1000159" [label="(Call,ret = copy_regset_to_user(child,\n\t\t\t\t\t\t  &user_arm_view, REGSET_FPR,\n\t\t\t\t\t\t  0, sizeof(union fp_state),\n\t\t\t\t\t\t  datap))"];
"1000229" [label="(Call,ptrace_setcrunchregs(child, datap))"];
"1000172" [label="(Call,ret = copy_regset_from_user(child,\n\t\t\t\t\t\t    &user_arm_view, REGSET_FPR,\n\t\t\t\t\t\t    0, sizeof(union fp_state),\n\t\t\t\t\t\t    datap))"];
"1000161" [label="(Call,copy_regset_to_user(child,\n\t\t\t\t\t\t  &user_arm_view, REGSET_FPR,\n\t\t\t\t\t\t  0, sizeof(union fp_state),\n\t\t\t\t\t\t  datap))"];
"1000108" [label="(Call,*datap = (unsigned long __user *) data)"];
"1000266" [label="(Call,ret = ptrace_gethbpregs(child, addr,\n\t\t\t\t\t\t(unsigned long __user *)data))"];
"1000308" [label="(MethodReturn,long)"];
"1000125" [label="(Call,ret = ptrace_write_user(child, addr, data))"];
"1000202" [label="(Call,task_thread_info(child)->tp_value)"];
"1000194" [label="(Call,ptrace_setwmmxregs(child, datap))"];
"1000201" [label="(Call,put_user(task_thread_info(child)->tp_value,\n \t\t\t\t       datap))"];
"1000105" [label="(Block,)"];
"1000300" [label="(Call,ptrace_request(child, request, addr, data))"];
"1000215" [label="(Call,ret = 0)"];
"1000115" [label="(Block,)"];
"1000206" [label="(Identifier,datap)"];
"1000271" [label="(Call,(unsigned long __user *)data)"];
"1000227" [label="(Call,ret = ptrace_setcrunchregs(child, datap))"];
"1000236" [label="(Call,copy_regset_to_user(child,\n\t\t\t\t\t\t  &user_arm_view, REGSET_VFP,\n\t\t\t\t\t\t  0, ARM_VFPREGS_SIZE,\n\t\t\t\t\t\t  datap))"];
"1000201" -> "1000199"  [label="AST: "];
"1000201" -> "1000206"  [label="CFG: "];
"1000202" -> "1000201"  [label="AST: "];
"1000206" -> "1000201"  [label="AST: "];
"1000199" -> "1000201"  [label="CFG: "];
"1000201" -> "1000308"  [label="DDG: datap"];
"1000201" -> "1000308"  [label="DDG: task_thread_info(child)->tp_value"];
"1000201" -> "1000199"  [label="DDG: task_thread_info(child)->tp_value"];
"1000201" -> "1000199"  [label="DDG: datap"];
"1000108" -> "1000201"  [label="DDG: datap"];
"1000108" -> "1000105"  [label="AST: "];
"1000108" -> "1000110"  [label="CFG: "];
"1000109" -> "1000108"  [label="AST: "];
"1000110" -> "1000108"  [label="AST: "];
"1000114" -> "1000108"  [label="CFG: "];
"1000108" -> "1000308"  [label="DDG: (unsigned long __user *) data"];
"1000108" -> "1000308"  [label="DDG: datap"];
"1000110" -> "1000108"  [label="DDG: data"];
"1000108" -> "1000119"  [label="DDG: datap"];
"1000108" -> "1000135"  [label="DDG: datap"];
"1000108" -> "1000148"  [label="DDG: datap"];
"1000108" -> "1000161"  [label="DDG: datap"];
"1000108" -> "1000174"  [label="DDG: datap"];
"1000108" -> "1000187"  [label="DDG: datap"];
"1000108" -> "1000194"  [label="DDG: datap"];
"1000108" -> "1000222"  [label="DDG: datap"];
"1000108" -> "1000229"  [label="DDG: datap"];
"1000108" -> "1000236"  [label="DDG: datap"];
"1000108" -> "1000248"  [label="DDG: datap"];
"1000110" -> "1000112"  [label="CFG: "];
"1000111" -> "1000110"  [label="AST: "];
"1000112" -> "1000110"  [label="AST: "];
"1000110" -> "1000308"  [label="DDG: data"];
"1000104" -> "1000110"  [label="DDG: data"];
"1000110" -> "1000127"  [label="DDG: data"];
"1000110" -> "1000209"  [label="DDG: data"];
"1000110" -> "1000271"  [label="DDG: data"];
"1000110" -> "1000291"  [label="DDG: data"];
"1000110" -> "1000300"  [label="DDG: data"];
"1000104" -> "1000100"  [label="AST: "];
"1000104" -> "1000308"  [label="DDG: data"];
"1000104" -> "1000127"  [label="DDG: data"];
"1000104" -> "1000209"  [label="DDG: data"];
"1000104" -> "1000271"  [label="DDG: data"];
"1000104" -> "1000291"  [label="DDG: data"];
"1000104" -> "1000300"  [label="DDG: data"];
"1000199" -> "1000115"  [label="AST: "];
"1000200" -> "1000199"  [label="AST: "];
"1000207" -> "1000199"  [label="CFG: "];
"1000199" -> "1000308"  [label="DDG: put_user(task_thread_info(child)->tp_value,\n \t\t\t\t       datap)"];
"1000199" -> "1000308"  [label="DDG: ret"];
"1000199" -> "1000306"  [label="DDG: ret"];
"1000306" -> "1000105"  [label="AST: "];
"1000306" -> "1000307"  [label="CFG: "];
"1000307" -> "1000306"  [label="AST: "];
"1000308" -> "1000306"  [label="CFG: "];
"1000306" -> "1000308"  [label="DDG: <RET>"];
"1000307" -> "1000306"  [label="DDG: ret"];
"1000220" -> "1000306"  [label="DDG: ret"];
"1000234" -> "1000306"  [label="DDG: ret"];
"1000298" -> "1000306"  [label="DDG: ret"];
"1000117" -> "1000306"  [label="DDG: ret"];
"1000146" -> "1000306"  [label="DDG: ret"];
"1000246" -> "1000306"  [label="DDG: ret"];
"1000185" -> "1000306"  [label="DDG: ret"];
"1000125" -> "1000306"  [label="DDG: ret"];
"1000215" -> "1000306"  [label="DDG: ret"];
"1000286" -> "1000306"  [label="DDG: ret"];
"1000159" -> "1000306"  [label="DDG: ret"];
"1000227" -> "1000306"  [label="DDG: ret"];
"1000266" -> "1000306"  [label="DDG: ret"];
"1000133" -> "1000306"  [label="DDG: ret"];
"1000192" -> "1000306"  [label="DDG: ret"];
"1000172" -> "1000306"  [label="DDG: ret"];
}
