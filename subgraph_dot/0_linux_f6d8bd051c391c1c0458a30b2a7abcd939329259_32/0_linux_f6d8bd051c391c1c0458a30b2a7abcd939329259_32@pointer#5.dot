digraph "0_linux_f6d8bd051c391c1c0458a30b2a7abcd939329259_32@pointer" {
"1000839" [label="(Call,msg->msg_flags&MSG_PROBE)"];
"1000617" [label="(Call,msg->msg_flags&MSG_CONFIRM)"];
"1000178" [label="(Call,msg->msg_flags & MSG_OOB)"];
"1000162" [label="(Call,msg->msg_flags&MSG_MORE)"];
"1000465" [label="(Call,msg->msg_flags & MSG_DONTROUTE)"];
"1000649" [label="(Call,ip_make_skb(sk, getfrag, msg->msg_iov, ulen,\n\t\t\t\t  sizeof(struct udphdr), &ipc, &rt,\n\t\t\t\t  msg->msg_flags))"];
"1000647" [label="(Call,skb = ip_make_skb(sk, getfrag, msg->msg_iov, ulen,\n\t\t\t\t  sizeof(struct udphdr), &ipc, &rt,\n\t\t\t\t  msg->msg_flags))"];
"1000667" [label="(Call,PTR_ERR(skb))"];
"1000665" [label="(Call,err = PTR_ERR(skb))"];
"1000804" [label="(Call,!err)"];
"1000810" [label="(Call,err == -ENOBUFS)"];
"1000809" [label="(Call,err == -ENOBUFS || test_bit(SOCK_NOSPACE, &sk->sk_socket->flags))"];
"1000828" [label="(Return,return err;)"];
"1000670" [label="(Call,skb && !IS_ERR(skb))"];
"1000677" [label="(Call,udp_send_skb(skb, daddr, dport))"];
"1000675" [label="(Call,err = udp_send_skb(skb, daddr, dport))"];
"1000673" [label="(Call,IS_ERR(skb))"];
"1000672" [label="(Call,!IS_ERR(skb))"];
"1000824" [label="(Call,sock_net(sk))"];
"1000823" [label="(Call,UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\tUDP_MIB_SNDBUFERRORS, is_udplite))"];
"1000744" [label="(Call,ip_append_data(sk, getfrag, msg->msg_iov, ulen,\n\t\t\tsizeof(struct udphdr), &ipc, &rt,\n\t\t\tcorkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags))"];
"1000742" [label="(Call,err = ip_append_data(sk, getfrag, msg->msg_iov, ulen,\n\t\t\tsizeof(struct udphdr), &ipc, &rt,\n\t\t\tcorkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags))"];
"1000769" [label="(Call,udp_flush_pending_frames(sk))"];
"1000792" [label="(Call,release_sock(sk))"];
"1000777" [label="(Call,udp_push_pending_frames(sk))"];
"1000775" [label="(Call,err = udp_push_pending_frames(sk))"];
"1000759" [label="(Call,msg->msg_flags|MSG_MORE)"];
"1000757" [label="(Call,corkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags)"];
"1000838" [label="(Call,!(msg->msg_flags&MSG_PROBE))"];
"1000837" [label="(Call,!(msg->msg_flags&MSG_PROBE) || len)"];
"1000806" [label="(Return,return len;)"];
"1000182" [label="(Identifier,MSG_OOB)"];
"1000464" [label="(Call,(msg->msg_flags & MSG_DONTROUTE) ||\n\t    (ipc.opt && ipc.opt->opt.is_strictroute))"];
"1000128" [label="(Call,ulen = len)"];
"1000646" [label="(Block,)"];
"1000681" [label="(ControlStructure,goto out;)"];
"1000618" [label="(Call,msg->msg_flags)"];
"1000827" [label="(Identifier,is_udplite)"];
"1000652" [label="(Call,msg->msg_iov)"];
"1000671" [label="(Identifier,skb)"];
"1000839" [label="(Call,msg->msg_flags&MSG_PROBE)"];
"1000609" [label="(Call,sk_dst_set(sk, dst_clone(&rt->dst)))"];
"1000747" [label="(Call,msg->msg_iov)"];
"1000591" [label="(Call,err = -EACCES)"];
"1000178" [label="(Call,msg->msg_flags & MSG_OOB)"];
"1000461" [label="(Call,sock_flag(sk, SOCK_LOCALROUTE))"];
"1000678" [label="(Identifier,skb)"];
"1000843" [label="(Identifier,MSG_PROBE)"];
"1000162" [label="(Call,msg->msg_flags&MSG_MORE)"];
"1000690" [label="(Call,release_sock(sk))"];
"1000753" [label="(Call,&ipc)"];
"1000814" [label="(Call,test_bit(SOCK_NOSPACE, &sk->sk_socket->flags))"];
"1000850" [label="(MethodReturn,int)"];
"1000822" [label="(Block,)"];
"1000634" [label="(Call,daddr = ipc.addr = rt->rt_dst)"];
"1000115" [label="(Block,)"];
"1000179" [label="(Call,msg->msg_flags)"];
"1000114" [label="(MethodParameterIn,size_t len)"];
"1000647" [label="(Call,skb = ip_make_skb(sk, getfrag, msg->msg_iov, ulen,\n\t\t\t\t  sizeof(struct udphdr), &ipc, &rt,\n\t\t\t\t  msg->msg_flags))"];
"1000669" [label="(ControlStructure,if (skb && !IS_ERR(skb)))"];
"1000793" [label="(Identifier,sk)"];
"1000675" [label="(Call,err = udp_send_skb(skb, daddr, dport))"];
"1000811" [label="(Identifier,err)"];
"1000772" [label="(ControlStructure,if (!corkreq))"];
"1000755" [label="(Call,&rt)"];
"1000758" [label="(Identifier,corkreq)"];
"1000649" [label="(Call,ip_make_skb(sk, getfrag, msg->msg_iov, ulen,\n\t\t\t\t  sizeof(struct udphdr), &ipc, &rt,\n\t\t\t\t  msg->msg_flags))"];
"1000617" [label="(Call,msg->msg_flags&MSG_CONFIRM)"];
"1000177" [label="(ControlStructure,if (msg->msg_flags & MSG_OOB))"];
"1000603" [label="(Call,sock_flag(sk, SOCK_BROADCAST))"];
"1000760" [label="(Call,msg->msg_flags)"];
"1000769" [label="(Call,udp_flush_pending_frames(sk))"];
"1000837" [label="(Call,!(msg->msg_flags&MSG_PROBE) || len)"];
"1000171" [label="(Call,len > 0xFFFF)"];
"1000650" [label="(Identifier,sk)"];
"1000672" [label="(Call,!IS_ERR(skb))"];
"1000489" [label="(Call,ipv4_is_multicast(daddr))"];
"1000805" [label="(Identifier,err)"];
"1000847" [label="(Identifier,err)"];
"1000836" [label="(ControlStructure,if (!(msg->msg_flags&MSG_PROBE) || len))"];
"1000288" [label="(Call,dport == 0)"];
"1000682" [label="(Call,lock_sock(sk))"];
"1000231" [label="(Call,ulen += sizeof(struct udphdr))"];
"1000807" [label="(Identifier,len)"];
"1000778" [label="(Identifier,sk)"];
"1000670" [label="(Call,skb && !IS_ERR(skb))"];
"1000310" [label="(Call,dport = inet->inet_dport)"];
"1000521" [label="(Call,sk_dst_check(sk, 0))"];
"1000351" [label="(Call,ip_cmsg_send(sock_net(sk), msg, &ipc))"];
"1000794" [label="(JumpTarget,out:)"];
"1000648" [label="(Identifier,skb)"];
"1000677" [label="(Call,udp_send_skb(skb, daddr, dport))"];
"1000658" [label="(Call,&ipc)"];
"1000845" [label="(ControlStructure,goto back_from_confirm;)"];
"1000763" [label="(Identifier,MSG_MORE)"];
"1000804" [label="(Call,!err)"];
"1000622" [label="(ControlStructure,goto do_confirm;)"];
"1000767" [label="(ControlStructure,if (err))"];
"1000810" [label="(Call,err == -ENOBUFS)"];
"1000666" [label="(Identifier,err)"];
"1000840" [label="(Call,msg->msg_flags)"];
"1000742" [label="(Call,err = ip_append_data(sk, getfrag, msg->msg_iov, ulen,\n\t\t\tsizeof(struct udphdr), &ipc, &rt,\n\t\t\tcorkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags))"];
"1000535" [label="(Call,flowi4_init_output(&fl4, ipc.oif, sk->sk_mark, tos,\n\t\t\t\t   RT_SCOPE_UNIVERSE, sk->sk_protocol,\n\t\t\t\t   inet_sk_flowi_flags(sk)|FLOWI_FLAG_CAN_SLEEP,\n\t\t\t\t   faddr, saddr, dport, inet->inet_sport))"];
"1000465" [label="(Call,msg->msg_flags & MSG_DONTROUTE)"];
"1000829" [label="(Identifier,err)"];
"1000777" [label="(Call,udp_push_pending_frames(sk))"];
"1000792" [label="(Call,release_sock(sk))"];
"1000656" [label="(Call,sizeof(struct udphdr))"];
"1000744" [label="(Call,ip_append_data(sk, getfrag, msg->msg_iov, ulen,\n\t\t\tsizeof(struct udphdr), &ipc, &rt,\n\t\t\tcorkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags))"];
"1000621" [label="(Identifier,MSG_CONFIRM)"];
"1000826" [label="(Identifier,UDP_MIB_SNDBUFERRORS)"];
"1000776" [label="(Identifier,err)"];
"1000623" [label="(JumpTarget,back_from_confirm:)"];
"1000809" [label="(Call,err == -ENOBUFS || test_bit(SOCK_NOSPACE, &sk->sk_socket->flags))"];
"1000655" [label="(Identifier,ulen)"];
"1000692" [label="(Call,err = -EINVAL)"];
"1000665" [label="(Call,err = PTR_ERR(skb))"];
"1000679" [label="(Identifier,daddr)"];
"1000757" [label="(Call,corkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags)"];
"1000815" [label="(Identifier,SOCK_NOSPACE)"];
"1000745" [label="(Identifier,sk)"];
"1000768" [label="(Identifier,err)"];
"1000838" [label="(Call,!(msg->msg_flags&MSG_PROBE))"];
"1000825" [label="(Identifier,sk)"];
"1000662" [label="(Call,msg->msg_flags)"];
"1000158" [label="(Call,up->corkflag || msg->msg_flags&MSG_MORE)"];
"1000680" [label="(Identifier,dport)"];
"1000759" [label="(Call,msg->msg_flags|MSG_MORE)"];
"1000667" [label="(Call,PTR_ERR(skb))"];
"1000674" [label="(Identifier,skb)"];
"1000166" [label="(Identifier,MSG_MORE)"];
"1000188" [label="(Identifier,ipc)"];
"1000846" [label="(Call,err = 0)"];
"1000196" [label="(Call,getfrag = is_udplite ? udplite_getfrag : ip_generic_getfrag)"];
"1000750" [label="(Identifier,ulen)"];
"1000828" [label="(Return,return err;)"];
"1000803" [label="(ControlStructure,if (!err))"];
"1000660" [label="(Call,&rt)"];
"1000775" [label="(Call,err = udp_push_pending_frames(sk))"];
"1000466" [label="(Call,msg->msg_flags)"];
"1000751" [label="(Call,sizeof(struct udphdr))"];
"1000616" [label="(ControlStructure,if (msg->msg_flags&MSG_CONFIRM))"];
"1000824" [label="(Call,sock_net(sk))"];
"1000743" [label="(Identifier,err)"];
"1000472" [label="(Identifier,ipc)"];
"1000207" [label="(Call,lock_sock(sk))"];
"1000764" [label="(Call,msg->msg_flags)"];
"1000112" [label="(MethodParameterIn,struct sock *sk)"];
"1000163" [label="(Call,msg->msg_flags)"];
"1000676" [label="(Identifier,err)"];
"1000808" [label="(ControlStructure,if (err == -ENOBUFS || test_bit(SOCK_NOSPACE, &sk->sk_socket->flags)))"];
"1000806" [label="(Return,return len;)"];
"1000823" [label="(Call,UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\tUDP_MIB_SNDBUFERRORS, is_udplite))"];
"1000746" [label="(Identifier,getfrag)"];
"1000812" [label="(Call,-ENOBUFS)"];
"1000469" [label="(Identifier,MSG_DONTROUTE)"];
"1000651" [label="(Identifier,getfrag)"];
"1000566" [label="(Call,ip_route_output_flow(net, &fl4, sk))"];
"1000673" [label="(Call,IS_ERR(skb))"];
"1000668" [label="(Identifier,skb)"];
"1000185" [label="(Identifier,EOPNOTSUPP)"];
"1000844" [label="(Identifier,len)"];
"1000770" [label="(Identifier,sk)"];
"1000583" [label="(Call,err == -ENETUNREACH)"];
"1000839" -> "1000838"  [label="AST: "];
"1000839" -> "1000843"  [label="CFG: "];
"1000840" -> "1000839"  [label="AST: "];
"1000843" -> "1000839"  [label="AST: "];
"1000838" -> "1000839"  [label="CFG: "];
"1000839" -> "1000850"  [label="DDG: MSG_PROBE"];
"1000839" -> "1000850"  [label="DDG: msg->msg_flags"];
"1000839" -> "1000649"  [label="DDG: msg->msg_flags"];
"1000839" -> "1000744"  [label="DDG: msg->msg_flags"];
"1000839" -> "1000759"  [label="DDG: msg->msg_flags"];
"1000839" -> "1000757"  [label="DDG: msg->msg_flags"];
"1000839" -> "1000838"  [label="DDG: msg->msg_flags"];
"1000839" -> "1000838"  [label="DDG: MSG_PROBE"];
"1000617" -> "1000839"  [label="DDG: msg->msg_flags"];
"1000617" -> "1000616"  [label="AST: "];
"1000617" -> "1000621"  [label="CFG: "];
"1000618" -> "1000617"  [label="AST: "];
"1000621" -> "1000617"  [label="AST: "];
"1000622" -> "1000617"  [label="CFG: "];
"1000623" -> "1000617"  [label="CFG: "];
"1000617" -> "1000850"  [label="DDG: msg->msg_flags"];
"1000617" -> "1000850"  [label="DDG: msg->msg_flags&MSG_CONFIRM"];
"1000617" -> "1000850"  [label="DDG: MSG_CONFIRM"];
"1000178" -> "1000617"  [label="DDG: msg->msg_flags"];
"1000465" -> "1000617"  [label="DDG: msg->msg_flags"];
"1000617" -> "1000649"  [label="DDG: msg->msg_flags"];
"1000617" -> "1000744"  [label="DDG: msg->msg_flags"];
"1000617" -> "1000759"  [label="DDG: msg->msg_flags"];
"1000617" -> "1000757"  [label="DDG: msg->msg_flags"];
"1000178" -> "1000177"  [label="AST: "];
"1000178" -> "1000182"  [label="CFG: "];
"1000179" -> "1000178"  [label="AST: "];
"1000182" -> "1000178"  [label="AST: "];
"1000185" -> "1000178"  [label="CFG: "];
"1000188" -> "1000178"  [label="CFG: "];
"1000178" -> "1000850"  [label="DDG: MSG_OOB"];
"1000178" -> "1000850"  [label="DDG: msg->msg_flags & MSG_OOB"];
"1000178" -> "1000850"  [label="DDG: msg->msg_flags"];
"1000162" -> "1000178"  [label="DDG: msg->msg_flags"];
"1000178" -> "1000465"  [label="DDG: msg->msg_flags"];
"1000178" -> "1000744"  [label="DDG: msg->msg_flags"];
"1000178" -> "1000759"  [label="DDG: msg->msg_flags"];
"1000178" -> "1000757"  [label="DDG: msg->msg_flags"];
"1000162" -> "1000158"  [label="AST: "];
"1000162" -> "1000166"  [label="CFG: "];
"1000163" -> "1000162"  [label="AST: "];
"1000166" -> "1000162"  [label="AST: "];
"1000158" -> "1000162"  [label="CFG: "];
"1000162" -> "1000850"  [label="DDG: MSG_MORE"];
"1000162" -> "1000850"  [label="DDG: msg->msg_flags"];
"1000162" -> "1000158"  [label="DDG: msg->msg_flags"];
"1000162" -> "1000158"  [label="DDG: MSG_MORE"];
"1000162" -> "1000759"  [label="DDG: MSG_MORE"];
"1000465" -> "1000464"  [label="AST: "];
"1000465" -> "1000469"  [label="CFG: "];
"1000466" -> "1000465"  [label="AST: "];
"1000469" -> "1000465"  [label="AST: "];
"1000472" -> "1000465"  [label="CFG: "];
"1000464" -> "1000465"  [label="CFG: "];
"1000465" -> "1000850"  [label="DDG: MSG_DONTROUTE"];
"1000465" -> "1000850"  [label="DDG: msg->msg_flags"];
"1000465" -> "1000464"  [label="DDG: msg->msg_flags"];
"1000465" -> "1000464"  [label="DDG: MSG_DONTROUTE"];
"1000649" -> "1000647"  [label="AST: "];
"1000649" -> "1000662"  [label="CFG: "];
"1000650" -> "1000649"  [label="AST: "];
"1000651" -> "1000649"  [label="AST: "];
"1000652" -> "1000649"  [label="AST: "];
"1000655" -> "1000649"  [label="AST: "];
"1000656" -> "1000649"  [label="AST: "];
"1000658" -> "1000649"  [label="AST: "];
"1000660" -> "1000649"  [label="AST: "];
"1000662" -> "1000649"  [label="AST: "];
"1000647" -> "1000649"  [label="CFG: "];
"1000649" -> "1000850"  [label="DDG: sk"];
"1000649" -> "1000850"  [label="DDG: ulen"];
"1000649" -> "1000850"  [label="DDG: getfrag"];
"1000649" -> "1000850"  [label="DDG: &rt"];
"1000649" -> "1000850"  [label="DDG: msg->msg_flags"];
"1000649" -> "1000850"  [label="DDG: msg->msg_iov"];
"1000649" -> "1000850"  [label="DDG: &ipc"];
"1000649" -> "1000647"  [label="DDG: &rt"];
"1000649" -> "1000647"  [label="DDG: msg->msg_iov"];
"1000649" -> "1000647"  [label="DDG: msg->msg_flags"];
"1000649" -> "1000647"  [label="DDG: ulen"];
"1000649" -> "1000647"  [label="DDG: &ipc"];
"1000649" -> "1000647"  [label="DDG: sk"];
"1000649" -> "1000647"  [label="DDG: getfrag"];
"1000521" -> "1000649"  [label="DDG: sk"];
"1000609" -> "1000649"  [label="DDG: sk"];
"1000603" -> "1000649"  [label="DDG: sk"];
"1000566" -> "1000649"  [label="DDG: sk"];
"1000461" -> "1000649"  [label="DDG: sk"];
"1000112" -> "1000649"  [label="DDG: sk"];
"1000196" -> "1000649"  [label="DDG: getfrag"];
"1000231" -> "1000649"  [label="DDG: ulen"];
"1000351" -> "1000649"  [label="DDG: &ipc"];
"1000649" -> "1000824"  [label="DDG: sk"];
"1000647" -> "1000646"  [label="AST: "];
"1000648" -> "1000647"  [label="AST: "];
"1000666" -> "1000647"  [label="CFG: "];
"1000647" -> "1000850"  [label="DDG: ip_make_skb(sk, getfrag, msg->msg_iov, ulen,\n\t\t\t\t  sizeof(struct udphdr), &ipc, &rt,\n\t\t\t\t  msg->msg_flags)"];
"1000647" -> "1000667"  [label="DDG: skb"];
"1000667" -> "1000665"  [label="AST: "];
"1000667" -> "1000668"  [label="CFG: "];
"1000668" -> "1000667"  [label="AST: "];
"1000665" -> "1000667"  [label="CFG: "];
"1000667" -> "1000665"  [label="DDG: skb"];
"1000667" -> "1000670"  [label="DDG: skb"];
"1000667" -> "1000673"  [label="DDG: skb"];
"1000665" -> "1000646"  [label="AST: "];
"1000666" -> "1000665"  [label="AST: "];
"1000671" -> "1000665"  [label="CFG: "];
"1000665" -> "1000850"  [label="DDG: PTR_ERR(skb)"];
"1000665" -> "1000804"  [label="DDG: err"];
"1000804" -> "1000803"  [label="AST: "];
"1000804" -> "1000805"  [label="CFG: "];
"1000805" -> "1000804"  [label="AST: "];
"1000807" -> "1000804"  [label="CFG: "];
"1000811" -> "1000804"  [label="CFG: "];
"1000804" -> "1000850"  [label="DDG: err"];
"1000804" -> "1000850"  [label="DDG: !err"];
"1000692" -> "1000804"  [label="DDG: err"];
"1000675" -> "1000804"  [label="DDG: err"];
"1000775" -> "1000804"  [label="DDG: err"];
"1000583" -> "1000804"  [label="DDG: err"];
"1000591" -> "1000804"  [label="DDG: err"];
"1000742" -> "1000804"  [label="DDG: err"];
"1000846" -> "1000804"  [label="DDG: err"];
"1000804" -> "1000810"  [label="DDG: err"];
"1000810" -> "1000809"  [label="AST: "];
"1000810" -> "1000812"  [label="CFG: "];
"1000811" -> "1000810"  [label="AST: "];
"1000812" -> "1000810"  [label="AST: "];
"1000815" -> "1000810"  [label="CFG: "];
"1000809" -> "1000810"  [label="CFG: "];
"1000810" -> "1000850"  [label="DDG: err"];
"1000810" -> "1000850"  [label="DDG: -ENOBUFS"];
"1000810" -> "1000809"  [label="DDG: err"];
"1000810" -> "1000809"  [label="DDG: -ENOBUFS"];
"1000812" -> "1000810"  [label="DDG: ENOBUFS"];
"1000810" -> "1000828"  [label="DDG: err"];
"1000809" -> "1000808"  [label="AST: "];
"1000809" -> "1000814"  [label="CFG: "];
"1000814" -> "1000809"  [label="AST: "];
"1000825" -> "1000809"  [label="CFG: "];
"1000829" -> "1000809"  [label="CFG: "];
"1000809" -> "1000850"  [label="DDG: err == -ENOBUFS"];
"1000809" -> "1000850"  [label="DDG: test_bit(SOCK_NOSPACE, &sk->sk_socket->flags)"];
"1000809" -> "1000850"  [label="DDG: err == -ENOBUFS || test_bit(SOCK_NOSPACE, &sk->sk_socket->flags)"];
"1000814" -> "1000809"  [label="DDG: SOCK_NOSPACE"];
"1000814" -> "1000809"  [label="DDG: &sk->sk_socket->flags"];
"1000828" -> "1000115"  [label="AST: "];
"1000828" -> "1000829"  [label="CFG: "];
"1000829" -> "1000828"  [label="AST: "];
"1000850" -> "1000828"  [label="CFG: "];
"1000828" -> "1000850"  [label="DDG: <RET>"];
"1000829" -> "1000828"  [label="DDG: err"];
"1000670" -> "1000669"  [label="AST: "];
"1000670" -> "1000671"  [label="CFG: "];
"1000670" -> "1000672"  [label="CFG: "];
"1000671" -> "1000670"  [label="AST: "];
"1000672" -> "1000670"  [label="AST: "];
"1000676" -> "1000670"  [label="CFG: "];
"1000681" -> "1000670"  [label="CFG: "];
"1000670" -> "1000850"  [label="DDG: !IS_ERR(skb)"];
"1000670" -> "1000850"  [label="DDG: skb && !IS_ERR(skb)"];
"1000670" -> "1000850"  [label="DDG: skb"];
"1000673" -> "1000670"  [label="DDG: skb"];
"1000672" -> "1000670"  [label="DDG: IS_ERR(skb)"];
"1000670" -> "1000677"  [label="DDG: skb"];
"1000677" -> "1000675"  [label="AST: "];
"1000677" -> "1000680"  [label="CFG: "];
"1000678" -> "1000677"  [label="AST: "];
"1000679" -> "1000677"  [label="AST: "];
"1000680" -> "1000677"  [label="AST: "];
"1000675" -> "1000677"  [label="CFG: "];
"1000677" -> "1000850"  [label="DDG: skb"];
"1000677" -> "1000850"  [label="DDG: dport"];
"1000677" -> "1000850"  [label="DDG: daddr"];
"1000677" -> "1000675"  [label="DDG: skb"];
"1000677" -> "1000675"  [label="DDG: daddr"];
"1000677" -> "1000675"  [label="DDG: dport"];
"1000634" -> "1000677"  [label="DDG: daddr"];
"1000489" -> "1000677"  [label="DDG: daddr"];
"1000310" -> "1000677"  [label="DDG: dport"];
"1000535" -> "1000677"  [label="DDG: dport"];
"1000288" -> "1000677"  [label="DDG: dport"];
"1000675" -> "1000669"  [label="AST: "];
"1000676" -> "1000675"  [label="AST: "];
"1000681" -> "1000675"  [label="CFG: "];
"1000675" -> "1000850"  [label="DDG: udp_send_skb(skb, daddr, dport)"];
"1000673" -> "1000672"  [label="AST: "];
"1000673" -> "1000674"  [label="CFG: "];
"1000674" -> "1000673"  [label="AST: "];
"1000672" -> "1000673"  [label="CFG: "];
"1000673" -> "1000672"  [label="DDG: skb"];
"1000672" -> "1000850"  [label="DDG: IS_ERR(skb)"];
"1000824" -> "1000823"  [label="AST: "];
"1000824" -> "1000825"  [label="CFG: "];
"1000825" -> "1000824"  [label="AST: "];
"1000826" -> "1000824"  [label="CFG: "];
"1000824" -> "1000850"  [label="DDG: sk"];
"1000824" -> "1000823"  [label="DDG: sk"];
"1000609" -> "1000824"  [label="DDG: sk"];
"1000603" -> "1000824"  [label="DDG: sk"];
"1000566" -> "1000824"  [label="DDG: sk"];
"1000461" -> "1000824"  [label="DDG: sk"];
"1000690" -> "1000824"  [label="DDG: sk"];
"1000792" -> "1000824"  [label="DDG: sk"];
"1000521" -> "1000824"  [label="DDG: sk"];
"1000112" -> "1000824"  [label="DDG: sk"];
"1000823" -> "1000822"  [label="AST: "];
"1000823" -> "1000827"  [label="CFG: "];
"1000826" -> "1000823"  [label="AST: "];
"1000827" -> "1000823"  [label="AST: "];
"1000829" -> "1000823"  [label="CFG: "];
"1000823" -> "1000850"  [label="DDG: is_udplite"];
"1000823" -> "1000850"  [label="DDG: sock_net(sk)"];
"1000823" -> "1000850"  [label="DDG: UDP_INC_STATS_USER(sock_net(sk),\n\t\t\t\tUDP_MIB_SNDBUFERRORS, is_udplite)"];
"1000823" -> "1000850"  [label="DDG: UDP_MIB_SNDBUFERRORS"];
"1000744" -> "1000742"  [label="AST: "];
"1000744" -> "1000757"  [label="CFG: "];
"1000745" -> "1000744"  [label="AST: "];
"1000746" -> "1000744"  [label="AST: "];
"1000747" -> "1000744"  [label="AST: "];
"1000750" -> "1000744"  [label="AST: "];
"1000751" -> "1000744"  [label="AST: "];
"1000753" -> "1000744"  [label="AST: "];
"1000755" -> "1000744"  [label="AST: "];
"1000757" -> "1000744"  [label="AST: "];
"1000742" -> "1000744"  [label="CFG: "];
"1000744" -> "1000850"  [label="DDG: corkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags"];
"1000744" -> "1000850"  [label="DDG: msg->msg_iov"];
"1000744" -> "1000850"  [label="DDG: ulen"];
"1000744" -> "1000850"  [label="DDG: &ipc"];
"1000744" -> "1000850"  [label="DDG: &rt"];
"1000744" -> "1000850"  [label="DDG: getfrag"];
"1000744" -> "1000742"  [label="DDG: ulen"];
"1000744" -> "1000742"  [label="DDG: msg->msg_iov"];
"1000744" -> "1000742"  [label="DDG: &ipc"];
"1000744" -> "1000742"  [label="DDG: corkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags"];
"1000744" -> "1000742"  [label="DDG: &rt"];
"1000744" -> "1000742"  [label="DDG: getfrag"];
"1000744" -> "1000742"  [label="DDG: sk"];
"1000682" -> "1000744"  [label="DDG: sk"];
"1000207" -> "1000744"  [label="DDG: sk"];
"1000112" -> "1000744"  [label="DDG: sk"];
"1000196" -> "1000744"  [label="DDG: getfrag"];
"1000128" -> "1000744"  [label="DDG: ulen"];
"1000231" -> "1000744"  [label="DDG: ulen"];
"1000351" -> "1000744"  [label="DDG: &ipc"];
"1000759" -> "1000744"  [label="DDG: msg->msg_flags"];
"1000759" -> "1000744"  [label="DDG: MSG_MORE"];
"1000744" -> "1000769"  [label="DDG: sk"];
"1000744" -> "1000777"  [label="DDG: sk"];
"1000744" -> "1000792"  [label="DDG: sk"];
"1000742" -> "1000115"  [label="AST: "];
"1000743" -> "1000742"  [label="AST: "];
"1000768" -> "1000742"  [label="CFG: "];
"1000742" -> "1000850"  [label="DDG: ip_append_data(sk, getfrag, msg->msg_iov, ulen,\n\t\t\tsizeof(struct udphdr), &ipc, &rt,\n\t\t\tcorkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags)"];
"1000769" -> "1000767"  [label="AST: "];
"1000769" -> "1000770"  [label="CFG: "];
"1000770" -> "1000769"  [label="AST: "];
"1000793" -> "1000769"  [label="CFG: "];
"1000769" -> "1000850"  [label="DDG: udp_flush_pending_frames(sk)"];
"1000112" -> "1000769"  [label="DDG: sk"];
"1000769" -> "1000792"  [label="DDG: sk"];
"1000792" -> "1000115"  [label="AST: "];
"1000792" -> "1000793"  [label="CFG: "];
"1000793" -> "1000792"  [label="AST: "];
"1000794" -> "1000792"  [label="CFG: "];
"1000792" -> "1000850"  [label="DDG: release_sock(sk)"];
"1000792" -> "1000850"  [label="DDG: sk"];
"1000777" -> "1000792"  [label="DDG: sk"];
"1000112" -> "1000792"  [label="DDG: sk"];
"1000777" -> "1000775"  [label="AST: "];
"1000777" -> "1000778"  [label="CFG: "];
"1000778" -> "1000777"  [label="AST: "];
"1000775" -> "1000777"  [label="CFG: "];
"1000777" -> "1000775"  [label="DDG: sk"];
"1000112" -> "1000777"  [label="DDG: sk"];
"1000775" -> "1000772"  [label="AST: "];
"1000776" -> "1000775"  [label="AST: "];
"1000793" -> "1000775"  [label="CFG: "];
"1000775" -> "1000850"  [label="DDG: udp_push_pending_frames(sk)"];
"1000759" -> "1000757"  [label="AST: "];
"1000759" -> "1000763"  [label="CFG: "];
"1000760" -> "1000759"  [label="AST: "];
"1000763" -> "1000759"  [label="AST: "];
"1000757" -> "1000759"  [label="CFG: "];
"1000759" -> "1000850"  [label="DDG: MSG_MORE"];
"1000759" -> "1000757"  [label="DDG: msg->msg_flags"];
"1000759" -> "1000757"  [label="DDG: MSG_MORE"];
"1000757" -> "1000764"  [label="CFG: "];
"1000758" -> "1000757"  [label="AST: "];
"1000764" -> "1000757"  [label="AST: "];
"1000757" -> "1000850"  [label="DDG: corkreq"];
"1000757" -> "1000850"  [label="DDG: msg->msg_flags|MSG_MORE"];
"1000757" -> "1000850"  [label="DDG: msg->msg_flags"];
"1000838" -> "1000837"  [label="AST: "];
"1000844" -> "1000838"  [label="CFG: "];
"1000837" -> "1000838"  [label="CFG: "];
"1000838" -> "1000850"  [label="DDG: msg->msg_flags&MSG_PROBE"];
"1000838" -> "1000837"  [label="DDG: msg->msg_flags&MSG_PROBE"];
"1000837" -> "1000836"  [label="AST: "];
"1000837" -> "1000844"  [label="CFG: "];
"1000844" -> "1000837"  [label="AST: "];
"1000845" -> "1000837"  [label="CFG: "];
"1000847" -> "1000837"  [label="CFG: "];
"1000837" -> "1000850"  [label="DDG: !(msg->msg_flags&MSG_PROBE)"];
"1000837" -> "1000850"  [label="DDG: len"];
"1000837" -> "1000850"  [label="DDG: !(msg->msg_flags&MSG_PROBE) || len"];
"1000837" -> "1000806"  [label="DDG: len"];
"1000171" -> "1000837"  [label="DDG: len"];
"1000114" -> "1000837"  [label="DDG: len"];
"1000806" -> "1000803"  [label="AST: "];
"1000806" -> "1000807"  [label="CFG: "];
"1000807" -> "1000806"  [label="AST: "];
"1000850" -> "1000806"  [label="CFG: "];
"1000806" -> "1000850"  [label="DDG: <RET>"];
"1000807" -> "1000806"  [label="DDG: len"];
"1000171" -> "1000806"  [label="DDG: len"];
"1000114" -> "1000806"  [label="DDG: len"];
}
