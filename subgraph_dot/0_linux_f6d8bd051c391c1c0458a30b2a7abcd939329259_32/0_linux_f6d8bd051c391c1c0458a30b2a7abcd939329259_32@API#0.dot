digraph "0_linux_f6d8bd051c391c1c0458a30b2a7abcd939329259_32@API" {
"1000675" [label="(Call,err = udp_send_skb(skb, daddr, dport))"];
"1000677" [label="(Call,udp_send_skb(skb, daddr, dport))"];
"1000670" [label="(Call,skb && !IS_ERR(skb))"];
"1000667" [label="(Call,PTR_ERR(skb))"];
"1000647" [label="(Call,skb = ip_make_skb(sk, getfrag, msg->msg_iov, ulen,\n\t\t\t\t  sizeof(struct udphdr), &ipc, &rt,\n\t\t\t\t  msg->msg_flags))"];
"1000649" [label="(Call,ip_make_skb(sk, getfrag, msg->msg_iov, ulen,\n\t\t\t\t  sizeof(struct udphdr), &ipc, &rt,\n\t\t\t\t  msg->msg_flags))"];
"1000521" [label="(Call,sk_dst_check(sk, 0))"];
"1000461" [label="(Call,sock_flag(sk, SOCK_LOCALROUTE))"];
"1000352" [label="(Call,sock_net(sk))"];
"1000334" [label="(Call,sock_tx_timestamp(sk, &ipc.tx_flags))"];
"1000153" [label="(Call,IS_UDPLITE(sk))"];
"1000124" [label="(Call,udp_sk(sk))"];
"1000119" [label="(Call,inet_sk(sk))"];
"1000112" [label="(MethodParameterIn,struct sock *sk)"];
"1000229" [label="(Call,release_sock(sk))"];
"1000207" [label="(Call,lock_sock(sk))"];
"1000191" [label="(Call,ipc.tx_flags = 0)"];
"1000609" [label="(Call,sk_dst_set(sk, dst_clone(&rt->dst)))"];
"1000603" [label="(Call,sock_flag(sk, SOCK_BROADCAST))"];
"1000566" [label="(Call,ip_route_output_flow(net, &fl4, sk))"];
"1000531" [label="(Call,*net = sock_net(sk))"];
"1000533" [label="(Call,sock_net(sk))"];
"1000561" [label="(Call,flowi4_to_flowi(&fl4))"];
"1000535" [label="(Call,flowi4_init_output(&fl4, ipc.oif, sk->sk_mark, tos,\n\t\t\t\t   RT_SCOPE_UNIVERSE, sk->sk_protocol,\n\t\t\t\t   inet_sk_flowi_flags(sk)|FLOWI_FLAG_CAN_SLEEP,\n\t\t\t\t   faddr, saddr, dport, inet->inet_sport))"];
"1000325" [label="(Call,ipc.oif = sk->sk_bound_dev_if)"];
"1000493" [label="(Call,!ipc.oif)"];
"1000497" [label="(Call,ipc.oif = inet->mc_index)"];
"1000482" [label="(Call,tos |= RTO_ONLINK)"];
"1000453" [label="(Call,tos = RT_TOS(inet->tos))"];
"1000455" [label="(Call,RT_TOS(inet->tos))"];
"1000549" [label="(Call,inet_sk_flowi_flags(sk)|FLOWI_FLAG_CAN_SLEEP)"];
"1000550" [label="(Call,inet_sk_flowi_flags(sk))"];
"1000441" [label="(Call,faddr = ipc.opt->opt.faddr)"];
"1000419" [label="(Call,faddr = daddr)"];
"1000305" [label="(Call,daddr = inet->inet_daddr)"];
"1000275" [label="(Call,daddr = usin->sin_addr.s_addr)"];
"1000507" [label="(Call,saddr = inet->mc_addr)"];
"1000505" [label="(Call,!saddr)"];
"1000410" [label="(Call,saddr = ipc.addr)"];
"1000318" [label="(Call,ipc.addr = inet->inet_saddr)"];
"1000310" [label="(Call,dport = inet->inet_dport)"];
"1000288" [label="(Call,dport == 0)"];
"1000282" [label="(Call,dport = usin->sin_port)"];
"1000559" [label="(Call,security_sk_classify_flow(sk, flowi4_to_flowi(&fl4)))"];
"1000611" [label="(Call,dst_clone(&rt->dst))"];
"1000196" [label="(Call,getfrag = is_udplite ? udplite_getfrag : ip_generic_getfrag)"];
"1000231" [label="(Call,ulen += sizeof(struct udphdr))"];
"1000128" [label="(Call,ulen = len)"];
"1000114" [label="(MethodParameterIn,size_t len)"];
"1000351" [label="(Call,ip_cmsg_send(sock_net(sk), msg, &ipc))"];
"1000113" [label="(MethodParameterIn,struct msghdr *msg)"];
"1000617" [label="(Call,msg->msg_flags&MSG_CONFIRM)"];
"1000178" [label="(Call,msg->msg_flags & MSG_OOB)"];
"1000162" [label="(Call,msg->msg_flags&MSG_MORE)"];
"1000465" [label="(Call,msg->msg_flags & MSG_DONTROUTE)"];
"1000839" [label="(Call,msg->msg_flags&MSG_PROBE)"];
"1000673" [label="(Call,IS_ERR(skb))"];
"1000672" [label="(Call,!IS_ERR(skb))"];
"1000634" [label="(Call,daddr = ipc.addr = rt->rt_dst)"];
"1000636" [label="(Call,ipc.addr = rt->rt_dst)"];
"1000489" [label="(Call,ipv4_is_multicast(daddr))"];
"1000436" [label="(Call,!daddr)"];
"1000804" [label="(Call,!err)"];
"1000810" [label="(Call,err == -ENOBUFS)"];
"1000809" [label="(Call,err == -ENOBUFS || test_bit(SOCK_NOSPACE, &sk->sk_socket->flags))"];
"1000828" [label="(Return,return err;)"];
"1000182" [label="(Identifier,MSG_OOB)"];
"1000509" [label="(Call,inet->mc_addr)"];
"1000564" [label="(Call,rt = ip_route_output_flow(net, &fl4, sk))"];
"1000326" [label="(Call,ipc.oif)"];
"1000467" [label="(Identifier,msg)"];
"1000486" [label="(Identifier,connected)"];
"1000128" [label="(Call,ulen = len)"];
"1000349" [label="(Call,err = ip_cmsg_send(sock_net(sk), msg, &ipc))"];
"1000462" [label="(Identifier,sk)"];
"1000646" [label="(Block,)"];
"1000464" [label="(Call,(msg->msg_flags & MSG_DONTROUTE) ||\n\t    (ipc.opt && ipc.opt->opt.is_strictroute))"];
"1000311" [label="(Identifier,dport)"];
"1000151" [label="(Call,is_udplite = IS_UDPLITE(sk))"];
"1000232" [label="(Identifier,ulen)"];
"1000522" [label="(Identifier,sk)"];
"1000681" [label="(ControlStructure,goto out;)"];
"1000610" [label="(Identifier,sk)"];
"1000212" [label="(Identifier,up)"];
"1000618" [label="(Call,msg->msg_flags)"];
"1000652" [label="(Call,msg->msg_iov)"];
"1000498" [label="(Call,ipc.oif)"];
"1000117" [label="(Call,*inet = inet_sk(sk))"];
"1000671" [label="(Identifier,skb)"];
"1000277" [label="(Call,usin->sin_addr.s_addr)"];
"1000505" [label="(Call,!saddr)"];
"1000636" [label="(Call,ipc.addr = rt->rt_dst)"];
"1000839" [label="(Call,msg->msg_flags&MSG_PROBE)"];
"1000290" [label="(Literal,0)"];
"1000609" [label="(Call,sk_dst_set(sk, dst_clone(&rt->dst)))"];
"1000494" [label="(Call,ipc.oif)"];
"1000591" [label="(Call,err = -EACCES)"];
"1000460" [label="(Call,sock_flag(sk, SOCK_LOCALROUTE) ||\n \t    (msg->msg_flags & MSG_DONTROUTE) ||\n\t    (ipc.opt && ipc.opt->opt.is_strictroute))"];
"1000441" [label="(Call,faddr = ipc.opt->opt.faddr)"];
"1000124" [label="(Call,udp_sk(sk))"];
"1000178" [label="(Call,msg->msg_flags & MSG_OOB)"];
"1000410" [label="(Call,saddr = ipc.addr)"];
"1000724" [label="(Call,fl4->fl4_sport = inet->inet_sport)"];
"1000678" [label="(Identifier,skb)"];
"1000461" [label="(Call,sock_flag(sk, SOCK_LOCALROUTE))"];
"1000690" [label="(Call,release_sock(sk))"];
"1000541" [label="(Call,sk->sk_mark)"];
"1000162" [label="(Call,msg->msg_flags&MSG_MORE)"];
"1000843" [label="(Identifier,MSG_PROBE)"];
"1000635" [label="(Identifier,daddr)"];
"1000814" [label="(Call,test_bit(SOCK_NOSPACE, &sk->sk_socket->flags))"];
"1000850" [label="(MethodReturn,int)"];
"1000275" [label="(Call,daddr = usin->sin_addr.s_addr)"];
"1000587" [label="(Call,IP_INC_STATS_BH(net, IPSTATS_MIB_OUTNOROUTES))"];
"1000233" [label="(Call,sizeof(struct udphdr))"];
"1000454" [label="(Identifier,tos)"];
"1000195" [label="(Literal,0)"];
"1000634" [label="(Call,daddr = ipc.addr = rt->rt_dst)"];
"1000154" [label="(Identifier,sk)"];
"1000115" [label="(Block,)"];
"1000533" [label="(Call,sock_net(sk))"];
"1000537" [label="(Identifier,fl4)"];
"1000463" [label="(Identifier,SOCK_LOCALROUTE)"];
"1000306" [label="(Identifier,daddr)"];
"1000179" [label="(Call,msg->msg_flags)"];
"1000114" [label="(MethodParameterIn,size_t len)"];
"1000647" [label="(Call,skb = ip_make_skb(sk, getfrag, msg->msg_iov, ulen,\n\t\t\t\t  sizeof(struct udphdr), &ipc, &rt,\n\t\t\t\t  msg->msg_flags))"];
"1000669" [label="(ControlStructure,if (skb && !IS_ERR(skb)))"];
"1000484" [label="(Identifier,RTO_ONLINK)"];
"1000709" [label="(Call,fl4->daddr = daddr)"];
"1000675" [label="(Call,err = udp_send_skb(skb, daddr, dport))"];
"1000352" [label="(Call,sock_net(sk))"];
"1000456" [label="(Call,inet->tos)"];
"1000811" [label="(Identifier,err)"];
"1000568" [label="(Call,&fl4)"];
"1000325" [label="(Call,ipc.oif = sk->sk_bound_dev_if)"];
"1000637" [label="(Call,ipc.addr)"];
"1000287" [label="(ControlStructure,if (dport == 0))"];
"1000319" [label="(Call,ipc.addr)"];
"1000649" [label="(Call,ip_make_skb(sk, getfrag, msg->msg_iov, ulen,\n\t\t\t\t  sizeof(struct udphdr), &ipc, &rt,\n\t\t\t\t  msg->msg_flags))"];
"1000617" [label="(Call,msg->msg_flags&MSG_CONFIRM)"];
"1000495" [label="(Identifier,ipc)"];
"1000334" [label="(Call,sock_tx_timestamp(sk, &ipc.tx_flags))"];
"1000335" [label="(Identifier,sk)"];
"1000177" [label="(ControlStructure,if (msg->msg_flags & MSG_OOB))"];
"1000603" [label="(Call,sock_flag(sk, SOCK_BROADCAST))"];
"1000513" [label="(Identifier,connected)"];
"1000483" [label="(Identifier,tos)"];
"1000206" [label="(Block,)"];
"1000769" [label="(Call,udp_flush_pending_frames(sk))"];
"1000171" [label="(Call,len > 0xFFFF)"];
"1000837" [label="(Call,!(msg->msg_flags&MSG_PROBE) || len)"];
"1000443" [label="(Call,ipc.opt->opt.faddr)"];
"1000453" [label="(Call,tos = RT_TOS(inet->tos))"];
"1000719" [label="(Call,fl4->fl4_dport = dport)"];
"1000120" [label="(Identifier,sk)"];
"1000546" [label="(Call,sk->sk_protocol)"];
"1000119" [label="(Call,inet_sk(sk))"];
"1000650" [label="(Identifier,sk)"];
"1000672" [label="(Call,!IS_ERR(skb))"];
"1000492" [label="(ControlStructure,if (!ipc.oif))"];
"1000488" [label="(ControlStructure,if (ipv4_is_multicast(daddr)))"];
"1000489" [label="(Call,ipv4_is_multicast(daddr))"];
"1000544" [label="(Identifier,tos)"];
"1000805" [label="(Identifier,err)"];
"1000451" [label="(Identifier,connected)"];
"1000619" [label="(Identifier,msg)"];
"1000288" [label="(Call,dport == 0)"];
"1000192" [label="(Call,ipc.tx_flags)"];
"1000682" [label="(Call,lock_sock(sk))"];
"1000231" [label="(Call,ulen += sizeof(struct udphdr))"];
"1000807" [label="(Identifier,len)"];
"1000607" [label="(ControlStructure,if (connected))"];
"1000670" [label="(Call,skb && !IS_ERR(skb))"];
"1000310" [label="(Call,dport = inet->inet_dport)"];
"1000521" [label="(Call,sk_dst_check(sk, 0))"];
"1000523" [label="(Literal,0)"];
"1000351" [label="(Call,ip_cmsg_send(sock_net(sk), msg, &ipc))"];
"1000318" [label="(Call,ipc.addr = inet->inet_saddr)"];
"1000677" [label="(Call,udp_send_skb(skb, daddr, dport))"];
"1000648" [label="(Identifier,skb)"];
"1000658" [label="(Call,&ipc)"];
"1000436" [label="(Call,!daddr)"];
"1000497" [label="(Call,ipc.oif = inet->mc_index)"];
"1000482" [label="(Call,tos |= RTO_ONLINK)"];
"1000437" [label="(Identifier,daddr)"];
"1000490" [label="(Identifier,daddr)"];
"1000737" [label="(Call,up->len += ulen)"];
"1000122" [label="(Call,*up = udp_sk(sk))"];
"1000804" [label="(Call,!err)"];
"1000602" [label="(Call,!sock_flag(sk, SOCK_BROADCAST))"];
"1000622" [label="(ControlStructure,goto do_confirm;)"];
"1000130" [label="(Identifier,len)"];
"1000810" [label="(Call,err == -ENOBUFS)"];
"1000666" [label="(Identifier,err)"];
"1000531" [label="(Call,*net = sock_net(sk))"];
"1000545" [label="(Identifier,RT_SCOPE_UNIVERSE)"];
"1000629" [label="(ControlStructure,if (!ipc.addr))"];
"1000440" [label="(Identifier,EINVAL)"];
"1000840" [label="(Call,msg->msg_flags)"];
"1000553" [label="(Identifier,faddr)"];
"1000604" [label="(Identifier,sk)"];
"1000204" [label="(Identifier,up)"];
"1000535" [label="(Call,flowi4_init_output(&fl4, ipc.oif, sk->sk_mark, tos,\n\t\t\t\t   RT_SCOPE_UNIVERSE, sk->sk_protocol,\n\t\t\t\t   inet_sk_flowi_flags(sk)|FLOWI_FLAG_CAN_SLEEP,\n\t\t\t\t   faddr, saddr, dport, inet->inet_sport))"];
"1000305" [label="(Call,daddr = inet->inet_daddr)"];
"1000742" [label="(Call,err = ip_append_data(sk, getfrag, msg->msg_iov, ulen,\n\t\t\tsizeof(struct udphdr), &ipc, &rt,\n\t\t\tcorkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags))"];
"1000538" [label="(Call,ipc.oif)"];
"1000536" [label="(Call,&fl4)"];
"1000465" [label="(Call,msg->msg_flags & MSG_DONTROUTE)"];
"1000829" [label="(Identifier,err)"];
"1000354" [label="(Identifier,msg)"];
"1000777" [label="(Call,udp_push_pending_frames(sk))"];
"1000289" [label="(Identifier,dport)"];
"1000792" [label="(Call,release_sock(sk))"];
"1000656" [label="(Call,sizeof(struct udphdr))"];
"1000744" [label="(Call,ip_append_data(sk, getfrag, msg->msg_iov, ulen,\n\t\t\tsizeof(struct udphdr), &ipc, &rt,\n\t\t\tcorkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags))"];
"1000230" [label="(Identifier,sk)"];
"1000611" [label="(Call,dst_clone(&rt->dst))"];
"1000153" [label="(Call,IS_UDPLITE(sk))"];
"1000320" [label="(Identifier,ipc)"];
"1000621" [label="(Identifier,MSG_CONFIRM)"];
"1000554" [label="(Identifier,saddr)"];
"1000567" [label="(Identifier,net)"];
"1000560" [label="(Identifier,sk)"];
"1000421" [label="(Identifier,daddr)"];
"1000532" [label="(Identifier,net)"];
"1000549" [label="(Call,inet_sk_flowi_flags(sk)|FLOWI_FLAG_CAN_SLEEP)"];
"1000623" [label="(JumpTarget,back_from_confirm:)"];
"1000809" [label="(Call,err == -ENOBUFS || test_bit(SOCK_NOSPACE, &sk->sk_socket->flags))"];
"1000655" [label="(Identifier,ulen)"];
"1000282" [label="(Call,dport = usin->sin_port)"];
"1000679" [label="(Identifier,daddr)"];
"1000665" [label="(Call,err = PTR_ERR(skb))"];
"1000329" [label="(Call,sk->sk_bound_dev_if)"];
"1000692" [label="(Call,err = -EINVAL)"];
"1000507" [label="(Call,saddr = inet->mc_addr)"];
"1000757" [label="(Call,corkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags)"];
"1000283" [label="(Identifier,dport)"];
"1000134" [label="(Identifier,rt)"];
"1000516" [label="(Identifier,connected)"];
"1000420" [label="(Identifier,faddr)"];
"1000815" [label="(Identifier,SOCK_NOSPACE)"];
"1000276" [label="(Identifier,daddr)"];
"1000417" [label="(Identifier,ipc)"];
"1000838" [label="(Call,!(msg->msg_flags&MSG_PROBE))"];
"1000336" [label="(Call,&ipc.tx_flags)"];
"1000825" [label="(Identifier,sk)"];
"1000662" [label="(Call,msg->msg_flags)"];
"1000158" [label="(Call,up->corkflag || msg->msg_flags&MSG_MORE)"];
"1000208" [label="(Identifier,sk)"];
"1000680" [label="(Identifier,dport)"];
"1000519" [label="(Call,(struct rtable *)sk_dst_check(sk, 0))"];
"1000612" [label="(Call,&rt->dst)"];
"1000759" [label="(Call,msg->msg_flags|MSG_MORE)"];
"1000667" [label="(Call,PTR_ERR(skb))"];
"1000481" [label="(Block,)"];
"1000327" [label="(Identifier,ipc)"];
"1000197" [label="(Identifier,getfrag)"];
"1000166" [label="(Identifier,MSG_MORE)"];
"1000674" [label="(Identifier,skb)"];
"1000188" [label="(Identifier,ipc)"];
"1000307" [label="(Call,inet->inet_daddr)"];
"1000198" [label="(Call,is_udplite ? udplite_getfrag : ip_generic_getfrag)"];
"1000562" [label="(Call,&fl4)"];
"1000196" [label="(Call,getfrag = is_udplite ? udplite_getfrag : ip_generic_getfrag)"];
"1000559" [label="(Call,security_sk_classify_flow(sk, flowi4_to_flowi(&fl4)))"];
"1000355" [label="(Call,&ipc)"];
"1000846" [label="(Call,err = 0)"];
"1000316" [label="(Identifier,connected)"];
"1000570" [label="(Identifier,sk)"];
"1000828" [label="(Return,return err;)"];
"1000191" [label="(Call,ipc.tx_flags = 0)"];
"1000411" [label="(Identifier,saddr)"];
"1000552" [label="(Identifier,FLOWI_FLAG_CAN_SLEEP)"];
"1000555" [label="(Identifier,dport)"];
"1000223" [label="(Call,release_sock(sk))"];
"1000803" [label="(ControlStructure,if (!err))"];
"1000332" [label="(Call,err = sock_tx_timestamp(sk, &ipc.tx_flags))"];
"1000284" [label="(Call,usin->sin_port)"];
"1000660" [label="(Call,&rt)"];
"1000565" [label="(Identifier,rt)"];
"1000499" [label="(Identifier,ipc)"];
"1000295" [label="(Block,)"];
"1000775" [label="(Call,err = udp_push_pending_frames(sk))"];
"1000466" [label="(Call,msg->msg_flags)"];
"1000504" [label="(ControlStructure,if (!saddr))"];
"1000113" [label="(MethodParameterIn,struct msghdr *msg)"];
"1000353" [label="(Identifier,sk)"];
"1000824" [label="(Call,sock_net(sk))"];
"1000616" [label="(ControlStructure,if (msg->msg_flags&MSG_CONFIRM))"];
"1000561" [label="(Call,flowi4_to_flowi(&fl4))"];
"1000312" [label="(Call,inet->inet_dport)"];
"1000501" [label="(Call,inet->mc_index)"];
"1000419" [label="(Call,faddr = daddr)"];
"1000812" [label="(Call,-ENOBUFS)"];
"1000237" [label="(Identifier,msg)"];
"1000129" [label="(Identifier,ulen)"];
"1000229" [label="(Call,release_sock(sk))"];
"1000207" [label="(Call,lock_sock(sk))"];
"1000556" [label="(Call,inet->inet_sport)"];
"1000508" [label="(Identifier,saddr)"];
"1000125" [label="(Identifier,sk)"];
"1000472" [label="(Identifier,ipc)"];
"1000506" [label="(Identifier,saddr)"];
"1000112" [label="(MethodParameterIn,struct sock *sk)"];
"1000293" [label="(Identifier,EINVAL)"];
"1000322" [label="(Call,inet->inet_saddr)"];
"1000163" [label="(Call,msg->msg_flags)"];
"1000676" [label="(Identifier,err)"];
"1000831" [label="(Call,dst_confirm(&rt->dst))"];
"1000551" [label="(Identifier,sk)"];
"1000493" [label="(Call,!ipc.oif)"];
"1000806" [label="(Return,return len;)"];
"1000528" [label="(Block,)"];
"1000434" [label="(Block,)"];
"1000645" [label="(Identifier,corkreq)"];
"1000808" [label="(ControlStructure,if (err == -ENOBUFS || test_bit(SOCK_NOSPACE, &sk->sk_socket->flags)))"];
"1000550" [label="(Call,inet_sk_flowi_flags(sk))"];
"1000412" [label="(Call,ipc.addr)"];
"1000469" [label="(Identifier,MSG_DONTROUTE)"];
"1000455" [label="(Call,RT_TOS(inet->tos))"];
"1000651" [label="(Identifier,getfrag)"];
"1000333" [label="(Identifier,err)"];
"1000673" [label="(Call,IS_ERR(skb))"];
"1000566" [label="(Call,ip_route_output_flow(net, &fl4, sk))"];
"1000668" [label="(Identifier,skb)"];
"1000415" [label="(Call,ipc.addr = faddr = daddr)"];
"1000640" [label="(Call,rt->rt_dst)"];
"1000442" [label="(Identifier,faddr)"];
"1000185" [label="(Identifier,EOPNOTSUPP)"];
"1000534" [label="(Identifier,sk)"];
"1000435" [label="(ControlStructure,if (!daddr))"];
"1000583" [label="(Call,err == -ENETUNREACH)"];
"1000239" [label="(Block,)"];
"1000605" [label="(Identifier,SOCK_BROADCAST)"];
"1000675" -> "1000669"  [label="AST: "];
"1000675" -> "1000677"  [label="CFG: "];
"1000676" -> "1000675"  [label="AST: "];
"1000677" -> "1000675"  [label="AST: "];
"1000681" -> "1000675"  [label="CFG: "];
"1000675" -> "1000850"  [label="DDG: udp_send_skb(skb, daddr, dport)"];
"1000677" -> "1000675"  [label="DDG: skb"];
"1000677" -> "1000675"  [label="DDG: daddr"];
"1000677" -> "1000675"  [label="DDG: dport"];
"1000675" -> "1000804"  [label="DDG: err"];
"1000677" -> "1000680"  [label="CFG: "];
"1000678" -> "1000677"  [label="AST: "];
"1000679" -> "1000677"  [label="AST: "];
"1000680" -> "1000677"  [label="AST: "];
"1000677" -> "1000850"  [label="DDG: skb"];
"1000677" -> "1000850"  [label="DDG: dport"];
"1000677" -> "1000850"  [label="DDG: daddr"];
"1000670" -> "1000677"  [label="DDG: skb"];
"1000634" -> "1000677"  [label="DDG: daddr"];
"1000489" -> "1000677"  [label="DDG: daddr"];
"1000310" -> "1000677"  [label="DDG: dport"];
"1000535" -> "1000677"  [label="DDG: dport"];
"1000288" -> "1000677"  [label="DDG: dport"];
"1000670" -> "1000669"  [label="AST: "];
"1000670" -> "1000671"  [label="CFG: "];
"1000670" -> "1000672"  [label="CFG: "];
"1000671" -> "1000670"  [label="AST: "];
"1000672" -> "1000670"  [label="AST: "];
"1000676" -> "1000670"  [label="CFG: "];
"1000681" -> "1000670"  [label="CFG: "];
"1000670" -> "1000850"  [label="DDG: !IS_ERR(skb)"];
"1000670" -> "1000850"  [label="DDG: skb && !IS_ERR(skb)"];
"1000670" -> "1000850"  [label="DDG: skb"];
"1000667" -> "1000670"  [label="DDG: skb"];
"1000673" -> "1000670"  [label="DDG: skb"];
"1000672" -> "1000670"  [label="DDG: IS_ERR(skb)"];
"1000667" -> "1000665"  [label="AST: "];
"1000667" -> "1000668"  [label="CFG: "];
"1000668" -> "1000667"  [label="AST: "];
"1000665" -> "1000667"  [label="CFG: "];
"1000667" -> "1000665"  [label="DDG: skb"];
"1000647" -> "1000667"  [label="DDG: skb"];
"1000667" -> "1000673"  [label="DDG: skb"];
"1000647" -> "1000646"  [label="AST: "];
"1000647" -> "1000649"  [label="CFG: "];
"1000648" -> "1000647"  [label="AST: "];
"1000649" -> "1000647"  [label="AST: "];
"1000666" -> "1000647"  [label="CFG: "];
"1000647" -> "1000850"  [label="DDG: ip_make_skb(sk, getfrag, msg->msg_iov, ulen,\n\t\t\t\t  sizeof(struct udphdr), &ipc, &rt,\n\t\t\t\t  msg->msg_flags)"];
"1000649" -> "1000647"  [label="DDG: &rt"];
"1000649" -> "1000647"  [label="DDG: msg->msg_iov"];
"1000649" -> "1000647"  [label="DDG: msg->msg_flags"];
"1000649" -> "1000647"  [label="DDG: ulen"];
"1000649" -> "1000647"  [label="DDG: &ipc"];
"1000649" -> "1000647"  [label="DDG: sk"];
"1000649" -> "1000647"  [label="DDG: getfrag"];
"1000649" -> "1000662"  [label="CFG: "];
"1000650" -> "1000649"  [label="AST: "];
"1000651" -> "1000649"  [label="AST: "];
"1000652" -> "1000649"  [label="AST: "];
"1000655" -> "1000649"  [label="AST: "];
"1000656" -> "1000649"  [label="AST: "];
"1000658" -> "1000649"  [label="AST: "];
"1000660" -> "1000649"  [label="AST: "];
"1000662" -> "1000649"  [label="AST: "];
"1000649" -> "1000850"  [label="DDG: sk"];
"1000649" -> "1000850"  [label="DDG: ulen"];
"1000649" -> "1000850"  [label="DDG: getfrag"];
"1000649" -> "1000850"  [label="DDG: &rt"];
"1000649" -> "1000850"  [label="DDG: msg->msg_flags"];
"1000649" -> "1000850"  [label="DDG: msg->msg_iov"];
"1000649" -> "1000850"  [label="DDG: &ipc"];
"1000521" -> "1000649"  [label="DDG: sk"];
"1000609" -> "1000649"  [label="DDG: sk"];
"1000603" -> "1000649"  [label="DDG: sk"];
"1000566" -> "1000649"  [label="DDG: sk"];
"1000461" -> "1000649"  [label="DDG: sk"];
"1000112" -> "1000649"  [label="DDG: sk"];
"1000196" -> "1000649"  [label="DDG: getfrag"];
"1000231" -> "1000649"  [label="DDG: ulen"];
"1000351" -> "1000649"  [label="DDG: &ipc"];
"1000617" -> "1000649"  [label="DDG: msg->msg_flags"];
"1000839" -> "1000649"  [label="DDG: msg->msg_flags"];
"1000649" -> "1000824"  [label="DDG: sk"];
"1000521" -> "1000519"  [label="AST: "];
"1000521" -> "1000523"  [label="CFG: "];
"1000522" -> "1000521"  [label="AST: "];
"1000523" -> "1000521"  [label="AST: "];
"1000519" -> "1000521"  [label="CFG: "];
"1000521" -> "1000850"  [label="DDG: sk"];
"1000521" -> "1000519"  [label="DDG: sk"];
"1000521" -> "1000519"  [label="DDG: 0"];
"1000461" -> "1000521"  [label="DDG: sk"];
"1000112" -> "1000521"  [label="DDG: sk"];
"1000521" -> "1000533"  [label="DDG: sk"];
"1000521" -> "1000682"  [label="DDG: sk"];
"1000521" -> "1000824"  [label="DDG: sk"];
"1000461" -> "1000460"  [label="AST: "];
"1000461" -> "1000463"  [label="CFG: "];
"1000462" -> "1000461"  [label="AST: "];
"1000463" -> "1000461"  [label="AST: "];
"1000467" -> "1000461"  [label="CFG: "];
"1000460" -> "1000461"  [label="CFG: "];
"1000461" -> "1000850"  [label="DDG: SOCK_LOCALROUTE"];
"1000461" -> "1000850"  [label="DDG: sk"];
"1000461" -> "1000460"  [label="DDG: sk"];
"1000461" -> "1000460"  [label="DDG: SOCK_LOCALROUTE"];
"1000352" -> "1000461"  [label="DDG: sk"];
"1000334" -> "1000461"  [label="DDG: sk"];
"1000112" -> "1000461"  [label="DDG: sk"];
"1000461" -> "1000533"  [label="DDG: sk"];
"1000461" -> "1000682"  [label="DDG: sk"];
"1000461" -> "1000824"  [label="DDG: sk"];
"1000352" -> "1000351"  [label="AST: "];
"1000352" -> "1000353"  [label="CFG: "];
"1000353" -> "1000352"  [label="AST: "];
"1000354" -> "1000352"  [label="CFG: "];
"1000352" -> "1000850"  [label="DDG: sk"];
"1000352" -> "1000351"  [label="DDG: sk"];
"1000334" -> "1000352"  [label="DDG: sk"];
"1000112" -> "1000352"  [label="DDG: sk"];
"1000334" -> "1000332"  [label="AST: "];
"1000334" -> "1000336"  [label="CFG: "];
"1000335" -> "1000334"  [label="AST: "];
"1000336" -> "1000334"  [label="AST: "];
"1000332" -> "1000334"  [label="CFG: "];
"1000334" -> "1000850"  [label="DDG: &ipc.tx_flags"];
"1000334" -> "1000850"  [label="DDG: sk"];
"1000334" -> "1000332"  [label="DDG: sk"];
"1000334" -> "1000332"  [label="DDG: &ipc.tx_flags"];
"1000153" -> "1000334"  [label="DDG: sk"];
"1000229" -> "1000334"  [label="DDG: sk"];
"1000112" -> "1000334"  [label="DDG: sk"];
"1000191" -> "1000334"  [label="DDG: ipc.tx_flags"];
"1000153" -> "1000151"  [label="AST: "];
"1000153" -> "1000154"  [label="CFG: "];
"1000154" -> "1000153"  [label="AST: "];
"1000151" -> "1000153"  [label="CFG: "];
"1000153" -> "1000850"  [label="DDG: sk"];
"1000153" -> "1000151"  [label="DDG: sk"];
"1000124" -> "1000153"  [label="DDG: sk"];
"1000112" -> "1000153"  [label="DDG: sk"];
"1000153" -> "1000207"  [label="DDG: sk"];
"1000124" -> "1000122"  [label="AST: "];
"1000124" -> "1000125"  [label="CFG: "];
"1000125" -> "1000124"  [label="AST: "];
"1000122" -> "1000124"  [label="CFG: "];
"1000124" -> "1000122"  [label="DDG: sk"];
"1000119" -> "1000124"  [label="DDG: sk"];
"1000112" -> "1000124"  [label="DDG: sk"];
"1000119" -> "1000117"  [label="AST: "];
"1000119" -> "1000120"  [label="CFG: "];
"1000120" -> "1000119"  [label="AST: "];
"1000117" -> "1000119"  [label="CFG: "];
"1000119" -> "1000117"  [label="DDG: sk"];
"1000112" -> "1000119"  [label="DDG: sk"];
"1000112" -> "1000110"  [label="AST: "];
"1000112" -> "1000850"  [label="DDG: sk"];
"1000112" -> "1000207"  [label="DDG: sk"];
"1000112" -> "1000223"  [label="DDG: sk"];
"1000112" -> "1000229"  [label="DDG: sk"];
"1000112" -> "1000533"  [label="DDG: sk"];
"1000112" -> "1000550"  [label="DDG: sk"];
"1000112" -> "1000559"  [label="DDG: sk"];
"1000112" -> "1000566"  [label="DDG: sk"];
"1000112" -> "1000603"  [label="DDG: sk"];
"1000112" -> "1000609"  [label="DDG: sk"];
"1000112" -> "1000682"  [label="DDG: sk"];
"1000112" -> "1000690"  [label="DDG: sk"];
"1000112" -> "1000744"  [label="DDG: sk"];
"1000112" -> "1000769"  [label="DDG: sk"];
"1000112" -> "1000777"  [label="DDG: sk"];
"1000112" -> "1000792"  [label="DDG: sk"];
"1000112" -> "1000824"  [label="DDG: sk"];
"1000229" -> "1000206"  [label="AST: "];
"1000229" -> "1000230"  [label="CFG: "];
"1000230" -> "1000229"  [label="AST: "];
"1000232" -> "1000229"  [label="CFG: "];
"1000229" -> "1000850"  [label="DDG: release_sock(sk)"];
"1000229" -> "1000850"  [label="DDG: sk"];
"1000207" -> "1000229"  [label="DDG: sk"];
"1000207" -> "1000206"  [label="AST: "];
"1000207" -> "1000208"  [label="CFG: "];
"1000208" -> "1000207"  [label="AST: "];
"1000212" -> "1000207"  [label="CFG: "];
"1000207" -> "1000850"  [label="DDG: lock_sock(sk)"];
"1000207" -> "1000223"  [label="DDG: sk"];
"1000207" -> "1000744"  [label="DDG: sk"];
"1000191" -> "1000115"  [label="AST: "];
"1000191" -> "1000195"  [label="CFG: "];
"1000192" -> "1000191"  [label="AST: "];
"1000195" -> "1000191"  [label="AST: "];
"1000197" -> "1000191"  [label="CFG: "];
"1000191" -> "1000850"  [label="DDG: ipc.tx_flags"];
"1000609" -> "1000607"  [label="AST: "];
"1000609" -> "1000611"  [label="CFG: "];
"1000610" -> "1000609"  [label="AST: "];
"1000611" -> "1000609"  [label="AST: "];
"1000619" -> "1000609"  [label="CFG: "];
"1000609" -> "1000850"  [label="DDG: sk"];
"1000609" -> "1000850"  [label="DDG: dst_clone(&rt->dst)"];
"1000609" -> "1000850"  [label="DDG: sk_dst_set(sk, dst_clone(&rt->dst))"];
"1000603" -> "1000609"  [label="DDG: sk"];
"1000566" -> "1000609"  [label="DDG: sk"];
"1000611" -> "1000609"  [label="DDG: &rt->dst"];
"1000609" -> "1000682"  [label="DDG: sk"];
"1000609" -> "1000824"  [label="DDG: sk"];
"1000603" -> "1000602"  [label="AST: "];
"1000603" -> "1000605"  [label="CFG: "];
"1000604" -> "1000603"  [label="AST: "];
"1000605" -> "1000603"  [label="AST: "];
"1000602" -> "1000603"  [label="CFG: "];
"1000603" -> "1000850"  [label="DDG: sk"];
"1000603" -> "1000850"  [label="DDG: SOCK_BROADCAST"];
"1000603" -> "1000602"  [label="DDG: sk"];
"1000603" -> "1000602"  [label="DDG: SOCK_BROADCAST"];
"1000566" -> "1000603"  [label="DDG: sk"];
"1000603" -> "1000682"  [label="DDG: sk"];
"1000603" -> "1000824"  [label="DDG: sk"];
"1000566" -> "1000564"  [label="AST: "];
"1000566" -> "1000570"  [label="CFG: "];
"1000567" -> "1000566"  [label="AST: "];
"1000568" -> "1000566"  [label="AST: "];
"1000570" -> "1000566"  [label="AST: "];
"1000564" -> "1000566"  [label="CFG: "];
"1000566" -> "1000850"  [label="DDG: &fl4"];
"1000566" -> "1000850"  [label="DDG: net"];
"1000566" -> "1000850"  [label="DDG: sk"];
"1000566" -> "1000564"  [label="DDG: net"];
"1000566" -> "1000564"  [label="DDG: &fl4"];
"1000566" -> "1000564"  [label="DDG: sk"];
"1000531" -> "1000566"  [label="DDG: net"];
"1000561" -> "1000566"  [label="DDG: &fl4"];
"1000559" -> "1000566"  [label="DDG: sk"];
"1000566" -> "1000587"  [label="DDG: net"];
"1000566" -> "1000682"  [label="DDG: sk"];
"1000566" -> "1000824"  [label="DDG: sk"];
"1000531" -> "1000528"  [label="AST: "];
"1000531" -> "1000533"  [label="CFG: "];
"1000532" -> "1000531"  [label="AST: "];
"1000533" -> "1000531"  [label="AST: "];
"1000537" -> "1000531"  [label="CFG: "];
"1000531" -> "1000850"  [label="DDG: sock_net(sk)"];
"1000533" -> "1000531"  [label="DDG: sk"];
"1000533" -> "1000534"  [label="CFG: "];
"1000534" -> "1000533"  [label="AST: "];
"1000533" -> "1000550"  [label="DDG: sk"];
"1000561" -> "1000559"  [label="AST: "];
"1000561" -> "1000562"  [label="CFG: "];
"1000562" -> "1000561"  [label="AST: "];
"1000559" -> "1000561"  [label="CFG: "];
"1000561" -> "1000559"  [label="DDG: &fl4"];
"1000535" -> "1000561"  [label="DDG: &fl4"];
"1000535" -> "1000528"  [label="AST: "];
"1000535" -> "1000556"  [label="CFG: "];
"1000536" -> "1000535"  [label="AST: "];
"1000538" -> "1000535"  [label="AST: "];
"1000541" -> "1000535"  [label="AST: "];
"1000544" -> "1000535"  [label="AST: "];
"1000545" -> "1000535"  [label="AST: "];
"1000546" -> "1000535"  [label="AST: "];
"1000549" -> "1000535"  [label="AST: "];
"1000553" -> "1000535"  [label="AST: "];
"1000554" -> "1000535"  [label="AST: "];
"1000555" -> "1000535"  [label="AST: "];
"1000556" -> "1000535"  [label="AST: "];
"1000560" -> "1000535"  [label="CFG: "];
"1000535" -> "1000850"  [label="DDG: faddr"];
"1000535" -> "1000850"  [label="DDG: saddr"];
"1000535" -> "1000850"  [label="DDG: sk->sk_protocol"];
"1000535" -> "1000850"  [label="DDG: dport"];
"1000535" -> "1000850"  [label="DDG: inet->inet_sport"];
"1000535" -> "1000850"  [label="DDG: RT_SCOPE_UNIVERSE"];
"1000535" -> "1000850"  [label="DDG: tos"];
"1000535" -> "1000850"  [label="DDG: flowi4_init_output(&fl4, ipc.oif, sk->sk_mark, tos,\n\t\t\t\t   RT_SCOPE_UNIVERSE, sk->sk_protocol,\n\t\t\t\t   inet_sk_flowi_flags(sk)|FLOWI_FLAG_CAN_SLEEP,\n\t\t\t\t   faddr, saddr, dport, inet->inet_sport)"];
"1000535" -> "1000850"  [label="DDG: ipc.oif"];
"1000535" -> "1000850"  [label="DDG: inet_sk_flowi_flags(sk)|FLOWI_FLAG_CAN_SLEEP"];
"1000535" -> "1000850"  [label="DDG: sk->sk_mark"];
"1000325" -> "1000535"  [label="DDG: ipc.oif"];
"1000493" -> "1000535"  [label="DDG: ipc.oif"];
"1000497" -> "1000535"  [label="DDG: ipc.oif"];
"1000482" -> "1000535"  [label="DDG: tos"];
"1000453" -> "1000535"  [label="DDG: tos"];
"1000549" -> "1000535"  [label="DDG: inet_sk_flowi_flags(sk)"];
"1000549" -> "1000535"  [label="DDG: FLOWI_FLAG_CAN_SLEEP"];
"1000441" -> "1000535"  [label="DDG: faddr"];
"1000419" -> "1000535"  [label="DDG: faddr"];
"1000507" -> "1000535"  [label="DDG: saddr"];
"1000505" -> "1000535"  [label="DDG: saddr"];
"1000410" -> "1000535"  [label="DDG: saddr"];
"1000310" -> "1000535"  [label="DDG: dport"];
"1000288" -> "1000535"  [label="DDG: dport"];
"1000535" -> "1000719"  [label="DDG: dport"];
"1000535" -> "1000724"  [label="DDG: inet->inet_sport"];
"1000325" -> "1000115"  [label="AST: "];
"1000325" -> "1000329"  [label="CFG: "];
"1000326" -> "1000325"  [label="AST: "];
"1000329" -> "1000325"  [label="AST: "];
"1000333" -> "1000325"  [label="CFG: "];
"1000325" -> "1000850"  [label="DDG: ipc.oif"];
"1000325" -> "1000850"  [label="DDG: sk->sk_bound_dev_if"];
"1000325" -> "1000493"  [label="DDG: ipc.oif"];
"1000493" -> "1000492"  [label="AST: "];
"1000493" -> "1000494"  [label="CFG: "];
"1000494" -> "1000493"  [label="AST: "];
"1000499" -> "1000493"  [label="CFG: "];
"1000506" -> "1000493"  [label="CFG: "];
"1000493" -> "1000850"  [label="DDG: ipc.oif"];
"1000493" -> "1000850"  [label="DDG: !ipc.oif"];
"1000497" -> "1000492"  [label="AST: "];
"1000497" -> "1000501"  [label="CFG: "];
"1000498" -> "1000497"  [label="AST: "];
"1000501" -> "1000497"  [label="AST: "];
"1000506" -> "1000497"  [label="CFG: "];
"1000497" -> "1000850"  [label="DDG: ipc.oif"];
"1000497" -> "1000850"  [label="DDG: inet->mc_index"];
"1000482" -> "1000481"  [label="AST: "];
"1000482" -> "1000484"  [label="CFG: "];
"1000483" -> "1000482"  [label="AST: "];
"1000484" -> "1000482"  [label="AST: "];
"1000486" -> "1000482"  [label="CFG: "];
"1000482" -> "1000850"  [label="DDG: tos"];
"1000482" -> "1000850"  [label="DDG: RTO_ONLINK"];
"1000482" -> "1000850"  [label="DDG: tos |= RTO_ONLINK"];
"1000453" -> "1000482"  [label="DDG: tos"];
"1000453" -> "1000115"  [label="AST: "];
"1000453" -> "1000455"  [label="CFG: "];
"1000454" -> "1000453"  [label="AST: "];
"1000455" -> "1000453"  [label="AST: "];
"1000462" -> "1000453"  [label="CFG: "];
"1000453" -> "1000850"  [label="DDG: RT_TOS(inet->tos)"];
"1000453" -> "1000850"  [label="DDG: tos"];
"1000455" -> "1000453"  [label="DDG: inet->tos"];
"1000455" -> "1000456"  [label="CFG: "];
"1000456" -> "1000455"  [label="AST: "];
"1000455" -> "1000850"  [label="DDG: inet->tos"];
"1000549" -> "1000552"  [label="CFG: "];
"1000550" -> "1000549"  [label="AST: "];
"1000552" -> "1000549"  [label="AST: "];
"1000553" -> "1000549"  [label="CFG: "];
"1000549" -> "1000850"  [label="DDG: inet_sk_flowi_flags(sk)"];
"1000549" -> "1000850"  [label="DDG: FLOWI_FLAG_CAN_SLEEP"];
"1000550" -> "1000549"  [label="DDG: sk"];
"1000550" -> "1000551"  [label="CFG: "];
"1000551" -> "1000550"  [label="AST: "];
"1000552" -> "1000550"  [label="CFG: "];
"1000550" -> "1000559"  [label="DDG: sk"];
"1000441" -> "1000434"  [label="AST: "];
"1000441" -> "1000443"  [label="CFG: "];
"1000442" -> "1000441"  [label="AST: "];
"1000443" -> "1000441"  [label="AST: "];
"1000451" -> "1000441"  [label="CFG: "];
"1000441" -> "1000850"  [label="DDG: faddr"];
"1000441" -> "1000850"  [label="DDG: ipc.opt->opt.faddr"];
"1000419" -> "1000415"  [label="AST: "];
"1000419" -> "1000421"  [label="CFG: "];
"1000420" -> "1000419"  [label="AST: "];
"1000421" -> "1000419"  [label="AST: "];
"1000415" -> "1000419"  [label="CFG: "];
"1000419" -> "1000850"  [label="DDG: faddr"];
"1000419" -> "1000415"  [label="DDG: faddr"];
"1000305" -> "1000419"  [label="DDG: daddr"];
"1000275" -> "1000419"  [label="DDG: daddr"];
"1000305" -> "1000295"  [label="AST: "];
"1000305" -> "1000307"  [label="CFG: "];
"1000306" -> "1000305"  [label="AST: "];
"1000307" -> "1000305"  [label="AST: "];
"1000311" -> "1000305"  [label="CFG: "];
"1000305" -> "1000850"  [label="DDG: inet->inet_daddr"];
"1000305" -> "1000850"  [label="DDG: daddr"];
"1000305" -> "1000415"  [label="DDG: daddr"];
"1000305" -> "1000436"  [label="DDG: daddr"];
"1000305" -> "1000489"  [label="DDG: daddr"];
"1000275" -> "1000239"  [label="AST: "];
"1000275" -> "1000277"  [label="CFG: "];
"1000276" -> "1000275"  [label="AST: "];
"1000277" -> "1000275"  [label="AST: "];
"1000283" -> "1000275"  [label="CFG: "];
"1000275" -> "1000850"  [label="DDG: daddr"];
"1000275" -> "1000850"  [label="DDG: usin->sin_addr.s_addr"];
"1000275" -> "1000415"  [label="DDG: daddr"];
"1000275" -> "1000436"  [label="DDG: daddr"];
"1000275" -> "1000489"  [label="DDG: daddr"];
"1000507" -> "1000504"  [label="AST: "];
"1000507" -> "1000509"  [label="CFG: "];
"1000508" -> "1000507"  [label="AST: "];
"1000509" -> "1000507"  [label="AST: "];
"1000513" -> "1000507"  [label="CFG: "];
"1000507" -> "1000850"  [label="DDG: inet->mc_addr"];
"1000507" -> "1000850"  [label="DDG: saddr"];
"1000505" -> "1000504"  [label="AST: "];
"1000505" -> "1000506"  [label="CFG: "];
"1000506" -> "1000505"  [label="AST: "];
"1000508" -> "1000505"  [label="CFG: "];
"1000513" -> "1000505"  [label="CFG: "];
"1000505" -> "1000850"  [label="DDG: saddr"];
"1000505" -> "1000850"  [label="DDG: !saddr"];
"1000410" -> "1000505"  [label="DDG: saddr"];
"1000410" -> "1000115"  [label="AST: "];
"1000410" -> "1000412"  [label="CFG: "];
"1000411" -> "1000410"  [label="AST: "];
"1000412" -> "1000410"  [label="AST: "];
"1000417" -> "1000410"  [label="CFG: "];
"1000410" -> "1000850"  [label="DDG: saddr"];
"1000318" -> "1000410"  [label="DDG: ipc.addr"];
"1000318" -> "1000115"  [label="AST: "];
"1000318" -> "1000322"  [label="CFG: "];
"1000319" -> "1000318"  [label="AST: "];
"1000322" -> "1000318"  [label="AST: "];
"1000327" -> "1000318"  [label="CFG: "];
"1000318" -> "1000850"  [label="DDG: ipc.addr"];
"1000318" -> "1000850"  [label="DDG: inet->inet_saddr"];
"1000310" -> "1000295"  [label="AST: "];
"1000310" -> "1000312"  [label="CFG: "];
"1000311" -> "1000310"  [label="AST: "];
"1000312" -> "1000310"  [label="AST: "];
"1000316" -> "1000310"  [label="CFG: "];
"1000310" -> "1000850"  [label="DDG: inet->inet_dport"];
"1000310" -> "1000850"  [label="DDG: dport"];
"1000310" -> "1000719"  [label="DDG: dport"];
"1000288" -> "1000287"  [label="AST: "];
"1000288" -> "1000290"  [label="CFG: "];
"1000289" -> "1000288"  [label="AST: "];
"1000290" -> "1000288"  [label="AST: "];
"1000293" -> "1000288"  [label="CFG: "];
"1000320" -> "1000288"  [label="CFG: "];
"1000288" -> "1000850"  [label="DDG: dport"];
"1000288" -> "1000850"  [label="DDG: dport == 0"];
"1000282" -> "1000288"  [label="DDG: dport"];
"1000288" -> "1000719"  [label="DDG: dport"];
"1000282" -> "1000239"  [label="AST: "];
"1000282" -> "1000284"  [label="CFG: "];
"1000283" -> "1000282"  [label="AST: "];
"1000284" -> "1000282"  [label="AST: "];
"1000289" -> "1000282"  [label="CFG: "];
"1000282" -> "1000850"  [label="DDG: usin->sin_port"];
"1000559" -> "1000528"  [label="AST: "];
"1000560" -> "1000559"  [label="AST: "];
"1000565" -> "1000559"  [label="CFG: "];
"1000559" -> "1000850"  [label="DDG: security_sk_classify_flow(sk, flowi4_to_flowi(&fl4))"];
"1000559" -> "1000850"  [label="DDG: flowi4_to_flowi(&fl4)"];
"1000611" -> "1000612"  [label="CFG: "];
"1000612" -> "1000611"  [label="AST: "];
"1000611" -> "1000850"  [label="DDG: &rt->dst"];
"1000611" -> "1000831"  [label="DDG: &rt->dst"];
"1000196" -> "1000115"  [label="AST: "];
"1000196" -> "1000198"  [label="CFG: "];
"1000197" -> "1000196"  [label="AST: "];
"1000198" -> "1000196"  [label="AST: "];
"1000204" -> "1000196"  [label="CFG: "];
"1000196" -> "1000850"  [label="DDG: getfrag"];
"1000196" -> "1000850"  [label="DDG: is_udplite ? udplite_getfrag : ip_generic_getfrag"];
"1000196" -> "1000744"  [label="DDG: getfrag"];
"1000231" -> "1000115"  [label="AST: "];
"1000231" -> "1000233"  [label="CFG: "];
"1000232" -> "1000231"  [label="AST: "];
"1000233" -> "1000231"  [label="AST: "];
"1000237" -> "1000231"  [label="CFG: "];
"1000231" -> "1000850"  [label="DDG: ulen"];
"1000128" -> "1000231"  [label="DDG: ulen"];
"1000231" -> "1000737"  [label="DDG: ulen"];
"1000231" -> "1000744"  [label="DDG: ulen"];
"1000128" -> "1000115"  [label="AST: "];
"1000128" -> "1000130"  [label="CFG: "];
"1000129" -> "1000128"  [label="AST: "];
"1000130" -> "1000128"  [label="AST: "];
"1000134" -> "1000128"  [label="CFG: "];
"1000128" -> "1000850"  [label="DDG: ulen"];
"1000114" -> "1000128"  [label="DDG: len"];
"1000128" -> "1000737"  [label="DDG: ulen"];
"1000128" -> "1000744"  [label="DDG: ulen"];
"1000114" -> "1000110"  [label="AST: "];
"1000114" -> "1000850"  [label="DDG: len"];
"1000114" -> "1000171"  [label="DDG: len"];
"1000114" -> "1000806"  [label="DDG: len"];
"1000114" -> "1000837"  [label="DDG: len"];
"1000351" -> "1000349"  [label="AST: "];
"1000351" -> "1000355"  [label="CFG: "];
"1000354" -> "1000351"  [label="AST: "];
"1000355" -> "1000351"  [label="AST: "];
"1000349" -> "1000351"  [label="CFG: "];
"1000351" -> "1000850"  [label="DDG: sock_net(sk)"];
"1000351" -> "1000850"  [label="DDG: msg"];
"1000351" -> "1000850"  [label="DDG: &ipc"];
"1000351" -> "1000349"  [label="DDG: sock_net(sk)"];
"1000351" -> "1000349"  [label="DDG: msg"];
"1000351" -> "1000349"  [label="DDG: &ipc"];
"1000113" -> "1000351"  [label="DDG: msg"];
"1000351" -> "1000744"  [label="DDG: &ipc"];
"1000113" -> "1000110"  [label="AST: "];
"1000113" -> "1000850"  [label="DDG: msg"];
"1000617" -> "1000616"  [label="AST: "];
"1000617" -> "1000621"  [label="CFG: "];
"1000618" -> "1000617"  [label="AST: "];
"1000621" -> "1000617"  [label="AST: "];
"1000622" -> "1000617"  [label="CFG: "];
"1000623" -> "1000617"  [label="CFG: "];
"1000617" -> "1000850"  [label="DDG: msg->msg_flags"];
"1000617" -> "1000850"  [label="DDG: msg->msg_flags&MSG_CONFIRM"];
"1000617" -> "1000850"  [label="DDG: MSG_CONFIRM"];
"1000178" -> "1000617"  [label="DDG: msg->msg_flags"];
"1000465" -> "1000617"  [label="DDG: msg->msg_flags"];
"1000617" -> "1000744"  [label="DDG: msg->msg_flags"];
"1000617" -> "1000759"  [label="DDG: msg->msg_flags"];
"1000617" -> "1000757"  [label="DDG: msg->msg_flags"];
"1000617" -> "1000839"  [label="DDG: msg->msg_flags"];
"1000178" -> "1000177"  [label="AST: "];
"1000178" -> "1000182"  [label="CFG: "];
"1000179" -> "1000178"  [label="AST: "];
"1000182" -> "1000178"  [label="AST: "];
"1000185" -> "1000178"  [label="CFG: "];
"1000188" -> "1000178"  [label="CFG: "];
"1000178" -> "1000850"  [label="DDG: MSG_OOB"];
"1000178" -> "1000850"  [label="DDG: msg->msg_flags & MSG_OOB"];
"1000178" -> "1000850"  [label="DDG: msg->msg_flags"];
"1000162" -> "1000178"  [label="DDG: msg->msg_flags"];
"1000178" -> "1000465"  [label="DDG: msg->msg_flags"];
"1000178" -> "1000744"  [label="DDG: msg->msg_flags"];
"1000178" -> "1000759"  [label="DDG: msg->msg_flags"];
"1000178" -> "1000757"  [label="DDG: msg->msg_flags"];
"1000162" -> "1000158"  [label="AST: "];
"1000162" -> "1000166"  [label="CFG: "];
"1000163" -> "1000162"  [label="AST: "];
"1000166" -> "1000162"  [label="AST: "];
"1000158" -> "1000162"  [label="CFG: "];
"1000162" -> "1000850"  [label="DDG: MSG_MORE"];
"1000162" -> "1000850"  [label="DDG: msg->msg_flags"];
"1000162" -> "1000158"  [label="DDG: msg->msg_flags"];
"1000162" -> "1000158"  [label="DDG: MSG_MORE"];
"1000162" -> "1000759"  [label="DDG: MSG_MORE"];
"1000465" -> "1000464"  [label="AST: "];
"1000465" -> "1000469"  [label="CFG: "];
"1000466" -> "1000465"  [label="AST: "];
"1000469" -> "1000465"  [label="AST: "];
"1000472" -> "1000465"  [label="CFG: "];
"1000464" -> "1000465"  [label="CFG: "];
"1000465" -> "1000850"  [label="DDG: MSG_DONTROUTE"];
"1000465" -> "1000850"  [label="DDG: msg->msg_flags"];
"1000465" -> "1000464"  [label="DDG: msg->msg_flags"];
"1000465" -> "1000464"  [label="DDG: MSG_DONTROUTE"];
"1000839" -> "1000838"  [label="AST: "];
"1000839" -> "1000843"  [label="CFG: "];
"1000840" -> "1000839"  [label="AST: "];
"1000843" -> "1000839"  [label="AST: "];
"1000838" -> "1000839"  [label="CFG: "];
"1000839" -> "1000850"  [label="DDG: MSG_PROBE"];
"1000839" -> "1000850"  [label="DDG: msg->msg_flags"];
"1000839" -> "1000744"  [label="DDG: msg->msg_flags"];
"1000839" -> "1000759"  [label="DDG: msg->msg_flags"];
"1000839" -> "1000757"  [label="DDG: msg->msg_flags"];
"1000839" -> "1000838"  [label="DDG: msg->msg_flags"];
"1000839" -> "1000838"  [label="DDG: MSG_PROBE"];
"1000673" -> "1000672"  [label="AST: "];
"1000673" -> "1000674"  [label="CFG: "];
"1000674" -> "1000673"  [label="AST: "];
"1000672" -> "1000673"  [label="CFG: "];
"1000673" -> "1000672"  [label="DDG: skb"];
"1000672" -> "1000850"  [label="DDG: IS_ERR(skb)"];
"1000634" -> "1000629"  [label="AST: "];
"1000634" -> "1000636"  [label="CFG: "];
"1000635" -> "1000634"  [label="AST: "];
"1000636" -> "1000634"  [label="AST: "];
"1000645" -> "1000634"  [label="CFG: "];
"1000634" -> "1000850"  [label="DDG: daddr"];
"1000636" -> "1000634"  [label="DDG: ipc.addr"];
"1000634" -> "1000709"  [label="DDG: daddr"];
"1000636" -> "1000640"  [label="CFG: "];
"1000637" -> "1000636"  [label="AST: "];
"1000640" -> "1000636"  [label="AST: "];
"1000636" -> "1000850"  [label="DDG: rt->rt_dst"];
"1000636" -> "1000850"  [label="DDG: ipc.addr"];
"1000489" -> "1000488"  [label="AST: "];
"1000489" -> "1000490"  [label="CFG: "];
"1000490" -> "1000489"  [label="AST: "];
"1000495" -> "1000489"  [label="CFG: "];
"1000516" -> "1000489"  [label="CFG: "];
"1000489" -> "1000850"  [label="DDG: ipv4_is_multicast(daddr)"];
"1000489" -> "1000850"  [label="DDG: daddr"];
"1000436" -> "1000489"  [label="DDG: daddr"];
"1000489" -> "1000709"  [label="DDG: daddr"];
"1000436" -> "1000435"  [label="AST: "];
"1000436" -> "1000437"  [label="CFG: "];
"1000437" -> "1000436"  [label="AST: "];
"1000440" -> "1000436"  [label="CFG: "];
"1000442" -> "1000436"  [label="CFG: "];
"1000436" -> "1000850"  [label="DDG: !daddr"];
"1000436" -> "1000850"  [label="DDG: daddr"];
"1000804" -> "1000803"  [label="AST: "];
"1000804" -> "1000805"  [label="CFG: "];
"1000805" -> "1000804"  [label="AST: "];
"1000807" -> "1000804"  [label="CFG: "];
"1000811" -> "1000804"  [label="CFG: "];
"1000804" -> "1000850"  [label="DDG: err"];
"1000804" -> "1000850"  [label="DDG: !err"];
"1000692" -> "1000804"  [label="DDG: err"];
"1000775" -> "1000804"  [label="DDG: err"];
"1000583" -> "1000804"  [label="DDG: err"];
"1000591" -> "1000804"  [label="DDG: err"];
"1000742" -> "1000804"  [label="DDG: err"];
"1000665" -> "1000804"  [label="DDG: err"];
"1000846" -> "1000804"  [label="DDG: err"];
"1000804" -> "1000810"  [label="DDG: err"];
"1000810" -> "1000809"  [label="AST: "];
"1000810" -> "1000812"  [label="CFG: "];
"1000811" -> "1000810"  [label="AST: "];
"1000812" -> "1000810"  [label="AST: "];
"1000815" -> "1000810"  [label="CFG: "];
"1000809" -> "1000810"  [label="CFG: "];
"1000810" -> "1000850"  [label="DDG: err"];
"1000810" -> "1000850"  [label="DDG: -ENOBUFS"];
"1000810" -> "1000809"  [label="DDG: err"];
"1000810" -> "1000809"  [label="DDG: -ENOBUFS"];
"1000812" -> "1000810"  [label="DDG: ENOBUFS"];
"1000810" -> "1000828"  [label="DDG: err"];
"1000809" -> "1000808"  [label="AST: "];
"1000809" -> "1000814"  [label="CFG: "];
"1000814" -> "1000809"  [label="AST: "];
"1000825" -> "1000809"  [label="CFG: "];
"1000829" -> "1000809"  [label="CFG: "];
"1000809" -> "1000850"  [label="DDG: err == -ENOBUFS"];
"1000809" -> "1000850"  [label="DDG: test_bit(SOCK_NOSPACE, &sk->sk_socket->flags)"];
"1000809" -> "1000850"  [label="DDG: err == -ENOBUFS || test_bit(SOCK_NOSPACE, &sk->sk_socket->flags)"];
"1000814" -> "1000809"  [label="DDG: SOCK_NOSPACE"];
"1000814" -> "1000809"  [label="DDG: &sk->sk_socket->flags"];
"1000828" -> "1000115"  [label="AST: "];
"1000828" -> "1000829"  [label="CFG: "];
"1000829" -> "1000828"  [label="AST: "];
"1000850" -> "1000828"  [label="CFG: "];
"1000828" -> "1000850"  [label="DDG: <RET>"];
"1000829" -> "1000828"  [label="DDG: err"];
}
