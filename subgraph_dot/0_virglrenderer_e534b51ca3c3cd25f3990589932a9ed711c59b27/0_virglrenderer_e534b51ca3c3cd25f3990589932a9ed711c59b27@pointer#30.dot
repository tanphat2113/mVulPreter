digraph "0_virglrenderer_e534b51ca3c3cd25f3990589932a9ed711c59b27@pointer" {
"1000665" [label="(Call,uprcase( *cur ))"];
"1000652" [label="(Call,uprcase( *cur ))"];
"1000636" [label="(Call,*cur == '.')"];
"1000664" [label="(Call,uprcase( *cur ) == 'Y')"];
"1000678" [label="(Call,uprcase( *cur ))"];
"1000677" [label="(Call,uprcase( *cur ) == 'Z')"];
"1000691" [label="(Call,uprcase( *cur ))"];
"1000690" [label="(Call,uprcase( *cur ) == 'W')"];
"1000663" [label="(ControlStructure,if (uprcase( *cur ) == 'Y'))"];
"1000642" [label="(Identifier,cur)"];
"1000680" [label="(Identifier,cur)"];
"1000694" [label="(Literal,'W')"];
"1000676" [label="(ControlStructure,if (uprcase( *cur ) == 'Z'))"];
"1000684" [label="(Identifier,cur)"];
"1000690" [label="(Call,uprcase( *cur ) == 'W')"];
"1000705" [label="(Identifier,writemask)"];
"1000691" [label="(Call,uprcase( *cur ))"];
"1000668" [label="(Literal,'Y')"];
"1000693" [label="(Identifier,cur)"];
"1000636" [label="(Call,*cur == '.')"];
"1000681" [label="(Literal,'Z')"];
"1000692" [label="(Call,*cur)"];
"1000639" [label="(Literal,'.')"];
"1000637" [label="(Call,*cur)"];
"1000653" [label="(Call,*cur)"];
"1000678" [label="(Call,uprcase( *cur ))"];
"1000689" [label="(ControlStructure,if (uprcase( *cur ) == 'W'))"];
"1000655" [label="(Literal,'X')"];
"1004167" [label="(MethodReturn,static boolean)"];
"1000722" [label="(Identifier,writemask)"];
"1000671" [label="(Identifier,cur)"];
"1000677" [label="(Call,uprcase( *cur ) == 'Z')"];
"1000697" [label="(Identifier,cur)"];
"1000664" [label="(Call,uprcase( *cur ) == 'Y')"];
"1000652" [label="(Call,uprcase( *cur ))"];
"1000666" [label="(Call,*cur)"];
"1000651" [label="(Call,uprcase( *cur ) == 'X')"];
"1000635" [label="(ControlStructure,if (*cur == '.'))"];
"1000665" [label="(Call,uprcase( *cur ))"];
"1000679" [label="(Call,*cur)"];
"1000665" -> "1000664"  [label="AST: "];
"1000665" -> "1000666"  [label="CFG: "];
"1000666" -> "1000665"  [label="AST: "];
"1000668" -> "1000665"  [label="CFG: "];
"1000665" -> "1000664"  [label="DDG: *cur"];
"1000652" -> "1000665"  [label="DDG: *cur"];
"1000665" -> "1000678"  [label="DDG: *cur"];
"1000652" -> "1000651"  [label="AST: "];
"1000652" -> "1000653"  [label="CFG: "];
"1000653" -> "1000652"  [label="AST: "];
"1000655" -> "1000652"  [label="CFG: "];
"1000652" -> "1000651"  [label="DDG: *cur"];
"1000636" -> "1000652"  [label="DDG: *cur"];
"1000636" -> "1000635"  [label="AST: "];
"1000636" -> "1000639"  [label="CFG: "];
"1000637" -> "1000636"  [label="AST: "];
"1000639" -> "1000636"  [label="AST: "];
"1000642" -> "1000636"  [label="CFG: "];
"1000722" -> "1000636"  [label="CFG: "];
"1000636" -> "1004167"  [label="DDG: *cur"];
"1000636" -> "1004167"  [label="DDG: *cur == '.'"];
"1000664" -> "1000663"  [label="AST: "];
"1000664" -> "1000668"  [label="CFG: "];
"1000668" -> "1000664"  [label="AST: "];
"1000671" -> "1000664"  [label="CFG: "];
"1000680" -> "1000664"  [label="CFG: "];
"1000664" -> "1004167"  [label="DDG: uprcase( *cur ) == 'Y'"];
"1000678" -> "1000677"  [label="AST: "];
"1000678" -> "1000679"  [label="CFG: "];
"1000679" -> "1000678"  [label="AST: "];
"1000681" -> "1000678"  [label="CFG: "];
"1000678" -> "1000677"  [label="DDG: *cur"];
"1000678" -> "1000691"  [label="DDG: *cur"];
"1000677" -> "1000676"  [label="AST: "];
"1000677" -> "1000681"  [label="CFG: "];
"1000681" -> "1000677"  [label="AST: "];
"1000684" -> "1000677"  [label="CFG: "];
"1000693" -> "1000677"  [label="CFG: "];
"1000677" -> "1004167"  [label="DDG: uprcase( *cur ) == 'Z'"];
"1000691" -> "1000690"  [label="AST: "];
"1000691" -> "1000692"  [label="CFG: "];
"1000692" -> "1000691"  [label="AST: "];
"1000694" -> "1000691"  [label="CFG: "];
"1000691" -> "1004167"  [label="DDG: *cur"];
"1000691" -> "1000690"  [label="DDG: *cur"];
"1000690" -> "1000689"  [label="AST: "];
"1000690" -> "1000694"  [label="CFG: "];
"1000694" -> "1000690"  [label="AST: "];
"1000697" -> "1000690"  [label="CFG: "];
"1000705" -> "1000690"  [label="CFG: "];
"1000690" -> "1004167"  [label="DDG: uprcase( *cur ) == 'W'"];
"1000690" -> "1004167"  [label="DDG: uprcase( *cur )"];
}
