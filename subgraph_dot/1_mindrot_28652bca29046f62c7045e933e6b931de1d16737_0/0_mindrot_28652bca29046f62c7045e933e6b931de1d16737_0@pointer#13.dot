digraph "0_mindrot_28652bca29046f62c7045e933e6b931de1d16737_0@pointer" {
"1000421" [label="(Call,logit(\"Bad packet length %u.\", state->packlen))"];
"1000392" [label="(Call,state->packlen < 1 + 4)"];
"1000381" [label="(Call,state->packlen = PEEK_U32(sshbuf_ptr(state->incoming_packet)))"];
"1000385" [label="(Call,PEEK_U32(sshbuf_ptr(state->incoming_packet)))"];
"1000386" [label="(Call,sshbuf_ptr(state->incoming_packet))"];
"1000349" [label="(Call,sshbuf_reserve(state->incoming_packet, block_size,\n\t\t    &cp))"];
"1000341" [label="(Call,sshbuf_reset(state->incoming_packet))"];
"1000333" [label="(Call,sshbuf_len(state->input) < block_size)"];
"1000334" [label="(Call,sshbuf_len(state->input))"];
"1000224" [label="(Call,block_size = enc ? enc->block_size : 8)"];
"1000399" [label="(Call,state->packlen > PACKET_MAX_SIZE)"];
"1000353" [label="(Identifier,block_size)"];
"1000334" [label="(Call,sshbuf_len(state->input))"];
"1000403" [label="(Identifier,PACKET_MAX_SIZE)"];
"1000341" [label="(Call,sshbuf_reset(state->incoming_packet))"];
"1000385" [label="(Call,PEEK_U32(sshbuf_ptr(state->incoming_packet)))"];
"1000386" [label="(Call,sshbuf_ptr(state->incoming_packet))"];
"1000335" [label="(Call,state->input)"];
"1000350" [label="(Call,state->incoming_packet)"];
"1000118" [label="(Block,)"];
"1000381" [label="(Call,state->packlen = PEEK_U32(sshbuf_ptr(state->incoming_packet)))"];
"1000466" [label="(Call,state->packlen - block_size)"];
"1000455" [label="(Call,need = state->packlen)"];
"1000447" [label="(Call,state->packlen+4)"];
"1000387" [label="(Call,state->incoming_packet)"];
"1000349" [label="(Call,sshbuf_reserve(state->incoming_packet, block_size,\n\t\t    &cp))"];
"1000423" [label="(Call,state->packlen)"];
"1000422" [label="(Literal,\"Bad packet length %u.\")"];
"1000400" [label="(Call,state->packlen)"];
"1000392" [label="(Call,state->packlen < 1 + 4)"];
"1000333" [label="(Call,sshbuf_len(state->input) < block_size)"];
"1000759" [label="(Call,state->packlen + 4)"];
"1000394" [label="(Identifier,state)"];
"1000578" [label="(Call,sshbuf_reserve(state->incoming_packet, aadlen + need,\n\t    &cp))"];
"1000224" [label="(Call,block_size = enc ? enc->block_size : 8)"];
"1000401" [label="(Identifier,state)"];
"1000427" [label="(Call,ssh_packet_start_discard(ssh, enc, mac, 0,\n\t\t\t    PACKET_MAX_SIZE))"];
"1000399" [label="(Call,state->packlen > PACKET_MAX_SIZE)"];
"1000758" [label="(Call,(state->packlen + 4) / block_size)"];
"1000404" [label="(Block,)"];
"1000346" [label="(Call,(r = sshbuf_reserve(state->incoming_packet, block_size,\n\t\t    &cp)) != 0)"];
"1000226" [label="(Call,enc ? enc->block_size : 8)"];
"1000771" [label="(Call,state->packlen + 4)"];
"1000499" [label="(Call,PACKET_MAX_SIZE - block_size)"];
"1000382" [label="(Call,state->packlen)"];
"1000354" [label="(Call,&cp)"];
"1000233" [label="(Identifier,aadlen)"];
"1001011" [label="(MethodReturn,RET)"];
"1000340" [label="(Literal,0)"];
"1000391" [label="(Call,state->packlen < 1 + 4 ||\n\t\t    state->packlen > PACKET_MAX_SIZE)"];
"1000332" [label="(ControlStructure,if (sshbuf_len(state->input) < block_size))"];
"1000421" [label="(Call,logit(\"Bad packet length %u.\", state->packlen))"];
"1000472" [label="(Call,debug(\"partial packet: block %d, need %d, maclen %d, authlen %d,\"\n\t    \" aadlen %d\", block_size, need, maclen, authlen, aadlen))"];
"1000428" [label="(Identifier,ssh)"];
"1000416" [label="(Call,sshbuf_dump(state->incoming_packet, stderr))"];
"1000372" [label="(Call,sshbuf_ptr(state->input))"];
"1000225" [label="(Identifier,block_size)"];
"1000393" [label="(Call,state->packlen)"];
"1000348" [label="(Identifier,r)"];
"1000331" [label="(Block,)"];
"1000342" [label="(Call,state->incoming_packet)"];
"1000343" [label="(Identifier,state)"];
"1000765" [label="(Call,state->p_read.bytes += state->packlen + 4)"];
"1000673" [label="(Call,need > PACKET_MAX_SIZE)"];
"1000396" [label="(Call,1 + 4)"];
"1000338" [label="(Identifier,block_size)"];
"1000347" [label="(Call,r = sshbuf_reserve(state->incoming_packet, block_size,\n\t\t    &cp))"];
"1000445" [label="(Call,debug(\"input: packet len %u\", state->packlen+4))"];
"1000362" [label="(Call,cipher_crypt(state->receive_context,\n\t\t    state->p_send.seqnr, cp, sshbuf_ptr(state->input),\n\t\t    block_size, 0, 0))"];
"1000421" -> "1000404"  [label="AST: "];
"1000421" -> "1000423"  [label="CFG: "];
"1000422" -> "1000421"  [label="AST: "];
"1000423" -> "1000421"  [label="AST: "];
"1000428" -> "1000421"  [label="CFG: "];
"1000421" -> "1001011"  [label="DDG: "];
"1000421" -> "1001011"  [label="DDG: "];
"1000392" -> "1000421"  [label="DDG: "];
"1000399" -> "1000421"  [label="DDG: "];
"1000392" -> "1000391"  [label="AST: "];
"1000392" -> "1000396"  [label="CFG: "];
"1000393" -> "1000392"  [label="AST: "];
"1000396" -> "1000392"  [label="AST: "];
"1000401" -> "1000392"  [label="CFG: "];
"1000391" -> "1000392"  [label="CFG: "];
"1000392" -> "1001011"  [label="DDG: "];
"1000392" -> "1001011"  [label="DDG: "];
"1000392" -> "1000391"  [label="DDG: "];
"1000392" -> "1000391"  [label="DDG: "];
"1000381" -> "1000392"  [label="DDG: "];
"1000392" -> "1000399"  [label="DDG: "];
"1000392" -> "1000445"  [label="DDG: "];
"1000392" -> "1000447"  [label="DDG: "];
"1000392" -> "1000455"  [label="DDG: "];
"1000392" -> "1000466"  [label="DDG: "];
"1000392" -> "1000758"  [label="DDG: "];
"1000392" -> "1000759"  [label="DDG: "];
"1000392" -> "1000765"  [label="DDG: "];
"1000392" -> "1000771"  [label="DDG: "];
"1000381" -> "1000331"  [label="AST: "];
"1000381" -> "1000385"  [label="CFG: "];
"1000382" -> "1000381"  [label="AST: "];
"1000385" -> "1000381"  [label="AST: "];
"1000394" -> "1000381"  [label="CFG: "];
"1000381" -> "1001011"  [label="DDG: "];
"1000385" -> "1000381"  [label="DDG: "];
"1000385" -> "1000386"  [label="CFG: "];
"1000386" -> "1000385"  [label="AST: "];
"1000385" -> "1001011"  [label="DDG: "];
"1000386" -> "1000385"  [label="DDG: "];
"1000386" -> "1000387"  [label="CFG: "];
"1000387" -> "1000386"  [label="AST: "];
"1000386" -> "1001011"  [label="DDG: "];
"1000349" -> "1000386"  [label="DDG: "];
"1000386" -> "1000416"  [label="DDG: "];
"1000386" -> "1000578"  [label="DDG: "];
"1000349" -> "1000347"  [label="AST: "];
"1000349" -> "1000354"  [label="CFG: "];
"1000350" -> "1000349"  [label="AST: "];
"1000353" -> "1000349"  [label="AST: "];
"1000354" -> "1000349"  [label="AST: "];
"1000347" -> "1000349"  [label="CFG: "];
"1000349" -> "1001011"  [label="DDG: "];
"1000349" -> "1001011"  [label="DDG: "];
"1000349" -> "1001011"  [label="DDG: "];
"1000349" -> "1000346"  [label="DDG: "];
"1000349" -> "1000346"  [label="DDG: "];
"1000349" -> "1000346"  [label="DDG: "];
"1000349" -> "1000347"  [label="DDG: "];
"1000349" -> "1000347"  [label="DDG: "];
"1000349" -> "1000347"  [label="DDG: "];
"1000341" -> "1000349"  [label="DDG: "];
"1000333" -> "1000349"  [label="DDG: "];
"1000349" -> "1000362"  [label="DDG: "];
"1000349" -> "1000578"  [label="DDG: "];
"1000341" -> "1000331"  [label="AST: "];
"1000341" -> "1000342"  [label="CFG: "];
"1000342" -> "1000341"  [label="AST: "];
"1000348" -> "1000341"  [label="CFG: "];
"1000341" -> "1001011"  [label="DDG: "];
"1000333" -> "1000332"  [label="AST: "];
"1000333" -> "1000338"  [label="CFG: "];
"1000334" -> "1000333"  [label="AST: "];
"1000338" -> "1000333"  [label="AST: "];
"1000340" -> "1000333"  [label="CFG: "];
"1000343" -> "1000333"  [label="CFG: "];
"1000333" -> "1001011"  [label="DDG: "];
"1000333" -> "1001011"  [label="DDG: "];
"1000333" -> "1001011"  [label="DDG: "];
"1000334" -> "1000333"  [label="DDG: "];
"1000224" -> "1000333"  [label="DDG: "];
"1000334" -> "1000335"  [label="CFG: "];
"1000335" -> "1000334"  [label="AST: "];
"1000338" -> "1000334"  [label="CFG: "];
"1000334" -> "1001011"  [label="DDG: "];
"1000334" -> "1000372"  [label="DDG: "];
"1000224" -> "1000118"  [label="AST: "];
"1000224" -> "1000226"  [label="CFG: "];
"1000225" -> "1000224"  [label="AST: "];
"1000226" -> "1000224"  [label="AST: "];
"1000233" -> "1000224"  [label="CFG: "];
"1000224" -> "1001011"  [label="DDG: "];
"1000224" -> "1001011"  [label="DDG: "];
"1000224" -> "1000466"  [label="DDG: "];
"1000224" -> "1000472"  [label="DDG: "];
"1000399" -> "1000391"  [label="AST: "];
"1000399" -> "1000403"  [label="CFG: "];
"1000400" -> "1000399"  [label="AST: "];
"1000403" -> "1000399"  [label="AST: "];
"1000391" -> "1000399"  [label="CFG: "];
"1000399" -> "1001011"  [label="DDG: "];
"1000399" -> "1001011"  [label="DDG: "];
"1000399" -> "1000391"  [label="DDG: "];
"1000399" -> "1000391"  [label="DDG: "];
"1000399" -> "1000427"  [label="DDG: "];
"1000399" -> "1000445"  [label="DDG: "];
"1000399" -> "1000447"  [label="DDG: "];
"1000399" -> "1000455"  [label="DDG: "];
"1000399" -> "1000466"  [label="DDG: "];
"1000399" -> "1000499"  [label="DDG: "];
"1000399" -> "1000673"  [label="DDG: "];
"1000399" -> "1000758"  [label="DDG: "];
"1000399" -> "1000759"  [label="DDG: "];
"1000399" -> "1000765"  [label="DDG: "];
"1000399" -> "1000771"  [label="DDG: "];
}
