digraph "0_abrt_8939398b82006ba1fec4ed491339fc075f43fc7c_1@API" {
"1000410" [label="(Call,proc_pid_status = xmalloc_xopen_read_close(path, /*maxsz:*/ NULL))"];
"1000412" [label="(Call,xmalloc_xopen_read_close(path, /*maxsz:*/ NULL))"];
"1000404" [label="(Call,sprintf(path, \"/proc/%lu/status\", (long)pid))"];
"1000407" [label="(Call,(long)pid)"];
"1000399" [label="(Call,get_cwd(pid))"];
"1000377" [label="(Call,get_executable(pid, setting_SaveBinaryImage ? &src_fd_binary : NULL))"];
"1000308" [label="(Call,pid = xatoi_positive(argv[3]))"];
"1000310" [label="(Call,xatoi_positive(argv[3]))"];
"1000151" [label="(MethodParameterIn,char** argv)"];
"1000324" [label="(Call,pid <= 0)"];
"1000277" [label="(Call,strtoull(argv[2], NULL, 10))"];
"1000393" [label="(Call,(long)pid)"];
"1000618" [label="(Call,(long)pid)"];
"1000302" [label="(Call,*pid_str = argv[3])"];
"1000316" [label="(Identifier,uid)"];
"1000278" [label="(Call,argv[2])"];
"1000480" [label="(Call,(long)pid)"];
"1000151" [label="(MethodParameterIn,char** argv)"];
"1000645" [label="(Call,(long)pid)"];
"1000414" [label="(Identifier,NULL)"];
"1000308" [label="(Call,pid = xatoi_positive(argv[3]))"];
"1000311" [label="(Call,argv[3])"];
"1000375" [label="(Call,*executable = get_executable(pid, setting_SaveBinaryImage ? &src_fd_binary : NULL))"];
"1000328" [label="(Call,perror_msg_and_die(\"PID '%s' or limit '%s' is bogus\", argv[3], argv[2]))"];
"1000400" [label="(Identifier,pid)"];
"1000465" [label="(Call,open_user_core(uid, fsuid, pid, &argv[1]))"];
"1000317" [label="(Call,xatoi_positive(argv[4]))"];
"1000322" [label="(Call,errno || pid <= 0)"];
"1000310" [label="(Call,xatoi_positive(argv[3]))"];
"1000326" [label="(Literal,0)"];
"1000379" [label="(Call,setting_SaveBinaryImage ? &src_fd_binary : NULL)"];
"1000395" [label="(Identifier,pid)"];
"1000377" [label="(Call,get_executable(pid, setting_SaveBinaryImage ? &src_fd_binary : NULL))"];
"1000399" [label="(Call,get_cwd(pid))"];
"1000324" [label="(Call,pid <= 0)"];
"1000391" [label="(Call,error_msg_and_die(\"PID %lu is '%s', not dumping it to avoid recursion\",\n                        (long)pid, executable))"];
"1000325" [label="(Identifier,pid)"];
"1000203" [label="(Call,strchrnul(argv[i], ' '))"];
"1000264" [label="(Call,* signal_str = argv[1])"];
"1000275" [label="(Call,ulimit_c = strtoull(argv[2], NULL, 10))"];
"1000393" [label="(Call,(long)pid)"];
"1000405" [label="(Identifier,path)"];
"1000281" [label="(Identifier,NULL)"];
"1000277" [label="(Call,strtoull(argv[2], NULL, 10))"];
"1000309" [label="(Identifier,pid)"];
"1000407" [label="(Call,(long)pid)"];
"1000282" [label="(Literal,10)"];
"1000353" [label="(Call,!argv[8])"];
"1000409" [label="(Identifier,pid)"];
"1000378" [label="(Identifier,pid)"];
"1000361" [label="(Call,argv[8] = uts.nodename)"];
"1000413" [label="(Identifier,path)"];
"1000152" [label="(Block,)"];
"1000406" [label="(Literal,\"/proc/%lu/status\")"];
"1000178" [label="(Call,error_msg_and_die(\"Usage: %s SIGNO CORE_SIZE_LIMIT PID UID GID TIME BINARY_NAME [HOSTNAME]\", argv[0]))"];
"1000417" [label="(Identifier,fsuid)"];
"1000410" [label="(Call,proc_pid_status = xmalloc_xopen_read_close(path, /*maxsz:*/ NULL))"];
"1000474" [label="(Call,executable == NULL)"];
"1001221" [label="(Call,(long)pid)"];
"1000184" [label="(Call,strchr(argv[1], ' '))"];
"1000396" [label="(Identifier,executable)"];
"1000404" [label="(Call,sprintf(path, \"/proc/%lu/status\", (long)pid))"];
"1000411" [label="(Identifier,proc_pid_status)"];
"1000397" [label="(Call,user_pwd = get_cwd(pid))"];
"1001237" [label="(MethodReturn,int)"];
"1000412" [label="(Call,xmalloc_xopen_read_close(path, /*maxsz:*/ NULL))"];
"1000410" -> "1000152"  [label="AST: "];
"1000410" -> "1000412"  [label="CFG: "];
"1000411" -> "1000410"  [label="AST: "];
"1000412" -> "1000410"  [label="AST: "];
"1000417" -> "1000410"  [label="CFG: "];
"1000410" -> "1001237"  [label="DDG: "];
"1000410" -> "1001237"  [label="DDG: "];
"1000412" -> "1000410"  [label="DDG: "];
"1000412" -> "1000410"  [label="DDG: "];
"1000412" -> "1000414"  [label="CFG: "];
"1000413" -> "1000412"  [label="AST: "];
"1000414" -> "1000412"  [label="AST: "];
"1000412" -> "1001237"  [label="DDG: "];
"1000404" -> "1000412"  [label="DDG: "];
"1000277" -> "1000412"  [label="DDG: "];
"1000412" -> "1000474"  [label="DDG: "];
"1000404" -> "1000152"  [label="AST: "];
"1000404" -> "1000407"  [label="CFG: "];
"1000405" -> "1000404"  [label="AST: "];
"1000406" -> "1000404"  [label="AST: "];
"1000407" -> "1000404"  [label="AST: "];
"1000411" -> "1000404"  [label="CFG: "];
"1000404" -> "1001237"  [label="DDG: "];
"1000404" -> "1001237"  [label="DDG: "];
"1000407" -> "1000404"  [label="DDG: "];
"1000407" -> "1000409"  [label="CFG: "];
"1000408" -> "1000407"  [label="AST: "];
"1000409" -> "1000407"  [label="AST: "];
"1000407" -> "1001237"  [label="DDG: "];
"1000399" -> "1000407"  [label="DDG: "];
"1000407" -> "1000465"  [label="DDG: "];
"1000407" -> "1000480"  [label="DDG: "];
"1000407" -> "1000618"  [label="DDG: "];
"1000407" -> "1000645"  [label="DDG: "];
"1000407" -> "1001221"  [label="DDG: "];
"1000399" -> "1000397"  [label="AST: "];
"1000399" -> "1000400"  [label="CFG: "];
"1000400" -> "1000399"  [label="AST: "];
"1000397" -> "1000399"  [label="CFG: "];
"1000399" -> "1000397"  [label="DDG: "];
"1000377" -> "1000399"  [label="DDG: "];
"1000393" -> "1000399"  [label="DDG: "];
"1000377" -> "1000375"  [label="AST: "];
"1000377" -> "1000379"  [label="CFG: "];
"1000378" -> "1000377"  [label="AST: "];
"1000379" -> "1000377"  [label="AST: "];
"1000375" -> "1000377"  [label="CFG: "];
"1000377" -> "1001237"  [label="DDG: "];
"1000377" -> "1000375"  [label="DDG: "];
"1000377" -> "1000375"  [label="DDG: "];
"1000308" -> "1000377"  [label="DDG: "];
"1000324" -> "1000377"  [label="DDG: "];
"1000277" -> "1000377"  [label="DDG: "];
"1000377" -> "1000393"  [label="DDG: "];
"1000308" -> "1000152"  [label="AST: "];
"1000308" -> "1000310"  [label="CFG: "];
"1000309" -> "1000308"  [label="AST: "];
"1000310" -> "1000308"  [label="AST: "];
"1000316" -> "1000308"  [label="CFG: "];
"1000308" -> "1001237"  [label="DDG: "];
"1000310" -> "1000308"  [label="DDG: "];
"1000308" -> "1000324"  [label="DDG: "];
"1000310" -> "1000311"  [label="CFG: "];
"1000311" -> "1000310"  [label="AST: "];
"1000310" -> "1001237"  [label="DDG: "];
"1000151" -> "1000310"  [label="DDG: "];
"1000310" -> "1000328"  [label="DDG: "];
"1000151" -> "1000149"  [label="AST: "];
"1000151" -> "1001237"  [label="DDG: "];
"1000151" -> "1000178"  [label="DDG: "];
"1000151" -> "1000184"  [label="DDG: "];
"1000151" -> "1000203"  [label="DDG: "];
"1000151" -> "1000264"  [label="DDG: "];
"1000151" -> "1000277"  [label="DDG: "];
"1000151" -> "1000302"  [label="DDG: "];
"1000151" -> "1000317"  [label="DDG: "];
"1000151" -> "1000328"  [label="DDG: "];
"1000151" -> "1000353"  [label="DDG: "];
"1000151" -> "1000361"  [label="DDG: "];
"1000324" -> "1000322"  [label="AST: "];
"1000324" -> "1000326"  [label="CFG: "];
"1000325" -> "1000324"  [label="AST: "];
"1000326" -> "1000324"  [label="AST: "];
"1000322" -> "1000324"  [label="CFG: "];
"1000324" -> "1000322"  [label="DDG: "];
"1000324" -> "1000322"  [label="DDG: "];
"1000277" -> "1000275"  [label="AST: "];
"1000277" -> "1000282"  [label="CFG: "];
"1000278" -> "1000277"  [label="AST: "];
"1000281" -> "1000277"  [label="AST: "];
"1000282" -> "1000277"  [label="AST: "];
"1000275" -> "1000277"  [label="CFG: "];
"1000277" -> "1001237"  [label="DDG: "];
"1000277" -> "1000275"  [label="DDG: "];
"1000277" -> "1000275"  [label="DDG: "];
"1000277" -> "1000275"  [label="DDG: "];
"1000277" -> "1000328"  [label="DDG: "];
"1000277" -> "1000379"  [label="DDG: "];
"1000393" -> "1000391"  [label="AST: "];
"1000393" -> "1000395"  [label="CFG: "];
"1000394" -> "1000393"  [label="AST: "];
"1000395" -> "1000393"  [label="AST: "];
"1000396" -> "1000393"  [label="CFG: "];
"1000393" -> "1000391"  [label="DDG: "];
}
