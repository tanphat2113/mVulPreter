digraph "0_linux_c58d6c93680f28ac58984af61d0a7ebf4319c241@pointer" {
"1000260" [label="(Call,nlh->nlmsg_flags & NLM_F_REQUEST)"];
"1000420" [label="(Call,nlh->nlmsg_flags & NLM_F_ACK)"];
"1000260" [label="(Call,nlh->nlmsg_flags & NLM_F_REQUEST)"];
"1000259" [label="(Call,!(nlh->nlmsg_flags & NLM_F_REQUEST))"];
"1000419" [label="(Call,nlh->nlmsg_flags & NLM_F_ACK || err)"];
"1000429" [label="(Call,nfnl_err_add(&err_list, nlh, err))"];
"1000152" [label="(Call,netlink_ack(oskb, nlh, -ENOMEM))"];
"1000151" [label="(Return,return netlink_ack(oskb, nlh, -ENOMEM);)"];
"1000184" [label="(Call,netlink_ack(oskb, nlh, -EOPNOTSUPP))"];
"1000205" [label="(Call,netlink_ack(oskb, nlh, -EOPNOTSUPP))"];
"1000251" [label="(Call,nfnl_err_reset(&err_list))"];
"1000484" [label="(Call,nfnl_err_reset(&err_list))"];
"1000281" [label="(Call,nfnl_err_reset(&err_list))"];
"1000506" [label="(Call,nfnl_err_deliver(&err_list, oskb))"];
"1000428" [label="(Call,nfnl_err_add(&err_list, nlh, err) < 0)"];
"1000436" [label="(Call,nfnl_err_reset(&err_list))"];
"1000386" [label="(Call,err < 0)"];
"1000109" [label="(MethodParameterIn,struct nlmsghdr *nlh)"];
"1000151" [label="(Return,return netlink_ack(oskb, nlh, -ENOMEM);)"];
"1000408" [label="(Call,err == -EAGAIN)"];
"1000155" [label="(Call,-ENOMEM)"];
"1000154" [label="(Identifier,nlh)"];
"1000506" [label="(Call,nfnl_err_deliver(&err_list, oskb))"];
"1000186" [label="(Identifier,nlh)"];
"1000425" [label="(Identifier,err)"];
"1000450" [label="(Identifier,err)"];
"1000266" [label="(Call,err = -EINVAL)"];
"1000208" [label="(Call,-EOPNOTSUPP)"];
"1000507" [label="(Call,&err_list)"];
"1000181" [label="(Block,)"];
"1000205" [label="(Call,netlink_ack(oskb, nlh, -EOPNOTSUPP))"];
"1000454" [label="(JumpTarget,next:)"];
"1000184" [label="(Call,netlink_ack(oskb, nlh, -EOPNOTSUPP))"];
"1000251" [label="(Call,nfnl_err_reset(&err_list))"];
"1000353" [label="(Call,(void *)nlh)"];
"1000206" [label="(Identifier,oskb)"];
"1000420" [label="(Call,nlh->nlmsg_flags & NLM_F_ACK)"];
"1000255" [label="(Identifier,status)"];
"1000488" [label="(Identifier,subsys_id)"];
"1000419" [label="(Call,nlh->nlmsg_flags & NLM_F_ACK || err)"];
"1000315" [label="(Call,err = -EINVAL)"];
"1000191" [label="(Identifier,skb)"];
"1000480" [label="(Block,)"];
"1000503" [label="(Call,ss->abort(net, oskb))"];
"1000437" [label="(Call,&err_list)"];
"1000267" [label="(Identifier,err)"];
"1000246" [label="(Call,nlmsg_len(nlh))"];
"1000282" [label="(Call,&err_list)"];
"1000285" [label="(Identifier,status)"];
"1000430" [label="(Call,&err_list)"];
"1000153" [label="(Identifier,oskb)"];
"1000484" [label="(Call,nfnl_err_reset(&err_list))"];
"1000431" [label="(Identifier,err_list)"];
"1000260" [label="(Call,nlh->nlmsg_flags & NLM_F_REQUEST)"];
"1000428" [label="(Call,nfnl_err_add(&err_list, nlh, err) < 0)"];
"1000280" [label="(Block,)"];
"1000258" [label="(ControlStructure,if (!(nlh->nlmsg_flags & NLM_F_REQUEST)))"];
"1000427" [label="(ControlStructure,if (nfnl_err_add(&err_list, nlh, err) < 0))"];
"1000111" [label="(Block,)"];
"1000440" [label="(Identifier,oskb)"];
"1000281" [label="(Call,nfnl_err_reset(&err_list))"];
"1000514" [label="(MethodReturn,static void)"];
"1000509" [label="(Identifier,oskb)"];
"1000485" [label="(Call,&err_list)"];
"1000185" [label="(Identifier,oskb)"];
"1000436" [label="(Call,nfnl_err_reset(&err_list))"];
"1000433" [label="(Identifier,err)"];
"1000212" [label="(Identifier,skb)"];
"1000511" [label="(Identifier,subsys_id)"];
"1000438" [label="(Identifier,err_list)"];
"1000223" [label="(Call,nlh = nlmsg_hdr(skb))"];
"1000304" [label="(Call,err = -EINVAL)"];
"1000207" [label="(Identifier,nlh)"];
"1000397" [label="(Call,nc->call_batch(net, net->nfnl, skb, nlh,\n\t\t\t\t\t\t     (const struct nlattr **)cda))"];
"1000434" [label="(Literal,0)"];
"1000145" [label="(Call,netlink_skb_clone(oskb, GFP_KERNEL))"];
"1000152" [label="(Call,netlink_ack(oskb, nlh, -ENOMEM))"];
"1000272" [label="(Identifier,type)"];
"1000421" [label="(Call,nlh->nlmsg_flags)"];
"1000250" [label="(Block,)"];
"1000429" [label="(Call,nfnl_err_add(&err_list, nlh, err))"];
"1000432" [label="(Identifier,nlh)"];
"1000264" [label="(Identifier,NLM_F_REQUEST)"];
"1000435" [label="(Block,)"];
"1000187" [label="(Call,-EOPNOTSUPP)"];
"1000259" [label="(Call,!(nlh->nlmsg_flags & NLM_F_REQUEST))"];
"1000202" [label="(Block,)"];
"1000424" [label="(Identifier,NLM_F_ACK)"];
"1000329" [label="(Call,err = -EINVAL)"];
"1000148" [label="(ControlStructure,if (!skb))"];
"1000498" [label="(Call,ss->commit(net, oskb))"];
"1000252" [label="(Call,&err_list)"];
"1000418" [label="(ControlStructure,if (nlh->nlmsg_flags & NLM_F_ACK || err))"];
"1000261" [label="(Call,nlh->nlmsg_flags)"];
"1000260" -> "1000259"  [label="AST: "];
"1000260" -> "1000264"  [label="CFG: "];
"1000261" -> "1000260"  [label="AST: "];
"1000264" -> "1000260"  [label="AST: "];
"1000259" -> "1000260"  [label="CFG: "];
"1000260" -> "1000514"  [label="DDG: NLM_F_REQUEST"];
"1000260" -> "1000514"  [label="DDG: nlh->nlmsg_flags"];
"1000260" -> "1000259"  [label="DDG: nlh->nlmsg_flags"];
"1000260" -> "1000259"  [label="DDG: NLM_F_REQUEST"];
"1000420" -> "1000260"  [label="DDG: nlh->nlmsg_flags"];
"1000260" -> "1000420"  [label="DDG: nlh->nlmsg_flags"];
"1000420" -> "1000419"  [label="AST: "];
"1000420" -> "1000424"  [label="CFG: "];
"1000421" -> "1000420"  [label="AST: "];
"1000424" -> "1000420"  [label="AST: "];
"1000425" -> "1000420"  [label="CFG: "];
"1000419" -> "1000420"  [label="CFG: "];
"1000420" -> "1000514"  [label="DDG: NLM_F_ACK"];
"1000420" -> "1000514"  [label="DDG: nlh->nlmsg_flags"];
"1000420" -> "1000419"  [label="DDG: nlh->nlmsg_flags"];
"1000420" -> "1000419"  [label="DDG: NLM_F_ACK"];
"1000259" -> "1000258"  [label="AST: "];
"1000267" -> "1000259"  [label="CFG: "];
"1000272" -> "1000259"  [label="CFG: "];
"1000259" -> "1000514"  [label="DDG: !(nlh->nlmsg_flags & NLM_F_REQUEST)"];
"1000259" -> "1000514"  [label="DDG: nlh->nlmsg_flags & NLM_F_REQUEST"];
"1000419" -> "1000418"  [label="AST: "];
"1000419" -> "1000425"  [label="CFG: "];
"1000425" -> "1000419"  [label="AST: "];
"1000431" -> "1000419"  [label="CFG: "];
"1000454" -> "1000419"  [label="CFG: "];
"1000419" -> "1000514"  [label="DDG: nlh->nlmsg_flags & NLM_F_ACK"];
"1000419" -> "1000514"  [label="DDG: err"];
"1000419" -> "1000514"  [label="DDG: nlh->nlmsg_flags & NLM_F_ACK || err"];
"1000408" -> "1000419"  [label="DDG: err"];
"1000315" -> "1000419"  [label="DDG: err"];
"1000304" -> "1000419"  [label="DDG: err"];
"1000266" -> "1000419"  [label="DDG: err"];
"1000386" -> "1000419"  [label="DDG: err"];
"1000329" -> "1000419"  [label="DDG: err"];
"1000419" -> "1000429"  [label="DDG: err"];
"1000429" -> "1000428"  [label="AST: "];
"1000429" -> "1000433"  [label="CFG: "];
"1000430" -> "1000429"  [label="AST: "];
"1000432" -> "1000429"  [label="AST: "];
"1000433" -> "1000429"  [label="AST: "];
"1000434" -> "1000429"  [label="CFG: "];
"1000429" -> "1000514"  [label="DDG: nlh"];
"1000429" -> "1000514"  [label="DDG: err"];
"1000429" -> "1000152"  [label="DDG: nlh"];
"1000429" -> "1000184"  [label="DDG: nlh"];
"1000429" -> "1000205"  [label="DDG: nlh"];
"1000429" -> "1000251"  [label="DDG: &err_list"];
"1000429" -> "1000281"  [label="DDG: &err_list"];
"1000429" -> "1000428"  [label="DDG: &err_list"];
"1000429" -> "1000428"  [label="DDG: nlh"];
"1000429" -> "1000428"  [label="DDG: err"];
"1000484" -> "1000429"  [label="DDG: &err_list"];
"1000397" -> "1000429"  [label="DDG: nlh"];
"1000353" -> "1000429"  [label="DDG: nlh"];
"1000223" -> "1000429"  [label="DDG: nlh"];
"1000246" -> "1000429"  [label="DDG: nlh"];
"1000109" -> "1000429"  [label="DDG: nlh"];
"1000429" -> "1000436"  [label="DDG: &err_list"];
"1000429" -> "1000484"  [label="DDG: &err_list"];
"1000429" -> "1000506"  [label="DDG: &err_list"];
"1000152" -> "1000151"  [label="AST: "];
"1000152" -> "1000155"  [label="CFG: "];
"1000153" -> "1000152"  [label="AST: "];
"1000154" -> "1000152"  [label="AST: "];
"1000155" -> "1000152"  [label="AST: "];
"1000151" -> "1000152"  [label="CFG: "];
"1000152" -> "1000514"  [label="DDG: netlink_ack(oskb, nlh, -ENOMEM)"];
"1000152" -> "1000514"  [label="DDG: -ENOMEM"];
"1000152" -> "1000514"  [label="DDG: oskb"];
"1000152" -> "1000514"  [label="DDG: nlh"];
"1000152" -> "1000151"  [label="DDG: netlink_ack(oskb, nlh, -ENOMEM)"];
"1000145" -> "1000152"  [label="DDG: oskb"];
"1000397" -> "1000152"  [label="DDG: nlh"];
"1000353" -> "1000152"  [label="DDG: nlh"];
"1000223" -> "1000152"  [label="DDG: nlh"];
"1000246" -> "1000152"  [label="DDG: nlh"];
"1000109" -> "1000152"  [label="DDG: nlh"];
"1000155" -> "1000152"  [label="DDG: ENOMEM"];
"1000151" -> "1000148"  [label="AST: "];
"1000514" -> "1000151"  [label="CFG: "];
"1000151" -> "1000514"  [label="DDG: <RET>"];
"1000184" -> "1000181"  [label="AST: "];
"1000184" -> "1000187"  [label="CFG: "];
"1000185" -> "1000184"  [label="AST: "];
"1000186" -> "1000184"  [label="AST: "];
"1000187" -> "1000184"  [label="AST: "];
"1000191" -> "1000184"  [label="CFG: "];
"1000184" -> "1000514"  [label="DDG: nlh"];
"1000184" -> "1000514"  [label="DDG: -EOPNOTSUPP"];
"1000184" -> "1000514"  [label="DDG: oskb"];
"1000184" -> "1000514"  [label="DDG: netlink_ack(oskb, nlh, -EOPNOTSUPP)"];
"1000145" -> "1000184"  [label="DDG: oskb"];
"1000397" -> "1000184"  [label="DDG: nlh"];
"1000353" -> "1000184"  [label="DDG: nlh"];
"1000223" -> "1000184"  [label="DDG: nlh"];
"1000246" -> "1000184"  [label="DDG: nlh"];
"1000109" -> "1000184"  [label="DDG: nlh"];
"1000187" -> "1000184"  [label="DDG: EOPNOTSUPP"];
"1000205" -> "1000202"  [label="AST: "];
"1000205" -> "1000208"  [label="CFG: "];
"1000206" -> "1000205"  [label="AST: "];
"1000207" -> "1000205"  [label="AST: "];
"1000208" -> "1000205"  [label="AST: "];
"1000212" -> "1000205"  [label="CFG: "];
"1000205" -> "1000514"  [label="DDG: oskb"];
"1000205" -> "1000514"  [label="DDG: -EOPNOTSUPP"];
"1000205" -> "1000514"  [label="DDG: nlh"];
"1000205" -> "1000514"  [label="DDG: netlink_ack(oskb, nlh, -EOPNOTSUPP)"];
"1000145" -> "1000205"  [label="DDG: oskb"];
"1000397" -> "1000205"  [label="DDG: nlh"];
"1000353" -> "1000205"  [label="DDG: nlh"];
"1000223" -> "1000205"  [label="DDG: nlh"];
"1000246" -> "1000205"  [label="DDG: nlh"];
"1000109" -> "1000205"  [label="DDG: nlh"];
"1000208" -> "1000205"  [label="DDG: EOPNOTSUPP"];
"1000251" -> "1000250"  [label="AST: "];
"1000251" -> "1000252"  [label="CFG: "];
"1000252" -> "1000251"  [label="AST: "];
"1000255" -> "1000251"  [label="CFG: "];
"1000251" -> "1000514"  [label="DDG: nfnl_err_reset(&err_list)"];
"1000484" -> "1000251"  [label="DDG: &err_list"];
"1000251" -> "1000484"  [label="DDG: &err_list"];
"1000251" -> "1000506"  [label="DDG: &err_list"];
"1000484" -> "1000480"  [label="AST: "];
"1000484" -> "1000485"  [label="CFG: "];
"1000485" -> "1000484"  [label="AST: "];
"1000488" -> "1000484"  [label="CFG: "];
"1000484" -> "1000514"  [label="DDG: &err_list"];
"1000484" -> "1000514"  [label="DDG: nfnl_err_reset(&err_list)"];
"1000484" -> "1000281"  [label="DDG: &err_list"];
"1000281" -> "1000484"  [label="DDG: &err_list"];
"1000436" -> "1000484"  [label="DDG: &err_list"];
"1000484" -> "1000506"  [label="DDG: &err_list"];
"1000281" -> "1000280"  [label="AST: "];
"1000281" -> "1000282"  [label="CFG: "];
"1000282" -> "1000281"  [label="AST: "];
"1000285" -> "1000281"  [label="CFG: "];
"1000281" -> "1000514"  [label="DDG: nfnl_err_reset(&err_list)"];
"1000281" -> "1000506"  [label="DDG: &err_list"];
"1000506" -> "1000111"  [label="AST: "];
"1000506" -> "1000509"  [label="CFG: "];
"1000507" -> "1000506"  [label="AST: "];
"1000509" -> "1000506"  [label="AST: "];
"1000511" -> "1000506"  [label="CFG: "];
"1000506" -> "1000514"  [label="DDG: oskb"];
"1000506" -> "1000514"  [label="DDG: nfnl_err_deliver(&err_list, oskb)"];
"1000506" -> "1000514"  [label="DDG: &err_list"];
"1000436" -> "1000506"  [label="DDG: &err_list"];
"1000498" -> "1000506"  [label="DDG: oskb"];
"1000503" -> "1000506"  [label="DDG: oskb"];
"1000428" -> "1000427"  [label="AST: "];
"1000428" -> "1000434"  [label="CFG: "];
"1000434" -> "1000428"  [label="AST: "];
"1000438" -> "1000428"  [label="CFG: "];
"1000450" -> "1000428"  [label="CFG: "];
"1000428" -> "1000514"  [label="DDG: nfnl_err_add(&err_list, nlh, err) < 0"];
"1000428" -> "1000514"  [label="DDG: nfnl_err_add(&err_list, nlh, err)"];
"1000436" -> "1000435"  [label="AST: "];
"1000436" -> "1000437"  [label="CFG: "];
"1000437" -> "1000436"  [label="AST: "];
"1000440" -> "1000436"  [label="CFG: "];
"1000436" -> "1000514"  [label="DDG: nfnl_err_reset(&err_list)"];
}
