digraph "0_libuv_66ab38918c911bcff025562cf06237d7fedaba0c@pointer" {
"1000216" [label="(Call,use_fd = pipes[fd][1])"];
"1000225" [label="(Call,use_fd >= 0)"];
"1000224" [label="(Call,use_fd >= 0 && fd != use_fd)"];
"1000228" [label="(Call,fd != use_fd)"];
"1000213" [label="(Call,fd++)"];
"1000210" [label="(Call,fd < stdio_count)"];
"1000231" [label="(Call,close(use_fd))"];
"1000226" [label="(Identifier,use_fd)"];
"1000214" [label="(Identifier,fd)"];
"1000230" [label="(Identifier,use_fd)"];
"1000333" [label="(MethodReturn,static void)"];
"1000217" [label="(Identifier,use_fd)"];
"1000206" [label="(ControlStructure,for (fd = 0; fd < stdio_count; fd++))"];
"1000224" [label="(Call,use_fd >= 0 && fd != use_fd)"];
"1000104" [label="(MethodParameterIn,int stdio_count)"];
"1000228" [label="(Call,fd != use_fd)"];
"1000216" [label="(Call,use_fd = pipes[fd][1])"];
"1000223" [label="(ControlStructure,if (use_fd >= 0 && fd != use_fd))"];
"1000122" [label="(Call,fd < stdio_count)"];
"1000229" [label="(Identifier,fd)"];
"1000207" [label="(Call,fd = 0)"];
"1000231" [label="(Call,close(use_fd))"];
"1000212" [label="(Identifier,stdio_count)"];
"1000211" [label="(Identifier,fd)"];
"1000213" [label="(Call,fd++)"];
"1000225" [label="(Call,use_fd >= 0)"];
"1000232" [label="(Identifier,use_fd)"];
"1000237" [label="(Identifier,options)"];
"1000218" [label="(Call,pipes[fd][1])"];
"1000227" [label="(Literal,0)"];
"1000210" [label="(Call,fd < stdio_count)"];
"1000215" [label="(Block,)"];
"1000216" -> "1000215"  [label="AST: "];
"1000216" -> "1000218"  [label="CFG: "];
"1000217" -> "1000216"  [label="AST: "];
"1000218" -> "1000216"  [label="AST: "];
"1000226" -> "1000216"  [label="CFG: "];
"1000216" -> "1000333"  [label="DDG: pipes[fd][1]"];
"1000216" -> "1000225"  [label="DDG: use_fd"];
"1000225" -> "1000224"  [label="AST: "];
"1000225" -> "1000227"  [label="CFG: "];
"1000226" -> "1000225"  [label="AST: "];
"1000227" -> "1000225"  [label="AST: "];
"1000229" -> "1000225"  [label="CFG: "];
"1000224" -> "1000225"  [label="CFG: "];
"1000225" -> "1000333"  [label="DDG: use_fd"];
"1000225" -> "1000224"  [label="DDG: use_fd"];
"1000225" -> "1000224"  [label="DDG: 0"];
"1000225" -> "1000228"  [label="DDG: use_fd"];
"1000225" -> "1000231"  [label="DDG: use_fd"];
"1000224" -> "1000223"  [label="AST: "];
"1000224" -> "1000228"  [label="CFG: "];
"1000228" -> "1000224"  [label="AST: "];
"1000232" -> "1000224"  [label="CFG: "];
"1000214" -> "1000224"  [label="CFG: "];
"1000224" -> "1000333"  [label="DDG: use_fd >= 0"];
"1000224" -> "1000333"  [label="DDG: fd != use_fd"];
"1000224" -> "1000333"  [label="DDG: use_fd >= 0 && fd != use_fd"];
"1000228" -> "1000224"  [label="DDG: fd"];
"1000228" -> "1000224"  [label="DDG: use_fd"];
"1000228" -> "1000230"  [label="CFG: "];
"1000229" -> "1000228"  [label="AST: "];
"1000230" -> "1000228"  [label="AST: "];
"1000228" -> "1000333"  [label="DDG: use_fd"];
"1000228" -> "1000213"  [label="DDG: fd"];
"1000210" -> "1000228"  [label="DDG: fd"];
"1000228" -> "1000231"  [label="DDG: use_fd"];
"1000213" -> "1000206"  [label="AST: "];
"1000213" -> "1000214"  [label="CFG: "];
"1000214" -> "1000213"  [label="AST: "];
"1000211" -> "1000213"  [label="CFG: "];
"1000213" -> "1000210"  [label="DDG: fd"];
"1000210" -> "1000213"  [label="DDG: fd"];
"1000210" -> "1000206"  [label="AST: "];
"1000210" -> "1000212"  [label="CFG: "];
"1000211" -> "1000210"  [label="AST: "];
"1000212" -> "1000210"  [label="AST: "];
"1000217" -> "1000210"  [label="CFG: "];
"1000237" -> "1000210"  [label="CFG: "];
"1000210" -> "1000333"  [label="DDG: fd < stdio_count"];
"1000210" -> "1000333"  [label="DDG: stdio_count"];
"1000210" -> "1000333"  [label="DDG: fd"];
"1000207" -> "1000210"  [label="DDG: fd"];
"1000122" -> "1000210"  [label="DDG: stdio_count"];
"1000104" -> "1000210"  [label="DDG: stdio_count"];
"1000231" -> "1000223"  [label="AST: "];
"1000231" -> "1000232"  [label="CFG: "];
"1000232" -> "1000231"  [label="AST: "];
"1000214" -> "1000231"  [label="CFG: "];
"1000231" -> "1000333"  [label="DDG: close(use_fd)"];
"1000231" -> "1000333"  [label="DDG: use_fd"];
}
