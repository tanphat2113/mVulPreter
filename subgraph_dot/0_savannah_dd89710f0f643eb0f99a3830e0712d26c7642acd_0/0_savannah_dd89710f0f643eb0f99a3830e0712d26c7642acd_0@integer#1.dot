digraph "0_savannah_dd89710f0f643eb0f99a3830e0712d26c7642acd_0@integer" {
"1000544" [label="(Call,len = parser->root.cursor - cur)"];
"1000546" [label="(Call,parser->root.cursor - cur)"];
"1000529" [label="(Call,parser->root.cursor >= limit)"];
"1000463" [label="(Call,parser->root.cursor - cur)"];
"1000329" [label="(Call,parser->root.cursor >= limit)"];
"1000300" [label="(Call,parser->root.cursor = cur)"];
"1000257" [label="(Call,cur = parser->root.cursor)"];
"1000192" [label="(Call,parser->root.cursor >= limit)"];
"1000173" [label="(Call,*       limit        = parser->root.limit)"];
"1000265" [label="(Call,parser->root.cursor < limit)"];
"1000459" [label="(Call,cur++)"];
"1000407" [label="(Call,cur[1] == 'n')"];
"1000413" [label="(Call,cur[2] == 'd')"];
"1000390" [label="(Call,cur >= limit)"];
"1000382" [label="(Call,cur = parser->root.cursor)"];
"1000418" [label="(Call,t42_is_space( cur[3] ))"];
"1000401" [label="(Call,cur + 3 < limit)"];
"1000446" [label="(Call,cur + 2 >= limit)"];
"1000517" [label="(Call,cur = parser->root.cursor)"];
"1000555" [label="(Call,T1_Add_Table( code_table, n, cur, len + 1 ))"];
"1000553" [label="(Call,error = T1_Add_Table( code_table, n, cur, len + 1 ))"];
"1000758" [label="(Call,parser->root.error = error)"];
"1000574" [label="(Call,n++)"];
"1000577" [label="(Call,n >= loader->num_glyphs)"];
"1000472" [label="(Call,T1_Add_Table( name_table, n, cur, len + 1 ))"];
"1000470" [label="(Call,error = T1_Add_Table( name_table, n, cur, len + 1 ))"];
"1000509" [label="(Call,notdef_index = n)"];
"1000686" [label="(Call,T1_Add_Table( name_table, notdef_index,\n                            swap_table->elements[0],\n                            swap_table->lengths [0] ))"];
"1000684" [label="(Call,error = T1_Add_Table( name_table, notdef_index,\n                            swap_table->elements[0],\n                            swap_table->lengths [0] ))"];
"1000704" [label="(Call,T1_Add_Table( code_table, notdef_index,\n                            swap_table->elements[1],\n                            swap_table->lengths [1] ))"];
"1000702" [label="(Call,error = T1_Add_Table( code_table, notdef_index,\n                            swap_table->elements[1],\n                            swap_table->lengths [1] ))"];
"1000740" [label="(Call,T1_Add_Table( code_table, 0,\n                            swap_table->elements[3],\n                            swap_table->lengths [3] ))"];
"1000738" [label="(Call,error = T1_Add_Table( code_table, 0,\n                            swap_table->elements[3],\n                            swap_table->lengths [3] ))"];
"1000722" [label="(Call,T1_Add_Table( name_table, 0,\n                            swap_table->elements[2],\n                            swap_table->lengths [2] ))"];
"1000720" [label="(Call,error = T1_Add_Table( name_table, 0,\n                            swap_table->elements[2],\n                            swap_table->lengths [2] ))"];
"1000583" [label="(Call,loader->num_glyphs = n)"];
"1000559" [label="(Call,len + 1)"];
"1000258" [label="(Identifier,cur)"];
"1000509" [label="(Call,notdef_index = n)"];
"1000412" [label="(Call,cur[2] == 'd'          &&\n           t42_is_space( cur[3] ))"];
"1000393" [label="(ControlStructure,break;)"];
"1000759" [label="(Call,parser->root.error)"];
"1000765" [label="(MethodReturn,RET)"];
"1000685" [label="(Identifier,error)"];
"1000764" [label="(Identifier,error)"];
"1000415" [label="(Identifier,cur)"];
"1000686" [label="(Call,T1_Add_Table( name_table, notdef_index,\n                            swap_table->elements[0],\n                            swap_table->lengths [0] ))"];
"1000740" [label="(Call,T1_Add_Table( code_table, 0,\n                            swap_table->elements[3],\n                            swap_table->lengths [3] ))"];
"1000192" [label="(Call,parser->root.cursor >= limit)"];
"1000408" [label="(Call,cur[1])"];
"1000736" [label="(Identifier,error)"];
"1000193" [label="(Call,parser->root.cursor)"];
"1000594" [label="(Call,error = FT_THROW( Invalid_File_Format ))"];
"1000202" [label="(Call,error = FT_THROW( Invalid_File_Format ))"];
"1000174" [label="(Identifier,limit)"];
"1000611" [label="(Block,)"];
"1000212" [label="(Identifier,parser)"];
"1000413" [label="(Call,cur[2] == 'd')"];
"1000470" [label="(Call,error = T1_Add_Table( name_table, n, cur, len + 1 ))"];
"1000474" [label="(Identifier,n)"];
"1000443" [label="(Block,)"];
"1000590" [label="(Identifier,notdef_found)"];
"1000307" [label="(ControlStructure,break;)"];
"1000201" [label="(Literal,\"t42_parse_charstrings: out of bounds\n\")"];
"1000539" [label="(Call,error = FT_THROW( Invalid_File_Format ))"];
"1000266" [label="(Call,parser->root.cursor)"];
"1000544" [label="(Call,len = parser->root.cursor - cur)"];
"1000300" [label="(Call,parser->root.cursor = cur)"];
"1000182" [label="(Call,notdef_index = 0)"];
"1000510" [label="(Identifier,notdef_index)"];
"1000198" [label="(Identifier,limit)"];
"1000688" [label="(Identifier,notdef_index)"];
"1000463" [label="(Call,parser->root.cursor - cur)"];
"1000125" [label="(Block,)"];
"1000344" [label="(Call,error = psaux->ps_table_funcs->init( code_table,\n                                         loader->num_glyphs,\n                                         memory ))"];
"1000330" [label="(Call,parser->root.cursor)"];
"1000561" [label="(Literal,1)"];
"1000730" [label="(Call,swap_table->lengths [2])"];
"1000707" [label="(Call,swap_table->elements[1])"];
"1000384" [label="(Call,parser->root.cursor)"];
"1000271" [label="(Identifier,limit)"];
"1000392" [label="(Identifier,limit)"];
"1000472" [label="(Call,T1_Add_Table( name_table, n, cur, len + 1 ))"];
"1000684" [label="(Call,error = T1_Add_Table( name_table, notdef_index,\n                            swap_table->elements[0],\n                            swap_table->lengths [0] ))"];
"1000553" [label="(Call,error = T1_Add_Table( code_table, n, cur, len + 1 ))"];
"1000405" [label="(Identifier,limit)"];
"1000447" [label="(Call,cur + 2)"];
"1000338" [label="(Literal,\"t42_parse_charstrings: out of bounds\n\")"];
"1000560" [label="(Identifier,len)"];
"1000517" [label="(Call,cur = parser->root.cursor)"];
"1000323" [label="(Call,error = FT_THROW( Invalid_File_Format ))"];
"1000462" [label="(Identifier,len)"];
"1000758" [label="(Call,parser->root.error = error)"];
"1000480" [label="(Identifier,error)"];
"1000582" [label="(ControlStructure,break;)"];
"1000355" [label="(Call,error = psaux->ps_table_funcs->init( name_table,\n                                         loader->num_glyphs,\n                                         memory ))"];
"1000511" [label="(Identifier,n)"];
"1000689" [label="(Call,swap_table->elements[0])"];
"1000406" [label="(Call,cur[1] == 'n'          &&\n           cur[2] == 'd'          &&\n           t42_is_space( cur[3] ))"];
"1000460" [label="(Identifier,cur)"];
"1000742" [label="(Literal,0)"];
"1000414" [label="(Call,cur[2])"];
"1000545" [label="(Identifier,len)"];
"1000743" [label="(Call,swap_table->elements[3])"];
"1000687" [label="(Identifier,name_table)"];
"1000559" [label="(Call,len + 1)"];
"1000666" [label="(Call,error = T1_Add_Table( swap_table, 3,\n                            code_table->elements[notdef_index],\n                            code_table->lengths [notdef_index] ))"];
"1000476" [label="(Call,len + 1)"];
"1000191" [label="(ControlStructure,if ( parser->root.cursor >= limit ))"];
"1000379" [label="(Block,)"];
"1000518" [label="(Identifier,cur)"];
"1000722" [label="(Call,T1_Add_Table( name_table, 0,\n                            swap_table->elements[2],\n                            swap_table->lengths [2] ))"];
"1000546" [label="(Call,parser->root.cursor - cur)"];
"1000264" [label="(ControlStructure,while ( parser->root.cursor < limit ))"];
"1000400" [label="(Call,cur + 3 < limit        &&\n           cur[1] == 'n'          &&\n           cur[2] == 'd'          &&\n           t42_is_space( cur[3] ))"];
"1000375" [label="(Call,n = 0)"];
"1000383" [label="(Identifier,cur)"];
"1000464" [label="(Call,parser->root.cursor)"];
"1000469" [label="(Identifier,cur)"];
"1000557" [label="(Identifier,n)"];
"1000579" [label="(Call,loader->num_glyphs)"];
"1000576" [label="(ControlStructure,if ( n >= loader->num_glyphs ))"];
"1000552" [label="(Identifier,cur)"];
"1000306" [label="(Identifier,cur)"];
"1000459" [label="(Call,cur++)"];
"1000694" [label="(Call,swap_table->lengths [0])"];
"1000411" [label="(Literal,'n')"];
"1000578" [label="(Identifier,n)"];
"1000390" [label="(Call,cur >= limit)"];
"1000741" [label="(Identifier,code_table)"];
"1000265" [label="(Call,parser->root.cursor < limit)"];
"1000473" [label="(Identifier,name_table)"];
"1000574" [label="(Call,n++)"];
"1000475" [label="(Identifier,cur)"];
"1000382" [label="(Call,cur = parser->root.cursor)"];
"1000700" [label="(Identifier,error)"];
"1000389" [label="(ControlStructure,if ( cur >= limit ))"];
"1000703" [label="(Identifier,error)"];
"1000508" [label="(Block,)"];
"1000278" [label="(Identifier,parser)"];
"1000648" [label="(Call,error = T1_Add_Table( swap_table, 2,\n                            name_table->elements[notdef_index],\n                            name_table->lengths [notdef_index] ))"];
"1000724" [label="(Literal,0)"];
"1000630" [label="(Call,error = T1_Add_Table( swap_table, 1,\n                            code_table->elements[0],\n                            code_table->lengths [0] ))"];
"1000612" [label="(Call,error = T1_Add_Table( swap_table, 0,\n                            name_table->elements[0],\n                            name_table->lengths [0] ))"];
"1000183" [label="(Identifier,notdef_index)"];
"1000535" [label="(Identifier,limit)"];
"1000409" [label="(Identifier,cur)"];
"1000723" [label="(Identifier,name_table)"];
"1000328" [label="(ControlStructure,if ( parser->root.cursor >= limit ))"];
"1000357" [label="(Call,psaux->ps_table_funcs->init( name_table,\n                                         loader->num_glyphs,\n                                         memory ))"];
"1000587" [label="(Identifier,n)"];
"1000294" [label="(Block,)"];
"1000175" [label="(Call,parser->root.limit)"];
"1000335" [label="(Identifier,limit)"];
"1000407" [label="(Call,cur[1] == 'n')"];
"1000461" [label="(Call,len = parser->root.cursor - cur)"];
"1000513" [label="(Identifier,notdef_found)"];
"1000739" [label="(Identifier,error)"];
"1000556" [label="(Identifier,code_table)"];
"1000345" [label="(Identifier,error)"];
"1000748" [label="(Call,swap_table->lengths [3])"];
"1000721" [label="(Identifier,error)"];
"1000519" [label="(Call,parser->root.cursor)"];
"1000575" [label="(Identifier,n)"];
"1000381" [label="(Identifier,parser)"];
"1000401" [label="(Call,cur + 3 < limit)"];
"1000529" [label="(Call,parser->root.cursor >= limit)"];
"1000538" [label="(Literal,\"t42_parse_charstrings: out of bounds\n\")"];
"1000420" [label="(Identifier,cur)"];
"1000453" [label="(Literal,\"t42_parse_charstrings: out of bounds\n\")"];
"1000339" [label="(Call,error = FT_THROW( Invalid_File_Format ))"];
"1000418" [label="(Call,t42_is_space( cur[3] ))"];
"1000558" [label="(Identifier,cur)"];
"1000718" [label="(Identifier,error)"];
"1000563" [label="(Identifier,error)"];
"1000712" [label="(Call,swap_table->lengths [1])"];
"1000702" [label="(Call,error = T1_Add_Table( code_table, notdef_index,\n                            swap_table->elements[1],\n                            swap_table->lengths [1] ))"];
"1000720" [label="(Call,error = T1_Add_Table( name_table, 0,\n                            swap_table->elements[2],\n                            swap_table->lengths [2] ))"];
"1000445" [label="(ControlStructure,if ( cur + 2 >= limit ))"];
"1000366" [label="(Call,error = psaux->ps_table_funcs->init( swap_table, 4, memory ))"];
"1000583" [label="(Call,loader->num_glyphs = n)"];
"1000555" [label="(Call,T1_Add_Table( code_table, n, cur, len + 1 ))"];
"1000706" [label="(Identifier,notdef_index)"];
"1000547" [label="(Call,parser->root.cursor)"];
"1000450" [label="(Identifier,limit)"];
"1000419" [label="(Call,cur[3])"];
"1000471" [label="(Identifier,error)"];
"1000268" [label="(Identifier,parser)"];
"1000346" [label="(Call,psaux->ps_table_funcs->init( code_table,\n                                         loader->num_glyphs,\n                                         memory ))"];
"1000530" [label="(Call,parser->root.cursor)"];
"1000257" [label="(Call,cur = parser->root.cursor)"];
"1000402" [label="(Call,cur + 3)"];
"1000738" [label="(Call,error = T1_Add_Table( code_table, 0,\n                            swap_table->elements[3],\n                            swap_table->lengths [3] ))"];
"1000417" [label="(Literal,'d')"];
"1000329" [label="(Call,parser->root.cursor >= limit)"];
"1000259" [label="(Call,parser->root.cursor)"];
"1000173" [label="(Call,*       limit        = parser->root.limit)"];
"1000528" [label="(ControlStructure,if ( parser->root.cursor >= limit ))"];
"1000398" [label="(Identifier,cur)"];
"1000554" [label="(Identifier,error)"];
"1000454" [label="(Call,error = FT_THROW( Invalid_File_Format ))"];
"1000754" [label="(Identifier,error)"];
"1000241" [label="(Block,)"];
"1000705" [label="(Identifier,code_table)"];
"1000391" [label="(Identifier,cur)"];
"1000301" [label="(Call,parser->root.cursor)"];
"1000446" [label="(Call,cur + 2 >= limit)"];
"1000704" [label="(Call,T1_Add_Table( code_table, notdef_index,\n                            swap_table->elements[1],\n                            swap_table->lengths [1] ))"];
"1000332" [label="(Identifier,parser)"];
"1000577" [label="(Call,n >= loader->num_glyphs)"];
"1000725" [label="(Call,swap_table->elements[2])"];
"1000584" [label="(Call,loader->num_glyphs)"];
"1000544" -> "1000443"  [label="AST: "];
"1000544" -> "1000546"  [label="CFG: "];
"1000545" -> "1000544"  [label="AST: "];
"1000546" -> "1000544"  [label="AST: "];
"1000554" -> "1000544"  [label="CFG: "];
"1000544" -> "1000765"  [label="DDG: parser->root.cursor - cur"];
"1000546" -> "1000544"  [label="DDG: parser->root.cursor"];
"1000546" -> "1000544"  [label="DDG: cur"];
"1000544" -> "1000555"  [label="DDG: len"];
"1000544" -> "1000559"  [label="DDG: len"];
"1000546" -> "1000552"  [label="CFG: "];
"1000547" -> "1000546"  [label="AST: "];
"1000552" -> "1000546"  [label="AST: "];
"1000546" -> "1000765"  [label="DDG: parser->root.cursor"];
"1000546" -> "1000382"  [label="DDG: parser->root.cursor"];
"1000546" -> "1000463"  [label="DDG: parser->root.cursor"];
"1000529" -> "1000546"  [label="DDG: parser->root.cursor"];
"1000407" -> "1000546"  [label="DDG: cur[1]"];
"1000413" -> "1000546"  [label="DDG: cur[2]"];
"1000517" -> "1000546"  [label="DDG: cur"];
"1000418" -> "1000546"  [label="DDG: cur[3]"];
"1000546" -> "1000555"  [label="DDG: cur"];
"1000529" -> "1000528"  [label="AST: "];
"1000529" -> "1000535"  [label="CFG: "];
"1000530" -> "1000529"  [label="AST: "];
"1000535" -> "1000529"  [label="AST: "];
"1000538" -> "1000529"  [label="CFG: "];
"1000545" -> "1000529"  [label="CFG: "];
"1000529" -> "1000765"  [label="DDG: parser->root.cursor"];
"1000529" -> "1000765"  [label="DDG: parser->root.cursor >= limit"];
"1000529" -> "1000765"  [label="DDG: limit"];
"1000529" -> "1000390"  [label="DDG: limit"];
"1000463" -> "1000529"  [label="DDG: parser->root.cursor"];
"1000446" -> "1000529"  [label="DDG: limit"];
"1000463" -> "1000461"  [label="AST: "];
"1000463" -> "1000469"  [label="CFG: "];
"1000464" -> "1000463"  [label="AST: "];
"1000469" -> "1000463"  [label="AST: "];
"1000461" -> "1000463"  [label="CFG: "];
"1000463" -> "1000765"  [label="DDG: parser->root.cursor"];
"1000463" -> "1000461"  [label="DDG: parser->root.cursor"];
"1000463" -> "1000461"  [label="DDG: cur"];
"1000329" -> "1000463"  [label="DDG: parser->root.cursor"];
"1000459" -> "1000463"  [label="DDG: cur"];
"1000407" -> "1000463"  [label="DDG: cur[1]"];
"1000413" -> "1000463"  [label="DDG: cur[2]"];
"1000418" -> "1000463"  [label="DDG: cur[3]"];
"1000463" -> "1000472"  [label="DDG: cur"];
"1000463" -> "1000517"  [label="DDG: parser->root.cursor"];
"1000329" -> "1000328"  [label="AST: "];
"1000329" -> "1000335"  [label="CFG: "];
"1000330" -> "1000329"  [label="AST: "];
"1000335" -> "1000329"  [label="AST: "];
"1000338" -> "1000329"  [label="CFG: "];
"1000345" -> "1000329"  [label="CFG: "];
"1000329" -> "1000765"  [label="DDG: parser->root.cursor >= limit"];
"1000329" -> "1000765"  [label="DDG: parser->root.cursor"];
"1000329" -> "1000765"  [label="DDG: limit"];
"1000300" -> "1000329"  [label="DDG: parser->root.cursor"];
"1000265" -> "1000329"  [label="DDG: parser->root.cursor"];
"1000265" -> "1000329"  [label="DDG: limit"];
"1000192" -> "1000329"  [label="DDG: parser->root.cursor"];
"1000192" -> "1000329"  [label="DDG: limit"];
"1000329" -> "1000382"  [label="DDG: parser->root.cursor"];
"1000329" -> "1000390"  [label="DDG: limit"];
"1000300" -> "1000294"  [label="AST: "];
"1000300" -> "1000306"  [label="CFG: "];
"1000301" -> "1000300"  [label="AST: "];
"1000306" -> "1000300"  [label="AST: "];
"1000307" -> "1000300"  [label="CFG: "];
"1000300" -> "1000765"  [label="DDG: cur"];
"1000257" -> "1000300"  [label="DDG: cur"];
"1000257" -> "1000241"  [label="AST: "];
"1000257" -> "1000259"  [label="CFG: "];
"1000258" -> "1000257"  [label="AST: "];
"1000259" -> "1000257"  [label="AST: "];
"1000268" -> "1000257"  [label="CFG: "];
"1000257" -> "1000765"  [label="DDG: cur"];
"1000192" -> "1000257"  [label="DDG: parser->root.cursor"];
"1000192" -> "1000191"  [label="AST: "];
"1000192" -> "1000198"  [label="CFG: "];
"1000193" -> "1000192"  [label="AST: "];
"1000198" -> "1000192"  [label="AST: "];
"1000201" -> "1000192"  [label="CFG: "];
"1000212" -> "1000192"  [label="CFG: "];
"1000192" -> "1000765"  [label="DDG: parser->root.cursor"];
"1000192" -> "1000765"  [label="DDG: parser->root.cursor >= limit"];
"1000192" -> "1000765"  [label="DDG: limit"];
"1000173" -> "1000192"  [label="DDG: limit"];
"1000192" -> "1000265"  [label="DDG: parser->root.cursor"];
"1000192" -> "1000265"  [label="DDG: limit"];
"1000173" -> "1000125"  [label="AST: "];
"1000173" -> "1000175"  [label="CFG: "];
"1000174" -> "1000173"  [label="AST: "];
"1000175" -> "1000173"  [label="AST: "];
"1000183" -> "1000173"  [label="CFG: "];
"1000173" -> "1000765"  [label="DDG: parser->root.limit"];
"1000265" -> "1000264"  [label="AST: "];
"1000265" -> "1000271"  [label="CFG: "];
"1000266" -> "1000265"  [label="AST: "];
"1000271" -> "1000265"  [label="AST: "];
"1000278" -> "1000265"  [label="CFG: "];
"1000332" -> "1000265"  [label="CFG: "];
"1000265" -> "1000765"  [label="DDG: parser->root.cursor < limit"];
"1000265" -> "1000765"  [label="DDG: parser->root.cursor"];
"1000265" -> "1000765"  [label="DDG: limit"];
"1000459" -> "1000443"  [label="AST: "];
"1000459" -> "1000460"  [label="CFG: "];
"1000460" -> "1000459"  [label="AST: "];
"1000462" -> "1000459"  [label="CFG: "];
"1000407" -> "1000459"  [label="DDG: cur[1]"];
"1000413" -> "1000459"  [label="DDG: cur[2]"];
"1000418" -> "1000459"  [label="DDG: cur[3]"];
"1000390" -> "1000459"  [label="DDG: cur"];
"1000407" -> "1000406"  [label="AST: "];
"1000407" -> "1000411"  [label="CFG: "];
"1000408" -> "1000407"  [label="AST: "];
"1000411" -> "1000407"  [label="AST: "];
"1000415" -> "1000407"  [label="CFG: "];
"1000406" -> "1000407"  [label="CFG: "];
"1000407" -> "1000765"  [label="DDG: cur[1]"];
"1000407" -> "1000390"  [label="DDG: cur[1]"];
"1000407" -> "1000401"  [label="DDG: cur[1]"];
"1000407" -> "1000402"  [label="DDG: cur[1]"];
"1000407" -> "1000406"  [label="DDG: cur[1]"];
"1000407" -> "1000406"  [label="DDG: 'n'"];
"1000413" -> "1000407"  [label="DDG: cur[2]"];
"1000390" -> "1000407"  [label="DDG: cur"];
"1000418" -> "1000407"  [label="DDG: cur[3]"];
"1000407" -> "1000413"  [label="DDG: cur[1]"];
"1000407" -> "1000418"  [label="DDG: cur[1]"];
"1000407" -> "1000446"  [label="DDG: cur[1]"];
"1000407" -> "1000447"  [label="DDG: cur[1]"];
"1000407" -> "1000472"  [label="DDG: cur[1]"];
"1000407" -> "1000555"  [label="DDG: cur[1]"];
"1000413" -> "1000412"  [label="AST: "];
"1000413" -> "1000417"  [label="CFG: "];
"1000414" -> "1000413"  [label="AST: "];
"1000417" -> "1000413"  [label="AST: "];
"1000420" -> "1000413"  [label="CFG: "];
"1000412" -> "1000413"  [label="CFG: "];
"1000413" -> "1000765"  [label="DDG: cur[2]"];
"1000413" -> "1000390"  [label="DDG: cur[2]"];
"1000413" -> "1000401"  [label="DDG: cur[2]"];
"1000413" -> "1000402"  [label="DDG: cur[2]"];
"1000413" -> "1000412"  [label="DDG: cur[2]"];
"1000413" -> "1000412"  [label="DDG: 'd'"];
"1000390" -> "1000413"  [label="DDG: cur"];
"1000418" -> "1000413"  [label="DDG: cur[3]"];
"1000413" -> "1000418"  [label="DDG: cur[2]"];
"1000413" -> "1000446"  [label="DDG: cur[2]"];
"1000413" -> "1000447"  [label="DDG: cur[2]"];
"1000413" -> "1000472"  [label="DDG: cur[2]"];
"1000413" -> "1000555"  [label="DDG: cur[2]"];
"1000390" -> "1000389"  [label="AST: "];
"1000390" -> "1000392"  [label="CFG: "];
"1000391" -> "1000390"  [label="AST: "];
"1000392" -> "1000390"  [label="AST: "];
"1000393" -> "1000390"  [label="CFG: "];
"1000398" -> "1000390"  [label="CFG: "];
"1000390" -> "1000765"  [label="DDG: limit"];
"1000390" -> "1000765"  [label="DDG: cur >= limit"];
"1000390" -> "1000765"  [label="DDG: cur"];
"1000382" -> "1000390"  [label="DDG: cur"];
"1000418" -> "1000390"  [label="DDG: cur[3]"];
"1000401" -> "1000390"  [label="DDG: limit"];
"1000390" -> "1000401"  [label="DDG: cur"];
"1000390" -> "1000401"  [label="DDG: limit"];
"1000390" -> "1000402"  [label="DDG: cur"];
"1000390" -> "1000418"  [label="DDG: cur"];
"1000390" -> "1000446"  [label="DDG: cur"];
"1000390" -> "1000446"  [label="DDG: limit"];
"1000390" -> "1000447"  [label="DDG: cur"];
"1000382" -> "1000379"  [label="AST: "];
"1000382" -> "1000384"  [label="CFG: "];
"1000383" -> "1000382"  [label="AST: "];
"1000384" -> "1000382"  [label="AST: "];
"1000391" -> "1000382"  [label="CFG: "];
"1000382" -> "1000765"  [label="DDG: parser->root.cursor"];
"1000418" -> "1000412"  [label="AST: "];
"1000418" -> "1000419"  [label="CFG: "];
"1000419" -> "1000418"  [label="AST: "];
"1000412" -> "1000418"  [label="CFG: "];
"1000418" -> "1000765"  [label="DDG: cur[3]"];
"1000418" -> "1000401"  [label="DDG: cur[3]"];
"1000418" -> "1000402"  [label="DDG: cur[3]"];
"1000418" -> "1000412"  [label="DDG: cur[3]"];
"1000418" -> "1000446"  [label="DDG: cur[3]"];
"1000418" -> "1000447"  [label="DDG: cur[3]"];
"1000418" -> "1000472"  [label="DDG: cur[3]"];
"1000418" -> "1000555"  [label="DDG: cur[3]"];
"1000401" -> "1000400"  [label="AST: "];
"1000401" -> "1000405"  [label="CFG: "];
"1000402" -> "1000401"  [label="AST: "];
"1000405" -> "1000401"  [label="AST: "];
"1000409" -> "1000401"  [label="CFG: "];
"1000400" -> "1000401"  [label="CFG: "];
"1000401" -> "1000765"  [label="DDG: limit"];
"1000401" -> "1000765"  [label="DDG: cur + 3"];
"1000401" -> "1000400"  [label="DDG: cur + 3"];
"1000401" -> "1000400"  [label="DDG: limit"];
"1000401" -> "1000446"  [label="DDG: limit"];
"1000446" -> "1000445"  [label="AST: "];
"1000446" -> "1000450"  [label="CFG: "];
"1000447" -> "1000446"  [label="AST: "];
"1000450" -> "1000446"  [label="AST: "];
"1000453" -> "1000446"  [label="CFG: "];
"1000460" -> "1000446"  [label="CFG: "];
"1000446" -> "1000765"  [label="DDG: limit"];
"1000446" -> "1000765"  [label="DDG: cur + 2 >= limit"];
"1000446" -> "1000765"  [label="DDG: cur + 2"];
"1000517" -> "1000443"  [label="AST: "];
"1000517" -> "1000519"  [label="CFG: "];
"1000518" -> "1000517"  [label="AST: "];
"1000519" -> "1000517"  [label="AST: "];
"1000525" -> "1000517"  [label="CFG: "];
"1000517" -> "1000765"  [label="DDG: cur"];
"1000555" -> "1000553"  [label="AST: "];
"1000555" -> "1000559"  [label="CFG: "];
"1000556" -> "1000555"  [label="AST: "];
"1000557" -> "1000555"  [label="AST: "];
"1000558" -> "1000555"  [label="AST: "];
"1000559" -> "1000555"  [label="AST: "];
"1000553" -> "1000555"  [label="CFG: "];
"1000555" -> "1000765"  [label="DDG: n"];
"1000555" -> "1000765"  [label="DDG: code_table"];
"1000555" -> "1000765"  [label="DDG: cur"];
"1000555" -> "1000765"  [label="DDG: len + 1"];
"1000555" -> "1000553"  [label="DDG: code_table"];
"1000555" -> "1000553"  [label="DDG: n"];
"1000555" -> "1000553"  [label="DDG: cur"];
"1000555" -> "1000553"  [label="DDG: len + 1"];
"1000346" -> "1000555"  [label="DDG: code_table"];
"1000472" -> "1000555"  [label="DDG: n"];
"1000555" -> "1000574"  [label="DDG: n"];
"1000555" -> "1000704"  [label="DDG: code_table"];
"1000553" -> "1000443"  [label="AST: "];
"1000554" -> "1000553"  [label="AST: "];
"1000563" -> "1000553"  [label="CFG: "];
"1000553" -> "1000765"  [label="DDG: error"];
"1000553" -> "1000765"  [label="DDG: T1_Add_Table( code_table, n, cur, len + 1 )"];
"1000553" -> "1000758"  [label="DDG: error"];
"1000758" -> "1000125"  [label="AST: "];
"1000758" -> "1000764"  [label="CFG: "];
"1000759" -> "1000758"  [label="AST: "];
"1000764" -> "1000758"  [label="AST: "];
"1000765" -> "1000758"  [label="CFG: "];
"1000758" -> "1000765"  [label="DDG: parser->root.error"];
"1000758" -> "1000765"  [label="DDG: error"];
"1000355" -> "1000758"  [label="DDG: error"];
"1000594" -> "1000758"  [label="DDG: error"];
"1000684" -> "1000758"  [label="DDG: error"];
"1000738" -> "1000758"  [label="DDG: error"];
"1000630" -> "1000758"  [label="DDG: error"];
"1000366" -> "1000758"  [label="DDG: error"];
"1000648" -> "1000758"  [label="DDG: error"];
"1000323" -> "1000758"  [label="DDG: error"];
"1000470" -> "1000758"  [label="DDG: error"];
"1000344" -> "1000758"  [label="DDG: error"];
"1000666" -> "1000758"  [label="DDG: error"];
"1000539" -> "1000758"  [label="DDG: error"];
"1000454" -> "1000758"  [label="DDG: error"];
"1000612" -> "1000758"  [label="DDG: error"];
"1000202" -> "1000758"  [label="DDG: error"];
"1000720" -> "1000758"  [label="DDG: error"];
"1000339" -> "1000758"  [label="DDG: error"];
"1000702" -> "1000758"  [label="DDG: error"];
"1000574" -> "1000443"  [label="AST: "];
"1000574" -> "1000575"  [label="CFG: "];
"1000575" -> "1000574"  [label="AST: "];
"1000578" -> "1000574"  [label="CFG: "];
"1000574" -> "1000577"  [label="DDG: n"];
"1000577" -> "1000576"  [label="AST: "];
"1000577" -> "1000579"  [label="CFG: "];
"1000578" -> "1000577"  [label="AST: "];
"1000579" -> "1000577"  [label="AST: "];
"1000381" -> "1000577"  [label="CFG: "];
"1000582" -> "1000577"  [label="CFG: "];
"1000577" -> "1000765"  [label="DDG: loader->num_glyphs"];
"1000577" -> "1000765"  [label="DDG: n >= loader->num_glyphs"];
"1000577" -> "1000765"  [label="DDG: n"];
"1000577" -> "1000472"  [label="DDG: n"];
"1000357" -> "1000577"  [label="DDG: loader->num_glyphs"];
"1000577" -> "1000583"  [label="DDG: n"];
"1000472" -> "1000470"  [label="AST: "];
"1000472" -> "1000476"  [label="CFG: "];
"1000473" -> "1000472"  [label="AST: "];
"1000474" -> "1000472"  [label="AST: "];
"1000475" -> "1000472"  [label="AST: "];
"1000476" -> "1000472"  [label="AST: "];
"1000470" -> "1000472"  [label="CFG: "];
"1000472" -> "1000765"  [label="DDG: len + 1"];
"1000472" -> "1000765"  [label="DDG: n"];
"1000472" -> "1000765"  [label="DDG: cur"];
"1000472" -> "1000765"  [label="DDG: name_table"];
"1000472" -> "1000470"  [label="DDG: name_table"];
"1000472" -> "1000470"  [label="DDG: n"];
"1000472" -> "1000470"  [label="DDG: cur"];
"1000472" -> "1000470"  [label="DDG: len + 1"];
"1000357" -> "1000472"  [label="DDG: name_table"];
"1000375" -> "1000472"  [label="DDG: n"];
"1000461" -> "1000472"  [label="DDG: len"];
"1000472" -> "1000509"  [label="DDG: n"];
"1000472" -> "1000686"  [label="DDG: name_table"];
"1000470" -> "1000443"  [label="AST: "];
"1000471" -> "1000470"  [label="AST: "];
"1000480" -> "1000470"  [label="CFG: "];
"1000470" -> "1000765"  [label="DDG: T1_Add_Table( name_table, n, cur, len + 1 )"];
"1000509" -> "1000508"  [label="AST: "];
"1000509" -> "1000511"  [label="CFG: "];
"1000510" -> "1000509"  [label="AST: "];
"1000511" -> "1000509"  [label="AST: "];
"1000513" -> "1000509"  [label="CFG: "];
"1000509" -> "1000765"  [label="DDG: n"];
"1000509" -> "1000765"  [label="DDG: notdef_index"];
"1000509" -> "1000686"  [label="DDG: notdef_index"];
"1000686" -> "1000684"  [label="AST: "];
"1000686" -> "1000694"  [label="CFG: "];
"1000687" -> "1000686"  [label="AST: "];
"1000688" -> "1000686"  [label="AST: "];
"1000689" -> "1000686"  [label="AST: "];
"1000694" -> "1000686"  [label="AST: "];
"1000684" -> "1000686"  [label="CFG: "];
"1000686" -> "1000765"  [label="DDG: swap_table->elements[0]"];
"1000686" -> "1000765"  [label="DDG: name_table"];
"1000686" -> "1000765"  [label="DDG: swap_table->lengths [0]"];
"1000686" -> "1000765"  [label="DDG: notdef_index"];
"1000686" -> "1000684"  [label="DDG: name_table"];
"1000686" -> "1000684"  [label="DDG: notdef_index"];
"1000686" -> "1000684"  [label="DDG: swap_table->elements[0]"];
"1000686" -> "1000684"  [label="DDG: swap_table->lengths [0]"];
"1000357" -> "1000686"  [label="DDG: name_table"];
"1000182" -> "1000686"  [label="DDG: notdef_index"];
"1000686" -> "1000704"  [label="DDG: notdef_index"];
"1000686" -> "1000722"  [label="DDG: name_table"];
"1000684" -> "1000611"  [label="AST: "];
"1000685" -> "1000684"  [label="AST: "];
"1000700" -> "1000684"  [label="CFG: "];
"1000684" -> "1000765"  [label="DDG: T1_Add_Table( name_table, notdef_index,\n                            swap_table->elements[0],\n                            swap_table->lengths [0] )"];
"1000704" -> "1000702"  [label="AST: "];
"1000704" -> "1000712"  [label="CFG: "];
"1000705" -> "1000704"  [label="AST: "];
"1000706" -> "1000704"  [label="AST: "];
"1000707" -> "1000704"  [label="AST: "];
"1000712" -> "1000704"  [label="AST: "];
"1000702" -> "1000704"  [label="CFG: "];
"1000704" -> "1000765"  [label="DDG: swap_table->lengths [1]"];
"1000704" -> "1000765"  [label="DDG: notdef_index"];
"1000704" -> "1000765"  [label="DDG: code_table"];
"1000704" -> "1000765"  [label="DDG: swap_table->elements[1]"];
"1000704" -> "1000702"  [label="DDG: code_table"];
"1000704" -> "1000702"  [label="DDG: notdef_index"];
"1000704" -> "1000702"  [label="DDG: swap_table->elements[1]"];
"1000704" -> "1000702"  [label="DDG: swap_table->lengths [1]"];
"1000346" -> "1000704"  [label="DDG: code_table"];
"1000704" -> "1000740"  [label="DDG: code_table"];
"1000702" -> "1000611"  [label="AST: "];
"1000703" -> "1000702"  [label="AST: "];
"1000718" -> "1000702"  [label="CFG: "];
"1000702" -> "1000765"  [label="DDG: T1_Add_Table( code_table, notdef_index,\n                            swap_table->elements[1],\n                            swap_table->lengths [1] )"];
"1000740" -> "1000738"  [label="AST: "];
"1000740" -> "1000748"  [label="CFG: "];
"1000741" -> "1000740"  [label="AST: "];
"1000742" -> "1000740"  [label="AST: "];
"1000743" -> "1000740"  [label="AST: "];
"1000748" -> "1000740"  [label="AST: "];
"1000738" -> "1000740"  [label="CFG: "];
"1000740" -> "1000765"  [label="DDG: swap_table->lengths [3]"];
"1000740" -> "1000765"  [label="DDG: swap_table->elements[3]"];
"1000740" -> "1000765"  [label="DDG: code_table"];
"1000740" -> "1000738"  [label="DDG: code_table"];
"1000740" -> "1000738"  [label="DDG: 0"];
"1000740" -> "1000738"  [label="DDG: swap_table->elements[3]"];
"1000740" -> "1000738"  [label="DDG: swap_table->lengths [3]"];
"1000738" -> "1000611"  [label="AST: "];
"1000739" -> "1000738"  [label="AST: "];
"1000754" -> "1000738"  [label="CFG: "];
"1000738" -> "1000765"  [label="DDG: error"];
"1000738" -> "1000765"  [label="DDG: T1_Add_Table( code_table, 0,\n                            swap_table->elements[3],\n                            swap_table->lengths [3] )"];
"1000722" -> "1000720"  [label="AST: "];
"1000722" -> "1000730"  [label="CFG: "];
"1000723" -> "1000722"  [label="AST: "];
"1000724" -> "1000722"  [label="AST: "];
"1000725" -> "1000722"  [label="AST: "];
"1000730" -> "1000722"  [label="AST: "];
"1000720" -> "1000722"  [label="CFG: "];
"1000722" -> "1000765"  [label="DDG: swap_table->lengths [2]"];
"1000722" -> "1000765"  [label="DDG: swap_table->elements[2]"];
"1000722" -> "1000765"  [label="DDG: name_table"];
"1000722" -> "1000720"  [label="DDG: name_table"];
"1000722" -> "1000720"  [label="DDG: 0"];
"1000722" -> "1000720"  [label="DDG: swap_table->elements[2]"];
"1000722" -> "1000720"  [label="DDG: swap_table->lengths [2]"];
"1000720" -> "1000611"  [label="AST: "];
"1000721" -> "1000720"  [label="AST: "];
"1000736" -> "1000720"  [label="CFG: "];
"1000720" -> "1000765"  [label="DDG: T1_Add_Table( name_table, 0,\n                            swap_table->elements[2],\n                            swap_table->lengths [2] )"];
"1000583" -> "1000125"  [label="AST: "];
"1000583" -> "1000587"  [label="CFG: "];
"1000584" -> "1000583"  [label="AST: "];
"1000587" -> "1000583"  [label="AST: "];
"1000590" -> "1000583"  [label="CFG: "];
"1000583" -> "1000765"  [label="DDG: loader->num_glyphs"];
"1000583" -> "1000765"  [label="DDG: n"];
"1000375" -> "1000583"  [label="DDG: n"];
"1000559" -> "1000561"  [label="CFG: "];
"1000560" -> "1000559"  [label="AST: "];
"1000561" -> "1000559"  [label="AST: "];
"1000559" -> "1000765"  [label="DDG: len"];
}
