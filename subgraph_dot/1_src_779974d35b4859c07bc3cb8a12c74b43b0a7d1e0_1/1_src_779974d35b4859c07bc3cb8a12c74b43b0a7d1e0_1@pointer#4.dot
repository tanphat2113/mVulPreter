digraph "1_src_779974d35b4859c07bc3cb8a12c74b43b0a7d1e0_1@pointer" {
"1000368" [label="(Call,ssh->compat & SSH_OLD_SESSIONID)"];
"1000264" [label="(Call,ssh->compat & SSH_BUG_RSASIGMD5)"];
"1000517" [label="(Call,ssh->compat & SSH_BUG_SIGTYPE)"];
"1000516" [label="(Call,(ssh->compat & SSH_BUG_SIGTYPE) == 0)"];
"1000507" [label="(Call,sshkey_verify(key, sig, slen,\n\t\t    sshbuf_ptr(b), sshbuf_len(b),\n\t\t    (ssh->compat & SSH_BUG_SIGTYPE) == 0 ? pkalg : NULL,\n\t\t    ssh->compat))"];
"1000506" [label="(Call,PRIVSEP(sshkey_verify(key, sig, slen,\n\t\t    sshbuf_ptr(b), sshbuf_len(b),\n\t\t    (ssh->compat & SSH_BUG_SIGTYPE) == 0 ? pkalg : NULL,\n\t\t    ssh->compat)))"];
"1000505" [label="(Call,PRIVSEP(sshkey_verify(key, sig, slen,\n\t\t    sshbuf_ptr(b), sshbuf_len(b),\n\t\t    (ssh->compat & SSH_BUG_SIGTYPE) == 0 ? pkalg : NULL,\n\t\t    ssh->compat)) == 0)"];
"1000496" [label="(Call,PRIVSEP(user_key_allowed(ssh, pw, key, 1, &authopts)) &&\n\t\t    PRIVSEP(sshkey_verify(key, sig, slen,\n\t\t    sshbuf_ptr(b), sshbuf_len(b),\n\t\t    (ssh->compat & SSH_BUG_SIGTYPE) == 0 ? pkalg : NULL,\n\t\t    ssh->compat)) == 0)"];
"1000535" [label="(Call,free(sig))"];
"1000537" [label="(Call,auth2_record_key(authctxt, authenticated, key))"];
"1000633" [label="(Call,authenticated == 1)"];
"1000632" [label="(Call,authenticated == 1 && auth_activate_options(ssh, authopts) != 0)"];
"1000648" [label="(Call,debug2(\"%s: authenticated %d pkalg %s\", __func__, authenticated, pkalg))"];
"1000659" [label="(Call,free(pkalg))"];
"1000667" [label="(Return,return authenticated;)"];
"1000655" [label="(Call,sshkey_free(key))"];
"1000574" [label="(Call,user_key_allowed(ssh, pw, key, 0, NULL))"];
"1000656" [label="(Identifier,key)"];
"1000383" [label="(Call,fatal(\"%s: sshbuf_put session id: %s\",\n\t\t\t\t    __func__, ssh_err(r)))"];
"1000505" [label="(Call,PRIVSEP(sshkey_verify(key, sig, slen,\n\t\t    sshbuf_ptr(b), sshbuf_len(b),\n\t\t    (ssh->compat & SSH_BUG_SIGTYPE) == 0 ? pkalg : NULL,\n\t\t    ssh->compat)) == 0)"];
"1000669" [label="(MethodReturn,RET)"];
"1000496" [label="(Call,PRIVSEP(user_key_allowed(ssh, pw, key, 1, &authopts)) &&\n\t\t    PRIVSEP(sshkey_verify(key, sig, slen,\n\t\t    sshbuf_ptr(b), sshbuf_len(b),\n\t\t    (ssh->compat & SSH_BUG_SIGTYPE) == 0 ? pkalg : NULL,\n\t\t    ssh->compat)) == 0)"];
"1000667" [label="(Return,return authenticated;)"];
"1000318" [label="(Call,debug3(\"%s: have %s signature for %s%s%s\",\n\t\t    __func__, pkalg, key_s,\n\t\t    ca_s == NULL ? \"\" : \" CA \",\n\t\t    ca_s == NULL ? \"\" : ca_s))"];
"1000594" [label="(Call,sshpkt_put_cstring(ssh, pkalg))"];
"1000531" [label="(Identifier,authenticated)"];
"1000484" [label="(Call,fatal(\"%s: build packet failed: %s\",\n\t\t\t    __func__, ssh_err(r)))"];
"1000399" [label="(Call,fatal(\"%s: sshbuf_put_string session id: %s\",\n \t\t\t\t    __func__, ssh_err(r)))"];
"1000537" [label="(Call,auth2_record_key(authctxt, authenticated, key))"];
"1000620" [label="(Call,fatal(\"%s: %s\", __func__, ssh_err(r)))"];
"1000662" [label="(Identifier,pkblob)"];
"1000668" [label="(Identifier,authenticated)"];
"1000630" [label="(JumpTarget,done:)"];
"1000317" [label="(Block,)"];
"1000268" [label="(Identifier,SSH_BUG_RSASIGMD5)"];
"1000263" [label="(Call,(ssh->compat & SSH_BUG_RSASIGMD5) != 0)"];
"1000523" [label="(Identifier,pkalg)"];
"1000281" [label="(Call,sshkey_type(key))"];
"1000393" [label="(Identifier,r)"];
"1000517" [label="(Call,ssh->compat & SSH_BUG_SIGTYPE)"];
"1000275" [label="(Call,auth2_key_already_used(authctxt, key))"];
"1000506" [label="(Call,PRIVSEP(sshkey_verify(key, sig, slen,\n\t\t    sshbuf_ptr(b), sshbuf_len(b),\n\t\t    (ssh->compat & SSH_BUG_SIGTYPE) == 0 ? pkalg : NULL,\n\t\t    ssh->compat)))"];
"1000651" [label="(Identifier,authenticated)"];
"1000649" [label="(Literal,\"%s: authenticated %d pkalg %s\")"];
"1000648" [label="(Call,debug2(\"%s: authenticated %d pkalg %s\", __func__, authenticated, pkalg))"];
"1000534" [label="(Identifier,b)"];
"1000497" [label="(Call,PRIVSEP(user_key_allowed(ssh, pw, key, 1, &authopts)))"];
"1000509" [label="(Identifier,sig)"];
"1000194" [label="(Call,fatal(\"%s: parse request failed: %s\", __func__, ssh_err(r)))"];
"1000632" [label="(Call,authenticated == 1 && auth_activate_options(ssh, authopts) != 0)"];
"1000231" [label="(Call,key == NULL)"];
"1000524" [label="(Identifier,NULL)"];
"1000247" [label="(Call,error(\"%s: type mismatch for decoded key \"\n\t\t    \"(received %d, expected %d)\", __func__, key->type, pktype))"];
"1000367" [label="(ControlStructure,if (ssh->compat & SSH_OLD_SESSIONID))"];
"1000645" [label="(Call,authenticated = 0)"];
"1000525" [label="(Call,ssh->compat)"];
"1000265" [label="(Call,ssh->compat)"];
"1000495" [label="(ControlStructure,if (PRIVSEP(user_key_allowed(ssh, pw, key, 1, &authopts)) &&\n\t\t    PRIVSEP(sshkey_verify(key, sig, slen,\n\t\t    sshbuf_ptr(b), sshbuf_len(b),\n\t\t    (ssh->compat & SSH_BUG_SIGTYPE) == 0 ? pkalg : NULL,\n\t\t    ssh->compat)) == 0))"];
"1000510" [label="(Identifier,slen)"];
"1000472" [label="(Call,sshbuf_put_cstring(b, pkalg))"];
"1000538" [label="(Identifier,authctxt)"];
"1000107" [label="(Block,)"];
"1000208" [label="(Call,verbose(\"%s: unsupported public key algorithm: %s\",\n\t\t    __func__, pkalg))"];
"1000353" [label="(Call,fatal(\"%s: %s\", __func__, ssh_err(r)))"];
"1000522" [label="(Literal,0)"];
"1000635" [label="(Literal,1)"];
"1000269" [label="(Literal,0)"];
"1000652" [label="(Identifier,pkalg)"];
"1000377" [label="(Identifier,r)"];
"1000201" [label="(Call,sshkey_type_from_name(pkalg))"];
"1000631" [label="(ControlStructure,if (authenticated == 1 && auth_activate_options(ssh, authopts) != 0))"];
"1000539" [label="(Identifier,authenticated)"];
"1000633" [label="(Call,authenticated == 1)"];
"1000659" [label="(Call,free(pkalg))"];
"1000521" [label="(Identifier,SSH_BUG_SIGTYPE)"];
"1000359" [label="(Call,(b = sshbuf_new()) == NULL)"];
"1000511" [label="(Call,sshbuf_ptr(b))"];
"1000543" [label="(Call,debug(\"%s: test pkalg %s pkblob %s%s%s\",\n\t\t    __func__, pkalg, key_s,\n\t\t    ca_s == NULL ? \"\" : \" CA \",\n\t\t    ca_s == NULL ? \"\" : ca_s))"];
"1000642" [label="(Call,debug(\"%s: key options inconsistent with existing\", __func__))"];
"1000654" [label="(Identifier,authopts)"];
"1000122" [label="(Call,*key = NULL)"];
"1000508" [label="(Identifier,key)"];
"1000636" [label="(Call,auth_activate_options(ssh, authopts) != 0)"];
"1000372" [label="(Identifier,SSH_OLD_SESSIONID)"];
"1000513" [label="(Call,sshbuf_len(b))"];
"1000507" [label="(Call,sshkey_verify(key, sig, slen,\n\t\t    sshbuf_ptr(b), sshbuf_len(b),\n\t\t    (ssh->compat & SSH_BUG_SIGTYPE) == 0 ? pkalg : NULL,\n\t\t    ssh->compat))"];
"1000264" [label="(Call,ssh->compat & SSH_BUG_RSASIGMD5)"];
"1000535" [label="(Call,free(sig))"];
"1000650" [label="(Identifier,__func__)"];
"1000297" [label="(Call,sshkey_ssh_name(key))"];
"1000146" [label="(Call,authenticated = 0)"];
"1000655" [label="(Call,sshkey_free(key))"];
"1000658" [label="(Identifier,userstyle)"];
"1000235" [label="(Call,error(\"%s: cannot decode key: %s\", __func__, pkalg))"];
"1000528" [label="(Literal,0)"];
"1000492" [label="(Call,authenticated = 0)"];
"1000369" [label="(Call,ssh->compat)"];
"1000364" [label="(Call,fatal(\"%s: sshbuf_new failed\", __func__))"];
"1000224" [label="(Call,error(\"%s: could not parse key: %s\", __func__, ssh_err(r)))"];
"1000368" [label="(Call,ssh->compat & SSH_OLD_SESSIONID)"];
"1000638" [label="(Identifier,ssh)"];
"1000540" [label="(Identifier,key)"];
"1000498" [label="(Call,user_key_allowed(ssh, pw, key, 1, &authopts))"];
"1000530" [label="(Call,authenticated = 1)"];
"1000660" [label="(Identifier,pkalg)"];
"1000294" [label="(Call,logit(\"%s: key type %s not in PubkeyAcceptedKeyTypes\",\n\t\t    __func__, sshkey_ssh_name(key)))"];
"1000634" [label="(Identifier,authenticated)"];
"1000516" [label="(Call,(ssh->compat & SSH_BUG_SIGTYPE) == 0)"];
"1000518" [label="(Call,ssh->compat)"];
"1000643" [label="(Literal,\"%s: key options inconsistent with existing\")"];
"1000286" [label="(Call,match_pattern_list(pkalg, options.pubkey_key_types, 0))"];
"1000515" [label="(Call,(ssh->compat & SSH_BUG_SIGTYPE) == 0 ? pkalg : NULL)"];
"1000536" [label="(Identifier,sig)"];
"1000567" [label="(Call,fatal(\"%s: %s\", __func__, ssh_err(r)))"];
"1000368" -> "1000367"  [label="AST: "];
"1000368" -> "1000372"  [label="CFG: "];
"1000369" -> "1000368"  [label="AST: "];
"1000372" -> "1000368"  [label="AST: "];
"1000377" -> "1000368"  [label="CFG: "];
"1000393" -> "1000368"  [label="CFG: "];
"1000368" -> "1000669"  [label="DDG: "];
"1000368" -> "1000669"  [label="DDG: "];
"1000368" -> "1000669"  [label="DDG: "];
"1000264" -> "1000368"  [label="DDG: "];
"1000368" -> "1000517"  [label="DDG: "];
"1000264" -> "1000263"  [label="AST: "];
"1000264" -> "1000268"  [label="CFG: "];
"1000265" -> "1000264"  [label="AST: "];
"1000268" -> "1000264"  [label="AST: "];
"1000269" -> "1000264"  [label="CFG: "];
"1000264" -> "1000669"  [label="DDG: "];
"1000264" -> "1000669"  [label="DDG: "];
"1000264" -> "1000263"  [label="DDG: "];
"1000264" -> "1000263"  [label="DDG: "];
"1000517" -> "1000516"  [label="AST: "];
"1000517" -> "1000521"  [label="CFG: "];
"1000518" -> "1000517"  [label="AST: "];
"1000521" -> "1000517"  [label="AST: "];
"1000522" -> "1000517"  [label="CFG: "];
"1000517" -> "1000669"  [label="DDG: "];
"1000517" -> "1000516"  [label="DDG: "];
"1000517" -> "1000516"  [label="DDG: "];
"1000517" -> "1000507"  [label="DDG: "];
"1000516" -> "1000515"  [label="AST: "];
"1000516" -> "1000522"  [label="CFG: "];
"1000522" -> "1000516"  [label="AST: "];
"1000523" -> "1000516"  [label="CFG: "];
"1000524" -> "1000516"  [label="CFG: "];
"1000516" -> "1000669"  [label="DDG: "];
"1000507" -> "1000506"  [label="AST: "];
"1000507" -> "1000525"  [label="CFG: "];
"1000508" -> "1000507"  [label="AST: "];
"1000509" -> "1000507"  [label="AST: "];
"1000510" -> "1000507"  [label="AST: "];
"1000511" -> "1000507"  [label="AST: "];
"1000513" -> "1000507"  [label="AST: "];
"1000515" -> "1000507"  [label="AST: "];
"1000525" -> "1000507"  [label="AST: "];
"1000506" -> "1000507"  [label="CFG: "];
"1000507" -> "1000669"  [label="DDG: "];
"1000507" -> "1000669"  [label="DDG: "];
"1000507" -> "1000669"  [label="DDG: "];
"1000507" -> "1000669"  [label="DDG: "];
"1000507" -> "1000669"  [label="DDG: "];
"1000507" -> "1000506"  [label="DDG: "];
"1000507" -> "1000506"  [label="DDG: "];
"1000507" -> "1000506"  [label="DDG: "];
"1000507" -> "1000506"  [label="DDG: "];
"1000507" -> "1000506"  [label="DDG: "];
"1000507" -> "1000506"  [label="DDG: "];
"1000507" -> "1000506"  [label="DDG: "];
"1000498" -> "1000507"  [label="DDG: "];
"1000511" -> "1000507"  [label="DDG: "];
"1000513" -> "1000507"  [label="DDG: "];
"1000472" -> "1000507"  [label="DDG: "];
"1000318" -> "1000507"  [label="DDG: "];
"1000359" -> "1000507"  [label="DDG: "];
"1000507" -> "1000535"  [label="DDG: "];
"1000507" -> "1000537"  [label="DDG: "];
"1000506" -> "1000505"  [label="AST: "];
"1000528" -> "1000506"  [label="CFG: "];
"1000506" -> "1000669"  [label="DDG: "];
"1000506" -> "1000505"  [label="DDG: "];
"1000505" -> "1000496"  [label="AST: "];
"1000505" -> "1000528"  [label="CFG: "];
"1000528" -> "1000505"  [label="AST: "];
"1000496" -> "1000505"  [label="CFG: "];
"1000505" -> "1000669"  [label="DDG: "];
"1000505" -> "1000496"  [label="DDG: "];
"1000505" -> "1000496"  [label="DDG: "];
"1000496" -> "1000495"  [label="AST: "];
"1000496" -> "1000497"  [label="CFG: "];
"1000497" -> "1000496"  [label="AST: "];
"1000531" -> "1000496"  [label="CFG: "];
"1000534" -> "1000496"  [label="CFG: "];
"1000496" -> "1000669"  [label="DDG: "];
"1000496" -> "1000669"  [label="DDG: "];
"1000496" -> "1000669"  [label="DDG: "];
"1000497" -> "1000496"  [label="DDG: "];
"1000535" -> "1000317"  [label="AST: "];
"1000535" -> "1000536"  [label="CFG: "];
"1000536" -> "1000535"  [label="AST: "];
"1000538" -> "1000535"  [label="CFG: "];
"1000535" -> "1000669"  [label="DDG: "];
"1000537" -> "1000317"  [label="AST: "];
"1000537" -> "1000540"  [label="CFG: "];
"1000538" -> "1000537"  [label="AST: "];
"1000539" -> "1000537"  [label="AST: "];
"1000540" -> "1000537"  [label="AST: "];
"1000630" -> "1000537"  [label="CFG: "];
"1000537" -> "1000669"  [label="DDG: "];
"1000537" -> "1000669"  [label="DDG: "];
"1000275" -> "1000537"  [label="DDG: "];
"1000530" -> "1000537"  [label="DDG: "];
"1000492" -> "1000537"  [label="DDG: "];
"1000498" -> "1000537"  [label="DDG: "];
"1000537" -> "1000633"  [label="DDG: "];
"1000537" -> "1000655"  [label="DDG: "];
"1000633" -> "1000632"  [label="AST: "];
"1000633" -> "1000635"  [label="CFG: "];
"1000634" -> "1000633"  [label="AST: "];
"1000635" -> "1000633"  [label="AST: "];
"1000638" -> "1000633"  [label="CFG: "];
"1000632" -> "1000633"  [label="CFG: "];
"1000633" -> "1000632"  [label="DDG: "];
"1000633" -> "1000632"  [label="DDG: "];
"1000146" -> "1000633"  [label="DDG: "];
"1000633" -> "1000648"  [label="DDG: "];
"1000632" -> "1000631"  [label="AST: "];
"1000632" -> "1000636"  [label="CFG: "];
"1000636" -> "1000632"  [label="AST: "];
"1000643" -> "1000632"  [label="CFG: "];
"1000649" -> "1000632"  [label="CFG: "];
"1000632" -> "1000669"  [label="DDG: "];
"1000632" -> "1000669"  [label="DDG: "];
"1000632" -> "1000669"  [label="DDG: "];
"1000636" -> "1000632"  [label="DDG: "];
"1000636" -> "1000632"  [label="DDG: "];
"1000648" -> "1000107"  [label="AST: "];
"1000648" -> "1000652"  [label="CFG: "];
"1000649" -> "1000648"  [label="AST: "];
"1000650" -> "1000648"  [label="AST: "];
"1000651" -> "1000648"  [label="AST: "];
"1000652" -> "1000648"  [label="AST: "];
"1000654" -> "1000648"  [label="CFG: "];
"1000648" -> "1000669"  [label="DDG: "];
"1000648" -> "1000669"  [label="DDG: "];
"1000648" -> "1000669"  [label="DDG: "];
"1000484" -> "1000648"  [label="DDG: "];
"1000620" -> "1000648"  [label="DDG: "];
"1000235" -> "1000648"  [label="DDG: "];
"1000235" -> "1000648"  [label="DDG: "];
"1000364" -> "1000648"  [label="DDG: "];
"1000543" -> "1000648"  [label="DDG: "];
"1000543" -> "1000648"  [label="DDG: "];
"1000318" -> "1000648"  [label="DDG: "];
"1000318" -> "1000648"  [label="DDG: "];
"1000194" -> "1000648"  [label="DDG: "];
"1000353" -> "1000648"  [label="DDG: "];
"1000567" -> "1000648"  [label="DDG: "];
"1000208" -> "1000648"  [label="DDG: "];
"1000208" -> "1000648"  [label="DDG: "];
"1000294" -> "1000648"  [label="DDG: "];
"1000642" -> "1000648"  [label="DDG: "];
"1000224" -> "1000648"  [label="DDG: "];
"1000399" -> "1000648"  [label="DDG: "];
"1000383" -> "1000648"  [label="DDG: "];
"1000247" -> "1000648"  [label="DDG: "];
"1000645" -> "1000648"  [label="DDG: "];
"1000286" -> "1000648"  [label="DDG: "];
"1000594" -> "1000648"  [label="DDG: "];
"1000472" -> "1000648"  [label="DDG: "];
"1000201" -> "1000648"  [label="DDG: "];
"1000648" -> "1000659"  [label="DDG: "];
"1000648" -> "1000667"  [label="DDG: "];
"1000659" -> "1000107"  [label="AST: "];
"1000659" -> "1000660"  [label="CFG: "];
"1000660" -> "1000659"  [label="AST: "];
"1000662" -> "1000659"  [label="CFG: "];
"1000659" -> "1000669"  [label="DDG: "];
"1000667" -> "1000107"  [label="AST: "];
"1000667" -> "1000668"  [label="CFG: "];
"1000668" -> "1000667"  [label="AST: "];
"1000669" -> "1000667"  [label="CFG: "];
"1000667" -> "1000669"  [label="DDG: "];
"1000668" -> "1000667"  [label="DDG: "];
"1000655" -> "1000107"  [label="AST: "];
"1000655" -> "1000656"  [label="CFG: "];
"1000656" -> "1000655"  [label="AST: "];
"1000658" -> "1000655"  [label="CFG: "];
"1000655" -> "1000669"  [label="DDG: "];
"1000655" -> "1000669"  [label="DDG: "];
"1000297" -> "1000655"  [label="DDG: "];
"1000281" -> "1000655"  [label="DDG: "];
"1000574" -> "1000655"  [label="DDG: "];
"1000122" -> "1000655"  [label="DDG: "];
"1000231" -> "1000655"  [label="DDG: "];
}
