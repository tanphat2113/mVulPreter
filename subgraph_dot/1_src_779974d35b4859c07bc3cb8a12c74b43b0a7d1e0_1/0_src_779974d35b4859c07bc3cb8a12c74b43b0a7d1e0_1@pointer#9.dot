digraph "0_src_779974d35b4859c07bc3cb8a12c74b43b0a7d1e0_1@pointer" {
"1000258" [label="(Call,sshkey_type_plain(key->type))"];
"1000241" [label="(Call,key->type != pktype)"];
"1000204" [label="(Call,pktype == KEY_UNSPEC)"];
"1000199" [label="(Call,pktype = sshkey_type_from_name(pkalg))"];
"1000201" [label="(Call,sshkey_type_from_name(pkalg))"];
"1000257" [label="(Call,sshkey_type_plain(key->type) == KEY_RSA)"];
"1000256" [label="(Call,sshkey_type_plain(key->type) == KEY_RSA &&\n\t    (ssh->compat & SSH_BUG_RSASIGMD5) != 0)"];
"1000266" [label="(Identifier,ssh)"];
"1000242" [label="(Call,key->type)"];
"1000276" [label="(Identifier,authctxt)"];
"1000256" [label="(Call,sshkey_type_plain(key->type) == KEY_RSA &&\n\t    (ssh->compat & SSH_BUG_RSASIGMD5) != 0)"];
"1000203" [label="(ControlStructure,if (pktype == KEY_UNSPEC))"];
"1000648" [label="(Call,debug2(\"%s: authenticated %d pkalg %s\", __func__, authenticated, pkalg))"];
"1000201" [label="(Call,sshkey_type_from_name(pkalg))"];
"1000669" [label="(MethodReturn,RET)"];
"1000262" [label="(Identifier,KEY_RSA)"];
"1000272" [label="(Literal,\"Refusing RSA key because client uses unsafe \"\n\t\t    \"signature scheme\")"];
"1000257" [label="(Call,sshkey_type_plain(key->type) == KEY_RSA)"];
"1000255" [label="(ControlStructure,if (sshkey_type_plain(key->type) == KEY_RSA &&\n\t    (ssh->compat & SSH_BUG_RSASIGMD5) != 0))"];
"1000247" [label="(Call,error(\"%s: type mismatch for decoded key \"\n\t\t    \"(received %d, expected %d)\", __func__, key->type, pktype))"];
"1000206" [label="(Identifier,KEY_UNSPEC)"];
"1000259" [label="(Call,key->type)"];
"1000240" [label="(ControlStructure,if (key->type != pktype))"];
"1000209" [label="(Literal,\"%s: unsupported public key algorithm: %s\")"];
"1000200" [label="(Identifier,pktype)"];
"1000202" [label="(Identifier,pkalg)"];
"1000258" [label="(Call,sshkey_type_plain(key->type))"];
"1000248" [label="(Literal,\"%s: type mismatch for decoded key \"\n\t\t    \"(received %d, expected %d)\")"];
"1000286" [label="(Call,match_pattern_list(pkalg, options.pubkey_key_types, 0))"];
"1000241" [label="(Call,key->type != pktype)"];
"1000205" [label="(Identifier,pktype)"];
"1000245" [label="(Identifier,pktype)"];
"1000107" [label="(Block,)"];
"1000260" [label="(Identifier,key)"];
"1000263" [label="(Call,(ssh->compat & SSH_BUG_RSASIGMD5) != 0)"];
"1000199" [label="(Call,pktype = sshkey_type_from_name(pkalg))"];
"1000208" [label="(Call,verbose(\"%s: unsupported public key algorithm: %s\",\n\t\t    __func__, pkalg))"];
"1000204" [label="(Call,pktype == KEY_UNSPEC)"];
"1000216" [label="(Identifier,r)"];
"1000235" [label="(Call,error(\"%s: cannot decode key: %s\", __func__, pkalg))"];
"1000258" -> "1000257"  [label="AST: "];
"1000258" -> "1000259"  [label="CFG: "];
"1000259" -> "1000258"  [label="AST: "];
"1000262" -> "1000258"  [label="CFG: "];
"1000258" -> "1000669"  [label="DDG: key->type"];
"1000258" -> "1000257"  [label="DDG: key->type"];
"1000241" -> "1000258"  [label="DDG: key->type"];
"1000241" -> "1000240"  [label="AST: "];
"1000241" -> "1000245"  [label="CFG: "];
"1000242" -> "1000241"  [label="AST: "];
"1000245" -> "1000241"  [label="AST: "];
"1000248" -> "1000241"  [label="CFG: "];
"1000260" -> "1000241"  [label="CFG: "];
"1000241" -> "1000669"  [label="DDG: pktype"];
"1000241" -> "1000669"  [label="DDG: key->type != pktype"];
"1000204" -> "1000241"  [label="DDG: pktype"];
"1000241" -> "1000247"  [label="DDG: key->type"];
"1000241" -> "1000247"  [label="DDG: pktype"];
"1000204" -> "1000203"  [label="AST: "];
"1000204" -> "1000206"  [label="CFG: "];
"1000205" -> "1000204"  [label="AST: "];
"1000206" -> "1000204"  [label="AST: "];
"1000209" -> "1000204"  [label="CFG: "];
"1000216" -> "1000204"  [label="CFG: "];
"1000204" -> "1000669"  [label="DDG: KEY_UNSPEC"];
"1000204" -> "1000669"  [label="DDG: pktype"];
"1000204" -> "1000669"  [label="DDG: pktype == KEY_UNSPEC"];
"1000199" -> "1000204"  [label="DDG: pktype"];
"1000199" -> "1000107"  [label="AST: "];
"1000199" -> "1000201"  [label="CFG: "];
"1000200" -> "1000199"  [label="AST: "];
"1000201" -> "1000199"  [label="AST: "];
"1000205" -> "1000199"  [label="CFG: "];
"1000199" -> "1000669"  [label="DDG: sshkey_type_from_name(pkalg)"];
"1000201" -> "1000199"  [label="DDG: pkalg"];
"1000201" -> "1000202"  [label="CFG: "];
"1000202" -> "1000201"  [label="AST: "];
"1000201" -> "1000208"  [label="DDG: pkalg"];
"1000201" -> "1000235"  [label="DDG: pkalg"];
"1000201" -> "1000286"  [label="DDG: pkalg"];
"1000201" -> "1000648"  [label="DDG: pkalg"];
"1000257" -> "1000256"  [label="AST: "];
"1000257" -> "1000262"  [label="CFG: "];
"1000262" -> "1000257"  [label="AST: "];
"1000266" -> "1000257"  [label="CFG: "];
"1000256" -> "1000257"  [label="CFG: "];
"1000257" -> "1000669"  [label="DDG: sshkey_type_plain(key->type)"];
"1000257" -> "1000669"  [label="DDG: KEY_RSA"];
"1000257" -> "1000256"  [label="DDG: sshkey_type_plain(key->type)"];
"1000257" -> "1000256"  [label="DDG: KEY_RSA"];
"1000256" -> "1000255"  [label="AST: "];
"1000256" -> "1000263"  [label="CFG: "];
"1000263" -> "1000256"  [label="AST: "];
"1000272" -> "1000256"  [label="CFG: "];
"1000276" -> "1000256"  [label="CFG: "];
"1000256" -> "1000669"  [label="DDG: (ssh->compat & SSH_BUG_RSASIGMD5) != 0"];
"1000256" -> "1000669"  [label="DDG: sshkey_type_plain(key->type) == KEY_RSA"];
"1000256" -> "1000669"  [label="DDG: sshkey_type_plain(key->type) == KEY_RSA &&\n\t    (ssh->compat & SSH_BUG_RSASIGMD5) != 0"];
"1000263" -> "1000256"  [label="DDG: ssh->compat & SSH_BUG_RSASIGMD5"];
"1000263" -> "1000256"  [label="DDG: 0"];
}
