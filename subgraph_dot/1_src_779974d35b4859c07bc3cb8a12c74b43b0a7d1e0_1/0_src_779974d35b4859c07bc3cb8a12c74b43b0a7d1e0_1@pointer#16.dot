digraph "0_src_779974d35b4859c07bc3cb8a12c74b43b0a7d1e0_1@pointer" {
"1000208" [label="(Call,verbose(\"%s: unsupported public key algorithm: %s\",\n\t\t    __func__, pkalg))"];
"1000194" [label="(Call,fatal(\"%s: parse request failed: %s\", __func__, ssh_err(r)))"];
"1000197" [label="(Call,ssh_err(r))"];
"1000176" [label="(Call,r = sshpkt_get_cstring(ssh, &pkalg, NULL))"];
"1000178" [label="(Call,sshpkt_get_cstring(ssh, &pkalg, NULL))"];
"1000169" [label="(Call,sshpkt_get_u8(ssh, &have_sig))"];
"1000106" [label="(MethodParameterIn,struct ssh *ssh)"];
"1000167" [label="(Call,r = sshpkt_get_u8(ssh, &have_sig))"];
"1000185" [label="(Call,r = sshpkt_get_string(ssh, &pkblob, &blen))"];
"1000187" [label="(Call,sshpkt_get_string(ssh, &pkblob, &blen))"];
"1000201" [label="(Call,sshkey_type_from_name(pkalg))"];
"1000642" [label="(Call,debug(\"%s: key options inconsistent with existing\", __func__))"];
"1000648" [label="(Call,debug2(\"%s: authenticated %d pkalg %s\", __func__, authenticated, pkalg))"];
"1000659" [label="(Call,free(pkalg))"];
"1000667" [label="(Return,return authenticated;)"];
"1000167" [label="(Call,r = sshpkt_get_u8(ssh, &have_sig))"];
"1000574" [label="(Call,user_key_allowed(ssh, pw, key, 0, NULL))"];
"1000183" [label="(Literal,0)"];
"1000173" [label="(Literal,0)"];
"1000179" [label="(Identifier,ssh)"];
"1000169" [label="(Call,sshpkt_get_u8(ssh, &have_sig))"];
"1000168" [label="(Identifier,r)"];
"1000611" [label="(Call,sshpkt_send(ssh))"];
"1000383" [label="(Call,fatal(\"%s: sshbuf_put session id: %s\",\n\t\t\t\t    __func__, ssh_err(r)))"];
"1000191" [label="(Call,&blen)"];
"1000669" [label="(MethodReturn,RET)"];
"1000667" [label="(Return,return authenticated;)"];
"1000340" [label="(Call,sshpkt_get_string(ssh, &sig, &slen))"];
"1000318" [label="(Call,debug3(\"%s: have %s signature for %s%s%s\",\n\t\t    __func__, pkalg, key_s,\n\t\t    ca_s == NULL ? \"\" : \" CA \",\n\t\t    ca_s == NULL ? \"\" : ca_s))"];
"1000594" [label="(Call,sshpkt_put_cstring(ssh, pkalg))"];
"1000484" [label="(Call,fatal(\"%s: build packet failed: %s\",\n\t\t\t    __func__, ssh_err(r)))"];
"1000187" [label="(Call,sshpkt_get_string(ssh, &pkblob, &blen))"];
"1000399" [label="(Call,fatal(\"%s: sshbuf_put_string session id: %s\",\n \t\t\t\t    __func__, ssh_err(r)))"];
"1000196" [label="(Identifier,__func__)"];
"1000212" [label="(ControlStructure,goto done;)"];
"1000185" [label="(Call,r = sshpkt_get_string(ssh, &pkblob, &blen))"];
"1000620" [label="(Call,fatal(\"%s: %s\", __func__, ssh_err(r)))"];
"1000662" [label="(Identifier,pkblob)"];
"1000668" [label="(Identifier,authenticated)"];
"1000211" [label="(Identifier,pkalg)"];
"1000178" [label="(Call,sshpkt_get_cstring(ssh, &pkalg, NULL))"];
"1000193" [label="(Literal,0)"];
"1000207" [label="(Block,)"];
"1000199" [label="(Call,pktype = sshkey_type_from_name(pkalg))"];
"1000651" [label="(Identifier,authenticated)"];
"1000564" [label="(Call,sshpkt_get_end(ssh))"];
"1000649" [label="(Literal,\"%s: authenticated %d pkalg %s\")"];
"1000648" [label="(Call,debug2(\"%s: authenticated %d pkalg %s\", __func__, authenticated, pkalg))"];
"1000175" [label="(Call,(r = sshpkt_get_cstring(ssh, &pkalg, NULL)) != 0)"];
"1000210" [label="(Identifier,__func__)"];
"1000106" [label="(MethodParameterIn,struct ssh *ssh)"];
"1000194" [label="(Call,fatal(\"%s: parse request failed: %s\", __func__, ssh_err(r)))"];
"1000171" [label="(Call,&have_sig)"];
"1000231" [label="(Call,key == NULL)"];
"1000247" [label="(Call,error(\"%s: type mismatch for decoded key \"\n\t\t    \"(received %d, expected %d)\", __func__, key->type, pktype))"];
"1000645" [label="(Call,authenticated = 0)"];
"1000184" [label="(Call,(r = sshpkt_get_string(ssh, &pkblob, &blen)) != 0)"];
"1000202" [label="(Identifier,pkalg)"];
"1000186" [label="(Identifier,r)"];
"1000350" [label="(Call,sshpkt_get_end(ssh))"];
"1000107" [label="(Block,)"];
"1000472" [label="(Call,sshbuf_put_cstring(b, pkalg))"];
"1000208" [label="(Call,verbose(\"%s: unsupported public key algorithm: %s\",\n\t\t    __func__, pkalg))"];
"1000644" [label="(Identifier,__func__)"];
"1000353" [label="(Call,fatal(\"%s: %s\", __func__, ssh_err(r)))"];
"1000652" [label="(Identifier,pkalg)"];
"1000189" [label="(Call,&pkblob)"];
"1000201" [label="(Call,sshkey_type_from_name(pkalg))"];
"1000166" [label="(Call,(r = sshpkt_get_u8(ssh, &have_sig)) != 0)"];
"1000633" [label="(Call,authenticated == 1)"];
"1000637" [label="(Call,auth_activate_options(ssh, authopts))"];
"1000659" [label="(Call,free(pkalg))"];
"1000209" [label="(Literal,\"%s: unsupported public key algorithm: %s\")"];
"1000543" [label="(Call,debug(\"%s: test pkalg %s pkblob %s%s%s\",\n\t\t    __func__, pkalg, key_s,\n\t\t    ca_s == NULL ? \"\" : \" CA \",\n\t\t    ca_s == NULL ? \"\" : ca_s))"];
"1000177" [label="(Identifier,r)"];
"1000642" [label="(Call,debug(\"%s: key options inconsistent with existing\", __func__))"];
"1000654" [label="(Identifier,authopts)"];
"1000170" [label="(Identifier,ssh)"];
"1000586" [label="(Call,sshpkt_start(ssh, SSH2_MSG_USERAUTH_PK_OK))"];
"1000164" [label="(ControlStructure,if ((r = sshpkt_get_u8(ssh, &have_sig)) != 0 ||\n \t    (r = sshpkt_get_cstring(ssh, &pkalg, NULL)) != 0 ||\n \t    (r = sshpkt_get_string(ssh, &pkblob, &blen)) != 0))"];
"1000180" [label="(Call,&pkalg)"];
"1000650" [label="(Identifier,__func__)"];
"1000235" [label="(Call,error(\"%s: cannot decode key: %s\", __func__, pkalg))"];
"1000602" [label="(Call,sshpkt_put_string(ssh, pkblob, blen))"];
"1000641" [label="(Block,)"];
"1000364" [label="(Call,fatal(\"%s: sshbuf_new failed\", __func__))"];
"1000198" [label="(Identifier,r)"];
"1000224" [label="(Call,error(\"%s: could not parse key: %s\", __func__, ssh_err(r)))"];
"1000195" [label="(Literal,\"%s: parse request failed: %s\")"];
"1000176" [label="(Call,r = sshpkt_get_cstring(ssh, &pkalg, NULL))"];
"1000188" [label="(Identifier,ssh)"];
"1000498" [label="(Call,user_key_allowed(ssh, pw, key, 1, &authopts))"];
"1000200" [label="(Identifier,pktype)"];
"1000660" [label="(Identifier,pkalg)"];
"1000294" [label="(Call,logit(\"%s: key type %s not in PubkeyAcceptedKeyTypes\",\n\t\t    __func__, sshkey_ssh_name(key)))"];
"1000643" [label="(Literal,\"%s: key options inconsistent with existing\")"];
"1000646" [label="(Identifier,authenticated)"];
"1000286" [label="(Call,match_pattern_list(pkalg, options.pubkey_key_types, 0))"];
"1000617" [label="(Call,ssh_packet_write_wait(ssh))"];
"1000197" [label="(Call,ssh_err(r))"];
"1000182" [label="(Identifier,NULL)"];
"1000567" [label="(Call,fatal(\"%s: %s\", __func__, ssh_err(r)))"];
"1000208" -> "1000207"  [label="AST: "];
"1000208" -> "1000211"  [label="CFG: "];
"1000209" -> "1000208"  [label="AST: "];
"1000210" -> "1000208"  [label="AST: "];
"1000211" -> "1000208"  [label="AST: "];
"1000212" -> "1000208"  [label="CFG: "];
"1000208" -> "1000669"  [label="DDG: "];
"1000194" -> "1000208"  [label="DDG: "];
"1000201" -> "1000208"  [label="DDG: "];
"1000208" -> "1000642"  [label="DDG: "];
"1000208" -> "1000648"  [label="DDG: "];
"1000208" -> "1000648"  [label="DDG: "];
"1000194" -> "1000164"  [label="AST: "];
"1000194" -> "1000197"  [label="CFG: "];
"1000195" -> "1000194"  [label="AST: "];
"1000196" -> "1000194"  [label="AST: "];
"1000197" -> "1000194"  [label="AST: "];
"1000200" -> "1000194"  [label="CFG: "];
"1000194" -> "1000669"  [label="DDG: "];
"1000194" -> "1000669"  [label="DDG: "];
"1000197" -> "1000194"  [label="DDG: "];
"1000194" -> "1000224"  [label="DDG: "];
"1000194" -> "1000235"  [label="DDG: "];
"1000194" -> "1000247"  [label="DDG: "];
"1000194" -> "1000294"  [label="DDG: "];
"1000194" -> "1000318"  [label="DDG: "];
"1000194" -> "1000543"  [label="DDG: "];
"1000194" -> "1000642"  [label="DDG: "];
"1000194" -> "1000648"  [label="DDG: "];
"1000197" -> "1000198"  [label="CFG: "];
"1000198" -> "1000197"  [label="AST: "];
"1000197" -> "1000669"  [label="DDG: "];
"1000176" -> "1000197"  [label="DDG: "];
"1000167" -> "1000197"  [label="DDG: "];
"1000185" -> "1000197"  [label="DDG: "];
"1000176" -> "1000175"  [label="AST: "];
"1000176" -> "1000178"  [label="CFG: "];
"1000177" -> "1000176"  [label="AST: "];
"1000178" -> "1000176"  [label="AST: "];
"1000183" -> "1000176"  [label="CFG: "];
"1000176" -> "1000669"  [label="DDG: "];
"1000176" -> "1000669"  [label="DDG: "];
"1000176" -> "1000175"  [label="DDG: "];
"1000178" -> "1000176"  [label="DDG: "];
"1000178" -> "1000176"  [label="DDG: "];
"1000178" -> "1000176"  [label="DDG: "];
"1000178" -> "1000182"  [label="CFG: "];
"1000179" -> "1000178"  [label="AST: "];
"1000180" -> "1000178"  [label="AST: "];
"1000182" -> "1000178"  [label="AST: "];
"1000178" -> "1000669"  [label="DDG: "];
"1000178" -> "1000669"  [label="DDG: "];
"1000178" -> "1000669"  [label="DDG: "];
"1000178" -> "1000175"  [label="DDG: "];
"1000178" -> "1000175"  [label="DDG: "];
"1000178" -> "1000175"  [label="DDG: "];
"1000169" -> "1000178"  [label="DDG: "];
"1000106" -> "1000178"  [label="DDG: "];
"1000178" -> "1000187"  [label="DDG: "];
"1000178" -> "1000231"  [label="DDG: "];
"1000178" -> "1000340"  [label="DDG: "];
"1000178" -> "1000564"  [label="DDG: "];
"1000178" -> "1000637"  [label="DDG: "];
"1000169" -> "1000167"  [label="AST: "];
"1000169" -> "1000171"  [label="CFG: "];
"1000170" -> "1000169"  [label="AST: "];
"1000171" -> "1000169"  [label="AST: "];
"1000167" -> "1000169"  [label="CFG: "];
"1000169" -> "1000669"  [label="DDG: "];
"1000169" -> "1000669"  [label="DDG: "];
"1000169" -> "1000166"  [label="DDG: "];
"1000169" -> "1000166"  [label="DDG: "];
"1000169" -> "1000167"  [label="DDG: "];
"1000169" -> "1000167"  [label="DDG: "];
"1000106" -> "1000169"  [label="DDG: "];
"1000169" -> "1000340"  [label="DDG: "];
"1000169" -> "1000564"  [label="DDG: "];
"1000169" -> "1000637"  [label="DDG: "];
"1000106" -> "1000105"  [label="AST: "];
"1000106" -> "1000669"  [label="DDG: "];
"1000106" -> "1000187"  [label="DDG: "];
"1000106" -> "1000340"  [label="DDG: "];
"1000106" -> "1000350"  [label="DDG: "];
"1000106" -> "1000498"  [label="DDG: "];
"1000106" -> "1000564"  [label="DDG: "];
"1000106" -> "1000574"  [label="DDG: "];
"1000106" -> "1000586"  [label="DDG: "];
"1000106" -> "1000594"  [label="DDG: "];
"1000106" -> "1000602"  [label="DDG: "];
"1000106" -> "1000611"  [label="DDG: "];
"1000106" -> "1000617"  [label="DDG: "];
"1000106" -> "1000637"  [label="DDG: "];
"1000167" -> "1000166"  [label="AST: "];
"1000168" -> "1000167"  [label="AST: "];
"1000173" -> "1000167"  [label="CFG: "];
"1000167" -> "1000669"  [label="DDG: "];
"1000167" -> "1000669"  [label="DDG: "];
"1000167" -> "1000166"  [label="DDG: "];
"1000185" -> "1000184"  [label="AST: "];
"1000185" -> "1000187"  [label="CFG: "];
"1000186" -> "1000185"  [label="AST: "];
"1000187" -> "1000185"  [label="AST: "];
"1000193" -> "1000185"  [label="CFG: "];
"1000185" -> "1000669"  [label="DDG: "];
"1000185" -> "1000669"  [label="DDG: "];
"1000185" -> "1000184"  [label="DDG: "];
"1000187" -> "1000185"  [label="DDG: "];
"1000187" -> "1000185"  [label="DDG: "];
"1000187" -> "1000185"  [label="DDG: "];
"1000187" -> "1000191"  [label="CFG: "];
"1000188" -> "1000187"  [label="AST: "];
"1000189" -> "1000187"  [label="AST: "];
"1000191" -> "1000187"  [label="AST: "];
"1000187" -> "1000669"  [label="DDG: "];
"1000187" -> "1000669"  [label="DDG: "];
"1000187" -> "1000669"  [label="DDG: "];
"1000187" -> "1000184"  [label="DDG: "];
"1000187" -> "1000184"  [label="DDG: "];
"1000187" -> "1000184"  [label="DDG: "];
"1000187" -> "1000340"  [label="DDG: "];
"1000187" -> "1000564"  [label="DDG: "];
"1000187" -> "1000637"  [label="DDG: "];
"1000201" -> "1000199"  [label="AST: "];
"1000201" -> "1000202"  [label="CFG: "];
"1000202" -> "1000201"  [label="AST: "];
"1000199" -> "1000201"  [label="CFG: "];
"1000201" -> "1000199"  [label="DDG: "];
"1000201" -> "1000235"  [label="DDG: "];
"1000201" -> "1000286"  [label="DDG: "];
"1000201" -> "1000648"  [label="DDG: "];
"1000642" -> "1000641"  [label="AST: "];
"1000642" -> "1000644"  [label="CFG: "];
"1000643" -> "1000642"  [label="AST: "];
"1000644" -> "1000642"  [label="AST: "];
"1000646" -> "1000642"  [label="CFG: "];
"1000642" -> "1000669"  [label="DDG: "];
"1000484" -> "1000642"  [label="DDG: "];
"1000620" -> "1000642"  [label="DDG: "];
"1000235" -> "1000642"  [label="DDG: "];
"1000294" -> "1000642"  [label="DDG: "];
"1000364" -> "1000642"  [label="DDG: "];
"1000543" -> "1000642"  [label="DDG: "];
"1000318" -> "1000642"  [label="DDG: "];
"1000353" -> "1000642"  [label="DDG: "];
"1000567" -> "1000642"  [label="DDG: "];
"1000224" -> "1000642"  [label="DDG: "];
"1000399" -> "1000642"  [label="DDG: "];
"1000383" -> "1000642"  [label="DDG: "];
"1000247" -> "1000642"  [label="DDG: "];
"1000642" -> "1000648"  [label="DDG: "];
"1000648" -> "1000107"  [label="AST: "];
"1000648" -> "1000652"  [label="CFG: "];
"1000649" -> "1000648"  [label="AST: "];
"1000650" -> "1000648"  [label="AST: "];
"1000651" -> "1000648"  [label="AST: "];
"1000652" -> "1000648"  [label="AST: "];
"1000654" -> "1000648"  [label="CFG: "];
"1000648" -> "1000669"  [label="DDG: "];
"1000648" -> "1000669"  [label="DDG: "];
"1000648" -> "1000669"  [label="DDG: "];
"1000484" -> "1000648"  [label="DDG: "];
"1000620" -> "1000648"  [label="DDG: "];
"1000235" -> "1000648"  [label="DDG: "];
"1000235" -> "1000648"  [label="DDG: "];
"1000364" -> "1000648"  [label="DDG: "];
"1000543" -> "1000648"  [label="DDG: "];
"1000543" -> "1000648"  [label="DDG: "];
"1000318" -> "1000648"  [label="DDG: "];
"1000318" -> "1000648"  [label="DDG: "];
"1000353" -> "1000648"  [label="DDG: "];
"1000567" -> "1000648"  [label="DDG: "];
"1000294" -> "1000648"  [label="DDG: "];
"1000224" -> "1000648"  [label="DDG: "];
"1000399" -> "1000648"  [label="DDG: "];
"1000383" -> "1000648"  [label="DDG: "];
"1000247" -> "1000648"  [label="DDG: "];
"1000645" -> "1000648"  [label="DDG: "];
"1000633" -> "1000648"  [label="DDG: "];
"1000286" -> "1000648"  [label="DDG: "];
"1000594" -> "1000648"  [label="DDG: "];
"1000472" -> "1000648"  [label="DDG: "];
"1000648" -> "1000659"  [label="DDG: "];
"1000648" -> "1000667"  [label="DDG: "];
"1000659" -> "1000107"  [label="AST: "];
"1000659" -> "1000660"  [label="CFG: "];
"1000660" -> "1000659"  [label="AST: "];
"1000662" -> "1000659"  [label="CFG: "];
"1000659" -> "1000669"  [label="DDG: "];
"1000667" -> "1000107"  [label="AST: "];
"1000667" -> "1000668"  [label="CFG: "];
"1000668" -> "1000667"  [label="AST: "];
"1000669" -> "1000667"  [label="CFG: "];
"1000667" -> "1000669"  [label="DDG: "];
"1000668" -> "1000667"  [label="DDG: "];
}
