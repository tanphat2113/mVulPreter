digraph "0_openssl_86f8fb0e344d62454f8daf3e15236b2b59210756_0@pointer" {
"1000357" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000149" [label="(Call,ssl2_read(s, (char *)&(p[s->init_num]), 10 - s->init_num))"];
"1000119" [label="(MethodParameterIn,SSL *s)"];
"1000151" [label="(Call,(char *)&(p[s->init_num]))"];
"1000159" [label="(Call,10 - s->init_num)"];
"1000197" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000972" [label="(Call,ssl_get_new_session(s, 1))"];
"1000903" [label="(Call,ssl2_part_read(s, SSL_F_GET_CLIENT_HELLO, i))"];
"1000151" [label="(Call,(char *)&(p[s->init_num]))"];
"1000738" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000576" [label="(Call,ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR))"];
"1000540" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000270" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000167" [label="(Call,10 - s->init_num)"];
"1000499" [label="(Call,ssl2_return_error(s, SSL2_PE_NO_CIPHER))"];
"1001067" [label="(Call,ssl_bytes_to_cipher_list(s, p, s->s2->tmp.cipher_spec_length,\n                                      &s->session->ciphers))"];
"1000359" [label="(Identifier,SSL2_PE_UNDEFINED_ERROR)"];
"1000219" [label="(Call,ssl2_return_error(s, SSL2_PE_NO_CIPHER))"];
"1000161" [label="(Call,s->init_num)"];
"1000119" [label="(MethodParameterIn,SSL *s)"];
"1001090" [label="(Call,SSL_get_ciphers(s))"];
"1000309" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000147" [label="(Call,i = ssl2_read(s, (char *)&(p[s->init_num]), 10 - s->init_num))"];
"1000160" [label="(Literal,10)"];
"1001049" [label="(Call,ssl_get_new_session(s, 1))"];
"1000393" [label="(Call,ssl2_part_read(s, SSL_F_GET_CLIENT_MASTER_KEY, i))"];
"1001023" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000153" [label="(Call,&(p[s->init_num]))"];
"1000402" [label="(Call,s->msg_callback(0, s->version, 0, p, (size_t)len, s,\n                        s->msg_callback_arg))"];
"1000159" [label="(Call,10 - s->init_num)"];
"1001229" [label="(MethodReturn,static int)"];
"1000950" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000377" [label="(Call,ssl2_read(s, (char *)&(p[s->init_num]), n))"];
"1000986" [label="(Call,ssl_get_prev_session(s, &(p[s->s2->tmp.cipher_spec_length]),\n                                 s->s2->tmp.session_id_length, NULL))"];
"1000867" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000149" [label="(Call,ssl2_read(s, (char *)&(p[s->init_num]), 10 - s->init_num))"];
"1000808" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000976" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000358" [label="(Identifier,s)"];
"1000357" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000173" [label="(Call,ssl2_part_read(s, SSL_F_GET_CLIENT_MASTER_KEY, i))"];
"1000361" [label="(Identifier,SSL_F_GET_CLIENT_MASTER_KEY)"];
"1000356" [label="(Block,)"];
"1000150" [label="(Identifier,s)"];
"1000459" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000887" [label="(Call,ssl2_read(s, (char *)&(p[s->init_num]), n))"];
"1000379" [label="(Call,(char *)&(p[s->init_num]))"];
"1001198" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1001053" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000912" [label="(Call,s->msg_callback(0, s->version, 0, p, (size_t)len, s,\n                        s->msg_callback_arg))"];
"1001038" [label="(Call,ssl2_return_error(s, SSL2_PE_NO_CERTIFICATE))"];
"1000720" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000357" -> "1000356"  [label="AST: "];
"1000357" -> "1000359"  [label="CFG: "];
"1000358" -> "1000357"  [label="AST: "];
"1000359" -> "1000357"  [label="AST: "];
"1000361" -> "1000357"  [label="CFG: "];
"1000357" -> "1001229"  [label="DDG: ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR)"];
"1000357" -> "1001229"  [label="DDG: s"];
"1000357" -> "1001229"  [label="DDG: SSL2_PE_UNDEFINED_ERROR"];
"1000149" -> "1000357"  [label="DDG: s"];
"1000119" -> "1000357"  [label="DDG: s"];
"1000149" -> "1000147"  [label="AST: "];
"1000149" -> "1000159"  [label="CFG: "];
"1000150" -> "1000149"  [label="AST: "];
"1000151" -> "1000149"  [label="AST: "];
"1000159" -> "1000149"  [label="AST: "];
"1000147" -> "1000149"  [label="CFG: "];
"1000149" -> "1001229"  [label="DDG: (char *)&(p[s->init_num])"];
"1000149" -> "1001229"  [label="DDG: s"];
"1000149" -> "1000147"  [label="DDG: s"];
"1000149" -> "1000147"  [label="DDG: (char *)&(p[s->init_num])"];
"1000149" -> "1000147"  [label="DDG: 10 - s->init_num"];
"1000119" -> "1000149"  [label="DDG: s"];
"1000151" -> "1000149"  [label="DDG: &(p[s->init_num])"];
"1000159" -> "1000149"  [label="DDG: 10"];
"1000159" -> "1000149"  [label="DDG: s->init_num"];
"1000149" -> "1000173"  [label="DDG: s"];
"1000149" -> "1000197"  [label="DDG: s"];
"1000149" -> "1000219"  [label="DDG: s"];
"1000149" -> "1000270"  [label="DDG: s"];
"1000149" -> "1000309"  [label="DDG: s"];
"1000149" -> "1000377"  [label="DDG: s"];
"1000119" -> "1000118"  [label="AST: "];
"1000119" -> "1001229"  [label="DDG: s"];
"1000119" -> "1000173"  [label="DDG: s"];
"1000119" -> "1000197"  [label="DDG: s"];
"1000119" -> "1000219"  [label="DDG: s"];
"1000119" -> "1000270"  [label="DDG: s"];
"1000119" -> "1000309"  [label="DDG: s"];
"1000119" -> "1000377"  [label="DDG: s"];
"1000119" -> "1000393"  [label="DDG: s"];
"1000119" -> "1000402"  [label="DDG: s"];
"1000119" -> "1000459"  [label="DDG: s"];
"1000119" -> "1000499"  [label="DDG: s"];
"1000119" -> "1000540"  [label="DDG: s"];
"1000119" -> "1000576"  [label="DDG: s"];
"1000119" -> "1000720"  [label="DDG: s"];
"1000119" -> "1000738"  [label="DDG: s"];
"1000119" -> "1000808"  [label="DDG: s"];
"1000119" -> "1000867"  [label="DDG: s"];
"1000119" -> "1000887"  [label="DDG: s"];
"1000119" -> "1000903"  [label="DDG: s"];
"1000119" -> "1000912"  [label="DDG: s"];
"1000119" -> "1000950"  [label="DDG: s"];
"1000119" -> "1000972"  [label="DDG: s"];
"1000119" -> "1000976"  [label="DDG: s"];
"1000119" -> "1000986"  [label="DDG: s"];
"1000119" -> "1001023"  [label="DDG: s"];
"1000119" -> "1001038"  [label="DDG: s"];
"1000119" -> "1001049"  [label="DDG: s"];
"1000119" -> "1001053"  [label="DDG: s"];
"1000119" -> "1001067"  [label="DDG: s"];
"1000119" -> "1001090"  [label="DDG: s"];
"1000119" -> "1001198"  [label="DDG: s"];
"1000151" -> "1000153"  [label="CFG: "];
"1000152" -> "1000151"  [label="AST: "];
"1000153" -> "1000151"  [label="AST: "];
"1000160" -> "1000151"  [label="CFG: "];
"1000151" -> "1001229"  [label="DDG: &(p[s->init_num])"];
"1000151" -> "1000379"  [label="DDG: &(p[s->init_num])"];
"1000159" -> "1000161"  [label="CFG: "];
"1000160" -> "1000159"  [label="AST: "];
"1000161" -> "1000159"  [label="AST: "];
"1000159" -> "1000167"  [label="DDG: s->init_num"];
}
