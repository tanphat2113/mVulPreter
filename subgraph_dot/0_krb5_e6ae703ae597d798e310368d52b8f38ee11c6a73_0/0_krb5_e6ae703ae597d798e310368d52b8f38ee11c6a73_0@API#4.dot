digraph "0_krb5_e6ae703ae597d798e310368d52b8f38ee11c6a73_0@API" {
"1000588" [label="(Call,md5cksum.checksum_type = CKSUMTYPE_HMAC_MD5_ARCFOUR)"];
"1000605" [label="(Call,krb5_c_checksum_length(context, md5cksum.checksum_type, &sumlen))"];
"1000603" [label="(Call,code = krb5_c_checksum_length(context, md5cksum.checksum_type, &sumlen))"];
"1000613" [label="(Call,code != 0)"];
"1000848" [label="(Call,*minor_status = code)"];
"1000628" [label="(Call,kg_make_checksum_iov_v1(context, md5cksum.checksum_type,\n                                   cksum_len, ctx->seq, ctx->enc,\n                                   sign_usage, iov, iov_count, toktype,\n                                   &md5cksum))"];
"1000626" [label="(Call,code = kg_make_checksum_iov_v1(context, md5cksum.checksum_type,\n                                   cksum_len, ctx->seq, ctx->enc,\n                                   sign_usage, iov, iov_count, toktype,\n                                   &md5cksum))"];
"1000647" [label="(Call,code != 0)"];
"1000662" [label="(Call,kg_encrypt_inplace(context, ctx->seq, KG_USAGE_SEAL,\n                                  (g_OID_equal(ctx->mech_used,\n                                               gss_mech_krb5_old) ?\n                                   ctx->seq->keyblock.contents : NULL),\n                                  md5cksum.contents, 16))"];
"1000660" [label="(Call,code = kg_encrypt_inplace(context, ctx->seq, KG_USAGE_SEAL,\n                                  (g_OID_equal(ctx->mech_used,\n                                               gss_mech_krb5_old) ?\n                                   ctx->seq->keyblock.contents : NULL),\n                                  md5cksum.contents, 16))"];
"1000687" [label="(Call,code != 0)"];
"1000700" [label="(Call,cksum.contents = md5cksum.contents + 16 - cksum.length)"];
"1000715" [label="(Call,k5_bcmp(cksum.contents, ptr + 14, cksum.length))"];
"1000713" [label="(Call,code = k5_bcmp(cksum.contents, ptr + 14, cksum.length))"];
"1000749" [label="(Call,code != 0)"];
"1000704" [label="(Call,md5cksum.contents + 16 - cksum.length)"];
"1000844" [label="(Call,krb5_free_checksum_contents(context, &md5cksum))"];
"1000695" [label="(Call,cksum.length = cksum_len)"];
"1000708" [label="(Call,16 - cksum.length)"];
"1000730" [label="(Call,k5_bcmp(md5cksum.contents, ptr + 14, cksum_len))"];
"1000728" [label="(Call,code = k5_bcmp(md5cksum.contents, ptr + 14, cksum_len))"];
"1000762" [label="(Call,toktype == KG_TOK_WRAP_MSG)"];
"1000761" [label="(Call,toktype == KG_TOK_WRAP_MSG &&\n        (ctx->gss_flags & GSS_C_DCE_STYLE) == 0)"];
"1000775" [label="(Call,kg_fixup_padding_iov(&code, iov, iov_count))"];
"1000773" [label="(Call,retval = kg_fixup_padding_iov(&code, iov, iov_count))"];
"1000781" [label="(Call,retval != GSS_S_COMPLETE)"];
"1000852" [label="(Return,return retval;)"];
"1000546" [label="(Call,kg_confounder_size(context, ctx->enc->keyblock.enctype))"];
"1000846" [label="(Call,&md5cksum)"];
"1000581" [label="(Call,md5cksum.checksum_type = CKSUMTYPE_RSA_MD5)"];
"1000696" [label="(Call,cksum.length)"];
"1000641" [label="(Identifier,iov)"];
"1000153" [label="(Call,md5cksum.contents = cksum.contents = NULL)"];
"1000756" [label="(Call,retval = GSS_S_BAD_SIG)"];
"1000612" [label="(ControlStructure,if (code != 0))"];
"1000592" [label="(Identifier,CKSUMTYPE_HMAC_MD5_ARCFOUR)"];
"1000765" [label="(Call,(ctx->gss_flags & GSS_C_DCE_STYLE) == 0)"];
"1000845" [label="(Identifier,context)"];
"1000419" [label="(Call,code != 0)"];
"1000768" [label="(Identifier,ctx)"];
"1000637" [label="(Call,ctx->enc)"];
"1000851" [label="(Identifier,code)"];
"1000536" [label="(Call,code != 0)"];
"1000373" [label="(Call,cksum_len = 8)"];
"1000697" [label="(Identifier,cksum)"];
"1000844" [label="(Call,krb5_free_checksum_contents(context, &md5cksum))"];
"1000615" [label="(Literal,0)"];
"1000750" [label="(Identifier,code)"];
"1000610" [label="(Call,&sumlen)"];
"1000119" [label="(Block,)"];
"1000740" [label="(Call,code = 0)"];
"1000640" [label="(Identifier,sign_usage)"];
"1000613" [label="(Call,code != 0)"];
"1000385" [label="(Call,cksum_len = 16)"];
"1000570" [label="(Call,retval = GSS_S_DEFECTIVE_TOKEN)"];
"1000266" [label="(Call,ptr[4] != 0xFF)"];
"1000603" [label="(Call,code = krb5_c_checksum_length(context, md5cksum.checksum_type, &sumlen))"];
"1000699" [label="(Identifier,cksum_len)"];
"1000380" [label="(Call,sign_usage = 15)"];
"1000633" [label="(Identifier,cksum_len)"];
"1000708" [label="(Call,16 - cksum.length)"];
"1000642" [label="(Identifier,iov_count)"];
"1000853" [label="(Identifier,retval)"];
"1000783" [label="(Identifier,GSS_S_COMPLETE)"];
"1000656" [label="(Identifier,signalg)"];
"1000749" [label="(Call,code != 0)"];
"1000686" [label="(ControlStructure,if (code != 0))"];
"1000498" [label="(Call,kg_arcfour_docrypt_iov(context, enc_key, 0,\n                                              &bigend_seqnum[0], 4,\n                                              iov, iov_count))"];
"1000141" [label="(Call,sign_usage = KG_USAGE_SIGN)"];
"1000772" [label="(Block,)"];
"1000651" [label="(Call,retval = GSS_S_FAILURE)"];
"1000779" [label="(Identifier,iov_count)"];
"1000710" [label="(Call,cksum.length)"];
"1000626" [label="(Call,code = kg_make_checksum_iov_v1(context, md5cksum.checksum_type,\n                                   cksum_len, ctx->seq, ctx->enc,\n                                   sign_usage, iov, iov_count, toktype,\n                                   &md5cksum))"];
"1000623" [label="(Identifier,md5cksum)"];
"1000430" [label="(Call,toktype == KG_TOK_WRAP_MSG)"];
"1000617" [label="(Call,retval = GSS_S_FAILURE)"];
"1000649" [label="(Literal,0)"];
"1000691" [label="(Call,retval = GSS_S_FAILURE)"];
"1000762" [label="(Call,toktype == KG_TOK_WRAP_MSG)"];
"1000606" [label="(Identifier,context)"];
"1000540" [label="(Call,retval = GSS_S_FAILURE)"];
"1000754" [label="(Identifier,code)"];
"1000688" [label="(Identifier,code)"];
"1000833" [label="(Call,retval = g_order_check(&ctx->seqstate, (gssint_uint64)seqnum))"];
"1000593" [label="(ControlStructure,break;)"];
"1000830" [label="(Call,code = 0)"];
"1000667" [label="(Identifier,KG_USAGE_SEAL)"];
"1000652" [label="(Identifier,retval)"];
"1000646" [label="(ControlStructure,if (code != 0))"];
"1000761" [label="(Call,toktype == KG_TOK_WRAP_MSG &&\n        (ctx->gss_flags & GSS_C_DCE_STYLE) == 0)"];
"1000403" [label="(Call,kg_get_seq_num(context, ctx->seq, ptr + 14, ptr + 6, &direction,\n                          &seqnum))"];
"1000700" [label="(Call,cksum.contents = md5cksum.contents + 16 - cksum.length)"];
"1000662" [label="(Call,kg_encrypt_inplace(context, ctx->seq, KG_USAGE_SEAL,\n                                  (g_OID_equal(ctx->mech_used,\n                                               gss_mech_krb5_old) ?\n                                   ctx->seq->keyblock.contents : NULL),\n                                  md5cksum.contents, 16))"];
"1000787" [label="(Identifier,conf_state)"];
"1000605" [label="(Call,krb5_c_checksum_length(context, md5cksum.checksum_type, &sumlen))"];
"1000247" [label="(Call,ptr[1] << 8)"];
"1000634" [label="(Call,ctx->seq)"];
"1000664" [label="(Call,ctx->seq)"];
"1000174" [label="(Call,kg_locate_iov(iov, iov_count, GSS_IOV_BUFFER_TYPE_TRAILER))"];
"1000628" [label="(Call,kg_make_checksum_iov_v1(context, md5cksum.checksum_type,\n                                   cksum_len, ctx->seq, ctx->enc,\n                                   sign_usage, iov, iov_count, toktype,\n                                   &md5cksum))"];
"1000689" [label="(Literal,0)"];
"1000714" [label="(Identifier,code)"];
"1000685" [label="(Literal,16)"];
"1000850" [label="(Identifier,minor_status)"];
"1000614" [label="(Identifier,code)"];
"1000753" [label="(Call,code = 0)"];
"1000774" [label="(Identifier,retval)"];
"1000595" [label="(Call,md5cksum.checksum_type = CKSUMTYPE_HMAC_SHA1_DES3)"];
"1000722" [label="(Call,cksum.length)"];
"1000782" [label="(Identifier,retval)"];
"1000854" [label="(MethodReturn,RET)"];
"1000629" [label="(Identifier,context)"];
"1000715" [label="(Call,k5_bcmp(cksum.contents, ptr + 14, cksum.length))"];
"1000695" [label="(Call,cksum.length = cksum_len)"];
"1000454" [label="(Call,krb5_k_key_keyblock(context, ctx->enc, &enc_key))"];
"1000738" [label="(ControlStructure,break;)"];
"1000110" [label="(MethodParameterIn,krb5_context context)"];
"1000588" [label="(Call,md5cksum.checksum_type = CKSUMTYPE_HMAC_MD5_ARCFOUR)"];
"1000764" [label="(Identifier,KG_TOK_WRAP_MSG)"];
"1000607" [label="(Call,md5cksum.checksum_type)"];
"1000113" [label="(MethodParameterIn,gss_iov_buffer_desc *iov)"];
"1000630" [label="(Call,md5cksum.checksum_type)"];
"1000849" [label="(Call,*minor_status)"];
"1000682" [label="(Call,md5cksum.contents)"];
"1000725" [label="(ControlStructure,break;)"];
"1000663" [label="(Identifier,context)"];
"1000748" [label="(ControlStructure,if (code != 0))"];
"1000713" [label="(Call,code = k5_bcmp(cksum.contents, ptr + 14, cksum.length))"];
"1000692" [label="(Identifier,retval)"];
"1000729" [label="(Identifier,code)"];
"1000576" [label="(Block,)"];
"1000660" [label="(Call,code = kg_encrypt_inplace(context, ctx->seq, KG_USAGE_SEAL,\n                                  (g_OID_equal(ctx->mech_used,\n                                               gss_mech_krb5_old) ?\n                                   ctx->seq->keyblock.contents : NULL),\n                                  md5cksum.contents, 16))"];
"1000730" [label="(Call,k5_bcmp(md5cksum.contents, ptr + 14, cksum_len))"];
"1000781" [label="(Call,retval != GSS_S_COMPLETE)"];
"1000763" [label="(Identifier,toktype)"];
"1000743" [label="(Call,retval = GSS_S_DEFECTIVE_TOKEN)"];
"1000701" [label="(Call,cksum.contents)"];
"1000229" [label="(Call,ptr = (unsigned char *)header->buffer.value + token_wrapper_len)"];
"1000716" [label="(Call,cksum.contents)"];
"1000627" [label="(Identifier,code)"];
"1000618" [label="(Identifier,retval)"];
"1000760" [label="(ControlStructure,if (toktype == KG_TOK_WRAP_MSG &&\n        (ctx->gss_flags & GSS_C_DCE_STYLE) == 0))"];
"1000773" [label="(Call,retval = kg_fixup_padding_iov(&code, iov, iov_count))"];
"1000657" [label="(Block,)"];
"1000776" [label="(Call,&code)"];
"1000734" [label="(Call,ptr + 14)"];
"1000647" [label="(Call,code != 0)"];
"1000462" [label="(Call,code != 0)"];
"1000516" [label="(Call,kg_decrypt_iov(context, 0,\n                                      ((ctx->gss_flags & GSS_C_DCE_STYLE) != 0),\n                                      0 /*EC*/, 0 /*RRC*/,\n                                      ctx->enc, KG_USAGE_SEAL, NULL,\n                                      iov, iov_count))"];
"1000271" [label="(Call,ptr[5] != 0xFF)"];
"1000644" [label="(Call,&md5cksum)"];
"1000114" [label="(MethodParameterIn,int iov_count)"];
"1000702" [label="(Identifier,cksum)"];
"1000390" [label="(Call,cksum_len = 20)"];
"1000784" [label="(ControlStructure,goto cleanup;)"];
"1000852" [label="(Return,return retval;)"];
"1000200" [label="(Call,ctx->seq == NULL)"];
"1000719" [label="(Call,ptr + 14)"];
"1000643" [label="(Identifier,toktype)"];
"1000737" [label="(Identifier,cksum_len)"];
"1000661" [label="(Identifier,code)"];
"1000731" [label="(Call,md5cksum.contents)"];
"1000778" [label="(Identifier,iov)"];
"1000751" [label="(Literal,0)"];
"1000775" [label="(Call,kg_fixup_padding_iov(&code, iov, iov_count))"];
"1000704" [label="(Call,md5cksum.contents + 16 - cksum.length)"];
"1000466" [label="(Call,retval = GSS_S_FAILURE)"];
"1000705" [label="(Call,md5cksum.contents)"];
"1000709" [label="(Literal,16)"];
"1000259" [label="(Call,ptr[3] << 8)"];
"1000728" [label="(Call,code = k5_bcmp(md5cksum.contents, ptr + 14, cksum_len))"];
"1000668" [label="(Call,g_OID_equal(ctx->mech_used,\n                                               gss_mech_krb5_old) ?\n                                   ctx->seq->keyblock.contents : NULL)"];
"1000509" [label="(Call,krb5_free_keyblock(context, enc_key))"];
"1000848" [label="(Call,*minor_status = code)"];
"1000648" [label="(Identifier,code)"];
"1000604" [label="(Identifier,code)"];
"1000687" [label="(Call,code != 0)"];
"1000589" [label="(Call,md5cksum.checksum_type)"];
"1000118" [label="(MethodParameterIn,int toktype)"];
"1000780" [label="(ControlStructure,if (retval != GSS_S_COMPLETE))"];
"1000588" -> "1000576"  [label="AST: "];
"1000588" -> "1000592"  [label="CFG: "];
"1000589" -> "1000588"  [label="AST: "];
"1000592" -> "1000588"  [label="AST: "];
"1000593" -> "1000588"  [label="CFG: "];
"1000588" -> "1000854"  [label="DDG: CKSUMTYPE_HMAC_MD5_ARCFOUR"];
"1000588" -> "1000605"  [label="DDG: md5cksum.checksum_type"];
"1000605" -> "1000603"  [label="AST: "];
"1000605" -> "1000610"  [label="CFG: "];
"1000606" -> "1000605"  [label="AST: "];
"1000607" -> "1000605"  [label="AST: "];
"1000610" -> "1000605"  [label="AST: "];
"1000603" -> "1000605"  [label="CFG: "];
"1000605" -> "1000854"  [label="DDG: md5cksum.checksum_type"];
"1000605" -> "1000854"  [label="DDG: &sumlen"];
"1000605" -> "1000603"  [label="DDG: context"];
"1000605" -> "1000603"  [label="DDG: md5cksum.checksum_type"];
"1000605" -> "1000603"  [label="DDG: &sumlen"];
"1000403" -> "1000605"  [label="DDG: context"];
"1000546" -> "1000605"  [label="DDG: context"];
"1000110" -> "1000605"  [label="DDG: context"];
"1000595" -> "1000605"  [label="DDG: md5cksum.checksum_type"];
"1000581" -> "1000605"  [label="DDG: md5cksum.checksum_type"];
"1000605" -> "1000628"  [label="DDG: context"];
"1000605" -> "1000628"  [label="DDG: md5cksum.checksum_type"];
"1000605" -> "1000844"  [label="DDG: context"];
"1000603" -> "1000119"  [label="AST: "];
"1000604" -> "1000603"  [label="AST: "];
"1000614" -> "1000603"  [label="CFG: "];
"1000603" -> "1000854"  [label="DDG: krb5_c_checksum_length(context, md5cksum.checksum_type, &sumlen)"];
"1000603" -> "1000613"  [label="DDG: code"];
"1000613" -> "1000612"  [label="AST: "];
"1000613" -> "1000615"  [label="CFG: "];
"1000614" -> "1000613"  [label="AST: "];
"1000615" -> "1000613"  [label="AST: "];
"1000618" -> "1000613"  [label="CFG: "];
"1000623" -> "1000613"  [label="CFG: "];
"1000613" -> "1000854"  [label="DDG: code != 0"];
"1000613" -> "1000848"  [label="DDG: code"];
"1000848" -> "1000119"  [label="AST: "];
"1000848" -> "1000851"  [label="CFG: "];
"1000849" -> "1000848"  [label="AST: "];
"1000851" -> "1000848"  [label="AST: "];
"1000853" -> "1000848"  [label="CFG: "];
"1000848" -> "1000854"  [label="DDG: code"];
"1000848" -> "1000854"  [label="DDG: *minor_status"];
"1000753" -> "1000848"  [label="DDG: code"];
"1000462" -> "1000848"  [label="DDG: code"];
"1000749" -> "1000848"  [label="DDG: code"];
"1000419" -> "1000848"  [label="DDG: code"];
"1000647" -> "1000848"  [label="DDG: code"];
"1000740" -> "1000848"  [label="DDG: code"];
"1000687" -> "1000848"  [label="DDG: code"];
"1000536" -> "1000848"  [label="DDG: code"];
"1000830" -> "1000848"  [label="DDG: code"];
"1000628" -> "1000626"  [label="AST: "];
"1000628" -> "1000644"  [label="CFG: "];
"1000629" -> "1000628"  [label="AST: "];
"1000630" -> "1000628"  [label="AST: "];
"1000633" -> "1000628"  [label="AST: "];
"1000634" -> "1000628"  [label="AST: "];
"1000637" -> "1000628"  [label="AST: "];
"1000640" -> "1000628"  [label="AST: "];
"1000641" -> "1000628"  [label="AST: "];
"1000642" -> "1000628"  [label="AST: "];
"1000643" -> "1000628"  [label="AST: "];
"1000644" -> "1000628"  [label="AST: "];
"1000626" -> "1000628"  [label="CFG: "];
"1000628" -> "1000854"  [label="DDG: toktype"];
"1000628" -> "1000854"  [label="DDG: md5cksum.checksum_type"];
"1000628" -> "1000854"  [label="DDG: iov"];
"1000628" -> "1000854"  [label="DDG: sign_usage"];
"1000628" -> "1000854"  [label="DDG: cksum_len"];
"1000628" -> "1000854"  [label="DDG: ctx->enc"];
"1000628" -> "1000854"  [label="DDG: ctx->seq"];
"1000628" -> "1000854"  [label="DDG: iov_count"];
"1000628" -> "1000626"  [label="DDG: toktype"];
"1000628" -> "1000626"  [label="DDG: md5cksum.checksum_type"];
"1000628" -> "1000626"  [label="DDG: cksum_len"];
"1000628" -> "1000626"  [label="DDG: ctx->enc"];
"1000628" -> "1000626"  [label="DDG: ctx->seq"];
"1000628" -> "1000626"  [label="DDG: iov_count"];
"1000628" -> "1000626"  [label="DDG: iov"];
"1000628" -> "1000626"  [label="DDG: sign_usage"];
"1000628" -> "1000626"  [label="DDG: context"];
"1000628" -> "1000626"  [label="DDG: &md5cksum"];
"1000110" -> "1000628"  [label="DDG: context"];
"1000390" -> "1000628"  [label="DDG: cksum_len"];
"1000385" -> "1000628"  [label="DDG: cksum_len"];
"1000373" -> "1000628"  [label="DDG: cksum_len"];
"1000403" -> "1000628"  [label="DDG: ctx->seq"];
"1000516" -> "1000628"  [label="DDG: ctx->enc"];
"1000516" -> "1000628"  [label="DDG: iov"];
"1000516" -> "1000628"  [label="DDG: iov_count"];
"1000454" -> "1000628"  [label="DDG: ctx->enc"];
"1000141" -> "1000628"  [label="DDG: sign_usage"];
"1000380" -> "1000628"  [label="DDG: sign_usage"];
"1000498" -> "1000628"  [label="DDG: iov"];
"1000498" -> "1000628"  [label="DDG: iov_count"];
"1000174" -> "1000628"  [label="DDG: iov"];
"1000174" -> "1000628"  [label="DDG: iov_count"];
"1000113" -> "1000628"  [label="DDG: iov"];
"1000114" -> "1000628"  [label="DDG: iov_count"];
"1000430" -> "1000628"  [label="DDG: toktype"];
"1000118" -> "1000628"  [label="DDG: toktype"];
"1000628" -> "1000662"  [label="DDG: context"];
"1000628" -> "1000662"  [label="DDG: ctx->seq"];
"1000628" -> "1000695"  [label="DDG: cksum_len"];
"1000628" -> "1000730"  [label="DDG: cksum_len"];
"1000628" -> "1000762"  [label="DDG: toktype"];
"1000628" -> "1000775"  [label="DDG: iov"];
"1000628" -> "1000775"  [label="DDG: iov_count"];
"1000628" -> "1000844"  [label="DDG: context"];
"1000628" -> "1000844"  [label="DDG: &md5cksum"];
"1000626" -> "1000119"  [label="AST: "];
"1000627" -> "1000626"  [label="AST: "];
"1000648" -> "1000626"  [label="CFG: "];
"1000626" -> "1000854"  [label="DDG: kg_make_checksum_iov_v1(context, md5cksum.checksum_type,\n                                   cksum_len, ctx->seq, ctx->enc,\n                                   sign_usage, iov, iov_count, toktype,\n                                   &md5cksum)"];
"1000626" -> "1000647"  [label="DDG: code"];
"1000647" -> "1000646"  [label="AST: "];
"1000647" -> "1000649"  [label="CFG: "];
"1000648" -> "1000647"  [label="AST: "];
"1000649" -> "1000647"  [label="AST: "];
"1000652" -> "1000647"  [label="CFG: "];
"1000656" -> "1000647"  [label="CFG: "];
"1000647" -> "1000854"  [label="DDG: code != 0"];
"1000662" -> "1000660"  [label="AST: "];
"1000662" -> "1000685"  [label="CFG: "];
"1000663" -> "1000662"  [label="AST: "];
"1000664" -> "1000662"  [label="AST: "];
"1000667" -> "1000662"  [label="AST: "];
"1000668" -> "1000662"  [label="AST: "];
"1000682" -> "1000662"  [label="AST: "];
"1000685" -> "1000662"  [label="AST: "];
"1000660" -> "1000662"  [label="CFG: "];
"1000662" -> "1000854"  [label="DDG: md5cksum.contents"];
"1000662" -> "1000854"  [label="DDG: g_OID_equal(ctx->mech_used,\n                                               gss_mech_krb5_old) ?\n                                   ctx->seq->keyblock.contents : NULL"];
"1000662" -> "1000854"  [label="DDG: ctx->seq"];
"1000662" -> "1000854"  [label="DDG: KG_USAGE_SEAL"];
"1000662" -> "1000660"  [label="DDG: ctx->seq"];
"1000662" -> "1000660"  [label="DDG: g_OID_equal(ctx->mech_used,\n                                               gss_mech_krb5_old) ?\n                                   ctx->seq->keyblock.contents : NULL"];
"1000662" -> "1000660"  [label="DDG: 16"];
"1000662" -> "1000660"  [label="DDG: context"];
"1000662" -> "1000660"  [label="DDG: md5cksum.contents"];
"1000662" -> "1000660"  [label="DDG: KG_USAGE_SEAL"];
"1000110" -> "1000662"  [label="DDG: context"];
"1000516" -> "1000662"  [label="DDG: KG_USAGE_SEAL"];
"1000516" -> "1000662"  [label="DDG: NULL"];
"1000200" -> "1000662"  [label="DDG: NULL"];
"1000153" -> "1000662"  [label="DDG: md5cksum.contents"];
"1000662" -> "1000700"  [label="DDG: md5cksum.contents"];
"1000662" -> "1000704"  [label="DDG: md5cksum.contents"];
"1000662" -> "1000844"  [label="DDG: context"];
"1000660" -> "1000657"  [label="AST: "];
"1000661" -> "1000660"  [label="AST: "];
"1000688" -> "1000660"  [label="CFG: "];
"1000660" -> "1000854"  [label="DDG: kg_encrypt_inplace(context, ctx->seq, KG_USAGE_SEAL,\n                                  (g_OID_equal(ctx->mech_used,\n                                               gss_mech_krb5_old) ?\n                                   ctx->seq->keyblock.contents : NULL),\n                                  md5cksum.contents, 16)"];
"1000660" -> "1000687"  [label="DDG: code"];
"1000687" -> "1000686"  [label="AST: "];
"1000687" -> "1000689"  [label="CFG: "];
"1000688" -> "1000687"  [label="AST: "];
"1000689" -> "1000687"  [label="AST: "];
"1000692" -> "1000687"  [label="CFG: "];
"1000697" -> "1000687"  [label="CFG: "];
"1000687" -> "1000854"  [label="DDG: code != 0"];
"1000700" -> "1000657"  [label="AST: "];
"1000700" -> "1000704"  [label="CFG: "];
"1000701" -> "1000700"  [label="AST: "];
"1000704" -> "1000700"  [label="AST: "];
"1000714" -> "1000700"  [label="CFG: "];
"1000700" -> "1000854"  [label="DDG: md5cksum.contents + 16 - cksum.length"];
"1000708" -> "1000700"  [label="DDG: 16"];
"1000708" -> "1000700"  [label="DDG: cksum.length"];
"1000700" -> "1000715"  [label="DDG: cksum.contents"];
"1000715" -> "1000713"  [label="AST: "];
"1000715" -> "1000722"  [label="CFG: "];
"1000716" -> "1000715"  [label="AST: "];
"1000719" -> "1000715"  [label="AST: "];
"1000722" -> "1000715"  [label="AST: "];
"1000713" -> "1000715"  [label="CFG: "];
"1000715" -> "1000854"  [label="DDG: cksum.contents"];
"1000715" -> "1000854"  [label="DDG: ptr + 14"];
"1000715" -> "1000854"  [label="DDG: cksum.length"];
"1000715" -> "1000713"  [label="DDG: cksum.contents"];
"1000715" -> "1000713"  [label="DDG: ptr + 14"];
"1000715" -> "1000713"  [label="DDG: cksum.length"];
"1000247" -> "1000715"  [label="DDG: ptr[1]"];
"1000259" -> "1000715"  [label="DDG: ptr[3]"];
"1000266" -> "1000715"  [label="DDG: ptr[4]"];
"1000271" -> "1000715"  [label="DDG: ptr[5]"];
"1000229" -> "1000715"  [label="DDG: ptr"];
"1000708" -> "1000715"  [label="DDG: cksum.length"];
"1000713" -> "1000657"  [label="AST: "];
"1000714" -> "1000713"  [label="AST: "];
"1000725" -> "1000713"  [label="CFG: "];
"1000713" -> "1000854"  [label="DDG: k5_bcmp(cksum.contents, ptr + 14, cksum.length)"];
"1000713" -> "1000749"  [label="DDG: code"];
"1000749" -> "1000748"  [label="AST: "];
"1000749" -> "1000751"  [label="CFG: "];
"1000750" -> "1000749"  [label="AST: "];
"1000751" -> "1000749"  [label="AST: "];
"1000754" -> "1000749"  [label="CFG: "];
"1000763" -> "1000749"  [label="CFG: "];
"1000749" -> "1000854"  [label="DDG: code != 0"];
"1000728" -> "1000749"  [label="DDG: code"];
"1000704" -> "1000708"  [label="CFG: "];
"1000705" -> "1000704"  [label="AST: "];
"1000708" -> "1000704"  [label="AST: "];
"1000704" -> "1000854"  [label="DDG: 16 - cksum.length"];
"1000704" -> "1000854"  [label="DDG: md5cksum.contents"];
"1000708" -> "1000704"  [label="DDG: 16"];
"1000708" -> "1000704"  [label="DDG: cksum.length"];
"1000844" -> "1000119"  [label="AST: "];
"1000844" -> "1000846"  [label="CFG: "];
"1000845" -> "1000844"  [label="AST: "];
"1000846" -> "1000844"  [label="AST: "];
"1000850" -> "1000844"  [label="CFG: "];
"1000844" -> "1000854"  [label="DDG: krb5_free_checksum_contents(context, &md5cksum)"];
"1000844" -> "1000854"  [label="DDG: &md5cksum"];
"1000844" -> "1000854"  [label="DDG: context"];
"1000454" -> "1000844"  [label="DDG: context"];
"1000403" -> "1000844"  [label="DDG: context"];
"1000509" -> "1000844"  [label="DDG: context"];
"1000546" -> "1000844"  [label="DDG: context"];
"1000516" -> "1000844"  [label="DDG: context"];
"1000110" -> "1000844"  [label="DDG: context"];
"1000695" -> "1000657"  [label="AST: "];
"1000695" -> "1000699"  [label="CFG: "];
"1000696" -> "1000695"  [label="AST: "];
"1000699" -> "1000695"  [label="AST: "];
"1000702" -> "1000695"  [label="CFG: "];
"1000695" -> "1000854"  [label="DDG: cksum_len"];
"1000695" -> "1000708"  [label="DDG: cksum.length"];
"1000708" -> "1000710"  [label="CFG: "];
"1000709" -> "1000708"  [label="AST: "];
"1000710" -> "1000708"  [label="AST: "];
"1000730" -> "1000728"  [label="AST: "];
"1000730" -> "1000737"  [label="CFG: "];
"1000731" -> "1000730"  [label="AST: "];
"1000734" -> "1000730"  [label="AST: "];
"1000737" -> "1000730"  [label="AST: "];
"1000728" -> "1000730"  [label="CFG: "];
"1000730" -> "1000854"  [label="DDG: ptr + 14"];
"1000730" -> "1000854"  [label="DDG: md5cksum.contents"];
"1000730" -> "1000854"  [label="DDG: cksum_len"];
"1000730" -> "1000728"  [label="DDG: md5cksum.contents"];
"1000730" -> "1000728"  [label="DDG: ptr + 14"];
"1000730" -> "1000728"  [label="DDG: cksum_len"];
"1000153" -> "1000730"  [label="DDG: md5cksum.contents"];
"1000247" -> "1000730"  [label="DDG: ptr[1]"];
"1000259" -> "1000730"  [label="DDG: ptr[3]"];
"1000266" -> "1000730"  [label="DDG: ptr[4]"];
"1000271" -> "1000730"  [label="DDG: ptr[5]"];
"1000229" -> "1000730"  [label="DDG: ptr"];
"1000728" -> "1000657"  [label="AST: "];
"1000729" -> "1000728"  [label="AST: "];
"1000738" -> "1000728"  [label="CFG: "];
"1000728" -> "1000854"  [label="DDG: k5_bcmp(md5cksum.contents, ptr + 14, cksum_len)"];
"1000762" -> "1000761"  [label="AST: "];
"1000762" -> "1000764"  [label="CFG: "];
"1000763" -> "1000762"  [label="AST: "];
"1000764" -> "1000762"  [label="AST: "];
"1000768" -> "1000762"  [label="CFG: "];
"1000761" -> "1000762"  [label="CFG: "];
"1000762" -> "1000854"  [label="DDG: toktype"];
"1000762" -> "1000854"  [label="DDG: KG_TOK_WRAP_MSG"];
"1000762" -> "1000761"  [label="DDG: toktype"];
"1000762" -> "1000761"  [label="DDG: KG_TOK_WRAP_MSG"];
"1000118" -> "1000762"  [label="DDG: toktype"];
"1000430" -> "1000762"  [label="DDG: KG_TOK_WRAP_MSG"];
"1000761" -> "1000760"  [label="AST: "];
"1000761" -> "1000765"  [label="CFG: "];
"1000765" -> "1000761"  [label="AST: "];
"1000774" -> "1000761"  [label="CFG: "];
"1000787" -> "1000761"  [label="CFG: "];
"1000761" -> "1000854"  [label="DDG: toktype == KG_TOK_WRAP_MSG"];
"1000761" -> "1000854"  [label="DDG: (ctx->gss_flags & GSS_C_DCE_STYLE) == 0"];
"1000761" -> "1000854"  [label="DDG: toktype == KG_TOK_WRAP_MSG &&\n        (ctx->gss_flags & GSS_C_DCE_STYLE) == 0"];
"1000765" -> "1000761"  [label="DDG: ctx->gss_flags & GSS_C_DCE_STYLE"];
"1000765" -> "1000761"  [label="DDG: 0"];
"1000775" -> "1000773"  [label="AST: "];
"1000775" -> "1000779"  [label="CFG: "];
"1000776" -> "1000775"  [label="AST: "];
"1000778" -> "1000775"  [label="AST: "];
"1000779" -> "1000775"  [label="AST: "];
"1000773" -> "1000775"  [label="CFG: "];
"1000775" -> "1000854"  [label="DDG: &code"];
"1000775" -> "1000854"  [label="DDG: iov"];
"1000775" -> "1000854"  [label="DDG: iov_count"];
"1000775" -> "1000773"  [label="DDG: &code"];
"1000775" -> "1000773"  [label="DDG: iov"];
"1000775" -> "1000773"  [label="DDG: iov_count"];
"1000113" -> "1000775"  [label="DDG: iov"];
"1000114" -> "1000775"  [label="DDG: iov_count"];
"1000773" -> "1000772"  [label="AST: "];
"1000774" -> "1000773"  [label="AST: "];
"1000782" -> "1000773"  [label="CFG: "];
"1000773" -> "1000854"  [label="DDG: kg_fixup_padding_iov(&code, iov, iov_count)"];
"1000773" -> "1000781"  [label="DDG: retval"];
"1000781" -> "1000780"  [label="AST: "];
"1000781" -> "1000783"  [label="CFG: "];
"1000782" -> "1000781"  [label="AST: "];
"1000783" -> "1000781"  [label="AST: "];
"1000784" -> "1000781"  [label="CFG: "];
"1000787" -> "1000781"  [label="CFG: "];
"1000781" -> "1000854"  [label="DDG: retval != GSS_S_COMPLETE"];
"1000781" -> "1000854"  [label="DDG: GSS_S_COMPLETE"];
"1000781" -> "1000854"  [label="DDG: retval"];
"1000781" -> "1000852"  [label="DDG: retval"];
"1000852" -> "1000119"  [label="AST: "];
"1000852" -> "1000853"  [label="CFG: "];
"1000853" -> "1000852"  [label="AST: "];
"1000854" -> "1000852"  [label="CFG: "];
"1000852" -> "1000854"  [label="DDG: <RET>"];
"1000853" -> "1000852"  [label="DDG: retval"];
"1000756" -> "1000852"  [label="DDG: retval"];
"1000617" -> "1000852"  [label="DDG: retval"];
"1000743" -> "1000852"  [label="DDG: retval"];
"1000466" -> "1000852"  [label="DDG: retval"];
"1000651" -> "1000852"  [label="DDG: retval"];
"1000691" -> "1000852"  [label="DDG: retval"];
"1000540" -> "1000852"  [label="DDG: retval"];
"1000570" -> "1000852"  [label="DDG: retval"];
"1000833" -> "1000852"  [label="DDG: retval"];
}
