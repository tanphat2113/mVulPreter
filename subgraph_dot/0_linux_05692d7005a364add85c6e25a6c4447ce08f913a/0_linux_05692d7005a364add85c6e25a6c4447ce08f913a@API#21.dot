digraph "0_linux_05692d7005a364add85c6e25a6c4447ce08f913a@API" {
"1001057" [label="(Call,copy_to_user((void __user *)arg, &hdr, minsz))"];
"1001058" [label="(Call,(void __user *)arg)"];
"1000922" [label="(Call,(void __user *)arg)"];
"1000119" [label="(MethodParameterIn,unsigned long arg)"];
"1000919" [label="(Call,copy_from_user(&hdr, (void __user *)arg, minsz))"];
"1000930" [label="(Call,hdr.argsz < minsz)"];
"1001074" [label="(Call,(void __user *)(arg + minsz))"];
"1001073" [label="(Call,copy_to_user((void __user *)(arg + minsz), devices,\n\t\t\t\t\t hdr.count * sizeof(*devices)))"];
"1001091" [label="(Call,kfree(devices))"];
"1001076" [label="(Call,arg + minsz)"];
"1000716" [label="(Call,(void __user *)arg)"];
"1000918" [label="(ControlStructure,if (copy_from_user(&hdr, (void __user *)arg, minsz)))"];
"1000928" [label="(Identifier,EFAULT)"];
"1001091" [label="(Call,kfree(devices))"];
"1001077" [label="(Identifier,arg)"];
"1000907" [label="(Call,*devices = NULL)"];
"1001079" [label="(Identifier,devices)"];
"1000931" [label="(Call,hdr.argsz)"];
"1001078" [label="(Identifier,minsz)"];
"1000609" [label="(Call,(void __user *)arg)"];
"1000929" [label="(ControlStructure,if (hdr.argsz < minsz))"];
"1000686" [label="(Call,(void __user *)arg)"];
"1001122" [label="(Call,(void __user *)arg)"];
"1000136" [label="(Call,(void __user *)arg)"];
"1000901" [label="(Block,)"];
"1000937" [label="(Identifier,EINVAL)"];
"1001057" [label="(Call,copy_to_user((void __user *)arg, &hdr, minsz))"];
"1000920" [label="(Call,&hdr)"];
"1000940" [label="(Identifier,hdr)"];
"1001094" [label="(Identifier,ret)"];
"1001380" [label="(MethodReturn,static long)"];
"1000832" [label="(Call,(void __user *)(arg + minsz))"];
"1001058" [label="(Call,(void __user *)arg)"];
"1000119" [label="(MethodParameterIn,unsigned long arg)"];
"1000934" [label="(Identifier,minsz)"];
"1001074" [label="(Call,(void __user *)(arg + minsz))"];
"1001070" [label="(Identifier,ret)"];
"1000589" [label="(Call,(void __user *)arg)"];
"1001073" [label="(Call,copy_to_user((void __user *)(arg + minsz), devices,\n\t\t\t\t\t hdr.count * sizeof(*devices)))"];
"1001072" [label="(ControlStructure,if (copy_to_user((void __user *)(arg + minsz), devices,\n\t\t\t\t\t hdr.count * sizeof(*devices))))"];
"1001060" [label="(Identifier,arg)"];
"1001056" [label="(ControlStructure,if (copy_to_user((void __user *)arg, &hdr, minsz)))"];
"1001092" [label="(Identifier,devices)"];
"1001080" [label="(Call,hdr.count * sizeof(*devices))"];
"1000834" [label="(Call,arg + minsz)"];
"1000557" [label="(Call,(void __user *)arg)"];
"1001229" [label="(Call,(void __user *)(arg + minsz))"];
"1000212" [label="(Call,(void __user *)arg)"];
"1000925" [label="(Identifier,minsz)"];
"1001231" [label="(Call,arg + minsz)"];
"1001088" [label="(Identifier,ret)"];
"1000930" [label="(Call,hdr.argsz < minsz)"];
"1001062" [label="(Identifier,hdr)"];
"1001061" [label="(Call,&hdr)"];
"1001065" [label="(Identifier,ret)"];
"1000922" [label="(Call,(void __user *)arg)"];
"1001063" [label="(Identifier,minsz)"];
"1000987" [label="(Call,hdr.argsz < sizeof(hdr) + (fill.max * sizeof(*devices)))"];
"1000919" [label="(Call,copy_from_user(&hdr, (void __user *)arg, minsz))"];
"1000924" [label="(Identifier,arg)"];
"1001025" [label="(Call,!devices)"];
"1000183" [label="(Call,(void __user *)arg)"];
"1000932" [label="(Identifier,hdr)"];
"1001076" [label="(Call,arg + minsz)"];
"1001057" -> "1001056"  [label="AST: "];
"1001057" -> "1001063"  [label="CFG: "];
"1001058" -> "1001057"  [label="AST: "];
"1001061" -> "1001057"  [label="AST: "];
"1001063" -> "1001057"  [label="AST: "];
"1001065" -> "1001057"  [label="CFG: "];
"1001070" -> "1001057"  [label="CFG: "];
"1001057" -> "1001380"  [label="DDG: &hdr"];
"1001057" -> "1001380"  [label="DDG: copy_to_user((void __user *)arg, &hdr, minsz)"];
"1001057" -> "1001380"  [label="DDG: (void __user *)arg"];
"1001057" -> "1001380"  [label="DDG: minsz"];
"1001058" -> "1001057"  [label="DDG: arg"];
"1000919" -> "1001057"  [label="DDG: &hdr"];
"1000930" -> "1001057"  [label="DDG: minsz"];
"1001057" -> "1001074"  [label="DDG: minsz"];
"1001057" -> "1001076"  [label="DDG: minsz"];
"1001058" -> "1001060"  [label="CFG: "];
"1001059" -> "1001058"  [label="AST: "];
"1001060" -> "1001058"  [label="AST: "];
"1001062" -> "1001058"  [label="CFG: "];
"1001058" -> "1001380"  [label="DDG: arg"];
"1000922" -> "1001058"  [label="DDG: arg"];
"1000119" -> "1001058"  [label="DDG: arg"];
"1001058" -> "1001074"  [label="DDG: arg"];
"1001058" -> "1001076"  [label="DDG: arg"];
"1000922" -> "1000919"  [label="AST: "];
"1000922" -> "1000924"  [label="CFG: "];
"1000923" -> "1000922"  [label="AST: "];
"1000924" -> "1000922"  [label="AST: "];
"1000925" -> "1000922"  [label="CFG: "];
"1000922" -> "1001380"  [label="DDG: arg"];
"1000922" -> "1000919"  [label="DDG: arg"];
"1000119" -> "1000922"  [label="DDG: arg"];
"1000119" -> "1000116"  [label="AST: "];
"1000119" -> "1001380"  [label="DDG: arg"];
"1000119" -> "1000136"  [label="DDG: arg"];
"1000119" -> "1000183"  [label="DDG: arg"];
"1000119" -> "1000212"  [label="DDG: arg"];
"1000119" -> "1000557"  [label="DDG: arg"];
"1000119" -> "1000589"  [label="DDG: arg"];
"1000119" -> "1000609"  [label="DDG: arg"];
"1000119" -> "1000686"  [label="DDG: arg"];
"1000119" -> "1000716"  [label="DDG: arg"];
"1000119" -> "1000832"  [label="DDG: arg"];
"1000119" -> "1000834"  [label="DDG: arg"];
"1000119" -> "1001074"  [label="DDG: arg"];
"1000119" -> "1001076"  [label="DDG: arg"];
"1000119" -> "1001122"  [label="DDG: arg"];
"1000119" -> "1001229"  [label="DDG: arg"];
"1000119" -> "1001231"  [label="DDG: arg"];
"1000919" -> "1000918"  [label="AST: "];
"1000919" -> "1000925"  [label="CFG: "];
"1000920" -> "1000919"  [label="AST: "];
"1000925" -> "1000919"  [label="AST: "];
"1000928" -> "1000919"  [label="CFG: "];
"1000932" -> "1000919"  [label="CFG: "];
"1000919" -> "1001380"  [label="DDG: &hdr"];
"1000919" -> "1001380"  [label="DDG: copy_from_user(&hdr, (void __user *)arg, minsz)"];
"1000919" -> "1001380"  [label="DDG: minsz"];
"1000919" -> "1001380"  [label="DDG: (void __user *)arg"];
"1000919" -> "1000930"  [label="DDG: minsz"];
"1000930" -> "1000929"  [label="AST: "];
"1000930" -> "1000934"  [label="CFG: "];
"1000931" -> "1000930"  [label="AST: "];
"1000934" -> "1000930"  [label="AST: "];
"1000937" -> "1000930"  [label="CFG: "];
"1000940" -> "1000930"  [label="CFG: "];
"1000930" -> "1001380"  [label="DDG: minsz"];
"1000930" -> "1001380"  [label="DDG: hdr.argsz < minsz"];
"1000930" -> "1001380"  [label="DDG: hdr.argsz"];
"1000930" -> "1000987"  [label="DDG: hdr.argsz"];
"1001074" -> "1001073"  [label="AST: "];
"1001074" -> "1001076"  [label="CFG: "];
"1001075" -> "1001074"  [label="AST: "];
"1001076" -> "1001074"  [label="AST: "];
"1001079" -> "1001074"  [label="CFG: "];
"1001074" -> "1001380"  [label="DDG: arg + minsz"];
"1001074" -> "1001073"  [label="DDG: arg + minsz"];
"1001073" -> "1001072"  [label="AST: "];
"1001073" -> "1001080"  [label="CFG: "];
"1001079" -> "1001073"  [label="AST: "];
"1001080" -> "1001073"  [label="AST: "];
"1001088" -> "1001073"  [label="CFG: "];
"1001092" -> "1001073"  [label="CFG: "];
"1001073" -> "1001380"  [label="DDG: (void __user *)(arg + minsz)"];
"1001073" -> "1001380"  [label="DDG: hdr.count * sizeof(*devices)"];
"1001073" -> "1001380"  [label="DDG: copy_to_user((void __user *)(arg + minsz), devices,\n\t\t\t\t\t hdr.count * sizeof(*devices))"];
"1000907" -> "1001073"  [label="DDG: devices"];
"1001025" -> "1001073"  [label="DDG: devices"];
"1001080" -> "1001073"  [label="DDG: hdr.count"];
"1001073" -> "1001091"  [label="DDG: devices"];
"1001091" -> "1000901"  [label="AST: "];
"1001091" -> "1001092"  [label="CFG: "];
"1001092" -> "1001091"  [label="AST: "];
"1001094" -> "1001091"  [label="CFG: "];
"1001091" -> "1001380"  [label="DDG: kfree(devices)"];
"1001091" -> "1001380"  [label="DDG: devices"];
"1000907" -> "1001091"  [label="DDG: devices"];
"1001025" -> "1001091"  [label="DDG: devices"];
"1001076" -> "1001078"  [label="CFG: "];
"1001077" -> "1001076"  [label="AST: "];
"1001078" -> "1001076"  [label="AST: "];
"1001076" -> "1001380"  [label="DDG: minsz"];
"1001076" -> "1001380"  [label="DDG: arg"];
}
