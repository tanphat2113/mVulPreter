digraph "0_openssl_d81a1600588b726c2bdccda7efad3cc7a87d6245_0@API" {
"1000541" [label="(Call,s->s2->tmp.clear + num_encrypted_key_bytes != key_length)"];
"1000323" [label="(Call,(unsigned long)s->s2->tmp.clear)"];
"1000234" [label="(Call,s->s2->tmp.clear = i)"];
"1000231" [label="(Call,n2s(p, i))"];
"1000228" [label="(Call,p += 3)"];
"1000205" [label="(Call,ssl2_get_cipher_by_char(p))"];
"1000178" [label="(Call,p++)"];
"1000124" [label="(Call,p = (unsigned char *)s->init_buf->data)"];
"1000126" [label="(Call,(unsigned char *)s->init_buf->data)"];
"1000158" [label="(Call,i < (10 - s->init_num))"];
"1000140" [label="(Call,i = ssl2_read(s, (char *)&(p[s->init_num]), 10 - s->init_num))"];
"1000142" [label="(Call,ssl2_read(s, (char *)&(p[s->init_num]), 10 - s->init_num))"];
"1000108" [label="(MethodParameterIn,SSL *s)"];
"1000144" [label="(Call,(char *)&(p[s->init_num]))"];
"1000152" [label="(Call,10 - s->init_num)"];
"1000160" [label="(Call,10 - s->init_num)"];
"1000532" [label="(Call,num_encrypted_key_bytes = 5)"];
"1000525" [label="(Call,num_encrypted_key_bytes = 8)"];
"1000537" [label="(Call,num_encrypted_key_bytes = key_length)"];
"1000498" [label="(Call,key_length > SSL_MAX_MASTER_KEY_LENGTH)"];
"1000491" [label="(Call,key_length = (unsigned int)EVP_CIPHER_key_length(c))"];
"1000493" [label="(Call,(unsigned int)EVP_CIPHER_key_length(c))"];
"1000495" [label="(Call,EVP_CIPHER_key_length(c))"];
"1000685" [label="(Call,(int)key_length)"];
"1000679" [label="(Call,s->session->master_key_length = (int)key_length)"];
"1000688" [label="(Call,memcpy(s->session->master_key, p, key_length))"];
"1000696" [label="(Call,OPENSSL_cleanse(p, key_length))"];
"1000177" [label="(Call,*(p++))"];
"1000491" [label="(Call,key_length = (unsigned int)EVP_CIPHER_key_length(c))"];
"1000688" [label="(Call,memcpy(s->session->master_key, p, key_length))"];
"1000230" [label="(Literal,3)"];
"1000153" [label="(Literal,10)"];
"1000235" [label="(Call,s->s2->tmp.clear)"];
"1000350" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000563" [label="(Call,s->s2->tmp.enc < num_encrypted_key_bytes)"];
"1000526" [label="(Identifier,num_encrypted_key_bytes)"];
"1000493" [label="(Call,(unsigned int)EVP_CIPHER_key_length(c))"];
"1000372" [label="(Call,(char *)&(p[s->init_num]))"];
"1000496" [label="(Identifier,c)"];
"1000108" [label="(MethodParameterIn,SSL *s)"];
"1000534" [label="(Literal,5)"];
"1000541" [label="(Call,s->s2->tmp.clear + num_encrypted_key_bytes != key_length)"];
"1000154" [label="(Call,s->init_num)"];
"1000395" [label="(Call,s->msg_callback(0, s->version, 0, p, (size_t)len, s,\n                        s->msg_callback_arg))"];
"1000234" [label="(Call,s->s2->tmp.clear = i)"];
"1000172" [label="(Identifier,s)"];
"1000318" [label="(Call,len =\n        10 + (unsigned long)s->s2->tmp.clear + (unsigned long)s->s2->tmp.enc +\n        (unsigned long)keya)"];
"1000203" [label="(Call,cp = ssl2_get_cipher_by_char(p))"];
"1000232" [label="(Identifier,p)"];
"1000536" [label="(Block,)"];
"1000695" [label="(Identifier,key_length)"];
"1000228" [label="(Call,p += 3)"];
"1000651" [label="(Call,p[s->s2->tmp.clear + j] =\n                constant_time_select_8(decrypt_good, p[s->s2->tmp.clear + j],\n                                       rand_premaster_secret[j]))"];
"1000567" [label="(Identifier,s)"];
"1000498" [label="(Call,key_length > SSL_MAX_MASTER_KEY_LENGTH)"];
"1000142" [label="(Call,ssl2_read(s, (char *)&(p[s->init_num]), 10 - s->init_num))"];
"1000320" [label="(Call,10 + (unsigned long)s->s2->tmp.clear + (unsigned long)s->s2->tmp.enc +\n        (unsigned long)keya)"];
"1000386" [label="(Call,ssl2_part_read(s, SSL_F_GET_CLIENT_MASTER_KEY, i))"];
"1000109" [label="(Block,)"];
"1000229" [label="(Identifier,p)"];
"1000233" [label="(Identifier,i)"];
"1000540" [label="(ControlStructure,if (s->s2->tmp.clear + num_encrypted_key_bytes != key_length))"];
"1000542" [label="(Call,s->s2->tmp.clear + num_encrypted_key_bytes)"];
"1000694" [label="(Identifier,p)"];
"1000183" [label="(Call,p[-1] != SSL2_MT_ERROR)"];
"1000495" [label="(Call,EVP_CIPHER_key_length(c))"];
"1000687" [label="(Identifier,key_length)"];
"1000500" [label="(Identifier,SSL_MAX_MASTER_KEY_LENGTH)"];
"1000322" [label="(Call,(unsigned long)s->s2->tmp.clear + (unsigned long)s->s2->tmp.enc +\n        (unsigned long)keya)"];
"1000166" [label="(Call,ssl2_part_read(s, SSL_F_GET_CLIENT_MASTER_KEY, i))"];
"1000139" [label="(Block,)"];
"1000531" [label="(Block,)"];
"1000696" [label="(Call,OPENSSL_cleanse(p, key_length))"];
"1000573" [label="(Call,ssl2_return_error(s,SSL2_PE_UNDEFINED_ERROR))"];
"1000421" [label="(Call,s->s2->tmp.clear + s->s2->tmp.enc)"];
"1000554" [label="(Identifier,s)"];
"1000532" [label="(Call,num_encrypted_key_bytes = 5)"];
"1000158" [label="(Call,i < (10 - s->init_num))"];
"1000452" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000679" [label="(Call,s->session->master_key_length = (int)key_length)"];
"1000700" [label="(Literal,1)"];
"1000161" [label="(Literal,10)"];
"1000231" [label="(Call,n2s(p, i))"];
"1000128" [label="(Call,s->init_buf->data)"];
"1000323" [label="(Call,(unsigned long)s->s2->tmp.clear)"];
"1000205" [label="(Call,ssl2_get_cipher_by_char(p))"];
"1000206" [label="(Identifier,p)"];
"1000409" [label="(Call,p += 10)"];
"1000497" [label="(ControlStructure,if (key_length > SSL_MAX_MASTER_KEY_LENGTH))"];
"1000546" [label="(Identifier,s)"];
"1000152" [label="(Call,10 - s->init_num)"];
"1000370" [label="(Call,ssl2_read(s, (char *)&(p[s->init_num]), n))"];
"1000539" [label="(Identifier,key_length)"];
"1000502" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000499" [label="(Identifier,key_length)"];
"1000159" [label="(Identifier,i)"];
"1000302" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000162" [label="(Call,s->init_num)"];
"1000527" [label="(Literal,8)"];
"1000533" [label="(Identifier,num_encrypted_key_bytes)"];
"1000146" [label="(Call,&(p[s->init_num]))"];
"1000190" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000141" [label="(Identifier,i)"];
"1000492" [label="(Identifier,key_length)"];
"1000483" [label="(Call,ssl2_return_error(s, SSL2_PE_NO_CIPHER))"];
"1000525" [label="(Call,num_encrypted_key_bytes = 8)"];
"1000680" [label="(Call,s->session->master_key_length)"];
"1000160" [label="(Call,10 - s->init_num)"];
"1000325" [label="(Call,s->s2->tmp.clear)"];
"1000157" [label="(ControlStructure,if (i < (10 - s->init_num)))"];
"1000537" [label="(Call,num_encrypted_key_bytes = key_length)"];
"1000516" [label="(Identifier,s)"];
"1000238" [label="(Identifier,s)"];
"1000698" [label="(Identifier,key_length)"];
"1000167" [label="(Identifier,s)"];
"1000178" [label="(Call,p++)"];
"1000243" [label="(Call,n2s(p, i))"];
"1000701" [label="(MethodReturn,static int)"];
"1000553" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000654" [label="(Call,s->s2->tmp.clear + j)"];
"1000263" [label="(Call,ssl2_return_error(s, SSL2_PE_UNDEFINED_ERROR))"];
"1000244" [label="(Identifier,p)"];
"1000521" [label="(Block,)"];
"1000140" [label="(Call,i = ssl2_read(s, (char *)&(p[s->init_num]), 10 - s->init_num))"];
"1000212" [label="(Call,ssl2_return_error(s, SSL2_PE_NO_CIPHER))"];
"1000691" [label="(Identifier,s)"];
"1000685" [label="(Call,(int)key_length)"];
"1000697" [label="(Identifier,p)"];
"1000503" [label="(Identifier,s)"];
"1000144" [label="(Call,(char *)&(p[s->init_num]))"];
"1000179" [label="(Identifier,p)"];
"1000126" [label="(Call,(unsigned char *)s->init_buf->data)"];
"1000242" [label="(Identifier,i)"];
"1000125" [label="(Identifier,p)"];
"1000538" [label="(Identifier,num_encrypted_key_bytes)"];
"1000689" [label="(Call,s->session->master_key)"];
"1000136" [label="(Identifier,s)"];
"1000124" [label="(Call,p = (unsigned char *)s->init_buf->data)"];
"1000286" [label="(Call,(unsigned char *)s->init_buf->data)"];
"1000551" [label="(Identifier,key_length)"];
"1000143" [label="(Identifier,s)"];
"1000541" -> "1000540"  [label="AST: "];
"1000541" -> "1000551"  [label="CFG: "];
"1000542" -> "1000541"  [label="AST: "];
"1000551" -> "1000541"  [label="AST: "];
"1000554" -> "1000541"  [label="CFG: "];
"1000567" -> "1000541"  [label="CFG: "];
"1000541" -> "1000701"  [label="DDG: s->s2->tmp.clear + num_encrypted_key_bytes"];
"1000541" -> "1000701"  [label="DDG: key_length"];
"1000541" -> "1000701"  [label="DDG: s->s2->tmp.clear + num_encrypted_key_bytes != key_length"];
"1000323" -> "1000541"  [label="DDG: s->s2->tmp.clear"];
"1000532" -> "1000541"  [label="DDG: num_encrypted_key_bytes"];
"1000525" -> "1000541"  [label="DDG: num_encrypted_key_bytes"];
"1000537" -> "1000541"  [label="DDG: num_encrypted_key_bytes"];
"1000498" -> "1000541"  [label="DDG: key_length"];
"1000541" -> "1000685"  [label="DDG: key_length"];
"1000323" -> "1000322"  [label="AST: "];
"1000323" -> "1000325"  [label="CFG: "];
"1000324" -> "1000323"  [label="AST: "];
"1000325" -> "1000323"  [label="AST: "];
"1000334" -> "1000323"  [label="CFG: "];
"1000323" -> "1000701"  [label="DDG: s->s2->tmp.clear"];
"1000323" -> "1000318"  [label="DDG: s->s2->tmp.clear"];
"1000323" -> "1000320"  [label="DDG: s->s2->tmp.clear"];
"1000323" -> "1000322"  [label="DDG: s->s2->tmp.clear"];
"1000234" -> "1000323"  [label="DDG: s->s2->tmp.clear"];
"1000323" -> "1000421"  [label="DDG: s->s2->tmp.clear"];
"1000323" -> "1000542"  [label="DDG: s->s2->tmp.clear"];
"1000323" -> "1000654"  [label="DDG: s->s2->tmp.clear"];
"1000234" -> "1000139"  [label="AST: "];
"1000234" -> "1000242"  [label="CFG: "];
"1000235" -> "1000234"  [label="AST: "];
"1000242" -> "1000234"  [label="AST: "];
"1000244" -> "1000234"  [label="CFG: "];
"1000234" -> "1000701"  [label="DDG: s->s2->tmp.clear"];
"1000231" -> "1000234"  [label="DDG: i"];
"1000231" -> "1000139"  [label="AST: "];
"1000231" -> "1000233"  [label="CFG: "];
"1000232" -> "1000231"  [label="AST: "];
"1000233" -> "1000231"  [label="AST: "];
"1000238" -> "1000231"  [label="CFG: "];
"1000228" -> "1000231"  [label="DDG: p"];
"1000158" -> "1000231"  [label="DDG: i"];
"1000231" -> "1000243"  [label="DDG: p"];
"1000231" -> "1000243"  [label="DDG: i"];
"1000228" -> "1000139"  [label="AST: "];
"1000228" -> "1000230"  [label="CFG: "];
"1000229" -> "1000228"  [label="AST: "];
"1000230" -> "1000228"  [label="AST: "];
"1000232" -> "1000228"  [label="CFG: "];
"1000205" -> "1000228"  [label="DDG: p"];
"1000205" -> "1000203"  [label="AST: "];
"1000205" -> "1000206"  [label="CFG: "];
"1000206" -> "1000205"  [label="AST: "];
"1000203" -> "1000205"  [label="CFG: "];
"1000205" -> "1000701"  [label="DDG: p"];
"1000205" -> "1000203"  [label="DDG: p"];
"1000178" -> "1000205"  [label="DDG: p"];
"1000178" -> "1000177"  [label="AST: "];
"1000178" -> "1000179"  [label="CFG: "];
"1000179" -> "1000178"  [label="AST: "];
"1000177" -> "1000178"  [label="CFG: "];
"1000178" -> "1000701"  [label="DDG: p"];
"1000124" -> "1000178"  [label="DDG: p"];
"1000178" -> "1000183"  [label="DDG: p"];
"1000124" -> "1000109"  [label="AST: "];
"1000124" -> "1000126"  [label="CFG: "];
"1000125" -> "1000124"  [label="AST: "];
"1000126" -> "1000124"  [label="AST: "];
"1000136" -> "1000124"  [label="CFG: "];
"1000124" -> "1000701"  [label="DDG: (unsigned char *)s->init_buf->data"];
"1000124" -> "1000701"  [label="DDG: p"];
"1000126" -> "1000124"  [label="DDG: s->init_buf->data"];
"1000126" -> "1000128"  [label="CFG: "];
"1000127" -> "1000126"  [label="AST: "];
"1000128" -> "1000126"  [label="AST: "];
"1000126" -> "1000701"  [label="DDG: s->init_buf->data"];
"1000126" -> "1000286"  [label="DDG: s->init_buf->data"];
"1000158" -> "1000157"  [label="AST: "];
"1000158" -> "1000160"  [label="CFG: "];
"1000159" -> "1000158"  [label="AST: "];
"1000160" -> "1000158"  [label="AST: "];
"1000167" -> "1000158"  [label="CFG: "];
"1000172" -> "1000158"  [label="CFG: "];
"1000158" -> "1000701"  [label="DDG: i"];
"1000158" -> "1000701"  [label="DDG: 10 - s->init_num"];
"1000158" -> "1000701"  [label="DDG: i < (10 - s->init_num)"];
"1000140" -> "1000158"  [label="DDG: i"];
"1000160" -> "1000158"  [label="DDG: 10"];
"1000160" -> "1000158"  [label="DDG: s->init_num"];
"1000158" -> "1000166"  [label="DDG: i"];
"1000140" -> "1000139"  [label="AST: "];
"1000140" -> "1000142"  [label="CFG: "];
"1000141" -> "1000140"  [label="AST: "];
"1000142" -> "1000140"  [label="AST: "];
"1000159" -> "1000140"  [label="CFG: "];
"1000140" -> "1000701"  [label="DDG: ssl2_read(s, (char *)&(p[s->init_num]), 10 - s->init_num)"];
"1000142" -> "1000140"  [label="DDG: s"];
"1000142" -> "1000140"  [label="DDG: (char *)&(p[s->init_num])"];
"1000142" -> "1000140"  [label="DDG: 10 - s->init_num"];
"1000142" -> "1000152"  [label="CFG: "];
"1000143" -> "1000142"  [label="AST: "];
"1000144" -> "1000142"  [label="AST: "];
"1000152" -> "1000142"  [label="AST: "];
"1000142" -> "1000701"  [label="DDG: (char *)&(p[s->init_num])"];
"1000142" -> "1000701"  [label="DDG: s"];
"1000108" -> "1000142"  [label="DDG: s"];
"1000144" -> "1000142"  [label="DDG: &(p[s->init_num])"];
"1000152" -> "1000142"  [label="DDG: 10"];
"1000152" -> "1000142"  [label="DDG: s->init_num"];
"1000142" -> "1000166"  [label="DDG: s"];
"1000142" -> "1000190"  [label="DDG: s"];
"1000142" -> "1000212"  [label="DDG: s"];
"1000142" -> "1000263"  [label="DDG: s"];
"1000142" -> "1000302"  [label="DDG: s"];
"1000142" -> "1000350"  [label="DDG: s"];
"1000142" -> "1000370"  [label="DDG: s"];
"1000108" -> "1000107"  [label="AST: "];
"1000108" -> "1000701"  [label="DDG: s"];
"1000108" -> "1000166"  [label="DDG: s"];
"1000108" -> "1000190"  [label="DDG: s"];
"1000108" -> "1000212"  [label="DDG: s"];
"1000108" -> "1000263"  [label="DDG: s"];
"1000108" -> "1000302"  [label="DDG: s"];
"1000108" -> "1000350"  [label="DDG: s"];
"1000108" -> "1000370"  [label="DDG: s"];
"1000108" -> "1000386"  [label="DDG: s"];
"1000108" -> "1000395"  [label="DDG: s"];
"1000108" -> "1000452"  [label="DDG: s"];
"1000108" -> "1000483"  [label="DDG: s"];
"1000108" -> "1000502"  [label="DDG: s"];
"1000108" -> "1000553"  [label="DDG: s"];
"1000108" -> "1000573"  [label="DDG: s"];
"1000144" -> "1000146"  [label="CFG: "];
"1000145" -> "1000144"  [label="AST: "];
"1000146" -> "1000144"  [label="AST: "];
"1000153" -> "1000144"  [label="CFG: "];
"1000144" -> "1000701"  [label="DDG: &(p[s->init_num])"];
"1000144" -> "1000372"  [label="DDG: &(p[s->init_num])"];
"1000152" -> "1000154"  [label="CFG: "];
"1000153" -> "1000152"  [label="AST: "];
"1000154" -> "1000152"  [label="AST: "];
"1000152" -> "1000160"  [label="DDG: s->init_num"];
"1000160" -> "1000162"  [label="CFG: "];
"1000161" -> "1000160"  [label="AST: "];
"1000162" -> "1000160"  [label="AST: "];
"1000160" -> "1000701"  [label="DDG: s->init_num"];
"1000532" -> "1000531"  [label="AST: "];
"1000532" -> "1000534"  [label="CFG: "];
"1000533" -> "1000532"  [label="AST: "];
"1000534" -> "1000532"  [label="AST: "];
"1000546" -> "1000532"  [label="CFG: "];
"1000532" -> "1000542"  [label="DDG: num_encrypted_key_bytes"];
"1000532" -> "1000563"  [label="DDG: num_encrypted_key_bytes"];
"1000525" -> "1000521"  [label="AST: "];
"1000525" -> "1000527"  [label="CFG: "];
"1000526" -> "1000525"  [label="AST: "];
"1000527" -> "1000525"  [label="AST: "];
"1000546" -> "1000525"  [label="CFG: "];
"1000525" -> "1000542"  [label="DDG: num_encrypted_key_bytes"];
"1000525" -> "1000563"  [label="DDG: num_encrypted_key_bytes"];
"1000537" -> "1000536"  [label="AST: "];
"1000537" -> "1000539"  [label="CFG: "];
"1000538" -> "1000537"  [label="AST: "];
"1000539" -> "1000537"  [label="AST: "];
"1000546" -> "1000537"  [label="CFG: "];
"1000498" -> "1000537"  [label="DDG: key_length"];
"1000537" -> "1000542"  [label="DDG: num_encrypted_key_bytes"];
"1000537" -> "1000563"  [label="DDG: num_encrypted_key_bytes"];
"1000498" -> "1000497"  [label="AST: "];
"1000498" -> "1000500"  [label="CFG: "];
"1000499" -> "1000498"  [label="AST: "];
"1000500" -> "1000498"  [label="AST: "];
"1000503" -> "1000498"  [label="CFG: "];
"1000516" -> "1000498"  [label="CFG: "];
"1000498" -> "1000701"  [label="DDG: key_length > SSL_MAX_MASTER_KEY_LENGTH"];
"1000498" -> "1000701"  [label="DDG: key_length"];
"1000498" -> "1000701"  [label="DDG: SSL_MAX_MASTER_KEY_LENGTH"];
"1000491" -> "1000498"  [label="DDG: key_length"];
"1000491" -> "1000109"  [label="AST: "];
"1000491" -> "1000493"  [label="CFG: "];
"1000492" -> "1000491"  [label="AST: "];
"1000493" -> "1000491"  [label="AST: "];
"1000499" -> "1000491"  [label="CFG: "];
"1000491" -> "1000701"  [label="DDG: (unsigned int)EVP_CIPHER_key_length(c)"];
"1000493" -> "1000491"  [label="DDG: EVP_CIPHER_key_length(c)"];
"1000493" -> "1000495"  [label="CFG: "];
"1000494" -> "1000493"  [label="AST: "];
"1000495" -> "1000493"  [label="AST: "];
"1000493" -> "1000701"  [label="DDG: EVP_CIPHER_key_length(c)"];
"1000495" -> "1000493"  [label="DDG: c"];
"1000495" -> "1000496"  [label="CFG: "];
"1000496" -> "1000495"  [label="AST: "];
"1000495" -> "1000701"  [label="DDG: c"];
"1000685" -> "1000679"  [label="AST: "];
"1000685" -> "1000687"  [label="CFG: "];
"1000686" -> "1000685"  [label="AST: "];
"1000687" -> "1000685"  [label="AST: "];
"1000679" -> "1000685"  [label="CFG: "];
"1000685" -> "1000679"  [label="DDG: key_length"];
"1000685" -> "1000688"  [label="DDG: key_length"];
"1000679" -> "1000109"  [label="AST: "];
"1000680" -> "1000679"  [label="AST: "];
"1000691" -> "1000679"  [label="CFG: "];
"1000679" -> "1000701"  [label="DDG: s->session->master_key_length"];
"1000679" -> "1000701"  [label="DDG: (int)key_length"];
"1000688" -> "1000109"  [label="AST: "];
"1000688" -> "1000695"  [label="CFG: "];
"1000689" -> "1000688"  [label="AST: "];
"1000694" -> "1000688"  [label="AST: "];
"1000695" -> "1000688"  [label="AST: "];
"1000697" -> "1000688"  [label="CFG: "];
"1000688" -> "1000701"  [label="DDG: s->session->master_key"];
"1000688" -> "1000701"  [label="DDG: memcpy(s->session->master_key, p, key_length)"];
"1000651" -> "1000688"  [label="DDG: p[s->s2->tmp.clear + j]"];
"1000409" -> "1000688"  [label="DDG: p"];
"1000688" -> "1000696"  [label="DDG: p"];
"1000688" -> "1000696"  [label="DDG: key_length"];
"1000696" -> "1000109"  [label="AST: "];
"1000696" -> "1000698"  [label="CFG: "];
"1000697" -> "1000696"  [label="AST: "];
"1000698" -> "1000696"  [label="AST: "];
"1000700" -> "1000696"  [label="CFG: "];
"1000696" -> "1000701"  [label="DDG: OPENSSL_cleanse(p, key_length)"];
"1000696" -> "1000701"  [label="DDG: p"];
"1000696" -> "1000701"  [label="DDG: key_length"];
"1000651" -> "1000696"  [label="DDG: p[s->s2->tmp.clear + j]"];
}
