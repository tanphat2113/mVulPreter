digraph "0_openssl_d81a1600588b726c2bdccda7efad3cc7a87d6245_0@API" {
"1000532" [label="(Call,num_encrypted_key_bytes = 5)"];
"1000541" [label="(Call,s->s2->tmp.clear + num_encrypted_key_bytes != key_length)"];
"1000685" [label="(Call,(int)key_length)"];
"1000679" [label="(Call,s->session->master_key_length = (int)key_length)"];
"1000688" [label="(Call,memcpy(s->session->master_key, p, key_length))"];
"1000696" [label="(Call,OPENSSL_cleanse(p, key_length))"];
"1000542" [label="(Call,s->s2->tmp.clear + num_encrypted_key_bytes)"];
"1000563" [label="(Call,s->s2->tmp.enc < num_encrypted_key_bytes)"];
"1000586" [label="(Call,(int)num_encrypted_key_bytes)"];
"1000584" [label="(Call,RAND_pseudo_bytes(rand_premaster_secret,\n                          (int)num_encrypted_key_bytes))"];
"1000583" [label="(Call,RAND_pseudo_bytes(rand_premaster_secret,\n                          (int)num_encrypted_key_bytes) <= 0)"];
"1000663" [label="(Call,constant_time_select_8(decrypt_good, p[s->s2->tmp.clear + j],\n                                       rand_premaster_secret[j]))"];
"1000651" [label="(Call,p[s->s2->tmp.clear + j] =\n                constant_time_select_8(decrypt_good, p[s->s2->tmp.clear + j],\n                                       rand_premaster_secret[j]))"];
"1000638" [label="(Call,(int)num_encrypted_key_bytes)"];
"1000636" [label="(Call,constant_time_eq_int_8(i, (int)num_encrypted_key_bytes))"];
"1000634" [label="(Call,decrypt_good = constant_time_eq_int_8(i, (int)num_encrypted_key_bytes))"];
"1000645" [label="(Call,j < num_encrypted_key_bytes)"];
"1000648" [label="(Call,j++)"];
"1000654" [label="(Call,s->s2->tmp.clear + j)"];
"1000667" [label="(Call,s->s2->tmp.clear + j)"];
"1000594" [label="(Call,ssl_rsa_private_decrypt(s->cert, s->s2->tmp.enc,\n                                &(p[s->s2->tmp.clear]),\n                                &(p[s->s2->tmp.clear]),\n                                (s->s2->ssl2_rollback) ? RSA_SSLV23_PADDING :\n                                RSA_PKCS1_PADDING))"];
"1000592" [label="(Call,i = ssl_rsa_private_decrypt(s->cert, s->s2->tmp.enc,\n                                &(p[s->s2->tmp.clear]),\n                                &(p[s->s2->tmp.clear]),\n                                (s->s2->ssl2_rollback) ? RSA_SSLV23_PADDING :\n                                RSA_PKCS1_PADDING))"];
"1000584" [label="(Call,RAND_pseudo_bytes(rand_premaster_secret,\n                          (int)num_encrypted_key_bytes))"];
"1000333" [label="(Call,(unsigned long)s->s2->tmp.enc)"];
"1000688" [label="(Call,memcpy(s->session->master_key, p, key_length))"];
"1000563" [label="(Call,s->s2->tmp.enc < num_encrypted_key_bytes)"];
"1000645" [label="(Call,j < num_encrypted_key_bytes)"];
"1000594" [label="(Call,ssl_rsa_private_decrypt(s->cert, s->s2->tmp.enc,\n                                &(p[s->s2->tmp.clear]),\n                                &(p[s->s2->tmp.clear]),\n                                (s->s2->ssl2_rollback) ? RSA_SSLV23_PADDING :\n                                RSA_PKCS1_PADDING))"];
"1000534" [label="(Literal,5)"];
"1000541" [label="(Call,s->s2->tmp.clear + num_encrypted_key_bytes != key_length)"];
"1000663" [label="(Call,constant_time_select_8(decrypt_good, p[s->s2->tmp.clear + j],\n                                       rand_premaster_secret[j]))"];
"1000593" [label="(Identifier,i)"];
"1000695" [label="(Identifier,key_length)"];
"1000668" [label="(Call,s->s2->tmp.clear)"];
"1000598" [label="(Call,s->s2->tmp.enc)"];
"1000648" [label="(Call,j++)"];
"1000651" [label="(Call,p[s->s2->tmp.clear + j] =\n                constant_time_select_8(decrypt_good, p[s->s2->tmp.clear + j],\n                                       rand_premaster_secret[j]))"];
"1000543" [label="(Call,s->s2->tmp.clear)"];
"1000592" [label="(Call,i = ssl_rsa_private_decrypt(s->cert, s->s2->tmp.enc,\n                                &(p[s->s2->tmp.clear]),\n                                &(p[s->s2->tmp.clear]),\n                                (s->s2->ssl2_rollback) ? RSA_SSLV23_PADDING :\n                                RSA_PKCS1_PADDING))"];
"1000567" [label="(Identifier,s)"];
"1000498" [label="(Call,key_length > SSL_MAX_MASTER_KEY_LENGTH)"];
"1000595" [label="(Call,s->cert)"];
"1000605" [label="(Call,&(p[s->s2->tmp.clear]))"];
"1000675" [label="(Identifier,j)"];
"1000655" [label="(Call,s->s2->tmp.clear)"];
"1000109" [label="(Block,)"];
"1000615" [label="(Call,&(p[s->s2->tmp.clear]))"];
"1000542" [label="(Call,s->s2->tmp.clear + num_encrypted_key_bytes)"];
"1000540" [label="(ControlStructure,if (s->s2->tmp.clear + num_encrypted_key_bytes != key_length))"];
"1000694" [label="(Identifier,p)"];
"1000574" [label="(Identifier,s)"];
"1000687" [label="(Identifier,key_length)"];
"1000636" [label="(Call,constant_time_eq_int_8(i, (int)num_encrypted_key_bytes))"];
"1000682" [label="(Identifier,s)"];
"1000635" [label="(Identifier,decrypt_good)"];
"1000564" [label="(Call,s->s2->tmp.enc)"];
"1000531" [label="(Block,)"];
"1000696" [label="(Call,OPENSSL_cleanse(p, key_length))"];
"1000571" [label="(Identifier,num_encrypted_key_bytes)"];
"1000554" [label="(Identifier,s)"];
"1000532" [label="(Call,num_encrypted_key_bytes = 5)"];
"1000665" [label="(Call,p[s->s2->tmp.clear + j])"];
"1000650" [label="(Block,)"];
"1000679" [label="(Call,s->session->master_key_length = (int)key_length)"];
"1000700" [label="(Literal,1)"];
"1000652" [label="(Call,p[s->s2->tmp.clear + j])"];
"1000323" [label="(Call,(unsigned long)s->s2->tmp.clear)"];
"1000647" [label="(Identifier,num_encrypted_key_bytes)"];
"1000649" [label="(Identifier,j)"];
"1000409" [label="(Call,p += 10)"];
"1000640" [label="(Identifier,num_encrypted_key_bytes)"];
"1000643" [label="(Identifier,j)"];
"1000546" [label="(Identifier,s)"];
"1000551" [label="(Identifier,key_length)"];
"1000583" [label="(Call,RAND_pseudo_bytes(rand_premaster_secret,\n                          (int)num_encrypted_key_bytes) <= 0)"];
"1000591" [label="(Literal,0)"];
"1000585" [label="(Identifier,rand_premaster_secret)"];
"1000637" [label="(Identifier,i)"];
"1000653" [label="(Identifier,p)"];
"1000625" [label="(Call,(s->s2->ssl2_rollback) ? RSA_SSLV23_PADDING :\n                                RSA_PKCS1_PADDING)"];
"1000533" [label="(Identifier,num_encrypted_key_bytes)"];
"1000633" [label="(Call,ERR_clear_error())"];
"1000638" [label="(Call,(int)num_encrypted_key_bytes)"];
"1000664" [label="(Identifier,decrypt_good)"];
"1000588" [label="(Identifier,num_encrypted_key_bytes)"];
"1000525" [label="(Call,num_encrypted_key_bytes = 8)"];
"1000680" [label="(Call,s->session->master_key_length)"];
"1000537" [label="(Call,num_encrypted_key_bytes = key_length)"];
"1000589" [label="(Literal,0)"];
"1000698" [label="(Identifier,key_length)"];
"1000586" [label="(Call,(int)num_encrypted_key_bytes)"];
"1000662" [label="(Identifier,j)"];
"1000701" [label="(MethodReturn,static int)"];
"1000654" [label="(Call,s->s2->tmp.clear + j)"];
"1000550" [label="(Identifier,num_encrypted_key_bytes)"];
"1000646" [label="(Identifier,j)"];
"1000676" [label="(Call,rand_premaster_secret[j])"];
"1000562" [label="(ControlStructure,if (s->s2->tmp.enc < num_encrypted_key_bytes))"];
"1000691" [label="(Identifier,s)"];
"1000685" [label="(Call,(int)key_length)"];
"1000697" [label="(Identifier,p)"];
"1000634" [label="(Call,decrypt_good = constant_time_eq_int_8(i, (int)num_encrypted_key_bytes))"];
"1000667" [label="(Call,s->s2->tmp.clear + j)"];
"1000689" [label="(Call,s->session->master_key)"];
"1000582" [label="(ControlStructure,if (RAND_pseudo_bytes(rand_premaster_secret,\n                          (int)num_encrypted_key_bytes) <= 0))"];
"1000642" [label="(Call,j = 0)"];
"1000641" [label="(ControlStructure,for (j = 0; j < num_encrypted_key_bytes; j++))"];
"1000532" -> "1000531"  [label="AST: "];
"1000532" -> "1000534"  [label="CFG: "];
"1000533" -> "1000532"  [label="AST: "];
"1000534" -> "1000532"  [label="AST: "];
"1000546" -> "1000532"  [label="CFG: "];
"1000532" -> "1000541"  [label="DDG: num_encrypted_key_bytes"];
"1000532" -> "1000542"  [label="DDG: num_encrypted_key_bytes"];
"1000532" -> "1000563"  [label="DDG: num_encrypted_key_bytes"];
"1000541" -> "1000540"  [label="AST: "];
"1000541" -> "1000551"  [label="CFG: "];
"1000542" -> "1000541"  [label="AST: "];
"1000551" -> "1000541"  [label="AST: "];
"1000554" -> "1000541"  [label="CFG: "];
"1000567" -> "1000541"  [label="CFG: "];
"1000541" -> "1000701"  [label="DDG: s->s2->tmp.clear + num_encrypted_key_bytes"];
"1000541" -> "1000701"  [label="DDG: key_length"];
"1000541" -> "1000701"  [label="DDG: s->s2->tmp.clear + num_encrypted_key_bytes != key_length"];
"1000323" -> "1000541"  [label="DDG: s->s2->tmp.clear"];
"1000525" -> "1000541"  [label="DDG: num_encrypted_key_bytes"];
"1000537" -> "1000541"  [label="DDG: num_encrypted_key_bytes"];
"1000498" -> "1000541"  [label="DDG: key_length"];
"1000541" -> "1000685"  [label="DDG: key_length"];
"1000685" -> "1000679"  [label="AST: "];
"1000685" -> "1000687"  [label="CFG: "];
"1000686" -> "1000685"  [label="AST: "];
"1000687" -> "1000685"  [label="AST: "];
"1000679" -> "1000685"  [label="CFG: "];
"1000685" -> "1000679"  [label="DDG: key_length"];
"1000685" -> "1000688"  [label="DDG: key_length"];
"1000679" -> "1000109"  [label="AST: "];
"1000680" -> "1000679"  [label="AST: "];
"1000691" -> "1000679"  [label="CFG: "];
"1000679" -> "1000701"  [label="DDG: s->session->master_key_length"];
"1000679" -> "1000701"  [label="DDG: (int)key_length"];
"1000688" -> "1000109"  [label="AST: "];
"1000688" -> "1000695"  [label="CFG: "];
"1000689" -> "1000688"  [label="AST: "];
"1000694" -> "1000688"  [label="AST: "];
"1000695" -> "1000688"  [label="AST: "];
"1000697" -> "1000688"  [label="CFG: "];
"1000688" -> "1000701"  [label="DDG: s->session->master_key"];
"1000688" -> "1000701"  [label="DDG: memcpy(s->session->master_key, p, key_length)"];
"1000651" -> "1000688"  [label="DDG: p[s->s2->tmp.clear + j]"];
"1000409" -> "1000688"  [label="DDG: p"];
"1000688" -> "1000696"  [label="DDG: p"];
"1000688" -> "1000696"  [label="DDG: key_length"];
"1000696" -> "1000109"  [label="AST: "];
"1000696" -> "1000698"  [label="CFG: "];
"1000697" -> "1000696"  [label="AST: "];
"1000698" -> "1000696"  [label="AST: "];
"1000700" -> "1000696"  [label="CFG: "];
"1000696" -> "1000701"  [label="DDG: OPENSSL_cleanse(p, key_length)"];
"1000696" -> "1000701"  [label="DDG: p"];
"1000696" -> "1000701"  [label="DDG: key_length"];
"1000651" -> "1000696"  [label="DDG: p[s->s2->tmp.clear + j]"];
"1000542" -> "1000550"  [label="CFG: "];
"1000543" -> "1000542"  [label="AST: "];
"1000550" -> "1000542"  [label="AST: "];
"1000551" -> "1000542"  [label="CFG: "];
"1000542" -> "1000701"  [label="DDG: num_encrypted_key_bytes"];
"1000542" -> "1000701"  [label="DDG: s->s2->tmp.clear"];
"1000323" -> "1000542"  [label="DDG: s->s2->tmp.clear"];
"1000525" -> "1000542"  [label="DDG: num_encrypted_key_bytes"];
"1000537" -> "1000542"  [label="DDG: num_encrypted_key_bytes"];
"1000563" -> "1000562"  [label="AST: "];
"1000563" -> "1000571"  [label="CFG: "];
"1000564" -> "1000563"  [label="AST: "];
"1000571" -> "1000563"  [label="AST: "];
"1000574" -> "1000563"  [label="CFG: "];
"1000585" -> "1000563"  [label="CFG: "];
"1000563" -> "1000701"  [label="DDG: num_encrypted_key_bytes"];
"1000563" -> "1000701"  [label="DDG: s->s2->tmp.enc < num_encrypted_key_bytes"];
"1000563" -> "1000701"  [label="DDG: s->s2->tmp.enc"];
"1000333" -> "1000563"  [label="DDG: s->s2->tmp.enc"];
"1000525" -> "1000563"  [label="DDG: num_encrypted_key_bytes"];
"1000537" -> "1000563"  [label="DDG: num_encrypted_key_bytes"];
"1000563" -> "1000586"  [label="DDG: num_encrypted_key_bytes"];
"1000563" -> "1000594"  [label="DDG: s->s2->tmp.enc"];
"1000586" -> "1000584"  [label="AST: "];
"1000586" -> "1000588"  [label="CFG: "];
"1000587" -> "1000586"  [label="AST: "];
"1000588" -> "1000586"  [label="AST: "];
"1000584" -> "1000586"  [label="CFG: "];
"1000586" -> "1000701"  [label="DDG: num_encrypted_key_bytes"];
"1000586" -> "1000584"  [label="DDG: num_encrypted_key_bytes"];
"1000586" -> "1000638"  [label="DDG: num_encrypted_key_bytes"];
"1000584" -> "1000583"  [label="AST: "];
"1000585" -> "1000584"  [label="AST: "];
"1000589" -> "1000584"  [label="CFG: "];
"1000584" -> "1000701"  [label="DDG: (int)num_encrypted_key_bytes"];
"1000584" -> "1000701"  [label="DDG: rand_premaster_secret"];
"1000584" -> "1000583"  [label="DDG: rand_premaster_secret"];
"1000584" -> "1000583"  [label="DDG: (int)num_encrypted_key_bytes"];
"1000584" -> "1000663"  [label="DDG: rand_premaster_secret"];
"1000583" -> "1000582"  [label="AST: "];
"1000583" -> "1000589"  [label="CFG: "];
"1000589" -> "1000583"  [label="AST: "];
"1000591" -> "1000583"  [label="CFG: "];
"1000593" -> "1000583"  [label="CFG: "];
"1000583" -> "1000701"  [label="DDG: RAND_pseudo_bytes(rand_premaster_secret,\n                          (int)num_encrypted_key_bytes) <= 0"];
"1000583" -> "1000701"  [label="DDG: RAND_pseudo_bytes(rand_premaster_secret,\n                          (int)num_encrypted_key_bytes)"];
"1000663" -> "1000651"  [label="AST: "];
"1000663" -> "1000676"  [label="CFG: "];
"1000664" -> "1000663"  [label="AST: "];
"1000665" -> "1000663"  [label="AST: "];
"1000676" -> "1000663"  [label="AST: "];
"1000651" -> "1000663"  [label="CFG: "];
"1000663" -> "1000701"  [label="DDG: rand_premaster_secret[j]"];
"1000663" -> "1000701"  [label="DDG: decrypt_good"];
"1000663" -> "1000651"  [label="DDG: decrypt_good"];
"1000663" -> "1000651"  [label="DDG: p[s->s2->tmp.clear + j]"];
"1000663" -> "1000651"  [label="DDG: rand_premaster_secret[j]"];
"1000634" -> "1000663"  [label="DDG: decrypt_good"];
"1000651" -> "1000663"  [label="DDG: p[s->s2->tmp.clear + j]"];
"1000409" -> "1000663"  [label="DDG: p"];
"1000651" -> "1000650"  [label="AST: "];
"1000652" -> "1000651"  [label="AST: "];
"1000649" -> "1000651"  [label="CFG: "];
"1000651" -> "1000701"  [label="DDG: constant_time_select_8(decrypt_good, p[s->s2->tmp.clear + j],\n                                       rand_premaster_secret[j])"];
"1000651" -> "1000701"  [label="DDG: p[s->s2->tmp.clear + j]"];
"1000638" -> "1000636"  [label="AST: "];
"1000638" -> "1000640"  [label="CFG: "];
"1000639" -> "1000638"  [label="AST: "];
"1000640" -> "1000638"  [label="AST: "];
"1000636" -> "1000638"  [label="CFG: "];
"1000638" -> "1000636"  [label="DDG: num_encrypted_key_bytes"];
"1000638" -> "1000645"  [label="DDG: num_encrypted_key_bytes"];
"1000636" -> "1000634"  [label="AST: "];
"1000637" -> "1000636"  [label="AST: "];
"1000634" -> "1000636"  [label="CFG: "];
"1000636" -> "1000701"  [label="DDG: (int)num_encrypted_key_bytes"];
"1000636" -> "1000701"  [label="DDG: i"];
"1000636" -> "1000634"  [label="DDG: i"];
"1000636" -> "1000634"  [label="DDG: (int)num_encrypted_key_bytes"];
"1000592" -> "1000636"  [label="DDG: i"];
"1000634" -> "1000109"  [label="AST: "];
"1000635" -> "1000634"  [label="AST: "];
"1000643" -> "1000634"  [label="CFG: "];
"1000634" -> "1000701"  [label="DDG: decrypt_good"];
"1000634" -> "1000701"  [label="DDG: constant_time_eq_int_8(i, (int)num_encrypted_key_bytes)"];
"1000645" -> "1000641"  [label="AST: "];
"1000645" -> "1000647"  [label="CFG: "];
"1000646" -> "1000645"  [label="AST: "];
"1000647" -> "1000645"  [label="AST: "];
"1000653" -> "1000645"  [label="CFG: "];
"1000682" -> "1000645"  [label="CFG: "];
"1000645" -> "1000701"  [label="DDG: j"];
"1000645" -> "1000701"  [label="DDG: num_encrypted_key_bytes"];
"1000645" -> "1000701"  [label="DDG: j < num_encrypted_key_bytes"];
"1000642" -> "1000645"  [label="DDG: j"];
"1000648" -> "1000645"  [label="DDG: j"];
"1000645" -> "1000648"  [label="DDG: j"];
"1000645" -> "1000654"  [label="DDG: j"];
"1000645" -> "1000667"  [label="DDG: j"];
"1000648" -> "1000641"  [label="AST: "];
"1000648" -> "1000649"  [label="CFG: "];
"1000649" -> "1000648"  [label="AST: "];
"1000646" -> "1000648"  [label="CFG: "];
"1000654" -> "1000652"  [label="AST: "];
"1000654" -> "1000662"  [label="CFG: "];
"1000655" -> "1000654"  [label="AST: "];
"1000662" -> "1000654"  [label="AST: "];
"1000652" -> "1000654"  [label="CFG: "];
"1000323" -> "1000654"  [label="DDG: s->s2->tmp.clear"];
"1000667" -> "1000665"  [label="AST: "];
"1000667" -> "1000675"  [label="CFG: "];
"1000668" -> "1000667"  [label="AST: "];
"1000675" -> "1000667"  [label="AST: "];
"1000665" -> "1000667"  [label="CFG: "];
"1000667" -> "1000701"  [label="DDG: s->s2->tmp.clear"];
"1000594" -> "1000592"  [label="AST: "];
"1000594" -> "1000625"  [label="CFG: "];
"1000595" -> "1000594"  [label="AST: "];
"1000598" -> "1000594"  [label="AST: "];
"1000605" -> "1000594"  [label="AST: "];
"1000615" -> "1000594"  [label="AST: "];
"1000625" -> "1000594"  [label="AST: "];
"1000592" -> "1000594"  [label="CFG: "];
"1000594" -> "1000701"  [label="DDG: s->s2->tmp.enc"];
"1000594" -> "1000701"  [label="DDG: s->cert"];
"1000594" -> "1000701"  [label="DDG: &(p[s->s2->tmp.clear])"];
"1000594" -> "1000701"  [label="DDG: (s->s2->ssl2_rollback) ? RSA_SSLV23_PADDING :\n                                RSA_PKCS1_PADDING"];
"1000594" -> "1000592"  [label="DDG: (s->s2->ssl2_rollback) ? RSA_SSLV23_PADDING :\n                                RSA_PKCS1_PADDING"];
"1000594" -> "1000592"  [label="DDG: &(p[s->s2->tmp.clear])"];
"1000594" -> "1000592"  [label="DDG: s->cert"];
"1000594" -> "1000592"  [label="DDG: s->s2->tmp.enc"];
"1000592" -> "1000109"  [label="AST: "];
"1000593" -> "1000592"  [label="AST: "];
"1000633" -> "1000592"  [label="CFG: "];
"1000592" -> "1000701"  [label="DDG: ssl_rsa_private_decrypt(s->cert, s->s2->tmp.enc,\n                                &(p[s->s2->tmp.clear]),\n                                &(p[s->s2->tmp.clear]),\n                                (s->s2->ssl2_rollback) ? RSA_SSLV23_PADDING :\n                                RSA_PKCS1_PADDING)"];
}
