digraph "0_Chrome_7c28e7988fef9bb3e03027226bd199736d99abc3_2" {
"1000197" [label="(MethodReturn,void)"];
"1000101" [label="(MethodParameterIn,const Key& key)"];
"1000328" [label="(MethodParameterOut,const Key& key)"];
"1000117" [label="(Identifier,false)"];
"1000115" [label="(Call,result_changed = false)"];
"1000116" [label="(Identifier,result_changed)"];
"1000121" [label="(Call,entries_.find(key))"];
"1000122" [label="(Identifier,key)"];
"1000119" [label="(Call,it = entries_.find(key))"];
"1000120" [label="(Identifier,it)"];
"1000126" [label="(Call,entries_.end())"];
"1000123" [label="(ControlStructure,if (it != entries_.end()))"];
"1000124" [label="(Call,it != entries_.end())"];
"1000125" [label="(Identifier,it)"];
"1000129" [label="(Call,is_stale = it->second.IsStale(now, network_changes_))"];
"1000130" [label="(Identifier,is_stale)"];
"1000131" [label="(Call,it->second.IsStale(now, network_changes_))"];
"1000132" [label="(Identifier,now)"];
"1000133" [label="(Identifier,network_changes_)"];
"1000135" [label="(Call,delta =\n        FindAddressListDeltaType(it->second.addresses(), entry.addresses()))"];
"1000136" [label="(Identifier,delta)"];
"1000127" [label="(Block,)"];
"1000138" [label="(Call,it->second.addresses())"];
"1000139" [label="(Call,entry.addresses())"];
"1000137" [label="(Call,FindAddressListDeltaType(it->second.addresses(), entry.addresses()))"];
"1000141" [label="(Call,is_stale ? SET_UPDATE_STALE : SET_UPDATE_VALID)"];
"1000142" [label="(Identifier,is_stale)"];
"1000143" [label="(Identifier,SET_UPDATE_STALE)"];
"1000144" [label="(Identifier,SET_UPDATE_VALID)"];
"1000140" [label="(Call,RecordSet(is_stale ? SET_UPDATE_STALE : SET_UPDATE_VALID, now, &it->second,\n              entry, delta))"];
"1000145" [label="(Identifier,now)"];
"1000146" [label="(Call,&it->second)"];
"1000147" [label="(Call,it->second)"];
"1000148" [label="(Identifier,it)"];
"1000149" [label="(FieldIdentifier,second)"];
"1000150" [label="(Identifier,entry)"];
"1000151" [label="(Identifier,delta)"];
"1000152" [label="(Call,result_changed =\n        entry.error() == OK &&\n        (it->second.error() != entry.error() || delta != DELTA_IDENTICAL))"];
"1000153" [label="(Identifier,result_changed)"];
"1000157" [label="(Identifier,OK)"];
"1000154" [label="(Call,entry.error() == OK &&\n        (it->second.error() != entry.error() || delta != DELTA_IDENTICAL))"];
"1000155" [label="(Call,entry.error() == OK)"];
"1000156" [label="(Call,entry.error())"];
"1000102" [label="(MethodParameterIn,const Entry& entry)"];
"1000329" [label="(MethodParameterOut,const Entry& entry)"];
"1000161" [label="(Call,entry.error())"];
"1000162" [label="(Call,delta != DELTA_IDENTICAL)"];
"1000163" [label="(Identifier,delta)"];
"1000164" [label="(Identifier,DELTA_IDENTICAL)"];
"1000158" [label="(Call,it->second.error() != entry.error() || delta != DELTA_IDENTICAL)"];
"1000159" [label="(Call,it->second.error() != entry.error())"];
"1000160" [label="(Call,it->second.error())"];
"1000166" [label="(Identifier,it)"];
"1000165" [label="(Call,entries_.erase(it))"];
"1000168" [label="(Block,)"];
"1000167" [label="(ControlStructure,else)"];
"1000171" [label="(Identifier,true)"];
"1000169" [label="(Call,result_changed = true)"];
"1000170" [label="(Identifier,result_changed)"];
"1000175" [label="(Identifier,max_entries_)"];
"1000172" [label="(ControlStructure,if (size() == max_entries_))"];
"1000173" [label="(Call,size() == max_entries_)"];
"1000174" [label="(Call,size())"];
"1000177" [label="(Identifier,now)"];
"1000176" [label="(Call,EvictOneEntry(now))"];
"1000179" [label="(Identifier,SET_INSERT)"];
"1000180" [label="(Identifier,now)"];
"1000181" [label="(Identifier,nullptr)"];
"1000178" [label="(Call,RecordSet(SET_INSERT, now, nullptr, entry, DELTA_DISJOINT))"];
"1000182" [label="(Identifier,entry)"];
"1000183" [label="(Identifier,DELTA_DISJOINT)"];
"1000185" [label="(Call,Key(key))"];
"1000186" [label="(Identifier,key)"];
"1000187" [label="(Call,Entry(entry, now, ttl, network_changes_))"];
"1000188" [label="(Identifier,entry)"];
"1000184" [label="(Call,AddEntry(Key(key), Entry(entry, now, ttl, network_changes_)))"];
"1000189" [label="(Identifier,now)"];
"1000190" [label="(Identifier,ttl)"];
"1000191" [label="(Identifier,network_changes_)"];
"1000103" [label="(MethodParameterIn,base::TimeTicks now)"];
"1000330" [label="(MethodParameterOut,base::TimeTicks now)"];
"1000195" [label="(Identifier,result_changed)"];
"1000192" [label="(ControlStructure,if (delegate_ && result_changed))"];
"1000193" [label="(Call,delegate_ && result_changed)"];
"1000194" [label="(Identifier,delegate_)"];
"1000196" [label="(Call,delegate_->ScheduleWrite())"];
"1000104" [label="(MethodParameterIn,base::TimeDelta ttl)"];
"1000331" [label="(MethodParameterOut,base::TimeDelta ttl)"];
"1000105" [label="(Block,)"];
"1000107" [label="(Identifier,kNetTracingCategory)"];
"1000106" [label="(Call,TRACE_EVENT0(kNetTracingCategory, \"HostCache::Set\"))"];
"1000108" [label="(Literal,\"HostCache::Set\")"];
"1000109" [label="(Call,DCHECK_CALLED_ON_VALID_THREAD(thread_checker_))"];
"1000110" [label="(Identifier,thread_checker_)"];
"1000111" [label="(ControlStructure,if (caching_is_disabled()))"];
"1000112" [label="(Call,caching_is_disabled())"];
"1000113" [label="(Return,return;)"];
"1000197" -> "1000100"  [label="AST: "];
"1000197" -> "1000113"  [label="CFG: "];
"1000197" -> "1000196"  [label="CFG: "];
"1000197" -> "1000193"  [label="CFG: "];
"1000184" -> "1000197"  [label="DDG: Key(key)"];
"1000184" -> "1000197"  [label="DDG: Entry(entry, now, ttl, network_changes_)"];
"1000184" -> "1000197"  [label="DDG: AddEntry(Key(key), Entry(entry, now, ttl, network_changes_))"];
"1000155" -> "1000197"  [label="DDG: OK"];
"1000155" -> "1000197"  [label="DDG: entry.error()"];
"1000178" -> "1000197"  [label="DDG: nullptr"];
"1000178" -> "1000197"  [label="DDG: RecordSet(SET_INSERT, now, nullptr, entry, DELTA_DISJOINT)"];
"1000178" -> "1000197"  [label="DDG: SET_INSERT"];
"1000178" -> "1000197"  [label="DDG: DELTA_DISJOINT"];
"1000176" -> "1000197"  [label="DDG: EvictOneEntry(now)"];
"1000152" -> "1000197"  [label="DDG: entry.error() == OK &&\n        (it->second.error() != entry.error() || delta != DELTA_IDENTICAL)"];
"1000158" -> "1000197"  [label="DDG: it->second.error() != entry.error()"];
"1000158" -> "1000197"  [label="DDG: delta != DELTA_IDENTICAL"];
"1000115" -> "1000197"  [label="DDG: false"];
"1000187" -> "1000197"  [label="DDG: entry"];
"1000187" -> "1000197"  [label="DDG: ttl"];
"1000187" -> "1000197"  [label="DDG: now"];
"1000187" -> "1000197"  [label="DDG: network_changes_"];
"1000162" -> "1000197"  [label="DDG: DELTA_IDENTICAL"];
"1000162" -> "1000197"  [label="DDG: delta"];
"1000185" -> "1000197"  [label="DDG: key"];
"1000124" -> "1000197"  [label="DDG: entries_.end()"];
"1000124" -> "1000197"  [label="DDG: it"];
"1000124" -> "1000197"  [label="DDG: it != entries_.end()"];
"1000141" -> "1000197"  [label="DDG: is_stale"];
"1000141" -> "1000197"  [label="DDG: SET_UPDATE_VALID"];
"1000141" -> "1000197"  [label="DDG: SET_UPDATE_STALE"];
"1000193" -> "1000197"  [label="DDG: delegate_"];
"1000193" -> "1000197"  [label="DDG: result_changed"];
"1000193" -> "1000197"  [label="DDG: delegate_ && result_changed"];
"1000106" -> "1000197"  [label="DDG: kNetTracingCategory"];
"1000106" -> "1000197"  [label="DDG: TRACE_EVENT0(kNetTracingCategory, \\"HostCache::Set\\")"];
"1000140" -> "1000197"  [label="DDG: delta"];
"1000140" -> "1000197"  [label="DDG: is_stale ? SET_UPDATE_STALE : SET_UPDATE_VALID"];
"1000140" -> "1000197"  [label="DDG: RecordSet(is_stale ? SET_UPDATE_STALE : SET_UPDATE_VALID, now, &it->second,\n              entry, delta)"];
"1000140" -> "1000197"  [label="DDG: &it->second"];
"1000104" -> "1000197"  [label="DDG: ttl"];
"1000159" -> "1000197"  [label="DDG: it->second.error()"];
"1000159" -> "1000197"  [label="DDG: entry.error()"];
"1000137" -> "1000197"  [label="DDG: entry.addresses()"];
"1000137" -> "1000197"  [label="DDG: it->second.addresses()"];
"1000165" -> "1000197"  [label="DDG: it"];
"1000165" -> "1000197"  [label="DDG: entries_.erase(it)"];
"1000154" -> "1000197"  [label="DDG: entry.error() == OK"];
"1000154" -> "1000197"  [label="DDG: it->second.error() != entry.error() || delta != DELTA_IDENTICAL"];
"1000103" -> "1000197"  [label="DDG: now"];
"1000119" -> "1000197"  [label="DDG: entries_.find(key)"];
"1000102" -> "1000197"  [label="DDG: entry"];
"1000112" -> "1000197"  [label="DDG: caching_is_disabled()"];
"1000101" -> "1000197"  [label="DDG: key"];
"1000109" -> "1000197"  [label="DDG: thread_checker_"];
"1000109" -> "1000197"  [label="DDG: DCHECK_CALLED_ON_VALID_THREAD(thread_checker_)"];
"1000173" -> "1000197"  [label="DDG: size() == max_entries_"];
"1000173" -> "1000197"  [label="DDG: size()"];
"1000173" -> "1000197"  [label="DDG: max_entries_"];
"1000169" -> "1000197"  [label="DDG: true"];
"1000196" -> "1000197"  [label="DDG: delegate_->ScheduleWrite()"];
"1000135" -> "1000197"  [label="DDG: FindAddressListDeltaType(it->second.addresses(), entry.addresses())"];
"1000129" -> "1000197"  [label="DDG: it->second.IsStale(now, network_changes_)"];
"1000113" -> "1000197"  [label="DDG: <RET>"];
"1000101" -> "1000100"  [label="AST: "];
"1000101" -> "1000197"  [label="DDG: key"];
"1000101" -> "1000121"  [label="DDG: key"];
"1000101" -> "1000185"  [label="DDG: key"];
"1000328" -> "1000100"  [label="AST: "];
"1000117" -> "1000115"  [label="AST: "];
"1000117" -> "1000116"  [label="CFG: "];
"1000115" -> "1000117"  [label="CFG: "];
"1000115" -> "1000105"  [label="AST: "];
"1000115" -> "1000117"  [label="CFG: "];
"1000116" -> "1000115"  [label="AST: "];
"1000117" -> "1000115"  [label="AST: "];
"1000120" -> "1000115"  [label="CFG: "];
"1000115" -> "1000197"  [label="DDG: false"];
"1000116" -> "1000115"  [label="AST: "];
"1000116" -> "1000112"  [label="CFG: "];
"1000117" -> "1000116"  [label="CFG: "];
"1000121" -> "1000119"  [label="AST: "];
"1000121" -> "1000122"  [label="CFG: "];
"1000122" -> "1000121"  [label="AST: "];
"1000119" -> "1000121"  [label="CFG: "];
"1000121" -> "1000119"  [label="DDG: key"];
"1000101" -> "1000121"  [label="DDG: key"];
"1000121" -> "1000185"  [label="DDG: key"];
"1000122" -> "1000121"  [label="AST: "];
"1000122" -> "1000120"  [label="CFG: "];
"1000121" -> "1000122"  [label="CFG: "];
"1000119" -> "1000105"  [label="AST: "];
"1000119" -> "1000121"  [label="CFG: "];
"1000120" -> "1000119"  [label="AST: "];
"1000121" -> "1000119"  [label="AST: "];
"1000125" -> "1000119"  [label="CFG: "];
"1000119" -> "1000197"  [label="DDG: entries_.find(key)"];
"1000121" -> "1000119"  [label="DDG: key"];
"1000119" -> "1000124"  [label="DDG: it"];
"1000120" -> "1000119"  [label="AST: "];
"1000120" -> "1000115"  [label="CFG: "];
"1000122" -> "1000120"  [label="CFG: "];
"1000126" -> "1000124"  [label="AST: "];
"1000126" -> "1000125"  [label="CFG: "];
"1000124" -> "1000126"  [label="CFG: "];
"1000123" -> "1000105"  [label="AST: "];
"1000124" -> "1000123"  [label="AST: "];
"1000127" -> "1000123"  [label="AST: "];
"1000167" -> "1000123"  [label="AST: "];
"1000124" -> "1000123"  [label="AST: "];
"1000124" -> "1000126"  [label="CFG: "];
"1000125" -> "1000124"  [label="AST: "];
"1000126" -> "1000124"  [label="AST: "];
"1000130" -> "1000124"  [label="CFG: "];
"1000170" -> "1000124"  [label="CFG: "];
"1000124" -> "1000197"  [label="DDG: entries_.end()"];
"1000124" -> "1000197"  [label="DDG: it"];
"1000124" -> "1000197"  [label="DDG: it != entries_.end()"];
"1000119" -> "1000124"  [label="DDG: it"];
"1000124" -> "1000165"  [label="DDG: it"];
"1000125" -> "1000124"  [label="AST: "];
"1000125" -> "1000119"  [label="CFG: "];
"1000126" -> "1000125"  [label="CFG: "];
"1000129" -> "1000127"  [label="AST: "];
"1000129" -> "1000131"  [label="CFG: "];
"1000130" -> "1000129"  [label="AST: "];
"1000131" -> "1000129"  [label="AST: "];
"1000136" -> "1000129"  [label="CFG: "];
"1000129" -> "1000197"  [label="DDG: it->second.IsStale(now, network_changes_)"];
"1000131" -> "1000129"  [label="DDG: now"];
"1000131" -> "1000129"  [label="DDG: network_changes_"];
"1000130" -> "1000129"  [label="AST: "];
"1000130" -> "1000124"  [label="CFG: "];
"1000132" -> "1000130"  [label="CFG: "];
"1000131" -> "1000129"  [label="AST: "];
"1000131" -> "1000133"  [label="CFG: "];
"1000132" -> "1000131"  [label="AST: "];
"1000133" -> "1000131"  [label="AST: "];
"1000129" -> "1000131"  [label="CFG: "];
"1000131" -> "1000129"  [label="DDG: now"];
"1000131" -> "1000129"  [label="DDG: network_changes_"];
"1000103" -> "1000131"  [label="DDG: now"];
"1000131" -> "1000140"  [label="DDG: now"];
"1000131" -> "1000187"  [label="DDG: network_changes_"];
"1000132" -> "1000131"  [label="AST: "];
"1000132" -> "1000130"  [label="CFG: "];
"1000133" -> "1000132"  [label="CFG: "];
"1000133" -> "1000131"  [label="AST: "];
"1000133" -> "1000132"  [label="CFG: "];
"1000131" -> "1000133"  [label="CFG: "];
"1000135" -> "1000127"  [label="AST: "];
"1000135" -> "1000137"  [label="CFG: "];
"1000136" -> "1000135"  [label="AST: "];
"1000137" -> "1000135"  [label="AST: "];
"1000142" -> "1000135"  [label="CFG: "];
"1000135" -> "1000197"  [label="DDG: FindAddressListDeltaType(it->second.addresses(), entry.addresses())"];
"1000137" -> "1000135"  [label="DDG: it->second.addresses()"];
"1000137" -> "1000135"  [label="DDG: entry.addresses()"];
"1000135" -> "1000140"  [label="DDG: delta"];
"1000136" -> "1000135"  [label="AST: "];
"1000136" -> "1000129"  [label="CFG: "];
"1000138" -> "1000136"  [label="CFG: "];
"1000127" -> "1000123"  [label="AST: "];
"1000128" -> "1000127"  [label="AST: "];
"1000129" -> "1000127"  [label="AST: "];
"1000134" -> "1000127"  [label="AST: "];
"1000135" -> "1000127"  [label="AST: "];
"1000140" -> "1000127"  [label="AST: "];
"1000152" -> "1000127"  [label="AST: "];
"1000165" -> "1000127"  [label="AST: "];
"1000138" -> "1000137"  [label="AST: "];
"1000138" -> "1000136"  [label="CFG: "];
"1000139" -> "1000138"  [label="CFG: "];
"1000139" -> "1000137"  [label="AST: "];
"1000139" -> "1000138"  [label="CFG: "];
"1000137" -> "1000139"  [label="CFG: "];
"1000137" -> "1000135"  [label="AST: "];
"1000137" -> "1000139"  [label="CFG: "];
"1000138" -> "1000137"  [label="AST: "];
"1000139" -> "1000137"  [label="AST: "];
"1000135" -> "1000137"  [label="CFG: "];
"1000137" -> "1000197"  [label="DDG: entry.addresses()"];
"1000137" -> "1000197"  [label="DDG: it->second.addresses()"];
"1000137" -> "1000135"  [label="DDG: it->second.addresses()"];
"1000137" -> "1000135"  [label="DDG: entry.addresses()"];
"1000141" -> "1000140"  [label="AST: "];
"1000141" -> "1000143"  [label="CFG: "];
"1000141" -> "1000144"  [label="CFG: "];
"1000142" -> "1000141"  [label="AST: "];
"1000143" -> "1000141"  [label="AST: "];
"1000144" -> "1000141"  [label="AST: "];
"1000145" -> "1000141"  [label="CFG: "];
"1000141" -> "1000197"  [label="DDG: is_stale"];
"1000141" -> "1000197"  [label="DDG: SET_UPDATE_VALID"];
"1000141" -> "1000197"  [label="DDG: SET_UPDATE_STALE"];
"1000142" -> "1000141"  [label="AST: "];
"1000142" -> "1000135"  [label="CFG: "];
"1000143" -> "1000142"  [label="CFG: "];
"1000144" -> "1000142"  [label="CFG: "];
"1000143" -> "1000141"  [label="AST: "];
"1000143" -> "1000142"  [label="CFG: "];
"1000141" -> "1000143"  [label="CFG: "];
"1000144" -> "1000141"  [label="AST: "];
"1000144" -> "1000142"  [label="CFG: "];
"1000141" -> "1000144"  [label="CFG: "];
"1000140" -> "1000127"  [label="AST: "];
"1000140" -> "1000151"  [label="CFG: "];
"1000141" -> "1000140"  [label="AST: "];
"1000145" -> "1000140"  [label="AST: "];
"1000146" -> "1000140"  [label="AST: "];
"1000150" -> "1000140"  [label="AST: "];
"1000151" -> "1000140"  [label="AST: "];
"1000153" -> "1000140"  [label="CFG: "];
"1000140" -> "1000197"  [label="DDG: delta"];
"1000140" -> "1000197"  [label="DDG: is_stale ? SET_UPDATE_STALE : SET_UPDATE_VALID"];
"1000140" -> "1000197"  [label="DDG: RecordSet(is_stale ? SET_UPDATE_STALE : SET_UPDATE_VALID, now, &it->second,\n              entry, delta)"];
"1000140" -> "1000197"  [label="DDG: &it->second"];
"1000131" -> "1000140"  [label="DDG: now"];
"1000103" -> "1000140"  [label="DDG: now"];
"1000102" -> "1000140"  [label="DDG: entry"];
"1000135" -> "1000140"  [label="DDG: delta"];
"1000140" -> "1000162"  [label="DDG: delta"];
"1000140" -> "1000187"  [label="DDG: entry"];
"1000140" -> "1000187"  [label="DDG: now"];
"1000145" -> "1000140"  [label="AST: "];
"1000145" -> "1000141"  [label="CFG: "];
"1000148" -> "1000145"  [label="CFG: "];
"1000146" -> "1000140"  [label="AST: "];
"1000146" -> "1000147"  [label="CFG: "];
"1000147" -> "1000146"  [label="AST: "];
"1000150" -> "1000146"  [label="CFG: "];
"1000147" -> "1000146"  [label="AST: "];
"1000147" -> "1000149"  [label="CFG: "];
"1000148" -> "1000147"  [label="AST: "];
"1000149" -> "1000147"  [label="AST: "];
"1000146" -> "1000147"  [label="CFG: "];
"1000148" -> "1000147"  [label="AST: "];
"1000148" -> "1000145"  [label="CFG: "];
"1000149" -> "1000148"  [label="CFG: "];
"1000149" -> "1000147"  [label="AST: "];
"1000149" -> "1000148"  [label="CFG: "];
"1000147" -> "1000149"  [label="CFG: "];
"1000150" -> "1000140"  [label="AST: "];
"1000150" -> "1000146"  [label="CFG: "];
"1000151" -> "1000150"  [label="CFG: "];
"1000151" -> "1000140"  [label="AST: "];
"1000151" -> "1000150"  [label="CFG: "];
"1000140" -> "1000151"  [label="CFG: "];
"1000152" -> "1000127"  [label="AST: "];
"1000152" -> "1000154"  [label="CFG: "];
"1000153" -> "1000152"  [label="AST: "];
"1000154" -> "1000152"  [label="AST: "];
"1000166" -> "1000152"  [label="CFG: "];
"1000152" -> "1000197"  [label="DDG: entry.error() == OK &&\n        (it->second.error() != entry.error() || delta != DELTA_IDENTICAL)"];
"1000154" -> "1000152"  [label="DDG: entry.error() == OK"];
"1000154" -> "1000152"  [label="DDG: it->second.error() != entry.error() || delta != DELTA_IDENTICAL"];
"1000152" -> "1000193"  [label="DDG: result_changed"];
"1000153" -> "1000152"  [label="AST: "];
"1000153" -> "1000140"  [label="CFG: "];
"1000156" -> "1000153"  [label="CFG: "];
"1000157" -> "1000155"  [label="AST: "];
"1000157" -> "1000156"  [label="CFG: "];
"1000155" -> "1000157"  [label="CFG: "];
"1000154" -> "1000152"  [label="AST: "];
"1000154" -> "1000155"  [label="CFG: "];
"1000154" -> "1000158"  [label="CFG: "];
"1000155" -> "1000154"  [label="AST: "];
"1000158" -> "1000154"  [label="AST: "];
"1000152" -> "1000154"  [label="CFG: "];
"1000154" -> "1000197"  [label="DDG: entry.error() == OK"];
"1000154" -> "1000197"  [label="DDG: it->second.error() != entry.error() || delta != DELTA_IDENTICAL"];
"1000154" -> "1000152"  [label="DDG: entry.error() == OK"];
"1000154" -> "1000152"  [label="DDG: it->second.error() != entry.error() || delta != DELTA_IDENTICAL"];
"1000155" -> "1000154"  [label="DDG: entry.error()"];
"1000155" -> "1000154"  [label="DDG: OK"];
"1000158" -> "1000154"  [label="DDG: it->second.error() != entry.error()"];
"1000158" -> "1000154"  [label="DDG: delta != DELTA_IDENTICAL"];
"1000155" -> "1000154"  [label="AST: "];
"1000155" -> "1000157"  [label="CFG: "];
"1000156" -> "1000155"  [label="AST: "];
"1000157" -> "1000155"  [label="AST: "];
"1000160" -> "1000155"  [label="CFG: "];
"1000154" -> "1000155"  [label="CFG: "];
"1000155" -> "1000197"  [label="DDG: OK"];
"1000155" -> "1000197"  [label="DDG: entry.error()"];
"1000155" -> "1000154"  [label="DDG: entry.error()"];
"1000155" -> "1000154"  [label="DDG: OK"];
"1000156" -> "1000155"  [label="AST: "];
"1000156" -> "1000153"  [label="CFG: "];
"1000157" -> "1000156"  [label="CFG: "];
"1000102" -> "1000100"  [label="AST: "];
"1000102" -> "1000197"  [label="DDG: entry"];
"1000102" -> "1000140"  [label="DDG: entry"];
"1000102" -> "1000178"  [label="DDG: entry"];
"1000102" -> "1000187"  [label="DDG: entry"];
"1000329" -> "1000100"  [label="AST: "];
"1000161" -> "1000159"  [label="AST: "];
"1000161" -> "1000160"  [label="CFG: "];
"1000159" -> "1000161"  [label="CFG: "];
"1000162" -> "1000158"  [label="AST: "];
"1000162" -> "1000164"  [label="CFG: "];
"1000163" -> "1000162"  [label="AST: "];
"1000164" -> "1000162"  [label="AST: "];
"1000158" -> "1000162"  [label="CFG: "];
"1000162" -> "1000197"  [label="DDG: DELTA_IDENTICAL"];
"1000162" -> "1000197"  [label="DDG: delta"];
"1000162" -> "1000158"  [label="DDG: delta"];
"1000162" -> "1000158"  [label="DDG: DELTA_IDENTICAL"];
"1000140" -> "1000162"  [label="DDG: delta"];
"1000163" -> "1000162"  [label="AST: "];
"1000163" -> "1000159"  [label="CFG: "];
"1000164" -> "1000163"  [label="CFG: "];
"1000164" -> "1000162"  [label="AST: "];
"1000164" -> "1000163"  [label="CFG: "];
"1000162" -> "1000164"  [label="CFG: "];
"1000158" -> "1000154"  [label="AST: "];
"1000158" -> "1000159"  [label="CFG: "];
"1000158" -> "1000162"  [label="CFG: "];
"1000159" -> "1000158"  [label="AST: "];
"1000162" -> "1000158"  [label="AST: "];
"1000154" -> "1000158"  [label="CFG: "];
"1000158" -> "1000197"  [label="DDG: it->second.error() != entry.error()"];
"1000158" -> "1000197"  [label="DDG: delta != DELTA_IDENTICAL"];
"1000158" -> "1000154"  [label="DDG: it->second.error() != entry.error()"];
"1000158" -> "1000154"  [label="DDG: delta != DELTA_IDENTICAL"];
"1000159" -> "1000158"  [label="DDG: it->second.error()"];
"1000159" -> "1000158"  [label="DDG: entry.error()"];
"1000162" -> "1000158"  [label="DDG: delta"];
"1000162" -> "1000158"  [label="DDG: DELTA_IDENTICAL"];
"1000159" -> "1000158"  [label="AST: "];
"1000159" -> "1000161"  [label="CFG: "];
"1000160" -> "1000159"  [label="AST: "];
"1000161" -> "1000159"  [label="AST: "];
"1000163" -> "1000159"  [label="CFG: "];
"1000158" -> "1000159"  [label="CFG: "];
"1000159" -> "1000197"  [label="DDG: it->second.error()"];
"1000159" -> "1000197"  [label="DDG: entry.error()"];
"1000159" -> "1000158"  [label="DDG: it->second.error()"];
"1000159" -> "1000158"  [label="DDG: entry.error()"];
"1000160" -> "1000159"  [label="AST: "];
"1000160" -> "1000155"  [label="CFG: "];
"1000161" -> "1000160"  [label="CFG: "];
"1000166" -> "1000165"  [label="AST: "];
"1000166" -> "1000152"  [label="CFG: "];
"1000165" -> "1000166"  [label="CFG: "];
"1000165" -> "1000127"  [label="AST: "];
"1000165" -> "1000166"  [label="CFG: "];
"1000166" -> "1000165"  [label="AST: "];
"1000186" -> "1000165"  [label="CFG: "];
"1000165" -> "1000197"  [label="DDG: it"];
"1000165" -> "1000197"  [label="DDG: entries_.erase(it)"];
"1000124" -> "1000165"  [label="DDG: it"];
"1000168" -> "1000167"  [label="AST: "];
"1000169" -> "1000168"  [label="AST: "];
"1000172" -> "1000168"  [label="AST: "];
"1000178" -> "1000168"  [label="AST: "];
"1000167" -> "1000123"  [label="AST: "];
"1000168" -> "1000167"  [label="AST: "];
"1000171" -> "1000169"  [label="AST: "];
"1000171" -> "1000170"  [label="CFG: "];
"1000169" -> "1000171"  [label="CFG: "];
"1000169" -> "1000168"  [label="AST: "];
"1000169" -> "1000171"  [label="CFG: "];
"1000170" -> "1000169"  [label="AST: "];
"1000171" -> "1000169"  [label="AST: "];
"1000174" -> "1000169"  [label="CFG: "];
"1000169" -> "1000197"  [label="DDG: true"];
"1000169" -> "1000193"  [label="DDG: result_changed"];
"1000170" -> "1000169"  [label="AST: "];
"1000170" -> "1000124"  [label="CFG: "];
"1000171" -> "1000170"  [label="CFG: "];
"1000175" -> "1000173"  [label="AST: "];
"1000175" -> "1000174"  [label="CFG: "];
"1000173" -> "1000175"  [label="CFG: "];
"1000172" -> "1000168"  [label="AST: "];
"1000173" -> "1000172"  [label="AST: "];
"1000176" -> "1000172"  [label="AST: "];
"1000173" -> "1000172"  [label="AST: "];
"1000173" -> "1000175"  [label="CFG: "];
"1000174" -> "1000173"  [label="AST: "];
"1000175" -> "1000173"  [label="AST: "];
"1000177" -> "1000173"  [label="CFG: "];
"1000179" -> "1000173"  [label="CFG: "];
"1000173" -> "1000197"  [label="DDG: size() == max_entries_"];
"1000173" -> "1000197"  [label="DDG: size()"];
"1000173" -> "1000197"  [label="DDG: max_entries_"];
"1000174" -> "1000173"  [label="AST: "];
"1000174" -> "1000169"  [label="CFG: "];
"1000175" -> "1000174"  [label="CFG: "];
"1000177" -> "1000176"  [label="AST: "];
"1000177" -> "1000173"  [label="CFG: "];
"1000176" -> "1000177"  [label="CFG: "];
"1000176" -> "1000172"  [label="AST: "];
"1000176" -> "1000177"  [label="CFG: "];
"1000177" -> "1000176"  [label="AST: "];
"1000179" -> "1000176"  [label="CFG: "];
"1000176" -> "1000197"  [label="DDG: EvictOneEntry(now)"];
"1000103" -> "1000176"  [label="DDG: now"];
"1000176" -> "1000178"  [label="DDG: now"];
"1000179" -> "1000178"  [label="AST: "];
"1000179" -> "1000176"  [label="CFG: "];
"1000179" -> "1000173"  [label="CFG: "];
"1000180" -> "1000179"  [label="CFG: "];
"1000180" -> "1000178"  [label="AST: "];
"1000180" -> "1000179"  [label="CFG: "];
"1000181" -> "1000180"  [label="CFG: "];
"1000181" -> "1000178"  [label="AST: "];
"1000181" -> "1000180"  [label="CFG: "];
"1000182" -> "1000181"  [label="CFG: "];
"1000178" -> "1000168"  [label="AST: "];
"1000178" -> "1000183"  [label="CFG: "];
"1000179" -> "1000178"  [label="AST: "];
"1000180" -> "1000178"  [label="AST: "];
"1000181" -> "1000178"  [label="AST: "];
"1000182" -> "1000178"  [label="AST: "];
"1000183" -> "1000178"  [label="AST: "];
"1000186" -> "1000178"  [label="CFG: "];
"1000178" -> "1000197"  [label="DDG: nullptr"];
"1000178" -> "1000197"  [label="DDG: RecordSet(SET_INSERT, now, nullptr, entry, DELTA_DISJOINT)"];
"1000178" -> "1000197"  [label="DDG: SET_INSERT"];
"1000178" -> "1000197"  [label="DDG: DELTA_DISJOINT"];
"1000176" -> "1000178"  [label="DDG: now"];
"1000103" -> "1000178"  [label="DDG: now"];
"1000102" -> "1000178"  [label="DDG: entry"];
"1000178" -> "1000187"  [label="DDG: entry"];
"1000178" -> "1000187"  [label="DDG: now"];
"1000182" -> "1000178"  [label="AST: "];
"1000182" -> "1000181"  [label="CFG: "];
"1000183" -> "1000182"  [label="CFG: "];
"1000183" -> "1000178"  [label="AST: "];
"1000183" -> "1000182"  [label="CFG: "];
"1000178" -> "1000183"  [label="CFG: "];
"1000185" -> "1000184"  [label="AST: "];
"1000185" -> "1000186"  [label="CFG: "];
"1000186" -> "1000185"  [label="AST: "];
"1000188" -> "1000185"  [label="CFG: "];
"1000185" -> "1000197"  [label="DDG: key"];
"1000185" -> "1000184"  [label="DDG: key"];
"1000121" -> "1000185"  [label="DDG: key"];
"1000101" -> "1000185"  [label="DDG: key"];
"1000186" -> "1000185"  [label="AST: "];
"1000186" -> "1000165"  [label="CFG: "];
"1000186" -> "1000178"  [label="CFG: "];
"1000185" -> "1000186"  [label="CFG: "];
"1000187" -> "1000184"  [label="AST: "];
"1000187" -> "1000191"  [label="CFG: "];
"1000188" -> "1000187"  [label="AST: "];
"1000189" -> "1000187"  [label="AST: "];
"1000190" -> "1000187"  [label="AST: "];
"1000191" -> "1000187"  [label="AST: "];
"1000184" -> "1000187"  [label="CFG: "];
"1000187" -> "1000197"  [label="DDG: entry"];
"1000187" -> "1000197"  [label="DDG: ttl"];
"1000187" -> "1000197"  [label="DDG: now"];
"1000187" -> "1000197"  [label="DDG: network_changes_"];
"1000187" -> "1000184"  [label="DDG: entry"];
"1000187" -> "1000184"  [label="DDG: now"];
"1000187" -> "1000184"  [label="DDG: ttl"];
"1000187" -> "1000184"  [label="DDG: network_changes_"];
"1000178" -> "1000187"  [label="DDG: entry"];
"1000178" -> "1000187"  [label="DDG: now"];
"1000140" -> "1000187"  [label="DDG: entry"];
"1000140" -> "1000187"  [label="DDG: now"];
"1000102" -> "1000187"  [label="DDG: entry"];
"1000103" -> "1000187"  [label="DDG: now"];
"1000104" -> "1000187"  [label="DDG: ttl"];
"1000131" -> "1000187"  [label="DDG: network_changes_"];
"1000188" -> "1000187"  [label="AST: "];
"1000188" -> "1000185"  [label="CFG: "];
"1000189" -> "1000188"  [label="CFG: "];
"1000184" -> "1000105"  [label="AST: "];
"1000184" -> "1000187"  [label="CFG: "];
"1000185" -> "1000184"  [label="AST: "];
"1000187" -> "1000184"  [label="AST: "];
"1000194" -> "1000184"  [label="CFG: "];
"1000184" -> "1000197"  [label="DDG: Key(key)"];
"1000184" -> "1000197"  [label="DDG: Entry(entry, now, ttl, network_changes_)"];
"1000184" -> "1000197"  [label="DDG: AddEntry(Key(key), Entry(entry, now, ttl, network_changes_))"];
"1000185" -> "1000184"  [label="DDG: key"];
"1000187" -> "1000184"  [label="DDG: entry"];
"1000187" -> "1000184"  [label="DDG: now"];
"1000187" -> "1000184"  [label="DDG: ttl"];
"1000187" -> "1000184"  [label="DDG: network_changes_"];
"1000189" -> "1000187"  [label="AST: "];
"1000189" -> "1000188"  [label="CFG: "];
"1000190" -> "1000189"  [label="CFG: "];
"1000190" -> "1000187"  [label="AST: "];
"1000190" -> "1000189"  [label="CFG: "];
"1000191" -> "1000190"  [label="CFG: "];
"1000191" -> "1000187"  [label="AST: "];
"1000191" -> "1000190"  [label="CFG: "];
"1000187" -> "1000191"  [label="CFG: "];
"1000103" -> "1000100"  [label="AST: "];
"1000103" -> "1000197"  [label="DDG: now"];
"1000103" -> "1000131"  [label="DDG: now"];
"1000103" -> "1000140"  [label="DDG: now"];
"1000103" -> "1000176"  [label="DDG: now"];
"1000103" -> "1000178"  [label="DDG: now"];
"1000103" -> "1000187"  [label="DDG: now"];
"1000330" -> "1000100"  [label="AST: "];
"1000195" -> "1000193"  [label="AST: "];
"1000195" -> "1000194"  [label="CFG: "];
"1000193" -> "1000195"  [label="CFG: "];
"1000192" -> "1000105"  [label="AST: "];
"1000193" -> "1000192"  [label="AST: "];
"1000196" -> "1000192"  [label="AST: "];
"1000193" -> "1000192"  [label="AST: "];
"1000193" -> "1000194"  [label="CFG: "];
"1000193" -> "1000195"  [label="CFG: "];
"1000194" -> "1000193"  [label="AST: "];
"1000195" -> "1000193"  [label="AST: "];
"1000196" -> "1000193"  [label="CFG: "];
"1000197" -> "1000193"  [label="CFG: "];
"1000193" -> "1000197"  [label="DDG: delegate_"];
"1000193" -> "1000197"  [label="DDG: result_changed"];
"1000193" -> "1000197"  [label="DDG: delegate_ && result_changed"];
"1000152" -> "1000193"  [label="DDG: result_changed"];
"1000169" -> "1000193"  [label="DDG: result_changed"];
"1000194" -> "1000193"  [label="AST: "];
"1000194" -> "1000184"  [label="CFG: "];
"1000195" -> "1000194"  [label="CFG: "];
"1000193" -> "1000194"  [label="CFG: "];
"1000196" -> "1000192"  [label="AST: "];
"1000196" -> "1000193"  [label="CFG: "];
"1000197" -> "1000196"  [label="CFG: "];
"1000196" -> "1000197"  [label="DDG: delegate_->ScheduleWrite()"];
"1000104" -> "1000100"  [label="AST: "];
"1000104" -> "1000197"  [label="DDG: ttl"];
"1000104" -> "1000187"  [label="DDG: ttl"];
"1000331" -> "1000100"  [label="AST: "];
"1000105" -> "1000100"  [label="AST: "];
"1000106" -> "1000105"  [label="AST: "];
"1000109" -> "1000105"  [label="AST: "];
"1000111" -> "1000105"  [label="AST: "];
"1000114" -> "1000105"  [label="AST: "];
"1000115" -> "1000105"  [label="AST: "];
"1000118" -> "1000105"  [label="AST: "];
"1000119" -> "1000105"  [label="AST: "];
"1000123" -> "1000105"  [label="AST: "];
"1000184" -> "1000105"  [label="AST: "];
"1000192" -> "1000105"  [label="AST: "];
"1000107" -> "1000106"  [label="AST: "];
"1000107" -> "1000100"  [label="CFG: "];
"1000108" -> "1000107"  [label="CFG: "];
"1000106" -> "1000105"  [label="AST: "];
"1000106" -> "1000108"  [label="CFG: "];
"1000107" -> "1000106"  [label="AST: "];
"1000108" -> "1000106"  [label="AST: "];
"1000110" -> "1000106"  [label="CFG: "];
"1000106" -> "1000197"  [label="DDG: kNetTracingCategory"];
"1000106" -> "1000197"  [label="DDG: TRACE_EVENT0(kNetTracingCategory, \\"HostCache::Set\\")"];
"1000108" -> "1000106"  [label="AST: "];
"1000108" -> "1000107"  [label="CFG: "];
"1000106" -> "1000108"  [label="CFG: "];
"1000109" -> "1000105"  [label="AST: "];
"1000109" -> "1000110"  [label="CFG: "];
"1000110" -> "1000109"  [label="AST: "];
"1000112" -> "1000109"  [label="CFG: "];
"1000109" -> "1000197"  [label="DDG: thread_checker_"];
"1000109" -> "1000197"  [label="DDG: DCHECK_CALLED_ON_VALID_THREAD(thread_checker_)"];
"1000110" -> "1000109"  [label="AST: "];
"1000110" -> "1000106"  [label="CFG: "];
"1000109" -> "1000110"  [label="CFG: "];
"1000111" -> "1000105"  [label="AST: "];
"1000112" -> "1000111"  [label="AST: "];
"1000113" -> "1000111"  [label="AST: "];
"1000112" -> "1000111"  [label="AST: "];
"1000112" -> "1000109"  [label="CFG: "];
"1000113" -> "1000112"  [label="CFG: "];
"1000116" -> "1000112"  [label="CFG: "];
"1000112" -> "1000197"  [label="DDG: caching_is_disabled()"];
"1000113" -> "1000111"  [label="AST: "];
"1000113" -> "1000112"  [label="CFG: "];
"1000197" -> "1000113"  [label="CFG: "];
"1000113" -> "1000197"  [label="DDG: <RET>"];
}
