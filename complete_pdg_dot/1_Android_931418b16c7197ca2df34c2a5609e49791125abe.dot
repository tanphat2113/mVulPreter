digraph "1_Android_931418b16c7197ca2df34c2a5609e49791125abe" {
"1000194" [label="(MethodReturn,netdutils::Status)"];
"1000101" [label="(MethodParameterIn,const android::base::unique_fd& socket)"];
"1000281" [label="(MethodParameterOut,const android::base::unique_fd& socket)"];
"1000124" [label="(ControlStructure,if (info.st_uid != callerUid))"];
"1000128" [label="(FieldIdentifier,st_uid)"];
"1000129" [label="(Identifier,callerUid)"];
"1000130" [label="(Block,)"];
"1000125" [label="(Call,info.st_uid != callerUid)"];
"1000126" [label="(Call,info.st_uid)"];
"1000127" [label="(Identifier,info)"];
"1000131" [label="(Return,return netdutils::statusFromErrno(EPERM, \"fchown disabled for non-owner calls\");)"];
"1000133" [label="(Identifier,EPERM)"];
"1000134" [label="(Literal,\"fchown disabled for non-owner calls\")"];
"1000132" [label="(Call,netdutils::statusFromErrno(EPERM, \"fchown disabled for non-owner calls\"))"];
"1000135" [label="(ControlStructure,if (S_ISSOCK(info.st_mode) == 0))"];
"1000138" [label="(Call,info.st_mode)"];
"1000139" [label="(Identifier,info)"];
"1000140" [label="(FieldIdentifier,st_mode)"];
"1000141" [label="(Literal,0)"];
"1000142" [label="(Block,)"];
"1000136" [label="(Call,S_ISSOCK(info.st_mode) == 0)"];
"1000137" [label="(Call,S_ISSOCK(info.st_mode))"];
"1000143" [label="(Return,return netdutils::statusFromErrno(EINVAL, \"File descriptor was not a socket\");)"];
"1000145" [label="(Identifier,EINVAL)"];
"1000146" [label="(Literal,\"File descriptor was not a socket\")"];
"1000144" [label="(Call,netdutils::statusFromErrno(EINVAL, \"File descriptor was not a socket\"))"];
"1000102" [label="(MethodParameterIn,int newUid)"];
"1000282" [label="(MethodParameterOut,int newUid)"];
"1000103" [label="(MethodParameterIn,uid_t callerUid)"];
"1000283" [label="(MethodParameterOut,uid_t callerUid)"];
"1000104" [label="(Block,)"];
"1000150" [label="(Call,status =\n         getSyscallInstance().getsockopt(Fd(socket), IPPROTO_UDP, UDP_ENCAP, &optval, &optlen))"];
"1000151" [label="(Identifier,status)"];
"1000153" [label="(Call,Fd(socket))"];
"1000154" [label="(Identifier,socket)"];
"1000155" [label="(Identifier,IPPROTO_UDP)"];
"1000156" [label="(Identifier,UDP_ENCAP)"];
"1000157" [label="(Call,&optval)"];
"1000158" [label="(Identifier,optval)"];
"1000159" [label="(Call,&optlen)"];
"1000160" [label="(Identifier,optlen)"];
"1000152" [label="(Call,getSyscallInstance().getsockopt(Fd(socket), IPPROTO_UDP, UDP_ENCAP, &optval, &optlen))"];
"1000164" [label="(Identifier,netdutils::status::ok)"];
"1000165" [label="(Block,)"];
"1000161" [label="(ControlStructure,if (status != netdutils::status::ok))"];
"1000162" [label="(Call,status != netdutils::status::ok)"];
"1000163" [label="(Identifier,status)"];
"1000166" [label="(Return,return status;)"];
"1000167" [label="(Identifier,status)"];
"1000168" [label="(ControlStructure,if (optval != UDP_ENCAP_ESPINUDP && optval != UDP_ENCAP_ESPINUDP_NON_IKE))"];
"1000172" [label="(Identifier,UDP_ENCAP_ESPINUDP)"];
"1000173" [label="(Call,optval != UDP_ENCAP_ESPINUDP_NON_IKE)"];
"1000174" [label="(Identifier,optval)"];
"1000175" [label="(Identifier,UDP_ENCAP_ESPINUDP_NON_IKE)"];
"1000169" [label="(Call,optval != UDP_ENCAP_ESPINUDP && optval != UDP_ENCAP_ESPINUDP_NON_IKE)"];
"1000170" [label="(Call,optval != UDP_ENCAP_ESPINUDP)"];
"1000171" [label="(Identifier,optval)"];
"1000176" [label="(Block,)"];
"1000177" [label="(Return,return netdutils::statusFromErrno(EINVAL, \"Socket did not have UDP-encap sockopt set\");)"];
"1000179" [label="(Identifier,EINVAL)"];
"1000180" [label="(Literal,\"Socket did not have UDP-encap sockopt set\")"];
"1000178" [label="(Call,netdutils::statusFromErrno(EINVAL, \"Socket did not have UDP-encap sockopt set\"))"];
"1000181" [label="(ControlStructure,if (fchown(fd, newUid, -1)))"];
"1000183" [label="(Identifier,fd)"];
"1000184" [label="(Identifier,newUid)"];
"1000185" [label="(Call,-1)"];
"1000186" [label="(Literal,1)"];
"1000187" [label="(Block,)"];
"1000182" [label="(Call,fchown(fd, newUid, -1))"];
"1000188" [label="(Return,return netdutils::statusFromErrno(errno, \"Failed to fchown socket file descriptor\");)"];
"1000190" [label="(Identifier,errno)"];
"1000191" [label="(Literal,\"Failed to fchown socket file descriptor\")"];
"1000189" [label="(Call,netdutils::statusFromErrno(errno, \"Failed to fchown socket file descriptor\"))"];
"1000106" [label="(Literal,\"XfrmController:%s, line=%d\")"];
"1000105" [label="(Call,ALOGD(\"XfrmController:%s, line=%d\", __FUNCTION__, __LINE__))"];
"1000107" [label="(Identifier,__FUNCTION__)"];
"1000108" [label="(Identifier,__LINE__)"];
"1000192" [label="(Return,return netdutils::status::ok;)"];
"1000193" [label="(Identifier,netdutils::status::ok)"];
"1000110" [label="(Call,fd = socket.get())"];
"1000111" [label="(Identifier,fd)"];
"1000112" [label="(Call,socket.get())"];
"1000114" [label="(ControlStructure,if (fstat(fd, &info)))"];
"1000116" [label="(Identifier,fd)"];
"1000117" [label="(Call,&info)"];
"1000118" [label="(Identifier,info)"];
"1000119" [label="(Block,)"];
"1000115" [label="(Call,fstat(fd, &info))"];
"1000120" [label="(Return,return netdutils::statusFromErrno(errno, \"Failed to stat socket file descriptor\");)"];
"1000122" [label="(Identifier,errno)"];
"1000123" [label="(Literal,\"Failed to stat socket file descriptor\")"];
"1000121" [label="(Call,netdutils::statusFromErrno(errno, \"Failed to stat socket file descriptor\"))"];
"1000194" -> "1000100"  [label="AST: "];
"1000194" -> "1000120"  [label="CFG: "];
"1000194" -> "1000131"  [label="CFG: "];
"1000194" -> "1000143"  [label="CFG: "];
"1000194" -> "1000166"  [label="CFG: "];
"1000194" -> "1000177"  [label="CFG: "];
"1000194" -> "1000188"  [label="CFG: "];
"1000194" -> "1000192"  [label="CFG: "];
"1000188" -> "1000194"  [label="DDG: <RET>"];
"1000120" -> "1000194"  [label="DDG: <RET>"];
"1000170" -> "1000194"  [label="DDG: UDP_ENCAP_ESPINUDP"];
"1000170" -> "1000194"  [label="DDG: optval"];
"1000125" -> "1000194"  [label="DDG: info.st_uid != callerUid"];
"1000125" -> "1000194"  [label="DDG: info.st_uid"];
"1000125" -> "1000194"  [label="DDG: callerUid"];
"1000105" -> "1000194"  [label="DDG: __LINE__"];
"1000105" -> "1000194"  [label="DDG: __FUNCTION__"];
"1000105" -> "1000194"  [label="DDG: ALOGD(\\"XfrmController:%s, line=%d\\", __FUNCTION__, __LINE__)"];
"1000182" -> "1000194"  [label="DDG: -1"];
"1000182" -> "1000194"  [label="DDG: fchown(fd, newUid, -1)"];
"1000182" -> "1000194"  [label="DDG: newUid"];
"1000182" -> "1000194"  [label="DDG: fd"];
"1000152" -> "1000194"  [label="DDG: &optval"];
"1000152" -> "1000194"  [label="DDG: Fd(socket)"];
"1000152" -> "1000194"  [label="DDG: &optlen"];
"1000152" -> "1000194"  [label="DDG: IPPROTO_UDP"];
"1000152" -> "1000194"  [label="DDG: UDP_ENCAP"];
"1000178" -> "1000194"  [label="DDG: EINVAL"];
"1000178" -> "1000194"  [label="DDG: netdutils::statusFromErrno(EINVAL, \\"Socket did not have UDP-encap sockopt set\\")"];
"1000189" -> "1000194"  [label="DDG: netdutils::statusFromErrno(errno, \\"Failed to fchown socket file descriptor\\")"];
"1000189" -> "1000194"  [label="DDG: errno"];
"1000132" -> "1000194"  [label="DDG: netdutils::statusFromErrno(EPERM, \\"fchown disabled for non-owner calls\\")"];
"1000132" -> "1000194"  [label="DDG: EPERM"];
"1000153" -> "1000194"  [label="DDG: socket"];
"1000115" -> "1000194"  [label="DDG: &info"];
"1000115" -> "1000194"  [label="DDG: fstat(fd, &info)"];
"1000115" -> "1000194"  [label="DDG: fd"];
"1000162" -> "1000194"  [label="DDG: netdutils::status::ok"];
"1000162" -> "1000194"  [label="DDG: status"];
"1000162" -> "1000194"  [label="DDG: status != netdutils::status::ok"];
"1000169" -> "1000194"  [label="DDG: optval != UDP_ENCAP_ESPINUDP && optval != UDP_ENCAP_ESPINUDP_NON_IKE"];
"1000169" -> "1000194"  [label="DDG: optval != UDP_ENCAP_ESPINUDP_NON_IKE"];
"1000169" -> "1000194"  [label="DDG: optval != UDP_ENCAP_ESPINUDP"];
"1000150" -> "1000194"  [label="DDG: getSyscallInstance().getsockopt(Fd(socket), IPPROTO_UDP, UDP_ENCAP, &optval, &optlen)"];
"1000103" -> "1000194"  [label="DDG: callerUid"];
"1000144" -> "1000194"  [label="DDG: netdutils::statusFromErrno(EINVAL, \\"File descriptor was not a socket\\")"];
"1000144" -> "1000194"  [label="DDG: EINVAL"];
"1000121" -> "1000194"  [label="DDG: netdutils::statusFromErrno(errno, \\"Failed to stat socket file descriptor\\")"];
"1000121" -> "1000194"  [label="DDG: errno"];
"1000102" -> "1000194"  [label="DDG: newUid"];
"1000110" -> "1000194"  [label="DDG: socket.get()"];
"1000101" -> "1000194"  [label="DDG: socket"];
"1000136" -> "1000194"  [label="DDG: S_ISSOCK(info.st_mode) == 0"];
"1000136" -> "1000194"  [label="DDG: S_ISSOCK(info.st_mode)"];
"1000137" -> "1000194"  [label="DDG: info.st_mode"];
"1000173" -> "1000194"  [label="DDG: optval"];
"1000173" -> "1000194"  [label="DDG: UDP_ENCAP_ESPINUDP_NON_IKE"];
"1000131" -> "1000194"  [label="DDG: <RET>"];
"1000166" -> "1000194"  [label="DDG: <RET>"];
"1000143" -> "1000194"  [label="DDG: <RET>"];
"1000177" -> "1000194"  [label="DDG: <RET>"];
"1000192" -> "1000194"  [label="DDG: <RET>"];
"1000101" -> "1000100"  [label="AST: "];
"1000101" -> "1000194"  [label="DDG: socket"];
"1000101" -> "1000153"  [label="DDG: socket"];
"1000281" -> "1000100"  [label="AST: "];
"1000124" -> "1000104"  [label="AST: "];
"1000125" -> "1000124"  [label="AST: "];
"1000130" -> "1000124"  [label="AST: "];
"1000128" -> "1000126"  [label="AST: "];
"1000128" -> "1000127"  [label="CFG: "];
"1000126" -> "1000128"  [label="CFG: "];
"1000129" -> "1000125"  [label="AST: "];
"1000129" -> "1000126"  [label="CFG: "];
"1000125" -> "1000129"  [label="CFG: "];
"1000130" -> "1000124"  [label="AST: "];
"1000131" -> "1000130"  [label="AST: "];
"1000125" -> "1000124"  [label="AST: "];
"1000125" -> "1000129"  [label="CFG: "];
"1000126" -> "1000125"  [label="AST: "];
"1000129" -> "1000125"  [label="AST: "];
"1000133" -> "1000125"  [label="CFG: "];
"1000139" -> "1000125"  [label="CFG: "];
"1000125" -> "1000194"  [label="DDG: info.st_uid != callerUid"];
"1000125" -> "1000194"  [label="DDG: info.st_uid"];
"1000125" -> "1000194"  [label="DDG: callerUid"];
"1000103" -> "1000125"  [label="DDG: callerUid"];
"1000126" -> "1000125"  [label="AST: "];
"1000126" -> "1000128"  [label="CFG: "];
"1000127" -> "1000126"  [label="AST: "];
"1000128" -> "1000126"  [label="AST: "];
"1000129" -> "1000126"  [label="CFG: "];
"1000127" -> "1000126"  [label="AST: "];
"1000127" -> "1000115"  [label="CFG: "];
"1000128" -> "1000127"  [label="CFG: "];
"1000131" -> "1000130"  [label="AST: "];
"1000131" -> "1000132"  [label="CFG: "];
"1000132" -> "1000131"  [label="AST: "];
"1000194" -> "1000131"  [label="CFG: "];
"1000131" -> "1000194"  [label="DDG: <RET>"];
"1000132" -> "1000131"  [label="DDG: netdutils::statusFromErrno(EPERM, \\"fchown disabled for non-owner calls\\")"];
"1000133" -> "1000132"  [label="AST: "];
"1000133" -> "1000125"  [label="CFG: "];
"1000134" -> "1000133"  [label="CFG: "];
"1000134" -> "1000132"  [label="AST: "];
"1000134" -> "1000133"  [label="CFG: "];
"1000132" -> "1000134"  [label="CFG: "];
"1000132" -> "1000131"  [label="AST: "];
"1000132" -> "1000134"  [label="CFG: "];
"1000133" -> "1000132"  [label="AST: "];
"1000134" -> "1000132"  [label="AST: "];
"1000131" -> "1000132"  [label="CFG: "];
"1000132" -> "1000194"  [label="DDG: netdutils::statusFromErrno(EPERM, \\"fchown disabled for non-owner calls\\")"];
"1000132" -> "1000194"  [label="DDG: EPERM"];
"1000132" -> "1000131"  [label="DDG: netdutils::statusFromErrno(EPERM, \\"fchown disabled for non-owner calls\\")"];
"1000135" -> "1000104"  [label="AST: "];
"1000136" -> "1000135"  [label="AST: "];
"1000142" -> "1000135"  [label="AST: "];
"1000138" -> "1000137"  [label="AST: "];
"1000138" -> "1000140"  [label="CFG: "];
"1000139" -> "1000138"  [label="AST: "];
"1000140" -> "1000138"  [label="AST: "];
"1000137" -> "1000138"  [label="CFG: "];
"1000139" -> "1000138"  [label="AST: "];
"1000139" -> "1000125"  [label="CFG: "];
"1000140" -> "1000139"  [label="CFG: "];
"1000140" -> "1000138"  [label="AST: "];
"1000140" -> "1000139"  [label="CFG: "];
"1000138" -> "1000140"  [label="CFG: "];
"1000141" -> "1000136"  [label="AST: "];
"1000141" -> "1000137"  [label="CFG: "];
"1000136" -> "1000141"  [label="CFG: "];
"1000142" -> "1000135"  [label="AST: "];
"1000143" -> "1000142"  [label="AST: "];
"1000136" -> "1000135"  [label="AST: "];
"1000136" -> "1000141"  [label="CFG: "];
"1000137" -> "1000136"  [label="AST: "];
"1000141" -> "1000136"  [label="AST: "];
"1000145" -> "1000136"  [label="CFG: "];
"1000151" -> "1000136"  [label="CFG: "];
"1000136" -> "1000194"  [label="DDG: S_ISSOCK(info.st_mode) == 0"];
"1000136" -> "1000194"  [label="DDG: S_ISSOCK(info.st_mode)"];
"1000137" -> "1000136"  [label="DDG: info.st_mode"];
"1000137" -> "1000136"  [label="AST: "];
"1000137" -> "1000138"  [label="CFG: "];
"1000138" -> "1000137"  [label="AST: "];
"1000141" -> "1000137"  [label="CFG: "];
"1000137" -> "1000194"  [label="DDG: info.st_mode"];
"1000137" -> "1000136"  [label="DDG: info.st_mode"];
"1000143" -> "1000142"  [label="AST: "];
"1000143" -> "1000144"  [label="CFG: "];
"1000144" -> "1000143"  [label="AST: "];
"1000194" -> "1000143"  [label="CFG: "];
"1000143" -> "1000194"  [label="DDG: <RET>"];
"1000144" -> "1000143"  [label="DDG: netdutils::statusFromErrno(EINVAL, \\"File descriptor was not a socket\\")"];
"1000145" -> "1000144"  [label="AST: "];
"1000145" -> "1000136"  [label="CFG: "];
"1000146" -> "1000145"  [label="CFG: "];
"1000146" -> "1000144"  [label="AST: "];
"1000146" -> "1000145"  [label="CFG: "];
"1000144" -> "1000146"  [label="CFG: "];
"1000144" -> "1000143"  [label="AST: "];
"1000144" -> "1000146"  [label="CFG: "];
"1000145" -> "1000144"  [label="AST: "];
"1000146" -> "1000144"  [label="AST: "];
"1000143" -> "1000144"  [label="CFG: "];
"1000144" -> "1000194"  [label="DDG: netdutils::statusFromErrno(EINVAL, \\"File descriptor was not a socket\\")"];
"1000144" -> "1000194"  [label="DDG: EINVAL"];
"1000144" -> "1000143"  [label="DDG: netdutils::statusFromErrno(EINVAL, \\"File descriptor was not a socket\\")"];
"1000102" -> "1000100"  [label="AST: "];
"1000102" -> "1000194"  [label="DDG: newUid"];
"1000102" -> "1000182"  [label="DDG: newUid"];
"1000282" -> "1000100"  [label="AST: "];
"1000103" -> "1000100"  [label="AST: "];
"1000103" -> "1000194"  [label="DDG: callerUid"];
"1000103" -> "1000125"  [label="DDG: callerUid"];
"1000283" -> "1000100"  [label="AST: "];
"1000104" -> "1000100"  [label="AST: "];
"1000105" -> "1000104"  [label="AST: "];
"1000109" -> "1000104"  [label="AST: "];
"1000110" -> "1000104"  [label="AST: "];
"1000113" -> "1000104"  [label="AST: "];
"1000114" -> "1000104"  [label="AST: "];
"1000124" -> "1000104"  [label="AST: "];
"1000135" -> "1000104"  [label="AST: "];
"1000147" -> "1000104"  [label="AST: "];
"1000148" -> "1000104"  [label="AST: "];
"1000149" -> "1000104"  [label="AST: "];
"1000150" -> "1000104"  [label="AST: "];
"1000161" -> "1000104"  [label="AST: "];
"1000168" -> "1000104"  [label="AST: "];
"1000181" -> "1000104"  [label="AST: "];
"1000192" -> "1000104"  [label="AST: "];
"1000150" -> "1000104"  [label="AST: "];
"1000150" -> "1000152"  [label="CFG: "];
"1000151" -> "1000150"  [label="AST: "];
"1000152" -> "1000150"  [label="AST: "];
"1000163" -> "1000150"  [label="CFG: "];
"1000150" -> "1000194"  [label="DDG: getSyscallInstance().getsockopt(Fd(socket), IPPROTO_UDP, UDP_ENCAP, &optval, &optlen)"];
"1000152" -> "1000150"  [label="DDG: Fd(socket)"];
"1000152" -> "1000150"  [label="DDG: IPPROTO_UDP"];
"1000152" -> "1000150"  [label="DDG: UDP_ENCAP"];
"1000152" -> "1000150"  [label="DDG: &optlen"];
"1000152" -> "1000150"  [label="DDG: &optval"];
"1000150" -> "1000162"  [label="DDG: status"];
"1000151" -> "1000150"  [label="AST: "];
"1000151" -> "1000136"  [label="CFG: "];
"1000154" -> "1000151"  [label="CFG: "];
"1000153" -> "1000152"  [label="AST: "];
"1000153" -> "1000154"  [label="CFG: "];
"1000154" -> "1000153"  [label="AST: "];
"1000155" -> "1000153"  [label="CFG: "];
"1000153" -> "1000194"  [label="DDG: socket"];
"1000153" -> "1000152"  [label="DDG: socket"];
"1000101" -> "1000153"  [label="DDG: socket"];
"1000154" -> "1000153"  [label="AST: "];
"1000154" -> "1000151"  [label="CFG: "];
"1000153" -> "1000154"  [label="CFG: "];
"1000155" -> "1000152"  [label="AST: "];
"1000155" -> "1000153"  [label="CFG: "];
"1000156" -> "1000155"  [label="CFG: "];
"1000156" -> "1000152"  [label="AST: "];
"1000156" -> "1000155"  [label="CFG: "];
"1000158" -> "1000156"  [label="CFG: "];
"1000157" -> "1000152"  [label="AST: "];
"1000157" -> "1000158"  [label="CFG: "];
"1000158" -> "1000157"  [label="AST: "];
"1000160" -> "1000157"  [label="CFG: "];
"1000158" -> "1000157"  [label="AST: "];
"1000158" -> "1000156"  [label="CFG: "];
"1000157" -> "1000158"  [label="CFG: "];
"1000159" -> "1000152"  [label="AST: "];
"1000159" -> "1000160"  [label="CFG: "];
"1000160" -> "1000159"  [label="AST: "];
"1000152" -> "1000159"  [label="CFG: "];
"1000160" -> "1000159"  [label="AST: "];
"1000160" -> "1000157"  [label="CFG: "];
"1000159" -> "1000160"  [label="CFG: "];
"1000152" -> "1000150"  [label="AST: "];
"1000152" -> "1000159"  [label="CFG: "];
"1000153" -> "1000152"  [label="AST: "];
"1000155" -> "1000152"  [label="AST: "];
"1000156" -> "1000152"  [label="AST: "];
"1000157" -> "1000152"  [label="AST: "];
"1000159" -> "1000152"  [label="AST: "];
"1000150" -> "1000152"  [label="CFG: "];
"1000152" -> "1000194"  [label="DDG: &optval"];
"1000152" -> "1000194"  [label="DDG: Fd(socket)"];
"1000152" -> "1000194"  [label="DDG: &optlen"];
"1000152" -> "1000194"  [label="DDG: IPPROTO_UDP"];
"1000152" -> "1000194"  [label="DDG: UDP_ENCAP"];
"1000152" -> "1000150"  [label="DDG: Fd(socket)"];
"1000152" -> "1000150"  [label="DDG: IPPROTO_UDP"];
"1000152" -> "1000150"  [label="DDG: UDP_ENCAP"];
"1000152" -> "1000150"  [label="DDG: &optlen"];
"1000152" -> "1000150"  [label="DDG: &optval"];
"1000153" -> "1000152"  [label="DDG: socket"];
"1000164" -> "1000162"  [label="AST: "];
"1000164" -> "1000163"  [label="CFG: "];
"1000162" -> "1000164"  [label="CFG: "];
"1000165" -> "1000161"  [label="AST: "];
"1000166" -> "1000165"  [label="AST: "];
"1000161" -> "1000104"  [label="AST: "];
"1000162" -> "1000161"  [label="AST: "];
"1000165" -> "1000161"  [label="AST: "];
"1000162" -> "1000161"  [label="AST: "];
"1000162" -> "1000164"  [label="CFG: "];
"1000163" -> "1000162"  [label="AST: "];
"1000164" -> "1000162"  [label="AST: "];
"1000167" -> "1000162"  [label="CFG: "];
"1000171" -> "1000162"  [label="CFG: "];
"1000162" -> "1000194"  [label="DDG: netdutils::status::ok"];
"1000162" -> "1000194"  [label="DDG: status"];
"1000162" -> "1000194"  [label="DDG: status != netdutils::status::ok"];
"1000150" -> "1000162"  [label="DDG: status"];
"1000162" -> "1000166"  [label="DDG: status"];
"1000162" -> "1000192"  [label="DDG: netdutils::status::ok"];
"1000163" -> "1000162"  [label="AST: "];
"1000163" -> "1000150"  [label="CFG: "];
"1000164" -> "1000163"  [label="CFG: "];
"1000166" -> "1000165"  [label="AST: "];
"1000166" -> "1000167"  [label="CFG: "];
"1000167" -> "1000166"  [label="AST: "];
"1000194" -> "1000166"  [label="CFG: "];
"1000166" -> "1000194"  [label="DDG: <RET>"];
"1000167" -> "1000166"  [label="DDG: status"];
"1000162" -> "1000166"  [label="DDG: status"];
"1000167" -> "1000166"  [label="AST: "];
"1000167" -> "1000162"  [label="CFG: "];
"1000166" -> "1000167"  [label="CFG: "];
"1000167" -> "1000166"  [label="DDG: status"];
"1000168" -> "1000104"  [label="AST: "];
"1000169" -> "1000168"  [label="AST: "];
"1000176" -> "1000168"  [label="AST: "];
"1000172" -> "1000170"  [label="AST: "];
"1000172" -> "1000171"  [label="CFG: "];
"1000170" -> "1000172"  [label="CFG: "];
"1000173" -> "1000169"  [label="AST: "];
"1000173" -> "1000175"  [label="CFG: "];
"1000174" -> "1000173"  [label="AST: "];
"1000175" -> "1000173"  [label="AST: "];
"1000169" -> "1000173"  [label="CFG: "];
"1000173" -> "1000194"  [label="DDG: optval"];
"1000173" -> "1000194"  [label="DDG: UDP_ENCAP_ESPINUDP_NON_IKE"];
"1000173" -> "1000169"  [label="DDG: optval"];
"1000173" -> "1000169"  [label="DDG: UDP_ENCAP_ESPINUDP_NON_IKE"];
"1000170" -> "1000173"  [label="DDG: optval"];
"1000174" -> "1000173"  [label="AST: "];
"1000174" -> "1000170"  [label="CFG: "];
"1000175" -> "1000174"  [label="CFG: "];
"1000175" -> "1000173"  [label="AST: "];
"1000175" -> "1000174"  [label="CFG: "];
"1000173" -> "1000175"  [label="CFG: "];
"1000169" -> "1000168"  [label="AST: "];
"1000169" -> "1000170"  [label="CFG: "];
"1000169" -> "1000173"  [label="CFG: "];
"1000170" -> "1000169"  [label="AST: "];
"1000173" -> "1000169"  [label="AST: "];
"1000179" -> "1000169"  [label="CFG: "];
"1000183" -> "1000169"  [label="CFG: "];
"1000169" -> "1000194"  [label="DDG: optval != UDP_ENCAP_ESPINUDP && optval != UDP_ENCAP_ESPINUDP_NON_IKE"];
"1000169" -> "1000194"  [label="DDG: optval != UDP_ENCAP_ESPINUDP_NON_IKE"];
"1000169" -> "1000194"  [label="DDG: optval != UDP_ENCAP_ESPINUDP"];
"1000170" -> "1000169"  [label="DDG: optval"];
"1000170" -> "1000169"  [label="DDG: UDP_ENCAP_ESPINUDP"];
"1000173" -> "1000169"  [label="DDG: optval"];
"1000173" -> "1000169"  [label="DDG: UDP_ENCAP_ESPINUDP_NON_IKE"];
"1000170" -> "1000169"  [label="AST: "];
"1000170" -> "1000172"  [label="CFG: "];
"1000171" -> "1000170"  [label="AST: "];
"1000172" -> "1000170"  [label="AST: "];
"1000174" -> "1000170"  [label="CFG: "];
"1000169" -> "1000170"  [label="CFG: "];
"1000170" -> "1000194"  [label="DDG: UDP_ENCAP_ESPINUDP"];
"1000170" -> "1000194"  [label="DDG: optval"];
"1000170" -> "1000169"  [label="DDG: optval"];
"1000170" -> "1000169"  [label="DDG: UDP_ENCAP_ESPINUDP"];
"1000170" -> "1000173"  [label="DDG: optval"];
"1000171" -> "1000170"  [label="AST: "];
"1000171" -> "1000162"  [label="CFG: "];
"1000172" -> "1000171"  [label="CFG: "];
"1000176" -> "1000168"  [label="AST: "];
"1000177" -> "1000176"  [label="AST: "];
"1000177" -> "1000176"  [label="AST: "];
"1000177" -> "1000178"  [label="CFG: "];
"1000178" -> "1000177"  [label="AST: "];
"1000194" -> "1000177"  [label="CFG: "];
"1000177" -> "1000194"  [label="DDG: <RET>"];
"1000178" -> "1000177"  [label="DDG: netdutils::statusFromErrno(EINVAL, \\"Socket did not have UDP-encap sockopt set\\")"];
"1000179" -> "1000178"  [label="AST: "];
"1000179" -> "1000169"  [label="CFG: "];
"1000180" -> "1000179"  [label="CFG: "];
"1000180" -> "1000178"  [label="AST: "];
"1000180" -> "1000179"  [label="CFG: "];
"1000178" -> "1000180"  [label="CFG: "];
"1000178" -> "1000177"  [label="AST: "];
"1000178" -> "1000180"  [label="CFG: "];
"1000179" -> "1000178"  [label="AST: "];
"1000180" -> "1000178"  [label="AST: "];
"1000177" -> "1000178"  [label="CFG: "];
"1000178" -> "1000194"  [label="DDG: EINVAL"];
"1000178" -> "1000194"  [label="DDG: netdutils::statusFromErrno(EINVAL, \\"Socket did not have UDP-encap sockopt set\\")"];
"1000178" -> "1000177"  [label="DDG: netdutils::statusFromErrno(EINVAL, \\"Socket did not have UDP-encap sockopt set\\")"];
"1000181" -> "1000104"  [label="AST: "];
"1000182" -> "1000181"  [label="AST: "];
"1000187" -> "1000181"  [label="AST: "];
"1000183" -> "1000182"  [label="AST: "];
"1000183" -> "1000169"  [label="CFG: "];
"1000184" -> "1000183"  [label="CFG: "];
"1000184" -> "1000182"  [label="AST: "];
"1000184" -> "1000183"  [label="CFG: "];
"1000186" -> "1000184"  [label="CFG: "];
"1000185" -> "1000182"  [label="AST: "];
"1000185" -> "1000186"  [label="CFG: "];
"1000186" -> "1000185"  [label="AST: "];
"1000182" -> "1000185"  [label="CFG: "];
"1000185" -> "1000182"  [label="DDG: 1"];
"1000186" -> "1000185"  [label="AST: "];
"1000186" -> "1000184"  [label="CFG: "];
"1000185" -> "1000186"  [label="CFG: "];
"1000187" -> "1000181"  [label="AST: "];
"1000188" -> "1000187"  [label="AST: "];
"1000182" -> "1000181"  [label="AST: "];
"1000182" -> "1000185"  [label="CFG: "];
"1000183" -> "1000182"  [label="AST: "];
"1000184" -> "1000182"  [label="AST: "];
"1000185" -> "1000182"  [label="AST: "];
"1000190" -> "1000182"  [label="CFG: "];
"1000193" -> "1000182"  [label="CFG: "];
"1000182" -> "1000194"  [label="DDG: -1"];
"1000182" -> "1000194"  [label="DDG: fchown(fd, newUid, -1)"];
"1000182" -> "1000194"  [label="DDG: newUid"];
"1000182" -> "1000194"  [label="DDG: fd"];
"1000115" -> "1000182"  [label="DDG: fd"];
"1000102" -> "1000182"  [label="DDG: newUid"];
"1000185" -> "1000182"  [label="DDG: 1"];
"1000188" -> "1000187"  [label="AST: "];
"1000188" -> "1000189"  [label="CFG: "];
"1000189" -> "1000188"  [label="AST: "];
"1000194" -> "1000188"  [label="CFG: "];
"1000188" -> "1000194"  [label="DDG: <RET>"];
"1000189" -> "1000188"  [label="DDG: netdutils::statusFromErrno(errno, \\"Failed to fchown socket file descriptor\\")"];
"1000190" -> "1000189"  [label="AST: "];
"1000190" -> "1000182"  [label="CFG: "];
"1000191" -> "1000190"  [label="CFG: "];
"1000191" -> "1000189"  [label="AST: "];
"1000191" -> "1000190"  [label="CFG: "];
"1000189" -> "1000191"  [label="CFG: "];
"1000189" -> "1000188"  [label="AST: "];
"1000189" -> "1000191"  [label="CFG: "];
"1000190" -> "1000189"  [label="AST: "];
"1000191" -> "1000189"  [label="AST: "];
"1000188" -> "1000189"  [label="CFG: "];
"1000189" -> "1000194"  [label="DDG: netdutils::statusFromErrno(errno, \\"Failed to fchown socket file descriptor\\")"];
"1000189" -> "1000194"  [label="DDG: errno"];
"1000189" -> "1000188"  [label="DDG: netdutils::statusFromErrno(errno, \\"Failed to fchown socket file descriptor\\")"];
"1000106" -> "1000105"  [label="AST: "];
"1000106" -> "1000100"  [label="CFG: "];
"1000107" -> "1000106"  [label="CFG: "];
"1000105" -> "1000104"  [label="AST: "];
"1000105" -> "1000108"  [label="CFG: "];
"1000106" -> "1000105"  [label="AST: "];
"1000107" -> "1000105"  [label="AST: "];
"1000108" -> "1000105"  [label="AST: "];
"1000111" -> "1000105"  [label="CFG: "];
"1000105" -> "1000194"  [label="DDG: __LINE__"];
"1000105" -> "1000194"  [label="DDG: __FUNCTION__"];
"1000105" -> "1000194"  [label="DDG: ALOGD(\\"XfrmController:%s, line=%d\\", __FUNCTION__, __LINE__)"];
"1000107" -> "1000105"  [label="AST: "];
"1000107" -> "1000106"  [label="CFG: "];
"1000108" -> "1000107"  [label="CFG: "];
"1000108" -> "1000105"  [label="AST: "];
"1000108" -> "1000107"  [label="CFG: "];
"1000105" -> "1000108"  [label="CFG: "];
"1000192" -> "1000104"  [label="AST: "];
"1000192" -> "1000193"  [label="CFG: "];
"1000193" -> "1000192"  [label="AST: "];
"1000194" -> "1000192"  [label="CFG: "];
"1000192" -> "1000194"  [label="DDG: <RET>"];
"1000193" -> "1000192"  [label="DDG: netdutils::status::ok"];
"1000162" -> "1000192"  [label="DDG: netdutils::status::ok"];
"1000193" -> "1000192"  [label="AST: "];
"1000193" -> "1000182"  [label="CFG: "];
"1000192" -> "1000193"  [label="CFG: "];
"1000193" -> "1000192"  [label="DDG: netdutils::status::ok"];
"1000110" -> "1000104"  [label="AST: "];
"1000110" -> "1000112"  [label="CFG: "];
"1000111" -> "1000110"  [label="AST: "];
"1000112" -> "1000110"  [label="AST: "];
"1000116" -> "1000110"  [label="CFG: "];
"1000110" -> "1000194"  [label="DDG: socket.get()"];
"1000110" -> "1000115"  [label="DDG: fd"];
"1000111" -> "1000110"  [label="AST: "];
"1000111" -> "1000105"  [label="CFG: "];
"1000112" -> "1000111"  [label="CFG: "];
"1000112" -> "1000110"  [label="AST: "];
"1000112" -> "1000111"  [label="CFG: "];
"1000110" -> "1000112"  [label="CFG: "];
"1000114" -> "1000104"  [label="AST: "];
"1000115" -> "1000114"  [label="AST: "];
"1000119" -> "1000114"  [label="AST: "];
"1000116" -> "1000115"  [label="AST: "];
"1000116" -> "1000110"  [label="CFG: "];
"1000118" -> "1000116"  [label="CFG: "];
"1000117" -> "1000115"  [label="AST: "];
"1000117" -> "1000118"  [label="CFG: "];
"1000118" -> "1000117"  [label="AST: "];
"1000115" -> "1000117"  [label="CFG: "];
"1000118" -> "1000117"  [label="AST: "];
"1000118" -> "1000116"  [label="CFG: "];
"1000117" -> "1000118"  [label="CFG: "];
"1000119" -> "1000114"  [label="AST: "];
"1000120" -> "1000119"  [label="AST: "];
"1000115" -> "1000114"  [label="AST: "];
"1000115" -> "1000117"  [label="CFG: "];
"1000116" -> "1000115"  [label="AST: "];
"1000117" -> "1000115"  [label="AST: "];
"1000122" -> "1000115"  [label="CFG: "];
"1000127" -> "1000115"  [label="CFG: "];
"1000115" -> "1000194"  [label="DDG: &info"];
"1000115" -> "1000194"  [label="DDG: fstat(fd, &info)"];
"1000115" -> "1000194"  [label="DDG: fd"];
"1000110" -> "1000115"  [label="DDG: fd"];
"1000115" -> "1000182"  [label="DDG: fd"];
"1000120" -> "1000119"  [label="AST: "];
"1000120" -> "1000121"  [label="CFG: "];
"1000121" -> "1000120"  [label="AST: "];
"1000194" -> "1000120"  [label="CFG: "];
"1000120" -> "1000194"  [label="DDG: <RET>"];
"1000121" -> "1000120"  [label="DDG: netdutils::statusFromErrno(errno, \\"Failed to stat socket file descriptor\\")"];
"1000122" -> "1000121"  [label="AST: "];
"1000122" -> "1000115"  [label="CFG: "];
"1000123" -> "1000122"  [label="CFG: "];
"1000123" -> "1000121"  [label="AST: "];
"1000123" -> "1000122"  [label="CFG: "];
"1000121" -> "1000123"  [label="CFG: "];
"1000121" -> "1000120"  [label="AST: "];
"1000121" -> "1000123"  [label="CFG: "];
"1000122" -> "1000121"  [label="AST: "];
"1000123" -> "1000121"  [label="AST: "];
"1000120" -> "1000121"  [label="CFG: "];
"1000121" -> "1000194"  [label="DDG: netdutils::statusFromErrno(errno, \\"Failed to stat socket file descriptor\\")"];
"1000121" -> "1000194"  [label="DDG: errno"];
"1000121" -> "1000120"  [label="DDG: netdutils::statusFromErrno(errno, \\"Failed to stat socket file descriptor\\")"];
}
