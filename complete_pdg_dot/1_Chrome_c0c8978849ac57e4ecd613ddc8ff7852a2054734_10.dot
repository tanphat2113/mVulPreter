digraph "1_Chrome_c0c8978849ac57e4ecd613ddc8ff7852a2054734_10" {
"1000101" [label="(MethodParameterIn,mojo::ScopedSharedBufferMapping mapping)"];
"1000170" [label="(MethodParameterOut,mojo::ScopedSharedBufferMapping mapping)"];
"1000125" [label="(MethodReturn,RET)"];
"1000111" [label="(Call,!types.empty())"];
"1000112" [label="(Call,types.empty())"];
"1000110" [label="(Call,DCHECK(!types.empty()))"];
"1000114" [label="(Call,std::adjacent_find(types.begin(), types.end()) == types.end())"];
"1000115" [label="(Call,std::adjacent_find(types.begin(), types.end()))"];
"1000116" [label="(Call,types.begin())"];
"1000117" [label="(Call,types.end())"];
"1000113" [label="(Call,DCHECK(std::adjacent_find(types.begin(), types.end()) == types.end()))"];
"1000118" [label="(Call,types.end())"];
"1000120" [label="(Identifier,result_callback_)"];
"1000119" [label="(Call,DCHECK(result_callback_))"];
"1000122" [label="(Identifier,mapping_)"];
"1000121" [label="(Call,DCHECK(mapping_))"];
"1000124" [label="(Identifier,provider_)"];
"1000123" [label="(Call,DCHECK(provider_))"];
"1000102" [label="(MethodParameterIn,std::unique_ptr<PlatformSensorFusionAlgorithm> fusion_algorithm)"];
"1000171" [label="(MethodParameterOut,std::unique_ptr<PlatformSensorFusionAlgorithm> fusion_algorithm)"];
"1000103" [label="(MethodParameterIn,const PlatformSensorProviderBase::CreateSensorCallback& callback)"];
"1000172" [label="(MethodParameterOut,const PlatformSensorProviderBase::CreateSensorCallback& callback)"];
"1000104" [label="(MethodParameterIn,PlatformSensorProvider* provider)"];
"1000173" [label="(MethodParameterOut,PlatformSensorProvider* provider)"];
"1000105" [label="(Block,)"];
"1000107" [label="(Call,& types = fusion_algorithm_->source_types())"];
"1000108" [label="(Identifier,types)"];
"1000109" [label="(Call,fusion_algorithm_->source_types())"];
"1000101" -> "1000100"  [label="AST: "];
"1000101" -> "1000125"  [label="DDG: mapping"];
"1000170" -> "1000100"  [label="AST: "];
"1000125" -> "1000100"  [label="AST: "];
"1000125" -> "1000123"  [label="CFG: "];
"1000107" -> "1000125"  [label="DDG: types"];
"1000107" -> "1000125"  [label="DDG: fusion_algorithm_->source_types()"];
"1000104" -> "1000125"  [label="DDG: provider"];
"1000113" -> "1000125"  [label="DDG: std::adjacent_find(types.begin(), types.end()) == types.end()"];
"1000113" -> "1000125"  [label="DDG: DCHECK(std::adjacent_find(types.begin(), types.end()) == types.end())"];
"1000123" -> "1000125"  [label="DDG: DCHECK(provider_)"];
"1000123" -> "1000125"  [label="DDG: provider_"];
"1000103" -> "1000125"  [label="DDG: callback"];
"1000114" -> "1000125"  [label="DDG: types.end()"];
"1000114" -> "1000125"  [label="DDG: std::adjacent_find(types.begin(), types.end())"];
"1000121" -> "1000125"  [label="DDG: mapping_"];
"1000121" -> "1000125"  [label="DDG: DCHECK(mapping_)"];
"1000119" -> "1000125"  [label="DDG: DCHECK(result_callback_)"];
"1000119" -> "1000125"  [label="DDG: result_callback_"];
"1000102" -> "1000125"  [label="DDG: fusion_algorithm"];
"1000111" -> "1000125"  [label="DDG: types.empty()"];
"1000101" -> "1000125"  [label="DDG: mapping"];
"1000110" -> "1000125"  [label="DDG: DCHECK(!types.empty())"];
"1000110" -> "1000125"  [label="DDG: !types.empty()"];
"1000115" -> "1000125"  [label="DDG: types.begin()"];
"1000111" -> "1000110"  [label="AST: "];
"1000111" -> "1000112"  [label="CFG: "];
"1000112" -> "1000111"  [label="AST: "];
"1000110" -> "1000111"  [label="CFG: "];
"1000111" -> "1000125"  [label="DDG: types.empty()"];
"1000111" -> "1000110"  [label="DDG: types.empty()"];
"1000112" -> "1000111"  [label="AST: "];
"1000112" -> "1000107"  [label="CFG: "];
"1000111" -> "1000112"  [label="CFG: "];
"1000110" -> "1000105"  [label="AST: "];
"1000110" -> "1000111"  [label="CFG: "];
"1000111" -> "1000110"  [label="AST: "];
"1000116" -> "1000110"  [label="CFG: "];
"1000110" -> "1000125"  [label="DDG: DCHECK(!types.empty())"];
"1000110" -> "1000125"  [label="DDG: !types.empty()"];
"1000111" -> "1000110"  [label="DDG: types.empty()"];
"1000114" -> "1000113"  [label="AST: "];
"1000114" -> "1000118"  [label="CFG: "];
"1000115" -> "1000114"  [label="AST: "];
"1000118" -> "1000114"  [label="AST: "];
"1000113" -> "1000114"  [label="CFG: "];
"1000114" -> "1000125"  [label="DDG: types.end()"];
"1000114" -> "1000125"  [label="DDG: std::adjacent_find(types.begin(), types.end())"];
"1000114" -> "1000113"  [label="DDG: std::adjacent_find(types.begin(), types.end())"];
"1000114" -> "1000113"  [label="DDG: types.end()"];
"1000115" -> "1000114"  [label="DDG: types.begin()"];
"1000115" -> "1000114"  [label="DDG: types.end()"];
"1000115" -> "1000114"  [label="AST: "];
"1000115" -> "1000117"  [label="CFG: "];
"1000116" -> "1000115"  [label="AST: "];
"1000117" -> "1000115"  [label="AST: "];
"1000118" -> "1000115"  [label="CFG: "];
"1000115" -> "1000125"  [label="DDG: types.begin()"];
"1000115" -> "1000114"  [label="DDG: types.begin()"];
"1000115" -> "1000114"  [label="DDG: types.end()"];
"1000116" -> "1000115"  [label="AST: "];
"1000116" -> "1000110"  [label="CFG: "];
"1000117" -> "1000116"  [label="CFG: "];
"1000117" -> "1000115"  [label="AST: "];
"1000117" -> "1000116"  [label="CFG: "];
"1000115" -> "1000117"  [label="CFG: "];
"1000113" -> "1000105"  [label="AST: "];
"1000113" -> "1000114"  [label="CFG: "];
"1000114" -> "1000113"  [label="AST: "];
"1000120" -> "1000113"  [label="CFG: "];
"1000113" -> "1000125"  [label="DDG: std::adjacent_find(types.begin(), types.end()) == types.end()"];
"1000113" -> "1000125"  [label="DDG: DCHECK(std::adjacent_find(types.begin(), types.end()) == types.end())"];
"1000114" -> "1000113"  [label="DDG: std::adjacent_find(types.begin(), types.end())"];
"1000114" -> "1000113"  [label="DDG: types.end()"];
"1000118" -> "1000114"  [label="AST: "];
"1000118" -> "1000115"  [label="CFG: "];
"1000114" -> "1000118"  [label="CFG: "];
"1000120" -> "1000119"  [label="AST: "];
"1000120" -> "1000113"  [label="CFG: "];
"1000119" -> "1000120"  [label="CFG: "];
"1000119" -> "1000105"  [label="AST: "];
"1000119" -> "1000120"  [label="CFG: "];
"1000120" -> "1000119"  [label="AST: "];
"1000122" -> "1000119"  [label="CFG: "];
"1000119" -> "1000125"  [label="DDG: DCHECK(result_callback_)"];
"1000119" -> "1000125"  [label="DDG: result_callback_"];
"1000122" -> "1000121"  [label="AST: "];
"1000122" -> "1000119"  [label="CFG: "];
"1000121" -> "1000122"  [label="CFG: "];
"1000121" -> "1000105"  [label="AST: "];
"1000121" -> "1000122"  [label="CFG: "];
"1000122" -> "1000121"  [label="AST: "];
"1000124" -> "1000121"  [label="CFG: "];
"1000121" -> "1000125"  [label="DDG: mapping_"];
"1000121" -> "1000125"  [label="DDG: DCHECK(mapping_)"];
"1000124" -> "1000123"  [label="AST: "];
"1000124" -> "1000121"  [label="CFG: "];
"1000123" -> "1000124"  [label="CFG: "];
"1000123" -> "1000105"  [label="AST: "];
"1000123" -> "1000124"  [label="CFG: "];
"1000124" -> "1000123"  [label="AST: "];
"1000125" -> "1000123"  [label="CFG: "];
"1000123" -> "1000125"  [label="DDG: DCHECK(provider_)"];
"1000123" -> "1000125"  [label="DDG: provider_"];
"1000102" -> "1000100"  [label="AST: "];
"1000102" -> "1000125"  [label="DDG: fusion_algorithm"];
"1000171" -> "1000100"  [label="AST: "];
"1000103" -> "1000100"  [label="AST: "];
"1000103" -> "1000125"  [label="DDG: callback"];
"1000172" -> "1000100"  [label="AST: "];
"1000104" -> "1000100"  [label="AST: "];
"1000104" -> "1000125"  [label="DDG: provider"];
"1000173" -> "1000100"  [label="AST: "];
"1000105" -> "1000100"  [label="AST: "];
"1000106" -> "1000105"  [label="AST: "];
"1000107" -> "1000105"  [label="AST: "];
"1000110" -> "1000105"  [label="AST: "];
"1000113" -> "1000105"  [label="AST: "];
"1000119" -> "1000105"  [label="AST: "];
"1000121" -> "1000105"  [label="AST: "];
"1000123" -> "1000105"  [label="AST: "];
"1000107" -> "1000105"  [label="AST: "];
"1000107" -> "1000109"  [label="CFG: "];
"1000108" -> "1000107"  [label="AST: "];
"1000109" -> "1000107"  [label="AST: "];
"1000112" -> "1000107"  [label="CFG: "];
"1000107" -> "1000125"  [label="DDG: types"];
"1000107" -> "1000125"  [label="DDG: fusion_algorithm_->source_types()"];
"1000108" -> "1000107"  [label="AST: "];
"1000108" -> "1000100"  [label="CFG: "];
"1000109" -> "1000108"  [label="CFG: "];
"1000109" -> "1000107"  [label="AST: "];
"1000109" -> "1000108"  [label="CFG: "];
"1000107" -> "1000109"  [label="CFG: "];
}
