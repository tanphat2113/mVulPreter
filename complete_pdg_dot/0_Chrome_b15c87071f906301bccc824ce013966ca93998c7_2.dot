digraph "0_Chrome_b15c87071f906301bccc824ce013966ca93998c7_2" {
"1000186" [label="(MethodReturn,bool)"];
"1000121" [label="(ControlStructure,if (!ConvertStringSecurityDescriptorToSecurityDescriptor(\n          UTF8ToUTF16(pipe_security_descriptor).c_str(),\n          SDDL_REVISION_1,\n          reinterpret_cast<PSECURITY_DESCRIPTOR*>(\n              &security_attributes.lpSecurityDescriptor),\n          &security_descriptor_length)))"];
"1000122" [label="(Call,!ConvertStringSecurityDescriptorToSecurityDescriptor(\n          UTF8ToUTF16(pipe_security_descriptor).c_str(),\n          SDDL_REVISION_1,\n          reinterpret_cast<PSECURITY_DESCRIPTOR*>(\n              &security_attributes.lpSecurityDescriptor),\n          &security_descriptor_length))"];
"1000123" [label="(Call,ConvertStringSecurityDescriptorToSecurityDescriptor(\n          UTF8ToUTF16(pipe_security_descriptor).c_str(),\n          SDDL_REVISION_1,\n          reinterpret_cast<PSECURITY_DESCRIPTOR*>(\n              &security_attributes.lpSecurityDescriptor),\n          &security_descriptor_length))"];
"1000124" [label="(Call,UTF8ToUTF16(pipe_security_descriptor).c_str())"];
"1000125" [label="(Identifier,SDDL_REVISION_1)"];
"1000126" [label="(Call,reinterpret_cast<PSECURITY_DESCRIPTOR*>(\n              &security_attributes.lpSecurityDescriptor))"];
"1000128" [label="(Call,&security_attributes.lpSecurityDescriptor)"];
"1000129" [label="(Call,security_attributes.lpSecurityDescriptor)"];
"1000130" [label="(Identifier,security_attributes)"];
"1000131" [label="(FieldIdentifier,lpSecurityDescriptor)"];
"1000132" [label="(Call,&security_descriptor_length)"];
"1000133" [label="(Identifier,security_descriptor_length)"];
"1000134" [label="(Block,)"];
"1000137" [label="(Identifier,ERROR)"];
"1000135" [label="(Call,LOG_GETLASTERROR(ERROR) <<\n        \"Failed to create a security descriptor for the Chromoting IPC channel\")"];
"1000136" [label="(Call,LOG_GETLASTERROR(ERROR))"];
"1000138" [label="(Literal,\"Failed to create a security descriptor for the Chromoting IPC channel\")"];
"1000140" [label="(Identifier,false)"];
"1000139" [label="(Return,return false;)"];
"1000101" [label="(MethodParameterIn,const std::string& channel_name)"];
"1000286" [label="(MethodParameterOut,const std::string& channel_name)"];
"1000143" [label="(Identifier,channel_name)"];
"1000142" [label="(Call,pipe_name.append(channel_name))"];
"1000146" [label="(Call,CreateNamedPipe(\n      UTF8ToUTF16(pipe_name).c_str(),\n      PIPE_ACCESS_DUPLEX | FILE_FLAG_OVERLAPPED | FILE_FLAG_FIRST_PIPE_INSTANCE,\n      PIPE_TYPE_BYTE | PIPE_READMODE_BYTE,\n      1,\n      IPC::Channel::kReadBufferSize,\n      IPC::Channel::kReadBufferSize,\n      5000,\n      &security_attributes))"];
"1000145" [label="(Call,pipe.Set(CreateNamedPipe(\n      UTF8ToUTF16(pipe_name).c_str(),\n      PIPE_ACCESS_DUPLEX | FILE_FLAG_OVERLAPPED | FILE_FLAG_FIRST_PIPE_INSTANCE,\n      PIPE_TYPE_BYTE | PIPE_READMODE_BYTE,\n      1,\n      IPC::Channel::kReadBufferSize,\n      IPC::Channel::kReadBufferSize,\n      5000,\n      &security_attributes)))"];
"1000147" [label="(Call,UTF8ToUTF16(pipe_name).c_str())"];
"1000150" [label="(Call,FILE_FLAG_OVERLAPPED | FILE_FLAG_FIRST_PIPE_INSTANCE)"];
"1000151" [label="(Identifier,FILE_FLAG_OVERLAPPED)"];
"1000152" [label="(Identifier,FILE_FLAG_FIRST_PIPE_INSTANCE)"];
"1000148" [label="(Call,PIPE_ACCESS_DUPLEX | FILE_FLAG_OVERLAPPED | FILE_FLAG_FIRST_PIPE_INSTANCE)"];
"1000149" [label="(Identifier,PIPE_ACCESS_DUPLEX)"];
"1000155" [label="(Identifier,PIPE_READMODE_BYTE)"];
"1000153" [label="(Call,PIPE_TYPE_BYTE | PIPE_READMODE_BYTE)"];
"1000154" [label="(Identifier,PIPE_TYPE_BYTE)"];
"1000156" [label="(Literal,1)"];
"1000102" [label="(MethodParameterIn,const std::string& pipe_security_descriptor)"];
"1000287" [label="(MethodParameterOut,const std::string& pipe_security_descriptor)"];
"1000157" [label="(Identifier,IPC::Channel::kReadBufferSize)"];
"1000158" [label="(Identifier,IPC::Channel::kReadBufferSize)"];
"1000159" [label="(Literal,5000)"];
"1000160" [label="(Call,&security_attributes)"];
"1000161" [label="(Identifier,security_attributes)"];
"1000162" [label="(ControlStructure,if (!pipe.IsValid()))"];
"1000165" [label="(Block,)"];
"1000163" [label="(Call,!pipe.IsValid())"];
"1000164" [label="(Call,pipe.IsValid())"];
"1000168" [label="(Identifier,ERROR)"];
"1000166" [label="(Call,LOG_GETLASTERROR(ERROR) <<\n        \"Failed to create the server end of the Chromoting IPC channel\")"];
"1000167" [label="(Call,LOG_GETLASTERROR(ERROR))"];
"1000169" [label="(Literal,\"Failed to create the server end of the Chromoting IPC channel\")"];
"1000171" [label="(Call,security_attributes.lpSecurityDescriptor)"];
"1000172" [label="(Identifier,security_attributes)"];
"1000173" [label="(FieldIdentifier,lpSecurityDescriptor)"];
"1000170" [label="(Call,LocalFree(security_attributes.lpSecurityDescriptor))"];
"1000175" [label="(Identifier,false)"];
"1000174" [label="(Return,return false;)"];
"1000104" [label="(Block,)"];
"1000103" [label="(MethodParameterIn,base::win::ScopedHandle* pipe_out)"];
"1000288" [label="(MethodParameterOut,base::win::ScopedHandle* pipe_out)"];
"1000177" [label="(Call,security_attributes.lpSecurityDescriptor)"];
"1000178" [label="(Identifier,security_attributes)"];
"1000176" [label="(Call,LocalFree(security_attributes.lpSecurityDescriptor))"];
"1000179" [label="(FieldIdentifier,lpSecurityDescriptor)"];
"1000183" [label="(Call,pipe.Pass())"];
"1000180" [label="(Call,*pipe_out = pipe.Pass())"];
"1000181" [label="(Call,*pipe_out)"];
"1000182" [label="(Identifier,pipe_out)"];
"1000185" [label="(Identifier,true)"];
"1000184" [label="(Return,return true;)"];
"1000109" [label="(FieldIdentifier,nLength)"];
"1000106" [label="(Call,security_attributes.nLength = sizeof(security_attributes))"];
"1000107" [label="(Call,security_attributes.nLength)"];
"1000108" [label="(Identifier,security_attributes)"];
"1000110" [label="(Call,sizeof(security_attributes))"];
"1000111" [label="(Identifier,security_attributes)"];
"1000112" [label="(Call,security_attributes.bInheritHandle = FALSE)"];
"1000113" [label="(Call,security_attributes.bInheritHandle)"];
"1000114" [label="(Identifier,security_attributes)"];
"1000115" [label="(FieldIdentifier,bInheritHandle)"];
"1000116" [label="(Identifier,FALSE)"];
"1000120" [label="(Literal,0)"];
"1000118" [label="(Call,security_descriptor_length = 0)"];
"1000119" [label="(Identifier,security_descriptor_length)"];
"1000186" -> "1000100"  [label="AST: "];
"1000186" -> "1000139"  [label="CFG: "];
"1000186" -> "1000174"  [label="CFG: "];
"1000186" -> "1000184"  [label="CFG: "];
"1000184" -> "1000186"  [label="DDG: <RET>"];
"1000139" -> "1000186"  [label="DDG: <RET>"];
"1000142" -> "1000186"  [label="DDG: pipe_name.append(channel_name)"];
"1000142" -> "1000186"  [label="DDG: channel_name"];
"1000123" -> "1000186"  [label="DDG: SDDL_REVISION_1"];
"1000123" -> "1000186"  [label="DDG: UTF8ToUTF16(pipe_security_descriptor).c_str()"];
"1000123" -> "1000186"  [label="DDG: reinterpret_cast<PSECURITY_DESCRIPTOR*>(\n              &security_attributes.lpSecurityDescriptor)"];
"1000123" -> "1000186"  [label="DDG: &security_descriptor_length"];
"1000146" -> "1000186"  [label="DDG: IPC::Channel::kReadBufferSize"];
"1000146" -> "1000186"  [label="DDG: &security_attributes"];
"1000146" -> "1000186"  [label="DDG: PIPE_TYPE_BYTE | PIPE_READMODE_BYTE"];
"1000146" -> "1000186"  [label="DDG: PIPE_ACCESS_DUPLEX | FILE_FLAG_OVERLAPPED | FILE_FLAG_FIRST_PIPE_INSTANCE"];
"1000146" -> "1000186"  [label="DDG: UTF8ToUTF16(pipe_name).c_str()"];
"1000180" -> "1000186"  [label="DDG: *pipe_out"];
"1000180" -> "1000186"  [label="DDG: pipe.Pass()"];
"1000153" -> "1000186"  [label="DDG: PIPE_TYPE_BYTE"];
"1000153" -> "1000186"  [label="DDG: PIPE_READMODE_BYTE"];
"1000126" -> "1000186"  [label="DDG: &security_attributes.lpSecurityDescriptor"];
"1000118" -> "1000186"  [label="DDG: security_descriptor_length"];
"1000167" -> "1000186"  [label="DDG: ERROR"];
"1000163" -> "1000186"  [label="DDG: pipe.IsValid()"];
"1000163" -> "1000186"  [label="DDG: !pipe.IsValid()"];
"1000106" -> "1000186"  [label="DDG: security_attributes.nLength"];
"1000150" -> "1000186"  [label="DDG: FILE_FLAG_OVERLAPPED"];
"1000150" -> "1000186"  [label="DDG: FILE_FLAG_FIRST_PIPE_INSTANCE"];
"1000122" -> "1000186"  [label="DDG: ConvertStringSecurityDescriptorToSecurityDescriptor(\n          UTF8ToUTF16(pipe_security_descriptor).c_str(),\n          SDDL_REVISION_1,\n          reinterpret_cast<PSECURITY_DESCRIPTOR*>(\n              &security_attributes.lpSecurityDescriptor),\n          &security_descriptor_length)"];
"1000122" -> "1000186"  [label="DDG: !ConvertStringSecurityDescriptorToSecurityDescriptor(\n          UTF8ToUTF16(pipe_security_descriptor).c_str(),\n          SDDL_REVISION_1,\n          reinterpret_cast<PSECURITY_DESCRIPTOR*>(\n              &security_attributes.lpSecurityDescriptor),\n          &security_descriptor_length)"];
"1000166" -> "1000186"  [label="DDG: LOG_GETLASTERROR(ERROR) <<\n        \\"Failed to create the server end of the Chromoting IPC channel\\""];
"1000166" -> "1000186"  [label="DDG: LOG_GETLASTERROR(ERROR)"];
"1000103" -> "1000186"  [label="DDG: pipe_out"];
"1000148" -> "1000186"  [label="DDG: PIPE_ACCESS_DUPLEX"];
"1000148" -> "1000186"  [label="DDG: FILE_FLAG_OVERLAPPED | FILE_FLAG_FIRST_PIPE_INSTANCE"];
"1000176" -> "1000186"  [label="DDG: LocalFree(security_attributes.lpSecurityDescriptor)"];
"1000176" -> "1000186"  [label="DDG: security_attributes.lpSecurityDescriptor"];
"1000102" -> "1000186"  [label="DDG: pipe_security_descriptor"];
"1000135" -> "1000186"  [label="DDG: LOG_GETLASTERROR(ERROR) <<\n        \\"Failed to create a security descriptor for the Chromoting IPC channel\\""];
"1000135" -> "1000186"  [label="DDG: LOG_GETLASTERROR(ERROR)"];
"1000112" -> "1000186"  [label="DDG: security_attributes.bInheritHandle"];
"1000112" -> "1000186"  [label="DDG: FALSE"];
"1000101" -> "1000186"  [label="DDG: channel_name"];
"1000145" -> "1000186"  [label="DDG: pipe.Set(CreateNamedPipe(\n      UTF8ToUTF16(pipe_name).c_str(),\n      PIPE_ACCESS_DUPLEX | FILE_FLAG_OVERLAPPED | FILE_FLAG_FIRST_PIPE_INSTANCE,\n      PIPE_TYPE_BYTE | PIPE_READMODE_BYTE,\n      1,\n      IPC::Channel::kReadBufferSize,\n      IPC::Channel::kReadBufferSize,\n      5000,\n      &security_attributes))"];
"1000145" -> "1000186"  [label="DDG: CreateNamedPipe(\n      UTF8ToUTF16(pipe_name).c_str(),\n      PIPE_ACCESS_DUPLEX | FILE_FLAG_OVERLAPPED | FILE_FLAG_FIRST_PIPE_INSTANCE,\n      PIPE_TYPE_BYTE | PIPE_READMODE_BYTE,\n      1,\n      IPC::Channel::kReadBufferSize,\n      IPC::Channel::kReadBufferSize,\n      5000,\n      &security_attributes)"];
"1000170" -> "1000186"  [label="DDG: security_attributes.lpSecurityDescriptor"];
"1000170" -> "1000186"  [label="DDG: LocalFree(security_attributes.lpSecurityDescriptor)"];
"1000110" -> "1000186"  [label="DDG: security_attributes"];
"1000136" -> "1000186"  [label="DDG: ERROR"];
"1000174" -> "1000186"  [label="DDG: <RET>"];
"1000121" -> "1000104"  [label="AST: "];
"1000122" -> "1000121"  [label="AST: "];
"1000134" -> "1000121"  [label="AST: "];
"1000122" -> "1000121"  [label="AST: "];
"1000122" -> "1000123"  [label="CFG: "];
"1000123" -> "1000122"  [label="AST: "];
"1000137" -> "1000122"  [label="CFG: "];
"1000143" -> "1000122"  [label="CFG: "];
"1000122" -> "1000186"  [label="DDG: ConvertStringSecurityDescriptorToSecurityDescriptor(\n          UTF8ToUTF16(pipe_security_descriptor).c_str(),\n          SDDL_REVISION_1,\n          reinterpret_cast<PSECURITY_DESCRIPTOR*>(\n              &security_attributes.lpSecurityDescriptor),\n          &security_descriptor_length)"];
"1000122" -> "1000186"  [label="DDG: !ConvertStringSecurityDescriptorToSecurityDescriptor(\n          UTF8ToUTF16(pipe_security_descriptor).c_str(),\n          SDDL_REVISION_1,\n          reinterpret_cast<PSECURITY_DESCRIPTOR*>(\n              &security_attributes.lpSecurityDescriptor),\n          &security_descriptor_length)"];
"1000123" -> "1000122"  [label="DDG: UTF8ToUTF16(pipe_security_descriptor).c_str()"];
"1000123" -> "1000122"  [label="DDG: SDDL_REVISION_1"];
"1000123" -> "1000122"  [label="DDG: reinterpret_cast<PSECURITY_DESCRIPTOR*>(\n              &security_attributes.lpSecurityDescriptor)"];
"1000123" -> "1000122"  [label="DDG: &security_descriptor_length"];
"1000123" -> "1000122"  [label="AST: "];
"1000123" -> "1000132"  [label="CFG: "];
"1000124" -> "1000123"  [label="AST: "];
"1000125" -> "1000123"  [label="AST: "];
"1000126" -> "1000123"  [label="AST: "];
"1000132" -> "1000123"  [label="AST: "];
"1000122" -> "1000123"  [label="CFG: "];
"1000123" -> "1000186"  [label="DDG: SDDL_REVISION_1"];
"1000123" -> "1000186"  [label="DDG: UTF8ToUTF16(pipe_security_descriptor).c_str()"];
"1000123" -> "1000186"  [label="DDG: reinterpret_cast<PSECURITY_DESCRIPTOR*>(\n              &security_attributes.lpSecurityDescriptor)"];
"1000123" -> "1000186"  [label="DDG: &security_descriptor_length"];
"1000123" -> "1000122"  [label="DDG: UTF8ToUTF16(pipe_security_descriptor).c_str()"];
"1000123" -> "1000122"  [label="DDG: SDDL_REVISION_1"];
"1000123" -> "1000122"  [label="DDG: reinterpret_cast<PSECURITY_DESCRIPTOR*>(\n              &security_attributes.lpSecurityDescriptor)"];
"1000123" -> "1000122"  [label="DDG: &security_descriptor_length"];
"1000126" -> "1000123"  [label="DDG: &security_attributes.lpSecurityDescriptor"];
"1000124" -> "1000123"  [label="AST: "];
"1000124" -> "1000118"  [label="CFG: "];
"1000125" -> "1000124"  [label="CFG: "];
"1000125" -> "1000123"  [label="AST: "];
"1000125" -> "1000124"  [label="CFG: "];
"1000127" -> "1000125"  [label="CFG: "];
"1000126" -> "1000123"  [label="AST: "];
"1000126" -> "1000128"  [label="CFG: "];
"1000127" -> "1000126"  [label="AST: "];
"1000128" -> "1000126"  [label="AST: "];
"1000133" -> "1000126"  [label="CFG: "];
"1000126" -> "1000186"  [label="DDG: &security_attributes.lpSecurityDescriptor"];
"1000126" -> "1000123"  [label="DDG: &security_attributes.lpSecurityDescriptor"];
"1000126" -> "1000170"  [label="DDG: &security_attributes.lpSecurityDescriptor"];
"1000126" -> "1000176"  [label="DDG: &security_attributes.lpSecurityDescriptor"];
"1000128" -> "1000126"  [label="AST: "];
"1000128" -> "1000129"  [label="CFG: "];
"1000129" -> "1000128"  [label="AST: "];
"1000126" -> "1000128"  [label="CFG: "];
"1000129" -> "1000128"  [label="AST: "];
"1000129" -> "1000131"  [label="CFG: "];
"1000130" -> "1000129"  [label="AST: "];
"1000131" -> "1000129"  [label="AST: "];
"1000128" -> "1000129"  [label="CFG: "];
"1000130" -> "1000129"  [label="AST: "];
"1000130" -> "1000127"  [label="CFG: "];
"1000131" -> "1000130"  [label="CFG: "];
"1000131" -> "1000129"  [label="AST: "];
"1000131" -> "1000130"  [label="CFG: "];
"1000129" -> "1000131"  [label="CFG: "];
"1000132" -> "1000123"  [label="AST: "];
"1000132" -> "1000133"  [label="CFG: "];
"1000133" -> "1000132"  [label="AST: "];
"1000123" -> "1000132"  [label="CFG: "];
"1000133" -> "1000132"  [label="AST: "];
"1000133" -> "1000126"  [label="CFG: "];
"1000132" -> "1000133"  [label="CFG: "];
"1000134" -> "1000121"  [label="AST: "];
"1000135" -> "1000134"  [label="AST: "];
"1000139" -> "1000134"  [label="AST: "];
"1000137" -> "1000136"  [label="AST: "];
"1000137" -> "1000122"  [label="CFG: "];
"1000136" -> "1000137"  [label="CFG: "];
"1000135" -> "1000134"  [label="AST: "];
"1000135" -> "1000138"  [label="CFG: "];
"1000136" -> "1000135"  [label="AST: "];
"1000138" -> "1000135"  [label="AST: "];
"1000140" -> "1000135"  [label="CFG: "];
"1000135" -> "1000186"  [label="DDG: LOG_GETLASTERROR(ERROR) <<\n        \\"Failed to create a security descriptor for the Chromoting IPC channel\\""];
"1000135" -> "1000186"  [label="DDG: LOG_GETLASTERROR(ERROR)"];
"1000136" -> "1000135"  [label="DDG: ERROR"];
"1000136" -> "1000135"  [label="AST: "];
"1000136" -> "1000137"  [label="CFG: "];
"1000137" -> "1000136"  [label="AST: "];
"1000138" -> "1000136"  [label="CFG: "];
"1000136" -> "1000186"  [label="DDG: ERROR"];
"1000136" -> "1000135"  [label="DDG: ERROR"];
"1000138" -> "1000135"  [label="AST: "];
"1000138" -> "1000136"  [label="CFG: "];
"1000135" -> "1000138"  [label="CFG: "];
"1000140" -> "1000139"  [label="AST: "];
"1000140" -> "1000135"  [label="CFG: "];
"1000139" -> "1000140"  [label="CFG: "];
"1000140" -> "1000139"  [label="DDG: false"];
"1000139" -> "1000134"  [label="AST: "];
"1000139" -> "1000140"  [label="CFG: "];
"1000140" -> "1000139"  [label="AST: "];
"1000186" -> "1000139"  [label="CFG: "];
"1000139" -> "1000186"  [label="DDG: <RET>"];
"1000140" -> "1000139"  [label="DDG: false"];
"1000101" -> "1000100"  [label="AST: "];
"1000101" -> "1000186"  [label="DDG: channel_name"];
"1000101" -> "1000142"  [label="DDG: channel_name"];
"1000286" -> "1000100"  [label="AST: "];
"1000143" -> "1000142"  [label="AST: "];
"1000143" -> "1000122"  [label="CFG: "];
"1000142" -> "1000143"  [label="CFG: "];
"1000142" -> "1000104"  [label="AST: "];
"1000142" -> "1000143"  [label="CFG: "];
"1000143" -> "1000142"  [label="AST: "];
"1000147" -> "1000142"  [label="CFG: "];
"1000142" -> "1000186"  [label="DDG: pipe_name.append(channel_name)"];
"1000142" -> "1000186"  [label="DDG: channel_name"];
"1000101" -> "1000142"  [label="DDG: channel_name"];
"1000146" -> "1000145"  [label="AST: "];
"1000146" -> "1000160"  [label="CFG: "];
"1000147" -> "1000146"  [label="AST: "];
"1000148" -> "1000146"  [label="AST: "];
"1000153" -> "1000146"  [label="AST: "];
"1000156" -> "1000146"  [label="AST: "];
"1000157" -> "1000146"  [label="AST: "];
"1000158" -> "1000146"  [label="AST: "];
"1000159" -> "1000146"  [label="AST: "];
"1000160" -> "1000146"  [label="AST: "];
"1000145" -> "1000146"  [label="CFG: "];
"1000146" -> "1000186"  [label="DDG: IPC::Channel::kReadBufferSize"];
"1000146" -> "1000186"  [label="DDG: &security_attributes"];
"1000146" -> "1000186"  [label="DDG: PIPE_TYPE_BYTE | PIPE_READMODE_BYTE"];
"1000146" -> "1000186"  [label="DDG: PIPE_ACCESS_DUPLEX | FILE_FLAG_OVERLAPPED | FILE_FLAG_FIRST_PIPE_INSTANCE"];
"1000146" -> "1000186"  [label="DDG: UTF8ToUTF16(pipe_name).c_str()"];
"1000146" -> "1000145"  [label="DDG: PIPE_TYPE_BYTE | PIPE_READMODE_BYTE"];
"1000146" -> "1000145"  [label="DDG: UTF8ToUTF16(pipe_name).c_str()"];
"1000146" -> "1000145"  [label="DDG: PIPE_ACCESS_DUPLEX | FILE_FLAG_OVERLAPPED | FILE_FLAG_FIRST_PIPE_INSTANCE"];
"1000146" -> "1000145"  [label="DDG: IPC::Channel::kReadBufferSize"];
"1000146" -> "1000145"  [label="DDG: &security_attributes"];
"1000146" -> "1000145"  [label="DDG: 1"];
"1000146" -> "1000145"  [label="DDG: 5000"];
"1000148" -> "1000146"  [label="DDG: PIPE_ACCESS_DUPLEX"];
"1000148" -> "1000146"  [label="DDG: FILE_FLAG_OVERLAPPED | FILE_FLAG_FIRST_PIPE_INSTANCE"];
"1000153" -> "1000146"  [label="DDG: PIPE_TYPE_BYTE"];
"1000153" -> "1000146"  [label="DDG: PIPE_READMODE_BYTE"];
"1000145" -> "1000104"  [label="AST: "];
"1000145" -> "1000146"  [label="CFG: "];
"1000146" -> "1000145"  [label="AST: "];
"1000164" -> "1000145"  [label="CFG: "];
"1000145" -> "1000186"  [label="DDG: pipe.Set(CreateNamedPipe(\n      UTF8ToUTF16(pipe_name).c_str(),\n      PIPE_ACCESS_DUPLEX | FILE_FLAG_OVERLAPPED | FILE_FLAG_FIRST_PIPE_INSTANCE,\n      PIPE_TYPE_BYTE | PIPE_READMODE_BYTE,\n      1,\n      IPC::Channel::kReadBufferSize,\n      IPC::Channel::kReadBufferSize,\n      5000,\n      &security_attributes))"];
"1000145" -> "1000186"  [label="DDG: CreateNamedPipe(\n      UTF8ToUTF16(pipe_name).c_str(),\n      PIPE_ACCESS_DUPLEX | FILE_FLAG_OVERLAPPED | FILE_FLAG_FIRST_PIPE_INSTANCE,\n      PIPE_TYPE_BYTE | PIPE_READMODE_BYTE,\n      1,\n      IPC::Channel::kReadBufferSize,\n      IPC::Channel::kReadBufferSize,\n      5000,\n      &security_attributes)"];
"1000146" -> "1000145"  [label="DDG: PIPE_TYPE_BYTE | PIPE_READMODE_BYTE"];
"1000146" -> "1000145"  [label="DDG: UTF8ToUTF16(pipe_name).c_str()"];
"1000146" -> "1000145"  [label="DDG: PIPE_ACCESS_DUPLEX | FILE_FLAG_OVERLAPPED | FILE_FLAG_FIRST_PIPE_INSTANCE"];
"1000146" -> "1000145"  [label="DDG: IPC::Channel::kReadBufferSize"];
"1000146" -> "1000145"  [label="DDG: &security_attributes"];
"1000146" -> "1000145"  [label="DDG: 1"];
"1000146" -> "1000145"  [label="DDG: 5000"];
"1000147" -> "1000146"  [label="AST: "];
"1000147" -> "1000142"  [label="CFG: "];
"1000149" -> "1000147"  [label="CFG: "];
"1000150" -> "1000148"  [label="AST: "];
"1000150" -> "1000152"  [label="CFG: "];
"1000151" -> "1000150"  [label="AST: "];
"1000152" -> "1000150"  [label="AST: "];
"1000148" -> "1000150"  [label="CFG: "];
"1000150" -> "1000186"  [label="DDG: FILE_FLAG_OVERLAPPED"];
"1000150" -> "1000186"  [label="DDG: FILE_FLAG_FIRST_PIPE_INSTANCE"];
"1000150" -> "1000148"  [label="DDG: FILE_FLAG_OVERLAPPED"];
"1000150" -> "1000148"  [label="DDG: FILE_FLAG_FIRST_PIPE_INSTANCE"];
"1000151" -> "1000150"  [label="AST: "];
"1000151" -> "1000149"  [label="CFG: "];
"1000152" -> "1000151"  [label="CFG: "];
"1000152" -> "1000150"  [label="AST: "];
"1000152" -> "1000151"  [label="CFG: "];
"1000150" -> "1000152"  [label="CFG: "];
"1000148" -> "1000146"  [label="AST: "];
"1000148" -> "1000150"  [label="CFG: "];
"1000149" -> "1000148"  [label="AST: "];
"1000150" -> "1000148"  [label="AST: "];
"1000154" -> "1000148"  [label="CFG: "];
"1000148" -> "1000186"  [label="DDG: PIPE_ACCESS_DUPLEX"];
"1000148" -> "1000186"  [label="DDG: FILE_FLAG_OVERLAPPED | FILE_FLAG_FIRST_PIPE_INSTANCE"];
"1000148" -> "1000146"  [label="DDG: PIPE_ACCESS_DUPLEX"];
"1000148" -> "1000146"  [label="DDG: FILE_FLAG_OVERLAPPED | FILE_FLAG_FIRST_PIPE_INSTANCE"];
"1000150" -> "1000148"  [label="DDG: FILE_FLAG_OVERLAPPED"];
"1000150" -> "1000148"  [label="DDG: FILE_FLAG_FIRST_PIPE_INSTANCE"];
"1000149" -> "1000148"  [label="AST: "];
"1000149" -> "1000147"  [label="CFG: "];
"1000151" -> "1000149"  [label="CFG: "];
"1000155" -> "1000153"  [label="AST: "];
"1000155" -> "1000154"  [label="CFG: "];
"1000153" -> "1000155"  [label="CFG: "];
"1000153" -> "1000146"  [label="AST: "];
"1000153" -> "1000155"  [label="CFG: "];
"1000154" -> "1000153"  [label="AST: "];
"1000155" -> "1000153"  [label="AST: "];
"1000156" -> "1000153"  [label="CFG: "];
"1000153" -> "1000186"  [label="DDG: PIPE_TYPE_BYTE"];
"1000153" -> "1000186"  [label="DDG: PIPE_READMODE_BYTE"];
"1000153" -> "1000146"  [label="DDG: PIPE_TYPE_BYTE"];
"1000153" -> "1000146"  [label="DDG: PIPE_READMODE_BYTE"];
"1000154" -> "1000153"  [label="AST: "];
"1000154" -> "1000148"  [label="CFG: "];
"1000155" -> "1000154"  [label="CFG: "];
"1000156" -> "1000146"  [label="AST: "];
"1000156" -> "1000153"  [label="CFG: "];
"1000157" -> "1000156"  [label="CFG: "];
"1000102" -> "1000100"  [label="AST: "];
"1000102" -> "1000186"  [label="DDG: pipe_security_descriptor"];
"1000287" -> "1000100"  [label="AST: "];
"1000157" -> "1000146"  [label="AST: "];
"1000157" -> "1000156"  [label="CFG: "];
"1000158" -> "1000157"  [label="CFG: "];
"1000158" -> "1000146"  [label="AST: "];
"1000158" -> "1000157"  [label="CFG: "];
"1000159" -> "1000158"  [label="CFG: "];
"1000159" -> "1000146"  [label="AST: "];
"1000159" -> "1000158"  [label="CFG: "];
"1000161" -> "1000159"  [label="CFG: "];
"1000160" -> "1000146"  [label="AST: "];
"1000160" -> "1000161"  [label="CFG: "];
"1000161" -> "1000160"  [label="AST: "];
"1000146" -> "1000160"  [label="CFG: "];
"1000161" -> "1000160"  [label="AST: "];
"1000161" -> "1000159"  [label="CFG: "];
"1000160" -> "1000161"  [label="CFG: "];
"1000162" -> "1000104"  [label="AST: "];
"1000163" -> "1000162"  [label="AST: "];
"1000165" -> "1000162"  [label="AST: "];
"1000165" -> "1000162"  [label="AST: "];
"1000166" -> "1000165"  [label="AST: "];
"1000170" -> "1000165"  [label="AST: "];
"1000174" -> "1000165"  [label="AST: "];
"1000163" -> "1000162"  [label="AST: "];
"1000163" -> "1000164"  [label="CFG: "];
"1000164" -> "1000163"  [label="AST: "];
"1000168" -> "1000163"  [label="CFG: "];
"1000178" -> "1000163"  [label="CFG: "];
"1000163" -> "1000186"  [label="DDG: pipe.IsValid()"];
"1000163" -> "1000186"  [label="DDG: !pipe.IsValid()"];
"1000164" -> "1000163"  [label="AST: "];
"1000164" -> "1000145"  [label="CFG: "];
"1000163" -> "1000164"  [label="CFG: "];
"1000168" -> "1000167"  [label="AST: "];
"1000168" -> "1000163"  [label="CFG: "];
"1000167" -> "1000168"  [label="CFG: "];
"1000166" -> "1000165"  [label="AST: "];
"1000166" -> "1000169"  [label="CFG: "];
"1000167" -> "1000166"  [label="AST: "];
"1000169" -> "1000166"  [label="AST: "];
"1000172" -> "1000166"  [label="CFG: "];
"1000166" -> "1000186"  [label="DDG: LOG_GETLASTERROR(ERROR) <<\n        \\"Failed to create the server end of the Chromoting IPC channel\\""];
"1000166" -> "1000186"  [label="DDG: LOG_GETLASTERROR(ERROR)"];
"1000167" -> "1000166"  [label="DDG: ERROR"];
"1000167" -> "1000166"  [label="AST: "];
"1000167" -> "1000168"  [label="CFG: "];
"1000168" -> "1000167"  [label="AST: "];
"1000169" -> "1000167"  [label="CFG: "];
"1000167" -> "1000186"  [label="DDG: ERROR"];
"1000167" -> "1000166"  [label="DDG: ERROR"];
"1000169" -> "1000166"  [label="AST: "];
"1000169" -> "1000167"  [label="CFG: "];
"1000166" -> "1000169"  [label="CFG: "];
"1000171" -> "1000170"  [label="AST: "];
"1000171" -> "1000173"  [label="CFG: "];
"1000172" -> "1000171"  [label="AST: "];
"1000173" -> "1000171"  [label="AST: "];
"1000170" -> "1000171"  [label="CFG: "];
"1000172" -> "1000171"  [label="AST: "];
"1000172" -> "1000166"  [label="CFG: "];
"1000173" -> "1000172"  [label="CFG: "];
"1000173" -> "1000171"  [label="AST: "];
"1000173" -> "1000172"  [label="CFG: "];
"1000171" -> "1000173"  [label="CFG: "];
"1000170" -> "1000165"  [label="AST: "];
"1000170" -> "1000171"  [label="CFG: "];
"1000171" -> "1000170"  [label="AST: "];
"1000175" -> "1000170"  [label="CFG: "];
"1000170" -> "1000186"  [label="DDG: security_attributes.lpSecurityDescriptor"];
"1000170" -> "1000186"  [label="DDG: LocalFree(security_attributes.lpSecurityDescriptor)"];
"1000126" -> "1000170"  [label="DDG: &security_attributes.lpSecurityDescriptor"];
"1000175" -> "1000174"  [label="AST: "];
"1000175" -> "1000170"  [label="CFG: "];
"1000174" -> "1000175"  [label="CFG: "];
"1000175" -> "1000174"  [label="DDG: false"];
"1000174" -> "1000165"  [label="AST: "];
"1000174" -> "1000175"  [label="CFG: "];
"1000175" -> "1000174"  [label="AST: "];
"1000186" -> "1000174"  [label="CFG: "];
"1000174" -> "1000186"  [label="DDG: <RET>"];
"1000175" -> "1000174"  [label="DDG: false"];
"1000104" -> "1000100"  [label="AST: "];
"1000105" -> "1000104"  [label="AST: "];
"1000106" -> "1000104"  [label="AST: "];
"1000112" -> "1000104"  [label="AST: "];
"1000117" -> "1000104"  [label="AST: "];
"1000118" -> "1000104"  [label="AST: "];
"1000121" -> "1000104"  [label="AST: "];
"1000141" -> "1000104"  [label="AST: "];
"1000142" -> "1000104"  [label="AST: "];
"1000144" -> "1000104"  [label="AST: "];
"1000145" -> "1000104"  [label="AST: "];
"1000162" -> "1000104"  [label="AST: "];
"1000176" -> "1000104"  [label="AST: "];
"1000180" -> "1000104"  [label="AST: "];
"1000184" -> "1000104"  [label="AST: "];
"1000103" -> "1000100"  [label="AST: "];
"1000103" -> "1000186"  [label="DDG: pipe_out"];
"1000288" -> "1000100"  [label="AST: "];
"1000177" -> "1000176"  [label="AST: "];
"1000177" -> "1000179"  [label="CFG: "];
"1000178" -> "1000177"  [label="AST: "];
"1000179" -> "1000177"  [label="AST: "];
"1000176" -> "1000177"  [label="CFG: "];
"1000178" -> "1000177"  [label="AST: "];
"1000178" -> "1000163"  [label="CFG: "];
"1000179" -> "1000178"  [label="CFG: "];
"1000176" -> "1000104"  [label="AST: "];
"1000176" -> "1000177"  [label="CFG: "];
"1000177" -> "1000176"  [label="AST: "];
"1000182" -> "1000176"  [label="CFG: "];
"1000176" -> "1000186"  [label="DDG: LocalFree(security_attributes.lpSecurityDescriptor)"];
"1000176" -> "1000186"  [label="DDG: security_attributes.lpSecurityDescriptor"];
"1000126" -> "1000176"  [label="DDG: &security_attributes.lpSecurityDescriptor"];
"1000179" -> "1000177"  [label="AST: "];
"1000179" -> "1000178"  [label="CFG: "];
"1000177" -> "1000179"  [label="CFG: "];
"1000183" -> "1000180"  [label="AST: "];
"1000183" -> "1000181"  [label="CFG: "];
"1000180" -> "1000183"  [label="CFG: "];
"1000180" -> "1000104"  [label="AST: "];
"1000180" -> "1000183"  [label="CFG: "];
"1000181" -> "1000180"  [label="AST: "];
"1000183" -> "1000180"  [label="AST: "];
"1000185" -> "1000180"  [label="CFG: "];
"1000180" -> "1000186"  [label="DDG: *pipe_out"];
"1000180" -> "1000186"  [label="DDG: pipe.Pass()"];
"1000181" -> "1000180"  [label="AST: "];
"1000181" -> "1000182"  [label="CFG: "];
"1000182" -> "1000181"  [label="AST: "];
"1000183" -> "1000181"  [label="CFG: "];
"1000182" -> "1000181"  [label="AST: "];
"1000182" -> "1000176"  [label="CFG: "];
"1000181" -> "1000182"  [label="CFG: "];
"1000185" -> "1000184"  [label="AST: "];
"1000185" -> "1000180"  [label="CFG: "];
"1000184" -> "1000185"  [label="CFG: "];
"1000185" -> "1000184"  [label="DDG: true"];
"1000184" -> "1000104"  [label="AST: "];
"1000184" -> "1000185"  [label="CFG: "];
"1000185" -> "1000184"  [label="AST: "];
"1000186" -> "1000184"  [label="CFG: "];
"1000184" -> "1000186"  [label="DDG: <RET>"];
"1000185" -> "1000184"  [label="DDG: true"];
"1000109" -> "1000107"  [label="AST: "];
"1000109" -> "1000108"  [label="CFG: "];
"1000107" -> "1000109"  [label="CFG: "];
"1000106" -> "1000104"  [label="AST: "];
"1000106" -> "1000110"  [label="CFG: "];
"1000107" -> "1000106"  [label="AST: "];
"1000110" -> "1000106"  [label="AST: "];
"1000114" -> "1000106"  [label="CFG: "];
"1000106" -> "1000186"  [label="DDG: security_attributes.nLength"];
"1000107" -> "1000106"  [label="AST: "];
"1000107" -> "1000109"  [label="CFG: "];
"1000108" -> "1000107"  [label="AST: "];
"1000109" -> "1000107"  [label="AST: "];
"1000111" -> "1000107"  [label="CFG: "];
"1000108" -> "1000107"  [label="AST: "];
"1000108" -> "1000100"  [label="CFG: "];
"1000109" -> "1000108"  [label="CFG: "];
"1000110" -> "1000106"  [label="AST: "];
"1000110" -> "1000111"  [label="CFG: "];
"1000111" -> "1000110"  [label="AST: "];
"1000106" -> "1000110"  [label="CFG: "];
"1000110" -> "1000186"  [label="DDG: security_attributes"];
"1000111" -> "1000110"  [label="AST: "];
"1000111" -> "1000107"  [label="CFG: "];
"1000110" -> "1000111"  [label="CFG: "];
"1000112" -> "1000104"  [label="AST: "];
"1000112" -> "1000116"  [label="CFG: "];
"1000113" -> "1000112"  [label="AST: "];
"1000116" -> "1000112"  [label="AST: "];
"1000119" -> "1000112"  [label="CFG: "];
"1000112" -> "1000186"  [label="DDG: security_attributes.bInheritHandle"];
"1000112" -> "1000186"  [label="DDG: FALSE"];
"1000113" -> "1000112"  [label="AST: "];
"1000113" -> "1000115"  [label="CFG: "];
"1000114" -> "1000113"  [label="AST: "];
"1000115" -> "1000113"  [label="AST: "];
"1000116" -> "1000113"  [label="CFG: "];
"1000114" -> "1000113"  [label="AST: "];
"1000114" -> "1000106"  [label="CFG: "];
"1000115" -> "1000114"  [label="CFG: "];
"1000115" -> "1000113"  [label="AST: "];
"1000115" -> "1000114"  [label="CFG: "];
"1000113" -> "1000115"  [label="CFG: "];
"1000116" -> "1000112"  [label="AST: "];
"1000116" -> "1000113"  [label="CFG: "];
"1000112" -> "1000116"  [label="CFG: "];
"1000120" -> "1000118"  [label="AST: "];
"1000120" -> "1000119"  [label="CFG: "];
"1000118" -> "1000120"  [label="CFG: "];
"1000118" -> "1000104"  [label="AST: "];
"1000118" -> "1000120"  [label="CFG: "];
"1000119" -> "1000118"  [label="AST: "];
"1000120" -> "1000118"  [label="AST: "];
"1000124" -> "1000118"  [label="CFG: "];
"1000118" -> "1000186"  [label="DDG: security_descriptor_length"];
"1000119" -> "1000118"  [label="AST: "];
"1000119" -> "1000112"  [label="CFG: "];
"1000120" -> "1000119"  [label="CFG: "];
}
