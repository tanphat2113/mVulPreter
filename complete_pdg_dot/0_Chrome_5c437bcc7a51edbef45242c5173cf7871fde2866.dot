digraph "0_Chrome_5c437bcc7a51edbef45242c5173cf7871fde2866" {
"1000162" [label="(MethodReturn,bool)"];
"1000113" [label="(Call,* extension =\n      extension_info_map->extensions().GetByID(extension_id))"];
"1000114" [label="(Identifier,extension)"];
"1000116" [label="(Identifier,extension_id)"];
"1000115" [label="(Call,extension_info_map->extensions().GetByID(extension_id))"];
"1000117" [label="(ControlStructure,if (!extension))"];
"1000118" [label="(Call,!extension)"];
"1000119" [label="(Identifier,extension)"];
"1000121" [label="(Identifier,false)"];
"1000120" [label="(Return,return false;)"];
"1000122" [label="(ControlStructure,if (crosses_incognito && !extension_info_map->CanCrossIncognito(extension)))"];
"1000125" [label="(Call,!extension_info_map->CanCrossIncognito(extension))"];
"1000126" [label="(Call,extension_info_map->CanCrossIncognito(extension))"];
"1000123" [label="(Call,crosses_incognito && !extension_info_map->CanCrossIncognito(extension))"];
"1000124" [label="(Identifier,crosses_incognito)"];
"1000127" [label="(Identifier,extension)"];
"1000129" [label="(Identifier,false)"];
"1000128" [label="(Return,return false;)"];
"1000131" [label="(Identifier,host_permissions_check)"];
"1000130" [label="(ControlStructure,switch (host_permissions_check))"];
"1000132" [label="(Block,)"];
"1000133" [label="(JumpTarget,case DO_NOT_CHECK_HOST:)"];
"1000101" [label="(MethodParameterIn,const extensions::InfoMap* extension_info_map)"];
"1000213" [label="(MethodParameterOut,const extensions::InfoMap* extension_info_map)"];
"1000134" [label="(ControlStructure,break;)"];
"1000135" [label="(JumpTarget,case REQUIRE_HOST_PERMISSION:)"];
"1000137" [label="(Call,!url.SchemeIs(url::kAboutScheme) &&\n          !extension->permissions_data()->HasHostPermission(url) &&\n          !url::IsSameOriginWith(url, extension->url()))"];
"1000138" [label="(Call,!url.SchemeIs(url::kAboutScheme))"];
"1000139" [label="(Call,url.SchemeIs(url::kAboutScheme))"];
"1000140" [label="(Identifier,url::kAboutScheme)"];
"1000136" [label="(ControlStructure,if (!url.SchemeIs(url::kAboutScheme) &&\n          !extension->permissions_data()->HasHostPermission(url) &&\n          !url::IsSameOriginWith(url, extension->url())))"];
"1000141" [label="(Call,!extension->permissions_data()->HasHostPermission(url) &&\n          !url::IsSameOriginWith(url, extension->url()))"];
"1000142" [label="(Call,!extension->permissions_data()->HasHostPermission(url))"];
"1000143" [label="(Call,extension->permissions_data()->HasHostPermission(url))"];
"1000144" [label="(Identifier,url)"];
"1000145" [label="(Call,!url::IsSameOriginWith(url, extension->url()))"];
"1000146" [label="(Call,url::IsSameOriginWith(url, extension->url()))"];
"1000147" [label="(Identifier,url)"];
"1000148" [label="(Call,extension->url())"];
"1000149" [label="(Block,)"];
"1000151" [label="(Identifier,false)"];
"1000150" [label="(Return,return false;)"];
"1000152" [label="(ControlStructure,break;)"];
"1000153" [label="(JumpTarget,case REQUIRE_ALL_URLS:)"];
"1000155" [label="(Call,!extension->permissions_data()->HasEffectiveAccessToAllHosts())"];
"1000156" [label="(Call,extension->permissions_data()->HasEffectiveAccessToAllHosts())"];
"1000154" [label="(ControlStructure,if (!extension->permissions_data()->HasEffectiveAccessToAllHosts()))"];
"1000102" [label="(MethodParameterIn,const std::string& extension_id)"];
"1000214" [label="(MethodParameterOut,const std::string& extension_id)"];
"1000158" [label="(Identifier,false)"];
"1000157" [label="(Return,return false;)"];
"1000159" [label="(ControlStructure,break;)"];
"1000160" [label="(Return,return true;)"];
"1000161" [label="(Identifier,true)"];
"1000103" [label="(MethodParameterIn,const GURL& url)"];
"1000215" [label="(MethodParameterOut,const GURL& url)"];
"1000104" [label="(MethodParameterIn,bool crosses_incognito)"];
"1000216" [label="(MethodParameterOut,bool crosses_incognito)"];
"1000105" [label="(MethodParameterIn,HostPermissionsCheck host_permissions_check)"];
"1000217" [label="(MethodParameterOut,HostPermissionsCheck host_permissions_check)"];
"1000106" [label="(Block,)"];
"1000107" [label="(ControlStructure,if (!extension_info_map))"];
"1000108" [label="(Call,!extension_info_map)"];
"1000109" [label="(Identifier,extension_info_map)"];
"1000111" [label="(Identifier,true)"];
"1000110" [label="(Return,return true;)"];
"1000162" -> "1000100"  [label="AST: "];
"1000162" -> "1000110"  [label="CFG: "];
"1000162" -> "1000120"  [label="CFG: "];
"1000162" -> "1000128"  [label="CFG: "];
"1000162" -> "1000150"  [label="CFG: "];
"1000162" -> "1000157"  [label="CFG: "];
"1000162" -> "1000160"  [label="CFG: "];
"1000120" -> "1000162"  [label="DDG: <RET>"];
"1000125" -> "1000162"  [label="DDG: extension_info_map->CanCrossIncognito(extension)"];
"1000141" -> "1000162"  [label="DDG: !extension->permissions_data()->HasHostPermission(url)"];
"1000141" -> "1000162"  [label="DDG: !url::IsSameOriginWith(url, extension->url())"];
"1000123" -> "1000162"  [label="DDG: !extension_info_map->CanCrossIncognito(extension)"];
"1000123" -> "1000162"  [label="DDG: crosses_incognito"];
"1000123" -> "1000162"  [label="DDG: crosses_incognito && !extension_info_map->CanCrossIncognito(extension)"];
"1000108" -> "1000162"  [label="DDG: !extension_info_map"];
"1000108" -> "1000162"  [label="DDG: extension_info_map"];
"1000104" -> "1000162"  [label="DDG: crosses_incognito"];
"1000105" -> "1000162"  [label="DDG: host_permissions_check"];
"1000139" -> "1000162"  [label="DDG: url::kAboutScheme"];
"1000113" -> "1000162"  [label="DDG: extension_info_map->extensions().GetByID(extension_id)"];
"1000146" -> "1000162"  [label="DDG: extension->url()"];
"1000146" -> "1000162"  [label="DDG: url"];
"1000126" -> "1000162"  [label="DDG: extension"];
"1000118" -> "1000162"  [label="DDG: !extension"];
"1000118" -> "1000162"  [label="DDG: extension"];
"1000102" -> "1000162"  [label="DDG: extension_id"];
"1000145" -> "1000162"  [label="DDG: url::IsSameOriginWith(url, extension->url())"];
"1000137" -> "1000162"  [label="DDG: !extension->permissions_data()->HasHostPermission(url) &&\n          !url::IsSameOriginWith(url, extension->url())"];
"1000137" -> "1000162"  [label="DDG: !url.SchemeIs(url::kAboutScheme)"];
"1000137" -> "1000162"  [label="DDG: !url.SchemeIs(url::kAboutScheme) &&\n          !extension->permissions_data()->HasHostPermission(url) &&\n          !url::IsSameOriginWith(url, extension->url())"];
"1000138" -> "1000162"  [label="DDG: url.SchemeIs(url::kAboutScheme)"];
"1000155" -> "1000162"  [label="DDG: !extension->permissions_data()->HasEffectiveAccessToAllHosts()"];
"1000155" -> "1000162"  [label="DDG: extension->permissions_data()->HasEffectiveAccessToAllHosts()"];
"1000103" -> "1000162"  [label="DDG: url"];
"1000143" -> "1000162"  [label="DDG: url"];
"1000101" -> "1000162"  [label="DDG: extension_info_map"];
"1000142" -> "1000162"  [label="DDG: extension->permissions_data()->HasHostPermission(url)"];
"1000115" -> "1000162"  [label="DDG: extension_id"];
"1000160" -> "1000162"  [label="DDG: <RET>"];
"1000128" -> "1000162"  [label="DDG: <RET>"];
"1000110" -> "1000162"  [label="DDG: <RET>"];
"1000150" -> "1000162"  [label="DDG: <RET>"];
"1000157" -> "1000162"  [label="DDG: <RET>"];
"1000113" -> "1000106"  [label="AST: "];
"1000113" -> "1000115"  [label="CFG: "];
"1000114" -> "1000113"  [label="AST: "];
"1000115" -> "1000113"  [label="AST: "];
"1000119" -> "1000113"  [label="CFG: "];
"1000113" -> "1000162"  [label="DDG: extension_info_map->extensions().GetByID(extension_id)"];
"1000115" -> "1000113"  [label="DDG: extension_id"];
"1000113" -> "1000118"  [label="DDG: extension"];
"1000114" -> "1000113"  [label="AST: "];
"1000114" -> "1000108"  [label="CFG: "];
"1000116" -> "1000114"  [label="CFG: "];
"1000116" -> "1000115"  [label="AST: "];
"1000116" -> "1000114"  [label="CFG: "];
"1000115" -> "1000116"  [label="CFG: "];
"1000115" -> "1000113"  [label="AST: "];
"1000115" -> "1000116"  [label="CFG: "];
"1000116" -> "1000115"  [label="AST: "];
"1000113" -> "1000115"  [label="CFG: "];
"1000115" -> "1000162"  [label="DDG: extension_id"];
"1000115" -> "1000113"  [label="DDG: extension_id"];
"1000102" -> "1000115"  [label="DDG: extension_id"];
"1000117" -> "1000106"  [label="AST: "];
"1000118" -> "1000117"  [label="AST: "];
"1000120" -> "1000117"  [label="AST: "];
"1000118" -> "1000117"  [label="AST: "];
"1000118" -> "1000119"  [label="CFG: "];
"1000119" -> "1000118"  [label="AST: "];
"1000121" -> "1000118"  [label="CFG: "];
"1000124" -> "1000118"  [label="CFG: "];
"1000118" -> "1000162"  [label="DDG: !extension"];
"1000118" -> "1000162"  [label="DDG: extension"];
"1000113" -> "1000118"  [label="DDG: extension"];
"1000118" -> "1000126"  [label="DDG: extension"];
"1000119" -> "1000118"  [label="AST: "];
"1000119" -> "1000113"  [label="CFG: "];
"1000118" -> "1000119"  [label="CFG: "];
"1000121" -> "1000120"  [label="AST: "];
"1000121" -> "1000118"  [label="CFG: "];
"1000120" -> "1000121"  [label="CFG: "];
"1000121" -> "1000120"  [label="DDG: false"];
"1000120" -> "1000117"  [label="AST: "];
"1000120" -> "1000121"  [label="CFG: "];
"1000121" -> "1000120"  [label="AST: "];
"1000162" -> "1000120"  [label="CFG: "];
"1000120" -> "1000162"  [label="DDG: <RET>"];
"1000121" -> "1000120"  [label="DDG: false"];
"1000122" -> "1000106"  [label="AST: "];
"1000123" -> "1000122"  [label="AST: "];
"1000128" -> "1000122"  [label="AST: "];
"1000125" -> "1000123"  [label="AST: "];
"1000125" -> "1000126"  [label="CFG: "];
"1000126" -> "1000125"  [label="AST: "];
"1000123" -> "1000125"  [label="CFG: "];
"1000125" -> "1000162"  [label="DDG: extension_info_map->CanCrossIncognito(extension)"];
"1000125" -> "1000123"  [label="DDG: extension_info_map->CanCrossIncognito(extension)"];
"1000126" -> "1000125"  [label="DDG: extension"];
"1000126" -> "1000125"  [label="AST: "];
"1000126" -> "1000127"  [label="CFG: "];
"1000127" -> "1000126"  [label="AST: "];
"1000125" -> "1000126"  [label="CFG: "];
"1000126" -> "1000162"  [label="DDG: extension"];
"1000126" -> "1000125"  [label="DDG: extension"];
"1000118" -> "1000126"  [label="DDG: extension"];
"1000123" -> "1000122"  [label="AST: "];
"1000123" -> "1000124"  [label="CFG: "];
"1000123" -> "1000125"  [label="CFG: "];
"1000124" -> "1000123"  [label="AST: "];
"1000125" -> "1000123"  [label="AST: "];
"1000129" -> "1000123"  [label="CFG: "];
"1000131" -> "1000123"  [label="CFG: "];
"1000123" -> "1000162"  [label="DDG: !extension_info_map->CanCrossIncognito(extension)"];
"1000123" -> "1000162"  [label="DDG: crosses_incognito"];
"1000123" -> "1000162"  [label="DDG: crosses_incognito && !extension_info_map->CanCrossIncognito(extension)"];
"1000104" -> "1000123"  [label="DDG: crosses_incognito"];
"1000125" -> "1000123"  [label="DDG: extension_info_map->CanCrossIncognito(extension)"];
"1000124" -> "1000123"  [label="AST: "];
"1000124" -> "1000118"  [label="CFG: "];
"1000127" -> "1000124"  [label="CFG: "];
"1000123" -> "1000124"  [label="CFG: "];
"1000127" -> "1000126"  [label="AST: "];
"1000127" -> "1000124"  [label="CFG: "];
"1000126" -> "1000127"  [label="CFG: "];
"1000129" -> "1000128"  [label="AST: "];
"1000129" -> "1000123"  [label="CFG: "];
"1000128" -> "1000129"  [label="CFG: "];
"1000129" -> "1000128"  [label="DDG: false"];
"1000128" -> "1000122"  [label="AST: "];
"1000128" -> "1000129"  [label="CFG: "];
"1000129" -> "1000128"  [label="AST: "];
"1000162" -> "1000128"  [label="CFG: "];
"1000128" -> "1000162"  [label="DDG: <RET>"];
"1000129" -> "1000128"  [label="DDG: false"];
"1000131" -> "1000130"  [label="AST: "];
"1000131" -> "1000123"  [label="CFG: "];
"1000133" -> "1000131"  [label="CFG: "];
"1000135" -> "1000131"  [label="CFG: "];
"1000153" -> "1000131"  [label="CFG: "];
"1000161" -> "1000131"  [label="CFG: "];
"1000130" -> "1000106"  [label="AST: "];
"1000131" -> "1000130"  [label="AST: "];
"1000132" -> "1000130"  [label="AST: "];
"1000132" -> "1000130"  [label="AST: "];
"1000133" -> "1000132"  [label="AST: "];
"1000134" -> "1000132"  [label="AST: "];
"1000135" -> "1000132"  [label="AST: "];
"1000136" -> "1000132"  [label="AST: "];
"1000152" -> "1000132"  [label="AST: "];
"1000153" -> "1000132"  [label="AST: "];
"1000154" -> "1000132"  [label="AST: "];
"1000159" -> "1000132"  [label="AST: "];
"1000133" -> "1000132"  [label="AST: "];
"1000133" -> "1000131"  [label="CFG: "];
"1000134" -> "1000133"  [label="CFG: "];
"1000101" -> "1000100"  [label="AST: "];
"1000101" -> "1000162"  [label="DDG: extension_info_map"];
"1000101" -> "1000108"  [label="DDG: extension_info_map"];
"1000213" -> "1000100"  [label="AST: "];
"1000134" -> "1000132"  [label="AST: "];
"1000134" -> "1000133"  [label="CFG: "];
"1000161" -> "1000134"  [label="CFG: "];
"1000135" -> "1000132"  [label="AST: "];
"1000135" -> "1000131"  [label="CFG: "];
"1000140" -> "1000135"  [label="CFG: "];
"1000137" -> "1000136"  [label="AST: "];
"1000137" -> "1000138"  [label="CFG: "];
"1000137" -> "1000141"  [label="CFG: "];
"1000138" -> "1000137"  [label="AST: "];
"1000141" -> "1000137"  [label="AST: "];
"1000151" -> "1000137"  [label="CFG: "];
"1000152" -> "1000137"  [label="CFG: "];
"1000137" -> "1000162"  [label="DDG: !extension->permissions_data()->HasHostPermission(url) &&\n          !url::IsSameOriginWith(url, extension->url())"];
"1000137" -> "1000162"  [label="DDG: !url.SchemeIs(url::kAboutScheme)"];
"1000137" -> "1000162"  [label="DDG: !url.SchemeIs(url::kAboutScheme) &&\n          !extension->permissions_data()->HasHostPermission(url) &&\n          !url::IsSameOriginWith(url, extension->url())"];
"1000138" -> "1000137"  [label="DDG: url.SchemeIs(url::kAboutScheme)"];
"1000141" -> "1000137"  [label="DDG: !extension->permissions_data()->HasHostPermission(url)"];
"1000141" -> "1000137"  [label="DDG: !url::IsSameOriginWith(url, extension->url())"];
"1000138" -> "1000137"  [label="AST: "];
"1000138" -> "1000139"  [label="CFG: "];
"1000139" -> "1000138"  [label="AST: "];
"1000144" -> "1000138"  [label="CFG: "];
"1000137" -> "1000138"  [label="CFG: "];
"1000138" -> "1000162"  [label="DDG: url.SchemeIs(url::kAboutScheme)"];
"1000138" -> "1000137"  [label="DDG: url.SchemeIs(url::kAboutScheme)"];
"1000139" -> "1000138"  [label="DDG: url::kAboutScheme"];
"1000139" -> "1000138"  [label="AST: "];
"1000139" -> "1000140"  [label="CFG: "];
"1000140" -> "1000139"  [label="AST: "];
"1000138" -> "1000139"  [label="CFG: "];
"1000139" -> "1000162"  [label="DDG: url::kAboutScheme"];
"1000139" -> "1000138"  [label="DDG: url::kAboutScheme"];
"1000140" -> "1000139"  [label="AST: "];
"1000140" -> "1000135"  [label="CFG: "];
"1000139" -> "1000140"  [label="CFG: "];
"1000136" -> "1000132"  [label="AST: "];
"1000137" -> "1000136"  [label="AST: "];
"1000149" -> "1000136"  [label="AST: "];
"1000141" -> "1000137"  [label="AST: "];
"1000141" -> "1000142"  [label="CFG: "];
"1000141" -> "1000145"  [label="CFG: "];
"1000142" -> "1000141"  [label="AST: "];
"1000145" -> "1000141"  [label="AST: "];
"1000137" -> "1000141"  [label="CFG: "];
"1000141" -> "1000162"  [label="DDG: !extension->permissions_data()->HasHostPermission(url)"];
"1000141" -> "1000162"  [label="DDG: !url::IsSameOriginWith(url, extension->url())"];
"1000141" -> "1000137"  [label="DDG: !extension->permissions_data()->HasHostPermission(url)"];
"1000141" -> "1000137"  [label="DDG: !url::IsSameOriginWith(url, extension->url())"];
"1000142" -> "1000141"  [label="DDG: extension->permissions_data()->HasHostPermission(url)"];
"1000145" -> "1000141"  [label="DDG: url::IsSameOriginWith(url, extension->url())"];
"1000142" -> "1000141"  [label="AST: "];
"1000142" -> "1000143"  [label="CFG: "];
"1000143" -> "1000142"  [label="AST: "];
"1000147" -> "1000142"  [label="CFG: "];
"1000141" -> "1000142"  [label="CFG: "];
"1000142" -> "1000162"  [label="DDG: extension->permissions_data()->HasHostPermission(url)"];
"1000142" -> "1000141"  [label="DDG: extension->permissions_data()->HasHostPermission(url)"];
"1000143" -> "1000142"  [label="DDG: url"];
"1000143" -> "1000142"  [label="AST: "];
"1000143" -> "1000144"  [label="CFG: "];
"1000144" -> "1000143"  [label="AST: "];
"1000142" -> "1000143"  [label="CFG: "];
"1000143" -> "1000162"  [label="DDG: url"];
"1000143" -> "1000142"  [label="DDG: url"];
"1000103" -> "1000143"  [label="DDG: url"];
"1000143" -> "1000146"  [label="DDG: url"];
"1000144" -> "1000143"  [label="AST: "];
"1000144" -> "1000138"  [label="CFG: "];
"1000143" -> "1000144"  [label="CFG: "];
"1000145" -> "1000141"  [label="AST: "];
"1000145" -> "1000146"  [label="CFG: "];
"1000146" -> "1000145"  [label="AST: "];
"1000141" -> "1000145"  [label="CFG: "];
"1000145" -> "1000162"  [label="DDG: url::IsSameOriginWith(url, extension->url())"];
"1000145" -> "1000141"  [label="DDG: url::IsSameOriginWith(url, extension->url())"];
"1000146" -> "1000145"  [label="DDG: url"];
"1000146" -> "1000145"  [label="DDG: extension->url()"];
"1000146" -> "1000145"  [label="AST: "];
"1000146" -> "1000148"  [label="CFG: "];
"1000147" -> "1000146"  [label="AST: "];
"1000148" -> "1000146"  [label="AST: "];
"1000145" -> "1000146"  [label="CFG: "];
"1000146" -> "1000162"  [label="DDG: extension->url()"];
"1000146" -> "1000162"  [label="DDG: url"];
"1000146" -> "1000145"  [label="DDG: url"];
"1000146" -> "1000145"  [label="DDG: extension->url()"];
"1000143" -> "1000146"  [label="DDG: url"];
"1000103" -> "1000146"  [label="DDG: url"];
"1000147" -> "1000146"  [label="AST: "];
"1000147" -> "1000142"  [label="CFG: "];
"1000148" -> "1000147"  [label="CFG: "];
"1000148" -> "1000146"  [label="AST: "];
"1000148" -> "1000147"  [label="CFG: "];
"1000146" -> "1000148"  [label="CFG: "];
"1000149" -> "1000136"  [label="AST: "];
"1000150" -> "1000149"  [label="AST: "];
"1000151" -> "1000150"  [label="AST: "];
"1000151" -> "1000137"  [label="CFG: "];
"1000150" -> "1000151"  [label="CFG: "];
"1000151" -> "1000150"  [label="DDG: false"];
"1000150" -> "1000149"  [label="AST: "];
"1000150" -> "1000151"  [label="CFG: "];
"1000151" -> "1000150"  [label="AST: "];
"1000162" -> "1000150"  [label="CFG: "];
"1000150" -> "1000162"  [label="DDG: <RET>"];
"1000151" -> "1000150"  [label="DDG: false"];
"1000152" -> "1000132"  [label="AST: "];
"1000152" -> "1000137"  [label="CFG: "];
"1000161" -> "1000152"  [label="CFG: "];
"1000153" -> "1000132"  [label="AST: "];
"1000153" -> "1000131"  [label="CFG: "];
"1000156" -> "1000153"  [label="CFG: "];
"1000155" -> "1000154"  [label="AST: "];
"1000155" -> "1000156"  [label="CFG: "];
"1000156" -> "1000155"  [label="AST: "];
"1000158" -> "1000155"  [label="CFG: "];
"1000159" -> "1000155"  [label="CFG: "];
"1000155" -> "1000162"  [label="DDG: !extension->permissions_data()->HasEffectiveAccessToAllHosts()"];
"1000155" -> "1000162"  [label="DDG: extension->permissions_data()->HasEffectiveAccessToAllHosts()"];
"1000156" -> "1000155"  [label="AST: "];
"1000156" -> "1000153"  [label="CFG: "];
"1000155" -> "1000156"  [label="CFG: "];
"1000154" -> "1000132"  [label="AST: "];
"1000155" -> "1000154"  [label="AST: "];
"1000157" -> "1000154"  [label="AST: "];
"1000102" -> "1000100"  [label="AST: "];
"1000102" -> "1000162"  [label="DDG: extension_id"];
"1000102" -> "1000115"  [label="DDG: extension_id"];
"1000214" -> "1000100"  [label="AST: "];
"1000158" -> "1000157"  [label="AST: "];
"1000158" -> "1000155"  [label="CFG: "];
"1000157" -> "1000158"  [label="CFG: "];
"1000158" -> "1000157"  [label="DDG: false"];
"1000157" -> "1000154"  [label="AST: "];
"1000157" -> "1000158"  [label="CFG: "];
"1000158" -> "1000157"  [label="AST: "];
"1000162" -> "1000157"  [label="CFG: "];
"1000157" -> "1000162"  [label="DDG: <RET>"];
"1000158" -> "1000157"  [label="DDG: false"];
"1000159" -> "1000132"  [label="AST: "];
"1000159" -> "1000155"  [label="CFG: "];
"1000161" -> "1000159"  [label="CFG: "];
"1000160" -> "1000106"  [label="AST: "];
"1000160" -> "1000161"  [label="CFG: "];
"1000161" -> "1000160"  [label="AST: "];
"1000162" -> "1000160"  [label="CFG: "];
"1000160" -> "1000162"  [label="DDG: <RET>"];
"1000161" -> "1000160"  [label="DDG: true"];
"1000161" -> "1000160"  [label="AST: "];
"1000161" -> "1000131"  [label="CFG: "];
"1000161" -> "1000134"  [label="CFG: "];
"1000161" -> "1000152"  [label="CFG: "];
"1000161" -> "1000159"  [label="CFG: "];
"1000160" -> "1000161"  [label="CFG: "];
"1000161" -> "1000160"  [label="DDG: true"];
"1000103" -> "1000100"  [label="AST: "];
"1000103" -> "1000162"  [label="DDG: url"];
"1000103" -> "1000143"  [label="DDG: url"];
"1000103" -> "1000146"  [label="DDG: url"];
"1000215" -> "1000100"  [label="AST: "];
"1000104" -> "1000100"  [label="AST: "];
"1000104" -> "1000162"  [label="DDG: crosses_incognito"];
"1000104" -> "1000123"  [label="DDG: crosses_incognito"];
"1000216" -> "1000100"  [label="AST: "];
"1000105" -> "1000100"  [label="AST: "];
"1000105" -> "1000162"  [label="DDG: host_permissions_check"];
"1000217" -> "1000100"  [label="AST: "];
"1000106" -> "1000100"  [label="AST: "];
"1000107" -> "1000106"  [label="AST: "];
"1000112" -> "1000106"  [label="AST: "];
"1000113" -> "1000106"  [label="AST: "];
"1000117" -> "1000106"  [label="AST: "];
"1000122" -> "1000106"  [label="AST: "];
"1000130" -> "1000106"  [label="AST: "];
"1000160" -> "1000106"  [label="AST: "];
"1000107" -> "1000106"  [label="AST: "];
"1000108" -> "1000107"  [label="AST: "];
"1000110" -> "1000107"  [label="AST: "];
"1000108" -> "1000107"  [label="AST: "];
"1000108" -> "1000109"  [label="CFG: "];
"1000109" -> "1000108"  [label="AST: "];
"1000111" -> "1000108"  [label="CFG: "];
"1000114" -> "1000108"  [label="CFG: "];
"1000108" -> "1000162"  [label="DDG: !extension_info_map"];
"1000108" -> "1000162"  [label="DDG: extension_info_map"];
"1000101" -> "1000108"  [label="DDG: extension_info_map"];
"1000109" -> "1000108"  [label="AST: "];
"1000109" -> "1000100"  [label="CFG: "];
"1000108" -> "1000109"  [label="CFG: "];
"1000111" -> "1000110"  [label="AST: "];
"1000111" -> "1000108"  [label="CFG: "];
"1000110" -> "1000111"  [label="CFG: "];
"1000111" -> "1000110"  [label="DDG: true"];
"1000110" -> "1000107"  [label="AST: "];
"1000110" -> "1000111"  [label="CFG: "];
"1000111" -> "1000110"  [label="AST: "];
"1000162" -> "1000110"  [label="CFG: "];
"1000110" -> "1000162"  [label="DDG: <RET>"];
"1000111" -> "1000110"  [label="DDG: true"];
}
