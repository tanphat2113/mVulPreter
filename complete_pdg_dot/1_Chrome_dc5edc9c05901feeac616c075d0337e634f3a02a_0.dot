digraph "1_Chrome_dc5edc9c05901feeac616c075d0337e634f3a02a_0" {
"1000209" [label="(MethodReturn,static void)"];
"1000101" [label="(MethodParameterIn,time_t input)"];
"1000347" [label="(MethodParameterOut,time_t input)"];
"1000102" [label="(MethodParameterIn,struct tm* output)"];
"1000348" [label="(MethodParameterOut,struct tm* output)"];
"1000119" [label="(Call,r = base::UnixDomainSocket::SendRecvMsg(\n       GetSandboxFD(), reply_buf, sizeof(reply_buf), NULL, request))"];
"1000120" [label="(Identifier,r)"];
"1000121" [label="(Call,base::UnixDomainSocket::SendRecvMsg(\n       GetSandboxFD(), reply_buf, sizeof(reply_buf), NULL, request))"];
"1000123" [label="(Identifier,reply_buf)"];
"1000124" [label="(Call,sizeof(reply_buf))"];
"1000125" [label="(Identifier,reply_buf)"];
"1000126" [label="(Identifier,NULL)"];
"1000127" [label="(Identifier,request)"];
"1000122" [label="(Call,GetSandboxFD())"];
"1000131" [label="(Call,-1)"];
"1000132" [label="(Literal,1)"];
"1000133" [label="(Block,)"];
"1000128" [label="(ControlStructure,if (r == -1))"];
"1000129" [label="(Call,r == -1)"];
"1000130" [label="(Identifier,r)"];
"1000135" [label="(Identifier,output)"];
"1000136" [label="(Literal,0)"];
"1000137" [label="(Call,sizeof(struct tm))"];
"1000134" [label="(Call,memset(output, 0, sizeof(struct tm)))"];
"1000139" [label="(Return,return;)"];
"1000103" [label="(MethodParameterIn,char* timezone_out)"];
"1000349" [label="(MethodParameterOut,char* timezone_out)"];
"1000144" [label="(ControlStructure,if (!iter.ReadString(&result) ||\n      !iter.ReadString(&timezone) ||\n      result.size() != sizeof(struct tm)))"];
"1000148" [label="(Call,&result)"];
"1000149" [label="(Identifier,result)"];
"1000145" [label="(Call,!iter.ReadString(&result) ||\n      !iter.ReadString(&timezone) ||\n      result.size() != sizeof(struct tm))"];
"1000146" [label="(Call,!iter.ReadString(&result))"];
"1000147" [label="(Call,iter.ReadString(&result))"];
"1000153" [label="(Call,&timezone)"];
"1000154" [label="(Identifier,timezone)"];
"1000150" [label="(Call,!iter.ReadString(&timezone) ||\n      result.size() != sizeof(struct tm))"];
"1000151" [label="(Call,!iter.ReadString(&timezone))"];
"1000152" [label="(Call,iter.ReadString(&timezone))"];
"1000157" [label="(Call,sizeof(struct tm))"];
"1000159" [label="(Block,)"];
"1000155" [label="(Call,result.size() != sizeof(struct tm))"];
"1000156" [label="(Call,result.size())"];
"1000161" [label="(Identifier,output)"];
"1000162" [label="(Literal,0)"];
"1000163" [label="(Call,sizeof(struct tm))"];
"1000160" [label="(Call,memset(output, 0, sizeof(struct tm)))"];
"1000165" [label="(Return,return;)"];
"1000168" [label="(Call,result.data())"];
"1000166" [label="(Call,memcpy(output, result.data(), sizeof(struct tm)))"];
"1000169" [label="(Call,sizeof(struct tm))"];
"1000167" [label="(Identifier,output)"];
"1000171" [label="(ControlStructure,if (timezone_out_len))"];
"1000172" [label="(Identifier,timezone_out_len)"];
"1000175" [label="(Call,copy_len = std::min(timezone_out_len - 1, timezone.size()))"];
"1000176" [label="(Identifier,copy_len)"];
"1000177" [label="(Call,std::min(timezone_out_len - 1, timezone.size()))"];
"1000178" [label="(Call,timezone_out_len - 1)"];
"1000179" [label="(Identifier,timezone_out_len)"];
"1000173" [label="(Block,)"];
"1000180" [label="(Literal,1)"];
"1000181" [label="(Call,timezone.size())"];
"1000104" [label="(MethodParameterIn,size_t timezone_out_len)"];
"1000350" [label="(MethodParameterOut,size_t timezone_out_len)"];
"1000105" [label="(Block,)"];
"1000183" [label="(Identifier,timezone_out)"];
"1000184" [label="(Call,timezone.data())"];
"1000182" [label="(Call,memcpy(timezone_out, timezone.data(), copy_len))"];
"1000185" [label="(Identifier,copy_len)"];
"1000189" [label="(Identifier,copy_len)"];
"1000190" [label="(Literal,0)"];
"1000186" [label="(Call,timezone_out[copy_len] = 0)"];
"1000187" [label="(Call,timezone_out[copy_len])"];
"1000188" [label="(Identifier,timezone_out)"];
"1000194" [label="(FieldIdentifier,tm_zone)"];
"1000195" [label="(Identifier,timezone_out)"];
"1000191" [label="(Call,output->tm_zone = timezone_out)"];
"1000192" [label="(Call,output->tm_zone)"];
"1000193" [label="(Identifier,output)"];
"1000196" [label="(ControlStructure,else)"];
"1000202" [label="(Call,g_timezones.Get().insert(timezone))"];
"1000197" [label="(Block,)"];
"1000203" [label="(Identifier,timezone)"];
"1000200" [label="(Call,ret_pair = g_timezones.Get().insert(timezone))"];
"1000201" [label="(Identifier,ret_pair)"];
"1000207" [label="(FieldIdentifier,tm_zone)"];
"1000208" [label="(Call,ret_pair.first->c_str())"];
"1000204" [label="(Call,output->tm_zone = ret_pair.first->c_str())"];
"1000205" [label="(Call,output->tm_zone)"];
"1000206" [label="(Identifier,output)"];
"1000108" [label="(Identifier,LinuxSandbox::METHOD_LOCALTIME)"];
"1000107" [label="(Call,request.WriteInt(LinuxSandbox::METHOD_LOCALTIME))"];
"1000109" [label="(Call,request.WriteString(\n       std::string(reinterpret_cast<char*>(&input), sizeof(input))))"];
"1000111" [label="(Call,reinterpret_cast<char*>(&input))"];
"1000113" [label="(Call,&input)"];
"1000114" [label="(Identifier,input)"];
"1000115" [label="(Call,sizeof(input))"];
"1000116" [label="(Identifier,input)"];
"1000110" [label="(Call,std::string(reinterpret_cast<char*>(&input), sizeof(input)))"];
"1000209" -> "1000100"  [label="AST: "];
"1000209" -> "1000139"  [label="CFG: "];
"1000209" -> "1000165"  [label="CFG: "];
"1000209" -> "1000191"  [label="CFG: "];
"1000209" -> "1000204"  [label="CFG: "];
"1000165" -> "1000209"  [label="DDG: <RET>"];
"1000139" -> "1000209"  [label="DDG: <RET>"];
"1000186" -> "1000209"  [label="DDG: timezone_out[copy_len]"];
"1000200" -> "1000209"  [label="DDG: ret_pair"];
"1000200" -> "1000209"  [label="DDG: g_timezones.Get().insert(timezone)"];
"1000107" -> "1000209"  [label="DDG: LinuxSandbox::METHOD_LOCALTIME"];
"1000107" -> "1000209"  [label="DDG: request.WriteInt(LinuxSandbox::METHOD_LOCALTIME)"];
"1000182" -> "1000209"  [label="DDG: copy_len"];
"1000182" -> "1000209"  [label="DDG: memcpy(timezone_out, timezone.data(), copy_len)"];
"1000182" -> "1000209"  [label="DDG: timezone.data()"];
"1000160" -> "1000209"  [label="DDG: memset(output, 0, sizeof(struct tm))"];
"1000160" -> "1000209"  [label="DDG: output"];
"1000121" -> "1000209"  [label="DDG: reply_buf"];
"1000121" -> "1000209"  [label="DDG: NULL"];
"1000121" -> "1000209"  [label="DDG: request"];
"1000121" -> "1000209"  [label="DDG: GetSandboxFD()"];
"1000177" -> "1000209"  [label="DDG: timezone.size()"];
"1000177" -> "1000209"  [label="DDG: timezone_out_len - 1"];
"1000102" -> "1000209"  [label="DDG: output"];
"1000155" -> "1000209"  [label="DDG: result.size()"];
"1000166" -> "1000209"  [label="DDG: result.data()"];
"1000166" -> "1000209"  [label="DDG: memcpy(output, result.data(), sizeof(struct tm))"];
"1000166" -> "1000209"  [label="DDG: output"];
"1000129" -> "1000209"  [label="DDG: r"];
"1000129" -> "1000209"  [label="DDG: r == -1"];
"1000129" -> "1000209"  [label="DDG: -1"];
"1000150" -> "1000209"  [label="DDG: !iter.ReadString(&timezone)"];
"1000150" -> "1000209"  [label="DDG: result.size() != sizeof(struct tm)"];
"1000178" -> "1000209"  [label="DDG: timezone_out_len"];
"1000104" -> "1000209"  [label="DDG: timezone_out_len"];
"1000191" -> "1000209"  [label="DDG: timezone_out"];
"1000191" -> "1000209"  [label="DDG: output->tm_zone"];
"1000151" -> "1000209"  [label="DDG: iter.ReadString(&timezone)"];
"1000103" -> "1000209"  [label="DDG: timezone_out"];
"1000134" -> "1000209"  [label="DDG: memset(output, 0, sizeof(struct tm))"];
"1000134" -> "1000209"  [label="DDG: output"];
"1000202" -> "1000209"  [label="DDG: timezone"];
"1000119" -> "1000209"  [label="DDG: base::UnixDomainSocket::SendRecvMsg(\n       GetSandboxFD(), reply_buf, sizeof(reply_buf), NULL, request)"];
"1000204" -> "1000209"  [label="DDG: ret_pair.first->c_str()"];
"1000204" -> "1000209"  [label="DDG: output->tm_zone"];
"1000147" -> "1000209"  [label="DDG: &result"];
"1000152" -> "1000209"  [label="DDG: &timezone"];
"1000111" -> "1000209"  [label="DDG: &input"];
"1000101" -> "1000209"  [label="DDG: input"];
"1000109" -> "1000209"  [label="DDG: std::string(reinterpret_cast<char*>(&input), sizeof(input))"];
"1000109" -> "1000209"  [label="DDG: request.WriteString(\n       std::string(reinterpret_cast<char*>(&input), sizeof(input)))"];
"1000145" -> "1000209"  [label="DDG: !iter.ReadString(&result) ||\n      !iter.ReadString(&timezone) ||\n      result.size() != sizeof(struct tm)"];
"1000145" -> "1000209"  [label="DDG: !iter.ReadString(&timezone) ||\n      result.size() != sizeof(struct tm)"];
"1000145" -> "1000209"  [label="DDG: !iter.ReadString(&result)"];
"1000175" -> "1000209"  [label="DDG: std::min(timezone_out_len - 1, timezone.size())"];
"1000146" -> "1000209"  [label="DDG: iter.ReadString(&result)"];
"1000115" -> "1000209"  [label="DDG: input"];
"1000110" -> "1000209"  [label="DDG: reinterpret_cast<char*>(&input)"];
"1000101" -> "1000100"  [label="AST: "];
"1000101" -> "1000209"  [label="DDG: input"];
"1000101" -> "1000110"  [label="DDG: input"];
"1000101" -> "1000115"  [label="DDG: input"];
"1000347" -> "1000100"  [label="AST: "];
"1000102" -> "1000100"  [label="AST: "];
"1000102" -> "1000209"  [label="DDG: output"];
"1000102" -> "1000134"  [label="DDG: output"];
"1000102" -> "1000160"  [label="DDG: output"];
"1000102" -> "1000166"  [label="DDG: output"];
"1000348" -> "1000100"  [label="AST: "];
"1000119" -> "1000105"  [label="AST: "];
"1000119" -> "1000121"  [label="CFG: "];
"1000120" -> "1000119"  [label="AST: "];
"1000121" -> "1000119"  [label="AST: "];
"1000130" -> "1000119"  [label="CFG: "];
"1000119" -> "1000209"  [label="DDG: base::UnixDomainSocket::SendRecvMsg(\n       GetSandboxFD(), reply_buf, sizeof(reply_buf), NULL, request)"];
"1000121" -> "1000119"  [label="DDG: GetSandboxFD()"];
"1000121" -> "1000119"  [label="DDG: reply_buf"];
"1000121" -> "1000119"  [label="DDG: NULL"];
"1000121" -> "1000119"  [label="DDG: request"];
"1000119" -> "1000129"  [label="DDG: r"];
"1000120" -> "1000119"  [label="AST: "];
"1000120" -> "1000109"  [label="CFG: "];
"1000122" -> "1000120"  [label="CFG: "];
"1000121" -> "1000119"  [label="AST: "];
"1000121" -> "1000127"  [label="CFG: "];
"1000122" -> "1000121"  [label="AST: "];
"1000123" -> "1000121"  [label="AST: "];
"1000124" -> "1000121"  [label="AST: "];
"1000126" -> "1000121"  [label="AST: "];
"1000127" -> "1000121"  [label="AST: "];
"1000119" -> "1000121"  [label="CFG: "];
"1000121" -> "1000209"  [label="DDG: reply_buf"];
"1000121" -> "1000209"  [label="DDG: NULL"];
"1000121" -> "1000209"  [label="DDG: request"];
"1000121" -> "1000209"  [label="DDG: GetSandboxFD()"];
"1000121" -> "1000119"  [label="DDG: GetSandboxFD()"];
"1000121" -> "1000119"  [label="DDG: reply_buf"];
"1000121" -> "1000119"  [label="DDG: NULL"];
"1000121" -> "1000119"  [label="DDG: request"];
"1000123" -> "1000121"  [label="AST: "];
"1000123" -> "1000122"  [label="CFG: "];
"1000125" -> "1000123"  [label="CFG: "];
"1000124" -> "1000121"  [label="AST: "];
"1000124" -> "1000125"  [label="CFG: "];
"1000125" -> "1000124"  [label="AST: "];
"1000126" -> "1000124"  [label="CFG: "];
"1000125" -> "1000124"  [label="AST: "];
"1000125" -> "1000123"  [label="CFG: "];
"1000124" -> "1000125"  [label="CFG: "];
"1000126" -> "1000121"  [label="AST: "];
"1000126" -> "1000124"  [label="CFG: "];
"1000127" -> "1000126"  [label="CFG: "];
"1000127" -> "1000121"  [label="AST: "];
"1000127" -> "1000126"  [label="CFG: "];
"1000121" -> "1000127"  [label="CFG: "];
"1000122" -> "1000121"  [label="AST: "];
"1000122" -> "1000120"  [label="CFG: "];
"1000123" -> "1000122"  [label="CFG: "];
"1000131" -> "1000129"  [label="AST: "];
"1000131" -> "1000132"  [label="CFG: "];
"1000132" -> "1000131"  [label="AST: "];
"1000129" -> "1000131"  [label="CFG: "];
"1000131" -> "1000129"  [label="DDG: 1"];
"1000132" -> "1000131"  [label="AST: "];
"1000132" -> "1000130"  [label="CFG: "];
"1000131" -> "1000132"  [label="CFG: "];
"1000133" -> "1000128"  [label="AST: "];
"1000134" -> "1000133"  [label="AST: "];
"1000139" -> "1000133"  [label="AST: "];
"1000128" -> "1000105"  [label="AST: "];
"1000129" -> "1000128"  [label="AST: "];
"1000133" -> "1000128"  [label="AST: "];
"1000129" -> "1000128"  [label="AST: "];
"1000129" -> "1000131"  [label="CFG: "];
"1000130" -> "1000129"  [label="AST: "];
"1000131" -> "1000129"  [label="AST: "];
"1000135" -> "1000129"  [label="CFG: "];
"1000149" -> "1000129"  [label="CFG: "];
"1000129" -> "1000209"  [label="DDG: r"];
"1000129" -> "1000209"  [label="DDG: r == -1"];
"1000129" -> "1000209"  [label="DDG: -1"];
"1000119" -> "1000129"  [label="DDG: r"];
"1000131" -> "1000129"  [label="DDG: 1"];
"1000130" -> "1000129"  [label="AST: "];
"1000130" -> "1000119"  [label="CFG: "];
"1000132" -> "1000130"  [label="CFG: "];
"1000135" -> "1000134"  [label="AST: "];
"1000135" -> "1000129"  [label="CFG: "];
"1000136" -> "1000135"  [label="CFG: "];
"1000136" -> "1000134"  [label="AST: "];
"1000136" -> "1000135"  [label="CFG: "];
"1000138" -> "1000136"  [label="CFG: "];
"1000137" -> "1000134"  [label="AST: "];
"1000137" -> "1000138"  [label="CFG: "];
"1000138" -> "1000137"  [label="AST: "];
"1000134" -> "1000137"  [label="CFG: "];
"1000134" -> "1000133"  [label="AST: "];
"1000134" -> "1000137"  [label="CFG: "];
"1000135" -> "1000134"  [label="AST: "];
"1000136" -> "1000134"  [label="AST: "];
"1000137" -> "1000134"  [label="AST: "];
"1000139" -> "1000134"  [label="CFG: "];
"1000134" -> "1000209"  [label="DDG: memset(output, 0, sizeof(struct tm))"];
"1000134" -> "1000209"  [label="DDG: output"];
"1000102" -> "1000134"  [label="DDG: output"];
"1000139" -> "1000133"  [label="AST: "];
"1000139" -> "1000134"  [label="CFG: "];
"1000209" -> "1000139"  [label="CFG: "];
"1000139" -> "1000209"  [label="DDG: <RET>"];
"1000103" -> "1000100"  [label="AST: "];
"1000103" -> "1000209"  [label="DDG: timezone_out"];
"1000103" -> "1000182"  [label="DDG: timezone_out"];
"1000103" -> "1000186"  [label="DDG: timezone_out"];
"1000103" -> "1000191"  [label="DDG: timezone_out"];
"1000349" -> "1000100"  [label="AST: "];
"1000144" -> "1000105"  [label="AST: "];
"1000145" -> "1000144"  [label="AST: "];
"1000159" -> "1000144"  [label="AST: "];
"1000148" -> "1000147"  [label="AST: "];
"1000148" -> "1000149"  [label="CFG: "];
"1000149" -> "1000148"  [label="AST: "];
"1000147" -> "1000148"  [label="CFG: "];
"1000149" -> "1000148"  [label="AST: "];
"1000149" -> "1000129"  [label="CFG: "];
"1000148" -> "1000149"  [label="CFG: "];
"1000145" -> "1000144"  [label="AST: "];
"1000145" -> "1000146"  [label="CFG: "];
"1000145" -> "1000150"  [label="CFG: "];
"1000146" -> "1000145"  [label="AST: "];
"1000150" -> "1000145"  [label="AST: "];
"1000161" -> "1000145"  [label="CFG: "];
"1000167" -> "1000145"  [label="CFG: "];
"1000145" -> "1000209"  [label="DDG: !iter.ReadString(&result) ||\n      !iter.ReadString(&timezone) ||\n      result.size() != sizeof(struct tm)"];
"1000145" -> "1000209"  [label="DDG: !iter.ReadString(&timezone) ||\n      result.size() != sizeof(struct tm)"];
"1000145" -> "1000209"  [label="DDG: !iter.ReadString(&result)"];
"1000146" -> "1000145"  [label="DDG: iter.ReadString(&result)"];
"1000150" -> "1000145"  [label="DDG: !iter.ReadString(&timezone)"];
"1000150" -> "1000145"  [label="DDG: result.size() != sizeof(struct tm)"];
"1000146" -> "1000145"  [label="AST: "];
"1000146" -> "1000147"  [label="CFG: "];
"1000147" -> "1000146"  [label="AST: "];
"1000154" -> "1000146"  [label="CFG: "];
"1000145" -> "1000146"  [label="CFG: "];
"1000146" -> "1000209"  [label="DDG: iter.ReadString(&result)"];
"1000146" -> "1000145"  [label="DDG: iter.ReadString(&result)"];
"1000147" -> "1000146"  [label="DDG: &result"];
"1000147" -> "1000146"  [label="AST: "];
"1000147" -> "1000148"  [label="CFG: "];
"1000148" -> "1000147"  [label="AST: "];
"1000146" -> "1000147"  [label="CFG: "];
"1000147" -> "1000209"  [label="DDG: &result"];
"1000147" -> "1000146"  [label="DDG: &result"];
"1000153" -> "1000152"  [label="AST: "];
"1000153" -> "1000154"  [label="CFG: "];
"1000154" -> "1000153"  [label="AST: "];
"1000152" -> "1000153"  [label="CFG: "];
"1000154" -> "1000153"  [label="AST: "];
"1000154" -> "1000146"  [label="CFG: "];
"1000153" -> "1000154"  [label="CFG: "];
"1000150" -> "1000145"  [label="AST: "];
"1000150" -> "1000151"  [label="CFG: "];
"1000150" -> "1000155"  [label="CFG: "];
"1000151" -> "1000150"  [label="AST: "];
"1000155" -> "1000150"  [label="AST: "];
"1000145" -> "1000150"  [label="CFG: "];
"1000150" -> "1000209"  [label="DDG: !iter.ReadString(&timezone)"];
"1000150" -> "1000209"  [label="DDG: result.size() != sizeof(struct tm)"];
"1000150" -> "1000145"  [label="DDG: !iter.ReadString(&timezone)"];
"1000150" -> "1000145"  [label="DDG: result.size() != sizeof(struct tm)"];
"1000151" -> "1000150"  [label="DDG: iter.ReadString(&timezone)"];
"1000155" -> "1000150"  [label="DDG: result.size()"];
"1000151" -> "1000150"  [label="AST: "];
"1000151" -> "1000152"  [label="CFG: "];
"1000152" -> "1000151"  [label="AST: "];
"1000156" -> "1000151"  [label="CFG: "];
"1000150" -> "1000151"  [label="CFG: "];
"1000151" -> "1000209"  [label="DDG: iter.ReadString(&timezone)"];
"1000151" -> "1000150"  [label="DDG: iter.ReadString(&timezone)"];
"1000152" -> "1000151"  [label="DDG: &timezone"];
"1000152" -> "1000151"  [label="AST: "];
"1000152" -> "1000153"  [label="CFG: "];
"1000153" -> "1000152"  [label="AST: "];
"1000151" -> "1000152"  [label="CFG: "];
"1000152" -> "1000209"  [label="DDG: &timezone"];
"1000152" -> "1000151"  [label="DDG: &timezone"];
"1000157" -> "1000155"  [label="AST: "];
"1000157" -> "1000158"  [label="CFG: "];
"1000158" -> "1000157"  [label="AST: "];
"1000155" -> "1000157"  [label="CFG: "];
"1000159" -> "1000144"  [label="AST: "];
"1000160" -> "1000159"  [label="AST: "];
"1000165" -> "1000159"  [label="AST: "];
"1000155" -> "1000150"  [label="AST: "];
"1000155" -> "1000157"  [label="CFG: "];
"1000156" -> "1000155"  [label="AST: "];
"1000157" -> "1000155"  [label="AST: "];
"1000150" -> "1000155"  [label="CFG: "];
"1000155" -> "1000209"  [label="DDG: result.size()"];
"1000155" -> "1000150"  [label="DDG: result.size()"];
"1000156" -> "1000155"  [label="AST: "];
"1000156" -> "1000151"  [label="CFG: "];
"1000158" -> "1000156"  [label="CFG: "];
"1000161" -> "1000160"  [label="AST: "];
"1000161" -> "1000145"  [label="CFG: "];
"1000162" -> "1000161"  [label="CFG: "];
"1000162" -> "1000160"  [label="AST: "];
"1000162" -> "1000161"  [label="CFG: "];
"1000164" -> "1000162"  [label="CFG: "];
"1000163" -> "1000160"  [label="AST: "];
"1000163" -> "1000164"  [label="CFG: "];
"1000164" -> "1000163"  [label="AST: "];
"1000160" -> "1000163"  [label="CFG: "];
"1000160" -> "1000159"  [label="AST: "];
"1000160" -> "1000163"  [label="CFG: "];
"1000161" -> "1000160"  [label="AST: "];
"1000162" -> "1000160"  [label="AST: "];
"1000163" -> "1000160"  [label="AST: "];
"1000165" -> "1000160"  [label="CFG: "];
"1000160" -> "1000209"  [label="DDG: memset(output, 0, sizeof(struct tm))"];
"1000160" -> "1000209"  [label="DDG: output"];
"1000102" -> "1000160"  [label="DDG: output"];
"1000165" -> "1000159"  [label="AST: "];
"1000165" -> "1000160"  [label="CFG: "];
"1000209" -> "1000165"  [label="CFG: "];
"1000165" -> "1000209"  [label="DDG: <RET>"];
"1000168" -> "1000166"  [label="AST: "];
"1000168" -> "1000167"  [label="CFG: "];
"1000170" -> "1000168"  [label="CFG: "];
"1000166" -> "1000105"  [label="AST: "];
"1000166" -> "1000169"  [label="CFG: "];
"1000167" -> "1000166"  [label="AST: "];
"1000168" -> "1000166"  [label="AST: "];
"1000169" -> "1000166"  [label="AST: "];
"1000172" -> "1000166"  [label="CFG: "];
"1000166" -> "1000209"  [label="DDG: result.data()"];
"1000166" -> "1000209"  [label="DDG: memcpy(output, result.data(), sizeof(struct tm))"];
"1000166" -> "1000209"  [label="DDG: output"];
"1000102" -> "1000166"  [label="DDG: output"];
"1000169" -> "1000166"  [label="AST: "];
"1000169" -> "1000170"  [label="CFG: "];
"1000170" -> "1000169"  [label="AST: "];
"1000166" -> "1000169"  [label="CFG: "];
"1000167" -> "1000166"  [label="AST: "];
"1000167" -> "1000145"  [label="CFG: "];
"1000168" -> "1000167"  [label="CFG: "];
"1000171" -> "1000105"  [label="AST: "];
"1000172" -> "1000171"  [label="AST: "];
"1000173" -> "1000171"  [label="AST: "];
"1000196" -> "1000171"  [label="AST: "];
"1000172" -> "1000171"  [label="AST: "];
"1000172" -> "1000166"  [label="CFG: "];
"1000176" -> "1000172"  [label="CFG: "];
"1000201" -> "1000172"  [label="CFG: "];
"1000175" -> "1000173"  [label="AST: "];
"1000175" -> "1000177"  [label="CFG: "];
"1000176" -> "1000175"  [label="AST: "];
"1000177" -> "1000175"  [label="AST: "];
"1000183" -> "1000175"  [label="CFG: "];
"1000175" -> "1000209"  [label="DDG: std::min(timezone_out_len - 1, timezone.size())"];
"1000177" -> "1000175"  [label="DDG: timezone_out_len - 1"];
"1000177" -> "1000175"  [label="DDG: timezone.size()"];
"1000175" -> "1000182"  [label="DDG: copy_len"];
"1000176" -> "1000175"  [label="AST: "];
"1000176" -> "1000172"  [label="CFG: "];
"1000179" -> "1000176"  [label="CFG: "];
"1000177" -> "1000175"  [label="AST: "];
"1000177" -> "1000181"  [label="CFG: "];
"1000178" -> "1000177"  [label="AST: "];
"1000181" -> "1000177"  [label="AST: "];
"1000175" -> "1000177"  [label="CFG: "];
"1000177" -> "1000209"  [label="DDG: timezone.size()"];
"1000177" -> "1000209"  [label="DDG: timezone_out_len - 1"];
"1000177" -> "1000175"  [label="DDG: timezone_out_len - 1"];
"1000177" -> "1000175"  [label="DDG: timezone.size()"];
"1000178" -> "1000177"  [label="DDG: timezone_out_len"];
"1000178" -> "1000177"  [label="DDG: 1"];
"1000178" -> "1000177"  [label="AST: "];
"1000178" -> "1000180"  [label="CFG: "];
"1000179" -> "1000178"  [label="AST: "];
"1000180" -> "1000178"  [label="AST: "];
"1000181" -> "1000178"  [label="CFG: "];
"1000178" -> "1000209"  [label="DDG: timezone_out_len"];
"1000178" -> "1000177"  [label="DDG: timezone_out_len"];
"1000178" -> "1000177"  [label="DDG: 1"];
"1000104" -> "1000178"  [label="DDG: timezone_out_len"];
"1000179" -> "1000178"  [label="AST: "];
"1000179" -> "1000176"  [label="CFG: "];
"1000180" -> "1000179"  [label="CFG: "];
"1000173" -> "1000171"  [label="AST: "];
"1000174" -> "1000173"  [label="AST: "];
"1000175" -> "1000173"  [label="AST: "];
"1000182" -> "1000173"  [label="AST: "];
"1000186" -> "1000173"  [label="AST: "];
"1000191" -> "1000173"  [label="AST: "];
"1000180" -> "1000178"  [label="AST: "];
"1000180" -> "1000179"  [label="CFG: "];
"1000178" -> "1000180"  [label="CFG: "];
"1000181" -> "1000177"  [label="AST: "];
"1000181" -> "1000178"  [label="CFG: "];
"1000177" -> "1000181"  [label="CFG: "];
"1000104" -> "1000100"  [label="AST: "];
"1000104" -> "1000209"  [label="DDG: timezone_out_len"];
"1000104" -> "1000178"  [label="DDG: timezone_out_len"];
"1000350" -> "1000100"  [label="AST: "];
"1000105" -> "1000100"  [label="AST: "];
"1000106" -> "1000105"  [label="AST: "];
"1000107" -> "1000105"  [label="AST: "];
"1000109" -> "1000105"  [label="AST: "];
"1000117" -> "1000105"  [label="AST: "];
"1000118" -> "1000105"  [label="AST: "];
"1000119" -> "1000105"  [label="AST: "];
"1000128" -> "1000105"  [label="AST: "];
"1000140" -> "1000105"  [label="AST: "];
"1000141" -> "1000105"  [label="AST: "];
"1000142" -> "1000105"  [label="AST: "];
"1000143" -> "1000105"  [label="AST: "];
"1000144" -> "1000105"  [label="AST: "];
"1000166" -> "1000105"  [label="AST: "];
"1000171" -> "1000105"  [label="AST: "];
"1000183" -> "1000182"  [label="AST: "];
"1000183" -> "1000175"  [label="CFG: "];
"1000184" -> "1000183"  [label="CFG: "];
"1000184" -> "1000182"  [label="AST: "];
"1000184" -> "1000183"  [label="CFG: "];
"1000185" -> "1000184"  [label="CFG: "];
"1000182" -> "1000173"  [label="AST: "];
"1000182" -> "1000185"  [label="CFG: "];
"1000183" -> "1000182"  [label="AST: "];
"1000184" -> "1000182"  [label="AST: "];
"1000185" -> "1000182"  [label="AST: "];
"1000188" -> "1000182"  [label="CFG: "];
"1000182" -> "1000209"  [label="DDG: copy_len"];
"1000182" -> "1000209"  [label="DDG: memcpy(timezone_out, timezone.data(), copy_len)"];
"1000182" -> "1000209"  [label="DDG: timezone.data()"];
"1000103" -> "1000182"  [label="DDG: timezone_out"];
"1000175" -> "1000182"  [label="DDG: copy_len"];
"1000182" -> "1000191"  [label="DDG: timezone_out"];
"1000185" -> "1000182"  [label="AST: "];
"1000185" -> "1000184"  [label="CFG: "];
"1000182" -> "1000185"  [label="CFG: "];
"1000189" -> "1000187"  [label="AST: "];
"1000189" -> "1000188"  [label="CFG: "];
"1000187" -> "1000189"  [label="CFG: "];
"1000190" -> "1000186"  [label="AST: "];
"1000190" -> "1000187"  [label="CFG: "];
"1000186" -> "1000190"  [label="CFG: "];
"1000186" -> "1000173"  [label="AST: "];
"1000186" -> "1000190"  [label="CFG: "];
"1000187" -> "1000186"  [label="AST: "];
"1000190" -> "1000186"  [label="AST: "];
"1000193" -> "1000186"  [label="CFG: "];
"1000186" -> "1000209"  [label="DDG: timezone_out[copy_len]"];
"1000103" -> "1000186"  [label="DDG: timezone_out"];
"1000186" -> "1000191"  [label="DDG: timezone_out[copy_len]"];
"1000187" -> "1000186"  [label="AST: "];
"1000187" -> "1000189"  [label="CFG: "];
"1000188" -> "1000187"  [label="AST: "];
"1000189" -> "1000187"  [label="AST: "];
"1000190" -> "1000187"  [label="CFG: "];
"1000188" -> "1000187"  [label="AST: "];
"1000188" -> "1000182"  [label="CFG: "];
"1000189" -> "1000188"  [label="CFG: "];
"1000194" -> "1000192"  [label="AST: "];
"1000194" -> "1000193"  [label="CFG: "];
"1000192" -> "1000194"  [label="CFG: "];
"1000195" -> "1000191"  [label="AST: "];
"1000195" -> "1000192"  [label="CFG: "];
"1000191" -> "1000195"  [label="CFG: "];
"1000191" -> "1000173"  [label="AST: "];
"1000191" -> "1000195"  [label="CFG: "];
"1000192" -> "1000191"  [label="AST: "];
"1000195" -> "1000191"  [label="AST: "];
"1000209" -> "1000191"  [label="CFG: "];
"1000191" -> "1000209"  [label="DDG: timezone_out"];
"1000191" -> "1000209"  [label="DDG: output->tm_zone"];
"1000186" -> "1000191"  [label="DDG: timezone_out[copy_len]"];
"1000182" -> "1000191"  [label="DDG: timezone_out"];
"1000103" -> "1000191"  [label="DDG: timezone_out"];
"1000192" -> "1000191"  [label="AST: "];
"1000192" -> "1000194"  [label="CFG: "];
"1000193" -> "1000192"  [label="AST: "];
"1000194" -> "1000192"  [label="AST: "];
"1000195" -> "1000192"  [label="CFG: "];
"1000193" -> "1000192"  [label="AST: "];
"1000193" -> "1000186"  [label="CFG: "];
"1000194" -> "1000193"  [label="CFG: "];
"1000196" -> "1000171"  [label="AST: "];
"1000197" -> "1000196"  [label="AST: "];
"1000202" -> "1000200"  [label="AST: "];
"1000202" -> "1000203"  [label="CFG: "];
"1000203" -> "1000202"  [label="AST: "];
"1000200" -> "1000202"  [label="CFG: "];
"1000202" -> "1000209"  [label="DDG: timezone"];
"1000202" -> "1000200"  [label="DDG: timezone"];
"1000197" -> "1000196"  [label="AST: "];
"1000198" -> "1000197"  [label="AST: "];
"1000199" -> "1000197"  [label="AST: "];
"1000200" -> "1000197"  [label="AST: "];
"1000204" -> "1000197"  [label="AST: "];
"1000203" -> "1000202"  [label="AST: "];
"1000203" -> "1000201"  [label="CFG: "];
"1000202" -> "1000203"  [label="CFG: "];
"1000200" -> "1000197"  [label="AST: "];
"1000200" -> "1000202"  [label="CFG: "];
"1000201" -> "1000200"  [label="AST: "];
"1000202" -> "1000200"  [label="AST: "];
"1000206" -> "1000200"  [label="CFG: "];
"1000200" -> "1000209"  [label="DDG: ret_pair"];
"1000200" -> "1000209"  [label="DDG: g_timezones.Get().insert(timezone)"];
"1000202" -> "1000200"  [label="DDG: timezone"];
"1000201" -> "1000200"  [label="AST: "];
"1000201" -> "1000172"  [label="CFG: "];
"1000203" -> "1000201"  [label="CFG: "];
"1000207" -> "1000205"  [label="AST: "];
"1000207" -> "1000206"  [label="CFG: "];
"1000205" -> "1000207"  [label="CFG: "];
"1000208" -> "1000204"  [label="AST: "];
"1000208" -> "1000205"  [label="CFG: "];
"1000204" -> "1000208"  [label="CFG: "];
"1000204" -> "1000197"  [label="AST: "];
"1000204" -> "1000208"  [label="CFG: "];
"1000205" -> "1000204"  [label="AST: "];
"1000208" -> "1000204"  [label="AST: "];
"1000209" -> "1000204"  [label="CFG: "];
"1000204" -> "1000209"  [label="DDG: ret_pair.first->c_str()"];
"1000204" -> "1000209"  [label="DDG: output->tm_zone"];
"1000205" -> "1000204"  [label="AST: "];
"1000205" -> "1000207"  [label="CFG: "];
"1000206" -> "1000205"  [label="AST: "];
"1000207" -> "1000205"  [label="AST: "];
"1000208" -> "1000205"  [label="CFG: "];
"1000206" -> "1000205"  [label="AST: "];
"1000206" -> "1000200"  [label="CFG: "];
"1000207" -> "1000206"  [label="CFG: "];
"1000108" -> "1000107"  [label="AST: "];
"1000108" -> "1000100"  [label="CFG: "];
"1000107" -> "1000108"  [label="CFG: "];
"1000107" -> "1000105"  [label="AST: "];
"1000107" -> "1000108"  [label="CFG: "];
"1000108" -> "1000107"  [label="AST: "];
"1000112" -> "1000107"  [label="CFG: "];
"1000107" -> "1000209"  [label="DDG: LinuxSandbox::METHOD_LOCALTIME"];
"1000107" -> "1000209"  [label="DDG: request.WriteInt(LinuxSandbox::METHOD_LOCALTIME)"];
"1000109" -> "1000105"  [label="AST: "];
"1000109" -> "1000110"  [label="CFG: "];
"1000110" -> "1000109"  [label="AST: "];
"1000120" -> "1000109"  [label="CFG: "];
"1000109" -> "1000209"  [label="DDG: std::string(reinterpret_cast<char*>(&input), sizeof(input))"];
"1000109" -> "1000209"  [label="DDG: request.WriteString(\n       std::string(reinterpret_cast<char*>(&input), sizeof(input)))"];
"1000110" -> "1000109"  [label="DDG: reinterpret_cast<char*>(&input)"];
"1000111" -> "1000110"  [label="AST: "];
"1000111" -> "1000113"  [label="CFG: "];
"1000112" -> "1000111"  [label="AST: "];
"1000113" -> "1000111"  [label="AST: "];
"1000116" -> "1000111"  [label="CFG: "];
"1000111" -> "1000209"  [label="DDG: &input"];
"1000111" -> "1000110"  [label="DDG: &input"];
"1000113" -> "1000111"  [label="AST: "];
"1000113" -> "1000114"  [label="CFG: "];
"1000114" -> "1000113"  [label="AST: "];
"1000111" -> "1000113"  [label="CFG: "];
"1000114" -> "1000113"  [label="AST: "];
"1000114" -> "1000112"  [label="CFG: "];
"1000113" -> "1000114"  [label="CFG: "];
"1000115" -> "1000110"  [label="AST: "];
"1000115" -> "1000116"  [label="CFG: "];
"1000116" -> "1000115"  [label="AST: "];
"1000110" -> "1000115"  [label="CFG: "];
"1000115" -> "1000209"  [label="DDG: input"];
"1000101" -> "1000115"  [label="DDG: input"];
"1000116" -> "1000115"  [label="AST: "];
"1000116" -> "1000111"  [label="CFG: "];
"1000115" -> "1000116"  [label="CFG: "];
"1000110" -> "1000109"  [label="AST: "];
"1000110" -> "1000115"  [label="CFG: "];
"1000111" -> "1000110"  [label="AST: "];
"1000115" -> "1000110"  [label="AST: "];
"1000109" -> "1000110"  [label="CFG: "];
"1000110" -> "1000209"  [label="DDG: reinterpret_cast<char*>(&input)"];
"1000110" -> "1000109"  [label="DDG: reinterpret_cast<char*>(&input)"];
"1000111" -> "1000110"  [label="DDG: &input"];
"1000101" -> "1000110"  [label="DDG: input"];
}
