digraph "0_Android_9d4853418ab2f754c2b63e091c29c5529b8b86ca_105" {
"1000119" [label="(Call,(pm->bit_depth == 16 || pm->assume_16_bit_calculations) ?\n         pm->nencodings : 0)"];
"1000125" [label="(Literal,16)"];
"1000126" [label="(Call,pm->assume_16_bit_calculations)"];
"1000127" [label="(Identifier,pm)"];
"1000120" [label="(Call,pm->bit_depth == 16 || pm->assume_16_bit_calculations)"];
"1000121" [label="(Call,pm->bit_depth == 16)"];
"1000122" [label="(Call,pm->bit_depth)"];
"1000123" [label="(Identifier,pm)"];
"1000128" [label="(FieldIdentifier,assume_16_bit_calculations)"];
"1000124" [label="(FieldIdentifier,bit_depth)"];
"1000131" [label="(FieldIdentifier,nencodings)"];
"1000132" [label="(Literal,0)"];
"1000129" [label="(Call,pm->nencodings)"];
"1000130" [label="(Identifier,pm)"];
"1000133" [label="(MethodReturn,RET)"];
"1000106" [label="(MethodParameterIn,const png_modifier *pm)"];
"1000164" [label="(MethodParameterOut,const png_modifier *pm)"];
"1000107" [label="(Block,)"];
"1000109" [label="(Call,1 +                 /* (1) nothing */\n       pm->ngammas +           /* (2) gamma values to test */\n      pm->nencodings + /* (3) total number of encodings */\n /* The following test only works after the first time through the\n       * png_modifier code because 'bit_depth' is set when the IHDR is read.\n       * modifier_reset, below, preserves the setting until after it has called\n       * the iterate function (also below.)\n       *\n       * For this reason do not rely on this function outside a call to\n       * modifier_reset.\n       */\n ((pm->bit_depth == 16 || pm->assume_16_bit_calculations) ?\n         pm->nencodings : 0))"];
"1000110" [label="(Literal,1)"];
"1000108" [label="(Return,return 1 +                 /* (1) nothing */\n       pm->ngammas +           /* (2) gamma values to test */\n      pm->nencodings + /* (3) total number of encodings */\n /* The following test only works after the first time through the\n       * png_modifier code because 'bit_depth' is set when the IHDR is read.\n       * modifier_reset, below, preserves the setting until after it has called\n       * the iterate function (also below.)\n       *\n       * For this reason do not rely on this function outside a call to\n       * modifier_reset.\n       */\n ((pm->bit_depth == 16 || pm->assume_16_bit_calculations) ?\n         pm->nencodings : 0);)"];
"1000114" [label="(FieldIdentifier,ngammas)"];
"1000111" [label="(Call,pm->ngammas +           /* (2) gamma values to test */\n      pm->nencodings + /* (3) total number of encodings */\n /* The following test only works after the first time through the\n       * png_modifier code because 'bit_depth' is set when the IHDR is read.\n       * modifier_reset, below, preserves the setting until after it has called\n       * the iterate function (also below.)\n       *\n       * For this reason do not rely on this function outside a call to\n       * modifier_reset.\n       */\n ((pm->bit_depth == 16 || pm->assume_16_bit_calculations) ?\n         pm->nencodings : 0))"];
"1000112" [label="(Call,pm->ngammas)"];
"1000113" [label="(Identifier,pm)"];
"1000118" [label="(FieldIdentifier,nencodings)"];
"1000115" [label="(Call,pm->nencodings + /* (3) total number of encodings */\n /* The following test only works after the first time through the\n       * png_modifier code because 'bit_depth' is set when the IHDR is read.\n       * modifier_reset, below, preserves the setting until after it has called\n       * the iterate function (also below.)\n       *\n       * For this reason do not rely on this function outside a call to\n       * modifier_reset.\n       */\n ((pm->bit_depth == 16 || pm->assume_16_bit_calculations) ?\n         pm->nencodings : 0))"];
"1000116" [label="(Call,pm->nencodings)"];
"1000117" [label="(Identifier,pm)"];
"1000119" -> "1000115"  [label="AST: "];
"1000119" -> "1000129"  [label="CFG: "];
"1000119" -> "1000132"  [label="CFG: "];
"1000120" -> "1000119"  [label="AST: "];
"1000129" -> "1000119"  [label="AST: "];
"1000132" -> "1000119"  [label="AST: "];
"1000115" -> "1000119"  [label="CFG: "];
"1000119" -> "1000133"  [label="DDG: pm->bit_depth == 16 || pm->assume_16_bit_calculations"];
"1000125" -> "1000121"  [label="AST: "];
"1000125" -> "1000122"  [label="CFG: "];
"1000121" -> "1000125"  [label="CFG: "];
"1000126" -> "1000120"  [label="AST: "];
"1000126" -> "1000128"  [label="CFG: "];
"1000127" -> "1000126"  [label="AST: "];
"1000128" -> "1000126"  [label="AST: "];
"1000120" -> "1000126"  [label="CFG: "];
"1000127" -> "1000126"  [label="AST: "];
"1000127" -> "1000121"  [label="CFG: "];
"1000128" -> "1000127"  [label="CFG: "];
"1000120" -> "1000119"  [label="AST: "];
"1000120" -> "1000121"  [label="CFG: "];
"1000120" -> "1000126"  [label="CFG: "];
"1000121" -> "1000120"  [label="AST: "];
"1000126" -> "1000120"  [label="AST: "];
"1000130" -> "1000120"  [label="CFG: "];
"1000132" -> "1000120"  [label="CFG: "];
"1000120" -> "1000133"  [label="DDG: pm->assume_16_bit_calculations"];
"1000120" -> "1000133"  [label="DDG: pm->bit_depth == 16"];
"1000121" -> "1000120"  [label="DDG: pm->bit_depth"];
"1000121" -> "1000120"  [label="DDG: 16"];
"1000121" -> "1000120"  [label="AST: "];
"1000121" -> "1000125"  [label="CFG: "];
"1000122" -> "1000121"  [label="AST: "];
"1000125" -> "1000121"  [label="AST: "];
"1000127" -> "1000121"  [label="CFG: "];
"1000120" -> "1000121"  [label="CFG: "];
"1000121" -> "1000133"  [label="DDG: pm->bit_depth"];
"1000121" -> "1000120"  [label="DDG: pm->bit_depth"];
"1000121" -> "1000120"  [label="DDG: 16"];
"1000122" -> "1000121"  [label="AST: "];
"1000122" -> "1000124"  [label="CFG: "];
"1000123" -> "1000122"  [label="AST: "];
"1000124" -> "1000122"  [label="AST: "];
"1000125" -> "1000122"  [label="CFG: "];
"1000123" -> "1000122"  [label="AST: "];
"1000123" -> "1000116"  [label="CFG: "];
"1000124" -> "1000123"  [label="CFG: "];
"1000128" -> "1000126"  [label="AST: "];
"1000128" -> "1000127"  [label="CFG: "];
"1000126" -> "1000128"  [label="CFG: "];
"1000124" -> "1000122"  [label="AST: "];
"1000124" -> "1000123"  [label="CFG: "];
"1000122" -> "1000124"  [label="CFG: "];
"1000131" -> "1000129"  [label="AST: "];
"1000131" -> "1000130"  [label="CFG: "];
"1000129" -> "1000131"  [label="CFG: "];
"1000132" -> "1000119"  [label="AST: "];
"1000132" -> "1000120"  [label="CFG: "];
"1000119" -> "1000132"  [label="CFG: "];
"1000129" -> "1000119"  [label="AST: "];
"1000129" -> "1000131"  [label="CFG: "];
"1000130" -> "1000129"  [label="AST: "];
"1000131" -> "1000129"  [label="AST: "];
"1000119" -> "1000129"  [label="CFG: "];
"1000130" -> "1000129"  [label="AST: "];
"1000130" -> "1000120"  [label="CFG: "];
"1000131" -> "1000130"  [label="CFG: "];
"1000133" -> "1000105"  [label="AST: "];
"1000133" -> "1000108"  [label="CFG: "];
"1000108" -> "1000133"  [label="DDG: <RET>"];
"1000120" -> "1000133"  [label="DDG: pm->assume_16_bit_calculations"];
"1000120" -> "1000133"  [label="DDG: pm->bit_depth == 16"];
"1000111" -> "1000133"  [label="DDG: pm->ngammas"];
"1000111" -> "1000133"  [label="DDG: pm->nencodings + /* (3) total number of encodings */\n /* The following test only works after the first time through the\n       * png_modifier code because 'bit_depth' is set when the IHDR is read.\n       * modifier_reset, below, preserves the setting until after it has called\n       * the iterate function (also below.)\n       *\n       * For this reason do not rely on this function outside a call to\n       * modifier_reset.\n       */\n ((pm->bit_depth == 16 || pm->assume_16_bit_calculations) ?\n         pm->nencodings : 0)"];
"1000119" -> "1000133"  [label="DDG: pm->bit_depth == 16 || pm->assume_16_bit_calculations"];
"1000121" -> "1000133"  [label="DDG: pm->bit_depth"];
"1000115" -> "1000133"  [label="DDG: (pm->bit_depth == 16 || pm->assume_16_bit_calculations) ?\n         pm->nencodings : 0"];
"1000115" -> "1000133"  [label="DDG: pm->nencodings"];
"1000109" -> "1000133"  [label="DDG: pm->ngammas +           /* (2) gamma values to test */\n      pm->nencodings + /* (3) total number of encodings */\n /* The following test only works after the first time through the\n       * png_modifier code because 'bit_depth' is set when the IHDR is read.\n       * modifier_reset, below, preserves the setting until after it has called\n       * the iterate function (also below.)\n       *\n       * For this reason do not rely on this function outside a call to\n       * modifier_reset.\n       */\n ((pm->bit_depth == 16 || pm->assume_16_bit_calculations) ?\n         pm->nencodings : 0)"];
"1000109" -> "1000133"  [label="DDG: 1 +                 /* (1) nothing */\n       pm->ngammas +           /* (2) gamma values to test */\n      pm->nencodings + /* (3) total number of encodings */\n /* The following test only works after the first time through the\n       * png_modifier code because 'bit_depth' is set when the IHDR is read.\n       * modifier_reset, below, preserves the setting until after it has called\n       * the iterate function (also below.)\n       *\n       * For this reason do not rely on this function outside a call to\n       * modifier_reset.\n       */\n ((pm->bit_depth == 16 || pm->assume_16_bit_calculations) ?\n         pm->nencodings : 0)"];
"1000106" -> "1000133"  [label="DDG: pm"];
"1000106" -> "1000105"  [label="AST: "];
"1000106" -> "1000133"  [label="DDG: pm"];
"1000164" -> "1000105"  [label="AST: "];
"1000107" -> "1000105"  [label="AST: "];
"1000108" -> "1000107"  [label="AST: "];
"1000109" -> "1000108"  [label="AST: "];
"1000109" -> "1000111"  [label="CFG: "];
"1000110" -> "1000109"  [label="AST: "];
"1000111" -> "1000109"  [label="AST: "];
"1000108" -> "1000109"  [label="CFG: "];
"1000109" -> "1000133"  [label="DDG: pm->ngammas +           /* (2) gamma values to test */\n      pm->nencodings + /* (3) total number of encodings */\n /* The following test only works after the first time through the\n       * png_modifier code because 'bit_depth' is set when the IHDR is read.\n       * modifier_reset, below, preserves the setting until after it has called\n       * the iterate function (also below.)\n       *\n       * For this reason do not rely on this function outside a call to\n       * modifier_reset.\n       */\n ((pm->bit_depth == 16 || pm->assume_16_bit_calculations) ?\n         pm->nencodings : 0)"];
"1000109" -> "1000133"  [label="DDG: 1 +                 /* (1) nothing */\n       pm->ngammas +           /* (2) gamma values to test */\n      pm->nencodings + /* (3) total number of encodings */\n /* The following test only works after the first time through the\n       * png_modifier code because 'bit_depth' is set when the IHDR is read.\n       * modifier_reset, below, preserves the setting until after it has called\n       * the iterate function (also below.)\n       *\n       * For this reason do not rely on this function outside a call to\n       * modifier_reset.\n       */\n ((pm->bit_depth == 16 || pm->assume_16_bit_calculations) ?\n         pm->nencodings : 0)"];
"1000109" -> "1000108"  [label="DDG: 1 +                 /* (1) nothing */\n       pm->ngammas +           /* (2) gamma values to test */\n      pm->nencodings + /* (3) total number of encodings */\n /* The following test only works after the first time through the\n       * png_modifier code because 'bit_depth' is set when the IHDR is read.\n       * modifier_reset, below, preserves the setting until after it has called\n       * the iterate function (also below.)\n       *\n       * For this reason do not rely on this function outside a call to\n       * modifier_reset.\n       */\n ((pm->bit_depth == 16 || pm->assume_16_bit_calculations) ?\n         pm->nencodings : 0)"];
"1000110" -> "1000109"  [label="AST: "];
"1000110" -> "1000105"  [label="CFG: "];
"1000113" -> "1000110"  [label="CFG: "];
"1000108" -> "1000107"  [label="AST: "];
"1000108" -> "1000109"  [label="CFG: "];
"1000109" -> "1000108"  [label="AST: "];
"1000133" -> "1000108"  [label="CFG: "];
"1000108" -> "1000133"  [label="DDG: <RET>"];
"1000109" -> "1000108"  [label="DDG: 1 +                 /* (1) nothing */\n       pm->ngammas +           /* (2) gamma values to test */\n      pm->nencodings + /* (3) total number of encodings */\n /* The following test only works after the first time through the\n       * png_modifier code because 'bit_depth' is set when the IHDR is read.\n       * modifier_reset, below, preserves the setting until after it has called\n       * the iterate function (also below.)\n       *\n       * For this reason do not rely on this function outside a call to\n       * modifier_reset.\n       */\n ((pm->bit_depth == 16 || pm->assume_16_bit_calculations) ?\n         pm->nencodings : 0)"];
"1000114" -> "1000112"  [label="AST: "];
"1000114" -> "1000113"  [label="CFG: "];
"1000112" -> "1000114"  [label="CFG: "];
"1000111" -> "1000109"  [label="AST: "];
"1000111" -> "1000115"  [label="CFG: "];
"1000112" -> "1000111"  [label="AST: "];
"1000115" -> "1000111"  [label="AST: "];
"1000109" -> "1000111"  [label="CFG: "];
"1000111" -> "1000133"  [label="DDG: pm->ngammas"];
"1000111" -> "1000133"  [label="DDG: pm->nencodings + /* (3) total number of encodings */\n /* The following test only works after the first time through the\n       * png_modifier code because 'bit_depth' is set when the IHDR is read.\n       * modifier_reset, below, preserves the setting until after it has called\n       * the iterate function (also below.)\n       *\n       * For this reason do not rely on this function outside a call to\n       * modifier_reset.\n       */\n ((pm->bit_depth == 16 || pm->assume_16_bit_calculations) ?\n         pm->nencodings : 0)"];
"1000112" -> "1000111"  [label="AST: "];
"1000112" -> "1000114"  [label="CFG: "];
"1000113" -> "1000112"  [label="AST: "];
"1000114" -> "1000112"  [label="AST: "];
"1000117" -> "1000112"  [label="CFG: "];
"1000113" -> "1000112"  [label="AST: "];
"1000113" -> "1000110"  [label="CFG: "];
"1000114" -> "1000113"  [label="CFG: "];
"1000118" -> "1000116"  [label="AST: "];
"1000118" -> "1000117"  [label="CFG: "];
"1000116" -> "1000118"  [label="CFG: "];
"1000115" -> "1000111"  [label="AST: "];
"1000115" -> "1000119"  [label="CFG: "];
"1000116" -> "1000115"  [label="AST: "];
"1000119" -> "1000115"  [label="AST: "];
"1000111" -> "1000115"  [label="CFG: "];
"1000115" -> "1000133"  [label="DDG: (pm->bit_depth == 16 || pm->assume_16_bit_calculations) ?\n         pm->nencodings : 0"];
"1000115" -> "1000133"  [label="DDG: pm->nencodings"];
"1000116" -> "1000115"  [label="AST: "];
"1000116" -> "1000118"  [label="CFG: "];
"1000117" -> "1000116"  [label="AST: "];
"1000118" -> "1000116"  [label="AST: "];
"1000123" -> "1000116"  [label="CFG: "];
"1000117" -> "1000116"  [label="AST: "];
"1000117" -> "1000112"  [label="CFG: "];
"1000118" -> "1000117"  [label="CFG: "];
}
