digraph "0_Chrome_cc0bbcbe7c986094da8e58c37a21fdd179b686b0_0" {
"1000133" [label="(Identifier,false)"];
"1000132" [label="(Return,return false;)"];
"1000135" [label="(ControlStructure,if (deviation_characters_.containsSome(label_string)))"];
"1000137" [label="(Identifier,label_string)"];
"1000136" [label="(Call,deviation_characters_.containsSome(label_string))"];
"1000139" [label="(Identifier,false)"];
"1000138" [label="(Return,return false;)"];
"1000216" [label="(MethodReturn,bool)"];
"1000140" [label="(ControlStructure,if (label_string.length() > 1 && label_string.indexOf(\"þ\") != -1 &&\n      top_level_domain != \".is\"))"];
"1000144" [label="(Literal,1)"];
"1000145" [label="(Call,label_string.indexOf(\"þ\") != -1 &&\n      top_level_domain != \".is\")"];
"1000146" [label="(Call,label_string.indexOf(\"þ\") != -1)"];
"1000147" [label="(Call,label_string.indexOf(\"þ\"))"];
"1000148" [label="(Literal,\"þ\")"];
"1000141" [label="(Call,label_string.length() > 1 && label_string.indexOf(\"þ\") != -1 &&\n      top_level_domain != \".is\")"];
"1000142" [label="(Call,label_string.length() > 1)"];
"1000143" [label="(Call,label_string.length())"];
"1000149" [label="(Call,-1)"];
"1000150" [label="(Literal,1)"];
"1000153" [label="(Literal,\".is\")"];
"1000154" [label="(Block,)"];
"1000151" [label="(Call,top_level_domain != \".is\")"];
"1000152" [label="(Identifier,top_level_domain)"];
"1000156" [label="(Identifier,false)"];
"1000155" [label="(Return,return false;)"];
"1000159" [label="(Identifier,USPOOF_RESTRICTION_LEVEL_MASK)"];
"1000157" [label="(Call,result &= USPOOF_RESTRICTION_LEVEL_MASK)"];
"1000158" [label="(Identifier,result)"];
"1000163" [label="(Identifier,USPOOF_ASCII)"];
"1000160" [label="(ControlStructure,if (result == USPOOF_ASCII))"];
"1000161" [label="(Call,result == USPOOF_ASCII)"];
"1000162" [label="(Identifier,result)"];
"1000165" [label="(Identifier,true)"];
"1000164" [label="(Return,return true;)"];
"1000170" [label="(Identifier,USPOOF_SINGLE_SCRIPT_RESTRICTIVE)"];
"1000166" [label="(ControlStructure,if (result == USPOOF_SINGLE_SCRIPT_RESTRICTIVE &&\n       kana_letters_exceptions_.containsNone(label_string) &&\n       combining_diacritics_exceptions_.containsNone(label_string)))"];
"1000167" [label="(Call,result == USPOOF_SINGLE_SCRIPT_RESTRICTIVE &&\n       kana_letters_exceptions_.containsNone(label_string) &&\n       combining_diacritics_exceptions_.containsNone(label_string))"];
"1000168" [label="(Call,result == USPOOF_SINGLE_SCRIPT_RESTRICTIVE)"];
"1000169" [label="(Identifier,result)"];
"1000104" [label="(MethodParameterIn,base::StringPiece16 label)"];
"1000358" [label="(MethodParameterOut,base::StringPiece16 label)"];
"1000173" [label="(Identifier,label_string)"];
"1000171" [label="(Call,kana_letters_exceptions_.containsNone(label_string) &&\n       combining_diacritics_exceptions_.containsNone(label_string))"];
"1000172" [label="(Call,kana_letters_exceptions_.containsNone(label_string))"];
"1000175" [label="(Identifier,label_string)"];
"1000174" [label="(Call,combining_diacritics_exceptions_.containsNone(label_string))"];
"1000180" [label="(Call,!top_level_domain.starts_with(\".xn--\"))"];
"1000181" [label="(Call,top_level_domain.starts_with(\".xn--\"))"];
"1000176" [label="(Block,)"];
"1000182" [label="(Literal,\".xn--\")"];
"1000178" [label="(Call,is_tld_ascii = !top_level_domain.starts_with(\".xn--\"))"];
"1000179" [label="(Identifier,is_tld_ascii)"];
"1000184" [label="(Call,!is_tld_ascii || !IsMadeOfLatinAlikeCyrillic(label_string))"];
"1000185" [label="(Call,!is_tld_ascii)"];
"1000186" [label="(Identifier,is_tld_ascii)"];
"1000187" [label="(Call,!IsMadeOfLatinAlikeCyrillic(label_string))"];
"1000188" [label="(Call,IsMadeOfLatinAlikeCyrillic(label_string))"];
"1000183" [label="(Return,return !is_tld_ascii || !IsMadeOfLatinAlikeCyrillic(label_string);)"];
"1000189" [label="(Identifier,label_string)"];
"1000190" [label="(ControlStructure,if (non_ascii_latin_letters_.containsSome(label_string) &&\n      !lgc_letters_n_ascii_.containsAll(label_string)))"];
"1000193" [label="(Identifier,label_string)"];
"1000191" [label="(Call,non_ascii_latin_letters_.containsSome(label_string) &&\n      !lgc_letters_n_ascii_.containsAll(label_string))"];
"1000192" [label="(Call,non_ascii_latin_letters_.containsSome(label_string))"];
"1000196" [label="(Identifier,label_string)"];
"1000194" [label="(Call,!lgc_letters_n_ascii_.containsAll(label_string))"];
"1000195" [label="(Call,lgc_letters_n_ascii_.containsAll(label_string))"];
"1000198" [label="(Identifier,false)"];
"1000197" [label="(Return,return false;)"];
"1000105" [label="(MethodParameterIn,base::StringPiece top_level_domain)"];
"1000359" [label="(MethodParameterOut,base::StringPiece top_level_domain)"];
"1000106" [label="(Block,)"];
"1000200" [label="(Call,* dangerous_pattern =\n      reinterpret_cast<icu::RegexMatcher*>(DangerousPatternTLS().Get()))"];
"1000201" [label="(Identifier,dangerous_pattern)"];
"1000204" [label="(Call,DangerousPatternTLS().Get())"];
"1000202" [label="(Call,reinterpret_cast<icu::RegexMatcher*>(DangerousPatternTLS().Get()))"];
"1000205" [label="(ControlStructure,if (!dangerous_pattern))"];
"1000208" [label="(Block,)"];
"1000206" [label="(Call,!dangerous_pattern)"];
"1000207" [label="(Identifier,dangerous_pattern)"];
"1000108" [label="(Call,status = U_ZERO_ERROR)"];
"1000109" [label="(Identifier,status)"];
"1000110" [label="(Identifier,U_ZERO_ERROR)"];
"1000112" [label="(Call,result =\n       uspoof_check(checker_, label.data(),\n                   base::checked_cast<int32_t>(label.size()), nullptr, &status))"];
"1000113" [label="(Identifier,result)"];
"1000115" [label="(Identifier,checker_)"];
"1000116" [label="(Call,label.data())"];
"1000114" [label="(Call,uspoof_check(checker_, label.data(),\n                   base::checked_cast<int32_t>(label.size()), nullptr, &status))"];
"1000210" [label="(Identifier,dangerous_pattern)"];
"1000209" [label="(Call,DangerousPatternTLS().Set(dangerous_pattern))"];
"1000211" [label="(Call,dangerous_pattern->reset(label_string))"];
"1000212" [label="(Identifier,label_string)"];
"1000215" [label="(Call,dangerous_pattern->find())"];
"1000213" [label="(Return,return !dangerous_pattern->find();)"];
"1000214" [label="(Call,!dangerous_pattern->find())"];
"1000117" [label="(Call,base::checked_cast<int32_t>(label.size()))"];
"1000118" [label="(Identifier,base::checked_cast)"];
"1000119" [label="(Call,int32_t>(label.size()))"];
"1000120" [label="(Identifier,int32_t)"];
"1000121" [label="(Call,label.size())"];
"1000122" [label="(Identifier,nullptr)"];
"1000123" [label="(Call,&status)"];
"1000124" [label="(Identifier,status)"];
"1000128" [label="(Identifier,status)"];
"1000125" [label="(ControlStructure,if (U_FAILURE(status) || (result & USPOOF_ALL_CHECKS)))"];
"1000129" [label="(Call,result & USPOOF_ALL_CHECKS)"];
"1000130" [label="(Identifier,result)"];
"1000131" [label="(Identifier,USPOOF_ALL_CHECKS)"];
"1000126" [label="(Call,U_FAILURE(status) || (result & USPOOF_ALL_CHECKS))"];
"1000127" [label="(Call,U_FAILURE(status))"];
"1000133" -> "1000132"  [label="AST: "];
"1000133" -> "1000126"  [label="CFG: "];
"1000132" -> "1000133"  [label="CFG: "];
"1000133" -> "1000132"  [label="DDG: false"];
"1000132" -> "1000125"  [label="AST: "];
"1000132" -> "1000133"  [label="CFG: "];
"1000133" -> "1000132"  [label="AST: "];
"1000216" -> "1000132"  [label="CFG: "];
"1000132" -> "1000216"  [label="DDG: <RET>"];
"1000133" -> "1000132"  [label="DDG: false"];
"1000135" -> "1000106"  [label="AST: "];
"1000136" -> "1000135"  [label="AST: "];
"1000138" -> "1000135"  [label="AST: "];
"1000137" -> "1000136"  [label="AST: "];
"1000137" -> "1000126"  [label="CFG: "];
"1000136" -> "1000137"  [label="CFG: "];
"1000136" -> "1000135"  [label="AST: "];
"1000136" -> "1000137"  [label="CFG: "];
"1000137" -> "1000136"  [label="AST: "];
"1000139" -> "1000136"  [label="CFG: "];
"1000143" -> "1000136"  [label="CFG: "];
"1000136" -> "1000216"  [label="DDG: deviation_characters_.containsSome(label_string)"];
"1000136" -> "1000216"  [label="DDG: label_string"];
"1000136" -> "1000172"  [label="DDG: label_string"];
"1000136" -> "1000188"  [label="DDG: label_string"];
"1000136" -> "1000192"  [label="DDG: label_string"];
"1000139" -> "1000138"  [label="AST: "];
"1000139" -> "1000136"  [label="CFG: "];
"1000138" -> "1000139"  [label="CFG: "];
"1000139" -> "1000138"  [label="DDG: false"];
"1000138" -> "1000135"  [label="AST: "];
"1000138" -> "1000139"  [label="CFG: "];
"1000139" -> "1000138"  [label="AST: "];
"1000216" -> "1000138"  [label="CFG: "];
"1000138" -> "1000216"  [label="DDG: <RET>"];
"1000139" -> "1000138"  [label="DDG: false"];
"1000216" -> "1000103"  [label="AST: "];
"1000216" -> "1000132"  [label="CFG: "];
"1000216" -> "1000138"  [label="CFG: "];
"1000216" -> "1000155"  [label="CFG: "];
"1000216" -> "1000164"  [label="CFG: "];
"1000216" -> "1000183"  [label="CFG: "];
"1000216" -> "1000197"  [label="CFG: "];
"1000216" -> "1000213"  [label="CFG: "];
"1000197" -> "1000216"  [label="DDG: <RET>"];
"1000132" -> "1000216"  [label="DDG: <RET>"];
"1000183" -> "1000216"  [label="DDG: <RET>"];
"1000191" -> "1000216"  [label="DDG: !lgc_letters_n_ascii_.containsAll(label_string)"];
"1000191" -> "1000216"  [label="DDG: non_ascii_latin_letters_.containsSome(label_string) &&\n      !lgc_letters_n_ascii_.containsAll(label_string)"];
"1000191" -> "1000216"  [label="DDG: non_ascii_latin_letters_.containsSome(label_string)"];
"1000184" -> "1000216"  [label="DDG: !is_tld_ascii"];
"1000184" -> "1000216"  [label="DDG: !IsMadeOfLatinAlikeCyrillic(label_string)"];
"1000184" -> "1000216"  [label="DDG: !is_tld_ascii || !IsMadeOfLatinAlikeCyrillic(label_string)"];
"1000168" -> "1000216"  [label="DDG: result"];
"1000168" -> "1000216"  [label="DDG: USPOOF_SINGLE_SCRIPT_RESTRICTIVE"];
"1000104" -> "1000216"  [label="DDG: label"];
"1000105" -> "1000216"  [label="DDG: top_level_domain"];
"1000180" -> "1000216"  [label="DDG: top_level_domain.starts_with(\\".xn--\\")"];
"1000146" -> "1000216"  [label="DDG: -1"];
"1000146" -> "1000216"  [label="DDG: label_string.indexOf(\\"?\\")"];
"1000117" -> "1000216"  [label="DDG: base::checked_cast"];
"1000117" -> "1000216"  [label="DDG: int32_t>(label.size())"];
"1000211" -> "1000216"  [label="DDG: label_string"];
"1000211" -> "1000216"  [label="DDG: dangerous_pattern->reset(label_string)"];
"1000127" -> "1000216"  [label="DDG: status"];
"1000157" -> "1000216"  [label="DDG: USPOOF_RESTRICTION_LEVEL_MASK"];
"1000157" -> "1000216"  [label="DDG: result &= USPOOF_RESTRICTION_LEVEL_MASK"];
"1000114" -> "1000216"  [label="DDG: base::checked_cast<int32_t>(label.size())"];
"1000114" -> "1000216"  [label="DDG: &status"];
"1000114" -> "1000216"  [label="DDG: checker_"];
"1000114" -> "1000216"  [label="DDG: nullptr"];
"1000114" -> "1000216"  [label="DDG: label.data()"];
"1000187" -> "1000216"  [label="DDG: IsMadeOfLatinAlikeCyrillic(label_string)"];
"1000167" -> "1000216"  [label="DDG: result == USPOOF_SINGLE_SCRIPT_RESTRICTIVE"];
"1000167" -> "1000216"  [label="DDG: result == USPOOF_SINGLE_SCRIPT_RESTRICTIVE &&\n       kana_letters_exceptions_.containsNone(label_string) &&\n       combining_diacritics_exceptions_.containsNone(label_string)"];
"1000167" -> "1000216"  [label="DDG: kana_letters_exceptions_.containsNone(label_string) &&\n       combining_diacritics_exceptions_.containsNone(label_string)"];
"1000129" -> "1000216"  [label="DDG: result"];
"1000129" -> "1000216"  [label="DDG: USPOOF_ALL_CHECKS"];
"1000185" -> "1000216"  [label="DDG: is_tld_ascii"];
"1000126" -> "1000216"  [label="DDG: U_FAILURE(status) || (result & USPOOF_ALL_CHECKS)"];
"1000126" -> "1000216"  [label="DDG: result & USPOOF_ALL_CHECKS"];
"1000126" -> "1000216"  [label="DDG: U_FAILURE(status)"];
"1000171" -> "1000216"  [label="DDG: kana_letters_exceptions_.containsNone(label_string)"];
"1000171" -> "1000216"  [label="DDG: combining_diacritics_exceptions_.containsNone(label_string)"];
"1000141" -> "1000216"  [label="DDG: label_string.length() > 1"];
"1000141" -> "1000216"  [label="DDG: label_string.length() > 1 && label_string.indexOf(\\"?\\") != -1 &&\n      top_level_domain != \\".is\\""];
"1000141" -> "1000216"  [label="DDG: label_string.indexOf(\\"?\\") != -1 &&\n      top_level_domain != \\".is\\""];
"1000209" -> "1000216"  [label="DDG: DangerousPatternTLS().Set(dangerous_pattern)"];
"1000209" -> "1000216"  [label="DDG: dangerous_pattern"];
"1000145" -> "1000216"  [label="DDG: top_level_domain != \\".is\\""];
"1000145" -> "1000216"  [label="DDG: label_string.indexOf(\\"?\\") != -1"];
"1000112" -> "1000216"  [label="DDG: uspoof_check(checker_, label.data(),\n                   base::checked_cast<int32_t>(label.size()), nullptr, &status)"];
"1000112" -> "1000216"  [label="DDG: result"];
"1000214" -> "1000216"  [label="DDG: !dangerous_pattern->find()"];
"1000214" -> "1000216"  [label="DDG: dangerous_pattern->find()"];
"1000188" -> "1000216"  [label="DDG: label_string"];
"1000206" -> "1000216"  [label="DDG: !dangerous_pattern"];
"1000206" -> "1000216"  [label="DDG: dangerous_pattern"];
"1000194" -> "1000216"  [label="DDG: lgc_letters_n_ascii_.containsAll(label_string)"];
"1000151" -> "1000216"  [label="DDG: top_level_domain"];
"1000119" -> "1000216"  [label="DDG: label.size()"];
"1000119" -> "1000216"  [label="DDG: int32_t"];
"1000178" -> "1000216"  [label="DDG: !top_level_domain.starts_with(\\".xn--\\")"];
"1000192" -> "1000216"  [label="DDG: label_string"];
"1000108" -> "1000216"  [label="DDG: U_ZERO_ERROR"];
"1000172" -> "1000216"  [label="DDG: label_string"];
"1000142" -> "1000216"  [label="DDG: label_string.length()"];
"1000136" -> "1000216"  [label="DDG: deviation_characters_.containsSome(label_string)"];
"1000136" -> "1000216"  [label="DDG: label_string"];
"1000161" -> "1000216"  [label="DDG: USPOOF_ASCII"];
"1000161" -> "1000216"  [label="DDG: result"];
"1000161" -> "1000216"  [label="DDG: result == USPOOF_ASCII"];
"1000195" -> "1000216"  [label="DDG: label_string"];
"1000174" -> "1000216"  [label="DDG: label_string"];
"1000202" -> "1000216"  [label="DDG: DangerousPatternTLS().Get()"];
"1000200" -> "1000216"  [label="DDG: reinterpret_cast<icu::RegexMatcher*>(DangerousPatternTLS().Get())"];
"1000155" -> "1000216"  [label="DDG: <RET>"];
"1000138" -> "1000216"  [label="DDG: <RET>"];
"1000213" -> "1000216"  [label="DDG: <RET>"];
"1000164" -> "1000216"  [label="DDG: <RET>"];
"1000140" -> "1000106"  [label="AST: "];
"1000141" -> "1000140"  [label="AST: "];
"1000154" -> "1000140"  [label="AST: "];
"1000144" -> "1000142"  [label="AST: "];
"1000144" -> "1000143"  [label="CFG: "];
"1000142" -> "1000144"  [label="CFG: "];
"1000145" -> "1000141"  [label="AST: "];
"1000145" -> "1000146"  [label="CFG: "];
"1000145" -> "1000151"  [label="CFG: "];
"1000146" -> "1000145"  [label="AST: "];
"1000151" -> "1000145"  [label="AST: "];
"1000141" -> "1000145"  [label="CFG: "];
"1000145" -> "1000216"  [label="DDG: top_level_domain != \\".is\\""];
"1000145" -> "1000216"  [label="DDG: label_string.indexOf(\\"?\\") != -1"];
"1000145" -> "1000141"  [label="DDG: label_string.indexOf(\\"?\\") != -1"];
"1000145" -> "1000141"  [label="DDG: top_level_domain != \\".is\\""];
"1000146" -> "1000145"  [label="DDG: label_string.indexOf(\\"?\\")"];
"1000146" -> "1000145"  [label="DDG: -1"];
"1000151" -> "1000145"  [label="DDG: top_level_domain"];
"1000151" -> "1000145"  [label="DDG: \\".is\\""];
"1000146" -> "1000145"  [label="AST: "];
"1000146" -> "1000149"  [label="CFG: "];
"1000147" -> "1000146"  [label="AST: "];
"1000149" -> "1000146"  [label="AST: "];
"1000152" -> "1000146"  [label="CFG: "];
"1000145" -> "1000146"  [label="CFG: "];
"1000146" -> "1000216"  [label="DDG: -1"];
"1000146" -> "1000216"  [label="DDG: label_string.indexOf(\\"?\\")"];
"1000146" -> "1000145"  [label="DDG: label_string.indexOf(\\"?\\")"];
"1000146" -> "1000145"  [label="DDG: -1"];
"1000147" -> "1000146"  [label="DDG: \\"?\\""];
"1000149" -> "1000146"  [label="DDG: 1"];
"1000147" -> "1000146"  [label="AST: "];
"1000147" -> "1000148"  [label="CFG: "];
"1000148" -> "1000147"  [label="AST: "];
"1000150" -> "1000147"  [label="CFG: "];
"1000147" -> "1000146"  [label="DDG: \\"?\\""];
"1000148" -> "1000147"  [label="AST: "];
"1000148" -> "1000142"  [label="CFG: "];
"1000147" -> "1000148"  [label="CFG: "];
"1000141" -> "1000140"  [label="AST: "];
"1000141" -> "1000142"  [label="CFG: "];
"1000141" -> "1000145"  [label="CFG: "];
"1000142" -> "1000141"  [label="AST: "];
"1000145" -> "1000141"  [label="AST: "];
"1000156" -> "1000141"  [label="CFG: "];
"1000158" -> "1000141"  [label="CFG: "];
"1000141" -> "1000216"  [label="DDG: label_string.length() > 1"];
"1000141" -> "1000216"  [label="DDG: label_string.length() > 1 && label_string.indexOf(\\"?\\") != -1 &&\n      top_level_domain != \\".is\\""];
"1000141" -> "1000216"  [label="DDG: label_string.indexOf(\\"?\\") != -1 &&\n      top_level_domain != \\".is\\""];
"1000142" -> "1000141"  [label="DDG: label_string.length()"];
"1000142" -> "1000141"  [label="DDG: 1"];
"1000145" -> "1000141"  [label="DDG: label_string.indexOf(\\"?\\") != -1"];
"1000145" -> "1000141"  [label="DDG: top_level_domain != \\".is\\""];
"1000142" -> "1000141"  [label="AST: "];
"1000142" -> "1000144"  [label="CFG: "];
"1000143" -> "1000142"  [label="AST: "];
"1000144" -> "1000142"  [label="AST: "];
"1000148" -> "1000142"  [label="CFG: "];
"1000141" -> "1000142"  [label="CFG: "];
"1000142" -> "1000216"  [label="DDG: label_string.length()"];
"1000142" -> "1000141"  [label="DDG: label_string.length()"];
"1000142" -> "1000141"  [label="DDG: 1"];
"1000143" -> "1000142"  [label="AST: "];
"1000143" -> "1000136"  [label="CFG: "];
"1000144" -> "1000143"  [label="CFG: "];
"1000149" -> "1000146"  [label="AST: "];
"1000149" -> "1000150"  [label="CFG: "];
"1000150" -> "1000149"  [label="AST: "];
"1000146" -> "1000149"  [label="CFG: "];
"1000149" -> "1000146"  [label="DDG: 1"];
"1000150" -> "1000149"  [label="AST: "];
"1000150" -> "1000147"  [label="CFG: "];
"1000149" -> "1000150"  [label="CFG: "];
"1000153" -> "1000151"  [label="AST: "];
"1000153" -> "1000152"  [label="CFG: "];
"1000151" -> "1000153"  [label="CFG: "];
"1000154" -> "1000140"  [label="AST: "];
"1000155" -> "1000154"  [label="AST: "];
"1000151" -> "1000145"  [label="AST: "];
"1000151" -> "1000153"  [label="CFG: "];
"1000152" -> "1000151"  [label="AST: "];
"1000153" -> "1000151"  [label="AST: "];
"1000145" -> "1000151"  [label="CFG: "];
"1000151" -> "1000216"  [label="DDG: top_level_domain"];
"1000151" -> "1000145"  [label="DDG: top_level_domain"];
"1000151" -> "1000145"  [label="DDG: \\".is\\""];
"1000105" -> "1000151"  [label="DDG: top_level_domain"];
"1000152" -> "1000151"  [label="AST: "];
"1000152" -> "1000146"  [label="CFG: "];
"1000153" -> "1000152"  [label="CFG: "];
"1000156" -> "1000155"  [label="AST: "];
"1000156" -> "1000141"  [label="CFG: "];
"1000155" -> "1000156"  [label="CFG: "];
"1000156" -> "1000155"  [label="DDG: false"];
"1000155" -> "1000154"  [label="AST: "];
"1000155" -> "1000156"  [label="CFG: "];
"1000156" -> "1000155"  [label="AST: "];
"1000216" -> "1000155"  [label="CFG: "];
"1000155" -> "1000216"  [label="DDG: <RET>"];
"1000156" -> "1000155"  [label="DDG: false"];
"1000159" -> "1000157"  [label="AST: "];
"1000159" -> "1000158"  [label="CFG: "];
"1000157" -> "1000159"  [label="CFG: "];
"1000157" -> "1000106"  [label="AST: "];
"1000157" -> "1000159"  [label="CFG: "];
"1000158" -> "1000157"  [label="AST: "];
"1000159" -> "1000157"  [label="AST: "];
"1000162" -> "1000157"  [label="CFG: "];
"1000157" -> "1000216"  [label="DDG: USPOOF_RESTRICTION_LEVEL_MASK"];
"1000157" -> "1000216"  [label="DDG: result &= USPOOF_RESTRICTION_LEVEL_MASK"];
"1000129" -> "1000157"  [label="DDG: result"];
"1000112" -> "1000157"  [label="DDG: result"];
"1000157" -> "1000161"  [label="DDG: result"];
"1000158" -> "1000157"  [label="AST: "];
"1000158" -> "1000141"  [label="CFG: "];
"1000159" -> "1000158"  [label="CFG: "];
"1000163" -> "1000161"  [label="AST: "];
"1000163" -> "1000162"  [label="CFG: "];
"1000161" -> "1000163"  [label="CFG: "];
"1000160" -> "1000106"  [label="AST: "];
"1000161" -> "1000160"  [label="AST: "];
"1000164" -> "1000160"  [label="AST: "];
"1000161" -> "1000160"  [label="AST: "];
"1000161" -> "1000163"  [label="CFG: "];
"1000162" -> "1000161"  [label="AST: "];
"1000163" -> "1000161"  [label="AST: "];
"1000165" -> "1000161"  [label="CFG: "];
"1000169" -> "1000161"  [label="CFG: "];
"1000161" -> "1000216"  [label="DDG: USPOOF_ASCII"];
"1000161" -> "1000216"  [label="DDG: result"];
"1000161" -> "1000216"  [label="DDG: result == USPOOF_ASCII"];
"1000157" -> "1000161"  [label="DDG: result"];
"1000161" -> "1000168"  [label="DDG: result"];
"1000162" -> "1000161"  [label="AST: "];
"1000162" -> "1000157"  [label="CFG: "];
"1000163" -> "1000162"  [label="CFG: "];
"1000165" -> "1000164"  [label="AST: "];
"1000165" -> "1000161"  [label="CFG: "];
"1000164" -> "1000165"  [label="CFG: "];
"1000165" -> "1000164"  [label="DDG: true"];
"1000164" -> "1000160"  [label="AST: "];
"1000164" -> "1000165"  [label="CFG: "];
"1000165" -> "1000164"  [label="AST: "];
"1000216" -> "1000164"  [label="CFG: "];
"1000164" -> "1000216"  [label="DDG: <RET>"];
"1000165" -> "1000164"  [label="DDG: true"];
"1000170" -> "1000168"  [label="AST: "];
"1000170" -> "1000169"  [label="CFG: "];
"1000168" -> "1000170"  [label="CFG: "];
"1000166" -> "1000106"  [label="AST: "];
"1000167" -> "1000166"  [label="AST: "];
"1000176" -> "1000166"  [label="AST: "];
"1000167" -> "1000166"  [label="AST: "];
"1000167" -> "1000168"  [label="CFG: "];
"1000167" -> "1000171"  [label="CFG: "];
"1000168" -> "1000167"  [label="AST: "];
"1000171" -> "1000167"  [label="AST: "];
"1000179" -> "1000167"  [label="CFG: "];
"1000193" -> "1000167"  [label="CFG: "];
"1000167" -> "1000216"  [label="DDG: result == USPOOF_SINGLE_SCRIPT_RESTRICTIVE"];
"1000167" -> "1000216"  [label="DDG: result == USPOOF_SINGLE_SCRIPT_RESTRICTIVE &&\n       kana_letters_exceptions_.containsNone(label_string) &&\n       combining_diacritics_exceptions_.containsNone(label_string)"];
"1000167" -> "1000216"  [label="DDG: kana_letters_exceptions_.containsNone(label_string) &&\n       combining_diacritics_exceptions_.containsNone(label_string)"];
"1000168" -> "1000167"  [label="DDG: result"];
"1000168" -> "1000167"  [label="DDG: USPOOF_SINGLE_SCRIPT_RESTRICTIVE"];
"1000171" -> "1000167"  [label="DDG: kana_letters_exceptions_.containsNone(label_string)"];
"1000171" -> "1000167"  [label="DDG: combining_diacritics_exceptions_.containsNone(label_string)"];
"1000168" -> "1000167"  [label="AST: "];
"1000168" -> "1000170"  [label="CFG: "];
"1000169" -> "1000168"  [label="AST: "];
"1000170" -> "1000168"  [label="AST: "];
"1000173" -> "1000168"  [label="CFG: "];
"1000167" -> "1000168"  [label="CFG: "];
"1000168" -> "1000216"  [label="DDG: result"];
"1000168" -> "1000216"  [label="DDG: USPOOF_SINGLE_SCRIPT_RESTRICTIVE"];
"1000168" -> "1000167"  [label="DDG: result"];
"1000168" -> "1000167"  [label="DDG: USPOOF_SINGLE_SCRIPT_RESTRICTIVE"];
"1000161" -> "1000168"  [label="DDG: result"];
"1000169" -> "1000168"  [label="AST: "];
"1000169" -> "1000161"  [label="CFG: "];
"1000170" -> "1000169"  [label="CFG: "];
"1000104" -> "1000103"  [label="AST: "];
"1000104" -> "1000216"  [label="DDG: label"];
"1000358" -> "1000103"  [label="AST: "];
"1000173" -> "1000172"  [label="AST: "];
"1000173" -> "1000168"  [label="CFG: "];
"1000172" -> "1000173"  [label="CFG: "];
"1000171" -> "1000167"  [label="AST: "];
"1000171" -> "1000172"  [label="CFG: "];
"1000171" -> "1000174"  [label="CFG: "];
"1000172" -> "1000171"  [label="AST: "];
"1000174" -> "1000171"  [label="AST: "];
"1000167" -> "1000171"  [label="CFG: "];
"1000171" -> "1000216"  [label="DDG: kana_letters_exceptions_.containsNone(label_string)"];
"1000171" -> "1000216"  [label="DDG: combining_diacritics_exceptions_.containsNone(label_string)"];
"1000171" -> "1000167"  [label="DDG: kana_letters_exceptions_.containsNone(label_string)"];
"1000171" -> "1000167"  [label="DDG: combining_diacritics_exceptions_.containsNone(label_string)"];
"1000172" -> "1000171"  [label="DDG: label_string"];
"1000174" -> "1000171"  [label="DDG: label_string"];
"1000172" -> "1000171"  [label="AST: "];
"1000172" -> "1000173"  [label="CFG: "];
"1000173" -> "1000172"  [label="AST: "];
"1000175" -> "1000172"  [label="CFG: "];
"1000171" -> "1000172"  [label="CFG: "];
"1000172" -> "1000216"  [label="DDG: label_string"];
"1000172" -> "1000171"  [label="DDG: label_string"];
"1000136" -> "1000172"  [label="DDG: label_string"];
"1000172" -> "1000174"  [label="DDG: label_string"];
"1000172" -> "1000188"  [label="DDG: label_string"];
"1000172" -> "1000192"  [label="DDG: label_string"];
"1000175" -> "1000174"  [label="AST: "];
"1000175" -> "1000172"  [label="CFG: "];
"1000174" -> "1000175"  [label="CFG: "];
"1000174" -> "1000171"  [label="AST: "];
"1000174" -> "1000175"  [label="CFG: "];
"1000175" -> "1000174"  [label="AST: "];
"1000171" -> "1000174"  [label="CFG: "];
"1000174" -> "1000216"  [label="DDG: label_string"];
"1000174" -> "1000171"  [label="DDG: label_string"];
"1000172" -> "1000174"  [label="DDG: label_string"];
"1000174" -> "1000188"  [label="DDG: label_string"];
"1000174" -> "1000192"  [label="DDG: label_string"];
"1000180" -> "1000178"  [label="AST: "];
"1000180" -> "1000181"  [label="CFG: "];
"1000181" -> "1000180"  [label="AST: "];
"1000178" -> "1000180"  [label="CFG: "];
"1000180" -> "1000216"  [label="DDG: top_level_domain.starts_with(\\".xn--\\")"];
"1000180" -> "1000178"  [label="DDG: top_level_domain.starts_with(\\".xn--\\")"];
"1000181" -> "1000180"  [label="DDG: \\".xn--\\""];
"1000181" -> "1000180"  [label="AST: "];
"1000181" -> "1000182"  [label="CFG: "];
"1000182" -> "1000181"  [label="AST: "];
"1000180" -> "1000181"  [label="CFG: "];
"1000181" -> "1000180"  [label="DDG: \\".xn--\\""];
"1000176" -> "1000166"  [label="AST: "];
"1000177" -> "1000176"  [label="AST: "];
"1000178" -> "1000176"  [label="AST: "];
"1000183" -> "1000176"  [label="AST: "];
"1000182" -> "1000181"  [label="AST: "];
"1000182" -> "1000179"  [label="CFG: "];
"1000181" -> "1000182"  [label="CFG: "];
"1000178" -> "1000176"  [label="AST: "];
"1000178" -> "1000180"  [label="CFG: "];
"1000179" -> "1000178"  [label="AST: "];
"1000180" -> "1000178"  [label="AST: "];
"1000186" -> "1000178"  [label="CFG: "];
"1000178" -> "1000216"  [label="DDG: !top_level_domain.starts_with(\\".xn--\\")"];
"1000180" -> "1000178"  [label="DDG: top_level_domain.starts_with(\\".xn--\\")"];
"1000178" -> "1000185"  [label="DDG: is_tld_ascii"];
"1000179" -> "1000178"  [label="AST: "];
"1000179" -> "1000167"  [label="CFG: "];
"1000182" -> "1000179"  [label="CFG: "];
"1000184" -> "1000183"  [label="AST: "];
"1000184" -> "1000185"  [label="CFG: "];
"1000184" -> "1000187"  [label="CFG: "];
"1000185" -> "1000184"  [label="AST: "];
"1000187" -> "1000184"  [label="AST: "];
"1000183" -> "1000184"  [label="CFG: "];
"1000184" -> "1000216"  [label="DDG: !is_tld_ascii"];
"1000184" -> "1000216"  [label="DDG: !IsMadeOfLatinAlikeCyrillic(label_string)"];
"1000184" -> "1000216"  [label="DDG: !is_tld_ascii || !IsMadeOfLatinAlikeCyrillic(label_string)"];
"1000184" -> "1000183"  [label="DDG: !is_tld_ascii || !IsMadeOfLatinAlikeCyrillic(label_string)"];
"1000185" -> "1000184"  [label="DDG: is_tld_ascii"];
"1000187" -> "1000184"  [label="DDG: IsMadeOfLatinAlikeCyrillic(label_string)"];
"1000185" -> "1000184"  [label="AST: "];
"1000185" -> "1000186"  [label="CFG: "];
"1000186" -> "1000185"  [label="AST: "];
"1000189" -> "1000185"  [label="CFG: "];
"1000184" -> "1000185"  [label="CFG: "];
"1000185" -> "1000216"  [label="DDG: is_tld_ascii"];
"1000185" -> "1000184"  [label="DDG: is_tld_ascii"];
"1000178" -> "1000185"  [label="DDG: is_tld_ascii"];
"1000186" -> "1000185"  [label="AST: "];
"1000186" -> "1000178"  [label="CFG: "];
"1000185" -> "1000186"  [label="CFG: "];
"1000187" -> "1000184"  [label="AST: "];
"1000187" -> "1000188"  [label="CFG: "];
"1000188" -> "1000187"  [label="AST: "];
"1000184" -> "1000187"  [label="CFG: "];
"1000187" -> "1000216"  [label="DDG: IsMadeOfLatinAlikeCyrillic(label_string)"];
"1000187" -> "1000184"  [label="DDG: IsMadeOfLatinAlikeCyrillic(label_string)"];
"1000188" -> "1000187"  [label="DDG: label_string"];
"1000188" -> "1000187"  [label="AST: "];
"1000188" -> "1000189"  [label="CFG: "];
"1000189" -> "1000188"  [label="AST: "];
"1000187" -> "1000188"  [label="CFG: "];
"1000188" -> "1000216"  [label="DDG: label_string"];
"1000188" -> "1000187"  [label="DDG: label_string"];
"1000172" -> "1000188"  [label="DDG: label_string"];
"1000136" -> "1000188"  [label="DDG: label_string"];
"1000174" -> "1000188"  [label="DDG: label_string"];
"1000183" -> "1000176"  [label="AST: "];
"1000183" -> "1000184"  [label="CFG: "];
"1000184" -> "1000183"  [label="AST: "];
"1000216" -> "1000183"  [label="CFG: "];
"1000183" -> "1000216"  [label="DDG: <RET>"];
"1000184" -> "1000183"  [label="DDG: !is_tld_ascii || !IsMadeOfLatinAlikeCyrillic(label_string)"];
"1000189" -> "1000188"  [label="AST: "];
"1000189" -> "1000185"  [label="CFG: "];
"1000188" -> "1000189"  [label="CFG: "];
"1000190" -> "1000106"  [label="AST: "];
"1000191" -> "1000190"  [label="AST: "];
"1000197" -> "1000190"  [label="AST: "];
"1000193" -> "1000192"  [label="AST: "];
"1000193" -> "1000167"  [label="CFG: "];
"1000192" -> "1000193"  [label="CFG: "];
"1000191" -> "1000190"  [label="AST: "];
"1000191" -> "1000192"  [label="CFG: "];
"1000191" -> "1000194"  [label="CFG: "];
"1000192" -> "1000191"  [label="AST: "];
"1000194" -> "1000191"  [label="AST: "];
"1000198" -> "1000191"  [label="CFG: "];
"1000201" -> "1000191"  [label="CFG: "];
"1000191" -> "1000216"  [label="DDG: !lgc_letters_n_ascii_.containsAll(label_string)"];
"1000191" -> "1000216"  [label="DDG: non_ascii_latin_letters_.containsSome(label_string) &&\n      !lgc_letters_n_ascii_.containsAll(label_string)"];
"1000191" -> "1000216"  [label="DDG: non_ascii_latin_letters_.containsSome(label_string)"];
"1000192" -> "1000191"  [label="DDG: label_string"];
"1000194" -> "1000191"  [label="DDG: lgc_letters_n_ascii_.containsAll(label_string)"];
"1000192" -> "1000191"  [label="AST: "];
"1000192" -> "1000193"  [label="CFG: "];
"1000193" -> "1000192"  [label="AST: "];
"1000196" -> "1000192"  [label="CFG: "];
"1000191" -> "1000192"  [label="CFG: "];
"1000192" -> "1000216"  [label="DDG: label_string"];
"1000192" -> "1000191"  [label="DDG: label_string"];
"1000172" -> "1000192"  [label="DDG: label_string"];
"1000136" -> "1000192"  [label="DDG: label_string"];
"1000174" -> "1000192"  [label="DDG: label_string"];
"1000192" -> "1000195"  [label="DDG: label_string"];
"1000192" -> "1000211"  [label="DDG: label_string"];
"1000196" -> "1000195"  [label="AST: "];
"1000196" -> "1000192"  [label="CFG: "];
"1000195" -> "1000196"  [label="CFG: "];
"1000194" -> "1000191"  [label="AST: "];
"1000194" -> "1000195"  [label="CFG: "];
"1000195" -> "1000194"  [label="AST: "];
"1000191" -> "1000194"  [label="CFG: "];
"1000194" -> "1000216"  [label="DDG: lgc_letters_n_ascii_.containsAll(label_string)"];
"1000194" -> "1000191"  [label="DDG: lgc_letters_n_ascii_.containsAll(label_string)"];
"1000195" -> "1000194"  [label="DDG: label_string"];
"1000195" -> "1000194"  [label="AST: "];
"1000195" -> "1000196"  [label="CFG: "];
"1000196" -> "1000195"  [label="AST: "];
"1000194" -> "1000195"  [label="CFG: "];
"1000195" -> "1000216"  [label="DDG: label_string"];
"1000195" -> "1000194"  [label="DDG: label_string"];
"1000192" -> "1000195"  [label="DDG: label_string"];
"1000195" -> "1000211"  [label="DDG: label_string"];
"1000198" -> "1000197"  [label="AST: "];
"1000198" -> "1000191"  [label="CFG: "];
"1000197" -> "1000198"  [label="CFG: "];
"1000198" -> "1000197"  [label="DDG: false"];
"1000197" -> "1000190"  [label="AST: "];
"1000197" -> "1000198"  [label="CFG: "];
"1000198" -> "1000197"  [label="AST: "];
"1000216" -> "1000197"  [label="CFG: "];
"1000197" -> "1000216"  [label="DDG: <RET>"];
"1000198" -> "1000197"  [label="DDG: false"];
"1000105" -> "1000103"  [label="AST: "];
"1000105" -> "1000216"  [label="DDG: top_level_domain"];
"1000105" -> "1000151"  [label="DDG: top_level_domain"];
"1000359" -> "1000103"  [label="AST: "];
"1000106" -> "1000103"  [label="AST: "];
"1000107" -> "1000106"  [label="AST: "];
"1000108" -> "1000106"  [label="AST: "];
"1000111" -> "1000106"  [label="AST: "];
"1000112" -> "1000106"  [label="AST: "];
"1000125" -> "1000106"  [label="AST: "];
"1000134" -> "1000106"  [label="AST: "];
"1000135" -> "1000106"  [label="AST: "];
"1000140" -> "1000106"  [label="AST: "];
"1000157" -> "1000106"  [label="AST: "];
"1000160" -> "1000106"  [label="AST: "];
"1000166" -> "1000106"  [label="AST: "];
"1000190" -> "1000106"  [label="AST: "];
"1000199" -> "1000106"  [label="AST: "];
"1000200" -> "1000106"  [label="AST: "];
"1000205" -> "1000106"  [label="AST: "];
"1000211" -> "1000106"  [label="AST: "];
"1000213" -> "1000106"  [label="AST: "];
"1000200" -> "1000106"  [label="AST: "];
"1000200" -> "1000202"  [label="CFG: "];
"1000201" -> "1000200"  [label="AST: "];
"1000202" -> "1000200"  [label="AST: "];
"1000207" -> "1000200"  [label="CFG: "];
"1000200" -> "1000216"  [label="DDG: reinterpret_cast<icu::RegexMatcher*>(DangerousPatternTLS().Get())"];
"1000202" -> "1000200"  [label="DDG: DangerousPatternTLS().Get()"];
"1000200" -> "1000206"  [label="DDG: dangerous_pattern"];
"1000201" -> "1000200"  [label="AST: "];
"1000201" -> "1000191"  [label="CFG: "];
"1000203" -> "1000201"  [label="CFG: "];
"1000204" -> "1000202"  [label="AST: "];
"1000204" -> "1000203"  [label="CFG: "];
"1000202" -> "1000204"  [label="CFG: "];
"1000202" -> "1000200"  [label="AST: "];
"1000202" -> "1000204"  [label="CFG: "];
"1000203" -> "1000202"  [label="AST: "];
"1000204" -> "1000202"  [label="AST: "];
"1000200" -> "1000202"  [label="CFG: "];
"1000202" -> "1000216"  [label="DDG: DangerousPatternTLS().Get()"];
"1000202" -> "1000200"  [label="DDG: DangerousPatternTLS().Get()"];
"1000205" -> "1000106"  [label="AST: "];
"1000206" -> "1000205"  [label="AST: "];
"1000208" -> "1000205"  [label="AST: "];
"1000208" -> "1000205"  [label="AST: "];
"1000209" -> "1000208"  [label="AST: "];
"1000206" -> "1000205"  [label="AST: "];
"1000206" -> "1000207"  [label="CFG: "];
"1000207" -> "1000206"  [label="AST: "];
"1000210" -> "1000206"  [label="CFG: "];
"1000212" -> "1000206"  [label="CFG: "];
"1000206" -> "1000216"  [label="DDG: !dangerous_pattern"];
"1000206" -> "1000216"  [label="DDG: dangerous_pattern"];
"1000200" -> "1000206"  [label="DDG: dangerous_pattern"];
"1000206" -> "1000209"  [label="DDG: dangerous_pattern"];
"1000207" -> "1000206"  [label="AST: "];
"1000207" -> "1000200"  [label="CFG: "];
"1000206" -> "1000207"  [label="CFG: "];
"1000108" -> "1000106"  [label="AST: "];
"1000108" -> "1000110"  [label="CFG: "];
"1000109" -> "1000108"  [label="AST: "];
"1000110" -> "1000108"  [label="AST: "];
"1000113" -> "1000108"  [label="CFG: "];
"1000108" -> "1000216"  [label="DDG: U_ZERO_ERROR"];
"1000108" -> "1000127"  [label="DDG: status"];
"1000109" -> "1000108"  [label="AST: "];
"1000109" -> "1000103"  [label="CFG: "];
"1000110" -> "1000109"  [label="CFG: "];
"1000110" -> "1000108"  [label="AST: "];
"1000110" -> "1000109"  [label="CFG: "];
"1000108" -> "1000110"  [label="CFG: "];
"1000112" -> "1000106"  [label="AST: "];
"1000112" -> "1000114"  [label="CFG: "];
"1000113" -> "1000112"  [label="AST: "];
"1000114" -> "1000112"  [label="AST: "];
"1000128" -> "1000112"  [label="CFG: "];
"1000112" -> "1000216"  [label="DDG: uspoof_check(checker_, label.data(),\n                   base::checked_cast<int32_t>(label.size()), nullptr, &status)"];
"1000112" -> "1000216"  [label="DDG: result"];
"1000114" -> "1000112"  [label="DDG: label.data()"];
"1000114" -> "1000112"  [label="DDG: nullptr"];
"1000114" -> "1000112"  [label="DDG: checker_"];
"1000114" -> "1000112"  [label="DDG: &status"];
"1000114" -> "1000112"  [label="DDG: base::checked_cast<int32_t>(label.size())"];
"1000112" -> "1000129"  [label="DDG: result"];
"1000112" -> "1000157"  [label="DDG: result"];
"1000113" -> "1000112"  [label="AST: "];
"1000113" -> "1000108"  [label="CFG: "];
"1000115" -> "1000113"  [label="CFG: "];
"1000115" -> "1000114"  [label="AST: "];
"1000115" -> "1000113"  [label="CFG: "];
"1000116" -> "1000115"  [label="CFG: "];
"1000116" -> "1000114"  [label="AST: "];
"1000116" -> "1000115"  [label="CFG: "];
"1000118" -> "1000116"  [label="CFG: "];
"1000114" -> "1000112"  [label="AST: "];
"1000114" -> "1000123"  [label="CFG: "];
"1000115" -> "1000114"  [label="AST: "];
"1000116" -> "1000114"  [label="AST: "];
"1000117" -> "1000114"  [label="AST: "];
"1000122" -> "1000114"  [label="AST: "];
"1000123" -> "1000114"  [label="AST: "];
"1000112" -> "1000114"  [label="CFG: "];
"1000114" -> "1000216"  [label="DDG: base::checked_cast<int32_t>(label.size())"];
"1000114" -> "1000216"  [label="DDG: &status"];
"1000114" -> "1000216"  [label="DDG: checker_"];
"1000114" -> "1000216"  [label="DDG: nullptr"];
"1000114" -> "1000216"  [label="DDG: label.data()"];
"1000114" -> "1000112"  [label="DDG: label.data()"];
"1000114" -> "1000112"  [label="DDG: nullptr"];
"1000114" -> "1000112"  [label="DDG: checker_"];
"1000114" -> "1000112"  [label="DDG: &status"];
"1000114" -> "1000112"  [label="DDG: base::checked_cast<int32_t>(label.size())"];
"1000117" -> "1000114"  [label="DDG: base::checked_cast"];
"1000117" -> "1000114"  [label="DDG: int32_t>(label.size())"];
"1000210" -> "1000209"  [label="AST: "];
"1000210" -> "1000206"  [label="CFG: "];
"1000209" -> "1000210"  [label="CFG: "];
"1000209" -> "1000208"  [label="AST: "];
"1000209" -> "1000210"  [label="CFG: "];
"1000210" -> "1000209"  [label="AST: "];
"1000212" -> "1000209"  [label="CFG: "];
"1000209" -> "1000216"  [label="DDG: DangerousPatternTLS().Set(dangerous_pattern)"];
"1000209" -> "1000216"  [label="DDG: dangerous_pattern"];
"1000206" -> "1000209"  [label="DDG: dangerous_pattern"];
"1000211" -> "1000106"  [label="AST: "];
"1000211" -> "1000212"  [label="CFG: "];
"1000212" -> "1000211"  [label="AST: "];
"1000215" -> "1000211"  [label="CFG: "];
"1000211" -> "1000216"  [label="DDG: label_string"];
"1000211" -> "1000216"  [label="DDG: dangerous_pattern->reset(label_string)"];
"1000192" -> "1000211"  [label="DDG: label_string"];
"1000195" -> "1000211"  [label="DDG: label_string"];
"1000212" -> "1000211"  [label="AST: "];
"1000212" -> "1000209"  [label="CFG: "];
"1000212" -> "1000206"  [label="CFG: "];
"1000211" -> "1000212"  [label="CFG: "];
"1000215" -> "1000214"  [label="AST: "];
"1000215" -> "1000211"  [label="CFG: "];
"1000214" -> "1000215"  [label="CFG: "];
"1000213" -> "1000106"  [label="AST: "];
"1000213" -> "1000214"  [label="CFG: "];
"1000214" -> "1000213"  [label="AST: "];
"1000216" -> "1000213"  [label="CFG: "];
"1000213" -> "1000216"  [label="DDG: <RET>"];
"1000214" -> "1000213"  [label="DDG: !dangerous_pattern->find()"];
"1000214" -> "1000213"  [label="AST: "];
"1000214" -> "1000215"  [label="CFG: "];
"1000215" -> "1000214"  [label="AST: "];
"1000213" -> "1000214"  [label="CFG: "];
"1000214" -> "1000216"  [label="DDG: !dangerous_pattern->find()"];
"1000214" -> "1000216"  [label="DDG: dangerous_pattern->find()"];
"1000214" -> "1000213"  [label="DDG: !dangerous_pattern->find()"];
"1000117" -> "1000114"  [label="AST: "];
"1000117" -> "1000119"  [label="CFG: "];
"1000118" -> "1000117"  [label="AST: "];
"1000119" -> "1000117"  [label="AST: "];
"1000122" -> "1000117"  [label="CFG: "];
"1000117" -> "1000216"  [label="DDG: base::checked_cast"];
"1000117" -> "1000216"  [label="DDG: int32_t>(label.size())"];
"1000117" -> "1000114"  [label="DDG: base::checked_cast"];
"1000117" -> "1000114"  [label="DDG: int32_t>(label.size())"];
"1000119" -> "1000117"  [label="DDG: int32_t"];
"1000119" -> "1000117"  [label="DDG: label.size()"];
"1000118" -> "1000117"  [label="AST: "];
"1000118" -> "1000116"  [label="CFG: "];
"1000120" -> "1000118"  [label="CFG: "];
"1000119" -> "1000117"  [label="AST: "];
"1000119" -> "1000121"  [label="CFG: "];
"1000120" -> "1000119"  [label="AST: "];
"1000121" -> "1000119"  [label="AST: "];
"1000117" -> "1000119"  [label="CFG: "];
"1000119" -> "1000216"  [label="DDG: label.size()"];
"1000119" -> "1000216"  [label="DDG: int32_t"];
"1000119" -> "1000117"  [label="DDG: int32_t"];
"1000119" -> "1000117"  [label="DDG: label.size()"];
"1000120" -> "1000119"  [label="AST: "];
"1000120" -> "1000118"  [label="CFG: "];
"1000121" -> "1000120"  [label="CFG: "];
"1000121" -> "1000119"  [label="AST: "];
"1000121" -> "1000120"  [label="CFG: "];
"1000119" -> "1000121"  [label="CFG: "];
"1000122" -> "1000114"  [label="AST: "];
"1000122" -> "1000117"  [label="CFG: "];
"1000124" -> "1000122"  [label="CFG: "];
"1000123" -> "1000114"  [label="AST: "];
"1000123" -> "1000124"  [label="CFG: "];
"1000124" -> "1000123"  [label="AST: "];
"1000114" -> "1000123"  [label="CFG: "];
"1000124" -> "1000123"  [label="AST: "];
"1000124" -> "1000122"  [label="CFG: "];
"1000123" -> "1000124"  [label="CFG: "];
"1000128" -> "1000127"  [label="AST: "];
"1000128" -> "1000112"  [label="CFG: "];
"1000127" -> "1000128"  [label="CFG: "];
"1000125" -> "1000106"  [label="AST: "];
"1000126" -> "1000125"  [label="AST: "];
"1000132" -> "1000125"  [label="AST: "];
"1000129" -> "1000126"  [label="AST: "];
"1000129" -> "1000131"  [label="CFG: "];
"1000130" -> "1000129"  [label="AST: "];
"1000131" -> "1000129"  [label="AST: "];
"1000126" -> "1000129"  [label="CFG: "];
"1000129" -> "1000216"  [label="DDG: result"];
"1000129" -> "1000216"  [label="DDG: USPOOF_ALL_CHECKS"];
"1000129" -> "1000126"  [label="DDG: result"];
"1000129" -> "1000126"  [label="DDG: USPOOF_ALL_CHECKS"];
"1000112" -> "1000129"  [label="DDG: result"];
"1000129" -> "1000157"  [label="DDG: result"];
"1000130" -> "1000129"  [label="AST: "];
"1000130" -> "1000127"  [label="CFG: "];
"1000131" -> "1000130"  [label="CFG: "];
"1000131" -> "1000129"  [label="AST: "];
"1000131" -> "1000130"  [label="CFG: "];
"1000129" -> "1000131"  [label="CFG: "];
"1000126" -> "1000125"  [label="AST: "];
"1000126" -> "1000127"  [label="CFG: "];
"1000126" -> "1000129"  [label="CFG: "];
"1000127" -> "1000126"  [label="AST: "];
"1000129" -> "1000126"  [label="AST: "];
"1000133" -> "1000126"  [label="CFG: "];
"1000137" -> "1000126"  [label="CFG: "];
"1000126" -> "1000216"  [label="DDG: U_FAILURE(status) || (result & USPOOF_ALL_CHECKS)"];
"1000126" -> "1000216"  [label="DDG: result & USPOOF_ALL_CHECKS"];
"1000126" -> "1000216"  [label="DDG: U_FAILURE(status)"];
"1000127" -> "1000126"  [label="DDG: status"];
"1000129" -> "1000126"  [label="DDG: result"];
"1000129" -> "1000126"  [label="DDG: USPOOF_ALL_CHECKS"];
"1000127" -> "1000126"  [label="AST: "];
"1000127" -> "1000128"  [label="CFG: "];
"1000128" -> "1000127"  [label="AST: "];
"1000130" -> "1000127"  [label="CFG: "];
"1000126" -> "1000127"  [label="CFG: "];
"1000127" -> "1000216"  [label="DDG: status"];
"1000127" -> "1000126"  [label="DDG: status"];
"1000108" -> "1000127"  [label="DDG: status"];
}
